0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 52               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 52               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 52               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 52               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 52               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 52               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 52               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 52               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 52               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 52               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 50               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 52               LD   (RST08),HL   
0094   22 D2 52               LD   (RST10),HL   
0097   22 D4 52               LD   (RST18),HL   
009A   22 D6 52               LD   (RST20),HL   
009D   22 D8 52               LD   (RST28),HL   
00A0   22 DA 52               LD   (RST30),HL   
00A3   22 DE 52               LD   (INTVEC),HL   
00A6   22 E0 52               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 52               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 52               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 50                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 51                  DW   BUF   ; vBUFPtr pointer into BUF
0188   A3 0D                  DW   next   ; nNext
018A   1E 53                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   7C                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   47                     DB   lsb(dquote_)   ; "
0203   3B                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   7E                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   44                     DB   lsb(comma_)   ; ,
020D   4A                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   79                     DB   lsb(slash_)   ; /	
0210   38                     DB   lsb(num_)   ; 0
0211   38                     DB   lsb(num_)   ; 1
0212   38                     DB   lsb(num_)   ; 2
0213   38                     DB   lsb(num_)   ; 3
0214   38                     DB   lsb(num_)   ; 4
0215   38                     DB   lsb(num_)   ; 5
0216   38                     DB   lsb(num_)   ; 6
0217   38                     DB   lsb(num_)   ; 7
0218   38                     DB   lsb(num_)   ; 8
0219   38                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   67                     DB   lsb(lt_)   ; <
021D   4D                     DB   lsb(eq_)   ; =
021E   5C                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   7C                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   41                     DB   lsb(caret_)   ; ^
023F   7C                     DB   lsb(nop_)   ; _
0240   47                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   3E                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   7C                     DB   lsb(nop_)   ; ~
025F   7C                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 81 03               JP   plus   
0303                AT_:         
0303   C3 93 03               JP   at   
0306                AMPER_:      
0306   C3 9D 03               JP   amper   
0309                DOLLAR_:      
0309   C3 36 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 F6 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 12 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C1 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 EF 04               JP   lbrace   
0318                RBRACE_:      
0318   C3 58 05               JP   rbrace   
031B                TICK_:       
031B   C3 CE 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 A8 06               JP   semicolon   
0321                DOT_:        
0321   C3 72 07               JP   dot   
0324                COLON_:      
0324   C3 7A 04               JP   colon   
0327                UPCASE_:      
0327   C3 53 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 58 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 6A 0A               JP   question   
0330                STAR_:       
0330   C3 F0 0A               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   21 00 00               LD   hl,0   ; is considered true
0336   18 20                  JR   eq1   
0338                NUM_:        
0338   C3 0C 0B               JP   num   
033B                HASH_:       
033B   C3 62 04               JP   hash   
033E                PIPE_:       
033E   C3 A8 03               JP   pipe   
0341                CARET_:      
0341   C3 97 09               JP   caret   
0344                COMMA_:      
0344   C3 44 07               JP   comma   
0347                DQUOTE_:      
0347   C3 67 0B               JP   dquote   
034A                MINUS_:      
034A   C3 8F 0B               JP   minus   
034D                EQ_:         
034D   03                     INC   bc   
034E   0A                     LD   a,(bc)   ; is it == ?
034F   FE 3D                  CP   "="   
0351   28 04                  JR   z,eq0   ; no its equality
0353   0B                     DEC   bc   
0354   C3 B0 04               JP   assign   ; no its assignment
0357                EQ0:         
0357   E1                     POP   hl   
0358                EQ1:         
0358   D1                     POP   de   
0359   C3 C6 08               JP   equals   
035C                GT_:         
035C   03                     INC   bc   
035D   0A                     LD   a,(bc)   
035E   FE 3E                  CP   ">"   
0360   CA 54 0B               JP   z,shiftRight   
0363   D1                     POP   de   
0364   E1                     POP   hl   
0365   18 09                  JR   lt1   
0367                LT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3C                  CP   "<"   
036B   CA 44 0B               JP   z,shiftLeft   
036E   E1                     POP   hl   
036F   D1                     POP   de   
0370                LT1:         
0370   FE 3D                  CP   "="   
0372   CA CE 08               JP   z,lessthaneq   
0375   0B                     DEC   bc   
0376   C3 D3 08               JP   lessthan   
0379                SLASH_:      
0379   C3 E3 05               JP   slash   
037C                NOP_:        
037C   DD E9                  JP   (ix)   
037E                RPAREN_:      
037E   C3 3C 0B               JP   rparen   
0381                             ;*******************************************************************
0381                             ; implementations
0381                             ;*******************************************************************
0381                PLUS:        
0381                ADD:         
0381   03                     INC   bc   
0382   0A                     LD   a,(bc)   
0383   FE 2B                  CP   "+"   ; ++ increment variable
0385   20 05                  JR   nz,add1   
0387   E1                     POP   hl   
0388   23                     INC   hl   
0389   C3 B2 04               JP   assign0   
038C                ADD1:        
038C   0B                     DEC   bc   
038D   D1                     POP   de   ; second term
038E   E1                     POP   hl   ; first term
038F   19                     ADD   hl,de   
0390                ADD3:        
0390   E5                     PUSH   hl   
0391   DD E9                  JP   (ix)   
0393                             ; @ addr
0393                             ; -- ptr
0393                AT:          
0393                ADDR:        
0393   ED 5B F2 52            LD   de,(vPointer)   
0397   21 F2 52               LD   hl,vPointer   
039A   C3 20 0C               JP   variable   
039D                AMPER:       
039D                AND:         
039D   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
039E   E1                     POP   hl   
039F   7B                     LD   a,e   
03A0   A5                     AND   l   
03A1   6F                     LD   l,a   
03A2   7A                     LD   a,d   
03A3   A4                     AND   h   
03A4                AND1:        
03A4   67                     LD   h,a   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                PIPE:        
03A8                OR:          
03A8   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03A9   E1                     POP   hl   
03AA   7B                     LD   a,e   
03AB   B5                     OR   l   
03AC   6F                     LD   l,a   
03AD   7A                     LD   a,d   
03AE   B4                     OR   h   
03AF   18 F3                  JR   and1   
03B1                XOR:         
03B1   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B2                XOR1:        
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   AD                     XOR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   AC                     XOR   h   
03B8   67                     LD   h,a   
03B9   E5                     PUSH   hl   
03BA   DD E9                  JP   (ix)   
03BC                INVERT:      ; Bitwise INVert the top member of the stack
03BC   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03BF   18 F1                  JR   xor1   
03C1                             ; %a .. %z
03C1                             ; -- value
03C1                             ; returns value of arg
03C1                PERCENT:      
03C1                ARG:         
03C1   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C4   FD 56 05               LD   d,(iy+5)   
03C7   EB                     EX   de,hl   
03C8   7D                     LD   a,l   ; arg_list* == null, skip
03C9   B4                     OR   h   
03CA   28 1A                  JR   z,arg0a   
03CC   23                     INC   hl   ; a = num_args, hl = arg_list*
03CD   7E                     LD   a,(hl)   
03CE   23                     INC   hl   
03CF   B7                     OR   a   
03D0   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D2   5F                     LD   e,a   ; e = a = num_args
03D3   03                     INC   bc   ; a = next char = dollar_name
03D4   0A                     LD   a,(bc)   
03D5   C5                     PUSH   bc   ; save IP
03D6   43                     LD   b,e   ; b = e = num_args
03D7   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DA   FD 56 03               LD   d,(iy+3)   
03DD                ARG0:        
03DD   1B                     DEC   de   ; a = dollar_name, de = next arg*
03DE   1B                     DEC   de   
03DF   BE                     CP   (hl)   
03E0   28 09                  JR   z,arg1   
03E2   23                     INC   hl   ; hl = next arg_list*
03E3   10 F8                  DJNZ   arg0   
03E5   C1                     POP   bc   ; no match, restore IP
03E6                ARG0A:       
03E6   11 00 00               LD   de,0   ; return 0
03E9   18 08                  JR   arg1a   
03EB                ARG1:        
03EB   C1                     POP   bc   ; restore IP
03EC   EB                     EX   de,hl   ; hl = arg*
03ED   22 F2 52               LD   (vPointer),hl   ; store arg* in setter
03F0   5E                     LD   e,(hl)   
03F1   23                     INC   hl   
03F2   56                     LD   d,(hl)   ; de = arg
03F3                ARG1A:       
03F3   D5                     PUSH   de   ; push arg
03F4   DD E9                  JP   (ix)   
03F6                LBRACK:      
03F6                ARRAYSTART:      
03F6   11 00 00               LD   de,0   ; create stack frame
03F9   D5                     PUSH   de   ; push null for IP
03FA   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
03FD   FD 56 05               LD   d,(iy+5)   ; 
0400   D5                     PUSH   de   ; 
0401   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0404   FD 56 03               LD   d,(iy+3)   ; 
0407   D5                     PUSH   de   ; 
0408   FD E5                  PUSH   iy   ; push BP
040A   FD 21 00 00            LD   iy,0   ; BP = SP
040E   FD 39                  ADD   iy,sp   
0410   DD E9                  JP   (ix)   
0412                RBRACK:      
0412                ARRAYEND:      
0412   FD 54                  LD   d,iyh   ; de = BP
0414   FD 5D                  LD   e,iyl   
0416   ED 43 00 53            LD   (vTemp1),bc   ; save IP
041A   62 6B                  LD   hl,de   ; hl = de = BP
041C   B7                     OR   a   
041D   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
041F   CB 3C                  SRL   h   ; 
0421   CB 1D                  RR   l   
0423   44 4D                  LD   bc,hl   ; bc = count
0425   2A F0 52               LD   hl,(vHeapPtr)   ; hl = array[-4]
0428   71                     LD   (hl),c   ; write num items in length word
0429   23                     INC   hl   
042A   70                     LD   (hl),b   
042B   23                     INC   hl   ; hl = array[0], bc = count
042C                             ; de = BP, hl = array[0], bc = count
042C   18 15                  JR   arrayEnd3   
042E                ARRAYEND1:      
042E   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0431   77                     LD   (hl),a   ; write lsb of array item
0432   23                     INC   hl   ; move to msb of array item
0433   3A E6 52               LD   a,(vDataWidth)   ; vDataWidth=1?
0436   3D                     DEC   a   
0437   28 05                  JR   z,arrayEnd2   
0439   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043C   77                     LD   (hl),a   ; write msb of array item
043D   23                     INC   hl   ; move to next word in array
043E                ARRAYEND2:      
043E   FD 2B                  DEC   iy   ; move to next word on stack
0440   FD 2B                  DEC   iy   
0442   0B                     DEC   bc   ; dec items count
0443                ARRAYEND3:      
0443   79                     LD   a,c   ; if not zero loop
0444   B0                     OR   b   
0445   20 E7                  JR   nz,arrayEnd1   
0447   EB                     EX   de,hl   ; de = end of array, hl = BP
0448   F9                     LD   sp,hl   ; sp = BP
0449   E1                     POP   hl   ; de = end of array, hl = old BP
044A   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044B   FD 62                  LD   iyh,d   
044D   FD 6B                  LD   iyl,e   
044F   D1                     POP   de   ; pop arg_list (discard)
0450   D1                     POP   de   ; pop first_arg* (discard)
0451   D1                     POP   de   ; pop IP (discard)
0452   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = array[-2]
0456   13                     INC   de   
0457   13                     INC   de   
0458   D5                     PUSH   de   ; return array[0]
0459   22 F0 52               LD   (vHeapPtr),hl   ; move heap* to end of array
045C   ED 4B 00 53            LD   bc,(vTemp1)   ; restore IP
0460   DD E9                  JP   (ix)   
0462                             ; index of an array, based on vDataWidth
0462                             ; array num -- value    ; also sets vPointer to address
0462                HASH:        
0462                ARRAYINDEX:      
0462   E1                     POP   hl   ; hl = index
0463   D1                     POP   de   ; de = array
0464   3A E6 52               LD   a,(vDataWidth)   ; a = data width
0467   3D                     DEC   a   
0468   28 01                  JR   z,arrayIndex1   
046A                ARRAYINDEX0:      
046A   29                     ADD   hl,hl   ; if data width = 2 then double
046B                ARRAYINDEX1:      
046B   19                     ADD   hl,de   ; add addr
046C   22 F2 52               LD   (vPointer),hl   ; store address in setter
046F   16 00                  LD   d,0   
0471   5E                     LD   e,(hl)   
0472   B7                     OR   a   ; check data width again
0473   28 02                  JR   z,arrayIndex2   
0475   23                     INC   hl   
0476   56                     LD   d,(hl)   
0477                ARRAYINDEX2:      
0477   D5                     PUSH   de   
0478   DD E9                  JP   (ix)   
047A                             ; arg_list - parses input (ab:c)
047A                             ; names after the : represent uninitialised locals
047A                             ; return values are the state of the stack after the block ends
047A                             ; format: numLocals totNumArgs argChars...
047A                COLON:       
047A                ARGLIST:      
047A   11 00 00               LD   de,0   ; d = count locals, e = count args ()
047D   2A F0 52               LD   hl,(vHeapPtr)   ; hl = heap*
0480   E5                     PUSH   hl   ; save start of arg_list
0481   23                     INC   hl   ; skip length fields to start of string
0482   23                     INC   hl   
0483   03                     INC   bc   ; point to next char
0484                ARGLIST1:      
0484   0A                     LD   a,(bc)   
0485   FE 3A                  CP   ":"   ; ":" switches from args to locals
0487   20 03                  JR   nz,arglist1a   
0489   14                     INC   d   ; non zero value local count acts as flag
048A   18 10                  JR   arglist3   
048C                ARGLIST1A:      
048C   FE 61                  CP   "a"   ; < "a" terminates arg_list
048E   38 0F                  JR   c,arglist4   
0490   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0492   30 0B                  JR   nc,arglist4   
0494                ARGLIST2:      
0494   77                     LD   (hl),a   
0495   23                     INC   hl   
0496   1C                     INC   e   ; increase arg count
0497   AF                     XOR   a   
0498   B2                     OR   d   
0499   28 01                  JR   z,arglist3   
049B   14                     INC   d   ; if d > 0 increase local count
049C                ARGLIST3:      
049C   03                     INC   bc   ; point to next char
049D   18 E5                  JR   arglist1   
049F                ARGLIST4:      
049F   0B                     DEC   bc   
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arglist5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARGLIST5:      
04A5   23                     INC   hl   
04A6   22 F0 52               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04A9   E1                     POP   hl   ; hl = start of arg_list
04AA   E5                     PUSH   hl   ; return start of arg_list
04AB   72                     LD   (hl),d   ; write number of locals at start - 1
04AC   23                     INC   hl   
04AD   73                     LD   (hl),e   ; write number of args + locals at start - 2
04AE   DD E9                  JP   (ix)   
04B0                             ; value _oldValue --            ; uses address in vPointer
04B0                ASSIGN:      
04B0   E1                     POP   hl   ; discard last accessed value
04B1   E1                     POP   hl   ; hl = new value
04B2                ASSIGN0:      
04B2   EB                     EX   de,hl   ; de = new value
04B3                ASSIGNX:      
04B3   2A F2 52               LD   hl,(vPointer)   
04B6   73                     LD   (hl),e   
04B7   3A E6 52               LD   a,(vDataWidth)   
04BA   3D                     DEC   a   ; is it byte?
04BB   28 02                  JR   z,assign1   
04BD   23                     INC   hl   
04BE   72                     LD   (hl),d   
04BF                ASSIGN1:      
04BF   DD E9                  JP   (ix)   
04C1                             ; /ab absolute
04C1                             ; num -- num
04C1                ABSOLUTE:      
04C1   E1                     POP   hl   
04C2   CB 7C                  BIT   7,h   
04C4   C8                     RET   z   
04C5   AF                     XOR   a   
04C6   95                     SUB   l   
04C7   6F                     LD   l,a   
04C8   9F                     SBC   a,a   
04C9   94                     SUB   h   
04CA   67                     LD   h,a   
04CB   E5                     PUSH   hl   
04CC   DD E9                  JP   (ix)   
04CE                             ; /ad addrOf
04CE                             ; char -- addr
04CE                ADDROF:      
04CE   E1                     POP   hl   ; a = char
04CF   7D                     LD   a,l   
04D0   FE 7B                  CP   "z"+1   ; if a > z then exit
04D2   30 19                  JR   nc,addrOf2   
04D4   D6 41                  SUB   "A"   ; a - 65
04D6   38 15                  JR   c,addrOf2   ; if < A then exit
04D8   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04DA   38 06                  JR   c,addrOf1   
04DC   D6 06                  SUB   "a"-("Z"+1)   
04DE   FE 1A                  CP   "Z"-"A"+1   
04E0   38 0B                  JR   c,addrOf2   ; if < a then exit
04E2                ADDROF1:      
04E2   87                     ADD   a,a   ; double a
04E3   21 00 52               LD   hl,VARS   ; hl = VARS + a
04E6   85                     ADD   a,l   
04E7   6F                     LD   l,a   
04E8   3E 00                  LD   a,0   
04EA   8C                     ADC   a,h   
04EB   67                     LD   h,a   
04EC   E5                     PUSH   hl   
04ED                ADDROF2:      
04ED   DD E9                  JP   (ix)   
04EF                LBRACE:      
04EF                BLOCKSTART:      
04EF   C5                     PUSH   bc   ; return pointer to first { of block
04F0   03                     INC   bc   
04F1   16 01                  LD   d,1   ; nesting: count first parenthesis
04F3                BLOCKSTART1:      ; Skip to end of definition
04F3   0A                     LD   a,(bc)   ; Get the next character
04F4   03                     INC   bc   ; Point to next character
04F5   FE 21                  CP   " " + 1   ; ignore whitespace
04F7   38 FA                  JR   c,blockStart1   
04F9   FE 29                  CP   ")"   
04FB   28 2D                  JR   z,blockStart4   
04FD   FE 7D                  CP   "}"   
04FF   28 29                  JR   z,blockStart4   
0501   FE 5D                  CP   "]"   
0503   28 25                  JR   z,blockStart4   
0505   FE 28                  CP   "("   
0507   28 16                  JR   z,blockStart2   
0509   FE 7B                  CP   "{"   
050B   28 12                  JR   z,blockStart2   
050D   FE 5B                  CP   "["   
050F   28 0E                  JR   z,blockStart2   
0511   FE 27                  CP   "'"   
0513   28 0D                  JR   z,blockStart3   
0515   FE 60                  CP   "`"   
0517   28 09                  JR   z,blockStart3   
0519   FE 22                  CP   DQ   
051B   28 05                  JR   z,blockStart3   
051D   18 D4                  JR   blockStart1   
051F                BLOCKSTART2:      
051F   14                     INC   d   
0520   18 D1                  JR   blockStart1   
0522                BLOCKSTART3:      
0522   3E 80                  LD   a,$80   
0524   AA                     XOR   d   
0525   57                     LD   d,a   
0526   20 CB                  JR   nz,blockStart1   
0528   18 03                  JR   blockStart5   
052A                BLOCKSTART4:      
052A   15                     DEC   d   
052B   20 C6                  JR   nz,blockStart1   ; get the next element
052D                BLOCKSTART5:      
052D   60 69                  LD   hl,bc   ; hl = IP
052F   11 1E 53               LD   de,HEAP   ; is IP pointing to object in heap
0532   B7                     OR   a   ; IP - HEAP
0533   ED 52                  SBC   hl,de   
0535   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0537   28 1C                  JR   z,blockStart6   
0539   60 69                  LD   hl,bc   ; hl = IP
053B   D1                     POP   de   ; de = block*
053C   ED 43 00 53            LD   (vTemp1),bc   ; save IP
0540   B7                     OR   a   ; bc = size
0541   ED 52                  SBC   hl,de   
0543   44 4D                  LD   bc,hl   
0545   EB                     EX   de,hl   ; hl = block* de = heap*
0546   ED 5B F0 52            LD   de,(vHeapPtr)   
054A   D5                     PUSH   de   ; return hblock*
054B   ED B0                  LDIR      ; copy size bytes from block* to hblock*
054D   ED 53 F0 52            LD   (vHeapPtr),de   ; heap* += size
0551   ED 4B 00 53            LD   bc,(vTemp1)   ; restore IP
0555                BLOCKSTART6:      
0555   0B                     DEC   bc   ; balanced, exit
0556   DD E9                  JP   (ix)   
0558                RBRACE:      
0558                BLOCKEND:      
0558   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
055B   FD 56 01               LD   d,(iy+1)   
055E   ED 53 00 53            LD   (vTemp1),de   
0562   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0565   FD 56 07               LD   d,(iy+7)   
0568   ED 53 02 53            LD   (vTemp2),de   
056C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
056F   FD 56 03               LD   d,(iy+3)   
0572   EB                     EX   de,hl   
0573   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0576   FD 56 01               LD   d,(iy+1)   
0579   13                     INC   de   ; for carry flag <=
057A   B7                     OR   a   
057B   ED 52                  SBC   hl,de   
057D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
057F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0581   FD 5D                  LD   e,iyl   
0583   21 08 00               LD   hl,8   
0586   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0587   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0588   18 0C                  JR   blockEnd2   
058A                BLOCKEND1:      ; same scope
058A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
058D   FD 56 03               LD   d,(iy+3)   
0590   EB                     EX   de,hl   
0591   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0593   FD 5D                  LD   e,iyl   
0595   EB                     EX   de,hl   
0596                BLOCKEND2:      
0596   44 4D                  LD   bc,hl   ; bc = hl = BP
0598   B7                     OR   a   ; hl = BP - SP = count
0599   ED 72                  SBC   hl,sp   
059B   7D                     LD   a,l   
059C   B4                     OR   h   
059D   28 09                  JR   z,blockEnd3   
059F   C5                     PUSH   bc   ; bc = count, hl = BP
05A0   44 4D                  LD   bc,hl   
05A2   E1                     POP   hl   
05A3   2B                     DEC   hl   ; hl = BP-1
05A4   1B                     DEC   de   ; de = args*-1
05A5   ED B8                  LDDR      
05A7   13                     INC   de   
05A8                BLOCKEND3:      
05A8   EB                     EX   de,hl   ; sp = de = new tos*
05A9   F9                     LD   sp,hl   
05AA   ED 4B 02 53            LD   bc,(vTemp2)   
05AE   FD 2A 00 53            LD   iy,(vTemp1)   
05B2   DD E9                  JP   (ix)   
05B4                             ; /br break from loop
05B4                             ; --
05B4                BREAK:       
05B4   E1                     POP   hl   
05B5   7D                     LD   a,l   
05B6   B4                     OR   h   
05B7   28 02                  JR   z,break1   
05B9   DD E9                  JP   (ix)   
05BB                BREAK1:      
05BB   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05BD   FD 54                  LD   d,iyh   
05BF   21 08 00               LD   hl,8   
05C2   19                     ADD   hl,de   
05C3   23                     INC   hl   
05C4   23                     INC   hl   
05C5   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05C8   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05CB   C3 58 05               JP   blockEnd   
05CE                TICK:        
05CE                CHAR:        
05CE   21 00 00               LD   hl,0   ; if "" is empty or null
05D1                CHAR1:       
05D1   03                     INC   bc   ; point to next char
05D2   0A                     LD   a,(bc)   
05D3   FE 27                  CP   "'"   ; ' is the terminator
05D5   28 09                  JR   z,char3   
05D7   FE 5C                  CP   $5c   ; \ is the escape
05D9   20 02                  JR   nz,char2   
05DB   03                     INC   bc   
05DC   0A                     LD   a,(bc)   
05DD                CHAR2:       
05DD   6F                     LD   l,a   
05DE   18 F1                  JR   char1   
05E0                CHAR3:       
05E0   E5                     PUSH   hl   
05E1   DD E9                  JP   (ix)   
05E3                SLASH:       
05E3                COMMAND:      
05E3   CD 3F 0C               CALL   jumpTable   
05E6   2F                     DB   "/"   ; // comment
05E7   9F 06                  DW   comment   
05E9   61                     DB   "a"   
05EA   22 06                  DW   command_a   
05EC   62                     DB   "b"   
05ED   2E 06                  DW   command_b   
05EF   63                     DB   "c"   ; /c chars
05F0   91 06                  DW   chars   
05F2   64                     DB   "d"   ; /d decimal
05F3   64 07                  DW   decimal   
05F5   66                     DB   "f"   
05F6   3A 06                  DW   command_f   
05F8   68                     DB   "h"   ; /h hexadecimal
05F9   6C 07                  DW   hexadecimal   
05FB   69                     DB   "i"   
05FC   46 06                  DW   command_i   
05FE   6B                     DB   "k"   ; /k key
05FF   8E 0A                  DW   key   
0601   6C                     DB   "l"   
0602   52 06                  DW   command_l   
0604   6D                     DB   "m"   
0605   5B 06                  DW   command_m   
0607   6E                     DB   "n"   ; /n numbers
0608   99 06                  DW   numbers   
060A   6F                     DB   "o"   ; /o output
060B   A0 0A                  DW   output   
060D   70                     DB   "p"   
060E   64 06                  DW   command_p   
0610   72                     DB   "r"   
0611   73 06                  DW   command_r   
0613   73                     DB   "s"   ; /s size
0614   EE 0B                  DW   size   
0616   74                     DB   "t"   ; /t true
0617   DB 08                  DW   true1   
0619   76                     DB   "v"   
061A   7C 06                  DW   command_v   
061C   78                     DB   "x"   ; /x xor
061D   B1 03                  DW   xor   
061F   00                     DB   NUL   
0620   53 07                  DW   div   
0622                COMMAND_A:      
0622   CD 3F 0C               CALL   jumpTable   
0625   62                     DB   "b"   ; /ab absolute
0626   C1 04                  DW   absolute   
0628   64                     DB   "d"   ; /ad address of
0629   CE 04                  DW   addrOf   
062B   00                     DB   NUL   
062C   E7 08                  DW   error1   
062E                COMMAND_B:      
062E   CD 3F 0C               CALL   jumpTable   
0631   72                     DB   "r"   ; /br break
0632   B4 05                  DW   break   
0634   79                     DB   "y"   ; /by cold boot
0635   06 0D                  DW   coldStart   
0637   00                     DB   NUL   
0638   E7 08                  DW   error1   
063A                COMMAND_F:      
063A   CD 3F 0C               CALL   jumpTable   
063D   65                     DB   "e"   ; /fe forEach
063E   EE 08                  DW   forEach   
0640   73                     DB   "s"   ; /fs funcSrc
0641   5C 09                  DW   funcSrc   
0643   00                     DB   NUL   
0644   E1 08                  DW   false1   
0646                COMMAND_I:      
0646   CD 3F 0C               CALL   jumpTable   
0649   6E                     DB   "n"   ; /in input
064A   83 0A                  DW   input   
064C   76                     DB   "v"   ; /iv invert
064D   BC 03                  DW   invert   
064F   00                     DB   NUL   
0650   E7 08                  DW   error1   
0652                COMMAND_L:      
0652   CD 3F 0C               CALL   jumpTable   
0655   69                     DB   "i"   ; /li literal
0656   97 0A                  DW   literal   
0658   00                     DB   NUL   
0659   E7 08                  DW   error1   
065B                COMMAND_M:      
065B   CD 3F 0C               CALL   jumpTable   
065E   70                     DB   "p"   ; /mp map
065F   A9 0A                  DW   map   
0661   00                     DB   NUL   
0662   E7 08                  DW   error1   
0664                COMMAND_P:      
0664   CD 3F 0C               CALL   jumpTable   
0667   62                     DB   "b"   ; /pb print buffer
0668   AE 0B                  DW   printBuffer   
066A   63                     DB   "c"   ; /pc print chars
066B   D4 0B                  DW   printChars   
066D   6B                     DB   "k"   ; /pk print stack
066E   E6 0B                  DW   printStack   
0670   00                     DB   NUL   
0671   E7 08                  DW   error1   
0673                COMMAND_R:      
0673   CD 3F 0C               CALL   jumpTable   
0676   65                     DB   "e"   ; /re remainder
0677   E8 0B                  DW   remain   
0679   00                     DB   NUL   
067A   E7 08                  DW   error1   
067C                COMMAND_V:      
067C   CD 3F 0C               CALL   jumpTable   
067F   62                     DB   "b"   
0680   05 0C                  DW   varBufPtr   
0682   68                     DB   "h"   
0683   0E 0C                  DW   varHeapPtr   
0685   74                     DB   "t"   
0686   17 0C                  DW   varTIBPtr   
0688   42                     DB   "B"   
0689   F6 0B                  DW   constBufStart   
068B   54                     DB   "T"   
068C   00 0C                  DW   constTIBStart   
068E   00                     DB   NUL   
068F   E7 08                  DW   error1   
0691                CHARS:       
0691   21 01 00               LD   hl,1   
0694                CHARS1:      
0694   22 E6 52               LD   (vDataWidth),hl   
0697   DD E9                  JP   (ix)   
0699                NUMBERS:      
0699   21 02 00               LD   hl,2   
069C   C3 94 06               JP   chars1   
069F                COMMENT:      
069F   03                     INC   bc   ; point to next char
06A0   0A                     LD   a,(bc)   
06A1   FE 20                  CP   " "   ; terminate on any char less than SP
06A3   30 FA                  JR   nc,comment   
06A5   0B                     DEC   bc   
06A6   DD E9                  JP   (ix)   
06A8                             ; ";" createFunc
06A8                             ; arg_list* block* -- func*
06A8                SEMICOLON:      
06A8                CREATEFUNC:      
06A8   ED 43 00 53            LD   (vTemp1),bc   ; save IP
06AC   E1                     POP   hl   ; hl = block*
06AD   22 02 53               LD   (vTemp2),hl   ; save block*
06B0   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06B3   FD 56 05               LD   d,(iy+5)   
06B6   7B                     LD   a,e   ; if arg_list == null then make a func
06B7   B2                     OR   d   
06B8   20 09                  JR   nz,createFunc0   
06BA   21 00 00               LD   hl,0   ; partial_array = null
06BD   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = compile*
06C1   18 65                  JR   createFunc5   
06C3                CREATEFUNC0:      
06C3   E1                     POP   hl   ; hl = inner_arg_list*
06C4   E5                     PUSH   hl   ; save inner_arg_list
06C5   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = compile*
06C9   7E                     LD   a,(hl)   ; compile inner_num_locals
06CA   4F                     LD   c,a   ; b = inner_num_locals
06CB   12                     LD   (de),a   
06CC   23                     INC   hl   
06CD   13                     INC   de   
06CE   7E                     LD   a,(hl)   ; compile inner_length
06CF   12                     LD   (de),a   
06D0   91                     SUB   c   ; a = inner_num args
06D1   23                     INC   hl   
06D2   13                     INC   de   
06D3   B7                     OR   a   ; compile args if inner_length > 0
06D4   28 05                  JR   z,createFunc1   
06D6   4F                     LD   c,a   ; bc = a
06D7   06 00                  LD   b,0   
06D9   ED B0                  LDIR      
06DB                CREATEFUNC1:      
06DB   EB                     EX   de,hl   ; hl = outer_arg_list
06DC   FD 5E 04               LD   e,(iy+4)   
06DF   FD 56 05               LD   d,(iy+5)   
06E2   EB                     EX   de,hl   
06E3   23                     INC   hl   ; a = outer_length
06E4   7E                     LD   a,(hl)   
06E5   23                     INC   hl   
06E6   B7                     OR   a   
06E7   28 05                  JR   z,createFunc2   
06E9   4F                     LD   c,a   
06EA   06 00                  LD   b,0   
06EC   ED B0                  LDIR      ; append outer_args
06EE                CREATEFUNC2:      ; a = outer_length
06EE   47                     LD   b,a   ; b = a = outer_length
06EF   2A F0 52               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
06F2   23                     INC   hl   
06F3   7E                     LD   a,(hl)   ; add outer_length to new length
06F4   80                     ADD   a,b   
06F5   77                     LD   (hl),a   
06F6   2B                     DEC   hl   
06F7   78                     LD   a,b   ; save outer_length in a'
06F8   08                     EX   af,af'   
06F9   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
06FA   7E                     LD   a,(hl)   ; c = a = inner_num_locals
06FB   B7                     OR   a   
06FC   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
06FE   4F                     LD   c,a   ; c = inner_num_locals
06FF   06 00                  LD   b,0   ; bc = inner_num_locals
0701   23                     INC   hl   ; a = inner_length
0702   7E                     LD   a,(hl)   
0703   91                     SUB   c   ; a = inner_num_args
0704   23                     INC   hl   ; hl = inner_arg_chars
0705   85                     ADD   a,l   ; hl += a
0706   6F                     LD   l,a   
0707   3E 00                  LD   a,0   
0709   84                     ADD   a,h   
070A   67                     LD   h,a   
070B   ED B0                  LDIR      ; append inner_locals
070D                CREATEFUNC2A:      
070D   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
070E   12                     LD   (de),a   ; compile partial_array length field
070F   13                     INC   de   
0710   AF                     XOR   a   
0711   12                     LD   (de),a   
0712   13                     INC   de   
0713   D5                     PUSH   de   ; push partial_array*
0714   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0715   FD 5E 02               LD   e,(iy+2)   
0718   FD 56 03               LD   d,(iy+3)   
071B   EB                     EX   de,hl   
071C                CREATEFUNC3:      
071C   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
071D   4E                     LD   c,(hl)   
071E   2B                     DEC   hl   
071F   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0720   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0721   13                     INC   de   
0722   79                     LD   a,c   
0723   12                     LD   (de),a   
0724   13                     INC   de   
0725   10 F5                  DJNZ   createFunc3   ; b = outer_length
0727                CREATEFUNC4:      
0727   E1                     POP   hl   ; hl = partial_array*
0728                CREATEFUNC5:      
0728   C1                     POP   bc   ; bc = new_arg_list*
0729   D5                     PUSH   de   ; return new func*
072A   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
072B   73                     LD   (hl),e   ; compile partial_array* to func
072C   23                     INC   hl   
072D   72                     LD   (hl),d   
072E   23                     INC   hl   
072F   ED 5B 02 53            LD   de,(vTemp2)   ; de = block*
0733   73                     LD   (hl),e   ; compile block* to func
0734   23                     INC   hl   
0735   72                     LD   (hl),d   
0736   23                     INC   hl   
0737   71                     LD   (hl),c   ; compile new_arg_list* to func
0738   23                     INC   hl   
0739   70                     LD   (hl),b   
073A   23                     INC   hl   
073B   22 F0 52               LD   (vHeapPtr),hl   ; bump heap ptr
073E   ED 4B 00 53            LD   bc,(vTemp1)   ; restore IP
0742   DD E9                  JP   (ix)   
0744                             ; , discard stack item
0744                             ; x y -- x
0744                COMMA:       
0744                DISCARD:      
0744   FD 54                  LD   d,iyh   ; limit this to SP <= BP
0746   FD 5D                  LD   e,iyl   
0748   EB                     EX   de,hl   
0749   B7                     OR   a   
074A   ED 72                  SBC   hl,sp   
074C   CB 7C                  BIT   7,h   
074E   20 01                  JR   nz,discard1   
0750   E1                     POP   hl   
0751                DISCARD1:      
0751   DD E9                  JP   (ix)   
0753                DIV:         
0753   D1                     POP   de   
0754   E1                     POP   hl   
0755   C5                     PUSH   bc   ; preserve the IP
0756   44 4D                  LD   bc,hl   
0758   CD AD 08               CALL   divide   
075B   EB                     EX   de,hl   
075C   ED 53 F4 52            LD   (vRemain),de   
0760   C1                     POP   bc   
0761   C3 90 03               JP   add3   
0764                DECIMAL:      
0764   21 0A 00               LD   hl,10   
0767                DECIMAL1:      
0767   22 E8 52               LD   (vNumBase),hl   
076A   DD E9                  JP   (ix)   
076C                HEXADECIMAL:      
076C   21 10 00               LD   hl,16   
076F   C3 67 07               JP   decimal1   
0772                DOT:         
0772   CD 3F 0C               CALL   jumpTable   
0775   61                     DB   "a"   ; .a print array
0776   84 07                  DW   bufferArray   
0778   63                     DB   "c"   ; .c print char
0779   8C 08                  DW   bufferChar   
077B   73                     DB   "s"   ; .s print string
077C   72 08                  DW   bufferString   
077E   78                     DB   "x"   ; .x print x chars
077F   91 08                  DW   bufferXChars   
0781   00                     DB   NUL   ; .  print number
0782   CD 07                  DW   bufferNumber   
0784                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0784                BUFFERARRAY:      
0784   CD 97 09               CALL   go   
0787   00 00                  DW   NUL   
0789   92 07                  DW   bufferArrayM_1563S1048   
078B   8D 07                  DW   $+2   
078D   02                     DB   2   
078E   03 61 62 63            .PSTR   "abc"   
0792                BUFFERARRAYM_1563S1048:      
0792   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
07CD                             ; /bd buffer decimal
07CD                             ; value --
07CD                BUFFERNUMBER:      
07CD   3A E8 52               LD   a,(vNumBase)   
07D0   FE 10                  CP   16   
07D2   28 66                  JR   z,bufferHex   ; else falls through
07D4                             ; /bd buffer decimal
07D4                             ; value --
07D4                BUFFERDEC:      
07D4   ED 5B EC 52            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
07D8   D9                     EXX      
07D9   E1                     POP   hl   ; hl = value
07DA   CD EE 07               CALL   bufferDec0   
07DD   D9                     EXX      ; de = buffer*' bc = IP
07DE   3E 20                  LD   a," "   ; append space to buffer
07E0   12                     LD   (de),a   
07E1   1C                     INC   e   ; buffer*++, wraparound
07E2   CC 28 0C               CALL   z,flushBuffer   
07E5   2A EC 52               LD   hl,(vBufPtr)   ; hl = buffer*
07E8   ED 53 EC 52            LD   (vBufPtr),de   ; update buffer* with buffer*'
07EC   DD E9                  JP   (ix)   
07EE                             ; hl = value
07EE                             ; de' = buffer*
07EE                             ; a, bc, de, hl destroyed
07EE                BUFFERDEC0:      
07EE   CB 7C                  BIT   7,h   
07F0   28 0C                  JR   z,bufferDec1   
07F2   D9                     EXX      
07F3   3E 2D                  LD   a,"-"   
07F5   12                     LD   (de),a   
07F6   13                     INC   de   
07F7   D9                     EXX      
07F8   AF                     XOR   a   
07F9   95                     SUB   l   
07FA   6F                     LD   l,a   
07FB   9F                     SBC   a,a   
07FC   94                     SUB   h   
07FD   67                     LD   h,a   
07FE                BUFFERDEC1:      
07FE   0E 00                  LD   c,0   ; leading zeros flag = false
0800   11 F0 D8               LD   de,-10000   
0803   CD 1E 08               CALL   bufferDec2   
0806   11 18 FC               LD   de,-1000   
0809   CD 1E 08               CALL   bufferDec2   
080C   11 9C FF               LD   de,-100   
080F   CD 1E 08               CALL   bufferDec2   
0812   1E F6                  LD   e,-10   
0814   CD 1E 08               CALL   bufferDec2   
0817   0C                     INC   c   ; flag = true for at least digit
0818   1E FF                  LD   e,-1   
081A   CD 1E 08               CALL   bufferDec2   
081D   C9                     RET      
081E                BUFFERDEC2:      
081E   06 2F                  LD   b,"0"-1   
0820                BUFFERDEC3:      
0820   04                     INC   b   
0821   19                     ADD   hl,de   
0822   38 FC                  JR   c,bufferDec3   
0824   ED 52                  SBC   hl,de   
0826   3E 30                  LD   a,"0"   
0828   B8                     CP   b   
0829   20 05                  JR   nz,bufferDec4   
082B   AF                     XOR   a   
082C   B1                     OR   c   
082D   C8                     RET   z   
082E   18 01                  JR   bufferDec5   
0830                BUFFERDEC4:      
0830   0C                     INC   c   
0831                BUFFERDEC5:      
0831   78                     LD   a,b   
0832   D9                     EXX      
0833   12                     LD   (de),a   
0834   1C                     INC   e   
0835   CC 28 0C               CALL   z,flushBuffer   
0838   D9                     EXX      
0839   C9                     RET      
083A                             ; /bh buffer hex
083A                             ; value --
083A                BUFFERHEX:      
083A   E1                     POP   hl   ; hl = value
083B   ED 5B EC 52            LD   de,(vBufPtr)   
083F   3E 24                  LD   a,"$"   ; # prefix
0841   12                     LD   (de),a   
0842   1C                     INC   e   ; buffer*++, wraparound
0843   CC 28 0C               CALL   z,flushBuffer   
0846   7C                     LD   a,h   
0847   CD 5B 08               CALL   bufferHex1   
084A   7D                     LD   a,l   
084B   CD 5B 08               CALL   bufferHex1   
084E   3E 20                  LD   a," "   ; append space to buffer
0850   12                     LD   (de),a   
0851   1C                     INC   e   ; buffer*++, wraparound
0852   CC 28 0C               CALL   z,flushBuffer   
0855   ED 53 EC 52            LD   (vBufPtr),de   
0859   DD E9                  JP   (ix)   
085B                BUFFERHEX1:      
085B   F5                     PUSH   af   
085C   1F                     RRA      
085D   1F                     RRA      
085E   1F                     RRA      
085F   1F                     RRA      
0860   CD 64 08               CALL   bufferHex2   
0863   F1                     POP   af   
0864                BUFFERHEX2:      
0864   E6 0F                  AND   0x0F   
0866   C6 90                  ADD   a,0x90   
0868   27                     DAA      
0869   CE 40                  ADC   a,0x40   
086B   27                     DAA      
086C   12                     LD   (de),a   
086D   1C                     INC   e   ; buffer*++, wraparound
086E   CC 28 0C               CALL   z,flushBuffer   
0871   C9                     RET      
0872                             ; /bs buffered string
0872                             ; string* --
0872                BUFFERSTRING:      
0872   E1                     POP   hl   ; hl = string*
0873   ED 5B EC 52            LD   de,(vBufPtr)   ; de = buffer*
0877   18 06                  JR   bufferString1   
0879                BUFFERSTRING0:      
0879   12                     LD   (de),a   ; a -> buffer*
087A   1C                     INC   e   ; buffer*++, wraparound
087B   CC 28 0C               CALL   z,flushBuffer   
087E   23                     INC   hl   
087F                BUFFERSTRING1:      
087F   7E                     LD   a,(hl)   ; a <- string*
0880   B7                     OR   a   ; if NUL exit loop
0881   20 F6                  JR   nz,bufferString0   
0883   2A EC 52               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0886   ED 53 EC 52            LD   (vBufPtr),de   ; save buffer*' in pointer
088A   DD E9                  JP   (ix)   
088C                             ; /bc buffer char
088C                             ; char --
088C                BUFFERCHAR:      
088C   21 01 00               LD   hl,1   
088F   18 01                  JR   bufferXChars0   
0891                             ; /bx buffered x chars
0891                             ; char length --
0891                BUFFERXCHARS:      
0891   E1                     POP   hl   ; hl = length
0892                BUFFERXCHARS0:      
0892   D1                     POP   de   ; a' = char
0893   7B                     LD   a,e   
0894   08                     EX   af,af'   
0895   ED 5B EC 52            LD   de,(vBufPtr)   ; de = buffer*
0899   18 08                  JR   bufferXChars2   
089B                BUFFERXCHARS1:      
089B   08                     EX   af,af'   
089C   12                     LD   (de),a   
089D   08                     EX   af,af'   
089E   1C                     INC   e   ; buffer*++, wraparound
089F   CC 28 0C               CALL   z,flushBuffer   
08A2   2B                     DEC   hl   
08A3                BUFFERXCHARS2:      
08A3   7D                     LD   a,l   
08A4   B4                     OR   h   
08A5   20 F4                  JR   nz,bufferXChars1   
08A7   ED 53 EC 52            LD   (vBufPtr),de   ; save buffer*'
08AB   DD E9                  JP   (ix)   
08AD                             ; division subroutine.
08AD                             ; bc: divisor, de: dividend, hl: remainder
08AD                DIVIDE:      
08AD   21 00 00               LD   hl,0   ; zero the remainder
08B0   3E 10                  LD   a,16   ; loop counter
08B2                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08B2   CB 21                  SLA   c   
08B4   CB 10                  RL   b   
08B6   ED 6A                  ADC   hl,hl   
08B8   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08BA   38 03                  JR   c,divide2   
08BC   0C                     INC   c   
08BD   18 01                  JR   divide3   
08BF                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08BF   19                     ADD   hl,de   
08C0                DIVIDE3:      
08C0   3D                     DEC   a   
08C1   20 EF                  JR   nz,divide1   
08C3   50 59                  LD   de,bc   ; result from bc to de
08C5   C9                     RET      
08C6                             ; hl = value1, de = value2
08C6                             ; hl = result
08C6                EQUALS:      
08C6   B7                     OR   a   ; reset the carry flag
08C7   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
08C9   28 10                  JR   z,true1   
08CB   C3 E1 08               JP   false1   
08CE                             ; hl = value1 de = value2
08CE                             ; hl = result
08CE                LESSTHANEQ:      
08CE   B7                     OR   a   
08CF   ED 52                  SBC   hl,de   
08D1   18 05                  JR   lessthan1   
08D3                             ; hl = value1 de = value2
08D3                             ; hl = result
08D3                LESSTHAN:      
08D3   B7                     OR   a   
08D4   ED 52                  SBC   hl,de   
08D6   28 09                  JR   z,false1   
08D8                LESSTHAN1:      
08D8   FA E1 08               JP   m,false1   
08DB                TRUE1:       
08DB   21 FF FF               LD   hl,TRUE   
08DE   E5                     PUSH   hl   
08DF   DD E9                  JP   (ix)   
08E1                NULL1:       
08E1                FALSE1:      
08E1   21 00 00               LD   hl,FALSE   
08E4   E5                     PUSH   hl   
08E5   DD E9                  JP   (ix)   
08E7                ERROR1:      
08E7   21 01 00               LD   hl,1   ; error 1: unknown command
08EA   E5                     PUSH   hl   
08EB   C3 C3 0D               JP   error   
08EE                             ; /fe forEach
08EE                             ; :o -- :s
08EE                          ;*Macro unroll: FUNC forEach, 0, "p"                       ; :p proc
08EE                FOREACH:      ; :p proc
08EE   CD 97 09               CALL   go   
08F1   00 00                  DW   NUL   
08F3   FA 08                  DW   forEachM_1780S1282   
08F5   F7 08                  DW   $+2   
08F7   00                     DB   0   
08F8   01 70                  .PSTR   "p"   
08FA                FOREACHM_1780S1282:      
08FA   7B                     DB   "{"   
08FB   3A 73 3A 54 7B         DB   ":s:T{"   ; :s source
0900   5B 30 5D 25 54 3D      DB   "[0]%T="   
0906   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
090E   3A 64 74 7B            DB   ":dt{"   
0912   7B 20 30 25 74 3D 3D 2F 62 72 20 25 64 20 25 54 30 23 3D 20 7D DB   "{ 0%t==/br %d %T0#= }"   ; 0: store talkback
0927   7B 20 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 70 5E 20 7D DB   "{ 1%t==/br %d %p^ }"   ; 1: send data to proc
093A   7B 20 32 25 74 21 3D 2F 62 72 20 30 20 31 20 25 54 30 23 5E 20 7D DB   "{ 2%t!=/br 0 1 %T0#^ }"   ; 0 or 1: get next data item
0950   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
0958   7D 3B                  DB   "};"   
095A   7D                     DB   "}"   
095B   00                     DB   0   
095C                             ; ; /fs funcSrc
095C                             ; ; func -- src
095C                             ; FUNC funcSrc, 1, "f"                      ; :f func or block
095C                             ; db "{"
095C                             ; db    ":kt{"                              ; :kt sink, type
095C                             ; db         "0%t==/br"                     ; break if t != 0
095C                             ; db         ":dt{"
095C                             ; db             "1%t==/br %f^ 1 %k^"       ; if t == 1 send data to sink
095C                             ; db         "}; 0 %k^"                      ; init sink
095C                             ; db     "};"
095C                             ; db "}"
095C                             ; db 0
095C                             ; ; /fs funcSrc
095C                             ; ; func -- src
095C                          ;*Macro unroll: FUNC funcSrc, 1, "f"                      ; :f func or block
095C                FUNCSRC:      ; :f func or block
095C   CD 97 09               CALL   go   
095F   00 00                  DW   NUL   
0961   68 09                  DW   funcSrcM_1807S1311   
0963   65 09                  DW   $+2   
0965   01                     DB   1   
0966   01 66                  .PSTR   "f"   
0968                FUNCSRCM_1807S1311:      
0968   7B                     DB   "{"   
0969   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
096D   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0975   3A 64 74 7B            DB   ":dt{"   
0979   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
098B   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0993   7D 3B                  DB   "};"   
0995   7D                     DB   "}"   
0996   00                     DB   0   
0997                             ; execute a block of code which ends with }
0997                             ; creates a root scope if BP == stack
0997                             ; else uses outer scope
0997                CARET:       
0997                GO:          
0997   D1                     POP   de   ; de = block*
0998                GO1:         
0998   7B                     LD   a,e   ; if block* == null, exit
0999   B2                     OR   d   
099A   20 02                  JR   nz,go2   
099C   DD E9                  JP   (ix)   
099E                GO2:         
099E   1A                     LD   a,(de)   
099F   FE 7B                  CP   "{"   
09A1   28 06                  JR   z,goBlock   
09A3   FE 28                  CP   "("   
09A5   C2 DC 09               JP   nz,goFunc   
09A8                             ; inc de                      ; de is the address to jump back to
09A8   D5                     PUSH   de   ; push de just before stack frame
09A9                GOBLOCK:      
09A9   ED 53 00 53            LD   (vTemp1),de   ; save de
09AD   21 00 50               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09B0   FD 54                  LD   d,iyh   
09B2   FD 5D                  LD   e,iyl   
09B4   B7                     OR   a   ; if stack* == BP then this is the root_scope
09B5   ED 52                  SBC   hl,de   
09B7   ED 5B 00 53            LD   de,(vTemp1)   ; restore de
09BB   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
09BC   B4                     OR   h   
09BD   3E 00                  LD   a,0   
09BF   28 6A                  JR   z,goFunc8   
09C1   C5                     PUSH   bc   ; push IP
09C2   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
09C5   FD 46 05               LD   b,(iy+5)   
09C8   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
09CB   FD 66 03               LD   h,(iy+3)   
09CE                GOBLOCK2:      
09CE   C5                     PUSH   bc   ; arg_list*
09CF   E5                     PUSH   hl   ; first_arg*
09D0   FD E5                  PUSH   iy   ; push BP
09D2   FD 21 00 00            LD   iy,0   ; BP = SP
09D6   FD 39                  ADD   iy,sp   
09D8   42 4B                  LD   bc,de   ; bc = de = block*-1
09DA   DD E9                  JP   (ix)   
09DC                GOFUNC:      ; execute func
09DC   EB                     EX   de,hl   ; hl = func*
09DD   5E                     LD   e,(hl)   ; de = partial_array*
09DE   23                     INC   hl   
09DF   56                     LD   d,(hl)   
09E0   23                     INC   hl   
09E1   7B                     LD   a,e   ; if partial_array* == null skip
09E2   B2                     OR   d   
09E3   28 21                  JR   z,goFunc3   
09E5   ED 43 00 53            LD   (vTemp1),bc   
09E9   22 02 53               LD   (vTemp2),hl   ; save bc,hl
09EC   EB                     EX   de,hl   ; hl = partial_array*
09ED   2B                     DEC   hl   ; bc = count
09EE   46                     LD   b,(hl)   
09EF   2B                     DEC   hl   
09F0   4E                     LD   c,(hl)   
09F1   23                     INC   hl   ; hl = array data*
09F2   23                     INC   hl   
09F3   18 06                  JR   goFunc2   ; push each item on stack
09F5                GOFUNC1:      
09F5   5E                     LD   e,(hl)   ; de = partial item
09F6   23                     INC   hl   
09F7   56                     LD   d,(hl)   
09F8   23                     INC   hl   
09F9   D5                     PUSH   de   ; push on stack
09FA   0B                     DEC   bc   
09FB                GOFUNC2:      
09FB   79                     LD   a,c   ; if count != 0 then loop
09FC   B0                     OR   b   
09FD   20 F6                  JR   nz,goFunc1   
09FF   ED 4B 00 53            LD   bc,(vTemp1)   ; restore bc
0A03   2A 02 53               LD   hl,(vTemp2)   ; restore hl
0A06                GOFUNC3:      
0A06   5E                     LD   e,(hl)   ; de = block*
0A07   23                     INC   hl   
0A08   56                     LD   d,(hl)   
0A09   23                     INC   hl   
0A0A   ED 53 00 53            LD   (vTemp1),de   ; save block*
0A0E   5E                     LD   e,(hl)   ; de = arg_list*
0A0F   23                     INC   hl   
0A10   56                     LD   d,(hl)   
0A11   23                     INC   hl   
0A12   EB                     EX   de,hl   ; hl = arg_list*
0A13   ED 5B 00 53            LD   de,(vTemp1)   ; restore de = block*
0A17   7D                     LD   a,l   ; if arg_list* == null a = 0
0A18   B4                     OR   h   
0A19   20 03                  JR   nz,goFunc4   
0A1B   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A1C   18 0D                  JR   goFunc8   
0A1E                GOFUNC4:      ; allocate locals
0A1E   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A1F   18 03                  JR   goFunc6   
0A21                GOFUNC5:      ; loop
0A21   3B                     DEC   sp   
0A22   3B                     DEC   sp   
0A23   3D                     DEC   a   
0A24                GOFUNC6:      
0A24   B7                     OR   a   
0A25   20 FA                  JR   nz,goFunc5   ; end loop
0A27                GOFUNC7:      
0A27   23                     INC   hl   ; a = num_args* x 2
0A28   7E                     LD   a,(hl)   
0A29   2B                     DEC   hl   
0A2A   87                     ADD   a,a   ; a *= 2
0A2B                GOFUNC8:      
0A2B   C5                     PUSH   bc   ; push IP
0A2C   44 4D                  LD   bc,hl   
0A2E   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A31   85                     ADD   a,l   
0A32   6F                     LD   l,a   
0A33   39                     ADD   hl,sp   
0A34   18 98                  JR   goBlock2   
0A36                DOLLAR:      
0A36                HEXNUM:      
0A36   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A39                HEXNUM1:      
0A39   03                     INC   bc   
0A3A   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A3B   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A3D   28 02                  JR   z,hexnum2   ; no a decimal
0A3F   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A41                HEXNUM2:      
0A41   D6 30                  SUB   $30   ; form decimal digit
0A43   DA 2E 0B               JP   c,num2   
0A46   FE 10                  CP   $0F+1   
0A48   D2 2E 0B               JP   nc,num2   
0A4B   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A4C   29                     ADD   hl,hl   ; 4X
0A4D   29                     ADD   hl,hl   ; 8X
0A4E   29                     ADD   hl,hl   ; 16X
0A4F   85                     ADD   a,l   ; add into bottom of hl
0A50   6F                     LD   l,a   
0A51   18 E6                  JR   hexnum1   
0A53                UPCASE:      
0A53   0A                     LD   a,(bc)   ; a = identifier char
0A54   D6 41                  SUB   "A"   ; "A" = 0
0A56   18 05                  JR   ident1   
0A58                LOWCASE:      
0A58   0A                     LD   a,(bc)   
0A59   D6 61                  SUB   "a"   
0A5B   C6 1A                  ADD   a,26   
0A5D                IDENT1:      
0A5D   87                     ADD   a,a   ; l = a * 2
0A5E   6F                     LD   l,a   
0A5F   26 52                  LD   h,msb(vars)   
0A61   22 F2 52               LD   (vPointer),hl   ; store address in setter
0A64   5E                     LD   e,(hl)   
0A65   23                     INC   hl   
0A66   56                     LD   d,(hl)   
0A67   D5                     PUSH   de   
0A68   DD E9                  JP   (ix)   
0A6A                             ; if
0A6A                             ; condition then -- value
0A6A                QUESTION:      
0A6A                IF:          
0A6A   03                     INC   bc   
0A6B   0A                     LD   a,(bc)   
0A6C   FE 3F                  CP   "?"   
0A6E   28 06                  JR   z,ifte   
0A70   0B                     DEC   bc   
0A71   11 00 00               LD   de,NUL   ; NUL pointer for else
0A74   18 01                  JR   ifte1   
0A76                             ; ifte
0A76                             ; condition then else -- value
0A76                IFTE:        
0A76   D1                     POP   de   ; de = else
0A77                IFTE1:       
0A77   E1                     POP   hl   ; hl = then
0A78   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0A79   7C                     LD   a,h   
0A7A   B5                     OR   l   
0A7B   E1                     POP   hl   ; hl = then
0A7C   CA 98 09               JP   z,go1   ; if z de = else
0A7F   EB                     EX   de,hl   ; condition = false, de = then
0A80   C3 98 09               JP   go1   
0A83                             ; Z80 port input
0A83                             ; port -- value
0A83                INPUT:       
0A83   E1                     POP   hl   
0A84   59                     LD   e,c   ; save IP
0A85   4D                     LD   c,l   
0A86   ED 68                  IN   l,(c)   
0A88   26 00                  LD   h,0   
0A8A   4B                     LD   c,e   ; restore IP
0A8B   E5                     PUSH   hl   
0A8C   DD E9                  JP   (ix)   
0A8E                KEY:         
0A8E   CD 81 00               CALL   getchar   
0A91   26 00                  LD   h,0   
0A93   6F                     LD   l,a   
0A94   E5                     PUSH   hl   
0A95   DD E9                  JP   (ix)   
0A97                             ; /li literal
0A97                             ; low level operation
0A97                             ; reads the next two bytes and
0A97                             ; pushes a word on the stack
0A97                             ; -- value
0A97                LITERAL:      
0A97   03                     INC   bc   
0A98   0A                     LD   a,(bc)   
0A99   6F                     LD   l,a   
0A9A   03                     INC   bc   
0A9B   0A                     LD   a,(bc)   
0A9C   67                     LD   h,a   
0A9D   E5                     PUSH   hl   
0A9E   DD E9                  JP   (ix)   
0AA0                             ; Z80 port output
0AA0                             ; value port --
0AA0                OUTPUT:      
0AA0   E1                     POP   hl   
0AA1   59                     LD   e,c   ; save IP
0AA2   4D                     LD   c,l   
0AA3   E1                     POP   hl   
0AA4   ED 69                  OUT   (c),l   
0AA6   4B                     LD   c,e   ; restore IP
0AA7   DD E9                  JP   (ix)   
0AA9                             ; /mp map
0AA9                             ; func -- :s00bbOm1r
0AA9                          ;*Macro unroll: FUNC map, 0, "f"                            ; :f func
0AA9                MAP:         ; :f func
0AA9   CD 97 09               CALL   go   
0AAC   00 00                  DW   NUL   
0AAE   B5 0A                  DW   mapM_2039S1554   
0AB0   B2 0A                  DW   $+2   
0AB2   00                     DB   0   
0AB3   01 66                  .PSTR   "f"   
0AB5                MAPM_2039S1554:      
0AB5   7B                     DB   "{"   
0AB6   3A 73 7B               DB   ":s{"   ; :s source
0AB9   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0ABD   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0AC5   3A 64 74 7B            DB   ":dt{"   
0AC9   31 25 74 3D 3D 7B 25 64 20 25 66 5E 7D 7B 25 64 7D 3F 3F DB   "1%t=={%d %f^}{%d}??"   ; if t == 1 pass data through func else raw
0ADC   25 74 20 25 6B 5E      DB   "%t %k^"   ; send data to sink
0AE2   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
0AEA   7D 3B                  DB   "};"   
0AEC   7D 3B                  DB   "};"   
0AEE   7D                     DB   "}"   
0AEF   00                     DB   0   
0AF0                STAR:        
0AF0                MUL:         
0AF0   D1                     POP   de   ; get first value
0AF1   E1                     POP   hl   
0AF2                MUL2:        
0AF2   C5                     PUSH   bc   ; Preserve the IP
0AF3   44 4D                  LD   bc,hl   ; bc = 2nd value
0AF5   21 00 00               LD   hl,0   
0AF8   3E 10                  LD   a,16   
0AFA                MUL3:        
0AFA   29                     ADD   hl,hl   
0AFB   CB 13                  RL   e   
0AFD   CB 12                  RL   d   
0AFF   30 04                  JR   nc,$+6   
0B01   09                     ADD   hl,bc   
0B02   30 01                  JR   nc,$+3   
0B04   13                     INC   de   
0B05   3D                     DEC   a   
0B06   20 F2                  JR   nz,mul3   
0B08   C1                     POP   bc   ; Restore the IP
0B09   C3 90 03               JP   add3   
0B0C                NUM:         
0B0C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B0F   0A                     LD   a,(bc)   ; Get numeral or -
0B10   FE 2D                  CP   "-"   
0B12   20 01                  JR   nz,num0   
0B14   03                     INC   bc   ; move to next char, no flags affected
0B15                NUM0:        
0B15   08                     EX   af,af'   ; save zero flag = 0 for later
0B16                NUM1:        
0B16   0A                     LD   a,(bc)   ; read digit
0B17   D6 30                  SUB   "0"   ; less than 0?
0B19   38 13                  JR   c,num2   ; not a digit, exit loop
0B1B   FE 0A                  CP   10   ; greater that 9?
0B1D   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B1F   03                     INC   bc   ; inc IP
0B20   54 5D                  LD   de,hl   ; multiply hl * 10
0B22   29                     ADD   hl,hl   
0B23   29                     ADD   hl,hl   
0B24   19                     ADD   hl,de   
0B25   29                     ADD   hl,hl   
0B26   85                     ADD   a,l   ; add digit in a to hl
0B27   6F                     LD   l,a   
0B28   3E 00                  LD   a,0   
0B2A   8C                     ADC   a,h   
0B2B   67                     LD   h,a   
0B2C   18 E8                  JR   num1   
0B2E                NUM2:        
0B2E   0B                     DEC   bc   
0B2F   08                     EX   af,af'   ; restore zero flag
0B30   20 07                  JR   nz,num3   
0B32   EB                     EX   de,hl   ; negate the value of hl
0B33   21 00 00               LD   hl,0   
0B36   B7                     OR   a   ; jump to sub2
0B37   ED 52                  SBC   hl,de   
0B39                NUM3:        
0B39   E5                     PUSH   hl   ; Put the number on the stack
0B3A   DD E9                  JP   (ix)   ; and process the next character
0B3C                RPAREN:      
0B3C   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B3F   FD 46 09               LD   b,(iy+9)   
0B42   DD E9                  JP   (ix)   
0B44                             ; shiftLeft
0B44                             ; value count -- value2          shift left count places
0B44                SHIFTLEFT:      
0B44   50 59                  LD   de,bc   ; save IP
0B46   C1                     POP   bc   ; bc = count
0B47   41                     LD   b,c   ; b = loop counter
0B48   E1                     POP   hl   
0B49   04                     INC   b   ; test for counter=0 case
0B4A   18 01                  JR   shiftLeft2   
0B4C                SHIFTLEFT1:      
0B4C   29                     ADD   hl,hl   ; left shift hl
0B4D                SHIFTLEFT2:      
0B4D   10 FD                  DJNZ   shiftLeft1   
0B4F   E5                     PUSH   hl   
0B50   42 4B                  LD   bc,de   ; restore IP
0B52   DD E9                  JP   (ix)   
0B54                             ; shiftRight
0B54                             ; value count -- value2          shift left count places
0B54                SHIFTRIGHT:      
0B54   50 59                  LD   de,bc   ; save IP
0B56   C1                     POP   bc   ; bc = count
0B57   41                     LD   b,c   ; b = loop counter
0B58   E1                     POP   hl   
0B59   04                     INC   b   ; test for counter=0 case
0B5A   18 04                  JR   shiftRight2   
0B5C                SHIFTRIGHT1:      
0B5C   CB 3C                  SRL   h   ; right shift hl
0B5E   CB 1D                  RR   l   
0B60                SHIFTRIGHT2:      
0B60   10 FA                  DJNZ   shiftRight1   
0B62   E5                     PUSH   hl   
0B63   42 4B                  LD   bc,de   ; restore IP
0B65   DD E9                  JP   (ix)   
0B67                             ; string
0B67                             ; -- ptr                        ; points to start of string chars,
0B67                             ; length is stored at start - 2 bytes
0B67                DQUOTE:      
0B67                STRING:      
0B67   2A F0 52               LD   hl,(vHeapPtr)   ; hl = heap*
0B6A   23                     INC   hl   ; skip length field to start
0B6B   23                     INC   hl   
0B6C   E5                     PUSH   hl   ; save start of string
0B6D   03                     INC   bc   ; point to next char
0B6E   18 03                  JR   string2   
0B70                STRING1:      
0B70   77                     LD   (hl),a   
0B71   23                     INC   hl   ; increase count
0B72   03                     INC   bc   ; point to next char
0B73                STRING2:      
0B73   0A                     LD   a,(bc)   
0B74   FE 22                  CP   DQ   ; " is the string terminator
0B76   28 04                  JR   z,string3   
0B78   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0B7A   20 F4                  JR   nz,string1   
0B7C                STRING3:      
0B7C   AF                     XOR   a   ; write NUL to terminate string
0B7D   77                     LD   (hl),a   ; hl = end of string
0B7E   23                     INC   hl   
0B7F   22 F0 52               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B82   2B                     DEC   hl   ; hl = end of string without terminator
0B83   D1                     POP   de   ; de = start of string
0B84   D5                     PUSH   de   ; return start of string
0B85   B7                     OR   a   ; hl = length bytes, de = start of string
0B86   ED 52                  SBC   hl,de   
0B88   EB                     EX   de,hl   
0B89   2B                     DEC   hl   ; write length bytes to length field at start - 2
0B8A   72                     LD   (hl),d   
0B8B   2B                     DEC   hl   
0B8C   73                     LD   (hl),e   
0B8D   DD E9                  JP   (ix)   
0B8F                MINUS:       ; negative sign or subtract
0B8F   03                     INC   bc   ; check if sign of a number
0B90   0A                     LD   a,(bc)   
0B91   0B                     DEC   bc   
0B92   FE 30                  CP   "0"   
0B94   38 05                  JR   c,sub   
0B96   FE 3A                  CP   "9"+1   
0B98   DA 38 03               JP   c,num_   
0B9B                SUB:         ; Subtract the value 2nd on stack from top of stack
0B9B   03                     INC   bc   
0B9C   FE 2D                  CP   "-"   
0B9E   20 05                  JR   nz,sub1   
0BA0   E1                     POP   hl   
0BA1   2B                     DEC   hl   
0BA2   C3 B2 04               JP   assign0   
0BA5                SUB1:        
0BA5   0B                     DEC   bc   
0BA6   D1                     POP   de   
0BA7   E1                     POP   hl   
0BA8   B7                     OR   a   
0BA9   ED 52                  SBC   hl,de   
0BAB   C3 90 03               JP   add3   
0BAE                             ; /pb printBuffer
0BAE                             ; --
0BAE                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0BAE                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0BAE                PRINTBUFFER:      
0BAE   CD 97 09               CALL   go   
0BB1   00 00                  DW   NUL   
0BB3   BA 0B                  DW   printBufferM_2209S1733   
0BB5   B7 0B                  DW   $+2   
0BB7   00                     DB   0   
0BB8   01 61                  .PSTR   "a"   
0BBA                PRINTBUFFERM_2209S1733:      
0BBA   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0BD4                             ; printChars
0BD4                             ; char* len --
0BD4                PRINTCHARS:      
0BD4   E1                     POP   hl   ; hl = count
0BD5   D1                     POP   de   ; de = char*
0BD6   CD E1 0B               CALL   printChars2   
0BD9   DD E9                  JP   (ix)   
0BDB                PRINTCHARS1:      
0BDB   1A                     LD   a,(de)   ; print char at char*
0BDC   CD 85 00               CALL   putchar   
0BDF   13                     INC   de   ; char*++
0BE0   2B                     DEC   hl   ; count--
0BE1                PRINTCHARS2:      
0BE1   7D                     LD   a,l   ; count == 0?
0BE2   B4                     OR   h   
0BE3   C8                     RET   z   
0BE4   18 F5                  JR   printChars1   ; if not loop
0BE6                             ; /pk print stack
0BE6                             ; --
0BE6                PRINTSTACK:      
0BE6                             ;     ld (vTemp1),bc
0BE6                             ;     call printStr
0BE6                             ;     .cstr "=> "
0BE6                             ;     ld hl,STACK
0BE6                             ;     sbc hl,sp
0BE6                             ;     srl h
0BE6                             ;     rr l
0BE6                             ;     ld bc,hl
0BE6                             ;     ld hl,STACK
0BE6                             ;     jr printStack2
0BE6                             ; printStack1:
0BE6                             ;     dec bc
0BE6                             ;     dec hl
0BE6                             ;     ld d,(hl)
0BE6                             ;     dec hl
0BE6                             ;     ld e,(hl)
0BE6                             ;     ex de,hl
0BE6                             ;     call prthex
0BE6                             ;     ex de,hl
0BE6                             ;     ld a," "
0BE6                             ;     call putchar
0BE6                             ; printStack2:
0BE6                             ;     ld a,c
0BE6                             ;     or b
0BE6                             ;     jr nz,printStack1
0BE6                             ;     call prompt
0BE6                             ;     ld bc,(vTemp1)
0BE6   DD E9                  JP   (ix)   
0BE8                REMAIN:      
0BE8   2A F4 52               LD   hl,(vRemain)   
0BEB   E5                     PUSH   hl   
0BEC   DD E9                  JP   (ix)   
0BEE                SIZE:        
0BEE   E1                     POP   hl   
0BEF   2B                     DEC   hl   ; msb size
0BF0   56                     LD   d,(hl)   
0BF1   2B                     DEC   hl   ; lsb size
0BF2   5E                     LD   e,(hl)   
0BF3   D5                     PUSH   de   
0BF4   DD E9                  JP   (ix)   
0BF6                CONSTBUFSTART:      
0BF6   11 00 51               LD   de,BUF   
0BF9   18 28                  JR   constant   
0BFB                CONSTHEAPSTART:      
0BFB   11 1E 53               LD   de,HEAP   
0BFE   18 23                  JR   constant   
0C00                CONSTTIBSTART:      
0C00   11 00 50               LD   de,TIB   
0C03   18 1E                  JR   constant   
0C05                VARBUFPTR:      
0C05   ED 5B EC 52            LD   de,(vBufPtr)   
0C09   21 EC 52               LD   hl,vBufPtr   
0C0C   18 12                  JR   variable   
0C0E                VARHEAPPTR:      
0C0E   ED 5B F0 52            LD   de,(vHeapPtr)   
0C12   21 F0 52               LD   hl,vHeapPtr   
0C15   18 09                  JR   variable   
0C17                VARTIBPTR:      
0C17   ED 5B EA 52            LD   de,(vTIBPtr)   
0C1B   21 EA 52               LD   hl,vTIBPtr   
0C1E   18 00                  JR   variable   
0C20                VARIABLE:      
0C20   22 F2 52               LD   (vPointer),hl   
0C23                CONSTANT:      
0C23   D5                     PUSH   de   
0C24   DD E9                  JP   (ix)   
0C26                             ; 
0C26                FILTER:      
0C26                SCAN:        
0C26   DD E9                  JP   (ix)   
0C28                             ;*******************************************************************
0C28                             ; general routines
0C28                             ;*******************************************************************
0C28                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0C28                FLUSHBUFFER:      
0C28   F5                     PUSH   af   
0C29   D5                     PUSH   de   
0C2A   E5                     PUSH   hl   
0C2B   2A EC 52               LD   hl,(vBufPtr)   
0C2E   11 00 51               LD   de,BUF   
0C31   ED 53 EC 52            LD   (vBufPtr),de   
0C35   B7                     OR   a   
0C36   ED 52                  SBC   hl,de   
0C38   CD E1 0B               CALL   printChars2   
0C3B   E1                     POP   hl   
0C3C   D1                     POP   de   
0C3D   F1                     POP   af   
0C3E   C9                     RET      
0C3F                             ; followed by a table
0C3F                             ; db char
0C3F                             ; dw addr
0C3F                             ; the final item must have char == NUL
0C3F                JUMPTABLE:      
0C3F   03                     INC   bc   
0C40   E1                     POP   hl   
0C41                JUMPTABLE0:      
0C41   AF                     XOR   a   
0C42   BE                     CP   (hl)   
0C43   28 09                  JR   z,jumpTable1   
0C45   0A                     LD   a,(bc)   
0C46   BE                     CP   (hl)   
0C47   28 06                  JR   z,jumpTable2   
0C49   23                     INC   hl   
0C4A   23                     INC   hl   
0C4B   23                     INC   hl   
0C4C   18 F3                  JR   jumpTable0   
0C4E                JUMPTABLE1:      
0C4E   0B                     DEC   bc   
0C4F                JUMPTABLE2:      
0C4F   23                     INC   hl   
0C50   5E                     LD   e,(hl)   
0C51   23                     INC   hl   
0C52   56                     LD   d,(hl)   
0C53   EB                     EX   de,hl   
0C54   E9                     JP   (hl)   
0C55                PRTSTR0:      
0C55   CD 85 00               CALL   putchar   
0C58   23                     INC   hl   
0C59                PRTSTR:      
0C59   7E                     LD   a,(hl)   
0C5A   B7                     OR   a   
0C5B   20 F8                  JR   nz,prtstr0   
0C5D   C9                     RET      
0C5E                             ; **************************************************************************
0C5E                             ; calculate nesting value
0C5E                             ; a is char to be tested,
0C5E                             ; e is the nesting value (initially 0)
0C5E                             ; e is increased by ( and [
0C5E                             ; e is decreased by ) and ]
0C5E                             ; e has its bit 7 toggled by `
0C5E                             ; limited to 127 levels
0C5E                             ; **************************************************************************
0C5E                NESTING:      
0C5E   FE 22                  CP   DQ   ; quote char
0C60   28 06                  JR   z,nesting0   
0C62   FE 60                  CP   "`"   ; quote char
0C64   28 02                  JR   z,nesting0   
0C66   18 0A                  JR   nesting1   
0C68                NESTING0:      
0C68   CB 7B                  BIT   7,e   
0C6A   28 03                  JR   z,nesting1a   
0C6C   CB BB                  RES   7,e   
0C6E   C9                     RET      
0C6F                NESTING1A:      
0C6F   CB FB                  SET   7,e   
0C71   C9                     RET      
0C72                NESTING1:      
0C72   CB 7B                  BIT   7,e   
0C74   C0                     RET   nz   
0C75   FE 7B                  CP   "{"   
0C77   28 08                  JR   z,nesting2   
0C79   FE 5B                  CP   "["   
0C7B   28 04                  JR   z,nesting2   
0C7D   FE 28                  CP   "("   
0C7F   20 02                  JR   nz,nesting3   
0C81                NESTING2:      
0C81   1C                     INC   e   
0C82   C9                     RET      
0C83                NESTING3:      
0C83   FE 7D                  CP   "}"   
0C85   28 07                  JR   z,nesting4   
0C87   FE 5D                  CP   "]"   
0C89   28 03                  JR   z,nesting4   
0C8B   FE 29                  CP   ")"   
0C8D   C0                     RET   nz   
0C8E                NESTING4:      
0C8E   1D                     DEC   e   
0C8F   C9                     RET      
0C90                PROMPT:      
0C90   CD A0 0C               CALL   printStr   
0C93   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C98   C9                     RET      
0C99                CRLF:        
0C99   CD A0 0C               CALL   printStr   
0C9C   0D 0A 00               .CSTR   "\r\n"   
0C9F   C9                     RET      
0CA0                             ; prints a null teminated string
0CA0                             ; the string should be immediately following the call
0CA0                PRINTSTR:      
0CA0   E3                     EX   (sp),hl   ; swap			
0CA1   CD 59 0C               CALL   prtstr   
0CA4   23                     INC   hl   ; inc past NUL
0CA5   E3                     EX   (sp),hl   ; put it back	
0CA6   C9                     RET      
0CA7                TITLESTR:      
0CA7   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0CBB                INIT:        
0CBB   21 A7 0C               LD   hl,titleStr   
0CBE   11 0A 53               LD   de,titleBuf   
0CC1   06 14                  LD   b,20   
0CC3                INIT1:       
0CC3   1A                     LD   a,(de)   
0CC4   BE                     CP   (hl)   
0CC5   20 17                  JR   nz,coldBoot0   
0CC7   13                     INC   de   
0CC8   23                     INC   hl   
0CC9   10 F8                  DJNZ   init1   
0CCB                WARMINIT:      
0CCB   ED 4B F6 52            LD   bc,(vSavedIP)   ; restore IP
0CCF   ED 7B F8 52            LD   sp,(vSavedSP)   ; restore SP
0CD3   DD 2A FA 52            LD   ix,(vSavedNext)   ; restore Next
0CD7   FD 2A FC 52            LD   iy,(vSavedBP)   ; restore BP
0CDB   C3 15 0D               JP   start1   
0CDE                COLDBOOT0:      
0CDE   21 A7 0C               LD   hl,titleStr   ; copy titleStr to titleBuf
0CE1   11 0A 53               LD   de,titleBuf   
0CE4   06 14                  LD   b,20   
0CE6   ED B0                  LDIR      
0CE8                COLDINIT:      
0CE8   21 80 01               LD   hl,isysVars   
0CEB   11 E6 52               LD   de,sysVars   
0CEE   01 10 00               LD   bc,8 * 2   
0CF1   ED B0                  LDIR      
0CF3   21 00 52               LD   hl,vars   ; 52 vars LO HI
0CF6   06 34                  LD   b,26*2   
0CF8   AF                     XOR   a   
0CF9                COLDBOOT1:      
0CF9   77                     LD   (hl),a   
0CFA   23                     INC   hl   
0CFB   10 FC                  DJNZ   coldBoot1   
0CFD   DD 2A EE 52            LD   ix,(vNext)   
0D01   FD 21 00 50            LD   iy,STACK   
0D05   C9                     RET      
0D06                COLDSTART:      
0D06   31 00 50               LD   sp,STACK   
0D09   CD DE 0C               CALL   coldBoot0   
0D0C   C3 15 0D               JP   start1   
0D0F                START:       
0D0F   31 00 50               LD   sp,STACK   ; start Monty
0D12   CD BB 0C               CALL   init   ; setups
0D15                START1:      
0D15   21 0A 53               LD   hl,titleBuf   
0D18   CD 59 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0D1B                INTERPRET:      
0D1B   CD 28 0C               CALL   flushBuffer   
0D1E   CD 90 0C               CALL   prompt   
0D21   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D24   21 00 50               LD   hl,TIB   
0D27   22 EA 52               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D2A                INTERPRET2:      ; calculate nesting
0D2A   1E 00                  LD   e,0   ; initilize nesting value
0D2C   C5                     PUSH   bc   ; save offset into TIB,
0D2D                             ; bc is also the count of chars in TIB
0D2D   21 00 50               LD   hl,TIB   ; hl is start of TIB
0D30   18 0B                  JR   interpret4   
0D32                INTERPRET3:      
0D32   3E 33                  LD   a,"3"   
0D34   CD 85 00               CALL   putchar   
0D37   7E                     LD   a,(hl)   ; a = char in TIB
0D38   23                     INC   hl   ; inc pointer into TIB
0D39   0B                     DEC   bc   ; dec count of chars in TIB
0D3A   CD 5E 0C               CALL   nesting   ; update nesting value
0D3D                INTERPRET4:      
0D3D   79                     LD   a,c   ; is count zero?
0D3E   B0                     OR   b   
0D3F   20 F1                  JR   nz,interpret3   ; if not loop
0D41   C1                     POP   bc   ; restore offset into TIB
0D42                INTERPRET5:      
0D42   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0D45   FE 20                  CP   $20   ; compare to space
0D47   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0D49   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0D4B                             ; ???? NEEDED?
0D4B   28 3B                  JR   z,interpret8   
0D4D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0D4F   28 24                  JR   z,interpret7   ; if anything else its macro/control
0D51   FE 05                  CP   CTRL_E   
0D53   CA E6 0D               JP   z,edit_   
0D56   FE 08                  CP   CTRL_H   
0D58   CA D6 0D               JP   z,backSpace_   
0D5B   FE 0A                  CP   CTRL_J   
0D5D   CA FE 0D               JP   z,reEdit_   
0D60   FE 13                  CP   CTRL_S   
0D62   CA 01 0E               JP   z,printStack_   
0D65                             ; DB     lsb(edit_)       ; ENQ ^E  5
0D65                             ; DB     lsb(reedit_)     ; LF  ^J 10
0D65                             ; DB     lsb(list_)       ; FF  ^L 12
0D65                             ; DB     lsb(printStack_) ; DLE ^P 16
0D65                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0D65                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0D65                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0D65                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0D65                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0D65                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0D65                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0D65                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0D65                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0D65                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0D65                INTERPRET5A:      
0D65                             ; ld (vTIBPtr),bc
0D65                             ; ld bc,(vTIBPtr)
0D65   18 C3                  JR   interpret2   
0D67                INTERPRET6:      
0D67   21 00 50               LD   hl,TIB   
0D6A   09                     ADD   hl,bc   
0D6B   77                     LD   (hl),a   ; store the character in textbuf
0D6C   03                     INC   bc   
0D6D   CD 85 00               CALL   putchar   ; echo character to screen
0D70   CD 5E 0C               CALL   nesting   
0D73   18 CD                  JR   interpret5   ; wait for next character
0D75                INTERPRET7:      
0D75   21 00 50               LD   hl,TIB   
0D78   09                     ADD   hl,bc   
0D79   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0D7B   23                     INC   hl   
0D7C   36 0A                  LD   (hl),"\n"   
0D7E   23                     INC   hl   
0D7F   03                     INC   bc   
0D80   03                     INC   bc   
0D81   CD 99 0C               CALL   crlf   ; echo character to screen
0D84   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D85   B7                     OR   a   
0D86   20 BA                  JR   nz,interpret5   
0D88                INTERPRET8:      
0D88   21 00 50               LD   hl,TIB   
0D8B   09                     ADD   hl,bc   
0D8C   22 EA 52               LD   (vTIBPtr),hl   
0D8F   01 00 50               LD   bc,TIB   
0D92   ED 43 F6 52            LD   (vSavedIP),bc   ; save IP
0D96   ED 73 F8 52            LD   (vSavedSP),sp   ; save SP
0D9A   DD 22 FA 52            LD   (vSavedNext),ix   ; save Next
0D9E   FD 22 FC 52            LD   (vSavedBP),iy   ; save BP
0DA2   0B                     DEC   bc   
0DA3                NEXT:        
0DA3   03                     INC   bc   ; Increment the IP
0DA4   0A                     LD   a,(bc)   ; Get the next character and dispatch
0DA5   FE 20                  CP   " "   ; whitespace?
0DA7   28 FA                  JR   z,next   ; space? ignore
0DA9   38 09                  JR   c,next1   
0DAB   D6 20                  SUB   " "   
0DAD   6F                     LD   l,a   ; index into table
0DAE   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0DB0   6E                     LD   l,(hl)   ; get low jump address
0DB1   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0DB3   E9                     JP   (hl)   ; Jump to routine
0DB4                NEXT1:       
0DB4   FE 00                  CP   NUL   ; end of input string?
0DB6   28 03                  JR   z,exit   
0DB8   C3 1B 0D               JP   interpret   ; no, other whitespace, macros?
0DBB                EXIT:        
0DBB   03                     INC   bc   
0DBC   60 69                  LD   hl,bc   
0DBE   E9                     JP   (hl)   
0DBF                RUN:         
0DBF   C1                     POP   bc   
0DC0   0B                     DEC   bc   
0DC1   DD E9                  JP   (ix)   
0DC3                ERROR:       
0DC3   CD BF 0D               CALL   run   
0DC6   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0DD3   C3 1B 0D               JP   interpret   
0DD6                BACKSPACE_:      
0DD6   79                     LD   a,c   
0DD7   B0                     OR   b   
0DD8   CA 2A 0D               JP   z,interpret2   
0DDB   0B                     DEC   bc   
0DDC   CD A0 0C               CALL   printStr   
0DDF   08 20 08 00            .CSTR   "\b \b"   
0DE3   C3 2A 0D               JP   interpret2   
0DE6                             ; edit
0DE6                EDIT_:       
0DE6   CD BF 0D               CALL   run   
0DE9   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0DFB   C3 1B 0D               JP   interpret   
0DFE                REEDIT_:      
0DFE   C3 1B 0D               JP   interpret   
0E01                PRINTSTACK_:      
0E01   CD BF 0D               CALL   run   
0E04   2F 70 6B 00            .CSTR   "/pk"   
0E08   C3 1B 0D               JP   interpret   
0E0B                             ; editDef:
0E0B                             ;     pop hl                      ; pop ret address
0E0B                             ;     ex (sp),hl                  ; swap with TOS
0E0B                             ;     push hl                     ; dup TOS
0E0B                             ;     ld a,l                      ; a = ident
0E0B                             ;     ld de,TIB                   ; de = start of TIB
0E0B                             ;     ld (vTIBPtr),de             ; update TIB*
0E0B                             ;     push ix                     ; save NEXT
0E0B                             ;     ld ix,editDef0              ; NEXT = editDef0
0E0B                             ;     jp lookupRef                ; convert letter into address
0E0B                             ; editDef0:
0E0B                             ;     ld e,(hl)                   ; de = (hl++)
0E0B                             ;     inc hl
0E0B                             ;     ld d,(hl)
0E0B                             ;     ld a,d                      ; de == 0 ?
0E0B                             ;     or e
0E0B                             ;     jr z,editDef4
0E0B                             ;     ld ix,editDef3              ; NEXT = editDef3
0E0B                             ;     ex de,hl
0E0B                             ;     ld a,(hl)
0E0B                             ;     cp "{"
0E0B                             ;     jr nz,editDef1
0E0B                             ;     jp editBlock0               ; convert letter into address
0E0B                             ; editDef1:
0E0B                             ;     cp "("
0E0B                             ;     jr nz,editDef2
0E0B                             ;     jp editBlock0               ; convert letter into address
0E0B                             ; editDef2:
0E0B                             ;     jp editFunc
0E0B                             ; editDef3:
0E0B                             ;     ld a," "                    ; write assign
0E0B                             ;     call writeChar
0E0B                             ;     pop hl                      ; a = ident
0E0B                             ;     ld a,l
0E0B                             ;     call writeChar
0E0B                             ;     ld a,"="                    ; write assign
0E0B                             ;     call writeChar
0E0B                             ;     ld ix,editDef4              ; NEXT = editDef4
0E0B                             ;     jp printTIB
0E0B                             ; editDef4:
0E0B                             ;     pop ix                      ; restore NEXT
0E0B                             ;     jp (ix)
0E0B                             ; writeChar:
0E0B                             ;     ld de,(vTIBPtr)             ; de = TIB*
0E0B                             ;     ld (de),a                   ; write ident
0E0B                             ;     inc de
0E0B                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0E0B                             ;     ret
0E0B                             ; ; printTIB
0E0B                             ; printTIB:
0E0B                             ;     ld hl,(vTIBPtr)
0E0B                             ;     ld de,TIB
0E0B                             ;     or a
0E0B                             ;     sbc hl,de
0E0B                             ;     jp printTIB2
0E0B                             ; printTIB1:
0E0B                             ;     ld a,(de)
0E0B                             ;     call putchar
0E0B                             ; printTIB2:
0E0B                             ;     ld a,l
0E0B                             ;     or h
0E0B                             ;     jr nz,printTIB1
0E0B                             ;     jp (ix)
0E0B                             ; editBlock:
0E0B                             ;     pop hl                      ; hl = block*
0E0B                             ; editBlock0:
0E0B                             ;     push ix                     ; save next
0E0B                             ;     push hl                     ; push block*
0E0B                             ;     push hl                     ; push block*
0E0B                             ;     ld ix,(editBlock2)
0E0B                             ;     jp blockLength
0E0B                             ; editBlock1:
0E0B                             ;     pop hl                      ; bc = length, (sp) = IP
0E0B                             ;     pop de                      ; de = block*
0E0B                             ;     ld a,l
0E0B                             ;     or h
0E0B                             ;     jr z,editBlock2
0E0B                             ;     push bc
0E0B                             ;     ld bc,hl
0E0B                             ;     ex de,hl                    ; hl = block*
0E0B                             ;     ld de,(vTIBPtr)              ; de = TIB*
0E0B                             ;     ldir                        ; copy block to TIB
0E0B                             ;     ld (vTIBPtr),de              ; save TIB*
0E0B                             ;     pop bc
0E0B                             ; editBlock2:
0E0B                             ;     pop ix                      ; restore next
0E0B                             ;     jp (ix)
0E0B                             ; editFunc:
0E0B                             ;     jp (ix)
0E0B                             ; editArray:
0E0B                             ;     jp (ix)
0E0B                             ; editArglist:
0E0B                             ;     jp (ix)
0E0B                             ; ; blockLength
0E0B                             ; ; addr1 -- length
0E0B                             ; blockLength:
0E0B                             ;     pop hl                      ; block*
0E0B                             ;     push hl                     ; save block*
0E0B                             ;     inc hl                      ; skip first char
0E0B                             ;     ld d,1                      ; increase nesting
0E0B                             ; blockLength1:                   ; Skip to end of definition
0E0B                             ;     ld a,(hl)                   ; Get the next character
0E0B                             ;     inc hl                      ; Point to next character
0E0B                             ;     cp " " + 1                  ; ignore whitespace
0E0B                             ;     jr c,blockLength1
0E0B                             ;     cp ")"
0E0B                             ;     jr z,blockLength4
0E0B                             ;     cp "}"
0E0B                             ;     jr z,blockLength4
0E0B                             ;     cp "]"
0E0B                             ;     jr z,blockLength4
0E0B                             ;     cp "("
0E0B                             ;     jr z,blockLength2
0E0B                             ;     cp "{"
0E0B                             ;     jr z,blockLength2
0E0B                             ;     cp "["
0E0B                             ;     jr z,blockLength2
0E0B                             ;     cp "'"
0E0B                             ;     jr z,blockLength3
0E0B                             ;     cp "`"
0E0B                             ;     jr z,blockLength3
0E0B                             ;     cp DQ
0E0B                             ;     jr z,blockLength3
0E0B                             ;     jr blockLength1
0E0B                             ; blockLength2:
0E0B                             ;     inc d
0E0B                             ;     jr blockLength1
0E0B                             ; blockLength4:
0E0B                             ;     dec d
0E0B                             ;     jr nz, blockLength1         ; get the next element
0E0B                             ; blockLength3:
0E0B                             ;     ld a,$80
0E0B                             ;     xor d
0E0B                             ;     ld d,a
0E0B                             ;     jr nz, blockLength1
0E0B                             ;     pop hl                      ; hl = block*
0E0B                             ;     or a
0E0B                             ;     sbc hl,de
0E0B                             ;     push hl
0E0B                             ;     jp (ix)
0E0B                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0E0B                             ; \a start of stack \#3 depth \b base \$ prompt
0E0B                             ; DW dStack               ; a vS0 start of datastack			
0E0B                             ; DW FALSE                ; b vBase16
0E0B                             ; DW 0                    ; c vTIBPtr an offset to the tib
0E0B                             ; DW 0                    ; d
0E0B                             ; DW 65                   ; e vLastDef "A" last command u defined
0E0B                             ; DW 0                    ; f
0E0B                             ; DW page6                ; g 256 bytes limits
0E0B                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0E0B                          ;*Macro unroll: FUNC f1, 1, "f"                      ; :f func or block
0E0B                F1:          ; :f func or block
0E0B   CD 97 09               CALL   go   
0E0E   00 00                  DW   NUL   
0E10   17 0E                  DW   f1M_2751S12   
0E12   14 0E                  DW   $+2   
0E14   01                     DB   1   
0E15   01 66                  .PSTR   "f"   
0E17                F1M_2751S12:      
0E17   7B                     DB   "{"   
0E18   31 2E                  DB   "1."   
0E1A                             ; ; db    ":kt{"                              ; :kt sink, type
0E1A                             ; ; db         "0%t==/br"                     ; break if t != 0
0E1A                             ; ; db         ":dt{"
0E1A                             ; ; db             "1%t==/br %f^ 1 %k^"       ; if t == 1 send data to sink
0E1A                             ; ; db         "}; 0 %k^"                     ; init sink
0E1A                             ; ; db     "};"
0E1A   7D                     DB   "}"   
0E1B   00                     DB   0   
0E1C                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                          ;*Macro unroll:  test {"0 /li",lsb(f1+3),msb(f1),"^"}, false
0F00   31 00 50               LD   SP,STACK   
0F03   CD E8 0C               CALL   coldInit   
0F06   CD FC 4D               CALL   execStr   
0F09   30 20 2F 6C 69 0E 0E 5E 00 DB   "0 /li",lsb(f1+3),msb(f1),"^",0   
0F12   CD 28 0C               CALL   flushBuffer   
0F15   E1                     POP   HL   
0F16   E5                     PUSH   HL   
0F17   11 00 00               LD   DE,false   
0F1A   B7                     OR   A   
0F1B   ED 52                  SBC   HL,DE   
0F1D   7D                     LD   A,L   
0F1E   B4                     OR   H   
0F1F   CA 82 0F               JP   Z,expectM_2764S27   
0F22   CD A0 0C               CALL   printStr   
0F25   43 6F 64 65 3A 20 30 20 2F 6C 69 0E 0E 5E 00 .CSTR   "Code: ","0 /li",lsb(f1+3),msb(f1),"^"   
0F34   CD A0 0C               CALL   printStr   
0F37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F46   21 00 00               LD   hl,false   
0F49   E5                     PUSH   hl   
0F4A   E5                     PUSH   hl   
0F4B   CD BF 0D               CALL   run   
0F4E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F56   CD 28 0C               CALL   flushBuffer   
0F59   CD A0 0C               CALL   printStr   
0F5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F69   E1                     POP   hl   
0F6A   E5                     PUSH   hl   
0F6B   E5                     PUSH   hl   
0F6C   CD BF 0D               CALL   run   
0F6F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F7E   CD 28 0C               CALL   flushBuffer   
0F81   76                     HALT      
0F82                EXPECTM_2764S27:      
0F82   E1                     POP   HL   
0F83   CD A0 0C               CALL   printStr   
0F86   44 6F 6E 65 21 00      .CSTR   "Done!"   
0F8C   76                     HALT      
0F8D                             ; 
0F8D                          ;*Macro unroll:  test "/f", false
0F8D   31 00 50               LD   SP,STACK   
0F90   CD E8 0C               CALL   coldInit   
0F93   CD FC 4D               CALL   execStr   
0F96   2F 66 00               DB   "/f",0   
0F99   CD 28 0C               CALL   flushBuffer   
0F9C   E1                     POP   HL   
0F9D   E5                     PUSH   HL   
0F9E   11 00 00               LD   DE,false   
0FA1   B7                     OR   A   
0FA2   ED 52                  SBC   HL,DE   
0FA4   7D                     LD   A,L   
0FA5   B4                     OR   H   
0FA6   CA 03 10               JP   Z,expectM_2769S35   
0FA9   CD A0 0C               CALL   printStr   
0FAC   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0FB5   CD A0 0C               CALL   printStr   
0FB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FC7   21 00 00               LD   hl,false   
0FCA   E5                     PUSH   hl   
0FCB   E5                     PUSH   hl   
0FCC   CD BF 0D               CALL   run   
0FCF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FD7   CD 28 0C               CALL   flushBuffer   
0FDA   CD A0 0C               CALL   printStr   
0FDD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FEA   E1                     POP   hl   
0FEB   E5                     PUSH   hl   
0FEC   E5                     PUSH   hl   
0FED   CD BF 0D               CALL   run   
0FF0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FFF   CD 28 0C               CALL   flushBuffer   
1002   76                     HALT      
1003                EXPECTM_2769S35:      
1003   E1                     POP   HL   
1004                          ;*Macro unroll:  test "/t", true
1004   31 00 50               LD   SP,STACK   
1007   CD E8 0C               CALL   coldInit   
100A   CD FC 4D               CALL   execStr   
100D   2F 74 00               DB   "/t",0   
1010   CD 28 0C               CALL   flushBuffer   
1013   E1                     POP   HL   
1014   E5                     PUSH   HL   
1015   11 FF FF               LD   DE,true   
1018   B7                     OR   A   
1019   ED 52                  SBC   HL,DE   
101B   7D                     LD   A,L   
101C   B4                     OR   H   
101D   CA 7A 10               JP   Z,expectM_2770S36   
1020   CD A0 0C               CALL   printStr   
1023   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
102C   CD A0 0C               CALL   printStr   
102F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
103E   21 FF FF               LD   hl,true   
1041   E5                     PUSH   hl   
1042   E5                     PUSH   hl   
1043   CD BF 0D               CALL   run   
1046   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
104E   CD 28 0C               CALL   flushBuffer   
1051   CD A0 0C               CALL   printStr   
1054   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1061   E1                     POP   hl   
1062   E5                     PUSH   hl   
1063   E5                     PUSH   hl   
1064   CD BF 0D               CALL   run   
1067   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1076   CD 28 0C               CALL   flushBuffer   
1079   76                     HALT      
107A                EXPECTM_2770S36:      
107A   E1                     POP   HL   
107B                          ;*Macro unroll:  test "1", 1
107B   31 00 50               LD   SP,STACK   
107E   CD E8 0C               CALL   coldInit   
1081   CD FC 4D               CALL   execStr   
1084   31 00                  DB   "1",0   
1086   CD 28 0C               CALL   flushBuffer   
1089   E1                     POP   HL   
108A   E5                     PUSH   HL   
108B   11 01 00               LD   DE,1   
108E   B7                     OR   A   
108F   ED 52                  SBC   HL,DE   
1091   7D                     LD   A,L   
1092   B4                     OR   H   
1093   CA EF 10               JP   Z,expectM_2771S37   
1096   CD A0 0C               CALL   printStr   
1099   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10A1   CD A0 0C               CALL   printStr   
10A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10B3   21 01 00               LD   hl,1   
10B6   E5                     PUSH   hl   
10B7   E5                     PUSH   hl   
10B8   CD BF 0D               CALL   run   
10BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10C3   CD 28 0C               CALL   flushBuffer   
10C6   CD A0 0C               CALL   printStr   
10C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10D6   E1                     POP   hl   
10D7   E5                     PUSH   hl   
10D8   E5                     PUSH   hl   
10D9   CD BF 0D               CALL   run   
10DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10EB   CD 28 0C               CALL   flushBuffer   
10EE   76                     HALT      
10EF                EXPECTM_2771S37:      
10EF   E1                     POP   HL   
10F0                          ;*Macro unroll:  test "2", 2
10F0   31 00 50               LD   SP,STACK   
10F3   CD E8 0C               CALL   coldInit   
10F6   CD FC 4D               CALL   execStr   
10F9   32 00                  DB   "2",0   
10FB   CD 28 0C               CALL   flushBuffer   
10FE   E1                     POP   HL   
10FF   E5                     PUSH   HL   
1100   11 02 00               LD   DE,2   
1103   B7                     OR   A   
1104   ED 52                  SBC   HL,DE   
1106   7D                     LD   A,L   
1107   B4                     OR   H   
1108   CA 64 11               JP   Z,expectM_2772S38   
110B   CD A0 0C               CALL   printStr   
110E   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1116   CD A0 0C               CALL   printStr   
1119   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1128   21 02 00               LD   hl,2   
112B   E5                     PUSH   hl   
112C   E5                     PUSH   hl   
112D   CD BF 0D               CALL   run   
1130   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1138   CD 28 0C               CALL   flushBuffer   
113B   CD A0 0C               CALL   printStr   
113E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
114B   E1                     POP   hl   
114C   E5                     PUSH   hl   
114D   E5                     PUSH   hl   
114E   CD BF 0D               CALL   run   
1151   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1160   CD 28 0C               CALL   flushBuffer   
1163   76                     HALT      
1164                EXPECTM_2772S38:      
1164   E1                     POP   HL   
1165                          ;*Macro unroll:  test "1", 1
1165   31 00 50               LD   SP,STACK   
1168   CD E8 0C               CALL   coldInit   
116B   CD FC 4D               CALL   execStr   
116E   31 00                  DB   "1",0   
1170   CD 28 0C               CALL   flushBuffer   
1173   E1                     POP   HL   
1174   E5                     PUSH   HL   
1175   11 01 00               LD   DE,1   
1178   B7                     OR   A   
1179   ED 52                  SBC   HL,DE   
117B   7D                     LD   A,L   
117C   B4                     OR   H   
117D   CA D9 11               JP   Z,expectM_2773S39   
1180   CD A0 0C               CALL   printStr   
1183   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
118B   CD A0 0C               CALL   printStr   
118E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
119D   21 01 00               LD   hl,1   
11A0   E5                     PUSH   hl   
11A1   E5                     PUSH   hl   
11A2   CD BF 0D               CALL   run   
11A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11AD   CD 28 0C               CALL   flushBuffer   
11B0   CD A0 0C               CALL   printStr   
11B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C0   E1                     POP   hl   
11C1   E5                     PUSH   hl   
11C2   E5                     PUSH   hl   
11C3   CD BF 0D               CALL   run   
11C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11D5   CD 28 0C               CALL   flushBuffer   
11D8   76                     HALT      
11D9                EXPECTM_2773S39:      
11D9   E1                     POP   HL   
11DA                          ;*Macro unroll:  test "0", 0
11DA   31 00 50               LD   SP,STACK   
11DD   CD E8 0C               CALL   coldInit   
11E0   CD FC 4D               CALL   execStr   
11E3   30 00                  DB   "0",0   
11E5   CD 28 0C               CALL   flushBuffer   
11E8   E1                     POP   HL   
11E9   E5                     PUSH   HL   
11EA   11 00 00               LD   DE,0   
11ED   B7                     OR   A   
11EE   ED 52                  SBC   HL,DE   
11F0   7D                     LD   A,L   
11F1   B4                     OR   H   
11F2   CA 4E 12               JP   Z,expectM_2774S40   
11F5   CD A0 0C               CALL   printStr   
11F8   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1200   CD A0 0C               CALL   printStr   
1203   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1212   21 00 00               LD   hl,0   
1215   E5                     PUSH   hl   
1216   E5                     PUSH   hl   
1217   CD BF 0D               CALL   run   
121A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1222   CD 28 0C               CALL   flushBuffer   
1225   CD A0 0C               CALL   printStr   
1228   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1235   E1                     POP   hl   
1236   E5                     PUSH   hl   
1237   E5                     PUSH   hl   
1238   CD BF 0D               CALL   run   
123B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
124A   CD 28 0C               CALL   flushBuffer   
124D   76                     HALT      
124E                EXPECTM_2774S40:      
124E   E1                     POP   HL   
124F                          ;*Macro unroll:  test "10", 10
124F   31 00 50               LD   SP,STACK   
1252   CD E8 0C               CALL   coldInit   
1255   CD FC 4D               CALL   execStr   
1258   31 30 00               DB   "10",0   
125B   CD 28 0C               CALL   flushBuffer   
125E   E1                     POP   HL   
125F   E5                     PUSH   HL   
1260   11 0A 00               LD   DE,10   
1263   B7                     OR   A   
1264   ED 52                  SBC   HL,DE   
1266   7D                     LD   A,L   
1267   B4                     OR   H   
1268   CA C5 12               JP   Z,expectM_2775S41   
126B   CD A0 0C               CALL   printStr   
126E   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1277   CD A0 0C               CALL   printStr   
127A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1289   21 0A 00               LD   hl,10   
128C   E5                     PUSH   hl   
128D   E5                     PUSH   hl   
128E   CD BF 0D               CALL   run   
1291   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1299   CD 28 0C               CALL   flushBuffer   
129C   CD A0 0C               CALL   printStr   
129F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12AC   E1                     POP   hl   
12AD   E5                     PUSH   hl   
12AE   E5                     PUSH   hl   
12AF   CD BF 0D               CALL   run   
12B2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12C1   CD 28 0C               CALL   flushBuffer   
12C4   76                     HALT      
12C5                EXPECTM_2775S41:      
12C5   E1                     POP   HL   
12C6                          ;*Macro unroll:  test "123", 123
12C6   31 00 50               LD   SP,STACK   
12C9   CD E8 0C               CALL   coldInit   
12CC   CD FC 4D               CALL   execStr   
12CF   31 32 33 00            DB   "123",0   
12D3   CD 28 0C               CALL   flushBuffer   
12D6   E1                     POP   HL   
12D7   E5                     PUSH   HL   
12D8   11 7B 00               LD   DE,123   
12DB   B7                     OR   A   
12DC   ED 52                  SBC   HL,DE   
12DE   7D                     LD   A,L   
12DF   B4                     OR   H   
12E0   CA 3E 13               JP   Z,expectM_2776S42   
12E3   CD A0 0C               CALL   printStr   
12E6   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
12F0   CD A0 0C               CALL   printStr   
12F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1302   21 7B 00               LD   hl,123   
1305   E5                     PUSH   hl   
1306   E5                     PUSH   hl   
1307   CD BF 0D               CALL   run   
130A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1312   CD 28 0C               CALL   flushBuffer   
1315   CD A0 0C               CALL   printStr   
1318   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1325   E1                     POP   hl   
1326   E5                     PUSH   hl   
1327   E5                     PUSH   hl   
1328   CD BF 0D               CALL   run   
132B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
133A   CD 28 0C               CALL   flushBuffer   
133D   76                     HALT      
133E                EXPECTM_2776S42:      
133E   E1                     POP   HL   
133F                          ;*Macro unroll:  test "-1",-1
133F   31 00 50               LD   SP,STACK   
1342   CD E8 0C               CALL   coldInit   
1345   CD FC 4D               CALL   execStr   
1348   2D 31 00               DB   "-1",0   
134B   CD 28 0C               CALL   flushBuffer   
134E   E1                     POP   HL   
134F   E5                     PUSH   HL   
1350   11 FF FF               LD   DE,-1   
1353   B7                     OR   A   
1354   ED 52                  SBC   HL,DE   
1356   7D                     LD   A,L   
1357   B4                     OR   H   
1358   CA B5 13               JP   Z,expectM_2777S43   
135B   CD A0 0C               CALL   printStr   
135E   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1367   CD A0 0C               CALL   printStr   
136A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1379   21 FF FF               LD   hl,-1   
137C   E5                     PUSH   hl   
137D   E5                     PUSH   hl   
137E   CD BF 0D               CALL   run   
1381   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1389   CD 28 0C               CALL   flushBuffer   
138C   CD A0 0C               CALL   printStr   
138F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
139C   E1                     POP   hl   
139D   E5                     PUSH   hl   
139E   E5                     PUSH   hl   
139F   CD BF 0D               CALL   run   
13A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13B1   CD 28 0C               CALL   flushBuffer   
13B4   76                     HALT      
13B5                EXPECTM_2777S43:      
13B5   E1                     POP   HL   
13B6                          ;*Macro unroll:  test "''", 0
13B6   31 00 50               LD   SP,STACK   
13B9   CD E8 0C               CALL   coldInit   
13BC   CD FC 4D               CALL   execStr   
13BF   27 27 00               DB   "''",0   
13C2   CD 28 0C               CALL   flushBuffer   
13C5   E1                     POP   HL   
13C6   E5                     PUSH   HL   
13C7   11 00 00               LD   DE,0   
13CA   B7                     OR   A   
13CB   ED 52                  SBC   HL,DE   
13CD   7D                     LD   A,L   
13CE   B4                     OR   H   
13CF   CA 2C 14               JP   Z,expectM_2778S44   
13D2   CD A0 0C               CALL   printStr   
13D5   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
13DE   CD A0 0C               CALL   printStr   
13E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13F0   21 00 00               LD   hl,0   
13F3   E5                     PUSH   hl   
13F4   E5                     PUSH   hl   
13F5   CD BF 0D               CALL   run   
13F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1400   CD 28 0C               CALL   flushBuffer   
1403   CD A0 0C               CALL   printStr   
1406   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1413   E1                     POP   hl   
1414   E5                     PUSH   hl   
1415   E5                     PUSH   hl   
1416   CD BF 0D               CALL   run   
1419   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1428   CD 28 0C               CALL   flushBuffer   
142B   76                     HALT      
142C                EXPECTM_2778S44:      
142C   E1                     POP   HL   
142D                          ;*Macro unroll:  test "'a'", $61
142D   31 00 50               LD   SP,STACK   
1430   CD E8 0C               CALL   coldInit   
1433   CD FC 4D               CALL   execStr   
1436   27 61 27 00            DB   "'a'",0   
143A   CD 28 0C               CALL   flushBuffer   
143D   E1                     POP   HL   
143E   E5                     PUSH   HL   
143F   11 61 00               LD   DE,$61   
1442   B7                     OR   A   
1443   ED 52                  SBC   HL,DE   
1445   7D                     LD   A,L   
1446   B4                     OR   H   
1447   CA A5 14               JP   Z,expectM_2779S45   
144A   CD A0 0C               CALL   printStr   
144D   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1457   CD A0 0C               CALL   printStr   
145A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1469   21 61 00               LD   hl,$61   
146C   E5                     PUSH   hl   
146D   E5                     PUSH   hl   
146E   CD BF 0D               CALL   run   
1471   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1479   CD 28 0C               CALL   flushBuffer   
147C   CD A0 0C               CALL   printStr   
147F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
148C   E1                     POP   hl   
148D   E5                     PUSH   hl   
148E   E5                     PUSH   hl   
148F   CD BF 0D               CALL   run   
1492   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14A1   CD 28 0C               CALL   flushBuffer   
14A4   76                     HALT      
14A5                EXPECTM_2779S45:      
14A5   E1                     POP   HL   
14A6                          ;*Macro unroll:  test "'\\''", $27
14A6   31 00 50               LD   SP,STACK   
14A9   CD E8 0C               CALL   coldInit   
14AC   CD FC 4D               CALL   execStr   
14AF   27 5C 27 27 00         DB   "'\\''",0   
14B4   CD 28 0C               CALL   flushBuffer   
14B7   E1                     POP   HL   
14B8   E5                     PUSH   HL   
14B9   11 27 00               LD   DE,$27   
14BC   B7                     OR   A   
14BD   ED 52                  SBC   HL,DE   
14BF   7D                     LD   A,L   
14C0   B4                     OR   H   
14C1   CA 20 15               JP   Z,expectM_2780S46   
14C4   CD A0 0C               CALL   printStr   
14C7   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
14D2   CD A0 0C               CALL   printStr   
14D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14E4   21 27 00               LD   hl,$27   
14E7   E5                     PUSH   hl   
14E8   E5                     PUSH   hl   
14E9   CD BF 0D               CALL   run   
14EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14F4   CD 28 0C               CALL   flushBuffer   
14F7   CD A0 0C               CALL   printStr   
14FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1507   E1                     POP   hl   
1508   E5                     PUSH   hl   
1509   E5                     PUSH   hl   
150A   CD BF 0D               CALL   run   
150D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
151C   CD 28 0C               CALL   flushBuffer   
151F   76                     HALT      
1520                EXPECTM_2780S46:      
1520   E1                     POP   HL   
1521                          ;*Macro unroll:  test "$10", $10
1521   31 00 50               LD   SP,STACK   
1524   CD E8 0C               CALL   coldInit   
1527   CD FC 4D               CALL   execStr   
152A   24 31 30 00            DB   "$10",0   
152E   CD 28 0C               CALL   flushBuffer   
1531   E1                     POP   HL   
1532   E5                     PUSH   HL   
1533   11 10 00               LD   DE,$10   
1536   B7                     OR   A   
1537   ED 52                  SBC   HL,DE   
1539   7D                     LD   A,L   
153A   B4                     OR   H   
153B   CA 99 15               JP   Z,expectM_2781S47   
153E   CD A0 0C               CALL   printStr   
1541   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
154B   CD A0 0C               CALL   printStr   
154E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
155D   21 10 00               LD   hl,$10   
1560   E5                     PUSH   hl   
1561   E5                     PUSH   hl   
1562   CD BF 0D               CALL   run   
1565   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
156D   CD 28 0C               CALL   flushBuffer   
1570   CD A0 0C               CALL   printStr   
1573   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1580   E1                     POP   hl   
1581   E5                     PUSH   hl   
1582   E5                     PUSH   hl   
1583   CD BF 0D               CALL   run   
1586   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1595   CD 28 0C               CALL   flushBuffer   
1598   76                     HALT      
1599                EXPECTM_2781S47:      
1599   E1                     POP   HL   
159A                          ;*Macro unroll:  test "$FF", $FF
159A   31 00 50               LD   SP,STACK   
159D   CD E8 0C               CALL   coldInit   
15A0   CD FC 4D               CALL   execStr   
15A3   24 46 46 00            DB   "$FF",0   
15A7   CD 28 0C               CALL   flushBuffer   
15AA   E1                     POP   HL   
15AB   E5                     PUSH   HL   
15AC   11 FF 00               LD   DE,$FF   
15AF   B7                     OR   A   
15B0   ED 52                  SBC   HL,DE   
15B2   7D                     LD   A,L   
15B3   B4                     OR   H   
15B4   CA 12 16               JP   Z,expectM_2782S48   
15B7   CD A0 0C               CALL   printStr   
15BA   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
15C4   CD A0 0C               CALL   printStr   
15C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15D6   21 FF 00               LD   hl,$FF   
15D9   E5                     PUSH   hl   
15DA   E5                     PUSH   hl   
15DB   CD BF 0D               CALL   run   
15DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15E6   CD 28 0C               CALL   flushBuffer   
15E9   CD A0 0C               CALL   printStr   
15EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15F9   E1                     POP   hl   
15FA   E5                     PUSH   hl   
15FB   E5                     PUSH   hl   
15FC   CD BF 0D               CALL   run   
15FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
160E   CD 28 0C               CALL   flushBuffer   
1611   76                     HALT      
1612                EXPECTM_2782S48:      
1612   E1                     POP   HL   
1613                          ;*Macro unroll:  test "-1 2 +",1
1613   31 00 50               LD   SP,STACK   
1616   CD E8 0C               CALL   coldInit   
1619   CD FC 4D               CALL   execStr   
161C   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1623   CD 28 0C               CALL   flushBuffer   
1626   E1                     POP   HL   
1627   E5                     PUSH   HL   
1628   11 01 00               LD   DE,1   
162B   B7                     OR   A   
162C   ED 52                  SBC   HL,DE   
162E   7D                     LD   A,L   
162F   B4                     OR   H   
1630   CA 91 16               JP   Z,expectM_2783S49   
1633   CD A0 0C               CALL   printStr   
1636   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1643   CD A0 0C               CALL   printStr   
1646   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1655   21 01 00               LD   hl,1   
1658   E5                     PUSH   hl   
1659   E5                     PUSH   hl   
165A   CD BF 0D               CALL   run   
165D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1665   CD 28 0C               CALL   flushBuffer   
1668   CD A0 0C               CALL   printStr   
166B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1678   E1                     POP   hl   
1679   E5                     PUSH   hl   
167A   E5                     PUSH   hl   
167B   CD BF 0D               CALL   run   
167E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
168D   CD 28 0C               CALL   flushBuffer   
1690   76                     HALT      
1691                EXPECTM_2783S49:      
1691   E1                     POP   HL   
1692                          ;*Macro unroll:  test "-1 1 +",0
1692   31 00 50               LD   SP,STACK   
1695   CD E8 0C               CALL   coldInit   
1698   CD FC 4D               CALL   execStr   
169B   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
16A2   CD 28 0C               CALL   flushBuffer   
16A5   E1                     POP   HL   
16A6   E5                     PUSH   HL   
16A7   11 00 00               LD   DE,0   
16AA   B7                     OR   A   
16AB   ED 52                  SBC   HL,DE   
16AD   7D                     LD   A,L   
16AE   B4                     OR   H   
16AF   CA 10 17               JP   Z,expectM_2784S50   
16B2   CD A0 0C               CALL   printStr   
16B5   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
16C2   CD A0 0C               CALL   printStr   
16C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16D4   21 00 00               LD   hl,0   
16D7   E5                     PUSH   hl   
16D8   E5                     PUSH   hl   
16D9   CD BF 0D               CALL   run   
16DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16E4   CD 28 0C               CALL   flushBuffer   
16E7   CD A0 0C               CALL   printStr   
16EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F7   E1                     POP   hl   
16F8   E5                     PUSH   hl   
16F9   E5                     PUSH   hl   
16FA   CD BF 0D               CALL   run   
16FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
170C   CD 28 0C               CALL   flushBuffer   
170F   76                     HALT      
1710                EXPECTM_2784S50:      
1710   E1                     POP   HL   
1711                          ;*Macro unroll:  test "1 2 +", 3
1711   31 00 50               LD   SP,STACK   
1714   CD E8 0C               CALL   coldInit   
1717   CD FC 4D               CALL   execStr   
171A   31 20 32 20 2B 00      DB   "1 2 +",0   
1720   CD 28 0C               CALL   flushBuffer   
1723   E1                     POP   HL   
1724   E5                     PUSH   HL   
1725   11 03 00               LD   DE,3   
1728   B7                     OR   A   
1729   ED 52                  SBC   HL,DE   
172B   7D                     LD   A,L   
172C   B4                     OR   H   
172D   CA 8D 17               JP   Z,expectM_2785S51   
1730   CD A0 0C               CALL   printStr   
1733   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
173F   CD A0 0C               CALL   printStr   
1742   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1751   21 03 00               LD   hl,3   
1754   E5                     PUSH   hl   
1755   E5                     PUSH   hl   
1756   CD BF 0D               CALL   run   
1759   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1761   CD 28 0C               CALL   flushBuffer   
1764   CD A0 0C               CALL   printStr   
1767   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1774   E1                     POP   hl   
1775   E5                     PUSH   hl   
1776   E5                     PUSH   hl   
1777   CD BF 0D               CALL   run   
177A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1789   CD 28 0C               CALL   flushBuffer   
178C   76                     HALT      
178D                EXPECTM_2785S51:      
178D   E1                     POP   HL   
178E                          ;*Macro unroll:  test "4 1 2 +", 3
178E   31 00 50               LD   SP,STACK   
1791   CD E8 0C               CALL   coldInit   
1794   CD FC 4D               CALL   execStr   
1797   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
179F   CD 28 0C               CALL   flushBuffer   
17A2   E1                     POP   HL   
17A3   E5                     PUSH   HL   
17A4   11 03 00               LD   DE,3   
17A7   B7                     OR   A   
17A8   ED 52                  SBC   HL,DE   
17AA   7D                     LD   A,L   
17AB   B4                     OR   H   
17AC   CA 0E 18               JP   Z,expectM_2786S52   
17AF   CD A0 0C               CALL   printStr   
17B2   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
17C0   CD A0 0C               CALL   printStr   
17C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D2   21 03 00               LD   hl,3   
17D5   E5                     PUSH   hl   
17D6   E5                     PUSH   hl   
17D7   CD BF 0D               CALL   run   
17DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17E2   CD 28 0C               CALL   flushBuffer   
17E5   CD A0 0C               CALL   printStr   
17E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F5   E1                     POP   hl   
17F6   E5                     PUSH   hl   
17F7   E5                     PUSH   hl   
17F8   CD BF 0D               CALL   run   
17FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
180A   CD 28 0C               CALL   flushBuffer   
180D   76                     HALT      
180E                EXPECTM_2786S52:      
180E   E1                     POP   HL   
180F                          ;*Macro unroll:  test "123 456 +", 123+456
180F   31 00 50               LD   SP,STACK   
1812   CD E8 0C               CALL   coldInit   
1815   CD FC 4D               CALL   execStr   
1818   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1822   CD 28 0C               CALL   flushBuffer   
1825   E1                     POP   HL   
1826   E5                     PUSH   HL   
1827   11 43 02               LD   DE,123+456   
182A   B7                     OR   A   
182B   ED 52                  SBC   HL,DE   
182D   7D                     LD   A,L   
182E   B4                     OR   H   
182F   CA 93 18               JP   Z,expectM_2787S53   
1832   CD A0 0C               CALL   printStr   
1835   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1845   CD A0 0C               CALL   printStr   
1848   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1857   21 43 02               LD   hl,123+456   
185A   E5                     PUSH   hl   
185B   E5                     PUSH   hl   
185C   CD BF 0D               CALL   run   
185F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1867   CD 28 0C               CALL   flushBuffer   
186A   CD A0 0C               CALL   printStr   
186D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
187A   E1                     POP   hl   
187B   E5                     PUSH   hl   
187C   E5                     PUSH   hl   
187D   CD BF 0D               CALL   run   
1880   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
188F   CD 28 0C               CALL   flushBuffer   
1892   76                     HALT      
1893                EXPECTM_2787S53:      
1893   E1                     POP   HL   
1894                          ;*Macro unroll:  test "64 128 +", 64+128
1894   31 00 50               LD   SP,STACK   
1897   CD E8 0C               CALL   coldInit   
189A   CD FC 4D               CALL   execStr   
189D   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
18A6   CD 28 0C               CALL   flushBuffer   
18A9   E1                     POP   HL   
18AA   E5                     PUSH   HL   
18AB   11 C0 00               LD   DE,64+128   
18AE   B7                     OR   A   
18AF   ED 52                  SBC   HL,DE   
18B1   7D                     LD   A,L   
18B2   B4                     OR   H   
18B3   CA 16 19               JP   Z,expectM_2788S54   
18B6   CD A0 0C               CALL   printStr   
18B9   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
18C8   CD A0 0C               CALL   printStr   
18CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18DA   21 C0 00               LD   hl,64+128   
18DD   E5                     PUSH   hl   
18DE   E5                     PUSH   hl   
18DF   CD BF 0D               CALL   run   
18E2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18EA   CD 28 0C               CALL   flushBuffer   
18ED   CD A0 0C               CALL   printStr   
18F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18FD   E1                     POP   hl   
18FE   E5                     PUSH   hl   
18FF   E5                     PUSH   hl   
1900   CD BF 0D               CALL   run   
1903   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1912   CD 28 0C               CALL   flushBuffer   
1915   76                     HALT      
1916                EXPECTM_2788S54:      
1916   E1                     POP   HL   
1917                          ;*Macro unroll:  test "1 2 +", 3
1917   31 00 50               LD   SP,STACK   
191A   CD E8 0C               CALL   coldInit   
191D   CD FC 4D               CALL   execStr   
1920   31 20 32 20 2B 00      DB   "1 2 +",0   
1926   CD 28 0C               CALL   flushBuffer   
1929   E1                     POP   HL   
192A   E5                     PUSH   HL   
192B   11 03 00               LD   DE,3   
192E   B7                     OR   A   
192F   ED 52                  SBC   HL,DE   
1931   7D                     LD   A,L   
1932   B4                     OR   H   
1933   CA 93 19               JP   Z,expectM_2789S55   
1936   CD A0 0C               CALL   printStr   
1939   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1945   CD A0 0C               CALL   printStr   
1948   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1957   21 03 00               LD   hl,3   
195A   E5                     PUSH   hl   
195B   E5                     PUSH   hl   
195C   CD BF 0D               CALL   run   
195F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1967   CD 28 0C               CALL   flushBuffer   
196A   CD A0 0C               CALL   printStr   
196D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
197A   E1                     POP   hl   
197B   E5                     PUSH   hl   
197C   E5                     PUSH   hl   
197D   CD BF 0D               CALL   run   
1980   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
198F   CD 28 0C               CALL   flushBuffer   
1992   76                     HALT      
1993                EXPECTM_2789S55:      
1993   E1                     POP   HL   
1994                          ;*Macro unroll:  test "1a= a++ a",2
1994   31 00 50               LD   SP,STACK   
1997   CD E8 0C               CALL   coldInit   
199A   CD FC 4D               CALL   execStr   
199D   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
19A7   CD 28 0C               CALL   flushBuffer   
19AA   E1                     POP   HL   
19AB   E5                     PUSH   HL   
19AC   11 02 00               LD   DE,2   
19AF   B7                     OR   A   
19B0   ED 52                  SBC   HL,DE   
19B2   7D                     LD   A,L   
19B3   B4                     OR   H   
19B4   CA 18 1A               JP   Z,expectM_2790S56   
19B7   CD A0 0C               CALL   printStr   
19BA   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
19CA   CD A0 0C               CALL   printStr   
19CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19DC   21 02 00               LD   hl,2   
19DF   E5                     PUSH   hl   
19E0   E5                     PUSH   hl   
19E1   CD BF 0D               CALL   run   
19E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19EC   CD 28 0C               CALL   flushBuffer   
19EF   CD A0 0C               CALL   printStr   
19F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19FF   E1                     POP   hl   
1A00   E5                     PUSH   hl   
1A01   E5                     PUSH   hl   
1A02   CD BF 0D               CALL   run   
1A05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A14   CD 28 0C               CALL   flushBuffer   
1A17   76                     HALT      
1A18                EXPECTM_2790S56:      
1A18   E1                     POP   HL   
1A19                          ;*Macro unroll:  test "-1 -1 -",0
1A19   31 00 50               LD   SP,STACK   
1A1C   CD E8 0C               CALL   coldInit   
1A1F   CD FC 4D               CALL   execStr   
1A22   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1A2A   CD 28 0C               CALL   flushBuffer   
1A2D   E1                     POP   HL   
1A2E   E5                     PUSH   HL   
1A2F   11 00 00               LD   DE,0   
1A32   B7                     OR   A   
1A33   ED 52                  SBC   HL,DE   
1A35   7D                     LD   A,L   
1A36   B4                     OR   H   
1A37   CA 99 1A               JP   Z,expectM_2791S57   
1A3A   CD A0 0C               CALL   printStr   
1A3D   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1A4B   CD A0 0C               CALL   printStr   
1A4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A5D   21 00 00               LD   hl,0   
1A60   E5                     PUSH   hl   
1A61   E5                     PUSH   hl   
1A62   CD BF 0D               CALL   run   
1A65   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A6D   CD 28 0C               CALL   flushBuffer   
1A70   CD A0 0C               CALL   printStr   
1A73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A80   E1                     POP   hl   
1A81   E5                     PUSH   hl   
1A82   E5                     PUSH   hl   
1A83   CD BF 0D               CALL   run   
1A86   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A95   CD 28 0C               CALL   flushBuffer   
1A98   76                     HALT      
1A99                EXPECTM_2791S57:      
1A99   E1                     POP   HL   
1A9A                          ;*Macro unroll:  test "5 3 -", 2
1A9A   31 00 50               LD   SP,STACK   
1A9D   CD E8 0C               CALL   coldInit   
1AA0   CD FC 4D               CALL   execStr   
1AA3   35 20 33 20 2D 00      DB   "5 3 -",0   
1AA9   CD 28 0C               CALL   flushBuffer   
1AAC   E1                     POP   HL   
1AAD   E5                     PUSH   HL   
1AAE   11 02 00               LD   DE,2   
1AB1   B7                     OR   A   
1AB2   ED 52                  SBC   HL,DE   
1AB4   7D                     LD   A,L   
1AB5   B4                     OR   H   
1AB6   CA 16 1B               JP   Z,expectM_2792S58   
1AB9   CD A0 0C               CALL   printStr   
1ABC   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1AC8   CD A0 0C               CALL   printStr   
1ACB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ADA   21 02 00               LD   hl,2   
1ADD   E5                     PUSH   hl   
1ADE   E5                     PUSH   hl   
1ADF   CD BF 0D               CALL   run   
1AE2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AEA   CD 28 0C               CALL   flushBuffer   
1AED   CD A0 0C               CALL   printStr   
1AF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AFD   E1                     POP   hl   
1AFE   E5                     PUSH   hl   
1AFF   E5                     PUSH   hl   
1B00   CD BF 0D               CALL   run   
1B03   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B12   CD 28 0C               CALL   flushBuffer   
1B15   76                     HALT      
1B16                EXPECTM_2792S58:      
1B16   E1                     POP   HL   
1B17                          ;*Macro unroll:  test "2 1 -",1
1B17   31 00 50               LD   SP,STACK   
1B1A   CD E8 0C               CALL   coldInit   
1B1D   CD FC 4D               CALL   execStr   
1B20   32 20 31 20 2D 00      DB   "2 1 -",0   
1B26   CD 28 0C               CALL   flushBuffer   
1B29   E1                     POP   HL   
1B2A   E5                     PUSH   HL   
1B2B   11 01 00               LD   DE,1   
1B2E   B7                     OR   A   
1B2F   ED 52                  SBC   HL,DE   
1B31   7D                     LD   A,L   
1B32   B4                     OR   H   
1B33   CA 93 1B               JP   Z,expectM_2793S59   
1B36   CD A0 0C               CALL   printStr   
1B39   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1B45   CD A0 0C               CALL   printStr   
1B48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B57   21 01 00               LD   hl,1   
1B5A   E5                     PUSH   hl   
1B5B   E5                     PUSH   hl   
1B5C   CD BF 0D               CALL   run   
1B5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B67   CD 28 0C               CALL   flushBuffer   
1B6A   CD A0 0C               CALL   printStr   
1B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7A   E1                     POP   hl   
1B7B   E5                     PUSH   hl   
1B7C   E5                     PUSH   hl   
1B7D   CD BF 0D               CALL   run   
1B80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B8F   CD 28 0C               CALL   flushBuffer   
1B92   76                     HALT      
1B93                EXPECTM_2793S59:      
1B93   E1                     POP   HL   
1B94                          ;*Macro unroll:  test "3a= a-- a",2
1B94   31 00 50               LD   SP,STACK   
1B97   CD E8 0C               CALL   coldInit   
1B9A   CD FC 4D               CALL   execStr   
1B9D   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1BA7   CD 28 0C               CALL   flushBuffer   
1BAA   E1                     POP   HL   
1BAB   E5                     PUSH   HL   
1BAC   11 02 00               LD   DE,2   
1BAF   B7                     OR   A   
1BB0   ED 52                  SBC   HL,DE   
1BB2   7D                     LD   A,L   
1BB3   B4                     OR   H   
1BB4   CA 18 1C               JP   Z,expectM_2794S60   
1BB7   CD A0 0C               CALL   printStr   
1BBA   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1BCA   CD A0 0C               CALL   printStr   
1BCD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BDC   21 02 00               LD   hl,2   
1BDF   E5                     PUSH   hl   
1BE0   E5                     PUSH   hl   
1BE1   CD BF 0D               CALL   run   
1BE4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BEC   CD 28 0C               CALL   flushBuffer   
1BEF   CD A0 0C               CALL   printStr   
1BF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BFF   E1                     POP   hl   
1C00   E5                     PUSH   hl   
1C01   E5                     PUSH   hl   
1C02   CD BF 0D               CALL   run   
1C05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C14   CD 28 0C               CALL   flushBuffer   
1C17   76                     HALT      
1C18                EXPECTM_2794S60:      
1C18   E1                     POP   HL   
1C19                          ;*Macro unroll:  test "3 5 &", 1
1C19   31 00 50               LD   SP,STACK   
1C1C   CD E8 0C               CALL   coldInit   
1C1F   CD FC 4D               CALL   execStr   
1C22   33 20 35 20 26 00      DB   "3 5 &",0   
1C28   CD 28 0C               CALL   flushBuffer   
1C2B   E1                     POP   HL   
1C2C   E5                     PUSH   HL   
1C2D   11 01 00               LD   DE,1   
1C30   B7                     OR   A   
1C31   ED 52                  SBC   HL,DE   
1C33   7D                     LD   A,L   
1C34   B4                     OR   H   
1C35   CA 95 1C               JP   Z,expectM_2795S61   
1C38   CD A0 0C               CALL   printStr   
1C3B   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1C47   CD A0 0C               CALL   printStr   
1C4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C59   21 01 00               LD   hl,1   
1C5C   E5                     PUSH   hl   
1C5D   E5                     PUSH   hl   
1C5E   CD BF 0D               CALL   run   
1C61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C69   CD 28 0C               CALL   flushBuffer   
1C6C   CD A0 0C               CALL   printStr   
1C6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7C   E1                     POP   hl   
1C7D   E5                     PUSH   hl   
1C7E   E5                     PUSH   hl   
1C7F   CD BF 0D               CALL   run   
1C82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C91   CD 28 0C               CALL   flushBuffer   
1C94   76                     HALT      
1C95                EXPECTM_2795S61:      
1C95   E1                     POP   HL   
1C96                          ;*Macro unroll:  test "3 5 |", 7
1C96   31 00 50               LD   SP,STACK   
1C99   CD E8 0C               CALL   coldInit   
1C9C   CD FC 4D               CALL   execStr   
1C9F   33 20 35 20 7C 00      DB   "3 5 |",0   
1CA5   CD 28 0C               CALL   flushBuffer   
1CA8   E1                     POP   HL   
1CA9   E5                     PUSH   HL   
1CAA   11 07 00               LD   DE,7   
1CAD   B7                     OR   A   
1CAE   ED 52                  SBC   HL,DE   
1CB0   7D                     LD   A,L   
1CB1   B4                     OR   H   
1CB2   CA 12 1D               JP   Z,expectM_2796S62   
1CB5   CD A0 0C               CALL   printStr   
1CB8   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1CC4   CD A0 0C               CALL   printStr   
1CC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD6   21 07 00               LD   hl,7   
1CD9   E5                     PUSH   hl   
1CDA   E5                     PUSH   hl   
1CDB   CD BF 0D               CALL   run   
1CDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE6   CD 28 0C               CALL   flushBuffer   
1CE9   CD A0 0C               CALL   printStr   
1CEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF9   E1                     POP   hl   
1CFA   E5                     PUSH   hl   
1CFB   E5                     PUSH   hl   
1CFC   CD BF 0D               CALL   run   
1CFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0E   CD 28 0C               CALL   flushBuffer   
1D11   76                     HALT      
1D12                EXPECTM_2796S62:      
1D12   E1                     POP   HL   
1D13                          ;*Macro unroll:  test "3 5 /x", 6
1D13   31 00 50               LD   SP,STACK   
1D16   CD E8 0C               CALL   coldInit   
1D19   CD FC 4D               CALL   execStr   
1D1C   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D23   CD 28 0C               CALL   flushBuffer   
1D26   E1                     POP   HL   
1D27   E5                     PUSH   HL   
1D28   11 06 00               LD   DE,6   
1D2B   B7                     OR   A   
1D2C   ED 52                  SBC   HL,DE   
1D2E   7D                     LD   A,L   
1D2F   B4                     OR   H   
1D30   CA 91 1D               JP   Z,expectM_2797S63   
1D33   CD A0 0C               CALL   printStr   
1D36   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1D43   CD A0 0C               CALL   printStr   
1D46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D55   21 06 00               LD   hl,6   
1D58   E5                     PUSH   hl   
1D59   E5                     PUSH   hl   
1D5A   CD BF 0D               CALL   run   
1D5D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D65   CD 28 0C               CALL   flushBuffer   
1D68   CD A0 0C               CALL   printStr   
1D6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D78   E1                     POP   hl   
1D79   E5                     PUSH   hl   
1D7A   E5                     PUSH   hl   
1D7B   CD BF 0D               CALL   run   
1D7E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D8D   CD 28 0C               CALL   flushBuffer   
1D90   76                     HALT      
1D91                EXPECTM_2797S63:      
1D91   E1                     POP   HL   
1D92                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1D92   31 00 50               LD   SP,STACK   
1D95   CD E8 0C               CALL   coldInit   
1D98   CD FC 4D               CALL   execStr   
1D9B   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1DAA   CD 28 0C               CALL   flushBuffer   
1DAD   E1                     POP   HL   
1DAE   E5                     PUSH   HL   
1DAF   11 06 00               LD   DE,6   
1DB2   B7                     OR   A   
1DB3   ED 52                  SBC   HL,DE   
1DB5   7D                     LD   A,L   
1DB6   B4                     OR   H   
1DB7   CA 20 1E               JP   Z,expectM_2798S64   
1DBA   CD A0 0C               CALL   printStr   
1DBD   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1DD2   CD A0 0C               CALL   printStr   
1DD5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DE4   21 06 00               LD   hl,6   
1DE7   E5                     PUSH   hl   
1DE8   E5                     PUSH   hl   
1DE9   CD BF 0D               CALL   run   
1DEC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DF4   CD 28 0C               CALL   flushBuffer   
1DF7   CD A0 0C               CALL   printStr   
1DFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E07   E1                     POP   hl   
1E08   E5                     PUSH   hl   
1E09   E5                     PUSH   hl   
1E0A   CD BF 0D               CALL   run   
1E0D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E1C   CD 28 0C               CALL   flushBuffer   
1E1F   76                     HALT      
1E20                EXPECTM_2798S64:      
1E20   E1                     POP   HL   
1E21                          ;*Macro unroll:  test "2 3 *", 6
1E21   31 00 50               LD   SP,STACK   
1E24   CD E8 0C               CALL   coldInit   
1E27   CD FC 4D               CALL   execStr   
1E2A   32 20 33 20 2A 00      DB   "2 3 *",0   
1E30   CD 28 0C               CALL   flushBuffer   
1E33   E1                     POP   HL   
1E34   E5                     PUSH   HL   
1E35   11 06 00               LD   DE,6   
1E38   B7                     OR   A   
1E39   ED 52                  SBC   HL,DE   
1E3B   7D                     LD   A,L   
1E3C   B4                     OR   H   
1E3D   CA 9D 1E               JP   Z,expectM_2799S65   
1E40   CD A0 0C               CALL   printStr   
1E43   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1E4F   CD A0 0C               CALL   printStr   
1E52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E61   21 06 00               LD   hl,6   
1E64   E5                     PUSH   hl   
1E65   E5                     PUSH   hl   
1E66   CD BF 0D               CALL   run   
1E69   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E71   CD 28 0C               CALL   flushBuffer   
1E74   CD A0 0C               CALL   printStr   
1E77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E84   E1                     POP   hl   
1E85   E5                     PUSH   hl   
1E86   E5                     PUSH   hl   
1E87   CD BF 0D               CALL   run   
1E8A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E99   CD 28 0C               CALL   flushBuffer   
1E9C   76                     HALT      
1E9D                EXPECTM_2799S65:      
1E9D   E1                     POP   HL   
1E9E                          ;*Macro unroll:  test "1 2 3 + *", 5
1E9E   31 00 50               LD   SP,STACK   
1EA1   CD E8 0C               CALL   coldInit   
1EA4   CD FC 4D               CALL   execStr   
1EA7   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1EB1   CD 28 0C               CALL   flushBuffer   
1EB4   E1                     POP   HL   
1EB5   E5                     PUSH   HL   
1EB6   11 05 00               LD   DE,5   
1EB9   B7                     OR   A   
1EBA   ED 52                  SBC   HL,DE   
1EBC   7D                     LD   A,L   
1EBD   B4                     OR   H   
1EBE   CA 22 1F               JP   Z,expectM_2800S66   
1EC1   CD A0 0C               CALL   printStr   
1EC4   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1ED4   CD A0 0C               CALL   printStr   
1ED7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EE6   21 05 00               LD   hl,5   
1EE9   E5                     PUSH   hl   
1EEA   E5                     PUSH   hl   
1EEB   CD BF 0D               CALL   run   
1EEE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EF6   CD 28 0C               CALL   flushBuffer   
1EF9   CD A0 0C               CALL   printStr   
1EFC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F09   E1                     POP   hl   
1F0A   E5                     PUSH   hl   
1F0B   E5                     PUSH   hl   
1F0C   CD BF 0D               CALL   run   
1F0F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F1E   CD 28 0C               CALL   flushBuffer   
1F21   76                     HALT      
1F22                EXPECTM_2800S66:      
1F22   E1                     POP   HL   
1F23                          ;*Macro unroll:  test "7 3 /", 2
1F23   31 00 50               LD   SP,STACK   
1F26   CD E8 0C               CALL   coldInit   
1F29   CD FC 4D               CALL   execStr   
1F2C   37 20 33 20 2F 00      DB   "7 3 /",0   
1F32   CD 28 0C               CALL   flushBuffer   
1F35   E1                     POP   HL   
1F36   E5                     PUSH   HL   
1F37   11 02 00               LD   DE,2   
1F3A   B7                     OR   A   
1F3B   ED 52                  SBC   HL,DE   
1F3D   7D                     LD   A,L   
1F3E   B4                     OR   H   
1F3F   CA 9F 1F               JP   Z,expectM_2801S67   
1F42   CD A0 0C               CALL   printStr   
1F45   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1F51   CD A0 0C               CALL   printStr   
1F54   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F63   21 02 00               LD   hl,2   
1F66   E5                     PUSH   hl   
1F67   E5                     PUSH   hl   
1F68   CD BF 0D               CALL   run   
1F6B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F73   CD 28 0C               CALL   flushBuffer   
1F76   CD A0 0C               CALL   printStr   
1F79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F86   E1                     POP   hl   
1F87   E5                     PUSH   hl   
1F88   E5                     PUSH   hl   
1F89   CD BF 0D               CALL   run   
1F8C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F9B   CD 28 0C               CALL   flushBuffer   
1F9E   76                     HALT      
1F9F                EXPECTM_2801S67:      
1F9F   E1                     POP   HL   
1FA0                          ;*Macro unroll:  test "7 3 / /re", 1
1FA0   31 00 50               LD   SP,STACK   
1FA3   CD E8 0C               CALL   coldInit   
1FA6   CD FC 4D               CALL   execStr   
1FA9   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
1FB3   CD 28 0C               CALL   flushBuffer   
1FB6   E1                     POP   HL   
1FB7   E5                     PUSH   HL   
1FB8   11 01 00               LD   DE,1   
1FBB   B7                     OR   A   
1FBC   ED 52                  SBC   HL,DE   
1FBE   7D                     LD   A,L   
1FBF   B4                     OR   H   
1FC0   CA 24 20               JP   Z,expectM_2802S68   
1FC3   CD A0 0C               CALL   printStr   
1FC6   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1FD6   CD A0 0C               CALL   printStr   
1FD9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FE8   21 01 00               LD   hl,1   
1FEB   E5                     PUSH   hl   
1FEC   E5                     PUSH   hl   
1FED   CD BF 0D               CALL   run   
1FF0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FF8   CD 28 0C               CALL   flushBuffer   
1FFB   CD A0 0C               CALL   printStr   
1FFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
200B   E1                     POP   hl   
200C   E5                     PUSH   hl   
200D   E5                     PUSH   hl   
200E   CD BF 0D               CALL   run   
2011   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2020   CD 28 0C               CALL   flushBuffer   
2023   76                     HALT      
2024                EXPECTM_2802S68:      
2024   E1                     POP   HL   
2025                          ;*Macro unroll:  test "7 3 /", 2
2025   31 00 50               LD   SP,STACK   
2028   CD E8 0C               CALL   coldInit   
202B   CD FC 4D               CALL   execStr   
202E   37 20 33 20 2F 00      DB   "7 3 /",0   
2034   CD 28 0C               CALL   flushBuffer   
2037   E1                     POP   HL   
2038   E5                     PUSH   HL   
2039   11 02 00               LD   DE,2   
203C   B7                     OR   A   
203D   ED 52                  SBC   HL,DE   
203F   7D                     LD   A,L   
2040   B4                     OR   H   
2041   CA A1 20               JP   Z,expectM_2803S69   
2044   CD A0 0C               CALL   printStr   
2047   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2053   CD A0 0C               CALL   printStr   
2056   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2065   21 02 00               LD   hl,2   
2068   E5                     PUSH   hl   
2069   E5                     PUSH   hl   
206A   CD BF 0D               CALL   run   
206D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2075   CD 28 0C               CALL   flushBuffer   
2078   CD A0 0C               CALL   printStr   
207B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2088   E1                     POP   hl   
2089   E5                     PUSH   hl   
208A   E5                     PUSH   hl   
208B   CD BF 0D               CALL   run   
208E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
209D   CD 28 0C               CALL   flushBuffer   
20A0   76                     HALT      
20A1                EXPECTM_2803S69:      
20A1   E1                     POP   HL   
20A2                          ;*Macro unroll:  test "2 3 ==", FALSE
20A2   31 00 50               LD   SP,STACK   
20A5   CD E8 0C               CALL   coldInit   
20A8   CD FC 4D               CALL   execStr   
20AB   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
20B2   CD 28 0C               CALL   flushBuffer   
20B5   E1                     POP   HL   
20B6   E5                     PUSH   HL   
20B7   11 00 00               LD   DE,FALSE   
20BA   B7                     OR   A   
20BB   ED 52                  SBC   HL,DE   
20BD   7D                     LD   A,L   
20BE   B4                     OR   H   
20BF   CA 20 21               JP   Z,expectM_2804S70   
20C2   CD A0 0C               CALL   printStr   
20C5   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
20D2   CD A0 0C               CALL   printStr   
20D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20E4   21 00 00               LD   hl,FALSE   
20E7   E5                     PUSH   hl   
20E8   E5                     PUSH   hl   
20E9   CD BF 0D               CALL   run   
20EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20F4   CD 28 0C               CALL   flushBuffer   
20F7   CD A0 0C               CALL   printStr   
20FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2107   E1                     POP   hl   
2108   E5                     PUSH   hl   
2109   E5                     PUSH   hl   
210A   CD BF 0D               CALL   run   
210D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
211C   CD 28 0C               CALL   flushBuffer   
211F   76                     HALT      
2120                EXPECTM_2804S70:      
2120   E1                     POP   HL   
2121                          ;*Macro unroll:  test "3 3 ==", TRUE
2121   31 00 50               LD   SP,STACK   
2124   CD E8 0C               CALL   coldInit   
2127   CD FC 4D               CALL   execStr   
212A   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2131   CD 28 0C               CALL   flushBuffer   
2134   E1                     POP   HL   
2135   E5                     PUSH   HL   
2136   11 FF FF               LD   DE,TRUE   
2139   B7                     OR   A   
213A   ED 52                  SBC   HL,DE   
213C   7D                     LD   A,L   
213D   B4                     OR   H   
213E   CA 9F 21               JP   Z,expectM_2805S71   
2141   CD A0 0C               CALL   printStr   
2144   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2151   CD A0 0C               CALL   printStr   
2154   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2163   21 FF FF               LD   hl,TRUE   
2166   E5                     PUSH   hl   
2167   E5                     PUSH   hl   
2168   CD BF 0D               CALL   run   
216B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2173   CD 28 0C               CALL   flushBuffer   
2176   CD A0 0C               CALL   printStr   
2179   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2186   E1                     POP   hl   
2187   E5                     PUSH   hl   
2188   E5                     PUSH   hl   
2189   CD BF 0D               CALL   run   
218C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
219B   CD 28 0C               CALL   flushBuffer   
219E   76                     HALT      
219F                EXPECTM_2805S71:      
219F   E1                     POP   HL   
21A0                          ;*Macro unroll:  test "1 2 <", TRUE
21A0   31 00 50               LD   SP,STACK   
21A3   CD E8 0C               CALL   coldInit   
21A6   CD FC 4D               CALL   execStr   
21A9   31 20 32 20 3C 00      DB   "1 2 <",0   
21AF   CD 28 0C               CALL   flushBuffer   
21B2   E1                     POP   HL   
21B3   E5                     PUSH   HL   
21B4   11 FF FF               LD   DE,TRUE   
21B7   B7                     OR   A   
21B8   ED 52                  SBC   HL,DE   
21BA   7D                     LD   A,L   
21BB   B4                     OR   H   
21BC   CA 1C 22               JP   Z,expectM_2806S72   
21BF   CD A0 0C               CALL   printStr   
21C2   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
21CE   CD A0 0C               CALL   printStr   
21D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21E0   21 FF FF               LD   hl,TRUE   
21E3   E5                     PUSH   hl   
21E4   E5                     PUSH   hl   
21E5   CD BF 0D               CALL   run   
21E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21F0   CD 28 0C               CALL   flushBuffer   
21F3   CD A0 0C               CALL   printStr   
21F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2203   E1                     POP   hl   
2204   E5                     PUSH   hl   
2205   E5                     PUSH   hl   
2206   CD BF 0D               CALL   run   
2209   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2218   CD 28 0C               CALL   flushBuffer   
221B   76                     HALT      
221C                EXPECTM_2806S72:      
221C   E1                     POP   HL   
221D                          ;*Macro unroll:  test "2 1 <", FALSE
221D   31 00 50               LD   SP,STACK   
2220   CD E8 0C               CALL   coldInit   
2223   CD FC 4D               CALL   execStr   
2226   32 20 31 20 3C 00      DB   "2 1 <",0   
222C   CD 28 0C               CALL   flushBuffer   
222F   E1                     POP   HL   
2230   E5                     PUSH   HL   
2231   11 00 00               LD   DE,FALSE   
2234   B7                     OR   A   
2235   ED 52                  SBC   HL,DE   
2237   7D                     LD   A,L   
2238   B4                     OR   H   
2239   CA 99 22               JP   Z,expectM_2807S73   
223C   CD A0 0C               CALL   printStr   
223F   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
224B   CD A0 0C               CALL   printStr   
224E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
225D   21 00 00               LD   hl,FALSE   
2260   E5                     PUSH   hl   
2261   E5                     PUSH   hl   
2262   CD BF 0D               CALL   run   
2265   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
226D   CD 28 0C               CALL   flushBuffer   
2270   CD A0 0C               CALL   printStr   
2273   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2280   E1                     POP   hl   
2281   E5                     PUSH   hl   
2282   E5                     PUSH   hl   
2283   CD BF 0D               CALL   run   
2286   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2295   CD 28 0C               CALL   flushBuffer   
2298   76                     HALT      
2299                EXPECTM_2807S73:      
2299   E1                     POP   HL   
229A                          ;*Macro unroll:  test "2 3 <", TRUE
229A   31 00 50               LD   SP,STACK   
229D   CD E8 0C               CALL   coldInit   
22A0   CD FC 4D               CALL   execStr   
22A3   32 20 33 20 3C 00      DB   "2 3 <",0   
22A9   CD 28 0C               CALL   flushBuffer   
22AC   E1                     POP   HL   
22AD   E5                     PUSH   HL   
22AE   11 FF FF               LD   DE,TRUE   
22B1   B7                     OR   A   
22B2   ED 52                  SBC   HL,DE   
22B4   7D                     LD   A,L   
22B5   B4                     OR   H   
22B6   CA 16 23               JP   Z,expectM_2808S74   
22B9   CD A0 0C               CALL   printStr   
22BC   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
22C8   CD A0 0C               CALL   printStr   
22CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22DA   21 FF FF               LD   hl,TRUE   
22DD   E5                     PUSH   hl   
22DE   E5                     PUSH   hl   
22DF   CD BF 0D               CALL   run   
22E2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22EA   CD 28 0C               CALL   flushBuffer   
22ED   CD A0 0C               CALL   printStr   
22F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22FD   E1                     POP   hl   
22FE   E5                     PUSH   hl   
22FF   E5                     PUSH   hl   
2300   CD BF 0D               CALL   run   
2303   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2312   CD 28 0C               CALL   flushBuffer   
2315   76                     HALT      
2316                EXPECTM_2808S74:      
2316   E1                     POP   HL   
2317                          ;*Macro unroll:  test "3 3 <", FALSE
2317   31 00 50               LD   SP,STACK   
231A   CD E8 0C               CALL   coldInit   
231D   CD FC 4D               CALL   execStr   
2320   33 20 33 20 3C 00      DB   "3 3 <",0   
2326   CD 28 0C               CALL   flushBuffer   
2329   E1                     POP   HL   
232A   E5                     PUSH   HL   
232B   11 00 00               LD   DE,FALSE   
232E   B7                     OR   A   
232F   ED 52                  SBC   HL,DE   
2331   7D                     LD   A,L   
2332   B4                     OR   H   
2333   CA 93 23               JP   Z,expectM_2809S75   
2336   CD A0 0C               CALL   printStr   
2339   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2345   CD A0 0C               CALL   printStr   
2348   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2357   21 00 00               LD   hl,FALSE   
235A   E5                     PUSH   hl   
235B   E5                     PUSH   hl   
235C   CD BF 0D               CALL   run   
235F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2367   CD 28 0C               CALL   flushBuffer   
236A   CD A0 0C               CALL   printStr   
236D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
237A   E1                     POP   hl   
237B   E5                     PUSH   hl   
237C   E5                     PUSH   hl   
237D   CD BF 0D               CALL   run   
2380   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
238F   CD 28 0C               CALL   flushBuffer   
2392   76                     HALT      
2393                EXPECTM_2809S75:      
2393   E1                     POP   HL   
2394                          ;*Macro unroll:  test "1 2 >", FALSE
2394   31 00 50               LD   SP,STACK   
2397   CD E8 0C               CALL   coldInit   
239A   CD FC 4D               CALL   execStr   
239D   31 20 32 20 3E 00      DB   "1 2 >",0   
23A3   CD 28 0C               CALL   flushBuffer   
23A6   E1                     POP   HL   
23A7   E5                     PUSH   HL   
23A8   11 00 00               LD   DE,FALSE   
23AB   B7                     OR   A   
23AC   ED 52                  SBC   HL,DE   
23AE   7D                     LD   A,L   
23AF   B4                     OR   H   
23B0   CA 10 24               JP   Z,expectM_2810S76   
23B3   CD A0 0C               CALL   printStr   
23B6   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
23C2   CD A0 0C               CALL   printStr   
23C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D4   21 00 00               LD   hl,FALSE   
23D7   E5                     PUSH   hl   
23D8   E5                     PUSH   hl   
23D9   CD BF 0D               CALL   run   
23DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23E4   CD 28 0C               CALL   flushBuffer   
23E7   CD A0 0C               CALL   printStr   
23EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F7   E1                     POP   hl   
23F8   E5                     PUSH   hl   
23F9   E5                     PUSH   hl   
23FA   CD BF 0D               CALL   run   
23FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
240C   CD 28 0C               CALL   flushBuffer   
240F   76                     HALT      
2410                EXPECTM_2810S76:      
2410   E1                     POP   HL   
2411                          ;*Macro unroll:  test "2 1 >", TRUE
2411   31 00 50               LD   SP,STACK   
2414   CD E8 0C               CALL   coldInit   
2417   CD FC 4D               CALL   execStr   
241A   32 20 31 20 3E 00      DB   "2 1 >",0   
2420   CD 28 0C               CALL   flushBuffer   
2423   E1                     POP   HL   
2424   E5                     PUSH   HL   
2425   11 FF FF               LD   DE,TRUE   
2428   B7                     OR   A   
2429   ED 52                  SBC   HL,DE   
242B   7D                     LD   A,L   
242C   B4                     OR   H   
242D   CA 8D 24               JP   Z,expectM_2811S77   
2430   CD A0 0C               CALL   printStr   
2433   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
243F   CD A0 0C               CALL   printStr   
2442   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2451   21 FF FF               LD   hl,TRUE   
2454   E5                     PUSH   hl   
2455   E5                     PUSH   hl   
2456   CD BF 0D               CALL   run   
2459   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2461   CD 28 0C               CALL   flushBuffer   
2464   CD A0 0C               CALL   printStr   
2467   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2474   E1                     POP   hl   
2475   E5                     PUSH   hl   
2476   E5                     PUSH   hl   
2477   CD BF 0D               CALL   run   
247A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2489   CD 28 0C               CALL   flushBuffer   
248C   76                     HALT      
248D                EXPECTM_2811S77:      
248D   E1                     POP   HL   
248E                          ;*Macro unroll:  test "3 3 >", FALSE
248E   31 00 50               LD   SP,STACK   
2491   CD E8 0C               CALL   coldInit   
2494   CD FC 4D               CALL   execStr   
2497   33 20 33 20 3E 00      DB   "3 3 >",0   
249D   CD 28 0C               CALL   flushBuffer   
24A0   E1                     POP   HL   
24A1   E5                     PUSH   HL   
24A2   11 00 00               LD   DE,FALSE   
24A5   B7                     OR   A   
24A6   ED 52                  SBC   HL,DE   
24A8   7D                     LD   A,L   
24A9   B4                     OR   H   
24AA   CA 0A 25               JP   Z,expectM_2812S78   
24AD   CD A0 0C               CALL   printStr   
24B0   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
24BC   CD A0 0C               CALL   printStr   
24BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24CE   21 00 00               LD   hl,FALSE   
24D1   E5                     PUSH   hl   
24D2   E5                     PUSH   hl   
24D3   CD BF 0D               CALL   run   
24D6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24DE   CD 28 0C               CALL   flushBuffer   
24E1   CD A0 0C               CALL   printStr   
24E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24F1   E1                     POP   hl   
24F2   E5                     PUSH   hl   
24F3   E5                     PUSH   hl   
24F4   CD BF 0D               CALL   run   
24F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2506   CD 28 0C               CALL   flushBuffer   
2509   76                     HALT      
250A                EXPECTM_2812S78:      
250A   E1                     POP   HL   
250B                          ;*Macro unroll:  test "4 3 >", TRUE
250B   31 00 50               LD   SP,STACK   
250E   CD E8 0C               CALL   coldInit   
2511   CD FC 4D               CALL   execStr   
2514   34 20 33 20 3E 00      DB   "4 3 >",0   
251A   CD 28 0C               CALL   flushBuffer   
251D   E1                     POP   HL   
251E   E5                     PUSH   HL   
251F   11 FF FF               LD   DE,TRUE   
2522   B7                     OR   A   
2523   ED 52                  SBC   HL,DE   
2525   7D                     LD   A,L   
2526   B4                     OR   H   
2527   CA 87 25               JP   Z,expectM_2813S79   
252A   CD A0 0C               CALL   printStr   
252D   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2539   CD A0 0C               CALL   printStr   
253C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
254B   21 FF FF               LD   hl,TRUE   
254E   E5                     PUSH   hl   
254F   E5                     PUSH   hl   
2550   CD BF 0D               CALL   run   
2553   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
255B   CD 28 0C               CALL   flushBuffer   
255E   CD A0 0C               CALL   printStr   
2561   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
256E   E1                     POP   hl   
256F   E5                     PUSH   hl   
2570   E5                     PUSH   hl   
2571   CD BF 0D               CALL   run   
2574   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2583   CD 28 0C               CALL   flushBuffer   
2586   76                     HALT      
2587                EXPECTM_2813S79:      
2587   E1                     POP   HL   
2588                          ;*Macro unroll:  test "2 2 <=", TRUE
2588   31 00 50               LD   SP,STACK   
258B   CD E8 0C               CALL   coldInit   
258E   CD FC 4D               CALL   execStr   
2591   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2598   CD 28 0C               CALL   flushBuffer   
259B   E1                     POP   HL   
259C   E5                     PUSH   HL   
259D   11 FF FF               LD   DE,TRUE   
25A0   B7                     OR   A   
25A1   ED 52                  SBC   HL,DE   
25A3   7D                     LD   A,L   
25A4   B4                     OR   H   
25A5   CA 06 26               JP   Z,expectM_2814S80   
25A8   CD A0 0C               CALL   printStr   
25AB   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
25B8   CD A0 0C               CALL   printStr   
25BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25CA   21 FF FF               LD   hl,TRUE   
25CD   E5                     PUSH   hl   
25CE   E5                     PUSH   hl   
25CF   CD BF 0D               CALL   run   
25D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25DA   CD 28 0C               CALL   flushBuffer   
25DD   CD A0 0C               CALL   printStr   
25E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25ED   E1                     POP   hl   
25EE   E5                     PUSH   hl   
25EF   E5                     PUSH   hl   
25F0   CD BF 0D               CALL   run   
25F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2602   CD 28 0C               CALL   flushBuffer   
2605   76                     HALT      
2606                EXPECTM_2814S80:      
2606   E1                     POP   HL   
2607                          ;*Macro unroll:  test "2 2 >=", TRUE
2607   31 00 50               LD   SP,STACK   
260A   CD E8 0C               CALL   coldInit   
260D   CD FC 4D               CALL   execStr   
2610   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2617   CD 28 0C               CALL   flushBuffer   
261A   E1                     POP   HL   
261B   E5                     PUSH   HL   
261C   11 FF FF               LD   DE,TRUE   
261F   B7                     OR   A   
2620   ED 52                  SBC   HL,DE   
2622   7D                     LD   A,L   
2623   B4                     OR   H   
2624   CA 85 26               JP   Z,expectM_2815S81   
2627   CD A0 0C               CALL   printStr   
262A   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2637   CD A0 0C               CALL   printStr   
263A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2649   21 FF FF               LD   hl,TRUE   
264C   E5                     PUSH   hl   
264D   E5                     PUSH   hl   
264E   CD BF 0D               CALL   run   
2651   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2659   CD 28 0C               CALL   flushBuffer   
265C   CD A0 0C               CALL   printStr   
265F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
266C   E1                     POP   hl   
266D   E5                     PUSH   hl   
266E   E5                     PUSH   hl   
266F   CD BF 0D               CALL   run   
2672   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2681   CD 28 0C               CALL   flushBuffer   
2684   76                     HALT      
2685                EXPECTM_2815S81:      
2685   E1                     POP   HL   
2686                          ;*Macro unroll:  test "3 1 <<", 6
2686   31 00 50               LD   SP,STACK   
2689   CD E8 0C               CALL   coldInit   
268C   CD FC 4D               CALL   execStr   
268F   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2696   CD 28 0C               CALL   flushBuffer   
2699   E1                     POP   HL   
269A   E5                     PUSH   HL   
269B   11 06 00               LD   DE,6   
269E   B7                     OR   A   
269F   ED 52                  SBC   HL,DE   
26A1   7D                     LD   A,L   
26A2   B4                     OR   H   
26A3   CA 04 27               JP   Z,expectM_2816S82   
26A6   CD A0 0C               CALL   printStr   
26A9   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
26B6   CD A0 0C               CALL   printStr   
26B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C8   21 06 00               LD   hl,6   
26CB   E5                     PUSH   hl   
26CC   E5                     PUSH   hl   
26CD   CD BF 0D               CALL   run   
26D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26D8   CD 28 0C               CALL   flushBuffer   
26DB   CD A0 0C               CALL   printStr   
26DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26EB   E1                     POP   hl   
26EC   E5                     PUSH   hl   
26ED   E5                     PUSH   hl   
26EE   CD BF 0D               CALL   run   
26F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2700   CD 28 0C               CALL   flushBuffer   
2703   76                     HALT      
2704                EXPECTM_2816S82:      
2704   E1                     POP   HL   
2705                          ;*Macro unroll:  test "10 1 >>", 5
2705   31 00 50               LD   SP,STACK   
2708   CD E8 0C               CALL   coldInit   
270B   CD FC 4D               CALL   execStr   
270E   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2716   CD 28 0C               CALL   flushBuffer   
2719   E1                     POP   HL   
271A   E5                     PUSH   HL   
271B   11 05 00               LD   DE,5   
271E   B7                     OR   A   
271F   ED 52                  SBC   HL,DE   
2721   7D                     LD   A,L   
2722   B4                     OR   H   
2723   CA 85 27               JP   Z,expectM_2817S83   
2726   CD A0 0C               CALL   printStr   
2729   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2737   CD A0 0C               CALL   printStr   
273A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2749   21 05 00               LD   hl,5   
274C   E5                     PUSH   hl   
274D   E5                     PUSH   hl   
274E   CD BF 0D               CALL   run   
2751   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2759   CD 28 0C               CALL   flushBuffer   
275C   CD A0 0C               CALL   printStr   
275F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
276C   E1                     POP   hl   
276D   E5                     PUSH   hl   
276E   E5                     PUSH   hl   
276F   CD BF 0D               CALL   run   
2772   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2781   CD 28 0C               CALL   flushBuffer   
2784   76                     HALT      
2785                EXPECTM_2817S83:      
2785   E1                     POP   HL   
2786                          ;*Macro unroll:  test "1 x = x", 1
2786   31 00 50               LD   SP,STACK   
2789   CD E8 0C               CALL   coldInit   
278C   CD FC 4D               CALL   execStr   
278F   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2797   CD 28 0C               CALL   flushBuffer   
279A   E1                     POP   HL   
279B   E5                     PUSH   HL   
279C   11 01 00               LD   DE,1   
279F   B7                     OR   A   
27A0   ED 52                  SBC   HL,DE   
27A2   7D                     LD   A,L   
27A3   B4                     OR   H   
27A4   CA 06 28               JP   Z,expectM_2818S84   
27A7   CD A0 0C               CALL   printStr   
27AA   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
27B8   CD A0 0C               CALL   printStr   
27BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27CA   21 01 00               LD   hl,1   
27CD   E5                     PUSH   hl   
27CE   E5                     PUSH   hl   
27CF   CD BF 0D               CALL   run   
27D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27DA   CD 28 0C               CALL   flushBuffer   
27DD   CD A0 0C               CALL   printStr   
27E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27ED   E1                     POP   hl   
27EE   E5                     PUSH   hl   
27EF   E5                     PUSH   hl   
27F0   CD BF 0D               CALL   run   
27F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2802   CD 28 0C               CALL   flushBuffer   
2805   76                     HALT      
2806                EXPECTM_2818S84:      
2806   E1                     POP   HL   
2807                          ;*Macro unroll:  test "1{}^", 1
2807   31 00 50               LD   SP,STACK   
280A   CD E8 0C               CALL   coldInit   
280D   CD FC 4D               CALL   execStr   
2810   31 7B 7D 5E 00         DB   "1{}^",0   
2815   CD 28 0C               CALL   flushBuffer   
2818   E1                     POP   HL   
2819   E5                     PUSH   HL   
281A   11 01 00               LD   DE,1   
281D   B7                     OR   A   
281E   ED 52                  SBC   HL,DE   
2820   7D                     LD   A,L   
2821   B4                     OR   H   
2822   CA 81 28               JP   Z,expectM_2819S85   
2825   CD A0 0C               CALL   printStr   
2828   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2833   CD A0 0C               CALL   printStr   
2836   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2845   21 01 00               LD   hl,1   
2848   E5                     PUSH   hl   
2849   E5                     PUSH   hl   
284A   CD BF 0D               CALL   run   
284D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2855   CD 28 0C               CALL   flushBuffer   
2858   CD A0 0C               CALL   printStr   
285B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2868   E1                     POP   hl   
2869   E5                     PUSH   hl   
286A   E5                     PUSH   hl   
286B   CD BF 0D               CALL   run   
286E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
287D   CD 28 0C               CALL   flushBuffer   
2880   76                     HALT      
2881                EXPECTM_2819S85:      
2881   E1                     POP   HL   
2882                          ;*Macro unroll:  test "{1}^", 1
2882   31 00 50               LD   SP,STACK   
2885   CD E8 0C               CALL   coldInit   
2888   CD FC 4D               CALL   execStr   
288B   7B 31 7D 5E 00         DB   "{1}^",0   
2890   CD 28 0C               CALL   flushBuffer   
2893   E1                     POP   HL   
2894   E5                     PUSH   HL   
2895   11 01 00               LD   DE,1   
2898   B7                     OR   A   
2899   ED 52                  SBC   HL,DE   
289B   7D                     LD   A,L   
289C   B4                     OR   H   
289D   CA FC 28               JP   Z,expectM_2820S86   
28A0   CD A0 0C               CALL   printStr   
28A3   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
28AE   CD A0 0C               CALL   printStr   
28B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28C0   21 01 00               LD   hl,1   
28C3   E5                     PUSH   hl   
28C4   E5                     PUSH   hl   
28C5   CD BF 0D               CALL   run   
28C8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28D0   CD 28 0C               CALL   flushBuffer   
28D3   CD A0 0C               CALL   printStr   
28D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28E3   E1                     POP   hl   
28E4   E5                     PUSH   hl   
28E5   E5                     PUSH   hl   
28E6   CD BF 0D               CALL   run   
28E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28F8   CD 28 0C               CALL   flushBuffer   
28FB   76                     HALT      
28FC                EXPECTM_2820S86:      
28FC   E1                     POP   HL   
28FD                          ;*Macro unroll:  test "{{1}^}^", 1
28FD   31 00 50               LD   SP,STACK   
2900   CD E8 0C               CALL   coldInit   
2903   CD FC 4D               CALL   execStr   
2906   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
290E   CD 28 0C               CALL   flushBuffer   
2911   E1                     POP   HL   
2912   E5                     PUSH   HL   
2913   11 01 00               LD   DE,1   
2916   B7                     OR   A   
2917   ED 52                  SBC   HL,DE   
2919   7D                     LD   A,L   
291A   B4                     OR   H   
291B   CA 7D 29               JP   Z,expectM_2821S87   
291E   CD A0 0C               CALL   printStr   
2921   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
292F   CD A0 0C               CALL   printStr   
2932   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2941   21 01 00               LD   hl,1   
2944   E5                     PUSH   hl   
2945   E5                     PUSH   hl   
2946   CD BF 0D               CALL   run   
2949   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2951   CD 28 0C               CALL   flushBuffer   
2954   CD A0 0C               CALL   printStr   
2957   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2964   E1                     POP   hl   
2965   E5                     PUSH   hl   
2966   E5                     PUSH   hl   
2967   CD BF 0D               CALL   run   
296A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2979   CD 28 0C               CALL   flushBuffer   
297C   76                     HALT      
297D                EXPECTM_2821S87:      
297D   E1                     POP   HL   
297E                          ;*Macro unroll:  test "{{{1}^}^}^", 1
297E   31 00 50               LD   SP,STACK   
2981   CD E8 0C               CALL   coldInit   
2984   CD FC 4D               CALL   execStr   
2987   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2992   CD 28 0C               CALL   flushBuffer   
2995   E1                     POP   HL   
2996   E5                     PUSH   HL   
2997   11 01 00               LD   DE,1   
299A   B7                     OR   A   
299B   ED 52                  SBC   HL,DE   
299D   7D                     LD   A,L   
299E   B4                     OR   H   
299F   CA 04 2A               JP   Z,expectM_2822S88   
29A2   CD A0 0C               CALL   printStr   
29A5   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
29B6   CD A0 0C               CALL   printStr   
29B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29C8   21 01 00               LD   hl,1   
29CB   E5                     PUSH   hl   
29CC   E5                     PUSH   hl   
29CD   CD BF 0D               CALL   run   
29D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29D8   CD 28 0C               CALL   flushBuffer   
29DB   CD A0 0C               CALL   printStr   
29DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29EB   E1                     POP   hl   
29EC   E5                     PUSH   hl   
29ED   E5                     PUSH   hl   
29EE   CD BF 0D               CALL   run   
29F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A00   CD 28 0C               CALL   flushBuffer   
2A03   76                     HALT      
2A04                EXPECTM_2822S88:      
2A04   E1                     POP   HL   
2A05                          ;*Macro unroll:  test "5 /f{10} ?", 5
2A05   31 00 50               LD   SP,STACK   
2A08   CD E8 0C               CALL   coldInit   
2A0B   CD FC 4D               CALL   execStr   
2A0E   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2A19   CD 28 0C               CALL   flushBuffer   
2A1C   E1                     POP   HL   
2A1D   E5                     PUSH   HL   
2A1E   11 05 00               LD   DE,5   
2A21   B7                     OR   A   
2A22   ED 52                  SBC   HL,DE   
2A24   7D                     LD   A,L   
2A25   B4                     OR   H   
2A26   CA 8B 2A               JP   Z,expectM_2823S89   
2A29   CD A0 0C               CALL   printStr   
2A2C   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2A3D   CD A0 0C               CALL   printStr   
2A40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A4F   21 05 00               LD   hl,5   
2A52   E5                     PUSH   hl   
2A53   E5                     PUSH   hl   
2A54   CD BF 0D               CALL   run   
2A57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A5F   CD 28 0C               CALL   flushBuffer   
2A62   CD A0 0C               CALL   printStr   
2A65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A72   E1                     POP   hl   
2A73   E5                     PUSH   hl   
2A74   E5                     PUSH   hl   
2A75   CD BF 0D               CALL   run   
2A78   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A87   CD 28 0C               CALL   flushBuffer   
2A8A   76                     HALT      
2A8B                EXPECTM_2823S89:      
2A8B   E1                     POP   HL   
2A8C                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2A8C   31 00 50               LD   SP,STACK   
2A8F   CD E8 0C               CALL   coldInit   
2A92   CD FC 4D               CALL   execStr   
2A95   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2AA2   CD 28 0C               CALL   flushBuffer   
2AA5   E1                     POP   HL   
2AA6   E5                     PUSH   HL   
2AA7   11 0F 00               LD   DE,15   
2AAA   B7                     OR   A   
2AAB   ED 52                  SBC   HL,DE   
2AAD   7D                     LD   A,L   
2AAE   B4                     OR   H   
2AAF   CA 16 2B               JP   Z,expectM_2824S90   
2AB2   CD A0 0C               CALL   printStr   
2AB5   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2AC8   CD A0 0C               CALL   printStr   
2ACB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ADA   21 0F 00               LD   hl,15   
2ADD   E5                     PUSH   hl   
2ADE   E5                     PUSH   hl   
2ADF   CD BF 0D               CALL   run   
2AE2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AEA   CD 28 0C               CALL   flushBuffer   
2AED   CD A0 0C               CALL   printStr   
2AF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AFD   E1                     POP   hl   
2AFE   E5                     PUSH   hl   
2AFF   E5                     PUSH   hl   
2B00   CD BF 0D               CALL   run   
2B03   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B12   CD 28 0C               CALL   flushBuffer   
2B15   76                     HALT      
2B16                EXPECTM_2824S90:      
2B16   E1                     POP   HL   
2B17                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2B17   31 00 50               LD   SP,STACK   
2B1A   CD E8 0C               CALL   coldInit   
2B1D   CD FC 4D               CALL   execStr   
2B20   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2B32   CD 28 0C               CALL   flushBuffer   
2B35   E1                     POP   HL   
2B36   E5                     PUSH   HL   
2B37   11 15 00               LD   DE,21   
2B3A   B7                     OR   A   
2B3B   ED 52                  SBC   HL,DE   
2B3D   7D                     LD   A,L   
2B3E   B4                     OR   H   
2B3F   CA AB 2B               JP   Z,expectM_2825S91   
2B42   CD A0 0C               CALL   printStr   
2B45   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2B5D   CD A0 0C               CALL   printStr   
2B60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6F   21 15 00               LD   hl,21   
2B72   E5                     PUSH   hl   
2B73   E5                     PUSH   hl   
2B74   CD BF 0D               CALL   run   
2B77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B7F   CD 28 0C               CALL   flushBuffer   
2B82   CD A0 0C               CALL   printStr   
2B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B92   E1                     POP   hl   
2B93   E5                     PUSH   hl   
2B94   E5                     PUSH   hl   
2B95   CD BF 0D               CALL   run   
2B98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BA7   CD 28 0C               CALL   flushBuffer   
2BAA   76                     HALT      
2BAB                EXPECTM_2825S91:      
2BAB   E1                     POP   HL   
2BAC                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2BAC   31 00 50               LD   SP,STACK   
2BAF   CD E8 0C               CALL   coldInit   
2BB2   CD FC 4D               CALL   execStr   
2BB5   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2BC7   CD 28 0C               CALL   flushBuffer   
2BCA   E1                     POP   HL   
2BCB   E5                     PUSH   HL   
2BCC   11 0B 00               LD   DE,11   
2BCF   B7                     OR   A   
2BD0   ED 52                  SBC   HL,DE   
2BD2   7D                     LD   A,L   
2BD3   B4                     OR   H   
2BD4   CA 40 2C               JP   Z,expectM_2826S92   
2BD7   CD A0 0C               CALL   printStr   
2BDA   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2BF2   CD A0 0C               CALL   printStr   
2BF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C04   21 0B 00               LD   hl,11   
2C07   E5                     PUSH   hl   
2C08   E5                     PUSH   hl   
2C09   CD BF 0D               CALL   run   
2C0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C14   CD 28 0C               CALL   flushBuffer   
2C17   CD A0 0C               CALL   printStr   
2C1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C27   E1                     POP   hl   
2C28   E5                     PUSH   hl   
2C29   E5                     PUSH   hl   
2C2A   CD BF 0D               CALL   run   
2C2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C3C   CD 28 0C               CALL   flushBuffer   
2C3F   76                     HALT      
2C40                EXPECTM_2826S92:      
2C40   E1                     POP   HL   
2C41                          ;*Macro unroll:  test ": 0#", $0000
2C41   31 00 50               LD   SP,STACK   
2C44   CD E8 0C               CALL   coldInit   
2C47   CD FC 4D               CALL   execStr   
2C4A   3A 20 30 23 00         DB   ": 0#",0   
2C4F   CD 28 0C               CALL   flushBuffer   
2C52   E1                     POP   HL   
2C53   E5                     PUSH   HL   
2C54   11 00 00               LD   DE,$0000   
2C57   B7                     OR   A   
2C58   ED 52                  SBC   HL,DE   
2C5A   7D                     LD   A,L   
2C5B   B4                     OR   H   
2C5C   CA BB 2C               JP   Z,expectM_2827S93   
2C5F   CD A0 0C               CALL   printStr   
2C62   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2C6D   CD A0 0C               CALL   printStr   
2C70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C7F   21 00 00               LD   hl,$0000   
2C82   E5                     PUSH   hl   
2C83   E5                     PUSH   hl   
2C84   CD BF 0D               CALL   run   
2C87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C8F   CD 28 0C               CALL   flushBuffer   
2C92   CD A0 0C               CALL   printStr   
2C95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CA2   E1                     POP   hl   
2CA3   E5                     PUSH   hl   
2CA4   E5                     PUSH   hl   
2CA5   CD BF 0D               CALL   run   
2CA8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CB7   CD 28 0C               CALL   flushBuffer   
2CBA   76                     HALT      
2CBB                EXPECTM_2827S93:      
2CBB   E1                     POP   HL   
2CBC                          ;*Macro unroll:  test ":a 0#", $0100
2CBC   31 00 50               LD   SP,STACK   
2CBF   CD E8 0C               CALL   coldInit   
2CC2   CD FC 4D               CALL   execStr   
2CC5   3A 61 20 30 23 00      DB   ":a 0#",0   
2CCB   CD 28 0C               CALL   flushBuffer   
2CCE   E1                     POP   HL   
2CCF   E5                     PUSH   HL   
2CD0   11 00 01               LD   DE,$0100   
2CD3   B7                     OR   A   
2CD4   ED 52                  SBC   HL,DE   
2CD6   7D                     LD   A,L   
2CD7   B4                     OR   H   
2CD8   CA 38 2D               JP   Z,expectM_2828S94   
2CDB   CD A0 0C               CALL   printStr   
2CDE   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2CEA   CD A0 0C               CALL   printStr   
2CED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CFC   21 00 01               LD   hl,$0100   
2CFF   E5                     PUSH   hl   
2D00   E5                     PUSH   hl   
2D01   CD BF 0D               CALL   run   
2D04   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D0C   CD 28 0C               CALL   flushBuffer   
2D0F   CD A0 0C               CALL   printStr   
2D12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D1F   E1                     POP   hl   
2D20   E5                     PUSH   hl   
2D21   E5                     PUSH   hl   
2D22   CD BF 0D               CALL   run   
2D25   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D34   CD 28 0C               CALL   flushBuffer   
2D37   76                     HALT      
2D38                EXPECTM_2828S94:      
2D38   E1                     POP   HL   
2D39                          ;*Macro unroll:  test ":a: 0#", $0100
2D39   31 00 50               LD   SP,STACK   
2D3C   CD E8 0C               CALL   coldInit   
2D3F   CD FC 4D               CALL   execStr   
2D42   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2D49   CD 28 0C               CALL   flushBuffer   
2D4C   E1                     POP   HL   
2D4D   E5                     PUSH   HL   
2D4E   11 00 01               LD   DE,$0100   
2D51   B7                     OR   A   
2D52   ED 52                  SBC   HL,DE   
2D54   7D                     LD   A,L   
2D55   B4                     OR   H   
2D56   CA B7 2D               JP   Z,expectM_2829S95   
2D59   CD A0 0C               CALL   printStr   
2D5C   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2D69   CD A0 0C               CALL   printStr   
2D6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7B   21 00 01               LD   hl,$0100   
2D7E   E5                     PUSH   hl   
2D7F   E5                     PUSH   hl   
2D80   CD BF 0D               CALL   run   
2D83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D8B   CD 28 0C               CALL   flushBuffer   
2D8E   CD A0 0C               CALL   printStr   
2D91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9E   E1                     POP   hl   
2D9F   E5                     PUSH   hl   
2DA0   E5                     PUSH   hl   
2DA1   CD BF 0D               CALL   run   
2DA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DB3   CD 28 0C               CALL   flushBuffer   
2DB6   76                     HALT      
2DB7                EXPECTM_2829S95:      
2DB7   E1                     POP   HL   
2DB8                          ;*Macro unroll:  test ":a:b 0#", $0201
2DB8   31 00 50               LD   SP,STACK   
2DBB   CD E8 0C               CALL   coldInit   
2DBE   CD FC 4D               CALL   execStr   
2DC1   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
2DC9   CD 28 0C               CALL   flushBuffer   
2DCC   E1                     POP   HL   
2DCD   E5                     PUSH   HL   
2DCE   11 01 02               LD   DE,$0201   
2DD1   B7                     OR   A   
2DD2   ED 52                  SBC   HL,DE   
2DD4   7D                     LD   A,L   
2DD5   B4                     OR   H   
2DD6   CA 38 2E               JP   Z,expectM_2830S96   
2DD9   CD A0 0C               CALL   printStr   
2DDC   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2DEA   CD A0 0C               CALL   printStr   
2DED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DFC   21 01 02               LD   hl,$0201   
2DFF   E5                     PUSH   hl   
2E00   E5                     PUSH   hl   
2E01   CD BF 0D               CALL   run   
2E04   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E0C   CD 28 0C               CALL   flushBuffer   
2E0F   CD A0 0C               CALL   printStr   
2E12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E1F   E1                     POP   hl   
2E20   E5                     PUSH   hl   
2E21   E5                     PUSH   hl   
2E22   CD BF 0D               CALL   run   
2E25   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E34   CD 28 0C               CALL   flushBuffer   
2E37   76                     HALT      
2E38                EXPECTM_2830S96:      
2E38   E1                     POP   HL   
2E39                          ;*Macro unroll:  test "::b 0#", $0101
2E39   31 00 50               LD   SP,STACK   
2E3C   CD E8 0C               CALL   coldInit   
2E3F   CD FC 4D               CALL   execStr   
2E42   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
2E49   CD 28 0C               CALL   flushBuffer   
2E4C   E1                     POP   HL   
2E4D   E5                     PUSH   HL   
2E4E   11 01 01               LD   DE,$0101   
2E51   B7                     OR   A   
2E52   ED 52                  SBC   HL,DE   
2E54   7D                     LD   A,L   
2E55   B4                     OR   H   
2E56   CA B7 2E               JP   Z,expectM_2831S97   
2E59   CD A0 0C               CALL   printStr   
2E5C   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2E69   CD A0 0C               CALL   printStr   
2E6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E7B   21 01 01               LD   hl,$0101   
2E7E   E5                     PUSH   hl   
2E7F   E5                     PUSH   hl   
2E80   CD BF 0D               CALL   run   
2E83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E8B   CD 28 0C               CALL   flushBuffer   
2E8E   CD A0 0C               CALL   printStr   
2E91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E9E   E1                     POP   hl   
2E9F   E5                     PUSH   hl   
2EA0   E5                     PUSH   hl   
2EA1   CD BF 0D               CALL   run   
2EA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EB3   CD 28 0C               CALL   flushBuffer   
2EB6   76                     HALT      
2EB7                EXPECTM_2831S97:      
2EB7   E1                     POP   HL   
2EB8                          ;*Macro unroll:  test ":{2};^", 2
2EB8   31 00 50               LD   SP,STACK   
2EBB   CD E8 0C               CALL   coldInit   
2EBE   CD FC 4D               CALL   execStr   
2EC1   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
2EC8   CD 28 0C               CALL   flushBuffer   
2ECB   E1                     POP   HL   
2ECC   E5                     PUSH   HL   
2ECD   11 02 00               LD   DE,2   
2ED0   B7                     OR   A   
2ED1   ED 52                  SBC   HL,DE   
2ED3   7D                     LD   A,L   
2ED4   B4                     OR   H   
2ED5   CA 36 2F               JP   Z,expectM_2832S98   
2ED8   CD A0 0C               CALL   printStr   
2EDB   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2EE8   CD A0 0C               CALL   printStr   
2EEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EFA   21 02 00               LD   hl,2   
2EFD   E5                     PUSH   hl   
2EFE   E5                     PUSH   hl   
2EFF   CD BF 0D               CALL   run   
2F02   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F0A   CD 28 0C               CALL   flushBuffer   
2F0D   CD A0 0C               CALL   printStr   
2F10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F1D   E1                     POP   hl   
2F1E   E5                     PUSH   hl   
2F1F   E5                     PUSH   hl   
2F20   CD BF 0D               CALL   run   
2F23   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F32   CD 28 0C               CALL   flushBuffer   
2F35   76                     HALT      
2F36                EXPECTM_2832S98:      
2F36   E1                     POP   HL   
2F37                          ;*Macro unroll:  test ":a{2};^", 2
2F37   31 00 50               LD   SP,STACK   
2F3A   CD E8 0C               CALL   coldInit   
2F3D   CD FC 4D               CALL   execStr   
2F40   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
2F48   CD 28 0C               CALL   flushBuffer   
2F4B   E1                     POP   HL   
2F4C   E5                     PUSH   HL   
2F4D   11 02 00               LD   DE,2   
2F50   B7                     OR   A   
2F51   ED 52                  SBC   HL,DE   
2F53   7D                     LD   A,L   
2F54   B4                     OR   H   
2F55   CA B7 2F               JP   Z,expectM_2833S99   
2F58   CD A0 0C               CALL   printStr   
2F5B   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2F69   CD A0 0C               CALL   printStr   
2F6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F7B   21 02 00               LD   hl,2   
2F7E   E5                     PUSH   hl   
2F7F   E5                     PUSH   hl   
2F80   CD BF 0D               CALL   run   
2F83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F8B   CD 28 0C               CALL   flushBuffer   
2F8E   CD A0 0C               CALL   printStr   
2F91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F9E   E1                     POP   hl   
2F9F   E5                     PUSH   hl   
2FA0   E5                     PUSH   hl   
2FA1   CD BF 0D               CALL   run   
2FA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FB3   CD 28 0C               CALL   flushBuffer   
2FB6   76                     HALT      
2FB7                EXPECTM_2833S99:      
2FB7   E1                     POP   HL   
2FB8                          ;*Macro unroll:  test "5 :a{%a};^", 5
2FB8   31 00 50               LD   SP,STACK   
2FBB   CD E8 0C               CALL   coldInit   
2FBE   CD FC 4D               CALL   execStr   
2FC1   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
2FCC   CD 28 0C               CALL   flushBuffer   
2FCF   E1                     POP   HL   
2FD0   E5                     PUSH   HL   
2FD1   11 05 00               LD   DE,5   
2FD4   B7                     OR   A   
2FD5   ED 52                  SBC   HL,DE   
2FD7   7D                     LD   A,L   
2FD8   B4                     OR   H   
2FD9   CA 3E 30               JP   Z,expectM_2834S100   
2FDC   CD A0 0C               CALL   printStr   
2FDF   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
2FF0   CD A0 0C               CALL   printStr   
2FF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3002   21 05 00               LD   hl,5   
3005   E5                     PUSH   hl   
3006   E5                     PUSH   hl   
3007   CD BF 0D               CALL   run   
300A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3012   CD 28 0C               CALL   flushBuffer   
3015   CD A0 0C               CALL   printStr   
3018   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3025   E1                     POP   hl   
3026   E5                     PUSH   hl   
3027   E5                     PUSH   hl   
3028   CD BF 0D               CALL   run   
302B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
303A   CD 28 0C               CALL   flushBuffer   
303D   76                     HALT      
303E                EXPECTM_2834S100:      
303E   E1                     POP   HL   
303F                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
303F   31 00 50               LD   SP,STACK   
3042   CD E8 0C               CALL   coldInit   
3045   CD FC 4D               CALL   execStr   
3048   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
3055   CD 28 0C               CALL   flushBuffer   
3058   E1                     POP   HL   
3059   E5                     PUSH   HL   
305A   11 05 00               LD   DE,5   
305D   B7                     OR   A   
305E   ED 52                  SBC   HL,DE   
3060   7D                     LD   A,L   
3061   B4                     OR   H   
3062   CA C9 30               JP   Z,expectM_2835S101   
3065   CD A0 0C               CALL   printStr   
3068   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
307B   CD A0 0C               CALL   printStr   
307E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
308D   21 05 00               LD   hl,5   
3090   E5                     PUSH   hl   
3091   E5                     PUSH   hl   
3092   CD BF 0D               CALL   run   
3095   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
309D   CD 28 0C               CALL   flushBuffer   
30A0   CD A0 0C               CALL   printStr   
30A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30B0   E1                     POP   hl   
30B1   E5                     PUSH   hl   
30B2   E5                     PUSH   hl   
30B3   CD BF 0D               CALL   run   
30B6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30C5   CD 28 0C               CALL   flushBuffer   
30C8   76                     HALT      
30C9                EXPECTM_2835S101:      
30C9   E1                     POP   HL   
30CA                          ;*Macro unroll:  test ":a{{2}^};^", 2
30CA   31 00 50               LD   SP,STACK   
30CD   CD E8 0C               CALL   coldInit   
30D0   CD FC 4D               CALL   execStr   
30D3   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
30DE   CD 28 0C               CALL   flushBuffer   
30E1   E1                     POP   HL   
30E2   E5                     PUSH   HL   
30E3   11 02 00               LD   DE,2   
30E6   B7                     OR   A   
30E7   ED 52                  SBC   HL,DE   
30E9   7D                     LD   A,L   
30EA   B4                     OR   H   
30EB   CA 50 31               JP   Z,expectM_2836S102   
30EE   CD A0 0C               CALL   printStr   
30F1   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
3102   CD A0 0C               CALL   printStr   
3105   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3114   21 02 00               LD   hl,2   
3117   E5                     PUSH   hl   
3118   E5                     PUSH   hl   
3119   CD BF 0D               CALL   run   
311C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3124   CD 28 0C               CALL   flushBuffer   
3127   CD A0 0C               CALL   printStr   
312A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3137   E1                     POP   hl   
3138   E5                     PUSH   hl   
3139   E5                     PUSH   hl   
313A   CD BF 0D               CALL   run   
313D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
314C   CD 28 0C               CALL   flushBuffer   
314F   76                     HALT      
3150                EXPECTM_2836S102:      
3150   E1                     POP   HL   
3151                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
3151   31 00 50               LD   SP,STACK   
3154   CD E8 0C               CALL   coldInit   
3157   CD FC 4D               CALL   execStr   
315A   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
316A   CD 28 0C               CALL   flushBuffer   
316D   E1                     POP   HL   
316E   E5                     PUSH   HL   
316F   11 05 00               LD   DE,5   
3172   B7                     OR   A   
3173   ED 52                  SBC   HL,DE   
3175   7D                     LD   A,L   
3176   B4                     OR   H   
3177   CA E1 31               JP   Z,expectM_2837S103   
317A   CD A0 0C               CALL   printStr   
317D   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
3193   CD A0 0C               CALL   printStr   
3196   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31A5   21 05 00               LD   hl,5   
31A8   E5                     PUSH   hl   
31A9   E5                     PUSH   hl   
31AA   CD BF 0D               CALL   run   
31AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31B5   CD 28 0C               CALL   flushBuffer   
31B8   CD A0 0C               CALL   printStr   
31BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31C8   E1                     POP   hl   
31C9   E5                     PUSH   hl   
31CA   E5                     PUSH   hl   
31CB   CD BF 0D               CALL   run   
31CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31DD   CD 28 0C               CALL   flushBuffer   
31E0   76                     HALT      
31E1                EXPECTM_2837S103:      
31E1   E1                     POP   HL   
31E2                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
31E2   31 00 50               LD   SP,STACK   
31E5   CD E8 0C               CALL   coldInit   
31E8   CD FC 4D               CALL   execStr   
31EB   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
31FC   CD 28 0C               CALL   flushBuffer   
31FF   E1                     POP   HL   
3200   E5                     PUSH   HL   
3201   11 01 00               LD   DE,1   
3204   B7                     OR   A   
3205   ED 52                  SBC   HL,DE   
3207   7D                     LD   A,L   
3208   B4                     OR   H   
3209   CA 74 32               JP   Z,expectM_2838S104   
320C   CD A0 0C               CALL   printStr   
320F   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
3226   CD A0 0C               CALL   printStr   
3229   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3238   21 01 00               LD   hl,1   
323B   E5                     PUSH   hl   
323C   E5                     PUSH   hl   
323D   CD BF 0D               CALL   run   
3240   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3248   CD 28 0C               CALL   flushBuffer   
324B   CD A0 0C               CALL   printStr   
324E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
325B   E1                     POP   hl   
325C   E5                     PUSH   hl   
325D   E5                     PUSH   hl   
325E   CD BF 0D               CALL   run   
3261   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3270   CD 28 0C               CALL   flushBuffer   
3273   76                     HALT      
3274                EXPECTM_2838S104:      
3274   E1                     POP   HL   
3275                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
3275   31 00 50               LD   SP,STACK   
3278   CD E8 0C               CALL   coldInit   
327B   CD FC 4D               CALL   execStr   
327E   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
3292   CD 28 0C               CALL   flushBuffer   
3295   E1                     POP   HL   
3296   E5                     PUSH   HL   
3297   11 07 00               LD   DE,7   
329A   B7                     OR   A   
329B   ED 52                  SBC   HL,DE   
329D   7D                     LD   A,L   
329E   B4                     OR   H   
329F   CA 0D 33               JP   Z,expectM_2839S105   
32A2   CD A0 0C               CALL   printStr   
32A5   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
32BF   CD A0 0C               CALL   printStr   
32C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32D1   21 07 00               LD   hl,7   
32D4   E5                     PUSH   hl   
32D5   E5                     PUSH   hl   
32D6   CD BF 0D               CALL   run   
32D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32E1   CD 28 0C               CALL   flushBuffer   
32E4   CD A0 0C               CALL   printStr   
32E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32F4   E1                     POP   hl   
32F5   E5                     PUSH   hl   
32F6   E5                     PUSH   hl   
32F7   CD BF 0D               CALL   run   
32FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3309   CD 28 0C               CALL   flushBuffer   
330C   76                     HALT      
330D                EXPECTM_2839S105:      
330D   E1                     POP   HL   
330E                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
330E   31 00 50               LD   SP,STACK   
3311   CD E8 0C               CALL   coldInit   
3314   CD FC 4D               CALL   execStr   
3317   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
332D   CD 28 0C               CALL   flushBuffer   
3330   E1                     POP   HL   
3331   E5                     PUSH   HL   
3332   11 06 00               LD   DE,6   
3335   B7                     OR   A   
3336   ED 52                  SBC   HL,DE   
3338   7D                     LD   A,L   
3339   B4                     OR   H   
333A   CA AA 33               JP   Z,expectM_2840S106   
333D   CD A0 0C               CALL   printStr   
3340   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
335C   CD A0 0C               CALL   printStr   
335F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
336E   21 06 00               LD   hl,6   
3371   E5                     PUSH   hl   
3372   E5                     PUSH   hl   
3373   CD BF 0D               CALL   run   
3376   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
337E   CD 28 0C               CALL   flushBuffer   
3381   CD A0 0C               CALL   printStr   
3384   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3391   E1                     POP   hl   
3392   E5                     PUSH   hl   
3393   E5                     PUSH   hl   
3394   CD BF 0D               CALL   run   
3397   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33A6   CD 28 0C               CALL   flushBuffer   
33A9   76                     HALT      
33AA                EXPECTM_2840S106:      
33AA   E1                     POP   HL   
33AB                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
33AB   31 00 50               LD   SP,STACK   
33AE   CD E8 0C               CALL   coldInit   
33B1   CD FC 4D               CALL   execStr   
33B4   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
33C3   CD 28 0C               CALL   flushBuffer   
33C6   E1                     POP   HL   
33C7   E5                     PUSH   HL   
33C8   11 02 00               LD   DE,2   
33CB   B7                     OR   A   
33CC   ED 52                  SBC   HL,DE   
33CE   7D                     LD   A,L   
33CF   B4                     OR   H   
33D0   CA 39 34               JP   Z,expectM_2841S107   
33D3   CD A0 0C               CALL   printStr   
33D6   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
33EB   CD A0 0C               CALL   printStr   
33EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33FD   21 02 00               LD   hl,2   
3400   E5                     PUSH   hl   
3401   E5                     PUSH   hl   
3402   CD BF 0D               CALL   run   
3405   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
340D   CD 28 0C               CALL   flushBuffer   
3410   CD A0 0C               CALL   printStr   
3413   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3420   E1                     POP   hl   
3421   E5                     PUSH   hl   
3422   E5                     PUSH   hl   
3423   CD BF 0D               CALL   run   
3426   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3435   CD 28 0C               CALL   flushBuffer   
3438   76                     HALT      
3439                EXPECTM_2841S107:      
3439   E1                     POP   HL   
343A                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
343A   31 00 50               LD   SP,STACK   
343D   CD E8 0C               CALL   coldInit   
3440   CD FC 4D               CALL   execStr   
3443   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
3455   CD 28 0C               CALL   flushBuffer   
3458   E1                     POP   HL   
3459   E5                     PUSH   HL   
345A   11 01 00               LD   DE,1   
345D   B7                     OR   A   
345E   ED 52                  SBC   HL,DE   
3460   7D                     LD   A,L   
3461   B4                     OR   H   
3462   CA CE 34               JP   Z,expectM_2842S108   
3465   CD A0 0C               CALL   printStr   
3468   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
3480   CD A0 0C               CALL   printStr   
3483   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3492   21 01 00               LD   hl,1   
3495   E5                     PUSH   hl   
3496   E5                     PUSH   hl   
3497   CD BF 0D               CALL   run   
349A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34A2   CD 28 0C               CALL   flushBuffer   
34A5   CD A0 0C               CALL   printStr   
34A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34B5   E1                     POP   hl   
34B6   E5                     PUSH   hl   
34B7   E5                     PUSH   hl   
34B8   CD BF 0D               CALL   run   
34BB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34CA   CD 28 0C               CALL   flushBuffer   
34CD   76                     HALT      
34CE                EXPECTM_2842S108:      
34CE   E1                     POP   HL   
34CF                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
34CF   31 00 50               LD   SP,STACK   
34D2   CD E8 0C               CALL   coldInit   
34D5   CD FC 4D               CALL   execStr   
34D8   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
34EB   CD 28 0C               CALL   flushBuffer   
34EE   E1                     POP   HL   
34EF   E5                     PUSH   HL   
34F0   11 02 00               LD   DE,2   
34F3   B7                     OR   A   
34F4   ED 52                  SBC   HL,DE   
34F6   7D                     LD   A,L   
34F7   B4                     OR   H   
34F8   CA 65 35               JP   Z,expectM_2843S109   
34FB   CD A0 0C               CALL   printStr   
34FE   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3517   CD A0 0C               CALL   printStr   
351A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3529   21 02 00               LD   hl,2   
352C   E5                     PUSH   hl   
352D   E5                     PUSH   hl   
352E   CD BF 0D               CALL   run   
3531   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3539   CD 28 0C               CALL   flushBuffer   
353C   CD A0 0C               CALL   printStr   
353F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
354C   E1                     POP   hl   
354D   E5                     PUSH   hl   
354E   E5                     PUSH   hl   
354F   CD BF 0D               CALL   run   
3552   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3561   CD 28 0C               CALL   flushBuffer   
3564   76                     HALT      
3565                EXPECTM_2843S109:      
3565   E1                     POP   HL   
3566                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
3566   31 00 50               LD   SP,STACK   
3569   CD E8 0C               CALL   coldInit   
356C   CD FC 4D               CALL   execStr   
356F   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
3583   CD 28 0C               CALL   flushBuffer   
3586   E1                     POP   HL   
3587   E5                     PUSH   HL   
3588   11 02 00               LD   DE,2   
358B   B7                     OR   A   
358C   ED 52                  SBC   HL,DE   
358E   7D                     LD   A,L   
358F   B4                     OR   H   
3590   CA FE 35               JP   Z,expectM_2844S110   
3593   CD A0 0C               CALL   printStr   
3596   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
35B0   CD A0 0C               CALL   printStr   
35B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35C2   21 02 00               LD   hl,2   
35C5   E5                     PUSH   hl   
35C6   E5                     PUSH   hl   
35C7   CD BF 0D               CALL   run   
35CA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35D2   CD 28 0C               CALL   flushBuffer   
35D5   CD A0 0C               CALL   printStr   
35D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35E5   E1                     POP   hl   
35E6   E5                     PUSH   hl   
35E7   E5                     PUSH   hl   
35E8   CD BF 0D               CALL   run   
35EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35FA   CD 28 0C               CALL   flushBuffer   
35FD   76                     HALT      
35FE                EXPECTM_2844S110:      
35FE   E1                     POP   HL   
35FF                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
35FF   31 00 50               LD   SP,STACK   
3602   CD E8 0C               CALL   coldInit   
3605   CD FC 4D               CALL   execStr   
3608   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
361B   CD 28 0C               CALL   flushBuffer   
361E   E1                     POP   HL   
361F   E5                     PUSH   HL   
3620   11 02 00               LD   DE,2   
3623   B7                     OR   A   
3624   ED 52                  SBC   HL,DE   
3626   7D                     LD   A,L   
3627   B4                     OR   H   
3628   CA 95 36               JP   Z,expectM_2845S111   
362B   CD A0 0C               CALL   printStr   
362E   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3647   CD A0 0C               CALL   printStr   
364A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3659   21 02 00               LD   hl,2   
365C   E5                     PUSH   hl   
365D   E5                     PUSH   hl   
365E   CD BF 0D               CALL   run   
3661   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3669   CD 28 0C               CALL   flushBuffer   
366C   CD A0 0C               CALL   printStr   
366F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
367C   E1                     POP   hl   
367D   E5                     PUSH   hl   
367E   E5                     PUSH   hl   
367F   CD BF 0D               CALL   run   
3682   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3691   CD 28 0C               CALL   flushBuffer   
3694   76                     HALT      
3695                EXPECTM_2845S111:      
3695   E1                     POP   HL   
3696                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
3696   31 00 50               LD   SP,STACK   
3699   CD E8 0C               CALL   coldInit   
369C   CD FC 4D               CALL   execStr   
369F   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
36B9   CD 28 0C               CALL   flushBuffer   
36BC   E1                     POP   HL   
36BD   E5                     PUSH   HL   
36BE   11 05 00               LD   DE,5   
36C1   B7                     OR   A   
36C2   ED 52                  SBC   HL,DE   
36C4   7D                     LD   A,L   
36C5   B4                     OR   H   
36C6   CA 3A 37               JP   Z,expectM_2846S112   
36C9   CD A0 0C               CALL   printStr   
36CC   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
36EC   CD A0 0C               CALL   printStr   
36EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36FE   21 05 00               LD   hl,5   
3701   E5                     PUSH   hl   
3702   E5                     PUSH   hl   
3703   CD BF 0D               CALL   run   
3706   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
370E   CD 28 0C               CALL   flushBuffer   
3711   CD A0 0C               CALL   printStr   
3714   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3721   E1                     POP   hl   
3722   E5                     PUSH   hl   
3723   E5                     PUSH   hl   
3724   CD BF 0D               CALL   run   
3727   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3736   CD 28 0C               CALL   flushBuffer   
3739   76                     HALT      
373A                EXPECTM_2846S112:      
373A   E1                     POP   HL   
373B                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
373B   31 00 50               LD   SP,STACK   
373E   CD E8 0C               CALL   coldInit   
3741   CD FC 4D               CALL   execStr   
3744   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3755   CD 28 0C               CALL   flushBuffer   
3758   E1                     POP   HL   
3759   E5                     PUSH   HL   
375A   11 02 00               LD   DE,2   
375D   B7                     OR   A   
375E   ED 52                  SBC   HL,DE   
3760   7D                     LD   A,L   
3761   B4                     OR   H   
3762   CA CD 37               JP   Z,expectM_2847S113   
3765   CD A0 0C               CALL   printStr   
3768   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
377F   CD A0 0C               CALL   printStr   
3782   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3791   21 02 00               LD   hl,2   
3794   E5                     PUSH   hl   
3795   E5                     PUSH   hl   
3796   CD BF 0D               CALL   run   
3799   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37A1   CD 28 0C               CALL   flushBuffer   
37A4   CD A0 0C               CALL   printStr   
37A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37B4   E1                     POP   hl   
37B5   E5                     PUSH   hl   
37B6   E5                     PUSH   hl   
37B7   CD BF 0D               CALL   run   
37BA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37C9   CD 28 0C               CALL   flushBuffer   
37CC   76                     HALT      
37CD                EXPECTM_2847S113:      
37CD   E1                     POP   HL   
37CE                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
37CE   31 00 50               LD   SP,STACK   
37D1   CD E8 0C               CALL   coldInit   
37D4   CD FC 4D               CALL   execStr   
37D7   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
37EF   CD 28 0C               CALL   flushBuffer   
37F2   E1                     POP   HL   
37F3   E5                     PUSH   HL   
37F4   11 64 00               LD   DE,100   
37F7   B7                     OR   A   
37F8   ED 52                  SBC   HL,DE   
37FA   7D                     LD   A,L   
37FB   B4                     OR   H   
37FC   CA 6E 38               JP   Z,expectM_2848S114   
37FF   CD A0 0C               CALL   printStr   
3802   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3820   CD A0 0C               CALL   printStr   
3823   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3832   21 64 00               LD   hl,100   
3835   E5                     PUSH   hl   
3836   E5                     PUSH   hl   
3837   CD BF 0D               CALL   run   
383A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3842   CD 28 0C               CALL   flushBuffer   
3845   CD A0 0C               CALL   printStr   
3848   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3855   E1                     POP   hl   
3856   E5                     PUSH   hl   
3857   E5                     PUSH   hl   
3858   CD BF 0D               CALL   run   
385B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
386A   CD 28 0C               CALL   flushBuffer   
386D   76                     HALT      
386E                EXPECTM_2848S114:      
386E   E1                     POP   HL   
386F                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
386F   31 00 50               LD   SP,STACK   
3872   CD E8 0C               CALL   coldInit   
3875   CD FC 4D               CALL   execStr   
3878   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3891   CD 28 0C               CALL   flushBuffer   
3894   E1                     POP   HL   
3895   E5                     PUSH   HL   
3896   11 01 00               LD   DE,1   
3899   B7                     OR   A   
389A   ED 52                  SBC   HL,DE   
389C   7D                     LD   A,L   
389D   B4                     OR   H   
389E   CA 11 39               JP   Z,expectM_2849S115   
38A1   CD A0 0C               CALL   printStr   
38A4   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
38C3   CD A0 0C               CALL   printStr   
38C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D5   21 01 00               LD   hl,1   
38D8   E5                     PUSH   hl   
38D9   E5                     PUSH   hl   
38DA   CD BF 0D               CALL   run   
38DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38E5   CD 28 0C               CALL   flushBuffer   
38E8   CD A0 0C               CALL   printStr   
38EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F8   E1                     POP   hl   
38F9   E5                     PUSH   hl   
38FA   E5                     PUSH   hl   
38FB   CD BF 0D               CALL   run   
38FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
390D   CD 28 0C               CALL   flushBuffer   
3910   76                     HALT      
3911                EXPECTM_2849S115:      
3911   E1                     POP   HL   
3912                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3912   31 00 50               LD   SP,STACK   
3915   CD E8 0C               CALL   coldInit   
3918   CD FC 4D               CALL   execStr   
391B   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3935   CD 28 0C               CALL   flushBuffer   
3938   E1                     POP   HL   
3939   E5                     PUSH   HL   
393A   11 02 00               LD   DE,2   
393D   B7                     OR   A   
393E   ED 52                  SBC   HL,DE   
3940   7D                     LD   A,L   
3941   B4                     OR   H   
3942   CA B6 39               JP   Z,expectM_2850S116   
3945   CD A0 0C               CALL   printStr   
3948   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3968   CD A0 0C               CALL   printStr   
396B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
397A   21 02 00               LD   hl,2   
397D   E5                     PUSH   hl   
397E   E5                     PUSH   hl   
397F   CD BF 0D               CALL   run   
3982   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
398A   CD 28 0C               CALL   flushBuffer   
398D   CD A0 0C               CALL   printStr   
3990   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
399D   E1                     POP   hl   
399E   E5                     PUSH   hl   
399F   E5                     PUSH   hl   
39A0   CD BF 0D               CALL   run   
39A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39B2   CD 28 0C               CALL   flushBuffer   
39B5   76                     HALT      
39B6                EXPECTM_2850S116:      
39B6   E1                     POP   HL   
39B7                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
39B7   31 00 50               LD   SP,STACK   
39BA   CD E8 0C               CALL   coldInit   
39BD   CD FC 4D               CALL   execStr   
39C0   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
39DF   CD 28 0C               CALL   flushBuffer   
39E2   E1                     POP   HL   
39E3   E5                     PUSH   HL   
39E4   11 0B 00               LD   DE,11   
39E7   B7                     OR   A   
39E8   ED 52                  SBC   HL,DE   
39EA   7D                     LD   A,L   
39EB   B4                     OR   H   
39EC   CA 65 3A               JP   Z,expectM_2851S117   
39EF   CD A0 0C               CALL   printStr   
39F2   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3A17   CD A0 0C               CALL   printStr   
3A1A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A29   21 0B 00               LD   hl,11   
3A2C   E5                     PUSH   hl   
3A2D   E5                     PUSH   hl   
3A2E   CD BF 0D               CALL   run   
3A31   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A39   CD 28 0C               CALL   flushBuffer   
3A3C   CD A0 0C               CALL   printStr   
3A3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A4C   E1                     POP   hl   
3A4D   E5                     PUSH   hl   
3A4E   E5                     PUSH   hl   
3A4F   CD BF 0D               CALL   run   
3A52   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A61   CD 28 0C               CALL   flushBuffer   
3A64   76                     HALT      
3A65                EXPECTM_2851S117:      
3A65   E1                     POP   HL   
3A66                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3A66   31 00 50               LD   SP,STACK   
3A69   CD E8 0C               CALL   coldInit   
3A6C   CD FC 4D               CALL   execStr   
3A6F   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3A8E   CD 28 0C               CALL   flushBuffer   
3A91   E1                     POP   HL   
3A92   E5                     PUSH   HL   
3A93   11 15 00               LD   DE,21   
3A96   B7                     OR   A   
3A97   ED 52                  SBC   HL,DE   
3A99   7D                     LD   A,L   
3A9A   B4                     OR   H   
3A9B   CA 14 3B               JP   Z,expectM_2852S118   
3A9E   CD A0 0C               CALL   printStr   
3AA1   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3AC6   CD A0 0C               CALL   printStr   
3AC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AD8   21 15 00               LD   hl,21   
3ADB   E5                     PUSH   hl   
3ADC   E5                     PUSH   hl   
3ADD   CD BF 0D               CALL   run   
3AE0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AE8   CD 28 0C               CALL   flushBuffer   
3AEB   CD A0 0C               CALL   printStr   
3AEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AFB   E1                     POP   hl   
3AFC   E5                     PUSH   hl   
3AFD   E5                     PUSH   hl   
3AFE   CD BF 0D               CALL   run   
3B01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B10   CD 28 0C               CALL   flushBuffer   
3B13   76                     HALT      
3B14                EXPECTM_2852S118:      
3B14   E1                     POP   HL   
3B15                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3B15   31 00 50               LD   SP,STACK   
3B18   CD E8 0C               CALL   coldInit   
3B1B   CD FC 4D               CALL   execStr   
3B1E   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3B2C   CD 28 0C               CALL   flushBuffer   
3B2F   E1                     POP   HL   
3B30   E5                     PUSH   HL   
3B31   11 14 00               LD   DE,20   
3B34   B7                     OR   A   
3B35   ED 52                  SBC   HL,DE   
3B37   7D                     LD   A,L   
3B38   B4                     OR   H   
3B39   CA A1 3B               JP   Z,expectM_2853S119   
3B3C   CD A0 0C               CALL   printStr   
3B3F   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3B53   CD A0 0C               CALL   printStr   
3B56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B65   21 14 00               LD   hl,20   
3B68   E5                     PUSH   hl   
3B69   E5                     PUSH   hl   
3B6A   CD BF 0D               CALL   run   
3B6D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B75   CD 28 0C               CALL   flushBuffer   
3B78   CD A0 0C               CALL   printStr   
3B7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B88   E1                     POP   hl   
3B89   E5                     PUSH   hl   
3B8A   E5                     PUSH   hl   
3B8B   CD BF 0D               CALL   run   
3B8E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B9D   CD 28 0C               CALL   flushBuffer   
3BA0   76                     HALT      
3BA1                EXPECTM_2853S119:      
3BA1   E1                     POP   HL   
3BA2                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3BA2   31 00 50               LD   SP,STACK   
3BA5   CD E8 0C               CALL   coldInit   
3BA8   CD FC 4D               CALL   execStr   
3BAB   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3BBC   CD 28 0C               CALL   flushBuffer   
3BBF   E1                     POP   HL   
3BC0   E5                     PUSH   HL   
3BC1   11 04 00               LD   DE,4   
3BC4   B7                     OR   A   
3BC5   ED 52                  SBC   HL,DE   
3BC7   7D                     LD   A,L   
3BC8   B4                     OR   H   
3BC9   CA 34 3C               JP   Z,expectM_2854S120   
3BCC   CD A0 0C               CALL   printStr   
3BCF   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3BE6   CD A0 0C               CALL   printStr   
3BE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BF8   21 04 00               LD   hl,4   
3BFB   E5                     PUSH   hl   
3BFC   E5                     PUSH   hl   
3BFD   CD BF 0D               CALL   run   
3C00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C08   CD 28 0C               CALL   flushBuffer   
3C0B   CD A0 0C               CALL   printStr   
3C0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C1B   E1                     POP   hl   
3C1C   E5                     PUSH   hl   
3C1D   E5                     PUSH   hl   
3C1E   CD BF 0D               CALL   run   
3C21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C30   CD 28 0C               CALL   flushBuffer   
3C33   76                     HALT      
3C34                EXPECTM_2854S120:      
3C34   E1                     POP   HL   
3C35                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3C35   31 00 50               LD   SP,STACK   
3C38   CD E8 0C               CALL   coldInit   
3C3B   CD FC 4D               CALL   execStr   
3C3E   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3C4C   CD 28 0C               CALL   flushBuffer   
3C4F   E1                     POP   HL   
3C50   E5                     PUSH   HL   
3C51   11 02 00               LD   DE,2   
3C54   B7                     OR   A   
3C55   ED 52                  SBC   HL,DE   
3C57   7D                     LD   A,L   
3C58   B4                     OR   H   
3C59   CA C1 3C               JP   Z,expectM_2855S121   
3C5C   CD A0 0C               CALL   printStr   
3C5F   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3C73   CD A0 0C               CALL   printStr   
3C76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C85   21 02 00               LD   hl,2   
3C88   E5                     PUSH   hl   
3C89   E5                     PUSH   hl   
3C8A   CD BF 0D               CALL   run   
3C8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C95   CD 28 0C               CALL   flushBuffer   
3C98   CD A0 0C               CALL   printStr   
3C9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CA8   E1                     POP   hl   
3CA9   E5                     PUSH   hl   
3CAA   E5                     PUSH   hl   
3CAB   CD BF 0D               CALL   run   
3CAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CBD   CD 28 0C               CALL   flushBuffer   
3CC0   76                     HALT      
3CC1                EXPECTM_2855S121:      
3CC1   E1                     POP   HL   
3CC2                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3CC2   31 00 50               LD   SP,STACK   
3CC5   CD E8 0C               CALL   coldInit   
3CC8   CD FC 4D               CALL   execStr   
3CCB   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
3CDF   CD 28 0C               CALL   flushBuffer   
3CE2   E1                     POP   HL   
3CE3   E5                     PUSH   HL   
3CE4   11 42 00               LD   DE,66   
3CE7   B7                     OR   A   
3CE8   ED 52                  SBC   HL,DE   
3CEA   7D                     LD   A,L   
3CEB   B4                     OR   H   
3CEC   CA 5A 3D               JP   Z,expectM_2856S122   
3CEF   CD A0 0C               CALL   printStr   
3CF2   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3D0C   CD A0 0C               CALL   printStr   
3D0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D1E   21 42 00               LD   hl,66   
3D21   E5                     PUSH   hl   
3D22   E5                     PUSH   hl   
3D23   CD BF 0D               CALL   run   
3D26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D2E   CD 28 0C               CALL   flushBuffer   
3D31   CD A0 0C               CALL   printStr   
3D34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D41   E1                     POP   hl   
3D42   E5                     PUSH   hl   
3D43   E5                     PUSH   hl   
3D44   CD BF 0D               CALL   run   
3D47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D56   CD 28 0C               CALL   flushBuffer   
3D59   76                     HALT      
3D5A                EXPECTM_2856S122:      
3D5A   E1                     POP   HL   
3D5B                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3D5B   31 00 50               LD   SP,STACK   
3D5E   CD E8 0C               CALL   coldInit   
3D61   CD FC 4D               CALL   execStr   
3D64   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3D78   CD 28 0C               CALL   flushBuffer   
3D7B   E1                     POP   HL   
3D7C   E5                     PUSH   HL   
3D7D   11 0A 00               LD   DE,10   
3D80   B7                     OR   A   
3D81   ED 52                  SBC   HL,DE   
3D83   7D                     LD   A,L   
3D84   B4                     OR   H   
3D85   CA F3 3D               JP   Z,expectM_2857S123   
3D88   CD A0 0C               CALL   printStr   
3D8B   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3DA5   CD A0 0C               CALL   printStr   
3DA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DB7   21 0A 00               LD   hl,10   
3DBA   E5                     PUSH   hl   
3DBB   E5                     PUSH   hl   
3DBC   CD BF 0D               CALL   run   
3DBF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DC7   CD 28 0C               CALL   flushBuffer   
3DCA   CD A0 0C               CALL   printStr   
3DCD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DDA   E1                     POP   hl   
3DDB   E5                     PUSH   hl   
3DDC   E5                     PUSH   hl   
3DDD   CD BF 0D               CALL   run   
3DE0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DEF   CD 28 0C               CALL   flushBuffer   
3DF2   76                     HALT      
3DF3                EXPECTM_2857S123:      
3DF3   E1                     POP   HL   
3DF4                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3DF4   31 00 50               LD   SP,STACK   
3DF7   CD E8 0C               CALL   coldInit   
3DFA   CD FC 4D               CALL   execStr   
3DFD   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
3E1A   CD 28 0C               CALL   flushBuffer   
3E1D   E1                     POP   HL   
3E1E   E5                     PUSH   HL   
3E1F   11 0A 00               LD   DE,10   
3E22   B7                     OR   A   
3E23   ED 52                  SBC   HL,DE   
3E25   7D                     LD   A,L   
3E26   B4                     OR   H   
3E27   CA 9E 3E               JP   Z,expectM_2858S124   
3E2A   CD A0 0C               CALL   printStr   
3E2D   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3E50   CD A0 0C               CALL   printStr   
3E53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E62   21 0A 00               LD   hl,10   
3E65   E5                     PUSH   hl   
3E66   E5                     PUSH   hl   
3E67   CD BF 0D               CALL   run   
3E6A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E72   CD 28 0C               CALL   flushBuffer   
3E75   CD A0 0C               CALL   printStr   
3E78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E85   E1                     POP   hl   
3E86   E5                     PUSH   hl   
3E87   E5                     PUSH   hl   
3E88   CD BF 0D               CALL   run   
3E8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E9A   CD 28 0C               CALL   flushBuffer   
3E9D   76                     HALT      
3E9E                EXPECTM_2858S124:      
3E9E   E1                     POP   HL   
3E9F                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3E9F   31 00 50               LD   SP,STACK   
3EA2   CD E8 0C               CALL   coldInit   
3EA5   CD FC 4D               CALL   execStr   
3EA8   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3EC9   CD 28 0C               CALL   flushBuffer   
3ECC   E1                     POP   HL   
3ECD   E5                     PUSH   HL   
3ECE   11 0A 00               LD   DE,10   
3ED1   B7                     OR   A   
3ED2   ED 52                  SBC   HL,DE   
3ED4   7D                     LD   A,L   
3ED5   B4                     OR   H   
3ED6   CA 51 3F               JP   Z,expectM_2859S125   
3ED9   CD A0 0C               CALL   printStr   
3EDC   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3F03   CD A0 0C               CALL   printStr   
3F06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F15   21 0A 00               LD   hl,10   
3F18   E5                     PUSH   hl   
3F19   E5                     PUSH   hl   
3F1A   CD BF 0D               CALL   run   
3F1D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F25   CD 28 0C               CALL   flushBuffer   
3F28   CD A0 0C               CALL   printStr   
3F2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F38   E1                     POP   hl   
3F39   E5                     PUSH   hl   
3F3A   E5                     PUSH   hl   
3F3B   CD BF 0D               CALL   run   
3F3E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F4D   CD 28 0C               CALL   flushBuffer   
3F50   76                     HALT      
3F51                EXPECTM_2859S125:      
3F51   E1                     POP   HL   
3F52                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3F52   31 00 50               LD   SP,STACK   
3F55   CD E8 0C               CALL   coldInit   
3F58   CD FC 4D               CALL   execStr   
3F5B   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3F7C   CD 28 0C               CALL   flushBuffer   
3F7F   E1                     POP   HL   
3F80   E5                     PUSH   HL   
3F81   11 14 00               LD   DE,20   
3F84   B7                     OR   A   
3F85   ED 52                  SBC   HL,DE   
3F87   7D                     LD   A,L   
3F88   B4                     OR   H   
3F89   CA 04 40               JP   Z,expectM_2860S126   
3F8C   CD A0 0C               CALL   printStr   
3F8F   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3FB6   CD A0 0C               CALL   printStr   
3FB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FC8   21 14 00               LD   hl,20   
3FCB   E5                     PUSH   hl   
3FCC   E5                     PUSH   hl   
3FCD   CD BF 0D               CALL   run   
3FD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FD8   CD 28 0C               CALL   flushBuffer   
3FDB   CD A0 0C               CALL   printStr   
3FDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FEB   E1                     POP   hl   
3FEC   E5                     PUSH   hl   
3FED   E5                     PUSH   hl   
3FEE   CD BF 0D               CALL   run   
3FF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4000   CD 28 0C               CALL   flushBuffer   
4003   76                     HALT      
4004                EXPECTM_2860S126:      
4004   E1                     POP   HL   
4005                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
4005   31 00 50               LD   SP,STACK   
4008   CD E8 0C               CALL   coldInit   
400B   CD FC 4D               CALL   execStr   
400E   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
4026   CD 28 0C               CALL   flushBuffer   
4029   E1                     POP   HL   
402A   E5                     PUSH   HL   
402B   11 06 00               LD   DE,6   
402E   B7                     OR   A   
402F   ED 52                  SBC   HL,DE   
4031   7D                     LD   A,L   
4032   B4                     OR   H   
4033   CA A5 40               JP   Z,expectM_2861S127   
4036   CD A0 0C               CALL   printStr   
4039   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
4057   CD A0 0C               CALL   printStr   
405A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4069   21 06 00               LD   hl,6   
406C   E5                     PUSH   hl   
406D   E5                     PUSH   hl   
406E   CD BF 0D               CALL   run   
4071   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4079   CD 28 0C               CALL   flushBuffer   
407C   CD A0 0C               CALL   printStr   
407F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
408C   E1                     POP   hl   
408D   E5                     PUSH   hl   
408E   E5                     PUSH   hl   
408F   CD BF 0D               CALL   run   
4092   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40A1   CD 28 0C               CALL   flushBuffer   
40A4   76                     HALT      
40A5                EXPECTM_2861S127:      
40A5   E1                     POP   HL   
40A6                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
40A6   31 00 50               LD   SP,STACK   
40A9   CD E8 0C               CALL   coldInit   
40AC   CD FC 4D               CALL   execStr   
40AF   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
40CA   CD 28 0C               CALL   flushBuffer   
40CD   E1                     POP   HL   
40CE   E5                     PUSH   HL   
40CF   11 02 00               LD   DE,2   
40D2   B7                     OR   A   
40D3   ED 52                  SBC   HL,DE   
40D5   7D                     LD   A,L   
40D6   B4                     OR   H   
40D7   CA 4C 41               JP   Z,expectM_2862S128   
40DA   CD A0 0C               CALL   printStr   
40DD   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
40FE   CD A0 0C               CALL   printStr   
4101   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4110   21 02 00               LD   hl,2   
4113   E5                     PUSH   hl   
4114   E5                     PUSH   hl   
4115   CD BF 0D               CALL   run   
4118   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4120   CD 28 0C               CALL   flushBuffer   
4123   CD A0 0C               CALL   printStr   
4126   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4133   E1                     POP   hl   
4134   E5                     PUSH   hl   
4135   E5                     PUSH   hl   
4136   CD BF 0D               CALL   run   
4139   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4148   CD 28 0C               CALL   flushBuffer   
414B   76                     HALT      
414C                EXPECTM_2862S128:      
414C   E1                     POP   HL   
414D                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
414D   31 00 50               LD   SP,STACK   
4150   CD E8 0C               CALL   coldInit   
4153   CD FC 4D               CALL   execStr   
4156   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
417C   CD 28 0C               CALL   flushBuffer   
417F   E1                     POP   HL   
4180   E5                     PUSH   HL   
4181   11 0A 00               LD   DE,10   
4184   B7                     OR   A   
4185   ED 52                  SBC   HL,DE   
4187   7D                     LD   A,L   
4188   B4                     OR   H   
4189   CA 09 42               JP   Z,expectM_2863S129   
418C   CD A0 0C               CALL   printStr   
418F   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
41BB   CD A0 0C               CALL   printStr   
41BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41CD   21 0A 00               LD   hl,10   
41D0   E5                     PUSH   hl   
41D1   E5                     PUSH   hl   
41D2   CD BF 0D               CALL   run   
41D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41DD   CD 28 0C               CALL   flushBuffer   
41E0   CD A0 0C               CALL   printStr   
41E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41F0   E1                     POP   hl   
41F1   E5                     PUSH   hl   
41F2   E5                     PUSH   hl   
41F3   CD BF 0D               CALL   run   
41F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4205   CD 28 0C               CALL   flushBuffer   
4208   76                     HALT      
4209                EXPECTM_2863S129:      
4209   E1                     POP   HL   
420A                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
420A   31 00 50               LD   SP,STACK   
420D   CD E8 0C               CALL   coldInit   
4210   CD FC 4D               CALL   execStr   
4213   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
4240   CD 28 0C               CALL   flushBuffer   
4243   E1                     POP   HL   
4244   E5                     PUSH   HL   
4245   11 06 00               LD   DE,6   
4248   B7                     OR   A   
4249   ED 52                  SBC   HL,DE   
424B   7D                     LD   A,L   
424C   B4                     OR   H   
424D   CA D4 42               JP   Z,expectM_2864S130   
4250   CD A0 0C               CALL   printStr   
4253   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
4286   CD A0 0C               CALL   printStr   
4289   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4298   21 06 00               LD   hl,6   
429B   E5                     PUSH   hl   
429C   E5                     PUSH   hl   
429D   CD BF 0D               CALL   run   
42A0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42A8   CD 28 0C               CALL   flushBuffer   
42AB   CD A0 0C               CALL   printStr   
42AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42BB   E1                     POP   hl   
42BC   E5                     PUSH   hl   
42BD   E5                     PUSH   hl   
42BE   CD BF 0D               CALL   run   
42C1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42D0   CD 28 0C               CALL   flushBuffer   
42D3   76                     HALT      
42D4                EXPECTM_2864S130:      
42D4   E1                     POP   HL   
42D5                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
42D5   31 00 50               LD   SP,STACK   
42D8   CD E8 0C               CALL   coldInit   
42DB   CD FC 4D               CALL   execStr   
42DE   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
42F3   CD 28 0C               CALL   flushBuffer   
42F6   E1                     POP   HL   
42F7   E5                     PUSH   HL   
42F8   11 03 00               LD   DE,3   
42FB   B7                     OR   A   
42FC   ED 52                  SBC   HL,DE   
42FE   7D                     LD   A,L   
42FF   B4                     OR   H   
4300   CA 6F 43               JP   Z,expectM_2865S131   
4303   CD A0 0C               CALL   printStr   
4306   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
4321   CD A0 0C               CALL   printStr   
4324   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4333   21 03 00               LD   hl,3   
4336   E5                     PUSH   hl   
4337   E5                     PUSH   hl   
4338   CD BF 0D               CALL   run   
433B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4343   CD 28 0C               CALL   flushBuffer   
4346   CD A0 0C               CALL   printStr   
4349   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4356   E1                     POP   hl   
4357   E5                     PUSH   hl   
4358   E5                     PUSH   hl   
4359   CD BF 0D               CALL   run   
435C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
436B   CD 28 0C               CALL   flushBuffer   
436E   76                     HALT      
436F                EXPECTM_2865S131:      
436F   E1                     POP   HL   
4370                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
4370   31 00 50               LD   SP,STACK   
4373   CD E8 0C               CALL   coldInit   
4376   CD FC 4D               CALL   execStr   
4379   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
438E   CD 28 0C               CALL   flushBuffer   
4391   E1                     POP   HL   
4392   E5                     PUSH   HL   
4393   11 01 00               LD   DE,1   
4396   B7                     OR   A   
4397   ED 52                  SBC   HL,DE   
4399   7D                     LD   A,L   
439A   B4                     OR   H   
439B   CA 0A 44               JP   Z,expectM_2866S132   
439E   CD A0 0C               CALL   printStr   
43A1   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
43BC   CD A0 0C               CALL   printStr   
43BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43CE   21 01 00               LD   hl,1   
43D1   E5                     PUSH   hl   
43D2   E5                     PUSH   hl   
43D3   CD BF 0D               CALL   run   
43D6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43DE   CD 28 0C               CALL   flushBuffer   
43E1   CD A0 0C               CALL   printStr   
43E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43F1   E1                     POP   hl   
43F2   E5                     PUSH   hl   
43F3   E5                     PUSH   hl   
43F4   CD BF 0D               CALL   run   
43F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4406   CD 28 0C               CALL   flushBuffer   
4409   76                     HALT      
440A                EXPECTM_2866S132:      
440A   E1                     POP   HL   
440B                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
440B   31 00 50               LD   SP,STACK   
440E   CD E8 0C               CALL   coldInit   
4411   CD FC 4D               CALL   execStr   
4414   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
4420   CD 28 0C               CALL   flushBuffer   
4423   E1                     POP   HL   
4424   E5                     PUSH   HL   
4425   11 00 00               LD   DE,NUL   
4428   B7                     OR   A   
4429   ED 52                  SBC   HL,DE   
442B   7D                     LD   A,L   
442C   B4                     OR   H   
442D   CA 93 44               JP   Z,expectM_2867S133   
4430   CD A0 0C               CALL   printStr   
4433   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4445   CD A0 0C               CALL   printStr   
4448   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4457   21 00 00               LD   hl,NUL   
445A   E5                     PUSH   hl   
445B   E5                     PUSH   hl   
445C   CD BF 0D               CALL   run   
445F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4467   CD 28 0C               CALL   flushBuffer   
446A   CD A0 0C               CALL   printStr   
446D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
447A   E1                     POP   hl   
447B   E5                     PUSH   hl   
447C   E5                     PUSH   hl   
447D   CD BF 0D               CALL   run   
4480   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
448F   CD 28 0C               CALL   flushBuffer   
4492   76                     HALT      
4493                EXPECTM_2867S133:      
4493   E1                     POP   HL   
4494                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4494   31 00 50               LD   SP,STACK   
4497   CD E8 0C               CALL   coldInit   
449A   CD FC 4D               CALL   execStr   
449D   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
44A9   CD 28 0C               CALL   flushBuffer   
44AC   E1                     POP   HL   
44AD   E5                     PUSH   HL   
44AE   11 00 00               LD   DE,NUL   
44B1   B7                     OR   A   
44B2   ED 52                  SBC   HL,DE   
44B4   7D                     LD   A,L   
44B5   B4                     OR   H   
44B6   CA 1C 45               JP   Z,expectM_2868S134   
44B9   CD A0 0C               CALL   printStr   
44BC   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
44CE   CD A0 0C               CALL   printStr   
44D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44E0   21 00 00               LD   hl,NUL   
44E3   E5                     PUSH   hl   
44E4   E5                     PUSH   hl   
44E5   CD BF 0D               CALL   run   
44E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44F0   CD 28 0C               CALL   flushBuffer   
44F3   CD A0 0C               CALL   printStr   
44F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4503   E1                     POP   hl   
4504   E5                     PUSH   hl   
4505   E5                     PUSH   hl   
4506   CD BF 0D               CALL   run   
4509   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4518   CD 28 0C               CALL   flushBuffer   
451B   76                     HALT      
451C                EXPECTM_2868S134:      
451C   E1                     POP   HL   
451D                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
451D   31 00 50               LD   SP,STACK   
4520   CD E8 0C               CALL   coldInit   
4523   CD FC 4D               CALL   execStr   
4526   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
4532   CD 28 0C               CALL   flushBuffer   
4535   E1                     POP   HL   
4536   E5                     PUSH   HL   
4537   11 00 00               LD   DE,NUL   
453A   B7                     OR   A   
453B   ED 52                  SBC   HL,DE   
453D   7D                     LD   A,L   
453E   B4                     OR   H   
453F   CA A5 45               JP   Z,expectM_2869S135   
4542   CD A0 0C               CALL   printStr   
4545   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4557   CD A0 0C               CALL   printStr   
455A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4569   21 00 00               LD   hl,NUL   
456C   E5                     PUSH   hl   
456D   E5                     PUSH   hl   
456E   CD BF 0D               CALL   run   
4571   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4579   CD 28 0C               CALL   flushBuffer   
457C   CD A0 0C               CALL   printStr   
457F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
458C   E1                     POP   hl   
458D   E5                     PUSH   hl   
458E   E5                     PUSH   hl   
458F   CD BF 0D               CALL   run   
4592   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45A1   CD 28 0C               CALL   flushBuffer   
45A4   76                     HALT      
45A5                EXPECTM_2869S135:      
45A5   E1                     POP   HL   
45A6                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
45A6   31 00 50               LD   SP,STACK   
45A9   CD E8 0C               CALL   coldInit   
45AC   CD FC 4D               CALL   execStr   
45AF   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
45BB   CD 28 0C               CALL   flushBuffer   
45BE   E1                     POP   HL   
45BF   E5                     PUSH   HL   
45C0   11 00 00               LD   DE,NUL   
45C3   B7                     OR   A   
45C4   ED 52                  SBC   HL,DE   
45C6   7D                     LD   A,L   
45C7   B4                     OR   H   
45C8   CA 2E 46               JP   Z,expectM_2870S136   
45CB   CD A0 0C               CALL   printStr   
45CE   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
45E0   CD A0 0C               CALL   printStr   
45E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45F2   21 00 00               LD   hl,NUL   
45F5   E5                     PUSH   hl   
45F6   E5                     PUSH   hl   
45F7   CD BF 0D               CALL   run   
45FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4602   CD 28 0C               CALL   flushBuffer   
4605   CD A0 0C               CALL   printStr   
4608   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4615   E1                     POP   hl   
4616   E5                     PUSH   hl   
4617   E5                     PUSH   hl   
4618   CD BF 0D               CALL   run   
461B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
462A   CD 28 0C               CALL   flushBuffer   
462D   76                     HALT      
462E                EXPECTM_2870S136:      
462E   E1                     POP   HL   
462F                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
462F   31 00 50               LD   SP,STACK   
4632   CD E8 0C               CALL   coldInit   
4635   CD FC 4D               CALL   execStr   
4638   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
4640   CD 28 0C               CALL   flushBuffer   
4643   E1                     POP   HL   
4644   E5                     PUSH   HL   
4645   11 66 52               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4648   B7                     OR   A   
4649   ED 52                  SBC   HL,DE   
464B   7D                     LD   A,L   
464C   B4                     OR   H   
464D   CA AF 46               JP   Z,expectM_2871S137   
4650   CD A0 0C               CALL   printStr   
4653   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4661   CD A0 0C               CALL   printStr   
4664   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4673   21 66 52               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4676   E5                     PUSH   hl   
4677   E5                     PUSH   hl   
4678   CD BF 0D               CALL   run   
467B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4683   CD 28 0C               CALL   flushBuffer   
4686   CD A0 0C               CALL   printStr   
4689   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4696   E1                     POP   hl   
4697   E5                     PUSH   hl   
4698   E5                     PUSH   hl   
4699   CD BF 0D               CALL   run   
469C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46AB   CD 28 0C               CALL   flushBuffer   
46AE   76                     HALT      
46AF                EXPECTM_2871S137:      
46AF   E1                     POP   HL   
46B0                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
46B0   31 00 50               LD   SP,STACK   
46B3   CD E8 0C               CALL   coldInit   
46B6   CD FC 4D               CALL   execStr   
46B9   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
46C1   CD 28 0C               CALL   flushBuffer   
46C4   E1                     POP   HL   
46C5   E5                     PUSH   HL   
46C6   11 34 52               LD   DE,VARS + ("Z"-"A"+1)*2   
46C9   B7                     OR   A   
46CA   ED 52                  SBC   HL,DE   
46CC   7D                     LD   A,L   
46CD   B4                     OR   H   
46CE   CA 30 47               JP   Z,expectM_2872S138   
46D1   CD A0 0C               CALL   printStr   
46D4   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
46E2   CD A0 0C               CALL   printStr   
46E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46F4   21 34 52               LD   hl,VARS + ("Z"-"A"+1)*2   
46F7   E5                     PUSH   hl   
46F8   E5                     PUSH   hl   
46F9   CD BF 0D               CALL   run   
46FC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4704   CD 28 0C               CALL   flushBuffer   
4707   CD A0 0C               CALL   printStr   
470A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4717   E1                     POP   hl   
4718   E5                     PUSH   hl   
4719   E5                     PUSH   hl   
471A   CD BF 0D               CALL   run   
471D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
472C   CD 28 0C               CALL   flushBuffer   
472F   76                     HALT      
4730                EXPECTM_2872S138:      
4730   E1                     POP   HL   
4731                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4731   31 00 50               LD   SP,STACK   
4734   CD E8 0C               CALL   coldInit   
4737   CD FC 4D               CALL   execStr   
473A   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4742   CD 28 0C               CALL   flushBuffer   
4745   E1                     POP   HL   
4746   E5                     PUSH   HL   
4747   11 32 52               LD   DE,VARS + ("Z"-"A")*2   
474A   B7                     OR   A   
474B   ED 52                  SBC   HL,DE   
474D   7D                     LD   A,L   
474E   B4                     OR   H   
474F   CA B1 47               JP   Z,expectM_2873S139   
4752   CD A0 0C               CALL   printStr   
4755   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4763   CD A0 0C               CALL   printStr   
4766   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4775   21 32 52               LD   hl,VARS + ("Z"-"A")*2   
4778   E5                     PUSH   hl   
4779   E5                     PUSH   hl   
477A   CD BF 0D               CALL   run   
477D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4785   CD 28 0C               CALL   flushBuffer   
4788   CD A0 0C               CALL   printStr   
478B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4798   E1                     POP   hl   
4799   E5                     PUSH   hl   
479A   E5                     PUSH   hl   
479B   CD BF 0D               CALL   run   
479E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47AD   CD 28 0C               CALL   flushBuffer   
47B0   76                     HALT      
47B1                EXPECTM_2873S139:      
47B1   E1                     POP   HL   
47B2                          ;*Macro unroll:  test "'A' /ad", VARS
47B2   31 00 50               LD   SP,STACK   
47B5   CD E8 0C               CALL   coldInit   
47B8   CD FC 4D               CALL   execStr   
47BB   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
47C3   CD 28 0C               CALL   flushBuffer   
47C6   E1                     POP   HL   
47C7   E5                     PUSH   HL   
47C8   11 00 52               LD   DE,VARS   
47CB   B7                     OR   A   
47CC   ED 52                  SBC   HL,DE   
47CE   7D                     LD   A,L   
47CF   B4                     OR   H   
47D0   CA 32 48               JP   Z,expectM_2874S140   
47D3   CD A0 0C               CALL   printStr   
47D6   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
47E4   CD A0 0C               CALL   printStr   
47E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47F6   21 00 52               LD   hl,VARS   
47F9   E5                     PUSH   hl   
47FA   E5                     PUSH   hl   
47FB   CD BF 0D               CALL   run   
47FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4806   CD 28 0C               CALL   flushBuffer   
4809   CD A0 0C               CALL   printStr   
480C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4819   E1                     POP   hl   
481A   E5                     PUSH   hl   
481B   E5                     PUSH   hl   
481C   CD BF 0D               CALL   run   
481F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
482E   CD 28 0C               CALL   flushBuffer   
4831   76                     HALT      
4832                EXPECTM_2874S140:      
4832   E1                     POP   HL   
4833                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4833   31 00 50               LD   SP,STACK   
4836   CD E8 0C               CALL   coldInit   
4839   CD FC 4D               CALL   execStr   
483C   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
4849   CD 28 0C               CALL   flushBuffer   
484C   E1                     POP   HL   
484D   E5                     PUSH   HL   
484E   11 2D 00               LD   DE,$2D   
4851   B7                     OR   A   
4852   ED 52                  SBC   HL,DE   
4854   7D                     LD   A,L   
4855   B4                     OR   H   
4856   CA BD 48               JP   Z,expectM_2875S141   
4859   CD A0 0C               CALL   printStr   
485C   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
486F   CD A0 0C               CALL   printStr   
4872   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4881   21 2D 00               LD   hl,$2D   
4884   E5                     PUSH   hl   
4885   E5                     PUSH   hl   
4886   CD BF 0D               CALL   run   
4889   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4891   CD 28 0C               CALL   flushBuffer   
4894   CD A0 0C               CALL   printStr   
4897   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48A4   E1                     POP   hl   
48A5   E5                     PUSH   hl   
48A6   E5                     PUSH   hl   
48A7   CD BF 0D               CALL   run   
48AA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48B9   CD 28 0C               CALL   flushBuffer   
48BC   76                     HALT      
48BD                EXPECTM_2875S141:      
48BD   E1                     POP   HL   
48BE                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
48BE   31 00 50               LD   SP,STACK   
48C1   CD E8 0C               CALL   coldInit   
48C4   CD FC 4D               CALL   execStr   
48C7   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
48D6   CD 28 0C               CALL   flushBuffer   
48D9   E1                     POP   HL   
48DA   E5                     PUSH   HL   
48DB   11 41 00               LD   DE,65   
48DE   B7                     OR   A   
48DF   ED 52                  SBC   HL,DE   
48E1   7D                     LD   A,L   
48E2   B4                     OR   H   
48E3   CA 4C 49               JP   Z,expectM_2876S142   
48E6   CD A0 0C               CALL   printStr   
48E9   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
48FE   CD A0 0C               CALL   printStr   
4901   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4910   21 41 00               LD   hl,65   
4913   E5                     PUSH   hl   
4914   E5                     PUSH   hl   
4915   CD BF 0D               CALL   run   
4918   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4920   CD 28 0C               CALL   flushBuffer   
4923   CD A0 0C               CALL   printStr   
4926   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4933   E1                     POP   hl   
4934   E5                     PUSH   hl   
4935   E5                     PUSH   hl   
4936   CD BF 0D               CALL   run   
4939   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4948   CD 28 0C               CALL   flushBuffer   
494B   76                     HALT      
494C                EXPECTM_2876S142:      
494C   E1                     POP   HL   
494D                          ;*Macro unroll:  test "123. /c/vB 1#", $32
494D   31 00 50               LD   SP,STACK   
4950   CD E8 0C               CALL   coldInit   
4953   CD FC 4D               CALL   execStr   
4956   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
4964   CD 28 0C               CALL   flushBuffer   
4967   E1                     POP   HL   
4968   E5                     PUSH   HL   
4969   11 32 00               LD   DE,$32   
496C   B7                     OR   A   
496D   ED 52                  SBC   HL,DE   
496F   7D                     LD   A,L   
4970   B4                     OR   H   
4971   CA D9 49               JP   Z,expectM_2877S143   
4974   CD A0 0C               CALL   printStr   
4977   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
498B   CD A0 0C               CALL   printStr   
498E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
499D   21 32 00               LD   hl,$32   
49A0   E5                     PUSH   hl   
49A1   E5                     PUSH   hl   
49A2   CD BF 0D               CALL   run   
49A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49AD   CD 28 0C               CALL   flushBuffer   
49B0   CD A0 0C               CALL   printStr   
49B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49C0   E1                     POP   hl   
49C1   E5                     PUSH   hl   
49C2   E5                     PUSH   hl   
49C3   CD BF 0D               CALL   run   
49C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49D5   CD 28 0C               CALL   flushBuffer   
49D8   76                     HALT      
49D9                EXPECTM_2877S143:      
49D9   E1                     POP   HL   
49DA                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
49DA   31 00 50               LD   SP,STACK   
49DD   CD E8 0C               CALL   coldInit   
49E0   CD FC 4D               CALL   execStr   
49E3   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
49F1   CD 28 0C               CALL   flushBuffer   
49F4   E1                     POP   HL   
49F5   E5                     PUSH   HL   
49F6   11 01 00               LD   DE,1   
49F9   B7                     OR   A   
49FA   ED 52                  SBC   HL,DE   
49FC   7D                     LD   A,L   
49FD   B4                     OR   H   
49FE   CA 66 4A               JP   Z,expectM_2878S144   
4A01   CD A0 0C               CALL   printStr   
4A04   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4A18   CD A0 0C               CALL   printStr   
4A1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A2A   21 01 00               LD   hl,1   
4A2D   E5                     PUSH   hl   
4A2E   E5                     PUSH   hl   
4A2F   CD BF 0D               CALL   run   
4A32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A3A   CD 28 0C               CALL   flushBuffer   
4A3D   CD A0 0C               CALL   printStr   
4A40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A4D   E1                     POP   hl   
4A4E   E5                     PUSH   hl   
4A4F   E5                     PUSH   hl   
4A50   CD BF 0D               CALL   run   
4A53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A62   CD 28 0C               CALL   flushBuffer   
4A65   76                     HALT      
4A66                EXPECTM_2878S144:      
4A66   E1                     POP   HL   
4A67                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4A67   31 00 50               LD   SP,STACK   
4A6A   CD E8 0C               CALL   coldInit   
4A6D   CD FC 4D               CALL   execStr   
4A70   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4A86   CD 28 0C               CALL   flushBuffer   
4A89   E1                     POP   HL   
4A8A   E5                     PUSH   HL   
4A8B   11 03 00               LD   DE,3   
4A8E   B7                     OR   A   
4A8F   ED 52                  SBC   HL,DE   
4A91   7D                     LD   A,L   
4A92   B4                     OR   H   
4A93   CA 03 4B               JP   Z,expectM_2879S145   
4A96   CD A0 0C               CALL   printStr   
4A99   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4AB5   CD A0 0C               CALL   printStr   
4AB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AC7   21 03 00               LD   hl,3   
4ACA   E5                     PUSH   hl   
4ACB   E5                     PUSH   hl   
4ACC   CD BF 0D               CALL   run   
4ACF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AD7   CD 28 0C               CALL   flushBuffer   
4ADA   CD A0 0C               CALL   printStr   
4ADD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AEA   E1                     POP   hl   
4AEB   E5                     PUSH   hl   
4AEC   E5                     PUSH   hl   
4AED   CD BF 0D               CALL   run   
4AF0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AFF   CD 28 0C               CALL   flushBuffer   
4B02   76                     HALT      
4B03                EXPECTM_2879S145:      
4B03   E1                     POP   HL   
4B04                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4B04   31 00 50               LD   SP,STACK   
4B07   CD E8 0C               CALL   coldInit   
4B0A   CD FC 4D               CALL   execStr   
4B0D   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4B26   CD 28 0C               CALL   flushBuffer   
4B29   E1                     POP   HL   
4B2A   E5                     PUSH   HL   
4B2B   11 02 00               LD   DE,2   
4B2E   B7                     OR   A   
4B2F   ED 52                  SBC   HL,DE   
4B31   7D                     LD   A,L   
4B32   B4                     OR   H   
4B33   CA A6 4B               JP   Z,expectM_2880S146   
4B36   CD A0 0C               CALL   printStr   
4B39   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4B58   CD A0 0C               CALL   printStr   
4B5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B6A   21 02 00               LD   hl,2   
4B6D   E5                     PUSH   hl   
4B6E   E5                     PUSH   hl   
4B6F   CD BF 0D               CALL   run   
4B72   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B7A   CD 28 0C               CALL   flushBuffer   
4B7D   CD A0 0C               CALL   printStr   
4B80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B8D   E1                     POP   hl   
4B8E   E5                     PUSH   hl   
4B8F   E5                     PUSH   hl   
4B90   CD BF 0D               CALL   run   
4B93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BA2   CD 28 0C               CALL   flushBuffer   
4BA5   76                     HALT      
4BA6                EXPECTM_2880S146:      
4BA6   E1                     POP   HL   
4BA7                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4BA7   31 00 50               LD   SP,STACK   
4BAA   CD E8 0C               CALL   coldInit   
4BAD   CD FC 4D               CALL   execStr   
4BB0   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4BD5   CD 28 0C               CALL   flushBuffer   
4BD8   E1                     POP   HL   
4BD9   E5                     PUSH   HL   
4BDA   11 01 00               LD   DE,1   
4BDD   B7                     OR   A   
4BDE   ED 52                  SBC   HL,DE   
4BE0   7D                     LD   A,L   
4BE1   B4                     OR   H   
4BE2   CA 61 4C               JP   Z,expectM_2881S147   
4BE5   CD A0 0C               CALL   printStr   
4BE8   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4C13   CD A0 0C               CALL   printStr   
4C16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C25   21 01 00               LD   hl,1   
4C28   E5                     PUSH   hl   
4C29   E5                     PUSH   hl   
4C2A   CD BF 0D               CALL   run   
4C2D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C35   CD 28 0C               CALL   flushBuffer   
4C38   CD A0 0C               CALL   printStr   
4C3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C48   E1                     POP   hl   
4C49   E5                     PUSH   hl   
4C4A   E5                     PUSH   hl   
4C4B   CD BF 0D               CALL   run   
4C4E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C5D   CD 28 0C               CALL   flushBuffer   
4C60   76                     HALT      
4C61                EXPECTM_2881S147:      
4C61   E1                     POP   HL   
4C62                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4C62   31 00 50               LD   SP,STACK   
4C65   CD E8 0C               CALL   coldInit   
4C68   CD FC 4D               CALL   execStr   
4C6B   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
4C90   CD 28 0C               CALL   flushBuffer   
4C93   E1                     POP   HL   
4C94   E5                     PUSH   HL   
4C95   11 01 00               LD   DE,1   
4C98   B7                     OR   A   
4C99   ED 52                  SBC   HL,DE   
4C9B   7D                     LD   A,L   
4C9C   B4                     OR   H   
4C9D   CA 1C 4D               JP   Z,expectM_2882S148   
4CA0   CD A0 0C               CALL   printStr   
4CA3   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
4CCE   CD A0 0C               CALL   printStr   
4CD1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CE0   21 01 00               LD   hl,1   
4CE3   E5                     PUSH   hl   
4CE4   E5                     PUSH   hl   
4CE5   CD BF 0D               CALL   run   
4CE8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4CF0   CD 28 0C               CALL   flushBuffer   
4CF3   CD A0 0C               CALL   printStr   
4CF6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D03   E1                     POP   hl   
4D04   E5                     PUSH   hl   
4D05   E5                     PUSH   hl   
4D06   CD BF 0D               CALL   run   
4D09   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D18   CD 28 0C               CALL   flushBuffer   
4D1B   76                     HALT      
4D1C                EXPECTM_2882S148:      
4D1C   E1                     POP   HL   
4D1D                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
4D1D   31 00 50               LD   SP,STACK   
4D20   CD E8 0C               CALL   coldInit   
4D23   CD FC 4D               CALL   execStr   
4D26   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
4D58   CD 28 0C               CALL   flushBuffer   
4D5B   E1                     POP   HL   
4D5C   E5                     PUSH   HL   
4D5D   11 02 00               LD   DE,2   
4D60   B7                     OR   A   
4D61   ED 52                  SBC   HL,DE   
4D63   7D                     LD   A,L   
4D64   B4                     OR   H   
4D65   CA F1 4D               JP   Z,expectM_2883S149   
4D68   CD A0 0C               CALL   printStr   
4D6B   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
4DA3   CD A0 0C               CALL   printStr   
4DA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DB5   21 02 00               LD   hl,2   
4DB8   E5                     PUSH   hl   
4DB9   E5                     PUSH   hl   
4DBA   CD BF 0D               CALL   run   
4DBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4DC5   CD 28 0C               CALL   flushBuffer   
4DC8   CD A0 0C               CALL   printStr   
4DCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DD8   E1                     POP   hl   
4DD9   E5                     PUSH   hl   
4DDA   E5                     PUSH   hl   
4DDB   CD BF 0D               CALL   run   
4DDE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4DED   CD 28 0C               CALL   flushBuffer   
4DF0   76                     HALT      
4DF1                EXPECTM_2883S149:      
4DF1   E1                     POP   HL   
4DF2                             ; 
4DF2   CD A0 0C               CALL   printStr   
4DF5   44 6F 6E 65 21 00      .CSTR   "Done!"   
4DFB   76                     HALT      
4DFC                             ; executes a null teminated string (null executes exit_)
4DFC                             ; the string should be immedaitely following the call
4DFC                EXECSTR:      ; create a root stack frame
4DFC   C1                     POP   bc   ; bc = code*
4DFD   0B                     DEC   bc   ; dec to prepare for next routine
4DFE   11 00 00               LD   de,0   
4E01   D5                     PUSH   de   ; push fake IP
4E02   D5                     PUSH   de   ; push null arg_list*
4E03   D5                     PUSH   de   ; push null first_arg*
4E04   D5                     PUSH   de   ; push fake BP
4E05   DD E9                  JP   (ix)   
4E07                STKSIZE:   EQU   $100   ; Stack size
4E07                TIBSIZE:   EQU   $100   ; 256 bytes
4E07                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4E07                          ALIGN   $100   
4F00                          DS   STKSIZE   
5000                STACK:       
5000                          ALIGN   $100   
5000                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5100                          ALIGN   $100   
5100                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5200                          ALIGN   $100   
5200                VARS:        
5200                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
52D0                RESTARTS:      
52D0                RST08:    DS   2   
52D2                RST10:    DS   2   
52D4                RST18:    DS   2   
52D6                RST20:    DS   2   
52D8                RST28:    DS   2   
52DA                RST30:    DS   2   ; 
52DC                BAUD:     DS   2   ; 
52DE                INTVEC:   DS   2   ; 
52E0                NMIVEC:   DS   2   ; 
52E2                GETCVEC:   DS   2   ; 
52E4                PUTCVEC:   DS   2   ; 
52E6                SYSVARS:      
52E6                             ; initialised sys variables (preserved)
52E6                VDATAWIDTH:   DS   2   ; 
52E8                VNUMBASE:   DS   2   ; 
52EA                VTIBPTR:   DS   2   ; 
52EC                VBUFPTR:   DS   2   ; 
52EE                VNEXT:    DS   2   ; 
52F0                VHEAPPTR:   DS   2   ; 
52F2                             ; uninitialised sys variables (preserved)
52F2                VPOINTER:   DS   2   ; 
52F4                VREMAIN:   DS   2   ; 
52F6                VSAVEDIP:   DS   2   ; 
52F8                VSAVEDSP:   DS   2   ; 
52FA                VSAVEDNEXT:   DS   2   ; 
52FC                VSAVEDBP:   DS   2   ; 
52FE                VCHECKSUM:   DS   2   ; 
5300                             ; uninitialised sys variables (unpreserved)
5300                VTEMP1:   DS   2   ; 
5302                VTEMP2:   DS   2   ; 
5304                VLASTDEF:   DS   2   ; 
5306                VHASHSTR:   DS   2   ; 
5308                TBPTR:    DS   2   ; reserved for tests
530A                TITLEBUF:   DS   20   
531E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0C26 DEFINED AT LINE 1840 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 196 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 198 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 200 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 202 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 204 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 208 IN MAIN.asm
NUM_:               0338 DEFINED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
HASH_:              033B DEFINED AT LINE 213 IN MAIN.asm
PIPE_:              033E DEFINED AT LINE 215 IN MAIN.asm
CARET_:             0341 DEFINED AT LINE 217 IN MAIN.asm
COMMA_:             0344 DEFINED AT LINE 219 IN MAIN.asm
DQUOTE_:            0347 DEFINED AT LINE 221 IN MAIN.asm
MINUS_:             034A DEFINED AT LINE 223 IN MAIN.asm
EQ_:                034D DEFINED AT LINE 225 IN MAIN.asm
EQ0:                0357 DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
EQ1:                0358 DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
GT_:                035C DEFINED AT LINE 238 IN MAIN.asm
LT_:                0367 DEFINED AT LINE 246 IN MAIN.asm
LT1:                0370 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SLASH_:             0379 DEFINED AT LINE 258 IN MAIN.asm
NOP_:               037C DEFINED AT LINE 260 IN MAIN.asm
RPAREN_:            037E DEFINED AT LINE 262 IN MAIN.asm
PLUS:               0381 DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0381 DEFINED AT LINE 269 IN MAIN.asm
ADD1:               038C DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
ADD3:               0390 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
AT:                 0393 DEFINED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0393 DEFINED AT LINE 289 IN MAIN.asm
AMPER:              039D DEFINED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                039D DEFINED AT LINE 295 IN MAIN.asm
AND1:               03A4 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
PIPE:               03A8 DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
OR:                 03A8 DEFINED AT LINE 309 IN MAIN.asm
XOR:                03B1 DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
XOR1:               03B2 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
INVERT:             03BC DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
PERCENT:            03C1 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C1 DEFINED AT LINE 339 IN MAIN.asm
ARG0:               03DD DEFINED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG0A:              03E6 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
ARG1:               03EB DEFINED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
ARG1A:              03F3 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
LBRACK:             03F6 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F6 DEFINED AT LINE 381 IN MAIN.asm
RBRACK:             0412 DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0412 DEFINED AT LINE 396 IN MAIN.asm
ARRAYEND1:          042E DEFINED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
ARRAYEND2:          043E DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
ARRAYEND3:          0443 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 412 IN MAIN.asm
HASH:               0462 DEFINED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
ARRAYINDEX:         0462 DEFINED AT LINE 451 IN MAIN.asm
ARRAYINDEX0:        046A DEFINED AT LINE 457 IN MAIN.asm
ARRAYINDEX1:        046B DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
ARRAYINDEX2:        0477 DEFINED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
COLON:              047A DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
ARGLIST:            047A DEFINED AT LINE 477 IN MAIN.asm
ARGLIST1:           0484 DEFINED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
ARGLIST1A:          048C DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
ARGLIST2:           0494 DEFINED AT LINE 495 IN MAIN.asm
ARGLIST3:           049C DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ARGLIST4:           049F DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
ARGLIST5:           04A5 DEFINED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
ASSIGN:             04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
ASSIGN0:            04B2 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
ASSIGNX:            04B3 DEFINED AT LINE 528 IN MAIN.asm
ASSIGN1:            04BF DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
ABSOLUTE:           04C1 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
ADDROF:             04CE DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
ADDROF1:            04E2 DEFINED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
ADDROF2:            04ED DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
LBRACE:             04EF DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04EF DEFINED AT LINE 582 IN MAIN.asm
BLOCKSTART1:        04F3 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
BLOCKSTART2:        051F DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
BLOCKSTART3:        0522 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
BLOCKSTART4:        052A DEFINED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
BLOCKSTART5:        052D DEFINED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
BLOCKSTART6:        0555 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
RBRACE:             0558 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           0558 DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
BLOCKEND1:          058A DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
BLOCKEND2:          0596 DEFINED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
BLOCKEND3:          05A8 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
BREAK:              05B4 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
BREAK1:             05BB DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
TICK:               05CE DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               05CE DEFINED AT LINE 719 IN MAIN.asm
CHAR1:              05D1 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
CHAR2:              05DD DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
CHAR3:              05E0 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
SLASH:              05E3 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
COMMAND:            05E3 DEFINED AT LINE 738 IN MAIN.asm
COMMAND_A:          0622 DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
COMMAND_B:          062E DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
COMMAND_F:          063A DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
COMMAND_I:          0646 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
COMMAND_L:          0652 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
COMMAND_M:          065B DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
COMMAND_P:          0664 DEFINED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
COMMAND_R:          0673 DEFINED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
COMMAND_V:          067C DEFINED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
CHARS:              0691 DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
CHARS1:             0694 DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
NUMBERS:            0699 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
COMMENT:            069F DEFINED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
SEMICOLON:          06A8 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CREATEFUNC:         06A8 DEFINED AT LINE 884 IN MAIN.asm
CREATEFUNC0:        06C3 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
CREATEFUNC1:        06DB DEFINED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
CREATEFUNC2:        06EE DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
CREATEFUNC2A:       070D DEFINED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
CREATEFUNC3:        071C DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
CREATEFUNC4:        0727 DEFINED AT LINE 977 IN MAIN.asm
CREATEFUNC5:        0728 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
COMMA:              0744 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
DISCARD:            0744 DEFINED AT LINE 1003 IN MAIN.asm
DISCARD1:           0751 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
DIV:                0753 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DECIMAL:            0764 DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
DECIMAL1:           0767 DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
HEXADECIMAL:        076C DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
DOT:                0772 DEFINED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
BUFFERARRAY:        0784 DEFINED AT LINE 32
                    > USED AT LINE 1038 IN MAIN.asm
BUFFERARRAYM_1563S1048: 0792 DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       07CD DEFINED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
BUFFERDEC:          07D4 DEFINED AT LINE 1060 IN MAIN.asm
BUFFERDEC0:         07EE DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
BUFFERDEC1:         07FE DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
BUFFERDEC2:         081E DEFINED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
BUFFERDEC3:         0820 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
BUFFERDEC4:         0830 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
BUFFERDEC5:         0831 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
BUFFERHEX:          083A DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
BUFFERHEX1:         085B DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
BUFFERHEX2:         0864 DEFINED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
BUFFERSTRING:       0872 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
BUFFERSTRING0:      0879 DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
BUFFERSTRING1:      087F DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
BUFFERCHAR:         088C DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
BUFFERXCHARS:       0891 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
BUFFERXCHARS0:      0892 DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
BUFFERXCHARS1:      089B DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
BUFFERXCHARS2:      08A3 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
DIVIDE:             08AD DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
DIVIDE1:            08B2 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
DIVIDE2:            08BF DEFINED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
DIVIDE3:            08C0 DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
EQUALS:             08C6 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
LESSTHANEQ:         08CE DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           08D3 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          08D8 DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
TRUE1:              08DB DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
NULL1:              08E1 DEFINED AT LINE 1269 IN MAIN.asm
FALSE1:             08E1 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
ERROR1:             08E7 DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
FOREACH:            08EE DEFINED AT LINE 32
                    > USED AT LINE 802 IN MAIN.asm
FOREACHM_1780S1282: 08FA DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            095C DEFINED AT LINE 32
                    > USED AT LINE 804 IN MAIN.asm
FUNCSRCM_1807S1311: 0968 DEFINED AT LINE 39
                    > USED AT LINE 35
CARET:              0997 DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
GO:                 0997 DEFINED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0998 DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
GO2:                099E DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
GOBLOCK:            09A9 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
GOBLOCK2:           09CE DEFINED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
GOFUNC:             09DC DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
GOFUNC1:            09F5 DEFINED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
GOFUNC2:            09FB DEFINED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
GOFUNC3:            0A06 DEFINED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
GOFUNC4:            0A1E DEFINED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
GOFUNC5:            0A21 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
GOFUNC6:            0A24 DEFINED AT LINE 1424 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
GOFUNC7:            0A27 DEFINED AT LINE 1427 IN MAIN.asm
GOFUNC8:            0A2B DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
DOLLAR:             0A36 DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             0A36 DEFINED AT LINE 1442 IN MAIN.asm
HEXNUM1:            0A39 DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
HEXNUM2:            0A41 DEFINED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
UPCASE:             0A53 DEFINED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
LOWCASE:            0A58 DEFINED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
IDENT1:             0A5D DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
QUESTION:           0A6A DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IF:                 0A6A DEFINED AT LINE 1485 IN MAIN.asm
IFTE:               0A76 DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
IFTE1:              0A77 DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
INPUT:              0A83 DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
KEY:                0A8E DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
LITERAL:            0A97 DEFINED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
OUTPUT:             0AA0 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
MAP:                0AA9 DEFINED AT LINE 32
                    > USED AT LINE 827 IN MAIN.asm
MAPM_2039S1554:     0AB5 DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0AF0 DEFINED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
MUL:                0AF0 DEFINED AT LINE 1569 IN MAIN.asm
MUL2:               0AF2 DEFINED AT LINE 1572 IN MAIN.asm
MUL3:               0AFA DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
NUM:                0B0C DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
NUM0:               0B15 DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
NUM1:               0B16 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
NUM2:               0B2E DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
NUM3:               0B39 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
RPAREN:             0B3C DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
SHIFTLEFT:          0B44 DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT1:         0B4C DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
SHIFTLEFT2:         0B4D DEFINED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
SHIFTRIGHT:         0B54 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTRIGHT1:        0B5C DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
SHIFTRIGHT2:        0B60 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
DQUOTE:             0B67 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
STRING:             0B67 DEFINED AT LINE 1672 IN MAIN.asm
STRING1:            0B70 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
STRING2:            0B73 DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
STRING3:            0B7C DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
MINUS:              0B8F DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
SUB:                0B9B DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
SUB1:               0BA5 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
PRINTBUFFER:        0BAE DEFINED AT LINE 32
                    > USED AT LINE 834 IN MAIN.asm
PRINTBUFFERM_2209S1733: 0BBA DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0BD4 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
PRINTCHARS1:        0BDB DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
PRINTCHARS2:        0BE1 DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
PRINTSTACK:         0BE6 DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
REMAIN:             0BE8 DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
SIZE:               0BEE DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
CONSTBUFSTART:      0BF6 DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
CONSTHEAPSTART:     0BFB DEFINED AT LINE 1805 IN MAIN.asm
CONSTTIBSTART:      0C00 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
VARBUFPTR:          0C05 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
VARHEAPPTR:         0C0E DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
VARTIBPTR:          0C17 DEFINED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
VARIABLE:           0C20 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
CONSTANT:           0C23 DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
FILTER:             0C26 DEFINED AT LINE 1839 IN MAIN.asm
FLUSHBUFFER:        0C28 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0C3F DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
JUMPTABLE0:         0C41 DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
JUMPTABLE1:         0C4E DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
JUMPTABLE2:         0C4F DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
PRTSTR0:            0C55 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
PRTSTR:             0C59 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
NESTING:            0C5E DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
NESTING0:           0C68 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
NESTING1A:          0C6F DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
NESTING1:           0C72 DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
NESTING2:           0C81 DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
NESTING3:           0C83 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
NESTING4:           0C8E DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
PROMPT:             0C90 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
CRLF:               0C99 DEFINED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
PRINTSTR:           0CA0 DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 29
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 153
TITLESTR:           0CA7 DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
INIT:               0CBB DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
INIT1:              0CC3 DEFINED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
WARMINIT:           0CCB DEFINED AT LINE 1981 IN MAIN.asm
COLDBOOT0:          0CDE DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
COLDINIT:           0CE8 DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0CF9 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
COLDSTART:          0D06 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
START:              0D0F DEFINED AT LINE 2016 IN MAIN.asm
START1:             0D15 DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
INTERPRET:          0D1B DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
INTERPRET2:         0D2A DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
INTERPRET3:         0D32 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
INTERPRET4:         0D3D DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
INTERPRET5:         0D42 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
INTERPRET5A:        0D65 DEFINED AT LINE 2093 IN MAIN.asm
INTERPRET6:         0D67 DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
INTERPRET7:         0D75 DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
INTERPRET8:         0D88 DEFINED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
NEXT:               0DA3 DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
NEXT1:              0DB4 DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
EXIT:               0DBB DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
RUN:                0DBF DEFINED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0DC3 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
BACKSPACE_:         0DD6 DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
EDIT_:              0DE6 DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
REEDIT_:            0DFE DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
PRINTSTACK_:        0E01 DEFINED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
F1:                 0E0B DEFINED AT LINE 32
F1M_2751S12:        0E17 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0F00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2764S27:    0F82 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2769S35:    1003 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2770S36:    107A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2771S37:    10EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2772S38:    1164 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2773S39:    11D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2774S40:    124E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2775S41:    12C5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2776S42:    133E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2777S43:    13B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2778S44:    142C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2779S45:    14A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2780S46:    1520 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2781S47:    1599 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2782S48:    1612 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2783S49:    1691 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2784S50:    1710 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2785S51:    178D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2786S52:    180E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2787S53:    1893 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2788S54:    1916 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2789S55:    1993 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2790S56:    1A18 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2791S57:    1A99 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2792S58:    1B16 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2793S59:    1B93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2794S60:    1C18 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2795S61:    1C95 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2796S62:    1D12 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2797S63:    1D91 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2798S64:    1E20 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2799S65:    1E9D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2800S66:    1F22 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2801S67:    1F9F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2802S68:    2024 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2803S69:    20A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2804S70:    2120 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2805S71:    219F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2806S72:    221C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2807S73:    2299 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2808S74:    2316 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2809S75:    2393 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2810S76:    2410 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2811S77:    248D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2812S78:    250A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2813S79:    2587 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2814S80:    2606 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2815S81:    2685 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2816S82:    2704 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2817S83:    2785 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2818S84:    2806 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2819S85:    2881 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2820S86:    28FC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2821S87:    297D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2822S88:    2A04 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2823S89:    2A8B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2824S90:    2B16 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2825S91:    2BAB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2826S92:    2C40 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2827S93:    2CBB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2828S94:    2D38 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2829S95:    2DB7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2830S96:    2E38 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2831S97:    2EB7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2832S98:    2F36 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2833S99:    2FB7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2834S100:   303E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2835S101:   30C9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2836S102:   3150 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2837S103:   31E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2838S104:   3274 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2839S105:   330D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2840S106:   33AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2841S107:   3439 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2842S108:   34CE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2843S109:   3565 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2844S110:   35FE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2845S111:   3695 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2846S112:   373A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2847S113:   37CD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2848S114:   386E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2849S115:   3911 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2850S116:   39B6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2851S117:   3A65 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2852S118:   3B14 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2853S119:   3BA1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2854S120:   3C34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2855S121:   3CC1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2856S122:   3D5A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2857S123:   3DF3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S124:   3E9E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S125:   3F51 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S126:   4004 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S127:   40A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S128:   414C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S129:   4209 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S130:   42D4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S131:   436F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S132:   440A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S133:   4493 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S134:   451C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S135:   45A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S136:   462E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S137:   46AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S138:   4730 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S139:   47B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S140:   4832 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S141:   48BD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S142:   494C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S143:   49D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S144:   4A66 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S145:   4B03 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S146:   4BA6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S147:   4C61 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S148:   4D1C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S149:   4DF1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4DFC DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5000 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5000 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
BUF:                5100 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
VARS:               5200 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           52D0 DEFINED AT LINE 18 IN ram.asm
RST08:              52D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              52D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              52D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              52D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              52D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              52DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               52DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             52DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             52E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            52E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            52E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            52E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1996 IN MAIN.asm
VDATAWIDTH:         52E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
VNUMBASE:           52E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
VTIBPTR:            52EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
VBUFPTR:            52EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
VNEXT:              52EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2008 IN MAIN.asm
VHEAPPTR:           52F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 440 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
VPOINTER:           52F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
VREMAIN:            52F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
VSAVEDIP:           52F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
VSAVEDSP:           52F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
VSAVEDNEXT:         52FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
VSAVEDBP:           52FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
VCHECKSUM:          52FE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             5300 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
VTEMP2:             5302 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
VLASTDEF:           5304 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           5306 DEFINED AT LINE 59 IN ram.asm
TBPTR:              5308 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           530A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
HEAP:               531E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
