0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3D               LD   (RST08),HL   
0094   22 D2 3D               LD   (RST10),HL   
0097   22 D4 3D               LD   (RST18),HL   
009A   22 D6 3D               LD   (RST20),HL   
009D   22 D8 3D               LD   (RST28),HL   
00A0   22 DA 3D               LD   (RST30),HL   
00A3   22 DE 3D               LD   (INTVEC),HL   
00A6   22 E0 3D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3C               LD   SP,STACK   
00C6   CD 95 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   20 0A                  DW   next   ; g nNext
0186   00 41                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   85                     DB   lsb(nop_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 A4 03               JP   at   
0306                AMPER_:      
0306   C3 B0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 D4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 0B 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 27 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 75 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 9E 04               JP   backslash   
0318                LBRACE_:      
0318   C3 D4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3D 05               JP   rbrace   
031E                TICK_:       
031E   C3 92 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 86 07               JP   semicolon   
0324                DOT_:        
0324   C3 D6 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 78 07               JP   underscore   
032A                COLON_:      
032A   C3 A7 05               JP   colon   
032D                UPCASE_:      
032D   C3 FC 06               JP   upcase   
0330                LOWCASE_:      
0330   C3 01 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 13 07               JP   question   
0336                STAR_:       
0336   C3 2C 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 48 07               JP   num   
0341                HASH_:       
0341   C3 DF 06               JP   hash   
0344                PIPE_:       
0344   C3 BB 03               JP   pipe   
0347                CARET_:      
0347   C3 3D 06               JP   caret   
034A                COMMA_:      
034A   C3 A9 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 C5 07               JP   dblquote   
0350                MINUS_:      
0350   C3 ED 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8D 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 19 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA B2 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 3A 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA A2 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 21 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 26 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B8 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 7E 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8F 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA 8F 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; @ addr
03A4                             ; -- ptr
03A4                AT:          
03A4                ADDR:        
03A4   2A EE 3D               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 EE 3D               LD   hl,vPointer   
03AB   22 EE 3D               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AMPER:       
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                PIPE:        
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   67                     LD   h,a   
03CC   E5                     PUSH   hl   
03CD   DD E9                  JP   (ix)   
03CF                INVERT:      ; Bitwise INVert the top member of the stack
03CF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D2   18 F1                  JR   xor1   
03D4                             ; $a .. $z
03D4                             ; -- value
03D4                             ; returns value of arg
03D4                DOLLAR:      
03D4                ARG:         
03D4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D7   FD 56 05               LD   d,(iy+5)   
03DA   EB                     EX   de,hl   
03DB   7D                     LD   a,l   ; arg_list* == null, skip
03DC   B4                     OR   h   
03DD   28 1C                  JR   z,arg0a   
03DF   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E0   2B                     DEC   hl   
03E1   7E                     LD   a,(hl)   
03E2   23                     INC   hl   
03E3   23                     INC   hl   
03E4   B7                     OR   a   
03E5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E7   5F                     LD   e,a   ; e = a = num_args
03E8   03                     INC   bc   ; a = next char = dollar_name
03E9   0A                     LD   a,(bc)   
03EA   C5                     PUSH   bc   ; save IP
03EB   43                     LD   b,e   ; b = e = num_args
03EC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EF   FD 56 03               LD   d,(iy+3)   
03F2                ARG0:        
03F2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F3   1B                     DEC   de   
03F4   BE                     CP   (hl)   
03F5   28 09                  JR   z,arg1   
03F7   23                     INC   hl   ; hl = next arg_list*
03F8   10 F8                  DJNZ   arg0   
03FA   C1                     POP   bc   ; no match, restore IP
03FB                ARG0A:       
03FB   11 00 00               LD   de,0   ; return 0
03FE   18 08                  JR   arg1a   
0400                ARG1:        
0400   C1                     POP   bc   ; restore IP
0401   EB                     EX   de,hl   ; hl = arg*
0402   22 EE 3D               LD   (vPointer),hl   ; store arg* in setter
0405   5E                     LD   e,(hl)   
0406   23                     INC   hl   
0407   56                     LD   d,(hl)   ; de = arg
0408                ARG1A:       
0408   D5                     PUSH   de   ; push arg
0409   DD E9                  JP   (ix)   
040B                LBRACK:      
040B                ARRBEGIN:      
040B   11 00 00               LD   de,0   ; create stack frame
040E   D5                     PUSH   de   ; push null for IP
040F   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0412   FD 56 05               LD   d,(iy+5)   ; 
0415   D5                     PUSH   de   ; 
0416   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0419   FD 56 03               LD   d,(iy+3)   ; 
041C   D5                     PUSH   de   ; 
041D   FD E5                  PUSH   iy   ; push BP
041F   FD 21 00 00            LD   iy,0   ; BP = SP
0423   FD 39                  ADD   iy,sp   
0425   DD E9                  JP   (ix)   
0427                RBRACK:      
0427                ARREND:      
0427   FD 54                  LD   d,iyh   ; de = BP
0429   FD 5D                  LD   e,iyl   
042B   ED 43 FA 3D            LD   (vTemp1),bc   ; save IP
042F   62 6B                  LD   hl,de   ; hl = de = BP
0431   B7                     OR   a   
0432   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0434   CB 3C                  SRL   h   ; 
0436   CB 1D                  RR   l   
0438   44 4D                  LD   bc,hl   ; bc = count
043A   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = array[-2]
043D   71                     LD   (hl),c   ; write num items in length word
043E   23                     INC   hl   
043F   70                     LD   (hl),b   
0440   23                     INC   hl   ; hl = array[0], bc = count
0441                             ; de = BP, hl = array[0], bc = count
0441                ARREND1:      
0441   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0444   77                     LD   (hl),a   ; write lsb of array item
0445   23                     INC   hl   ; move to msb of array item
0446   3A E6 3D               LD   a,(vDataWidth)   ; vDataWidth=1?
0449   3D                     DEC   a   
044A   28 05                  JR   z,arrEnd2   
044C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044F   77                     LD   (hl),a   ; write msb of array item
0450   23                     INC   hl   ; move to next word in array
0451                ARREND2:      
0451   FD 2B                  DEC   iy   ; move to next word on stack
0453   FD 2B                  DEC   iy   
0455   0B                     DEC   bc   ; dec items count
0456   79                     LD   a,c   ; if not zero loop
0457   B0                     OR   b   
0458   20 E7                  JR   nz,arrEnd1   
045A   EB                     EX   de,hl   ; de = end of array, hl = BP
045B   F9                     LD   sp,hl   ; sp = BP
045C   E1                     POP   hl   ; de = end of array, hl = old BP
045D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045E   FD 62                  LD   iyh,d   
0460   FD 6B                  LD   iyl,e   
0462   D1                     POP   de   ; pop arg_list (discard)
0463   D1                     POP   de   ; pop first_arg* (discard)
0464   D1                     POP   de   ; pop IP (discard)
0465   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = array[-2]
0469   22 EC 3D               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FA 3D            LD   bc,(vTemp1)   ; restore IP
0470   13                     INC   de   ; de = array[0]
0471   13                     INC   de   
0472   D5                     PUSH   de   ; return array[0]
0473   DD E9                  JP   (ix)   
0475                             ; index of an array, based on vDataWidth
0475                             ; array num -- value    ; also sets vPointer to address
0475                ARRINDEX:      
0475   E1                     POP   hl   ; hl = index
0476   D1                     POP   de   ; de = array
0477   3A E6 3D               LD   a,(vDataWidth)   ; a = data width
047A   3D                     DEC   a   
047B   28 01                  JR   z,arrIndex1   
047D                ARRINDEX0:      
047D   29                     ADD   hl,hl   ; if data width = 2 then double
047E                ARRINDEX1:      
047E   19                     ADD   hl,de   ; add addr
047F   22 EE 3D               LD   (vPointer),hl   ; store address in setter
0482   16 00                  LD   d,0   
0484   5E                     LD   e,(hl)   
0485   B7                     OR   a   ; check data width again
0486   28 02                  JR   z,arrIndex2   
0488   23                     INC   hl   
0489   56                     LD   d,(hl)   
048A                ARRINDEX2:      
048A   D5                     PUSH   de   
048B   DD E9                  JP   (ix)   
048D                             ; value _oldValue --            ; uses address in vPointer
048D                ASSIGN:      
048D   E1                     POP   hl   ; discard last accessed value
048E   E1                     POP   hl   ; hl = new value
048F                ASSIGN0:      
048F   EB                     EX   de,hl   ; de = new value
0490                ASSIGNX:      
0490   2A EE 3D               LD   hl,(vPointer)   
0493   73                     LD   (hl),e   
0494   3A E6 3D               LD   a,(vDataWidth)   
0497   3D                     DEC   a   ; is it byte?
0498   28 02                  JR   z,assign1   
049A   23                     INC   hl   
049B   72                     LD   (hl),d   
049C                ASSIGN1:      
049C   DD E9                  JP   (ix)   
049E                             ; arg_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                BACKSLASH:      
049E                ARGLIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of arg_list
04A7   03                     INC   bc   ; point to next char
04A8                ARGLIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AB   20 03                  JR   nz,arglist1a   
04AD   14                     INC   d   ; non zero value local count acts as flag
04AE   18 10                  JR   arglist3   
04B0                ARGLIST1A:      
04B0   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B2   38 0F                  JR   c,arglist4   
04B4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B6   30 0B                  JR   nc,arglist4   
04B8                ARGLIST2:      
04B8   77                     LD   (hl),a   
04B9   23                     INC   hl   
04BA   1C                     INC   e   ; increase arg count
04BB   AF                     XOR   a   
04BC   B2                     OR   d   
04BD   28 01                  JR   z,arglist3   
04BF   14                     INC   d   ; if d > 0 increase local count
04C0                ARGLIST3:      
04C0   03                     INC   bc   ; point to next char
04C1   18 E5                  JR   arglist1   
04C3                ARGLIST4:      
04C3   AF                     XOR   a   
04C4   B2                     OR   d   
04C5   28 01                  JR   z,arglist5   
04C7   15                     DEC   d   ; remove initial inc
04C8                ARGLIST5:      
04C8   23                     INC   hl   
04C9   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CC   E1                     POP   hl   ; hl = start of arg_list
04CD   E5                     PUSH   hl   ; return start of arg_list
04CE   2B                     DEC   hl   ; write number of locals at start - 1
04CF   72                     LD   (hl),d   
04D0   2B                     DEC   hl   ; write number of args + locals at start - 2
04D1   73                     LD   (hl),e   
04D2   DD E9                  JP   (ix)   
04D4                LBRACE:      
04D4                BLOCK:       
04D4   C5                     PUSH   bc   ; return pointer to first { of block
04D5   03                     INC   bc   
04D6   16 01                  LD   d,1   ; nesting: count first parenthesis
04D8                BLOCK1:      ; Skip to end of definition
04D8   0A                     LD   a,(bc)   ; Get the next character
04D9   03                     INC   bc   ; Point to next character
04DA   FE 21                  CP   " " + 1   ; ignore whitespace
04DC   38 FA                  JR   c,block1   
04DE   FE 29                  CP   ")"   
04E0   28 2D                  JR   z,block4   
04E2   FE 7D                  CP   "}"   
04E4   28 29                  JR   z,block4   
04E6   FE 5D                  CP   "]"   
04E8   28 25                  JR   z,block4   
04EA   FE 28                  CP   "("   
04EC   28 16                  JR   z,block2   
04EE   FE 7B                  CP   "{"   
04F0   28 12                  JR   z,block2   
04F2   FE 5B                  CP   "["   
04F4   28 0E                  JR   z,block2   
04F6   FE 27                  CP   "'"   
04F8   28 0D                  JR   z,block3   
04FA   FE 60                  CP   "`"   
04FC   28 09                  JR   z,block3   
04FE   FE 22                  CP   $22   
0500   28 05                  JR   z,block3   
0502   18 D4                  JR   block1   
0504                BLOCK2:      
0504   14                     INC   d   
0505   18 D1                  JR   block1   
0507                BLOCK3:      
0507   3E 80                  LD   a,$80   
0509   AA                     XOR   d   
050A   47                     LD   b,a   
050B   20 CB                  JR   nz,block1   
050D   18 03                  JR   block5   
050F                BLOCK4:      
050F   15                     DEC   d   
0510   20 C6                  JR   nz,block1   ; get the next element
0512                BLOCK5:      
0512   60 69                  LD   hl,bc   ; hl = IP
0514   11 00 41               LD   de,HEAP   ; is IP pointing to object in heap
0517   B7                     OR   a   ; IP - HEAP
0518   ED 52                  SBC   hl,de   
051A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051C   28 1C                  JR   z,block6   
051E   60 69                  LD   hl,bc   ; hl = IP
0520   D1                     POP   de   ; de = block*
0521   ED 43 FA 3D            LD   (vTemp1),bc   ; save IP
0525   B7                     OR   a   ; bc = size
0526   ED 52                  SBC   hl,de   
0528   44 4D                  LD   bc,hl   
052A   EB                     EX   de,hl   ; hl = block* de = heap*
052B   ED 5B EC 3D            LD   de,(vHeapPtr)   
052F   D5                     PUSH   de   ; return hblock*
0530   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0532   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += size
0536   ED 4B FA 3D            LD   bc,(vTemp1)   ; restore IP
053A                BLOCK6:      
053A   0B                     DEC   bc   ; balanced, exit
053B   DD E9                  JP   (ix)   
053D                RBRACE:      
053D                BLOCKEND:      
053D   D9                     EXX      ; de" = oldBP bc" = oldIP
053E   FD 5E 00               LD   e,(iy+0)   
0541   FD 56 01               LD   d,(iy+1)   
0544   FD 4E 06               LD   c,(iy+6)   
0547   FD 46 07               LD   b,(iy+7)   
054A   D9                     EXX      
054B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054E   FD 56 03               LD   d,(iy+3)   
0551   EB                     EX   de,hl   
0552   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0555   FD 56 01               LD   d,(iy+1)   
0558   13                     INC   de   ; for carry flag <=
0559   B7                     OR   a   
055A   ED 52                  SBC   hl,de   
055C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0560   FD 5D                  LD   e,iyl   
0562   21 08 00               LD   hl,8   
0565   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0566   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0567   18 0C                  JR   blockEnd2   
0569                BLOCKEND1:      ; same scope
0569   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056C   FD 56 03               LD   d,(iy+3)   
056F   EB                     EX   de,hl   
0570   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0572   FD 5D                  LD   e,iyl   
0574   EB                     EX   de,hl   
0575                BLOCKEND2:      
0575   44 4D                  LD   bc,hl   ; bc = hl = BP
0577   B7                     OR   a   ; hl = BP - SP = count
0578   ED 72                  SBC   hl,sp   
057A   7D                     LD   a,l   
057B   B4                     OR   h   
057C   28 09                  JR   z,blockEnd3   
057E   C5                     PUSH   bc   ; bc = count, hl = BP
057F   44 4D                  LD   bc,hl   
0581   E1                     POP   hl   
0582   2B                     DEC   hl   ; hl = BP-1
0583   1B                     DEC   de   ; de = args*-1
0584   ED B8                  LDDR      
0586   13                     INC   de   
0587                BLOCKEND3:      
0587   EB                     EX   de,hl   ; hl = new tos
0588   F9                     LD   sp,hl   ; sp = new tos
0589   D9                     EXX      ; bc = IP, iy = oldBP
058A   D5                     PUSH   de   
058B   C5                     PUSH   bc   
058C   D9                     EXX      
058D   C1                     POP   bc   
058E   FD E1                  POP   iy   
0590   DD E9                  JP   (ix)   
0592                TICK:        
0592                CHAR:        
0592   21 00 00               LD   hl,0   ; if "" is empty or null
0595                CHAR1:       
0595   03                     INC   bc   ; point to next char
0596   0A                     LD   a,(bc)   
0597   FE 27                  CP   "'"   ; ' is the terminator
0599   28 09                  JR   z,char3   
059B   FE 5C                  CP   $5c   ; \ is the escape
059D   20 02                  JR   nz,char2   
059F   03                     INC   bc   
05A0   0A                     LD   a,(bc)   
05A1                CHAR2:       
05A1   6F                     LD   l,a   
05A2   18 F1                  JR   char1   
05A4                CHAR3:       
05A4   E5                     PUSH   hl   
05A5   DD E9                  JP   (ix)   
05A7                COLON:       
05A7   DD E9                  JP   (ix)   
05A9                             ; , discard stack item
05A9                             ; x y -- x
05A9                COMMA:       
05A9                DISCARD:      
05A9   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AB   FD 5D                  LD   e,iyl   
05AD   EB                     EX   de,hl   
05AE   B7                     OR   a   
05AF   ED 72                  SBC   hl,sp   
05B1   CB 7C                  BIT   7,h   
05B3   20 01                  JR   nz,discard1   
05B5   E1                     POP   hl   
05B6                DISCARD1:      
05B6   DD E9                  JP   (ix)   
05B8                SLASH:       
05B8   03                     INC   bc   
05B9   0A                     LD   a,(bc)   
05BA   FE 5C                  CP   $5C   
05BC   CA 80 08               JP   z,comment   
05BF   FE 41                  CP   "A"   
05C1   D2 0C 08               JP   nc,command   
05C4   0B                     DEC   bc   
05C5   D1                     POP   de   
05C6   E1                     POP   hl   
05C7   C5                     PUSH   bc   ; preserve the IP
05C8   44 4D                  LD   bc,hl   
05CA   CD 00 06               CALL   divide   
05CD   EB                     EX   de,hl   
05CE   ED 53 F0 3D            LD   (vRemain),de   
05D2   C1                     POP   bc   
05D3   C3 99 03               JP   add3   
05D6                DOT:         
05D6   E1                     POP   hl   
05D7   03                     INC   bc   
05D8   0A                     LD   a,(bc)   
05D9   FE 68                  CP   "h"   
05DB   20 05                  JR   nz,dot1   
05DD   CD 24 09               CALL   prthex   
05E0   18 17                  JR   dot4   
05E2                DOT1:        
05E2   FE 73                  CP   "s"   
05E4   20 05                  JR   nz,dot2   
05E6   CD 47 09               CALL   prtstr   
05E9   18 0E                  JR   dot4   
05EB                DOT2:        
05EB   FE 63                  CP   "c"   
05ED   20 06                  JR   nz,dot3   
05EF   7D                     LD   a,l   
05F0   CD 85 00               CALL   putchar   
05F3   18 04                  JR   dot4   
05F5                DOT3:        
05F5   0B                     DEC   bc   
05F6   CD DC 08               CALL   prtdec   
05F9                DOT4:        
05F9   3E 20                  LD   a," "   
05FB   CD 85 00               CALL   putchar   
05FE   DD E9                  JP   (ix)   
0600                             ; division subroutine.
0600                             ; bc: divisor, de: dividend, hl: remainder
0600                DIVIDE:      
0600   21 00 00               LD   hl,0   ; zero the remainder
0603   3E 10                  LD   a,16   ; loop counter
0605                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0605   CB 21                  SLA   c   
0607   CB 10                  RL   b   
0609   ED 6A                  ADC   hl,hl   
060B   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060D   38 03                  JR   c,divide2   
060F   0C                     INC   c   
0610   18 01                  JR   divide3   
0612                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0612   19                     ADD   hl,de   
0613                DIVIDE3:      
0613   3D                     DEC   a   
0614   20 EF                  JR   nz,divide1   
0616   50 59                  LD   de,bc   ; result from bc to de
0618   C9                     RET      
0619                             ; hl = value1, de = value2
0619                             ; hl = result
0619                EQUALS:      
0619   B7                     OR   a   ; reset the carry flag
061A   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
061C   28 10                  JR   z,true1   
061E   C3 34 06               JP   false1   
0621                             ; hl = value1 de = value2
0621                             ; hl = result
0621                LESSTHANEQ:      
0621   B7                     OR   a   
0622   ED 52                  SBC   hl,de   
0624   18 05                  JR   lessthan1   
0626                             ; hl = value1 de = value2
0626                             ; hl = result
0626                LESSTHAN:      
0626   B7                     OR   a   
0627   ED 52                  SBC   hl,de   
0629   28 09                  JR   z,false1   
062B                LESSTHAN1:      
062B   FA 34 06               JP   m,false1   
062E                TRUE1:       
062E   21 FF FF               LD   hl,TRUE   
0631   E5                     PUSH   hl   
0632   DD E9                  JP   (ix)   
0634                NULL1:       
0634                FALSE1:      
0634   21 00 00               LD   hl,FALSE   
0637   E5                     PUSH   hl   
0638   DD E9                  JP   (ix)   
063A                LPAREN:      
063A   C3 D4 04               JP   block   
063D                             ; execute a block of code which ends with }
063D                             ; creates a root scope if BP == stack
063D                             ; else uses outer scope
063D                CARET:       
063D                GO:          
063D   D1                     POP   de   ; de = block*
063E                GO1:         
063E   7B                     LD   a,e   ; if block* == null, exit
063F   B2                     OR   d   
0640   20 02                  JR   nz,go2   
0642   DD E9                  JP   (ix)   
0644                GO2:         
0644   1A                     LD   a,(de)   
0645   FE 7B                  CP   "{"   
0647   28 07                  JR   z,goBlock1   
0649   FE 28                  CP   "("   
064B   C2 83 06               JP   nz,goFunc   
064E   13                     INC   de   ; de is the address to jump back to
064F   D5                     PUSH   de   ; push de just before stack frame
0650                GOBLOCK:      
0650                GOBLOCK1:      
0650   ED 53 FA 3D            LD   (vTemp1),de   ; save de
0654   21 80 3C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0657   FD 54                  LD   d,iyh   
0659   FD 5D                  LD   e,iyl   
065B   B7                     OR   a   ; if stack* == BP then this is the root_scope
065C   ED 52                  SBC   hl,de   
065E   ED 5B FA 3D            LD   de,(vTemp1)   ; restore de
0662   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0663   B4                     OR   h   
0664   3E 00                  LD   a,0   
0666   28 6C                  JR   z,goFunc8   
0668   C5                     PUSH   bc   ; push IP
0669   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
066C   FD 46 05               LD   b,(iy+5)   
066F   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0672   FD 66 03               LD   h,(iy+3)   
0675                GOBLOCK2:      
0675   C5                     PUSH   bc   ; arg_list*
0676   E5                     PUSH   hl   ; first_arg*
0677   FD E5                  PUSH   iy   ; push BP
0679   FD 21 00 00            LD   iy,0   ; BP = SP
067D   FD 39                  ADD   iy,sp   
067F   42 4B                  LD   bc,de   ; bc = de = block*-1
0681   DD E9                  JP   (ix)   
0683                GOFUNC:      ; execute function
0683   EB                     EX   de,hl   ; hl = func*
0684   5E                     LD   e,(hl)   ; de = partial_array*
0685   23                     INC   hl   
0686   56                     LD   d,(hl)   
0687   23                     INC   hl   
0688   7B                     LD   a,e   ; if partial_array* == null skip
0689   B2                     OR   d   
068A   28 21                  JR   z,goFunc3   
068C   ED 43 FA 3D            LD   (vTemp1),bc   
0690   22 FC 3D               LD   (vTemp2),hl   ; save bc,hl
0693   EB                     EX   de,hl   ; hl = partial_array*
0694   2B                     DEC   hl   ; bc = count
0695   46                     LD   b,(hl)   
0696   2B                     DEC   hl   
0697   4E                     LD   c,(hl)   
0698   23                     INC   hl   ; push each item on stack
0699   23                     INC   hl   
069A   18 06                  JR   goFunc2   
069C                GOFUNC1:      
069C   5E                     LD   e,(hl)   ; de = partial item
069D   23                     INC   hl   
069E   56                     LD   d,(hl)   
069F   23                     INC   hl   
06A0   D5                     PUSH   de   ; push on stack
06A1   0B                     DEC   bc   
06A2                GOFUNC2:      
06A2   79                     LD   a,c   ; if count != 0 then loop
06A3   B0                     OR   b   
06A4   20 F6                  JR   nz,goFunc1   
06A6   ED 4B FA 3D            LD   bc,(vTemp1)   ; restore bc
06AA   2A FC 3D               LD   hl,(vTemp2)   ; restore hl
06AD                GOFUNC3:      
06AD   5E                     LD   e,(hl)   ; de = block*
06AE   23                     INC   hl   
06AF   56                     LD   d,(hl)   
06B0   23                     INC   hl   
06B1   ED 53 FA 3D            LD   (vTemp1),de   ; save block*
06B5   5E                     LD   e,(hl)   ; de = arg_list*
06B6   23                     INC   hl   
06B7   56                     LD   d,(hl)   
06B8   23                     INC   hl   
06B9   EB                     EX   de,hl   ; hl = arg_list*
06BA   ED 5B FA 3D            LD   de,(vTemp1)   ; restore de = block*
06BE   7D                     LD   a,l   ; if arg_list* == null a = 0
06BF   B4                     OR   h   
06C0   20 03                  JR   nz,goFunc4   
06C2   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06C3   18 0F                  JR   goFunc8   
06C5                GOFUNC4:      ; allocate locals
06C5   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06C6   7E                     LD   a,(hl)   
06C7   18 03                  JR   goFunc6   
06C9                GOFUNC5:      ; loop
06C9   3B                     DEC   sp   
06CA   3B                     DEC   sp   
06CB   3D                     DEC   a   
06CC                GOFUNC6:      
06CC   B7                     OR   a   
06CD   20 FA                  JR   nz,goFunc5   ; end loop
06CF                GOFUNC7:      
06CF   2B                     DEC   hl   ; a = num_args* x 2
06D0   7E                     LD   a,(hl)   
06D1   23                     INC   hl   
06D2   23                     INC   hl   
06D3   87                     ADD   a,a   ; a *= 2
06D4                GOFUNC8:      
06D4   C5                     PUSH   bc   ; push IP
06D5   44 4D                  LD   bc,hl   
06D7   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DA   85                     ADD   a,l   
06DB   6F                     LD   l,a   
06DC   39                     ADD   hl,sp   
06DD   18 96                  JR   goBlock2   
06DF                HASH:        
06DF                HEXNUM:      
06DF   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E2                HEXNUM1:      
06E2   03                     INC   bc   
06E3   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E4   CB 77                  BIT   6,a   ; is it uppercase alpha?
06E6   28 02                  JR   z,hexnum2   ; no a decimal
06E8   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EA                HEXNUM2:      
06EA   D6 30                  SUB   $30   ; form decimal digit
06EC   DA 6A 07               JP   c,num2   
06EF   FE 10                  CP   $0F+1   
06F1   D2 6A 07               JP   nc,num2   
06F4   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06F5   29                     ADD   hl,hl   ; 4X
06F6   29                     ADD   hl,hl   ; 8X
06F7   29                     ADD   hl,hl   ; 16X
06F8   85                     ADD   a,l   ; add into bottom of hl
06F9   6F                     LD   l,a   
06FA   18 E6                  JR   hexnum1   
06FC                UPCASE:      
06FC   0A                     LD   a,(bc)   ; a = identifier char
06FD   D6 41                  SUB   "A"   ; "A" = 0
06FF   18 05                  JR   ident1   
0701                LOWCASE:      
0701   0A                     LD   a,(bc)   
0702   D6 61                  SUB   "a"   
0704   C6 1A                  ADD   a,26   
0706                IDENT1:      
0706   87                     ADD   a,a   ; l = a * 2
0707   6F                     LD   l,a   
0708   26 3D                  LD   h,msb(vars)   
070A   22 EE 3D               LD   (vPointer),hl   ; store address in setter
070D   5E                     LD   e,(hl)   
070E   23                     INC   hl   
070F   56                     LD   d,(hl)   
0710   D5                     PUSH   de   
0711   DD E9                  JP   (ix)   
0713                             ; if
0713                             ; condition then -- value
0713                QUESTION:      
0713                IF:          
0713   03                     INC   bc   
0714   0A                     LD   a,(bc)   
0715   FE 3F                  CP   "?"   
0717   28 06                  JR   z,ifte   
0719   0B                     DEC   bc   
071A   11 00 00               LD   de,0   ; NUL pointer for else
071D   18 01                  JR   ifte1   
071F                             ; ifte
071F                             ; condition then else -- value
071F                IFTE:        
071F   D1                     POP   de   ; de = else
0720                IFTE1:       
0720   E1                     POP   hl   ; hl = then
0721   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0722   7C                     LD   a,h   
0723   B5                     OR   l   
0724   E1                     POP   hl   ; hl = then
0725   CA 3E 06               JP   z,go1   ; if z de = else
0728   EB                     EX   de,hl   ; condition = false, de = then
0729   C3 3E 06               JP   go1   
072C                STAR:        
072C                MUL:         
072C   D1                     POP   de   ; get first value
072D   E1                     POP   hl   
072E                MUL2:        
072E   C5                     PUSH   bc   ; Preserve the IP
072F   44 4D                  LD   bc,hl   ; bc = 2nd value
0731   21 00 00               LD   hl,0   
0734   3E 10                  LD   a,16   
0736                MUL3:        
0736   29                     ADD   hl,hl   
0737   CB 13                  RL   e   
0739   CB 12                  RL   d   
073B   30 04                  JR   nc,$+6   
073D   09                     ADD   hl,bc   
073E   30 01                  JR   nc,$+3   
0740   13                     INC   de   
0741   3D                     DEC   a   
0742   20 F2                  JR   nz,mul3   
0744   C1                     POP   bc   ; Restore the IP
0745   C3 99 03               JP   add3   
0748                NUM:         
0748   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
074B   0A                     LD   a,(bc)   ; Get numeral or -
074C   FE 2D                  CP   "-"   
074E   20 01                  JR   nz,num0   
0750   03                     INC   bc   ; move to next char, no flags affected
0751                NUM0:        
0751   08                     EX   af,af'   ; save zero flag = 0 for later
0752                NUM1:        
0752   0A                     LD   a,(bc)   ; read digit
0753   D6 30                  SUB   "0"   ; less than 0?
0755   38 13                  JR   c,num2   ; not a digit, exit loop
0757   FE 0A                  CP   10   ; greater that 9?
0759   30 0F                  JR   nc,num2   ; not a digit, exit loop
075B   03                     INC   bc   ; inc IP
075C   54 5D                  LD   de,hl   ; multiply hl * 10
075E   29                     ADD   hl,hl   
075F   29                     ADD   hl,hl   
0760   19                     ADD   hl,de   
0761   29                     ADD   hl,hl   
0762   85                     ADD   a,l   ; add digit in a to hl
0763   6F                     LD   l,a   
0764   3E 00                  LD   a,0   
0766   8C                     ADC   a,h   
0767   67                     LD   h,a   
0768   18 E8                  JR   num1   
076A                NUM2:        
076A   0B                     DEC   bc   
076B   08                     EX   af,af'   ; restore zero flag
076C   20 07                  JR   nz,num3   
076E   EB                     EX   de,hl   ; negate the value of hl
076F   21 00 00               LD   hl,0   
0772   B7                     OR   a   ; jump to sub2
0773   ED 52                  SBC   hl,de   
0775                NUM3:        
0775   E5                     PUSH   hl   ; Put the number on the stack
0776   DD E9                  JP   (ix)   ; and process the next character
0778                UNDERSCORE:      
0778                REMAIN:      
0778   2A F0 3D               LD   hl,(vRemain)   
077B   E5                     PUSH   hl   
077C   DD E9                  JP   (ix)   
077E                RPAREN:      
077E   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0781   FD 46 09               LD   b,(iy+9)   
0784   DD E9                  JP   (ix)   
0786                             ; arg_list* block* -- ptr
0786                SEMICOLON:      
0786   D1                     POP   de   ; de = block* hl = heap*
0787   2A EC 3D               LD   hl,(vHeapPtr)   
078A   AF                     XOR   a   
078B   77                     LD   (hl),a   ; compile null partial_array*
078C   23                     INC   hl   
078D   77                     LD   (hl),a   
078E   23                     INC   hl   
078F   73                     LD   (hl),e   ; compile block*
0790   23                     INC   hl   
0791   72                     LD   (hl),d   
0792   23                     INC   hl   
0793   D1                     POP   de   ; de = block*
0794   73                     LD   (hl),e   ; compile arg_list*
0795   23                     INC   hl   
0796   72                     LD   (hl),d   
0797   23                     INC   hl   
0798   ED 5B EC 3D            LD   de,(vHeapPtr)   ; return func*
079C   D5                     PUSH   de   
079D   22 EC 3D               LD   (vHeapPtr),hl   ; heap* += 4
07A0   DD E9                  JP   (ix)   
07A2                             ; shiftLeft
07A2                             ; value count -- value2          shift left count places
07A2                SHIFTLEFT:      
07A2   50 59                  LD   de,bc   ; save IP
07A4   C1                     POP   bc   ; bc = count
07A5   41                     LD   b,c   ; b = loop counter
07A6   E1                     POP   hl   
07A7   04                     INC   b   ; test for counter=0 case
07A8   18 01                  JR   shiftLeft2   
07AA                SHIFTLEFT1:      
07AA   29                     ADD   hl,hl   ; left shift hl
07AB                SHIFTLEFT2:      
07AB   10 FD                  DJNZ   shiftLeft1   
07AD   E5                     PUSH   hl   
07AE   42 4B                  LD   bc,de   ; restore IP
07B0   DD E9                  JP   (ix)   
07B2                             ; shiftRight
07B2                             ; value count -- value2          shift left count places
07B2                SHIFTRIGHT:      
07B2   50 59                  LD   de,bc   ; save IP
07B4   C1                     POP   bc   ; bc = count
07B5   41                     LD   b,c   ; b = loop counter
07B6   E1                     POP   hl   
07B7   04                     INC   b   ; test for counter=0 case
07B8   18 04                  JR   shiftRight2   
07BA                SHIFTRIGHT1:      
07BA   CB 3C                  SRL   h   ; right shift hl
07BC   CB 1D                  RR   l   
07BE                SHIFTRIGHT2:      
07BE   10 FA                  DJNZ   shiftRight1   
07C0   E5                     PUSH   hl   
07C1   42 4B                  LD   bc,de   ; restore IP
07C3   DD E9                  JP   (ix)   
07C5                             ; string
07C5                             ; -- ptr                        ; points to start of string chars,
07C5                             ; length is stored at start - 2 bytes
07C5                DBLQUOTE:      
07C5                STRING:      
07C5   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
07C8   23                     INC   hl   ; skip length field to start
07C9   23                     INC   hl   
07CA   E5                     PUSH   hl   ; save start of string
07CB   03                     INC   bc   ; point to next char
07CC   18 03                  JR   string2   
07CE                STRING1:      
07CE   77                     LD   (hl),a   
07CF   23                     INC   hl   ; increase count
07D0   03                     INC   bc   ; point to next char
07D1                STRING2:      
07D1   0A                     LD   a,(bc)   
07D2   FE 22                  CP   DQUOTE   ; " is the string terminator
07D4   20 F8                  JR   nz,string1   
07D6   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D8   20 F4                  JR   nz,string1   
07DA   AF                     XOR   a   ; write NUL to terminate string
07DB   77                     LD   (hl),a   ; hl = end of string
07DC   23                     INC   hl   
07DD   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07E0   2B                     DEC   hl   ; hl = end of string without terminator
07E1   D1                     POP   de   ; de = start of string
07E2   D5                     PUSH   de   ; return start of string
07E3   B7                     OR   a   ; hl = length bytes, de = start of string
07E4   ED 52                  SBC   hl,de   
07E6   EB                     EX   de,hl   
07E7   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E8   72                     LD   (hl),d   
07E9   2B                     DEC   hl   
07EA   73                     LD   (hl),e   
07EB   DD E9                  JP   (ix)   
07ED                MINUS:       ; negative sign or subtract
07ED   03                     INC   bc   ; check if sign of a number
07EE   0A                     LD   a,(bc)   
07EF   0B                     DEC   bc   
07F0   FE 30                  CP   "0"   
07F2   38 05                  JR   c,sub   
07F4   FE 3A                  CP   "9"+1   
07F6   DA 3E 03               JP   c,num_   
07F9                SUB:         ; Subtract the value 2nd on stack from top of stack
07F9   03                     INC   bc   
07FA   FE 2D                  CP   "-"   
07FC   20 05                  JR   nz,sub1   
07FE   E1                     POP   hl   
07FF   2B                     DEC   hl   
0800   C3 8F 04               JP   assign0   
0803                SUB1:        
0803   0B                     DEC   bc   
0804   D1                     POP   de   
0805   E1                     POP   hl   
0806   B7                     OR   a   
0807   ED 52                  SBC   hl,de   
0809   C3 99 03               JP   add3   
080C                             ;*******************************************************************
080C                             ; commands
080C                             ; a contains command letter
080C                             ; bc points to command letter
080C                             ;*******************************************************************
080C                COMMAND:      
080C   FE 61                  CP   "a"   ; \a absolute
080E   CA 53 08               JP   z,abs1   
0811   FE 62                  CP   "b"   ; \x break
0813   CA 89 08               JP   z,break   
0816   FE 63                  CP   "c"   ; \c chars
0818   CA A3 08               JP   z,chars   
081B   FE 70                  CP   "p"   ; \p partial
081D   CA 60 08               JP   z,partial   
0820   FE 66                  CP   "f"   ; \f false
0822   CA 34 06               JP   z,false1   
0825   FE 68                  CP   "h"   ; \h heap pointer
0827   CA AB 08               JP   z,heapPtr   
082A   FE 69                  CP   "i"   ; \i input
082C   CA B7 08               JP   z,input   
082F   FE 6B                  CP   "k"   ; \k key
0831   CA C2 08               JP   z,key   
0834   FE 6E                  CP   "n"   ; \n numbers
0836   CA D4 08               JP   z,numbers   
0839   FE 6F                  CP   "o"   ; \o output
083B   CA CB 08               JP   z,output   
083E   FE 74                  CP   "t"   ; \t true
0840   CA 2E 06               JP   z,true1   
0843   FE 76                  CP   "v"   ; \v invert
0845   CA CF 03               JP   z,invert   
0848   FE 78                  CP   "x"   ; \x xor
084A   CA C4 03               JP   z,xor   
084D                ERROR1:      
084D   21 01 00               LD   hl,1   ; error 1: unknown command
0850   C3 39 0A               JP   error   
0853                ABS1:        
0853   E1                     POP   hl   
0854   CB 7C                  BIT   7,h   
0856   C8                     RET   z   
0857   AF                     XOR   a   
0858   95                     SUB   l   
0859   6F                     LD   l,a   
085A   9F                     SBC   a,a   
085B   94                     SUB   h   
085C   67                     LD   h,a   
085D   E5                     PUSH   hl   
085E   DD E9                  JP   (ix)   
0860                             ; partial
0860                             ; array* func* -- func1*
0860                PARTIAL:      
0860   E1                     POP   hl   ; h1 = func*
0861   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0865   ED 43 FA 3D            LD   (vTemp1),bc   ; save IP
0869   01 06 00               LD   bc,6   ; bc = count
086C   ED B0                  LDIR      ; clone func
086E   ED 4B FA 3D            LD   bc,(vTemp1)   ; restore IP
0872   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0875   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += 6
0879   D1                     POP   de   ; de = array*
087A   E5                     PUSH   hl   ; return partial_array*
087B   73                     LD   (hl),e   ; compile array*
087C   23                     INC   hl   
087D   72                     LD   (hl),d   
087E   DD E9                  JP   (ix)   
0880                COMMENT:      
0880   03                     INC   bc   ; point to next char
0881   0A                     LD   a,(bc)   
0882   FE 20                  CP   " "   ; terminate on any char less than SP
0884   30 FA                  JR   nc,comment   
0886   0B                     DEC   bc   
0887   DD E9                  JP   (ix)   
0889                BREAK:       
0889   E1                     POP   hl   
088A   7D                     LD   a,l   
088B   B4                     OR   h   
088C   28 02                  JR   z,break1   
088E   DD E9                  JP   (ix)   
0890                BREAK1:      
0890   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0892   FD 54                  LD   d,iyh   
0894   21 08 00               LD   hl,8   
0897   19                     ADD   hl,de   
0898   23                     INC   hl   
0899   23                     INC   hl   
089A   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
089D   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08A0   C3 3D 05               JP   blockEnd   
08A3                CHARS:       
08A3   21 01 00               LD   hl,1   
08A6                CHARS1:      
08A6   22 E6 3D               LD   (vDataWidth),hl   
08A9   DD E9                  JP   (ix)   
08AB                HEAPPTR:      
08AB   2A EC 3D               LD   hl,(vHeapPtr)   
08AE   E5                     PUSH   hl   
08AF   21 EC 3D               LD   hl,vHeapPtr   
08B2   22 EE 3D               LD   (vPointer),hl   
08B5   DD E9                  JP   (ix)   
08B7                             ; Z80 port input
08B7                             ; port -- value
08B7                INPUT:       
08B7   E1                     POP   hl   
08B8   59                     LD   e,c   ; save IP
08B9   4D                     LD   c,l   
08BA   ED 68                  IN   l,(c)   
08BC   26 00                  LD   h,0   
08BE   4B                     LD   c,e   ; restore IP
08BF   E5                     PUSH   hl   
08C0   DD E9                  JP   (ix)   
08C2                KEY:         
08C2   CD 81 00               CALL   getchar   
08C5   26 00                  LD   h,0   
08C7   6F                     LD   l,a   
08C8   E5                     PUSH   hl   
08C9   DD E9                  JP   (ix)   
08CB                             ; Z80 port output
08CB                             ; value port --
08CB                OUTPUT:      
08CB   E1                     POP   hl   
08CC   59                     LD   e,c   ; save IP
08CD   4D                     LD   c,l   
08CE   E1                     POP   hl   
08CF   ED 69                  OUT   (c),l   
08D1   4B                     LD   c,e   ; restore IP
08D2   DD E9                  JP   (ix)   
08D4                NUMBERS:      
08D4   21 02 00               LD   hl,2   
08D7   C3 A6 08               JP   chars1   
08DA                             ; 
08DA                             ; 
08DA                             ; 
08DA                             ; 
08DA                FILTER:      
08DA                MAP:         
08DA                SCAN:        
08DA   DD E9                  JP   (ix)   
08DC                             ; print decimal
08DC                             ; hl = value
08DC                PRTDEC:      
08DC   CB 7C                  BIT   7,h   
08DE   28 0B                  JR   z,prtdec0   
08E0   3E 2D                  LD   a,"-"   
08E2   CD 85 00               CALL   putchar   
08E5   AF                     XOR   a   
08E6   95                     SUB   l   
08E7   6F                     LD   l,a   
08E8   9F                     SBC   a,a   
08E9   94                     SUB   h   
08EA   67                     LD   h,a   
08EB                PRTDEC0:      
08EB   C5                     PUSH   bc   
08EC   0E 00                  LD   c,0   ; leading zeros flag = false
08EE   11 F0 D8               LD   de,-10000   
08F1   CD 0D 09               CALL   prtdec1   
08F4   11 18 FC               LD   de,-1000   
08F7   CD 0D 09               CALL   prtdec1   
08FA   11 9C FF               LD   de,-100   
08FD   CD 0D 09               CALL   prtdec1   
0900   1E F6                  LD   e,-10   
0902   CD 0D 09               CALL   prtdec1   
0905   0C                     INC   c   ; flag = true for at least digit
0906   1E FF                  LD   e,-1   
0908   CD 0D 09               CALL   prtdec1   
090B   C1                     POP   bc   
090C   C9                     RET      
090D                PRTDEC1:      
090D   06 2F                  LD   b,"0"-1   
090F                PRTDEC2:      
090F   04                     INC   b   
0910   19                     ADD   hl,de   
0911   38 FC                  JR   c,prtdec2   
0913   ED 52                  SBC   hl,de   
0915   3E 30                  LD   a,"0"   
0917   B8                     CP   b   
0918   20 05                  JR   nz,prtdec3   
091A   AF                     XOR   a   
091B   B1                     OR   c   
091C   C8                     RET   z   
091D   18 01                  JR   prtdec4   
091F                PRTDEC3:      
091F   0C                     INC   c   
0920                PRTDEC4:      
0920   78                     LD   a,b   
0921   C3 85 00               JP   putchar   
0924                PRTHEX:      ; display hl as a 16-bit number in hex.
0924   C5                     PUSH   bc   ; preserve the IP
0925   7C                     LD   a,h   
0926   CD 2F 09               CALL   prthex2   
0929   7D                     LD   a,l   
092A   CD 2F 09               CALL   prthex2   
092D   C1                     POP   bc   
092E   C9                     RET      
092F                PRTHEX2:      
092F   4F                     LD   c,a   
0930   1F                     RRA      
0931   1F                     RRA      
0932   1F                     RRA      
0933   1F                     RRA      
0934   CD 38 09               CALL   prthex3   
0937   79                     LD   a,c   
0938                PRTHEX3:      
0938   E6 0F                  AND   0x0F   
093A   C6 90                  ADD   a,0x90   
093C   27                     DAA      
093D   CE 40                  ADC   a,0x40   
093F   27                     DAA      
0940   C3 85 00               JP   putchar   
0943                PRTSTR0:      
0943   CD 85 00               CALL   putchar   
0946   23                     INC   hl   
0947                PRTSTR:      
0947   7E                     LD   a,(hl)   
0948   B7                     OR   a   
0949   20 F8                  JR   nz,prtstr0   
094B   C9                     RET      
094C                             ; **************************************************************************
094C                             ; calculate nesting value
094C                             ; a is char to be tested,
094C                             ; e is the nesting value (initially 0)
094C                             ; e is increased by ( and [
094C                             ; e is decreased by ) and ]
094C                             ; e has its bit 7 toggled by `
094C                             ; limited to 127 levels
094C                             ; **************************************************************************
094C                NESTING:      
094C   FE 22                  CP   DQUOTE   ; quote char
094E   28 06                  JR   z,nesting0   
0950   FE 60                  CP   "`"   ; quote char
0952   28 02                  JR   z,nesting0   
0954   18 0A                  JR   nesting1   
0956                NESTING0:      
0956   CB 7B                  BIT   7,e   
0958   28 03                  JR   z,nesting1a   
095A   CB BB                  RES   7,e   
095C   C9                     RET      
095D                NESTING1A:      
095D   CB FB                  SET   7,e   
095F   C9                     RET      
0960                NESTING1:      
0960   CB 7B                  BIT   7,e   
0962   C0                     RET   nz   
0963   FE 7B                  CP   "{"   
0965   28 08                  JR   z,nesting2   
0967   FE 5B                  CP   "["   
0969   28 04                  JR   z,nesting2   
096B   FE 28                  CP   "("   
096D   20 02                  JR   nz,nesting3   
096F                NESTING2:      
096F   1C                     INC   e   
0970   C9                     RET      
0971                NESTING3:      
0971   FE 7D                  CP   "}"   
0973   28 07                  JR   z,nesting4   
0975   FE 5D                  CP   "]"   
0977   28 03                  JR   z,nesting4   
0979   FE 29                  CP   ")"   
097B   C0                     RET   nz   
097C                NESTING4:      
097C   1D                     DEC   e   
097D   C9                     RET      
097E                PROMPT:      
097E   CD 8E 09               CALL   printStr   
0981   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0986   C9                     RET      
0987                CRLF:        
0987   CD 8E 09               CALL   printStr   
098A   0D 0A 00               .CSTR   "\r\n"   
098D   C9                     RET      
098E                             ; prints a null teminated string
098E                             ; the string should be immedaitely following the call
098E                PRINTSTR:      
098E   E3                     EX   (sp),hl   ; swap			
098F   CD 47 09               CALL   prtstr   
0992   23                     INC   hl   ; inc past NUL
0993   E3                     EX   (sp),hl   ; put it back	
0994   C9                     RET      
0995                INIT:        
0995   DD 2A EA 3D            LD   ix,(vNext)   
0999   FD 21 80 3C            LD   iy,STACK   
099D   21 80 01               LD   hl,isysVars   
09A0   11 E6 3D               LD   de,sysVars   
09A3   01 10 00               LD   bc,8 * 2   
09A6   ED B0                  LDIR      
09A8   21 00 3D               LD   hl,vars   ; 52 vars LO HI
09AB   06 34                  LD   b,26*2   
09AD   AF                     XOR   a   
09AE                INIT0:       
09AE   77                     LD   (hl),a   
09AF   23                     INC   hl   
09B0   10 FC                  DJNZ   init0   
09B2   C9                     RET      
09B3                START:       
09B3   31 80 3C               LD   sp,STACK   ; start of monty
09B6   CD 95 09               CALL   init   ; setups
09B9   CD 8E 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09BC   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09C9                INTERPRET:      
09C9   CD 7E 09               CALL   prompt   
09CC   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09CF   ED 43 E8 3D            LD   (vTIBPtr),bc   
09D3                INTERPRET2:      ; calc nesting (a macro might have changed it)
09D3   1E 00                  LD   e,0   ; initilize nesting value
09D5   C5                     PUSH   bc   ; save offset into TIB,
09D6                             ; bc is also the count of chars in TIB
09D6   21 00 3F               LD   hl,TIB   ; hl is start of TIB
09D9   18 06                  JR   interpret4   
09DB                INTERPRET3:      
09DB   7E                     LD   a,(hl)   ; a = char in TIB
09DC   23                     INC   hl   ; inc pointer into TIB
09DD   0B                     DEC   bc   ; dec count of chars in TIB
09DE   CD 4C 09               CALL   nesting   ; update nesting value
09E1                INTERPRET4:      
09E1   79                     LD   a,c   ; is count zero?
09E2   B0                     OR   b   
09E3   20 F6                  JR   nz,interpret3   ; if not loop
09E5   C1                     POP   bc   ; restore offset into TIB
09E6                INTERPRET5:      
09E6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09E9   FE 20                  CP   $20   ; compare to space
09EB   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09ED   FE 00                  CP   $0   ; is it end of string? NUL end of string
09EF                             ; ???? NEEDED?
09EF   28 27                  JR   z,interpret8   
09F1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09F3   28 10                  JR   z,interpret7   ; if anything else its macro/control
09F5                             ; macro
09F5                             ;  ld (vTIBPtr),bc
09F5                             ;  ld hl,ctrlCodes
09F5                             ;  add a,l			            ; look up key of macros
09F5                             ;  ld l,a
09F5                             ;  ld e,(hl)
09F5                             ;  ld a,e
09F5                             ;  or a
09F5                             ;  jr z,macro1
09F5                             ;  ld d,msb(macros)
09F5                             ;  push de
09F5                             ;  call call		            ; monty exec_ operation and jump to it
09F5                             ;  db DC1,0
09F5                             ; macro1:
09F5                             ;  ld bc,(vTIBPtr)
09F5   18 DC                  JR   interpret2   
09F7                INTERPRET6:      
09F7   21 00 3F               LD   hl,TIB   
09FA   09                     ADD   hl,bc   
09FB   77                     LD   (hl),a   ; store the character in textbuf
09FC   03                     INC   bc   
09FD   CD 85 00               CALL   putchar   ; echo character to screen
0A00   CD 4C 09               CALL   nesting   
0A03   18 E1                  JR   interpret5   ; wait for next character
0A05                INTERPRET7:      
0A05   21 00 3F               LD   hl,TIB   
0A08   09                     ADD   hl,bc   
0A09   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A0B   23                     INC   hl   
0A0C   36 0A                  LD   (hl),"\n"   
0A0E   23                     INC   hl   
0A0F   03                     INC   bc   
0A10   03                     INC   bc   
0A11   CD 87 09               CALL   crlf   ; echo character to screen
0A14   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A15   B7                     OR   a   
0A16   20 CE                  JR   nz,interpret5   
0A18                INTERPRET8:      
0A18   ED 43 E8 3D            LD   (vTIBPtr),bc   
0A1C   01 00 3F               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A1F                             ; we pressed enter
0A1F   0B                     DEC   bc   
0A20                NEXT:        
0A20   03                     INC   bc   ; Increment the IP
0A21   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A22   FE 20                  CP   " "   ; whitespace?
0A24   28 FA                  JR   z,next   ; space? ignore
0A26   38 07                  JR   c,next1   
0A28   6F                     LD   l,a   ; index into table
0A29   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A2B   6E                     LD   l,(hl)   ; get low jump address
0A2C   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A2E   E9                     JP   (hl)   ; Jump to routine
0A2F                NEXT1:       
0A2F   FE 00                  CP   NUL   ; end of input string?
0A31   28 03                  JR   z,exit_   
0A33   C3 C9 09               JP   interpret   ; no, other whitespace, macros?
0A36                EXIT_:       
0A36   60 69                  LD   hl,bc   
0A38   E9                     JP   (hl)   
0A39                ERROR:       
0A39   CD 8E 09               CALL   printStr   
0A3C   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A43   CD DC 08               CALL   prtdec   
0A46   C3 C9 09               JP   interpret   
0A49                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                             ; test "2 3 *", 6
0B00                             ; call printStr
0B00                             ; .cstr "Done!"
0B00                             ; HALT
0B00                             ; 
0B00                          ;*Macro unroll:  test "/f", false
0B00   31 80 3C               LD   SP,STACK   
0B03   CD 95 09               CALL   init   
0B06   CD 44 3B               CALL   execStr   
0B09   2F 66 00               .CSTR   "/f"   
0B0C                          ;*Macro unroll:  expect "/f",false
0B0C   E1                     POP   HL   
0B0D   E5                     PUSH   HL   
0B0E   11 00 00               LD   DE,false   
0B11   B7                     OR   A   
0B12   ED 52                  SBC   HL,DE   
0B14   7D                     LD   A,L   
0B15   B4                     OR   H   
0B16   28 4D                  JR   Z,expectM_0_2142S43   
0B18   CD 8E 09               CALL   printStr   
0B1B   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0B24   CD 8E 09               CALL   printStr   
0B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B36   21 00 00               LD   HL,false   
0B39   CD DC 08               CALL   prtdec   
0B3C   CD 8E 09               CALL   printStr   
0B3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B4C   E1                     POP   hl   
0B4D   E5                     PUSH   hl   
0B4E   CD DC 08               CALL   prtdec   
0B51   E1                     POP   hl   
0B52   CD 8E 09               CALL   printStr   
0B55   20 28 23 00            .CSTR   " (#"   
0B59   CD 24 09               CALL   prthex   
0B5C   CD 8E 09               CALL   printStr   
0B5F   29 0D 0A 00            .CSTR   ")\r\n"   
0B63   76                     HALT      
0B64   00                     .CSTR      
0B65                EXPECTM_0_2142S43:      
0B65   E1                     POP   HL   
0B66                          ;*Macro unroll:  test "/t", true
0B66   31 80 3C               LD   SP,STACK   
0B69   CD 95 09               CALL   init   
0B6C   CD 44 3B               CALL   execStr   
0B6F   2F 74 00               .CSTR   "/t"   
0B72                          ;*Macro unroll:  expect "/t",true
0B72   E1                     POP   HL   
0B73   E5                     PUSH   HL   
0B74   11 FF FF               LD   DE,true   
0B77   B7                     OR   A   
0B78   ED 52                  SBC   HL,DE   
0B7A   7D                     LD   A,L   
0B7B   B4                     OR   H   
0B7C   28 4D                  JR   Z,expectM_0_2143S43   
0B7E   CD 8E 09               CALL   printStr   
0B81   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0B8A   CD 8E 09               CALL   printStr   
0B8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B9C   21 FF FF               LD   HL,true   
0B9F   CD DC 08               CALL   prtdec   
0BA2   CD 8E 09               CALL   printStr   
0BA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BB2   E1                     POP   hl   
0BB3   E5                     PUSH   hl   
0BB4   CD DC 08               CALL   prtdec   
0BB7   E1                     POP   hl   
0BB8   CD 8E 09               CALL   printStr   
0BBB   20 28 23 00            .CSTR   " (#"   
0BBF   CD 24 09               CALL   prthex   
0BC2   CD 8E 09               CALL   printStr   
0BC5   29 0D 0A 00            .CSTR   ")\r\n"   
0BC9   76                     HALT      
0BCA   00                     .CSTR      
0BCB                EXPECTM_0_2143S43:      
0BCB   E1                     POP   HL   
0BCC                          ;*Macro unroll:  test "1", 1
0BCC   31 80 3C               LD   SP,STACK   
0BCF   CD 95 09               CALL   init   
0BD2   CD 44 3B               CALL   execStr   
0BD5   31 00                  .CSTR   "1"   
0BD7                          ;*Macro unroll:  expect "1",1
0BD7   E1                     POP   HL   
0BD8   E5                     PUSH   HL   
0BD9   11 01 00               LD   DE,1   
0BDC   B7                     OR   A   
0BDD   ED 52                  SBC   HL,DE   
0BDF   7D                     LD   A,L   
0BE0   B4                     OR   H   
0BE1   28 4C                  JR   Z,expectM_0_2144S43   
0BE3   CD 8E 09               CALL   printStr   
0BE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BEE   CD 8E 09               CALL   printStr   
0BF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C00   21 01 00               LD   HL,1   
0C03   CD DC 08               CALL   prtdec   
0C06   CD 8E 09               CALL   printStr   
0C09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C16   E1                     POP   hl   
0C17   E5                     PUSH   hl   
0C18   CD DC 08               CALL   prtdec   
0C1B   E1                     POP   hl   
0C1C   CD 8E 09               CALL   printStr   
0C1F   20 28 23 00            .CSTR   " (#"   
0C23   CD 24 09               CALL   prthex   
0C26   CD 8E 09               CALL   printStr   
0C29   29 0D 0A 00            .CSTR   ")\r\n"   
0C2D   76                     HALT      
0C2E   00                     .CSTR      
0C2F                EXPECTM_0_2144S43:      
0C2F   E1                     POP   HL   
0C30                          ;*Macro unroll:  test "2", 2
0C30   31 80 3C               LD   SP,STACK   
0C33   CD 95 09               CALL   init   
0C36   CD 44 3B               CALL   execStr   
0C39   32 00                  .CSTR   "2"   
0C3B                          ;*Macro unroll:  expect "2",2
0C3B   E1                     POP   HL   
0C3C   E5                     PUSH   HL   
0C3D   11 02 00               LD   DE,2   
0C40   B7                     OR   A   
0C41   ED 52                  SBC   HL,DE   
0C43   7D                     LD   A,L   
0C44   B4                     OR   H   
0C45   28 4C                  JR   Z,expectM_0_2145S43   
0C47   CD 8E 09               CALL   printStr   
0C4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0C52   CD 8E 09               CALL   printStr   
0C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C64   21 02 00               LD   HL,2   
0C67   CD DC 08               CALL   prtdec   
0C6A   CD 8E 09               CALL   printStr   
0C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C7A   E1                     POP   hl   
0C7B   E5                     PUSH   hl   
0C7C   CD DC 08               CALL   prtdec   
0C7F   E1                     POP   hl   
0C80   CD 8E 09               CALL   printStr   
0C83   20 28 23 00            .CSTR   " (#"   
0C87   CD 24 09               CALL   prthex   
0C8A   CD 8E 09               CALL   printStr   
0C8D   29 0D 0A 00            .CSTR   ")\r\n"   
0C91   76                     HALT      
0C92   00                     .CSTR      
0C93                EXPECTM_0_2145S43:      
0C93   E1                     POP   HL   
0C94                          ;*Macro unroll:  test "1", 1
0C94   31 80 3C               LD   SP,STACK   
0C97   CD 95 09               CALL   init   
0C9A   CD 44 3B               CALL   execStr   
0C9D   31 00                  .CSTR   "1"   
0C9F                          ;*Macro unroll:  expect "1",1
0C9F   E1                     POP   HL   
0CA0   E5                     PUSH   HL   
0CA1   11 01 00               LD   DE,1   
0CA4   B7                     OR   A   
0CA5   ED 52                  SBC   HL,DE   
0CA7   7D                     LD   A,L   
0CA8   B4                     OR   H   
0CA9   28 4C                  JR   Z,expectM_0_2146S43   
0CAB   CD 8E 09               CALL   printStr   
0CAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0CB6   CD 8E 09               CALL   printStr   
0CB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CC8   21 01 00               LD   HL,1   
0CCB   CD DC 08               CALL   prtdec   
0CCE   CD 8E 09               CALL   printStr   
0CD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CDE   E1                     POP   hl   
0CDF   E5                     PUSH   hl   
0CE0   CD DC 08               CALL   prtdec   
0CE3   E1                     POP   hl   
0CE4   CD 8E 09               CALL   printStr   
0CE7   20 28 23 00            .CSTR   " (#"   
0CEB   CD 24 09               CALL   prthex   
0CEE   CD 8E 09               CALL   printStr   
0CF1   29 0D 0A 00            .CSTR   ")\r\n"   
0CF5   76                     HALT      
0CF6   00                     .CSTR      
0CF7                EXPECTM_0_2146S43:      
0CF7   E1                     POP   HL   
0CF8                          ;*Macro unroll:  test "0", 0
0CF8   31 80 3C               LD   SP,STACK   
0CFB   CD 95 09               CALL   init   
0CFE   CD 44 3B               CALL   execStr   
0D01   30 00                  .CSTR   "0"   
0D03                          ;*Macro unroll:  expect "0",0
0D03   E1                     POP   HL   
0D04   E5                     PUSH   HL   
0D05   11 00 00               LD   DE,0   
0D08   B7                     OR   A   
0D09   ED 52                  SBC   HL,DE   
0D0B   7D                     LD   A,L   
0D0C   B4                     OR   H   
0D0D   28 4C                  JR   Z,expectM_0_2147S43   
0D0F   CD 8E 09               CALL   printStr   
0D12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0D1A   CD 8E 09               CALL   printStr   
0D1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D2C   21 00 00               LD   HL,0   
0D2F   CD DC 08               CALL   prtdec   
0D32   CD 8E 09               CALL   printStr   
0D35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D42   E1                     POP   hl   
0D43   E5                     PUSH   hl   
0D44   CD DC 08               CALL   prtdec   
0D47   E1                     POP   hl   
0D48   CD 8E 09               CALL   printStr   
0D4B   20 28 23 00            .CSTR   " (#"   
0D4F   CD 24 09               CALL   prthex   
0D52   CD 8E 09               CALL   printStr   
0D55   29 0D 0A 00            .CSTR   ")\r\n"   
0D59   76                     HALT      
0D5A   00                     .CSTR      
0D5B                EXPECTM_0_2147S43:      
0D5B   E1                     POP   HL   
0D5C                          ;*Macro unroll:  test "10", 10
0D5C   31 80 3C               LD   SP,STACK   
0D5F   CD 95 09               CALL   init   
0D62   CD 44 3B               CALL   execStr   
0D65   31 30 00               .CSTR   "10"   
0D68                          ;*Macro unroll:  expect "10",10
0D68   E1                     POP   HL   
0D69   E5                     PUSH   HL   
0D6A   11 0A 00               LD   DE,10   
0D6D   B7                     OR   A   
0D6E   ED 52                  SBC   HL,DE   
0D70   7D                     LD   A,L   
0D71   B4                     OR   H   
0D72   28 4D                  JR   Z,expectM_0_2148S43   
0D74   CD 8E 09               CALL   printStr   
0D77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D80   CD 8E 09               CALL   printStr   
0D83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D92   21 0A 00               LD   HL,10   
0D95   CD DC 08               CALL   prtdec   
0D98   CD 8E 09               CALL   printStr   
0D9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DA8   E1                     POP   hl   
0DA9   E5                     PUSH   hl   
0DAA   CD DC 08               CALL   prtdec   
0DAD   E1                     POP   hl   
0DAE   CD 8E 09               CALL   printStr   
0DB1   20 28 23 00            .CSTR   " (#"   
0DB5   CD 24 09               CALL   prthex   
0DB8   CD 8E 09               CALL   printStr   
0DBB   29 0D 0A 00            .CSTR   ")\r\n"   
0DBF   76                     HALT      
0DC0   00                     .CSTR      
0DC1                EXPECTM_0_2148S43:      
0DC1   E1                     POP   HL   
0DC2                          ;*Macro unroll:  test "123", 123
0DC2   31 80 3C               LD   SP,STACK   
0DC5   CD 95 09               CALL   init   
0DC8   CD 44 3B               CALL   execStr   
0DCB   31 32 33 00            .CSTR   "123"   
0DCF                          ;*Macro unroll:  expect "123",123
0DCF   E1                     POP   HL   
0DD0   E5                     PUSH   HL   
0DD1   11 7B 00               LD   DE,123   
0DD4   B7                     OR   A   
0DD5   ED 52                  SBC   HL,DE   
0DD7   7D                     LD   A,L   
0DD8   B4                     OR   H   
0DD9   28 4E                  JR   Z,expectM_0_2149S43   
0DDB   CD 8E 09               CALL   printStr   
0DDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0DE8   CD 8E 09               CALL   printStr   
0DEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DFA   21 7B 00               LD   HL,123   
0DFD   CD DC 08               CALL   prtdec   
0E00   CD 8E 09               CALL   printStr   
0E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E10   E1                     POP   hl   
0E11   E5                     PUSH   hl   
0E12   CD DC 08               CALL   prtdec   
0E15   E1                     POP   hl   
0E16   CD 8E 09               CALL   printStr   
0E19   20 28 23 00            .CSTR   " (#"   
0E1D   CD 24 09               CALL   prthex   
0E20   CD 8E 09               CALL   printStr   
0E23   29 0D 0A 00            .CSTR   ")\r\n"   
0E27   76                     HALT      
0E28   00                     .CSTR      
0E29                EXPECTM_0_2149S43:      
0E29   E1                     POP   HL   
0E2A                          ;*Macro unroll:  test "-1",-1
0E2A   31 80 3C               LD   SP,STACK   
0E2D   CD 95 09               CALL   init   
0E30   CD 44 3B               CALL   execStr   
0E33   2D 31 00               .CSTR   "-1"   
0E36                          ;*Macro unroll:  expect "-1",-1
0E36   E1                     POP   HL   
0E37   E5                     PUSH   HL   
0E38   11 FF FF               LD   DE,-1   
0E3B   B7                     OR   A   
0E3C   ED 52                  SBC   HL,DE   
0E3E   7D                     LD   A,L   
0E3F   B4                     OR   H   
0E40   28 4D                  JR   Z,expectM_0_2150S43   
0E42   CD 8E 09               CALL   printStr   
0E45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0E4E   CD 8E 09               CALL   printStr   
0E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E60   21 FF FF               LD   HL,-1   
0E63   CD DC 08               CALL   prtdec   
0E66   CD 8E 09               CALL   printStr   
0E69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E76   E1                     POP   hl   
0E77   E5                     PUSH   hl   
0E78   CD DC 08               CALL   prtdec   
0E7B   E1                     POP   hl   
0E7C   CD 8E 09               CALL   printStr   
0E7F   20 28 23 00            .CSTR   " (#"   
0E83   CD 24 09               CALL   prthex   
0E86   CD 8E 09               CALL   printStr   
0E89   29 0D 0A 00            .CSTR   ")\r\n"   
0E8D   76                     HALT      
0E8E   00                     .CSTR      
0E8F                EXPECTM_0_2150S43:      
0E8F   E1                     POP   HL   
0E90                          ;*Macro unroll:  test "''", 0
0E90   31 80 3C               LD   SP,STACK   
0E93   CD 95 09               CALL   init   
0E96   CD 44 3B               CALL   execStr   
0E99   27 27 00               .CSTR   "''"   
0E9C                          ;*Macro unroll:  expect "''",0
0E9C   E1                     POP   HL   
0E9D   E5                     PUSH   HL   
0E9E   11 00 00               LD   DE,0   
0EA1   B7                     OR   A   
0EA2   ED 52                  SBC   HL,DE   
0EA4   7D                     LD   A,L   
0EA5   B4                     OR   H   
0EA6   28 4D                  JR   Z,expectM_0_2151S43   
0EA8   CD 8E 09               CALL   printStr   
0EAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0EB4   CD 8E 09               CALL   printStr   
0EB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC6   21 00 00               LD   HL,0   
0EC9   CD DC 08               CALL   prtdec   
0ECC   CD 8E 09               CALL   printStr   
0ECF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EDC   E1                     POP   hl   
0EDD   E5                     PUSH   hl   
0EDE   CD DC 08               CALL   prtdec   
0EE1   E1                     POP   hl   
0EE2   CD 8E 09               CALL   printStr   
0EE5   20 28 23 00            .CSTR   " (#"   
0EE9   CD 24 09               CALL   prthex   
0EEC   CD 8E 09               CALL   printStr   
0EEF   29 0D 0A 00            .CSTR   ")\r\n"   
0EF3   76                     HALT      
0EF4   00                     .CSTR      
0EF5                EXPECTM_0_2151S43:      
0EF5   E1                     POP   HL   
0EF6                          ;*Macro unroll:  test "'a'", $61
0EF6   31 80 3C               LD   SP,STACK   
0EF9   CD 95 09               CALL   init   
0EFC   CD 44 3B               CALL   execStr   
0EFF   27 61 27 00            .CSTR   "'a'"   
0F03                          ;*Macro unroll:  expect "'a'",$61
0F03   E1                     POP   HL   
0F04   E5                     PUSH   HL   
0F05   11 61 00               LD   DE,$61   
0F08   B7                     OR   A   
0F09   ED 52                  SBC   HL,DE   
0F0B   7D                     LD   A,L   
0F0C   B4                     OR   H   
0F0D   28 4E                  JR   Z,expectM_0_2152S43   
0F0F   CD 8E 09               CALL   printStr   
0F12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0F1C   CD 8E 09               CALL   printStr   
0F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F2E   21 61 00               LD   HL,$61   
0F31   CD DC 08               CALL   prtdec   
0F34   CD 8E 09               CALL   printStr   
0F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F44   E1                     POP   hl   
0F45   E5                     PUSH   hl   
0F46   CD DC 08               CALL   prtdec   
0F49   E1                     POP   hl   
0F4A   CD 8E 09               CALL   printStr   
0F4D   20 28 23 00            .CSTR   " (#"   
0F51   CD 24 09               CALL   prthex   
0F54   CD 8E 09               CALL   printStr   
0F57   29 0D 0A 00            .CSTR   ")\r\n"   
0F5B   76                     HALT      
0F5C   00                     .CSTR      
0F5D                EXPECTM_0_2152S43:      
0F5D   E1                     POP   HL   
0F5E                          ;*Macro unroll:  test "'\\''", $27
0F5E   31 80 3C               LD   SP,STACK   
0F61   CD 95 09               CALL   init   
0F64   CD 44 3B               CALL   execStr   
0F67   27 5C 27 27 00         .CSTR   "'\\''"   
0F6C                          ;*Macro unroll:  expect "'\\''",$27
0F6C   E1                     POP   HL   
0F6D   E5                     PUSH   HL   
0F6E   11 27 00               LD   DE,$27   
0F71   B7                     OR   A   
0F72   ED 52                  SBC   HL,DE   
0F74   7D                     LD   A,L   
0F75   B4                     OR   H   
0F76   28 4F                  JR   Z,expectM_0_2153S43   
0F78   CD 8E 09               CALL   printStr   
0F7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F86   CD 8E 09               CALL   printStr   
0F89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F98   21 27 00               LD   HL,$27   
0F9B   CD DC 08               CALL   prtdec   
0F9E   CD 8E 09               CALL   printStr   
0FA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FAE   E1                     POP   hl   
0FAF   E5                     PUSH   hl   
0FB0   CD DC 08               CALL   prtdec   
0FB3   E1                     POP   hl   
0FB4   CD 8E 09               CALL   printStr   
0FB7   20 28 23 00            .CSTR   " (#"   
0FBB   CD 24 09               CALL   prthex   
0FBE   CD 8E 09               CALL   printStr   
0FC1   29 0D 0A 00            .CSTR   ")\r\n"   
0FC5   76                     HALT      
0FC6   00                     .CSTR      
0FC7                EXPECTM_0_2153S43:      
0FC7   E1                     POP   HL   
0FC8                          ;*Macro unroll:  test "#10", $10
0FC8   31 80 3C               LD   SP,STACK   
0FCB   CD 95 09               CALL   init   
0FCE   CD 44 3B               CALL   execStr   
0FD1   23 31 30 00            .CSTR   "#10"   
0FD5                          ;*Macro unroll:  expect "#10",$10
0FD5   E1                     POP   HL   
0FD6   E5                     PUSH   HL   
0FD7   11 10 00               LD   DE,$10   
0FDA   B7                     OR   A   
0FDB   ED 52                  SBC   HL,DE   
0FDD   7D                     LD   A,L   
0FDE   B4                     OR   H   
0FDF   28 4E                  JR   Z,expectM_0_2154S43   
0FE1   CD 8E 09               CALL   printStr   
0FE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0FEE   CD 8E 09               CALL   printStr   
0FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1000   21 10 00               LD   HL,$10   
1003   CD DC 08               CALL   prtdec   
1006   CD 8E 09               CALL   printStr   
1009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1016   E1                     POP   hl   
1017   E5                     PUSH   hl   
1018   CD DC 08               CALL   prtdec   
101B   E1                     POP   hl   
101C   CD 8E 09               CALL   printStr   
101F   20 28 23 00            .CSTR   " (#"   
1023   CD 24 09               CALL   prthex   
1026   CD 8E 09               CALL   printStr   
1029   29 0D 0A 00            .CSTR   ")\r\n"   
102D   76                     HALT      
102E   00                     .CSTR      
102F                EXPECTM_0_2154S43:      
102F   E1                     POP   HL   
1030                          ;*Macro unroll:  test "#FF", $FF
1030   31 80 3C               LD   SP,STACK   
1033   CD 95 09               CALL   init   
1036   CD 44 3B               CALL   execStr   
1039   23 46 46 00            .CSTR   "#FF"   
103D                          ;*Macro unroll:  expect "#FF",$FF
103D   E1                     POP   HL   
103E   E5                     PUSH   HL   
103F   11 FF 00               LD   DE,$FF   
1042   B7                     OR   A   
1043   ED 52                  SBC   HL,DE   
1045   7D                     LD   A,L   
1046   B4                     OR   H   
1047   28 4E                  JR   Z,expectM_0_2155S43   
1049   CD 8E 09               CALL   printStr   
104C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1056   CD 8E 09               CALL   printStr   
1059   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1068   21 FF 00               LD   HL,$FF   
106B   CD DC 08               CALL   prtdec   
106E   CD 8E 09               CALL   printStr   
1071   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
107E   E1                     POP   hl   
107F   E5                     PUSH   hl   
1080   CD DC 08               CALL   prtdec   
1083   E1                     POP   hl   
1084   CD 8E 09               CALL   printStr   
1087   20 28 23 00            .CSTR   " (#"   
108B   CD 24 09               CALL   prthex   
108E   CD 8E 09               CALL   printStr   
1091   29 0D 0A 00            .CSTR   ")\r\n"   
1095   76                     HALT      
1096   00                     .CSTR      
1097                EXPECTM_0_2155S43:      
1097   E1                     POP   HL   
1098                          ;*Macro unroll:  test "-1 2 +",1
1098   31 80 3C               LD   SP,STACK   
109B   CD 95 09               CALL   init   
109E   CD 44 3B               CALL   execStr   
10A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
10A8                          ;*Macro unroll:  expect "-1 2 +",1
10A8   E1                     POP   HL   
10A9   E5                     PUSH   HL   
10AA   11 01 00               LD   DE,1   
10AD   B7                     OR   A   
10AE   ED 52                  SBC   HL,DE   
10B0   7D                     LD   A,L   
10B1   B4                     OR   H   
10B2   28 51                  JR   Z,expectM_0_2156S43   
10B4   CD 8E 09               CALL   printStr   
10B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
10C4   CD 8E 09               CALL   printStr   
10C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D6   21 01 00               LD   HL,1   
10D9   CD DC 08               CALL   prtdec   
10DC   CD 8E 09               CALL   printStr   
10DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EC   E1                     POP   hl   
10ED   E5                     PUSH   hl   
10EE   CD DC 08               CALL   prtdec   
10F1   E1                     POP   hl   
10F2   CD 8E 09               CALL   printStr   
10F5   20 28 23 00            .CSTR   " (#"   
10F9   CD 24 09               CALL   prthex   
10FC   CD 8E 09               CALL   printStr   
10FF   29 0D 0A 00            .CSTR   ")\r\n"   
1103   76                     HALT      
1104   00                     .CSTR      
1105                EXPECTM_0_2156S43:      
1105   E1                     POP   HL   
1106                          ;*Macro unroll:  test "-1 1 +",0
1106   31 80 3C               LD   SP,STACK   
1109   CD 95 09               CALL   init   
110C   CD 44 3B               CALL   execStr   
110F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1116                          ;*Macro unroll:  expect "-1 1 +",0
1116   E1                     POP   HL   
1117   E5                     PUSH   HL   
1118   11 00 00               LD   DE,0   
111B   B7                     OR   A   
111C   ED 52                  SBC   HL,DE   
111E   7D                     LD   A,L   
111F   B4                     OR   H   
1120   28 51                  JR   Z,expectM_0_2157S43   
1122   CD 8E 09               CALL   printStr   
1125   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1132   CD 8E 09               CALL   printStr   
1135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1144   21 00 00               LD   HL,0   
1147   CD DC 08               CALL   prtdec   
114A   CD 8E 09               CALL   printStr   
114D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
115A   E1                     POP   hl   
115B   E5                     PUSH   hl   
115C   CD DC 08               CALL   prtdec   
115F   E1                     POP   hl   
1160   CD 8E 09               CALL   printStr   
1163   20 28 23 00            .CSTR   " (#"   
1167   CD 24 09               CALL   prthex   
116A   CD 8E 09               CALL   printStr   
116D   29 0D 0A 00            .CSTR   ")\r\n"   
1171   76                     HALT      
1172   00                     .CSTR      
1173                EXPECTM_0_2157S43:      
1173   E1                     POP   HL   
1174                          ;*Macro unroll:  test "1 2 +", 3
1174   31 80 3C               LD   SP,STACK   
1177   CD 95 09               CALL   init   
117A   CD 44 3B               CALL   execStr   
117D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1183                          ;*Macro unroll:  expect "1 2 +",3
1183   E1                     POP   HL   
1184   E5                     PUSH   HL   
1185   11 03 00               LD   DE,3   
1188   B7                     OR   A   
1189   ED 52                  SBC   HL,DE   
118B   7D                     LD   A,L   
118C   B4                     OR   H   
118D   28 50                  JR   Z,expectM_0_2158S43   
118F   CD 8E 09               CALL   printStr   
1192   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
119E   CD 8E 09               CALL   printStr   
11A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11B0   21 03 00               LD   HL,3   
11B3   CD DC 08               CALL   prtdec   
11B6   CD 8E 09               CALL   printStr   
11B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C6   E1                     POP   hl   
11C7   E5                     PUSH   hl   
11C8   CD DC 08               CALL   prtdec   
11CB   E1                     POP   hl   
11CC   CD 8E 09               CALL   printStr   
11CF   20 28 23 00            .CSTR   " (#"   
11D3   CD 24 09               CALL   prthex   
11D6   CD 8E 09               CALL   printStr   
11D9   29 0D 0A 00            .CSTR   ")\r\n"   
11DD   76                     HALT      
11DE   00                     .CSTR      
11DF                EXPECTM_0_2158S43:      
11DF   E1                     POP   HL   
11E0                          ;*Macro unroll:  test "4 1 2 +", 3
11E0   31 80 3C               LD   SP,STACK   
11E3   CD 95 09               CALL   init   
11E6   CD 44 3B               CALL   execStr   
11E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
11F1                          ;*Macro unroll:  expect "4 1 2 +",3
11F1   E1                     POP   HL   
11F2   E5                     PUSH   HL   
11F3   11 03 00               LD   DE,3   
11F6   B7                     OR   A   
11F7   ED 52                  SBC   HL,DE   
11F9   7D                     LD   A,L   
11FA   B4                     OR   H   
11FB   28 52                  JR   Z,expectM_0_2159S43   
11FD   CD 8E 09               CALL   printStr   
1200   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
120E   CD 8E 09               CALL   printStr   
1211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1220   21 03 00               LD   HL,3   
1223   CD DC 08               CALL   prtdec   
1226   CD 8E 09               CALL   printStr   
1229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1236   E1                     POP   hl   
1237   E5                     PUSH   hl   
1238   CD DC 08               CALL   prtdec   
123B   E1                     POP   hl   
123C   CD 8E 09               CALL   printStr   
123F   20 28 23 00            .CSTR   " (#"   
1243   CD 24 09               CALL   prthex   
1246   CD 8E 09               CALL   printStr   
1249   29 0D 0A 00            .CSTR   ")\r\n"   
124D   76                     HALT      
124E   00                     .CSTR      
124F                EXPECTM_0_2159S43:      
124F   E1                     POP   HL   
1250                          ;*Macro unroll:  test "123 456 +", 123+456
1250   31 80 3C               LD   SP,STACK   
1253   CD 95 09               CALL   init   
1256   CD 44 3B               CALL   execStr   
1259   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1263                          ;*Macro unroll:  expect "123 456 +",123+456
1263   E1                     POP   HL   
1264   E5                     PUSH   HL   
1265   11 43 02               LD   DE,123+456   
1268   B7                     OR   A   
1269   ED 52                  SBC   HL,DE   
126B   7D                     LD   A,L   
126C   B4                     OR   H   
126D   28 54                  JR   Z,expectM_0_2160S43   
126F   CD 8E 09               CALL   printStr   
1272   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1282   CD 8E 09               CALL   printStr   
1285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1294   21 43 02               LD   HL,123+456   
1297   CD DC 08               CALL   prtdec   
129A   CD 8E 09               CALL   printStr   
129D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12AA   E1                     POP   hl   
12AB   E5                     PUSH   hl   
12AC   CD DC 08               CALL   prtdec   
12AF   E1                     POP   hl   
12B0   CD 8E 09               CALL   printStr   
12B3   20 28 23 00            .CSTR   " (#"   
12B7   CD 24 09               CALL   prthex   
12BA   CD 8E 09               CALL   printStr   
12BD   29 0D 0A 00            .CSTR   ")\r\n"   
12C1   76                     HALT      
12C2   00                     .CSTR      
12C3                EXPECTM_0_2160S43:      
12C3   E1                     POP   HL   
12C4                          ;*Macro unroll:  test "64 128 +", 64+128
12C4   31 80 3C               LD   SP,STACK   
12C7   CD 95 09               CALL   init   
12CA   CD 44 3B               CALL   execStr   
12CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12D6                          ;*Macro unroll:  expect "64 128 +",64+128
12D6   E1                     POP   HL   
12D7   E5                     PUSH   HL   
12D8   11 C0 00               LD   DE,64+128   
12DB   B7                     OR   A   
12DC   ED 52                  SBC   HL,DE   
12DE   7D                     LD   A,L   
12DF   B4                     OR   H   
12E0   28 53                  JR   Z,expectM_0_2161S43   
12E2   CD 8E 09               CALL   printStr   
12E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12F4   CD 8E 09               CALL   printStr   
12F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1306   21 C0 00               LD   HL,64+128   
1309   CD DC 08               CALL   prtdec   
130C   CD 8E 09               CALL   printStr   
130F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131C   E1                     POP   hl   
131D   E5                     PUSH   hl   
131E   CD DC 08               CALL   prtdec   
1321   E1                     POP   hl   
1322   CD 8E 09               CALL   printStr   
1325   20 28 23 00            .CSTR   " (#"   
1329   CD 24 09               CALL   prthex   
132C   CD 8E 09               CALL   printStr   
132F   29 0D 0A 00            .CSTR   ")\r\n"   
1333   76                     HALT      
1334   00                     .CSTR      
1335                EXPECTM_0_2161S43:      
1335   E1                     POP   HL   
1336                          ;*Macro unroll:  test "1 2 +", 3
1336   31 80 3C               LD   SP,STACK   
1339   CD 95 09               CALL   init   
133C   CD 44 3B               CALL   execStr   
133F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1345                          ;*Macro unroll:  expect "1 2 +",3
1345   E1                     POP   HL   
1346   E5                     PUSH   HL   
1347   11 03 00               LD   DE,3   
134A   B7                     OR   A   
134B   ED 52                  SBC   HL,DE   
134D   7D                     LD   A,L   
134E   B4                     OR   H   
134F   28 50                  JR   Z,expectM_0_2162S43   
1351   CD 8E 09               CALL   printStr   
1354   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1360   CD 8E 09               CALL   printStr   
1363   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1372   21 03 00               LD   HL,3   
1375   CD DC 08               CALL   prtdec   
1378   CD 8E 09               CALL   printStr   
137B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1388   E1                     POP   hl   
1389   E5                     PUSH   hl   
138A   CD DC 08               CALL   prtdec   
138D   E1                     POP   hl   
138E   CD 8E 09               CALL   printStr   
1391   20 28 23 00            .CSTR   " (#"   
1395   CD 24 09               CALL   prthex   
1398   CD 8E 09               CALL   printStr   
139B   29 0D 0A 00            .CSTR   ")\r\n"   
139F   76                     HALT      
13A0   00                     .CSTR      
13A1                EXPECTM_0_2162S43:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "1 a= a++ a",2
13A2   31 80 3C               LD   SP,STACK   
13A5   CD 95 09               CALL   init   
13A8   CD 44 3B               CALL   execStr   
13AB   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
13B6                          ;*Macro unroll:  expect "1 a= a++ a",2
13B6   E1                     POP   HL   
13B7   E5                     PUSH   HL   
13B8   11 02 00               LD   DE,2   
13BB   B7                     OR   A   
13BC   ED 52                  SBC   HL,DE   
13BE   7D                     LD   A,L   
13BF   B4                     OR   H   
13C0   28 55                  JR   Z,expectM_0_2163S43   
13C2   CD 8E 09               CALL   printStr   
13C5   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
13D6   CD 8E 09               CALL   printStr   
13D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E8   21 02 00               LD   HL,2   
13EB   CD DC 08               CALL   prtdec   
13EE   CD 8E 09               CALL   printStr   
13F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FE   E1                     POP   hl   
13FF   E5                     PUSH   hl   
1400   CD DC 08               CALL   prtdec   
1403   E1                     POP   hl   
1404   CD 8E 09               CALL   printStr   
1407   20 28 23 00            .CSTR   " (#"   
140B   CD 24 09               CALL   prthex   
140E   CD 8E 09               CALL   printStr   
1411   29 0D 0A 00            .CSTR   ")\r\n"   
1415   76                     HALT      
1416   00                     .CSTR      
1417                EXPECTM_0_2163S43:      
1417   E1                     POP   HL   
1418                          ;*Macro unroll:  test "1 a= 2 a += a",3
1418   31 80 3C               LD   SP,STACK   
141B   CD 95 09               CALL   init   
141E   CD 44 3B               CALL   execStr   
1421   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
142F                          ;*Macro unroll:  expect "1 a= 2 a += a",3
142F   E1                     POP   HL   
1430   E5                     PUSH   HL   
1431   11 03 00               LD   DE,3   
1434   B7                     OR   A   
1435   ED 52                  SBC   HL,DE   
1437   7D                     LD   A,L   
1438   B4                     OR   H   
1439   28 58                  JR   Z,expectM_0_2164S43   
143B   CD 8E 09               CALL   printStr   
143E   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
1452   CD 8E 09               CALL   printStr   
1455   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1464   21 03 00               LD   HL,3   
1467   CD DC 08               CALL   prtdec   
146A   CD 8E 09               CALL   printStr   
146D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
147A   E1                     POP   hl   
147B   E5                     PUSH   hl   
147C   CD DC 08               CALL   prtdec   
147F   E1                     POP   hl   
1480   CD 8E 09               CALL   printStr   
1483   20 28 23 00            .CSTR   " (#"   
1487   CD 24 09               CALL   prthex   
148A   CD 8E 09               CALL   printStr   
148D   29 0D 0A 00            .CSTR   ")\r\n"   
1491   76                     HALT      
1492   00                     .CSTR      
1493                EXPECTM_0_2164S43:      
1493   E1                     POP   HL   
1494                          ;*Macro unroll:  test "-1 -1 -",0
1494   31 80 3C               LD   SP,STACK   
1497   CD 95 09               CALL   init   
149A   CD 44 3B               CALL   execStr   
149D   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
14A5                          ;*Macro unroll:  expect "-1 -1 -",0
14A5   E1                     POP   HL   
14A6   E5                     PUSH   HL   
14A7   11 00 00               LD   DE,0   
14AA   B7                     OR   A   
14AB   ED 52                  SBC   HL,DE   
14AD   7D                     LD   A,L   
14AE   B4                     OR   H   
14AF   28 52                  JR   Z,expectM_0_2165S43   
14B1   CD 8E 09               CALL   printStr   
14B4   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
14C2   CD 8E 09               CALL   printStr   
14C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14D4   21 00 00               LD   HL,0   
14D7   CD DC 08               CALL   prtdec   
14DA   CD 8E 09               CALL   printStr   
14DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EA   E1                     POP   hl   
14EB   E5                     PUSH   hl   
14EC   CD DC 08               CALL   prtdec   
14EF   E1                     POP   hl   
14F0   CD 8E 09               CALL   printStr   
14F3   20 28 23 00            .CSTR   " (#"   
14F7   CD 24 09               CALL   prthex   
14FA   CD 8E 09               CALL   printStr   
14FD   29 0D 0A 00            .CSTR   ")\r\n"   
1501   76                     HALT      
1502   00                     .CSTR      
1503                EXPECTM_0_2165S43:      
1503   E1                     POP   HL   
1504                          ;*Macro unroll:  test "5 3 -", 2
1504   31 80 3C               LD   SP,STACK   
1507   CD 95 09               CALL   init   
150A   CD 44 3B               CALL   execStr   
150D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1513                          ;*Macro unroll:  expect "5 3 -",2
1513   E1                     POP   HL   
1514   E5                     PUSH   HL   
1515   11 02 00               LD   DE,2   
1518   B7                     OR   A   
1519   ED 52                  SBC   HL,DE   
151B   7D                     LD   A,L   
151C   B4                     OR   H   
151D   28 50                  JR   Z,expectM_0_2166S43   
151F   CD 8E 09               CALL   printStr   
1522   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
152E   CD 8E 09               CALL   printStr   
1531   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1540   21 02 00               LD   HL,2   
1543   CD DC 08               CALL   prtdec   
1546   CD 8E 09               CALL   printStr   
1549   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1556   E1                     POP   hl   
1557   E5                     PUSH   hl   
1558   CD DC 08               CALL   prtdec   
155B   E1                     POP   hl   
155C   CD 8E 09               CALL   printStr   
155F   20 28 23 00            .CSTR   " (#"   
1563   CD 24 09               CALL   prthex   
1566   CD 8E 09               CALL   printStr   
1569   29 0D 0A 00            .CSTR   ")\r\n"   
156D   76                     HALT      
156E   00                     .CSTR      
156F                EXPECTM_0_2166S43:      
156F   E1                     POP   HL   
1570                          ;*Macro unroll:  test "2 1 -",1
1570   31 80 3C               LD   SP,STACK   
1573   CD 95 09               CALL   init   
1576   CD 44 3B               CALL   execStr   
1579   32 20 31 20 2D 00      .CSTR   "2 1 -"   
157F                          ;*Macro unroll:  expect "2 1 -",1
157F   E1                     POP   HL   
1580   E5                     PUSH   HL   
1581   11 01 00               LD   DE,1   
1584   B7                     OR   A   
1585   ED 52                  SBC   HL,DE   
1587   7D                     LD   A,L   
1588   B4                     OR   H   
1589   28 50                  JR   Z,expectM_0_2167S43   
158B   CD 8E 09               CALL   printStr   
158E   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
159A   CD 8E 09               CALL   printStr   
159D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AC   21 01 00               LD   HL,1   
15AF   CD DC 08               CALL   prtdec   
15B2   CD 8E 09               CALL   printStr   
15B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C2   E1                     POP   hl   
15C3   E5                     PUSH   hl   
15C4   CD DC 08               CALL   prtdec   
15C7   E1                     POP   hl   
15C8   CD 8E 09               CALL   printStr   
15CB   20 28 23 00            .CSTR   " (#"   
15CF   CD 24 09               CALL   prthex   
15D2   CD 8E 09               CALL   printStr   
15D5   29 0D 0A 00            .CSTR   ")\r\n"   
15D9   76                     HALT      
15DA   00                     .CSTR      
15DB                EXPECTM_0_2167S43:      
15DB   E1                     POP   HL   
15DC                          ;*Macro unroll:  test "3 a= a-- a",2
15DC   31 80 3C               LD   SP,STACK   
15DF   CD 95 09               CALL   init   
15E2   CD 44 3B               CALL   execStr   
15E5   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
15F0                          ;*Macro unroll:  expect "3 a= a-- a",2
15F0   E1                     POP   HL   
15F1   E5                     PUSH   HL   
15F2   11 02 00               LD   DE,2   
15F5   B7                     OR   A   
15F6   ED 52                  SBC   HL,DE   
15F8   7D                     LD   A,L   
15F9   B4                     OR   H   
15FA   28 55                  JR   Z,expectM_0_2168S43   
15FC   CD 8E 09               CALL   printStr   
15FF   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
1610   CD 8E 09               CALL   printStr   
1613   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1622   21 02 00               LD   HL,2   
1625   CD DC 08               CALL   prtdec   
1628   CD 8E 09               CALL   printStr   
162B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1638   E1                     POP   hl   
1639   E5                     PUSH   hl   
163A   CD DC 08               CALL   prtdec   
163D   E1                     POP   hl   
163E   CD 8E 09               CALL   printStr   
1641   20 28 23 00            .CSTR   " (#"   
1645   CD 24 09               CALL   prthex   
1648   CD 8E 09               CALL   printStr   
164B   29 0D 0A 00            .CSTR   ")\r\n"   
164F   76                     HALT      
1650   00                     .CSTR      
1651                EXPECTM_0_2168S43:      
1651   E1                     POP   HL   
1652                          ;*Macro unroll:  test "4 a= a 2 -= a",2
1652   31 80 3C               LD   SP,STACK   
1655   CD 95 09               CALL   init   
1658   CD 44 3B               CALL   execStr   
165B   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
1669                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
1669   E1                     POP   HL   
166A   E5                     PUSH   HL   
166B   11 02 00               LD   DE,2   
166E   B7                     OR   A   
166F   ED 52                  SBC   HL,DE   
1671   7D                     LD   A,L   
1672   B4                     OR   H   
1673   28 58                  JR   Z,expectM_0_2169S43   
1675   CD 8E 09               CALL   printStr   
1678   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
168C   CD 8E 09               CALL   printStr   
168F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
169E   21 02 00               LD   HL,2   
16A1   CD DC 08               CALL   prtdec   
16A4   CD 8E 09               CALL   printStr   
16A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16B4   E1                     POP   hl   
16B5   E5                     PUSH   hl   
16B6   CD DC 08               CALL   prtdec   
16B9   E1                     POP   hl   
16BA   CD 8E 09               CALL   printStr   
16BD   20 28 23 00            .CSTR   " (#"   
16C1   CD 24 09               CALL   prthex   
16C4   CD 8E 09               CALL   printStr   
16C7   29 0D 0A 00            .CSTR   ")\r\n"   
16CB   76                     HALT      
16CC   00                     .CSTR      
16CD                EXPECTM_0_2169S43:      
16CD   E1                     POP   HL   
16CE                          ;*Macro unroll:  test "3 5 &", 1
16CE   31 80 3C               LD   SP,STACK   
16D1   CD 95 09               CALL   init   
16D4   CD 44 3B               CALL   execStr   
16D7   33 20 35 20 26 00      .CSTR   "3 5 &"   
16DD                          ;*Macro unroll:  expect "3 5 &",1
16DD   E1                     POP   HL   
16DE   E5                     PUSH   HL   
16DF   11 01 00               LD   DE,1   
16E2   B7                     OR   A   
16E3   ED 52                  SBC   HL,DE   
16E5   7D                     LD   A,L   
16E6   B4                     OR   H   
16E7   28 50                  JR   Z,expectM_0_2170S43   
16E9   CD 8E 09               CALL   printStr   
16EC   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
16F8   CD 8E 09               CALL   printStr   
16FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
170A   21 01 00               LD   HL,1   
170D   CD DC 08               CALL   prtdec   
1710   CD 8E 09               CALL   printStr   
1713   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1720   E1                     POP   hl   
1721   E5                     PUSH   hl   
1722   CD DC 08               CALL   prtdec   
1725   E1                     POP   hl   
1726   CD 8E 09               CALL   printStr   
1729   20 28 23 00            .CSTR   " (#"   
172D   CD 24 09               CALL   prthex   
1730   CD 8E 09               CALL   printStr   
1733   29 0D 0A 00            .CSTR   ")\r\n"   
1737   76                     HALT      
1738   00                     .CSTR      
1739                EXPECTM_0_2170S43:      
1739   E1                     POP   HL   
173A                          ;*Macro unroll:  test "3 a= 5 a &= a",1
173A   31 80 3C               LD   SP,STACK   
173D   CD 95 09               CALL   init   
1740   CD 44 3B               CALL   execStr   
1743   33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3 a= 5 a &= a"   
1751                          ;*Macro unroll:  expect "3 a= 5 a &= a",1
1751   E1                     POP   HL   
1752   E5                     PUSH   HL   
1753   11 01 00               LD   DE,1   
1756   B7                     OR   A   
1757   ED 52                  SBC   HL,DE   
1759   7D                     LD   A,L   
175A   B4                     OR   H   
175B   28 58                  JR   Z,expectM_0_2171S43   
175D   CD 8E 09               CALL   printStr   
1760   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a &= a"   
1774   CD 8E 09               CALL   printStr   
1777   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1786   21 01 00               LD   HL,1   
1789   CD DC 08               CALL   prtdec   
178C   CD 8E 09               CALL   printStr   
178F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
179C   E1                     POP   hl   
179D   E5                     PUSH   hl   
179E   CD DC 08               CALL   prtdec   
17A1   E1                     POP   hl   
17A2   CD 8E 09               CALL   printStr   
17A5   20 28 23 00            .CSTR   " (#"   
17A9   CD 24 09               CALL   prthex   
17AC   CD 8E 09               CALL   printStr   
17AF   29 0D 0A 00            .CSTR   ")\r\n"   
17B3   76                     HALT      
17B4   00                     .CSTR      
17B5                EXPECTM_0_2171S43:      
17B5   E1                     POP   HL   
17B6                          ;*Macro unroll:  test "3 5 |", 7
17B6   31 80 3C               LD   SP,STACK   
17B9   CD 95 09               CALL   init   
17BC   CD 44 3B               CALL   execStr   
17BF   33 20 35 20 7C 00      .CSTR   "3 5 |"   
17C5                          ;*Macro unroll:  expect "3 5 |",7
17C5   E1                     POP   HL   
17C6   E5                     PUSH   HL   
17C7   11 07 00               LD   DE,7   
17CA   B7                     OR   A   
17CB   ED 52                  SBC   HL,DE   
17CD   7D                     LD   A,L   
17CE   B4                     OR   H   
17CF   28 50                  JR   Z,expectM_0_2172S43   
17D1   CD 8E 09               CALL   printStr   
17D4   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
17E0   CD 8E 09               CALL   printStr   
17E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F2   21 07 00               LD   HL,7   
17F5   CD DC 08               CALL   prtdec   
17F8   CD 8E 09               CALL   printStr   
17FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1808   E1                     POP   hl   
1809   E5                     PUSH   hl   
180A   CD DC 08               CALL   prtdec   
180D   E1                     POP   hl   
180E   CD 8E 09               CALL   printStr   
1811   20 28 23 00            .CSTR   " (#"   
1815   CD 24 09               CALL   prthex   
1818   CD 8E 09               CALL   printStr   
181B   29 0D 0A 00            .CSTR   ")\r\n"   
181F   76                     HALT      
1820   00                     .CSTR      
1821                EXPECTM_0_2172S43:      
1821   E1                     POP   HL   
1822                          ;*Macro unroll:  test "3 a= 5 a |= a",7
1822   31 80 3C               LD   SP,STACK   
1825   CD 95 09               CALL   init   
1828   CD 44 3B               CALL   execStr   
182B   33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3 a= 5 a |= a"   
1839                          ;*Macro unroll:  expect "3 a= 5 a |= a",7
1839   E1                     POP   HL   
183A   E5                     PUSH   HL   
183B   11 07 00               LD   DE,7   
183E   B7                     OR   A   
183F   ED 52                  SBC   HL,DE   
1841   7D                     LD   A,L   
1842   B4                     OR   H   
1843   28 58                  JR   Z,expectM_0_2173S43   
1845   CD 8E 09               CALL   printStr   
1848   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a |= a"   
185C   CD 8E 09               CALL   printStr   
185F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
186E   21 07 00               LD   HL,7   
1871   CD DC 08               CALL   prtdec   
1874   CD 8E 09               CALL   printStr   
1877   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1884   E1                     POP   hl   
1885   E5                     PUSH   hl   
1886   CD DC 08               CALL   prtdec   
1889   E1                     POP   hl   
188A   CD 8E 09               CALL   printStr   
188D   20 28 23 00            .CSTR   " (#"   
1891   CD 24 09               CALL   prthex   
1894   CD 8E 09               CALL   printStr   
1897   29 0D 0A 00            .CSTR   ")\r\n"   
189B   76                     HALT      
189C   00                     .CSTR      
189D                EXPECTM_0_2173S43:      
189D   E1                     POP   HL   
189E                          ;*Macro unroll:  test "3 5 /x", 6
189E   31 80 3C               LD   SP,STACK   
18A1   CD 95 09               CALL   init   
18A4   CD 44 3B               CALL   execStr   
18A7   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
18AE                          ;*Macro unroll:  expect "3 5 /x",6
18AE   E1                     POP   HL   
18AF   E5                     PUSH   HL   
18B0   11 06 00               LD   DE,6   
18B3   B7                     OR   A   
18B4   ED 52                  SBC   HL,DE   
18B6   7D                     LD   A,L   
18B7   B4                     OR   H   
18B8   28 51                  JR   Z,expectM_0_2174S43   
18BA   CD 8E 09               CALL   printStr   
18BD   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
18CA   CD 8E 09               CALL   printStr   
18CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18DC   21 06 00               LD   HL,6   
18DF   CD DC 08               CALL   prtdec   
18E2   CD 8E 09               CALL   printStr   
18E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F2   E1                     POP   hl   
18F3   E5                     PUSH   hl   
18F4   CD DC 08               CALL   prtdec   
18F7   E1                     POP   hl   
18F8   CD 8E 09               CALL   printStr   
18FB   20 28 23 00            .CSTR   " (#"   
18FF   CD 24 09               CALL   prthex   
1902   CD 8E 09               CALL   printStr   
1905   29 0D 0A 00            .CSTR   ")\r\n"   
1909   76                     HALT      
190A   00                     .CSTR      
190B                EXPECTM_0_2174S43:      
190B   E1                     POP   HL   
190C                          ;*Macro unroll:  test "3 a= 5 a /x a= a",6
190C   31 80 3C               LD   SP,STACK   
190F   CD 95 09               CALL   init   
1912   CD 44 3B               CALL   execStr   
1915   33 20 61 3D 20 35 20 61 20 2F 78 20 61 3D 20 61 00 .CSTR   "3 a= 5 a /x a= a"   
1926                          ;*Macro unroll:  expect "3 a= 5 a /x a= a",6
1926   E1                     POP   HL   
1927   E5                     PUSH   HL   
1928   11 06 00               LD   DE,6   
192B   B7                     OR   A   
192C   ED 52                  SBC   HL,DE   
192E   7D                     LD   A,L   
192F   B4                     OR   H   
1930   28 5B                  JR   Z,expectM_0_2175S43   
1932   CD 8E 09               CALL   printStr   
1935   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a /x a= a"   
194C   CD 8E 09               CALL   printStr   
194F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195E   21 06 00               LD   HL,6   
1961   CD DC 08               CALL   prtdec   
1964   CD 8E 09               CALL   printStr   
1967   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1974   E1                     POP   hl   
1975   E5                     PUSH   hl   
1976   CD DC 08               CALL   prtdec   
1979   E1                     POP   hl   
197A   CD 8E 09               CALL   printStr   
197D   20 28 23 00            .CSTR   " (#"   
1981   CD 24 09               CALL   prthex   
1984   CD 8E 09               CALL   printStr   
1987   29 0D 0A 00            .CSTR   ")\r\n"   
198B   76                     HALT      
198C   00                     .CSTR      
198D                EXPECTM_0_2175S43:      
198D   E1                     POP   HL   
198E                          ;*Macro unroll:  test "2 3 *", 6
198E   31 80 3C               LD   SP,STACK   
1991   CD 95 09               CALL   init   
1994   CD 44 3B               CALL   execStr   
1997   32 20 33 20 2A 00      .CSTR   "2 3 *"   
199D                          ;*Macro unroll:  expect "2 3 *",6
199D   E1                     POP   HL   
199E   E5                     PUSH   HL   
199F   11 06 00               LD   DE,6   
19A2   B7                     OR   A   
19A3   ED 52                  SBC   HL,DE   
19A5   7D                     LD   A,L   
19A6   B4                     OR   H   
19A7   28 50                  JR   Z,expectM_0_2176S43   
19A9   CD 8E 09               CALL   printStr   
19AC   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
19B8   CD 8E 09               CALL   printStr   
19BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CA   21 06 00               LD   HL,6   
19CD   CD DC 08               CALL   prtdec   
19D0   CD 8E 09               CALL   printStr   
19D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19E0   E1                     POP   hl   
19E1   E5                     PUSH   hl   
19E2   CD DC 08               CALL   prtdec   
19E5   E1                     POP   hl   
19E6   CD 8E 09               CALL   printStr   
19E9   20 28 23 00            .CSTR   " (#"   
19ED   CD 24 09               CALL   prthex   
19F0   CD 8E 09               CALL   printStr   
19F3   29 0D 0A 00            .CSTR   ")\r\n"   
19F7   76                     HALT      
19F8   00                     .CSTR      
19F9                EXPECTM_0_2176S43:      
19F9   E1                     POP   HL   
19FA                          ;*Macro unroll:  test "3 x= 2 x *= x",6
19FA   31 80 3C               LD   SP,STACK   
19FD   CD 95 09               CALL   init   
1A00   CD 44 3B               CALL   execStr   
1A03   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1A11                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1A11   E1                     POP   HL   
1A12   E5                     PUSH   HL   
1A13   11 06 00               LD   DE,6   
1A16   B7                     OR   A   
1A17   ED 52                  SBC   HL,DE   
1A19   7D                     LD   A,L   
1A1A   B4                     OR   H   
1A1B   28 58                  JR   Z,expectM_0_2177S43   
1A1D   CD 8E 09               CALL   printStr   
1A20   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1A34   CD 8E 09               CALL   printStr   
1A37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A46   21 06 00               LD   HL,6   
1A49   CD DC 08               CALL   prtdec   
1A4C   CD 8E 09               CALL   printStr   
1A4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5C   E1                     POP   hl   
1A5D   E5                     PUSH   hl   
1A5E   CD DC 08               CALL   prtdec   
1A61   E1                     POP   hl   
1A62   CD 8E 09               CALL   printStr   
1A65   20 28 23 00            .CSTR   " (#"   
1A69   CD 24 09               CALL   prthex   
1A6C   CD 8E 09               CALL   printStr   
1A6F   29 0D 0A 00            .CSTR   ")\r\n"   
1A73   76                     HALT      
1A74   00                     .CSTR      
1A75                EXPECTM_0_2177S43:      
1A75   E1                     POP   HL   
1A76                          ;*Macro unroll:  test "1 2 3 + *", 5
1A76   31 80 3C               LD   SP,STACK   
1A79   CD 95 09               CALL   init   
1A7C   CD 44 3B               CALL   execStr   
1A7F   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1A89                          ;*Macro unroll:  expect "1 2 3 + *",5
1A89   E1                     POP   HL   
1A8A   E5                     PUSH   HL   
1A8B   11 05 00               LD   DE,5   
1A8E   B7                     OR   A   
1A8F   ED 52                  SBC   HL,DE   
1A91   7D                     LD   A,L   
1A92   B4                     OR   H   
1A93   28 54                  JR   Z,expectM_0_2178S43   
1A95   CD 8E 09               CALL   printStr   
1A98   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1AA8   CD 8E 09               CALL   printStr   
1AAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ABA   21 05 00               LD   HL,5   
1ABD   CD DC 08               CALL   prtdec   
1AC0   CD 8E 09               CALL   printStr   
1AC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AD0   E1                     POP   hl   
1AD1   E5                     PUSH   hl   
1AD2   CD DC 08               CALL   prtdec   
1AD5   E1                     POP   hl   
1AD6   CD 8E 09               CALL   printStr   
1AD9   20 28 23 00            .CSTR   " (#"   
1ADD   CD 24 09               CALL   prthex   
1AE0   CD 8E 09               CALL   printStr   
1AE3   29 0D 0A 00            .CSTR   ")\r\n"   
1AE7   76                     HALT      
1AE8   00                     .CSTR      
1AE9                EXPECTM_0_2178S43:      
1AE9   E1                     POP   HL   
1AEA                          ;*Macro unroll:  test "7 3 /", 2
1AEA   31 80 3C               LD   SP,STACK   
1AED   CD 95 09               CALL   init   
1AF0   CD 44 3B               CALL   execStr   
1AF3   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1AF9                          ;*Macro unroll:  expect "7 3 /",2
1AF9   E1                     POP   HL   
1AFA   E5                     PUSH   HL   
1AFB   11 02 00               LD   DE,2   
1AFE   B7                     OR   A   
1AFF   ED 52                  SBC   HL,DE   
1B01   7D                     LD   A,L   
1B02   B4                     OR   H   
1B03   28 50                  JR   Z,expectM_0_2179S43   
1B05   CD 8E 09               CALL   printStr   
1B08   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B14   CD 8E 09               CALL   printStr   
1B17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B26   21 02 00               LD   HL,2   
1B29   CD DC 08               CALL   prtdec   
1B2C   CD 8E 09               CALL   printStr   
1B2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B3C   E1                     POP   hl   
1B3D   E5                     PUSH   hl   
1B3E   CD DC 08               CALL   prtdec   
1B41   E1                     POP   hl   
1B42   CD 8E 09               CALL   printStr   
1B45   20 28 23 00            .CSTR   " (#"   
1B49   CD 24 09               CALL   prthex   
1B4C   CD 8E 09               CALL   printStr   
1B4F   29 0D 0A 00            .CSTR   ")\r\n"   
1B53   76                     HALT      
1B54   00                     .CSTR      
1B55                EXPECTM_0_2179S43:      
1B55   E1                     POP   HL   
1B56                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1B56   31 80 3C               LD   SP,STACK   
1B59   CD 95 09               CALL   init   
1B5C   CD 44 3B               CALL   execStr   
1B5F   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1B6D                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1B6D   E1                     POP   HL   
1B6E   E5                     PUSH   HL   
1B6F   11 02 00               LD   DE,2   
1B72   B7                     OR   A   
1B73   ED 52                  SBC   HL,DE   
1B75   7D                     LD   A,L   
1B76   B4                     OR   H   
1B77   28 58                  JR   Z,expectM_0_2180S43   
1B79   CD 8E 09               CALL   printStr   
1B7C   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1B90   CD 8E 09               CALL   printStr   
1B93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA2   21 02 00               LD   HL,2   
1BA5   CD DC 08               CALL   prtdec   
1BA8   CD 8E 09               CALL   printStr   
1BAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB8   E1                     POP   hl   
1BB9   E5                     PUSH   hl   
1BBA   CD DC 08               CALL   prtdec   
1BBD   E1                     POP   hl   
1BBE   CD 8E 09               CALL   printStr   
1BC1   20 28 23 00            .CSTR   " (#"   
1BC5   CD 24 09               CALL   prthex   
1BC8   CD 8E 09               CALL   printStr   
1BCB   29 0D 0A 00            .CSTR   ")\r\n"   
1BCF   76                     HALT      
1BD0   00                     .CSTR      
1BD1                EXPECTM_0_2180S43:      
1BD1   E1                     POP   HL   
1BD2                          ;*Macro unroll:  test "7 3 / _", 1
1BD2   31 80 3C               LD   SP,STACK   
1BD5   CD 95 09               CALL   init   
1BD8   CD 44 3B               CALL   execStr   
1BDB   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1BE3                          ;*Macro unroll:  expect "7 3 / _",1
1BE3   E1                     POP   HL   
1BE4   E5                     PUSH   HL   
1BE5   11 01 00               LD   DE,1   
1BE8   B7                     OR   A   
1BE9   ED 52                  SBC   HL,DE   
1BEB   7D                     LD   A,L   
1BEC   B4                     OR   H   
1BED   28 52                  JR   Z,expectM_0_2181S43   
1BEF   CD 8E 09               CALL   printStr   
1BF2   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1C00   CD 8E 09               CALL   printStr   
1C03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C12   21 01 00               LD   HL,1   
1C15   CD DC 08               CALL   prtdec   
1C18   CD 8E 09               CALL   printStr   
1C1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C28   E1                     POP   hl   
1C29   E5                     PUSH   hl   
1C2A   CD DC 08               CALL   prtdec   
1C2D   E1                     POP   hl   
1C2E   CD 8E 09               CALL   printStr   
1C31   20 28 23 00            .CSTR   " (#"   
1C35   CD 24 09               CALL   prthex   
1C38   CD 8E 09               CALL   printStr   
1C3B   29 0D 0A 00            .CSTR   ")\r\n"   
1C3F   76                     HALT      
1C40   00                     .CSTR      
1C41                EXPECTM_0_2181S43:      
1C41   E1                     POP   HL   
1C42                          ;*Macro unroll:  test "7 3 /", 2
1C42   31 80 3C               LD   SP,STACK   
1C45   CD 95 09               CALL   init   
1C48   CD 44 3B               CALL   execStr   
1C4B   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C51                          ;*Macro unroll:  expect "7 3 /",2
1C51   E1                     POP   HL   
1C52   E5                     PUSH   HL   
1C53   11 02 00               LD   DE,2   
1C56   B7                     OR   A   
1C57   ED 52                  SBC   HL,DE   
1C59   7D                     LD   A,L   
1C5A   B4                     OR   H   
1C5B   28 50                  JR   Z,expectM_0_2182S43   
1C5D   CD 8E 09               CALL   printStr   
1C60   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C6C   CD 8E 09               CALL   printStr   
1C6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7E   21 02 00               LD   HL,2   
1C81   CD DC 08               CALL   prtdec   
1C84   CD 8E 09               CALL   printStr   
1C87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C94   E1                     POP   hl   
1C95   E5                     PUSH   hl   
1C96   CD DC 08               CALL   prtdec   
1C99   E1                     POP   hl   
1C9A   CD 8E 09               CALL   printStr   
1C9D   20 28 23 00            .CSTR   " (#"   
1CA1   CD 24 09               CALL   prthex   
1CA4   CD 8E 09               CALL   printStr   
1CA7   29 0D 0A 00            .CSTR   ")\r\n"   
1CAB   76                     HALT      
1CAC   00                     .CSTR      
1CAD                EXPECTM_0_2182S43:      
1CAD   E1                     POP   HL   
1CAE                          ;*Macro unroll:  test "2 3 ==", FALSE
1CAE   31 80 3C               LD   SP,STACK   
1CB1   CD 95 09               CALL   init   
1CB4   CD 44 3B               CALL   execStr   
1CB7   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1CBE                          ;*Macro unroll:  expect "2 3 ==",FALSE
1CBE   E1                     POP   HL   
1CBF   E5                     PUSH   HL   
1CC0   11 00 00               LD   DE,FALSE   
1CC3   B7                     OR   A   
1CC4   ED 52                  SBC   HL,DE   
1CC6   7D                     LD   A,L   
1CC7   B4                     OR   H   
1CC8   28 51                  JR   Z,expectM_0_2183S43   
1CCA   CD 8E 09               CALL   printStr   
1CCD   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1CDA   CD 8E 09               CALL   printStr   
1CDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CEC   21 00 00               LD   HL,FALSE   
1CEF   CD DC 08               CALL   prtdec   
1CF2   CD 8E 09               CALL   printStr   
1CF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D02   E1                     POP   hl   
1D03   E5                     PUSH   hl   
1D04   CD DC 08               CALL   prtdec   
1D07   E1                     POP   hl   
1D08   CD 8E 09               CALL   printStr   
1D0B   20 28 23 00            .CSTR   " (#"   
1D0F   CD 24 09               CALL   prthex   
1D12   CD 8E 09               CALL   printStr   
1D15   29 0D 0A 00            .CSTR   ")\r\n"   
1D19   76                     HALT      
1D1A   00                     .CSTR      
1D1B                EXPECTM_0_2183S43:      
1D1B   E1                     POP   HL   
1D1C                          ;*Macro unroll:  test "3 3 ==", TRUE
1D1C   31 80 3C               LD   SP,STACK   
1D1F   CD 95 09               CALL   init   
1D22   CD 44 3B               CALL   execStr   
1D25   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1D2C                          ;*Macro unroll:  expect "3 3 ==",TRUE
1D2C   E1                     POP   HL   
1D2D   E5                     PUSH   HL   
1D2E   11 FF FF               LD   DE,TRUE   
1D31   B7                     OR   A   
1D32   ED 52                  SBC   HL,DE   
1D34   7D                     LD   A,L   
1D35   B4                     OR   H   
1D36   28 51                  JR   Z,expectM_0_2184S43   
1D38   CD 8E 09               CALL   printStr   
1D3B   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1D48   CD 8E 09               CALL   printStr   
1D4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5A   21 FF FF               LD   HL,TRUE   
1D5D   CD DC 08               CALL   prtdec   
1D60   CD 8E 09               CALL   printStr   
1D63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D70   E1                     POP   hl   
1D71   E5                     PUSH   hl   
1D72   CD DC 08               CALL   prtdec   
1D75   E1                     POP   hl   
1D76   CD 8E 09               CALL   printStr   
1D79   20 28 23 00            .CSTR   " (#"   
1D7D   CD 24 09               CALL   prthex   
1D80   CD 8E 09               CALL   printStr   
1D83   29 0D 0A 00            .CSTR   ")\r\n"   
1D87   76                     HALT      
1D88   00                     .CSTR      
1D89                EXPECTM_0_2184S43:      
1D89   E1                     POP   HL   
1D8A                          ;*Macro unroll:  test "1 2 <", TRUE
1D8A   31 80 3C               LD   SP,STACK   
1D8D   CD 95 09               CALL   init   
1D90   CD 44 3B               CALL   execStr   
1D93   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1D99                          ;*Macro unroll:  expect "1 2 <",TRUE
1D99   E1                     POP   HL   
1D9A   E5                     PUSH   HL   
1D9B   11 FF FF               LD   DE,TRUE   
1D9E   B7                     OR   A   
1D9F   ED 52                  SBC   HL,DE   
1DA1   7D                     LD   A,L   
1DA2   B4                     OR   H   
1DA3   28 50                  JR   Z,expectM_0_2185S43   
1DA5   CD 8E 09               CALL   printStr   
1DA8   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1DB4   CD 8E 09               CALL   printStr   
1DB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DC6   21 FF FF               LD   HL,TRUE   
1DC9   CD DC 08               CALL   prtdec   
1DCC   CD 8E 09               CALL   printStr   
1DCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DDC   E1                     POP   hl   
1DDD   E5                     PUSH   hl   
1DDE   CD DC 08               CALL   prtdec   
1DE1   E1                     POP   hl   
1DE2   CD 8E 09               CALL   printStr   
1DE5   20 28 23 00            .CSTR   " (#"   
1DE9   CD 24 09               CALL   prthex   
1DEC   CD 8E 09               CALL   printStr   
1DEF   29 0D 0A 00            .CSTR   ")\r\n"   
1DF3   76                     HALT      
1DF4   00                     .CSTR      
1DF5                EXPECTM_0_2185S43:      
1DF5   E1                     POP   HL   
1DF6                          ;*Macro unroll:  test "2 1 <", FALSE
1DF6   31 80 3C               LD   SP,STACK   
1DF9   CD 95 09               CALL   init   
1DFC   CD 44 3B               CALL   execStr   
1DFF   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E05                          ;*Macro unroll:  expect "2 1 <",FALSE
1E05   E1                     POP   HL   
1E06   E5                     PUSH   HL   
1E07   11 00 00               LD   DE,FALSE   
1E0A   B7                     OR   A   
1E0B   ED 52                  SBC   HL,DE   
1E0D   7D                     LD   A,L   
1E0E   B4                     OR   H   
1E0F   28 50                  JR   Z,expectM_0_2186S43   
1E11   CD 8E 09               CALL   printStr   
1E14   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1E20   CD 8E 09               CALL   printStr   
1E23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E32   21 00 00               LD   HL,FALSE   
1E35   CD DC 08               CALL   prtdec   
1E38   CD 8E 09               CALL   printStr   
1E3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E48   E1                     POP   hl   
1E49   E5                     PUSH   hl   
1E4A   CD DC 08               CALL   prtdec   
1E4D   E1                     POP   hl   
1E4E   CD 8E 09               CALL   printStr   
1E51   20 28 23 00            .CSTR   " (#"   
1E55   CD 24 09               CALL   prthex   
1E58   CD 8E 09               CALL   printStr   
1E5B   29 0D 0A 00            .CSTR   ")\r\n"   
1E5F   76                     HALT      
1E60   00                     .CSTR      
1E61                EXPECTM_0_2186S43:      
1E61   E1                     POP   HL   
1E62                          ;*Macro unroll:  test "2 3 <", TRUE
1E62   31 80 3C               LD   SP,STACK   
1E65   CD 95 09               CALL   init   
1E68   CD 44 3B               CALL   execStr   
1E6B   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E71                          ;*Macro unroll:  expect "2 3 <",TRUE
1E71   E1                     POP   HL   
1E72   E5                     PUSH   HL   
1E73   11 FF FF               LD   DE,TRUE   
1E76   B7                     OR   A   
1E77   ED 52                  SBC   HL,DE   
1E79   7D                     LD   A,L   
1E7A   B4                     OR   H   
1E7B   28 50                  JR   Z,expectM_0_2187S43   
1E7D   CD 8E 09               CALL   printStr   
1E80   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1E8C   CD 8E 09               CALL   printStr   
1E8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E9E   21 FF FF               LD   HL,TRUE   
1EA1   CD DC 08               CALL   prtdec   
1EA4   CD 8E 09               CALL   printStr   
1EA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EB4   E1                     POP   hl   
1EB5   E5                     PUSH   hl   
1EB6   CD DC 08               CALL   prtdec   
1EB9   E1                     POP   hl   
1EBA   CD 8E 09               CALL   printStr   
1EBD   20 28 23 00            .CSTR   " (#"   
1EC1   CD 24 09               CALL   prthex   
1EC4   CD 8E 09               CALL   printStr   
1EC7   29 0D 0A 00            .CSTR   ")\r\n"   
1ECB   76                     HALT      
1ECC   00                     .CSTR      
1ECD                EXPECTM_0_2187S43:      
1ECD   E1                     POP   HL   
1ECE                          ;*Macro unroll:  test "3 3 <", FALSE
1ECE   31 80 3C               LD   SP,STACK   
1ED1   CD 95 09               CALL   init   
1ED4   CD 44 3B               CALL   execStr   
1ED7   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1EDD                          ;*Macro unroll:  expect "3 3 <",FALSE
1EDD   E1                     POP   HL   
1EDE   E5                     PUSH   HL   
1EDF   11 00 00               LD   DE,FALSE   
1EE2   B7                     OR   A   
1EE3   ED 52                  SBC   HL,DE   
1EE5   7D                     LD   A,L   
1EE6   B4                     OR   H   
1EE7   28 50                  JR   Z,expectM_0_2188S43   
1EE9   CD 8E 09               CALL   printStr   
1EEC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1EF8   CD 8E 09               CALL   printStr   
1EFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F0A   21 00 00               LD   HL,FALSE   
1F0D   CD DC 08               CALL   prtdec   
1F10   CD 8E 09               CALL   printStr   
1F13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F20   E1                     POP   hl   
1F21   E5                     PUSH   hl   
1F22   CD DC 08               CALL   prtdec   
1F25   E1                     POP   hl   
1F26   CD 8E 09               CALL   printStr   
1F29   20 28 23 00            .CSTR   " (#"   
1F2D   CD 24 09               CALL   prthex   
1F30   CD 8E 09               CALL   printStr   
1F33   29 0D 0A 00            .CSTR   ")\r\n"   
1F37   76                     HALT      
1F38   00                     .CSTR      
1F39                EXPECTM_0_2188S43:      
1F39   E1                     POP   HL   
1F3A                          ;*Macro unroll:  test "1 2 >", FALSE
1F3A   31 80 3C               LD   SP,STACK   
1F3D   CD 95 09               CALL   init   
1F40   CD 44 3B               CALL   execStr   
1F43   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1F49                          ;*Macro unroll:  expect "1 2 >",FALSE
1F49   E1                     POP   HL   
1F4A   E5                     PUSH   HL   
1F4B   11 00 00               LD   DE,FALSE   
1F4E   B7                     OR   A   
1F4F   ED 52                  SBC   HL,DE   
1F51   7D                     LD   A,L   
1F52   B4                     OR   H   
1F53   28 50                  JR   Z,expectM_0_2189S43   
1F55   CD 8E 09               CALL   printStr   
1F58   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F64   CD 8E 09               CALL   printStr   
1F67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F76   21 00 00               LD   HL,FALSE   
1F79   CD DC 08               CALL   prtdec   
1F7C   CD 8E 09               CALL   printStr   
1F7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F8C   E1                     POP   hl   
1F8D   E5                     PUSH   hl   
1F8E   CD DC 08               CALL   prtdec   
1F91   E1                     POP   hl   
1F92   CD 8E 09               CALL   printStr   
1F95   20 28 23 00            .CSTR   " (#"   
1F99   CD 24 09               CALL   prthex   
1F9C   CD 8E 09               CALL   printStr   
1F9F   29 0D 0A 00            .CSTR   ")\r\n"   
1FA3   76                     HALT      
1FA4   00                     .CSTR      
1FA5                EXPECTM_0_2189S43:      
1FA5   E1                     POP   HL   
1FA6                          ;*Macro unroll:  test "2 1 >", TRUE
1FA6   31 80 3C               LD   SP,STACK   
1FA9   CD 95 09               CALL   init   
1FAC   CD 44 3B               CALL   execStr   
1FAF   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1FB5                          ;*Macro unroll:  expect "2 1 >",TRUE
1FB5   E1                     POP   HL   
1FB6   E5                     PUSH   HL   
1FB7   11 FF FF               LD   DE,TRUE   
1FBA   B7                     OR   A   
1FBB   ED 52                  SBC   HL,DE   
1FBD   7D                     LD   A,L   
1FBE   B4                     OR   H   
1FBF   28 50                  JR   Z,expectM_0_2190S43   
1FC1   CD 8E 09               CALL   printStr   
1FC4   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1FD0   CD 8E 09               CALL   printStr   
1FD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FE2   21 FF FF               LD   HL,TRUE   
1FE5   CD DC 08               CALL   prtdec   
1FE8   CD 8E 09               CALL   printStr   
1FEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF8   E1                     POP   hl   
1FF9   E5                     PUSH   hl   
1FFA   CD DC 08               CALL   prtdec   
1FFD   E1                     POP   hl   
1FFE   CD 8E 09               CALL   printStr   
2001   20 28 23 00            .CSTR   " (#"   
2005   CD 24 09               CALL   prthex   
2008   CD 8E 09               CALL   printStr   
200B   29 0D 0A 00            .CSTR   ")\r\n"   
200F   76                     HALT      
2010   00                     .CSTR      
2011                EXPECTM_0_2190S43:      
2011   E1                     POP   HL   
2012                          ;*Macro unroll:  test "3 3 >", FALSE
2012   31 80 3C               LD   SP,STACK   
2015   CD 95 09               CALL   init   
2018   CD 44 3B               CALL   execStr   
201B   33 20 33 20 3E 00      .CSTR   "3 3 >"   
2021                          ;*Macro unroll:  expect "3 3 >",FALSE
2021   E1                     POP   HL   
2022   E5                     PUSH   HL   
2023   11 00 00               LD   DE,FALSE   
2026   B7                     OR   A   
2027   ED 52                  SBC   HL,DE   
2029   7D                     LD   A,L   
202A   B4                     OR   H   
202B   28 50                  JR   Z,expectM_0_2191S43   
202D   CD 8E 09               CALL   printStr   
2030   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
203C   CD 8E 09               CALL   printStr   
203F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
204E   21 00 00               LD   HL,FALSE   
2051   CD DC 08               CALL   prtdec   
2054   CD 8E 09               CALL   printStr   
2057   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2064   E1                     POP   hl   
2065   E5                     PUSH   hl   
2066   CD DC 08               CALL   prtdec   
2069   E1                     POP   hl   
206A   CD 8E 09               CALL   printStr   
206D   20 28 23 00            .CSTR   " (#"   
2071   CD 24 09               CALL   prthex   
2074   CD 8E 09               CALL   printStr   
2077   29 0D 0A 00            .CSTR   ")\r\n"   
207B   76                     HALT      
207C   00                     .CSTR      
207D                EXPECTM_0_2191S43:      
207D   E1                     POP   HL   
207E                          ;*Macro unroll:  test "4 3 >", TRUE
207E   31 80 3C               LD   SP,STACK   
2081   CD 95 09               CALL   init   
2084   CD 44 3B               CALL   execStr   
2087   34 20 33 20 3E 00      .CSTR   "4 3 >"   
208D                          ;*Macro unroll:  expect "4 3 >",TRUE
208D   E1                     POP   HL   
208E   E5                     PUSH   HL   
208F   11 FF FF               LD   DE,TRUE   
2092   B7                     OR   A   
2093   ED 52                  SBC   HL,DE   
2095   7D                     LD   A,L   
2096   B4                     OR   H   
2097   28 50                  JR   Z,expectM_0_2192S43   
2099   CD 8E 09               CALL   printStr   
209C   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
20A8   CD 8E 09               CALL   printStr   
20AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20BA   21 FF FF               LD   HL,TRUE   
20BD   CD DC 08               CALL   prtdec   
20C0   CD 8E 09               CALL   printStr   
20C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20D0   E1                     POP   hl   
20D1   E5                     PUSH   hl   
20D2   CD DC 08               CALL   prtdec   
20D5   E1                     POP   hl   
20D6   CD 8E 09               CALL   printStr   
20D9   20 28 23 00            .CSTR   " (#"   
20DD   CD 24 09               CALL   prthex   
20E0   CD 8E 09               CALL   printStr   
20E3   29 0D 0A 00            .CSTR   ")\r\n"   
20E7   76                     HALT      
20E8   00                     .CSTR      
20E9                EXPECTM_0_2192S43:      
20E9   E1                     POP   HL   
20EA                          ;*Macro unroll:  test "2 2 <=", TRUE
20EA   31 80 3C               LD   SP,STACK   
20ED   CD 95 09               CALL   init   
20F0   CD 44 3B               CALL   execStr   
20F3   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
20FA                          ;*Macro unroll:  expect "2 2 <=",TRUE
20FA   E1                     POP   HL   
20FB   E5                     PUSH   HL   
20FC   11 FF FF               LD   DE,TRUE   
20FF   B7                     OR   A   
2100   ED 52                  SBC   HL,DE   
2102   7D                     LD   A,L   
2103   B4                     OR   H   
2104   28 51                  JR   Z,expectM_0_2193S43   
2106   CD 8E 09               CALL   printStr   
2109   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2116   CD 8E 09               CALL   printStr   
2119   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2128   21 FF FF               LD   HL,TRUE   
212B   CD DC 08               CALL   prtdec   
212E   CD 8E 09               CALL   printStr   
2131   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
213E   E1                     POP   hl   
213F   E5                     PUSH   hl   
2140   CD DC 08               CALL   prtdec   
2143   E1                     POP   hl   
2144   CD 8E 09               CALL   printStr   
2147   20 28 23 00            .CSTR   " (#"   
214B   CD 24 09               CALL   prthex   
214E   CD 8E 09               CALL   printStr   
2151   29 0D 0A 00            .CSTR   ")\r\n"   
2155   76                     HALT      
2156   00                     .CSTR      
2157                EXPECTM_0_2193S43:      
2157   E1                     POP   HL   
2158                          ;*Macro unroll:  test "2 2 >=", TRUE
2158   31 80 3C               LD   SP,STACK   
215B   CD 95 09               CALL   init   
215E   CD 44 3B               CALL   execStr   
2161   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2168                          ;*Macro unroll:  expect "2 2 >=",TRUE
2168   E1                     POP   HL   
2169   E5                     PUSH   HL   
216A   11 FF FF               LD   DE,TRUE   
216D   B7                     OR   A   
216E   ED 52                  SBC   HL,DE   
2170   7D                     LD   A,L   
2171   B4                     OR   H   
2172   28 51                  JR   Z,expectM_0_2194S43   
2174   CD 8E 09               CALL   printStr   
2177   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2184   CD 8E 09               CALL   printStr   
2187   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2196   21 FF FF               LD   HL,TRUE   
2199   CD DC 08               CALL   prtdec   
219C   CD 8E 09               CALL   printStr   
219F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21AC   E1                     POP   hl   
21AD   E5                     PUSH   hl   
21AE   CD DC 08               CALL   prtdec   
21B1   E1                     POP   hl   
21B2   CD 8E 09               CALL   printStr   
21B5   20 28 23 00            .CSTR   " (#"   
21B9   CD 24 09               CALL   prthex   
21BC   CD 8E 09               CALL   printStr   
21BF   29 0D 0A 00            .CSTR   ")\r\n"   
21C3   76                     HALT      
21C4   00                     .CSTR      
21C5                EXPECTM_0_2194S43:      
21C5   E1                     POP   HL   
21C6                          ;*Macro unroll:  test "3 1 <<", 6
21C6   31 80 3C               LD   SP,STACK   
21C9   CD 95 09               CALL   init   
21CC   CD 44 3B               CALL   execStr   
21CF   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
21D6                          ;*Macro unroll:  expect "3 1 <<",6
21D6   E1                     POP   HL   
21D7   E5                     PUSH   HL   
21D8   11 06 00               LD   DE,6   
21DB   B7                     OR   A   
21DC   ED 52                  SBC   HL,DE   
21DE   7D                     LD   A,L   
21DF   B4                     OR   H   
21E0   28 51                  JR   Z,expectM_0_2195S43   
21E2   CD 8E 09               CALL   printStr   
21E5   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
21F2   CD 8E 09               CALL   printStr   
21F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2204   21 06 00               LD   HL,6   
2207   CD DC 08               CALL   prtdec   
220A   CD 8E 09               CALL   printStr   
220D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
221A   E1                     POP   hl   
221B   E5                     PUSH   hl   
221C   CD DC 08               CALL   prtdec   
221F   E1                     POP   hl   
2220   CD 8E 09               CALL   printStr   
2223   20 28 23 00            .CSTR   " (#"   
2227   CD 24 09               CALL   prthex   
222A   CD 8E 09               CALL   printStr   
222D   29 0D 0A 00            .CSTR   ")\r\n"   
2231   76                     HALT      
2232   00                     .CSTR      
2233                EXPECTM_0_2195S43:      
2233   E1                     POP   HL   
2234                          ;*Macro unroll:  test "10 1 >>", 5
2234   31 80 3C               LD   SP,STACK   
2237   CD 95 09               CALL   init   
223A   CD 44 3B               CALL   execStr   
223D   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2245                          ;*Macro unroll:  expect "10 1 >>",5
2245   E1                     POP   HL   
2246   E5                     PUSH   HL   
2247   11 05 00               LD   DE,5   
224A   B7                     OR   A   
224B   ED 52                  SBC   HL,DE   
224D   7D                     LD   A,L   
224E   B4                     OR   H   
224F   28 52                  JR   Z,expectM_0_2196S43   
2251   CD 8E 09               CALL   printStr   
2254   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2262   CD 8E 09               CALL   printStr   
2265   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2274   21 05 00               LD   HL,5   
2277   CD DC 08               CALL   prtdec   
227A   CD 8E 09               CALL   printStr   
227D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
228A   E1                     POP   hl   
228B   E5                     PUSH   hl   
228C   CD DC 08               CALL   prtdec   
228F   E1                     POP   hl   
2290   CD 8E 09               CALL   printStr   
2293   20 28 23 00            .CSTR   " (#"   
2297   CD 24 09               CALL   prthex   
229A   CD 8E 09               CALL   printStr   
229D   29 0D 0A 00            .CSTR   ")\r\n"   
22A1   76                     HALT      
22A2   00                     .CSTR      
22A3                EXPECTM_0_2196S43:      
22A3   E1                     POP   HL   
22A4                          ;*Macro unroll:  test "1 x = x", 1
22A4   31 80 3C               LD   SP,STACK   
22A7   CD 95 09               CALL   init   
22AA   CD 44 3B               CALL   execStr   
22AD   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
22B5                          ;*Macro unroll:  expect "1 x = x",1
22B5   E1                     POP   HL   
22B6   E5                     PUSH   HL   
22B7   11 01 00               LD   DE,1   
22BA   B7                     OR   A   
22BB   ED 52                  SBC   HL,DE   
22BD   7D                     LD   A,L   
22BE   B4                     OR   H   
22BF   28 52                  JR   Z,expectM_0_2197S43   
22C1   CD 8E 09               CALL   printStr   
22C4   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
22D2   CD 8E 09               CALL   printStr   
22D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22E4   21 01 00               LD   HL,1   
22E7   CD DC 08               CALL   prtdec   
22EA   CD 8E 09               CALL   printStr   
22ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22FA   E1                     POP   hl   
22FB   E5                     PUSH   hl   
22FC   CD DC 08               CALL   prtdec   
22FF   E1                     POP   hl   
2300   CD 8E 09               CALL   printStr   
2303   20 28 23 00            .CSTR   " (#"   
2307   CD 24 09               CALL   prthex   
230A   CD 8E 09               CALL   printStr   
230D   29 0D 0A 00            .CSTR   ")\r\n"   
2311   76                     HALT      
2312   00                     .CSTR      
2313                EXPECTM_0_2197S43:      
2313   E1                     POP   HL   
2314                          ;*Macro unroll:  test "1{}^", 1
2314   31 80 3C               LD   SP,STACK   
2317   CD 95 09               CALL   init   
231A   CD 44 3B               CALL   execStr   
231D   31 7B 7D 5E 00         .CSTR   "1{}^"   
2322                          ;*Macro unroll:  expect "1{}^",1
2322   E1                     POP   HL   
2323   E5                     PUSH   HL   
2324   11 01 00               LD   DE,1   
2327   B7                     OR   A   
2328   ED 52                  SBC   HL,DE   
232A   7D                     LD   A,L   
232B   B4                     OR   H   
232C   28 4F                  JR   Z,expectM_0_2198S43   
232E   CD 8E 09               CALL   printStr   
2331   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
233C   CD 8E 09               CALL   printStr   
233F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234E   21 01 00               LD   HL,1   
2351   CD DC 08               CALL   prtdec   
2354   CD 8E 09               CALL   printStr   
2357   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2364   E1                     POP   hl   
2365   E5                     PUSH   hl   
2366   CD DC 08               CALL   prtdec   
2369   E1                     POP   hl   
236A   CD 8E 09               CALL   printStr   
236D   20 28 23 00            .CSTR   " (#"   
2371   CD 24 09               CALL   prthex   
2374   CD 8E 09               CALL   printStr   
2377   29 0D 0A 00            .CSTR   ")\r\n"   
237B   76                     HALT      
237C   00                     .CSTR      
237D                EXPECTM_0_2198S43:      
237D   E1                     POP   HL   
237E                          ;*Macro unroll:  test "{1}^", 1
237E   31 80 3C               LD   SP,STACK   
2381   CD 95 09               CALL   init   
2384   CD 44 3B               CALL   execStr   
2387   7B 31 7D 5E 00         .CSTR   "{1}^"   
238C                          ;*Macro unroll:  expect "{1}^",1
238C   E1                     POP   HL   
238D   E5                     PUSH   HL   
238E   11 01 00               LD   DE,1   
2391   B7                     OR   A   
2392   ED 52                  SBC   HL,DE   
2394   7D                     LD   A,L   
2395   B4                     OR   H   
2396   28 4F                  JR   Z,expectM_0_2199S43   
2398   CD 8E 09               CALL   printStr   
239B   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
23A6   CD 8E 09               CALL   printStr   
23A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B8   21 01 00               LD   HL,1   
23BB   CD DC 08               CALL   prtdec   
23BE   CD 8E 09               CALL   printStr   
23C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23CE   E1                     POP   hl   
23CF   E5                     PUSH   hl   
23D0   CD DC 08               CALL   prtdec   
23D3   E1                     POP   hl   
23D4   CD 8E 09               CALL   printStr   
23D7   20 28 23 00            .CSTR   " (#"   
23DB   CD 24 09               CALL   prthex   
23DE   CD 8E 09               CALL   printStr   
23E1   29 0D 0A 00            .CSTR   ")\r\n"   
23E5   76                     HALT      
23E6   00                     .CSTR      
23E7                EXPECTM_0_2199S43:      
23E7   E1                     POP   HL   
23E8                          ;*Macro unroll:  test "{{1}^}^", 1
23E8   31 80 3C               LD   SP,STACK   
23EB   CD 95 09               CALL   init   
23EE   CD 44 3B               CALL   execStr   
23F1   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
23F9                          ;*Macro unroll:  expect "{{1}^}^",1
23F9   E1                     POP   HL   
23FA   E5                     PUSH   HL   
23FB   11 01 00               LD   DE,1   
23FE   B7                     OR   A   
23FF   ED 52                  SBC   HL,DE   
2401   7D                     LD   A,L   
2402   B4                     OR   H   
2403   28 52                  JR   Z,expectM_0_2200S43   
2405   CD 8E 09               CALL   printStr   
2408   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2416   CD 8E 09               CALL   printStr   
2419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2428   21 01 00               LD   HL,1   
242B   CD DC 08               CALL   prtdec   
242E   CD 8E 09               CALL   printStr   
2431   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
243E   E1                     POP   hl   
243F   E5                     PUSH   hl   
2440   CD DC 08               CALL   prtdec   
2443   E1                     POP   hl   
2444   CD 8E 09               CALL   printStr   
2447   20 28 23 00            .CSTR   " (#"   
244B   CD 24 09               CALL   prthex   
244E   CD 8E 09               CALL   printStr   
2451   29 0D 0A 00            .CSTR   ")\r\n"   
2455   76                     HALT      
2456   00                     .CSTR      
2457                EXPECTM_0_2200S43:      
2457   E1                     POP   HL   
2458                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2458   31 80 3C               LD   SP,STACK   
245B   CD 95 09               CALL   init   
245E   CD 44 3B               CALL   execStr   
2461   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
246C                          ;*Macro unroll:  expect "{{{1}^}^}^",1
246C   E1                     POP   HL   
246D   E5                     PUSH   HL   
246E   11 01 00               LD   DE,1   
2471   B7                     OR   A   
2472   ED 52                  SBC   HL,DE   
2474   7D                     LD   A,L   
2475   B4                     OR   H   
2476   28 55                  JR   Z,expectM_0_2201S43   
2478   CD 8E 09               CALL   printStr   
247B   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
248C   CD 8E 09               CALL   printStr   
248F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
249E   21 01 00               LD   HL,1   
24A1   CD DC 08               CALL   prtdec   
24A4   CD 8E 09               CALL   printStr   
24A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24B4   E1                     POP   hl   
24B5   E5                     PUSH   hl   
24B6   CD DC 08               CALL   prtdec   
24B9   E1                     POP   hl   
24BA   CD 8E 09               CALL   printStr   
24BD   20 28 23 00            .CSTR   " (#"   
24C1   CD 24 09               CALL   prthex   
24C4   CD 8E 09               CALL   printStr   
24C7   29 0D 0A 00            .CSTR   ")\r\n"   
24CB   76                     HALT      
24CC   00                     .CSTR      
24CD                EXPECTM_0_2201S43:      
24CD   E1                     POP   HL   
24CE                          ;*Macro unroll:  test "5 /f {10} ?", 5
24CE   31 80 3C               LD   SP,STACK   
24D1   CD 95 09               CALL   init   
24D4   CD 44 3B               CALL   execStr   
24D7   35 20 2F 66 20 7B 31 30 7D 20 3F 00 .CSTR   "5 /f {10} ?"   
24E3                          ;*Macro unroll:  expect "5 /f {10} ?",5
24E3   E1                     POP   HL   
24E4   E5                     PUSH   HL   
24E5   11 05 00               LD   DE,5   
24E8   B7                     OR   A   
24E9   ED 52                  SBC   HL,DE   
24EB   7D                     LD   A,L   
24EC   B4                     OR   H   
24ED   28 56                  JR   Z,expectM_0_2202S43   
24EF   CD 8E 09               CALL   printStr   
24F2   43 6F 64 65 3A 20 35 20 2F 66 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f {10} ?"   
2504   CD 8E 09               CALL   printStr   
2507   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2516   21 05 00               LD   HL,5   
2519   CD DC 08               CALL   prtdec   
251C   CD 8E 09               CALL   printStr   
251F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
252C   E1                     POP   hl   
252D   E5                     PUSH   hl   
252E   CD DC 08               CALL   prtdec   
2531   E1                     POP   hl   
2532   CD 8E 09               CALL   printStr   
2535   20 28 23 00            .CSTR   " (#"   
2539   CD 24 09               CALL   prthex   
253C   CD 8E 09               CALL   printStr   
253F   29 0D 0A 00            .CSTR   ")\r\n"   
2543   76                     HALT      
2544   00                     .CSTR      
2545                EXPECTM_0_2202S43:      
2545   E1                     POP   HL   
2546                          ;*Macro unroll:  test "5 /t {10} ? +", 15
2546   31 80 3C               LD   SP,STACK   
2549   CD 95 09               CALL   init   
254C   CD 44 3B               CALL   execStr   
254F   35 20 2F 74 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t {10} ? +"   
255D                          ;*Macro unroll:  expect "5 /t {10} ? +",15
255D   E1                     POP   HL   
255E   E5                     PUSH   HL   
255F   11 0F 00               LD   DE,15   
2562   B7                     OR   A   
2563   ED 52                  SBC   HL,DE   
2565   7D                     LD   A,L   
2566   B4                     OR   H   
2567   28 58                  JR   Z,expectM_0_2203S43   
2569   CD 8E 09               CALL   printStr   
256C   43 6F 64 65 3A 20 35 20 2F 74 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t {10} ? +"   
2580   CD 8E 09               CALL   printStr   
2583   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2592   21 0F 00               LD   HL,15   
2595   CD DC 08               CALL   prtdec   
2598   CD 8E 09               CALL   printStr   
259B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A8   E1                     POP   hl   
25A9   E5                     PUSH   hl   
25AA   CD DC 08               CALL   prtdec   
25AD   E1                     POP   hl   
25AE   CD 8E 09               CALL   printStr   
25B1   20 28 23 00            .CSTR   " (#"   
25B5   CD 24 09               CALL   prthex   
25B8   CD 8E 09               CALL   printStr   
25BB   29 0D 0A 00            .CSTR   ")\r\n"   
25BF   76                     HALT      
25C0   00                     .CSTR      
25C1                EXPECTM_0_2203S43:      
25C1   E1                     POP   HL   
25C2                          ;*Macro unroll:  test "1 /f {10} {20} ?? +", 21
25C2   31 80 3C               LD   SP,STACK   
25C5   CD 95 09               CALL   init   
25C8   CD 44 3B               CALL   execStr   
25CB   31 20 2F 66 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f {10} {20} ?? +"   
25DF                          ;*Macro unroll:  expect "1 /f {10} {20} ?? +",21
25DF   E1                     POP   HL   
25E0   E5                     PUSH   HL   
25E1   11 15 00               LD   DE,21   
25E4   B7                     OR   A   
25E5   ED 52                  SBC   HL,DE   
25E7   7D                     LD   A,L   
25E8   B4                     OR   H   
25E9   28 5E                  JR   Z,expectM_0_2204S43   
25EB   CD 8E 09               CALL   printStr   
25EE   43 6F 64 65 3A 20 31 20 2F 66 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f {10} {20} ?? +"   
2608   CD 8E 09               CALL   printStr   
260B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
261A   21 15 00               LD   HL,21   
261D   CD DC 08               CALL   prtdec   
2620   CD 8E 09               CALL   printStr   
2623   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2630   E1                     POP   hl   
2631   E5                     PUSH   hl   
2632   CD DC 08               CALL   prtdec   
2635   E1                     POP   hl   
2636   CD 8E 09               CALL   printStr   
2639   20 28 23 00            .CSTR   " (#"   
263D   CD 24 09               CALL   prthex   
2640   CD 8E 09               CALL   printStr   
2643   29 0D 0A 00            .CSTR   ")\r\n"   
2647   76                     HALT      
2648   00                     .CSTR      
2649                EXPECTM_0_2204S43:      
2649   E1                     POP   HL   
264A                          ;*Macro unroll:  test "1 /t {10} {20} ?? +", 11
264A   31 80 3C               LD   SP,STACK   
264D   CD 95 09               CALL   init   
2650   CD 44 3B               CALL   execStr   
2653   31 20 2F 74 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t {10} {20} ?? +"   
2667                          ;*Macro unroll:  expect "1 /t {10} {20} ?? +",11
2667   E1                     POP   HL   
2668   E5                     PUSH   HL   
2669   11 0B 00               LD   DE,11   
266C   B7                     OR   A   
266D   ED 52                  SBC   HL,DE   
266F   7D                     LD   A,L   
2670   B4                     OR   H   
2671   28 5E                  JR   Z,expectM_0_2205S43   
2673   CD 8E 09               CALL   printStr   
2676   43 6F 64 65 3A 20 31 20 2F 74 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t {10} {20} ?? +"   
2690   CD 8E 09               CALL   printStr   
2693   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26A2   21 0B 00               LD   HL,11   
26A5   CD DC 08               CALL   prtdec   
26A8   CD 8E 09               CALL   printStr   
26AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B8   E1                     POP   hl   
26B9   E5                     PUSH   hl   
26BA   CD DC 08               CALL   prtdec   
26BD   E1                     POP   hl   
26BE   CD 8E 09               CALL   printStr   
26C1   20 28 23 00            .CSTR   " (#"   
26C5   CD 24 09               CALL   prthex   
26C8   CD 8E 09               CALL   printStr   
26CB   29 0D 0A 00            .CSTR   ")\r\n"   
26CF   76                     HALT      
26D0   00                     .CSTR      
26D1                EXPECTM_0_2205S43:      
26D1   E1                     POP   HL   
26D2                          ;*Macro unroll:  test "\\ -2%", $0000
26D2   31 80 3C               LD   SP,STACK   
26D5   CD 95 09               CALL   init   
26D8   CD 44 3B               CALL   execStr   
26DB   5C 20 2D 32 25 00      .CSTR   "\\ -2%"   
26E1                          ;*Macro unroll:  expect "\\ -2%",$0000
26E1   E1                     POP   HL   
26E2   E5                     PUSH   HL   
26E3   11 00 00               LD   DE,$0000   
26E6   B7                     OR   A   
26E7   ED 52                  SBC   HL,DE   
26E9   7D                     LD   A,L   
26EA   B4                     OR   H   
26EB   28 50                  JR   Z,expectM_0_2206S43   
26ED   CD 8E 09               CALL   printStr   
26F0   43 6F 64 65 3A 20 5C 20 2D 32 25 00 .CSTR   "Code: ","\\ -2%"   
26FC   CD 8E 09               CALL   printStr   
26FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
270E   21 00 00               LD   HL,$0000   
2711   CD DC 08               CALL   prtdec   
2714   CD 8E 09               CALL   printStr   
2717   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2724   E1                     POP   hl   
2725   E5                     PUSH   hl   
2726   CD DC 08               CALL   prtdec   
2729   E1                     POP   hl   
272A   CD 8E 09               CALL   printStr   
272D   20 28 23 00            .CSTR   " (#"   
2731   CD 24 09               CALL   prthex   
2734   CD 8E 09               CALL   printStr   
2737   29 0D 0A 00            .CSTR   ")\r\n"   
273B   76                     HALT      
273C   00                     .CSTR      
273D                EXPECTM_0_2206S43:      
273D   E1                     POP   HL   
273E                          ;*Macro unroll:  test "\\a -1%", $0001
273E   31 80 3C               LD   SP,STACK   
2741   CD 95 09               CALL   init   
2744   CD 44 3B               CALL   execStr   
2747   5C 61 20 2D 31 25 00   .CSTR   "\\a -1%"   
274E                          ;*Macro unroll:  expect "\\a -1%",$0001
274E   E1                     POP   HL   
274F   E5                     PUSH   HL   
2750   11 01 00               LD   DE,$0001   
2753   B7                     OR   A   
2754   ED 52                  SBC   HL,DE   
2756   7D                     LD   A,L   
2757   B4                     OR   H   
2758   28 51                  JR   Z,expectM_0_2207S43   
275A   CD 8E 09               CALL   printStr   
275D   43 6F 64 65 3A 20 5C 61 20 2D 31 25 00 .CSTR   "Code: ","\\a -1%"   
276A   CD 8E 09               CALL   printStr   
276D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
277C   21 01 00               LD   HL,$0001   
277F   CD DC 08               CALL   prtdec   
2782   CD 8E 09               CALL   printStr   
2785   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2792   E1                     POP   hl   
2793   E5                     PUSH   hl   
2794   CD DC 08               CALL   prtdec   
2797   E1                     POP   hl   
2798   CD 8E 09               CALL   printStr   
279B   20 28 23 00            .CSTR   " (#"   
279F   CD 24 09               CALL   prthex   
27A2   CD 8E 09               CALL   printStr   
27A5   29 0D 0A 00            .CSTR   ")\r\n"   
27A9   76                     HALT      
27AA   00                     .CSTR      
27AB                EXPECTM_0_2207S43:      
27AB   E1                     POP   HL   
27AC                          ;*Macro unroll:  test "\\a: -1%", $0001
27AC   31 80 3C               LD   SP,STACK   
27AF   CD 95 09               CALL   init   
27B2   CD 44 3B               CALL   execStr   
27B5   5C 61 3A 20 2D 31 25 00 .CSTR   "\\a: -1%"   
27BD                          ;*Macro unroll:  expect "\\a: -1%",$0001
27BD   E1                     POP   HL   
27BE   E5                     PUSH   HL   
27BF   11 01 00               LD   DE,$0001   
27C2   B7                     OR   A   
27C3   ED 52                  SBC   HL,DE   
27C5   7D                     LD   A,L   
27C6   B4                     OR   H   
27C7   28 52                  JR   Z,expectM_0_2208S43   
27C9   CD 8E 09               CALL   printStr   
27CC   43 6F 64 65 3A 20 5C 61 3A 20 2D 31 25 00 .CSTR   "Code: ","\\a: -1%"   
27DA   CD 8E 09               CALL   printStr   
27DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27EC   21 01 00               LD   HL,$0001   
27EF   CD DC 08               CALL   prtdec   
27F2   CD 8E 09               CALL   printStr   
27F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2802   E1                     POP   hl   
2803   E5                     PUSH   hl   
2804   CD DC 08               CALL   prtdec   
2807   E1                     POP   hl   
2808   CD 8E 09               CALL   printStr   
280B   20 28 23 00            .CSTR   " (#"   
280F   CD 24 09               CALL   prthex   
2812   CD 8E 09               CALL   printStr   
2815   29 0D 0A 00            .CSTR   ")\r\n"   
2819   76                     HALT      
281A   00                     .CSTR      
281B                EXPECTM_0_2208S43:      
281B   E1                     POP   HL   
281C                          ;*Macro unroll:  test "\\a:b -1%", $0102
281C   31 80 3C               LD   SP,STACK   
281F   CD 95 09               CALL   init   
2822   CD 44 3B               CALL   execStr   
2825   5C 61 3A 62 20 2D 31 25 00 .CSTR   "\\a:b -1%"   
282E                          ;*Macro unroll:  expect "\\a:b -1%",$0102
282E   E1                     POP   HL   
282F   E5                     PUSH   HL   
2830   11 02 01               LD   DE,$0102   
2833   B7                     OR   A   
2834   ED 52                  SBC   HL,DE   
2836   7D                     LD   A,L   
2837   B4                     OR   H   
2838   28 53                  JR   Z,expectM_0_2209S43   
283A   CD 8E 09               CALL   printStr   
283D   43 6F 64 65 3A 20 5C 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ","\\a:b -1%"   
284C   CD 8E 09               CALL   printStr   
284F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285E   21 02 01               LD   HL,$0102   
2861   CD DC 08               CALL   prtdec   
2864   CD 8E 09               CALL   printStr   
2867   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2874   E1                     POP   hl   
2875   E5                     PUSH   hl   
2876   CD DC 08               CALL   prtdec   
2879   E1                     POP   hl   
287A   CD 8E 09               CALL   printStr   
287D   20 28 23 00            .CSTR   " (#"   
2881   CD 24 09               CALL   prthex   
2884   CD 8E 09               CALL   printStr   
2887   29 0D 0A 00            .CSTR   ")\r\n"   
288B   76                     HALT      
288C   00                     .CSTR      
288D                EXPECTM_0_2209S43:      
288D   E1                     POP   HL   
288E                          ;*Macro unroll:  test "\\:b -1%", $0101
288E   31 80 3C               LD   SP,STACK   
2891   CD 95 09               CALL   init   
2894   CD 44 3B               CALL   execStr   
2897   5C 3A 62 20 2D 31 25 00 .CSTR   "\\:b -1%"   
289F                          ;*Macro unroll:  expect "\\:b -1%",$0101
289F   E1                     POP   HL   
28A0   E5                     PUSH   HL   
28A1   11 01 01               LD   DE,$0101   
28A4   B7                     OR   A   
28A5   ED 52                  SBC   HL,DE   
28A7   7D                     LD   A,L   
28A8   B4                     OR   H   
28A9   28 52                  JR   Z,expectM_0_2210S43   
28AB   CD 8E 09               CALL   printStr   
28AE   43 6F 64 65 3A 20 5C 3A 62 20 2D 31 25 00 .CSTR   "Code: ","\\:b -1%"   
28BC   CD 8E 09               CALL   printStr   
28BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28CE   21 01 01               LD   HL,$0101   
28D1   CD DC 08               CALL   prtdec   
28D4   CD 8E 09               CALL   printStr   
28D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28E4   E1                     POP   hl   
28E5   E5                     PUSH   hl   
28E6   CD DC 08               CALL   prtdec   
28E9   E1                     POP   hl   
28EA   CD 8E 09               CALL   printStr   
28ED   20 28 23 00            .CSTR   " (#"   
28F1   CD 24 09               CALL   prthex   
28F4   CD 8E 09               CALL   printStr   
28F7   29 0D 0A 00            .CSTR   ")\r\n"   
28FB   76                     HALT      
28FC   00                     .CSTR      
28FD                EXPECTM_0_2210S43:      
28FD   E1                     POP   HL   
28FE                          ;*Macro unroll:  test "\\ {2} ;^", 2
28FE   31 80 3C               LD   SP,STACK   
2901   CD 95 09               CALL   init   
2904   CD 44 3B               CALL   execStr   
2907   5C 20 7B 32 7D 20 3B 5E 00 .CSTR   "\\ {2} ;^"   
2910                          ;*Macro unroll:  expect "\\ {2} ;^",2
2910   E1                     POP   HL   
2911   E5                     PUSH   HL   
2912   11 02 00               LD   DE,2   
2915   B7                     OR   A   
2916   ED 52                  SBC   HL,DE   
2918   7D                     LD   A,L   
2919   B4                     OR   H   
291A   28 53                  JR   Z,expectM_0_2211S43   
291C   CD 8E 09               CALL   printStr   
291F   43 6F 64 65 3A 20 5C 20 7B 32 7D 20 3B 5E 00 .CSTR   "Code: ","\\ {2} ;^"   
292E   CD 8E 09               CALL   printStr   
2931   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2940   21 02 00               LD   HL,2   
2943   CD DC 08               CALL   prtdec   
2946   CD 8E 09               CALL   printStr   
2949   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2956   E1                     POP   hl   
2957   E5                     PUSH   hl   
2958   CD DC 08               CALL   prtdec   
295B   E1                     POP   hl   
295C   CD 8E 09               CALL   printStr   
295F   20 28 23 00            .CSTR   " (#"   
2963   CD 24 09               CALL   prthex   
2966   CD 8E 09               CALL   printStr   
2969   29 0D 0A 00            .CSTR   ")\r\n"   
296D   76                     HALT      
296E   00                     .CSTR      
296F                EXPECTM_0_2211S43:      
296F   E1                     POP   HL   
2970                          ;*Macro unroll:  test "\\a {2} ;^", 2
2970   31 80 3C               LD   SP,STACK   
2973   CD 95 09               CALL   init   
2976   CD 44 3B               CALL   execStr   
2979   5C 61 20 7B 32 7D 20 3B 5E 00 .CSTR   "\\a {2} ;^"   
2983                          ;*Macro unroll:  expect "\\a {2} ;^",2
2983   E1                     POP   HL   
2984   E5                     PUSH   HL   
2985   11 02 00               LD   DE,2   
2988   B7                     OR   A   
2989   ED 52                  SBC   HL,DE   
298B   7D                     LD   A,L   
298C   B4                     OR   H   
298D   28 54                  JR   Z,expectM_0_2212S43   
298F   CD 8E 09               CALL   printStr   
2992   43 6F 64 65 3A 20 5C 61 20 7B 32 7D 20 3B 5E 00 .CSTR   "Code: ","\\a {2} ;^"   
29A2   CD 8E 09               CALL   printStr   
29A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B4   21 02 00               LD   HL,2   
29B7   CD DC 08               CALL   prtdec   
29BA   CD 8E 09               CALL   printStr   
29BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29CA   E1                     POP   hl   
29CB   E5                     PUSH   hl   
29CC   CD DC 08               CALL   prtdec   
29CF   E1                     POP   hl   
29D0   CD 8E 09               CALL   printStr   
29D3   20 28 23 00            .CSTR   " (#"   
29D7   CD 24 09               CALL   prthex   
29DA   CD 8E 09               CALL   printStr   
29DD   29 0D 0A 00            .CSTR   ")\r\n"   
29E1   76                     HALT      
29E2   00                     .CSTR      
29E3                EXPECTM_0_2212S43:      
29E3   E1                     POP   HL   
29E4                          ;*Macro unroll:  test "5 \\a {$a} ;^", 5
29E4   31 80 3C               LD   SP,STACK   
29E7   CD 95 09               CALL   init   
29EA   CD 44 3B               CALL   execStr   
29ED   35 20 5C 61 20 7B 24 61 7D 20 3B 5E 00 .CSTR   "5 \\a {$a} ;^"   
29FA                          ;*Macro unroll:  expect "5 \\a {$a} ;^",5
29FA   E1                     POP   HL   
29FB   E5                     PUSH   HL   
29FC   11 05 00               LD   DE,5   
29FF   B7                     OR   A   
2A00   ED 52                  SBC   HL,DE   
2A02   7D                     LD   A,L   
2A03   B4                     OR   H   
2A04   28 57                  JR   Z,expectM_0_2213S43   
2A06   CD 8E 09               CALL   printStr   
2A09   43 6F 64 65 3A 20 35 20 5C 61 20 7B 24 61 7D 20 3B 5E 00 .CSTR   "Code: ","5 \\a {$a} ;^"   
2A1C   CD 8E 09               CALL   printStr   
2A1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A2E   21 05 00               LD   HL,5   
2A31   CD DC 08               CALL   prtdec   
2A34   CD 8E 09               CALL   printStr   
2A37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A44   E1                     POP   hl   
2A45   E5                     PUSH   hl   
2A46   CD DC 08               CALL   prtdec   
2A49   E1                     POP   hl   
2A4A   CD 8E 09               CALL   printStr   
2A4D   20 28 23 00            .CSTR   " (#"   
2A51   CD 24 09               CALL   prthex   
2A54   CD 8E 09               CALL   printStr   
2A57   29 0D 0A 00            .CSTR   ")\r\n"   
2A5B   76                     HALT      
2A5C   00                     .CSTR      
2A5D                EXPECTM_0_2213S43:      
2A5D   E1                     POP   HL   
2A5E                          ;*Macro unroll:  test "5 \\a:b {$a} ;^", 5
2A5E   31 80 3C               LD   SP,STACK   
2A61   CD 95 09               CALL   init   
2A64   CD 44 3B               CALL   execStr   
2A67   35 20 5C 61 3A 62 20 7B 24 61 7D 20 3B 5E 00 .CSTR   "5 \\a:b {$a} ;^"   
2A76                          ;*Macro unroll:  expect "5 \\a:b {$a} ;^",5
2A76   E1                     POP   HL   
2A77   E5                     PUSH   HL   
2A78   11 05 00               LD   DE,5   
2A7B   B7                     OR   A   
2A7C   ED 52                  SBC   HL,DE   
2A7E   7D                     LD   A,L   
2A7F   B4                     OR   H   
2A80   28 59                  JR   Z,expectM_0_2214S43   
2A82   CD 8E 09               CALL   printStr   
2A85   43 6F 64 65 3A 20 35 20 5C 61 3A 62 20 7B 24 61 7D 20 3B 5E 00 .CSTR   "Code: ","5 \\a:b {$a} ;^"   
2A9A   CD 8E 09               CALL   printStr   
2A9D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AAC   21 05 00               LD   HL,5   
2AAF   CD DC 08               CALL   prtdec   
2AB2   CD 8E 09               CALL   printStr   
2AB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AC2   E1                     POP   hl   
2AC3   E5                     PUSH   hl   
2AC4   CD DC 08               CALL   prtdec   
2AC7   E1                     POP   hl   
2AC8   CD 8E 09               CALL   printStr   
2ACB   20 28 23 00            .CSTR   " (#"   
2ACF   CD 24 09               CALL   prthex   
2AD2   CD 8E 09               CALL   printStr   
2AD5   29 0D 0A 00            .CSTR   ")\r\n"   
2AD9   76                     HALT      
2ADA   00                     .CSTR      
2ADB                EXPECTM_0_2214S43:      
2ADB   E1                     POP   HL   
2ADC                          ;*Macro unroll:  test "\\a {{2}^} ;^", 2
2ADC   31 80 3C               LD   SP,STACK   
2ADF   CD 95 09               CALL   init   
2AE2   CD 44 3B               CALL   execStr   
2AE5   5C 61 20 7B 7B 32 7D 5E 7D 20 3B 5E 00 .CSTR   "\\a {{2}^} ;^"   
2AF2                          ;*Macro unroll:  expect "\\a {{2}^} ;^",2
2AF2   E1                     POP   HL   
2AF3   E5                     PUSH   HL   
2AF4   11 02 00               LD   DE,2   
2AF7   B7                     OR   A   
2AF8   ED 52                  SBC   HL,DE   
2AFA   7D                     LD   A,L   
2AFB   B4                     OR   H   
2AFC   28 57                  JR   Z,expectM_0_2215S43   
2AFE   CD 8E 09               CALL   printStr   
2B01   43 6F 64 65 3A 20 5C 61 20 7B 7B 32 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","\\a {{2}^} ;^"   
2B14   CD 8E 09               CALL   printStr   
2B17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B26   21 02 00               LD   HL,2   
2B29   CD DC 08               CALL   prtdec   
2B2C   CD 8E 09               CALL   printStr   
2B2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B3C   E1                     POP   hl   
2B3D   E5                     PUSH   hl   
2B3E   CD DC 08               CALL   prtdec   
2B41   E1                     POP   hl   
2B42   CD 8E 09               CALL   printStr   
2B45   20 28 23 00            .CSTR   " (#"   
2B49   CD 24 09               CALL   prthex   
2B4C   CD 8E 09               CALL   printStr   
2B4F   29 0D 0A 00            .CSTR   ")\r\n"   
2B53   76                     HALT      
2B54   00                     .CSTR      
2B55                EXPECTM_0_2215S43:      
2B55   E1                     POP   HL   
2B56                          ;*Macro unroll:  test "1 5 \\a {{$a}^} ;^", 5
2B56   31 80 3C               LD   SP,STACK   
2B59   CD 95 09               CALL   init   
2B5C   CD 44 3B               CALL   execStr   
2B5F   31 20 35 20 5C 61 20 7B 7B 24 61 7D 5E 7D 20 3B 5E 00 .CSTR   "1 5 \\a {{$a}^} ;^"   
2B71                          ;*Macro unroll:  expect "1 5 \\a {{$a}^} ;^",5
2B71   E1                     POP   HL   
2B72   E5                     PUSH   HL   
2B73   11 05 00               LD   DE,5   
2B76   B7                     OR   A   
2B77   ED 52                  SBC   HL,DE   
2B79   7D                     LD   A,L   
2B7A   B4                     OR   H   
2B7B   28 5C                  JR   Z,expectM_0_2216S43   
2B7D   CD 8E 09               CALL   printStr   
2B80   43 6F 64 65 3A 20 31 20 35 20 5C 61 20 7B 7B 24 61 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","1 5 \\a {{$a}^} ;^"   
2B98   CD 8E 09               CALL   printStr   
2B9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BAA   21 05 00               LD   HL,5   
2BAD   CD DC 08               CALL   prtdec   
2BB0   CD 8E 09               CALL   printStr   
2BB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BC0   E1                     POP   hl   
2BC1   E5                     PUSH   hl   
2BC2   CD DC 08               CALL   prtdec   
2BC5   E1                     POP   hl   
2BC6   CD 8E 09               CALL   printStr   
2BC9   20 28 23 00            .CSTR   " (#"   
2BCD   CD 24 09               CALL   prthex   
2BD0   CD 8E 09               CALL   printStr   
2BD3   29 0D 0A 00            .CSTR   ")\r\n"   
2BD7   76                     HALT      
2BD8   00                     .CSTR      
2BD9                EXPECTM_0_2216S43:      
2BD9   E1                     POP   HL   
2BDA                          ;*Macro unroll:  test "1 5 \\ab {{$a}^} ;^", 1
2BDA   31 80 3C               LD   SP,STACK   
2BDD   CD 95 09               CALL   init   
2BE0   CD 44 3B               CALL   execStr   
2BE3   31 20 35 20 5C 61 62 20 7B 7B 24 61 7D 5E 7D 20 3B 5E 00 .CSTR   "1 5 \\ab {{$a}^} ;^"   
2BF6                          ;*Macro unroll:  expect "1 5 \\ab {{$a}^} ;^",1
2BF6   E1                     POP   HL   
2BF7   E5                     PUSH   HL   
2BF8   11 01 00               LD   DE,1   
2BFB   B7                     OR   A   
2BFC   ED 52                  SBC   HL,DE   
2BFE   7D                     LD   A,L   
2BFF   B4                     OR   H   
2C00   28 5D                  JR   Z,expectM_0_2217S43   
2C02   CD 8E 09               CALL   printStr   
2C05   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 20 7B 7B 24 61 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","1 5 \\ab {{$a}^} ;^"   
2C1E   CD 8E 09               CALL   printStr   
2C21   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C30   21 01 00               LD   HL,1   
2C33   CD DC 08               CALL   prtdec   
2C36   CD 8E 09               CALL   printStr   
2C39   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C46   E1                     POP   hl   
2C47   E5                     PUSH   hl   
2C48   CD DC 08               CALL   prtdec   
2C4B   E1                     POP   hl   
2C4C   CD 8E 09               CALL   printStr   
2C4F   20 28 23 00            .CSTR   " (#"   
2C53   CD 24 09               CALL   prthex   
2C56   CD 8E 09               CALL   printStr   
2C59   29 0D 0A 00            .CSTR   ")\r\n"   
2C5D   76                     HALT      
2C5E   00                     .CSTR      
2C5F                EXPECTM_0_2217S43:      
2C5F   E1                     POP   HL   
2C60                          ;*Macro unroll:  test "1 5 \\a {{$a 2 +}^} ;^", 7
2C60   31 80 3C               LD   SP,STACK   
2C63   CD 95 09               CALL   init   
2C66   CD 44 3B               CALL   execStr   
2C69   31 20 35 20 5C 61 20 7B 7B 24 61 20 32 20 2B 7D 5E 7D 20 3B 5E 00 .CSTR   "1 5 \\a {{$a 2 +}^} ;^"   
2C7F                          ;*Macro unroll:  expect "1 5 \\a {{$a 2 +}^} ;^",7
2C7F   E1                     POP   HL   
2C80   E5                     PUSH   HL   
2C81   11 07 00               LD   DE,7   
2C84   B7                     OR   A   
2C85   ED 52                  SBC   HL,DE   
2C87   7D                     LD   A,L   
2C88   B4                     OR   H   
2C89   28 60                  JR   Z,expectM_0_2218S43   
2C8B   CD 8E 09               CALL   printStr   
2C8E   43 6F 64 65 3A 20 31 20 35 20 5C 61 20 7B 7B 24 61 20 32 20 2B 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","1 5 \\a {{$a 2 +}^} ;^"   
2CAA   CD 8E 09               CALL   printStr   
2CAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CBC   21 07 00               LD   HL,7   
2CBF   CD DC 08               CALL   prtdec   
2CC2   CD 8E 09               CALL   printStr   
2CC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CD2   E1                     POP   hl   
2CD3   E5                     PUSH   hl   
2CD4   CD DC 08               CALL   prtdec   
2CD7   E1                     POP   hl   
2CD8   CD 8E 09               CALL   printStr   
2CDB   20 28 23 00            .CSTR   " (#"   
2CDF   CD 24 09               CALL   prthex   
2CE2   CD 8E 09               CALL   printStr   
2CE5   29 0D 0A 00            .CSTR   ")\r\n"   
2CE9   76                     HALT      
2CEA   00                     .CSTR      
2CEB                EXPECTM_0_2218S43:      
2CEB   E1                     POP   HL   
2CEC                          ;*Macro unroll:  test "1 5 \\ab {{$a $b +}^} ;^", 6
2CEC   31 80 3C               LD   SP,STACK   
2CEF   CD 95 09               CALL   init   
2CF2   CD 44 3B               CALL   execStr   
2CF5   31 20 35 20 5C 61 62 20 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 20 3B 5E 00 .CSTR   "1 5 \\ab {{$a $b +}^} ;^"   
2D0D                          ;*Macro unroll:  expect "1 5 \\ab {{$a $b +}^} ;^",6
2D0D   E1                     POP   HL   
2D0E   E5                     PUSH   HL   
2D0F   11 06 00               LD   DE,6   
2D12   B7                     OR   A   
2D13   ED 52                  SBC   HL,DE   
2D15   7D                     LD   A,L   
2D16   B4                     OR   H   
2D17   28 62                  JR   Z,expectM_0_2219S43   
2D19   CD 8E 09               CALL   printStr   
2D1C   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 20 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","1 5 \\ab {{$a $b +}^} ;^"   
2D3A   CD 8E 09               CALL   printStr   
2D3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D4C   21 06 00               LD   HL,6   
2D4F   CD DC 08               CALL   prtdec   
2D52   CD 8E 09               CALL   printStr   
2D55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D62   E1                     POP   hl   
2D63   E5                     PUSH   hl   
2D64   CD DC 08               CALL   prtdec   
2D67   E1                     POP   hl   
2D68   CD 8E 09               CALL   printStr   
2D6B   20 28 23 00            .CSTR   " (#"   
2D6F   CD 24 09               CALL   prthex   
2D72   CD 8E 09               CALL   printStr   
2D75   29 0D 0A 00            .CSTR   ")\r\n"   
2D79   76                     HALT      
2D7A   00                     .CSTR      
2D7B                EXPECTM_0_2219S43:      
2D7B   E1                     POP   HL   
2D7C                          ;*Macro unroll:  test "\\a {2} ; x= 1 x^", 2
2D7C   31 80 3C               LD   SP,STACK   
2D7F   CD 95 09               CALL   init   
2D82   CD 44 3B               CALL   execStr   
2D85   5C 61 20 7B 32 7D 20 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "\\a {2} ; x= 1 x^"   
2D96                          ;*Macro unroll:  expect "\\a {2} ; x= 1 x^",2
2D96   E1                     POP   HL   
2D97   E5                     PUSH   HL   
2D98   11 02 00               LD   DE,2   
2D9B   B7                     OR   A   
2D9C   ED 52                  SBC   HL,DE   
2D9E   7D                     LD   A,L   
2D9F   B4                     OR   H   
2DA0   28 5B                  JR   Z,expectM_0_2220S43   
2DA2   CD 8E 09               CALL   printStr   
2DA5   43 6F 64 65 3A 20 5C 61 20 7B 32 7D 20 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a {2} ; x= 1 x^"   
2DBC   CD 8E 09               CALL   printStr   
2DBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DCE   21 02 00               LD   HL,2   
2DD1   CD DC 08               CALL   prtdec   
2DD4   CD 8E 09               CALL   printStr   
2DD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DE4   E1                     POP   hl   
2DE5   E5                     PUSH   hl   
2DE6   CD DC 08               CALL   prtdec   
2DE9   E1                     POP   hl   
2DEA   CD 8E 09               CALL   printStr   
2DED   20 28 23 00            .CSTR   " (#"   
2DF1   CD 24 09               CALL   prthex   
2DF4   CD 8E 09               CALL   printStr   
2DF7   29 0D 0A 00            .CSTR   ")\r\n"   
2DFB   76                     HALT      
2DFC   00                     .CSTR      
2DFD                EXPECTM_0_2220S43:      
2DFD   E1                     POP   HL   
2DFE                          ;*Macro unroll:  test "\\a {$a} ; x= 0 1 x^", 1
2DFE   31 80 3C               LD   SP,STACK   
2E01   CD 95 09               CALL   init   
2E04   CD 44 3B               CALL   execStr   
2E07   5C 61 20 7B 24 61 7D 20 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "\\a {$a} ; x= 0 1 x^"   
2E1B                          ;*Macro unroll:  expect "\\a {$a} ; x= 0 1 x^",1
2E1B   E1                     POP   HL   
2E1C   E5                     PUSH   HL   
2E1D   11 01 00               LD   DE,1   
2E20   B7                     OR   A   
2E21   ED 52                  SBC   HL,DE   
2E23   7D                     LD   A,L   
2E24   B4                     OR   H   
2E25   28 5E                  JR   Z,expectM_0_2221S43   
2E27   CD 8E 09               CALL   printStr   
2E2A   43 6F 64 65 3A 20 5C 61 20 7B 24 61 7D 20 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a {$a} ; x= 0 1 x^"   
2E44   CD 8E 09               CALL   printStr   
2E47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E56   21 01 00               LD   HL,1   
2E59   CD DC 08               CALL   prtdec   
2E5C   CD 8E 09               CALL   printStr   
2E5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E6C   E1                     POP   hl   
2E6D   E5                     PUSH   hl   
2E6E   CD DC 08               CALL   prtdec   
2E71   E1                     POP   hl   
2E72   CD 8E 09               CALL   printStr   
2E75   20 28 23 00            .CSTR   " (#"   
2E79   CD 24 09               CALL   prthex   
2E7C   CD 8E 09               CALL   printStr   
2E7F   29 0D 0A 00            .CSTR   ")\r\n"   
2E83   76                     HALT      
2E84   00                     .CSTR      
2E85                EXPECTM_0_2221S43:      
2E85   E1                     POP   HL   
2E86                          ;*Macro unroll:  test "\\ab {$b} ; x= 1 2 x^", 2
2E86   31 80 3C               LD   SP,STACK   
2E89   CD 95 09               CALL   init   
2E8C   CD 44 3B               CALL   execStr   
2E8F   5C 61 62 20 7B 24 62 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "\\ab {$b} ; x= 1 2 x^"   
2EA4                          ;*Macro unroll:  expect "\\ab {$b} ; x= 1 2 x^",2
2EA4   E1                     POP   HL   
2EA5   E5                     PUSH   HL   
2EA6   11 02 00               LD   DE,2   
2EA9   B7                     OR   A   
2EAA   ED 52                  SBC   HL,DE   
2EAC   7D                     LD   A,L   
2EAD   B4                     OR   H   
2EAE   28 5F                  JR   Z,expectM_0_2222S43   
2EB0   CD 8E 09               CALL   printStr   
2EB3   43 6F 64 65 3A 20 5C 61 62 20 7B 24 62 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab {$b} ; x= 1 2 x^"   
2ECE   CD 8E 09               CALL   printStr   
2ED1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EE0   21 02 00               LD   HL,2   
2EE3   CD DC 08               CALL   prtdec   
2EE6   CD 8E 09               CALL   printStr   
2EE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EF6   E1                     POP   hl   
2EF7   E5                     PUSH   hl   
2EF8   CD DC 08               CALL   prtdec   
2EFB   E1                     POP   hl   
2EFC   CD 8E 09               CALL   printStr   
2EFF   20 28 23 00            .CSTR   " (#"   
2F03   CD 24 09               CALL   prthex   
2F06   CD 8E 09               CALL   printStr   
2F09   29 0D 0A 00            .CSTR   ")\r\n"   
2F0D   76                     HALT      
2F0E   00                     .CSTR      
2F0F                EXPECTM_0_2222S43:      
2F0F   E1                     POP   HL   
2F10                          ;*Macro unroll:  test "\\a:b {$a} ; x= 1 2 x^", 2
2F10   31 80 3C               LD   SP,STACK   
2F13   CD 95 09               CALL   init   
2F16   CD 44 3B               CALL   execStr   
2F19   5C 61 3A 62 20 7B 24 61 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "\\a:b {$a} ; x= 1 2 x^"   
2F2F                          ;*Macro unroll:  expect "\\a:b {$a} ; x= 1 2 x^",2
2F2F   E1                     POP   HL   
2F30   E5                     PUSH   HL   
2F31   11 02 00               LD   DE,2   
2F34   B7                     OR   A   
2F35   ED 52                  SBC   HL,DE   
2F37   7D                     LD   A,L   
2F38   B4                     OR   H   
2F39   28 60                  JR   Z,expectM_0_2223S43   
2F3B   CD 8E 09               CALL   printStr   
2F3E   43 6F 64 65 3A 20 5C 61 3A 62 20 7B 24 61 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b {$a} ; x= 1 2 x^"   
2F5A   CD 8E 09               CALL   printStr   
2F5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F6C   21 02 00               LD   HL,2   
2F6F   CD DC 08               CALL   prtdec   
2F72   CD 8E 09               CALL   printStr   
2F75   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F82   E1                     POP   hl   
2F83   E5                     PUSH   hl   
2F84   CD DC 08               CALL   prtdec   
2F87   E1                     POP   hl   
2F88   CD 8E 09               CALL   printStr   
2F8B   20 28 23 00            .CSTR   " (#"   
2F8F   CD 24 09               CALL   prthex   
2F92   CD 8E 09               CALL   printStr   
2F95   29 0D 0A 00            .CSTR   ")\r\n"   
2F99   76                     HALT      
2F9A   00                     .CSTR      
2F9B                EXPECTM_0_2223S43:      
2F9B   E1                     POP   HL   
2F9C                          ;*Macro unroll:  test "\\ab {$b} ; x= 1 2 x^", 2
2F9C   31 80 3C               LD   SP,STACK   
2F9F   CD 95 09               CALL   init   
2FA2   CD 44 3B               CALL   execStr   
2FA5   5C 61 62 20 7B 24 62 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "\\ab {$b} ; x= 1 2 x^"   
2FBA                          ;*Macro unroll:  expect "\\ab {$b} ; x= 1 2 x^",2
2FBA   E1                     POP   HL   
2FBB   E5                     PUSH   HL   
2FBC   11 02 00               LD   DE,2   
2FBF   B7                     OR   A   
2FC0   ED 52                  SBC   HL,DE   
2FC2   7D                     LD   A,L   
2FC3   B4                     OR   H   
2FC4   28 5F                  JR   Z,expectM_0_2224S43   
2FC6   CD 8E 09               CALL   printStr   
2FC9   43 6F 64 65 3A 20 5C 61 62 20 7B 24 62 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab {$b} ; x= 1 2 x^"   
2FE4   CD 8E 09               CALL   printStr   
2FE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FF6   21 02 00               LD   HL,2   
2FF9   CD DC 08               CALL   prtdec   
2FFC   CD 8E 09               CALL   printStr   
2FFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
300C   E1                     POP   hl   
300D   E5                     PUSH   hl   
300E   CD DC 08               CALL   prtdec   
3011   E1                     POP   hl   
3012   CD 8E 09               CALL   printStr   
3015   20 28 23 00            .CSTR   " (#"   
3019   CD 24 09               CALL   prthex   
301C   CD 8E 09               CALL   printStr   
301F   29 0D 0A 00            .CSTR   ")\r\n"   
3023   76                     HALT      
3024   00                     .CSTR      
3025                EXPECTM_0_2224S43:      
3025   E1                     POP   HL   
3026                          ;*Macro unroll:  test "\\ab {$b $a} ; x= 10 15 x^ -", 5
3026   31 80 3C               LD   SP,STACK   
3029   CD 95 09               CALL   init   
302C   CD 44 3B               CALL   execStr   
302F   5C 61 62 20 7B 24 62 20 24 61 7D 20 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "\\ab {$b $a} ; x= 10 15 x^ -"   
304B                          ;*Macro unroll:  expect "\\ab {$b $a} ; x= 10 15 x^ -",5
304B   E1                     POP   HL   
304C   E5                     PUSH   HL   
304D   11 05 00               LD   DE,5   
3050   B7                     OR   A   
3051   ED 52                  SBC   HL,DE   
3053   7D                     LD   A,L   
3054   B4                     OR   H   
3055   28 66                  JR   Z,expectM_0_2225S43   
3057   CD 8E 09               CALL   printStr   
305A   43 6F 64 65 3A 20 5C 61 62 20 7B 24 62 20 24 61 7D 20 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab {$b $a} ; x= 10 15 x^ -"   
307C   CD 8E 09               CALL   printStr   
307F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
308E   21 05 00               LD   HL,5   
3091   CD DC 08               CALL   prtdec   
3094   CD 8E 09               CALL   printStr   
3097   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30A4   E1                     POP   hl   
30A5   E5                     PUSH   hl   
30A6   CD DC 08               CALL   prtdec   
30A9   E1                     POP   hl   
30AA   CD 8E 09               CALL   printStr   
30AD   20 28 23 00            .CSTR   " (#"   
30B1   CD 24 09               CALL   prthex   
30B4   CD 8E 09               CALL   printStr   
30B7   29 0D 0A 00            .CSTR   ")\r\n"   
30BB   76                     HALT      
30BC   00                     .CSTR      
30BD                EXPECTM_0_2225S43:      
30BD   E1                     POP   HL   
30BE                          ;*Macro unroll:  test "\\a:b {2} ; x= 1 x^", 2
30BE   31 80 3C               LD   SP,STACK   
30C1   CD 95 09               CALL   init   
30C4   CD 44 3B               CALL   execStr   
30C7   5C 61 3A 62 20 7B 32 7D 20 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "\\a:b {2} ; x= 1 x^"   
30DA                          ;*Macro unroll:  expect "\\a:b {2} ; x= 1 x^",2
30DA   E1                     POP   HL   
30DB   E5                     PUSH   HL   
30DC   11 02 00               LD   DE,2   
30DF   B7                     OR   A   
30E0   ED 52                  SBC   HL,DE   
30E2   7D                     LD   A,L   
30E3   B4                     OR   H   
30E4   28 5D                  JR   Z,expectM_0_2226S43   
30E6   CD 8E 09               CALL   printStr   
30E9   43 6F 64 65 3A 20 5C 61 3A 62 20 7B 32 7D 20 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b {2} ; x= 1 x^"   
3102   CD 8E 09               CALL   printStr   
3105   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3114   21 02 00               LD   HL,2   
3117   CD DC 08               CALL   prtdec   
311A   CD 8E 09               CALL   printStr   
311D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
312A   E1                     POP   hl   
312B   E5                     PUSH   hl   
312C   CD DC 08               CALL   prtdec   
312F   E1                     POP   hl   
3130   CD 8E 09               CALL   printStr   
3133   20 28 23 00            .CSTR   " (#"   
3137   CD 24 09               CALL   prthex   
313A   CD 8E 09               CALL   printStr   
313D   29 0D 0A 00            .CSTR   ")\r\n"   
3141   76                     HALT      
3142   00                     .CSTR      
3143                EXPECTM_0_2226S43:      
3143   E1                     POP   HL   
3144                          ;*Macro unroll:  test "\\:b {100 $b= $b} ; x= x^", 100
3144   31 80 3C               LD   SP,STACK   
3147   CD 95 09               CALL   init   
314A   CD 44 3B               CALL   execStr   
314D   5C 3A 62 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 78 5E 00 .CSTR   "\\:b {100 $b= $b} ; x= x^"   
3166                          ;*Macro unroll:  expect "\\:b {100 $b= $b} ; x= x^",100
3166   E1                     POP   HL   
3167   E5                     PUSH   HL   
3168   11 64 00               LD   DE,100   
316B   B7                     OR   A   
316C   ED 52                  SBC   HL,DE   
316E   7D                     LD   A,L   
316F   B4                     OR   H   
3170   28 63                  JR   Z,expectM_0_2227S43   
3172   CD 8E 09               CALL   printStr   
3175   43 6F 64 65 3A 20 5C 3A 62 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b {100 $b= $b} ; x= x^"   
3194   CD 8E 09               CALL   printStr   
3197   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31A6   21 64 00               LD   HL,100   
31A9   CD DC 08               CALL   prtdec   
31AC   CD 8E 09               CALL   printStr   
31AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31BC   E1                     POP   hl   
31BD   E5                     PUSH   hl   
31BE   CD DC 08               CALL   prtdec   
31C1   E1                     POP   hl   
31C2   CD 8E 09               CALL   printStr   
31C5   20 28 23 00            .CSTR   " (#"   
31C9   CD 24 09               CALL   prthex   
31CC   CD 8E 09               CALL   printStr   
31CF   29 0D 0A 00            .CSTR   ")\r\n"   
31D3   76                     HALT      
31D4   00                     .CSTR      
31D5                EXPECTM_0_2227S43:      
31D5   E1                     POP   HL   
31D6                          ;*Macro unroll:  test "\\a:b {1 $b= $b} ; x= 2 x^", 1
31D6   31 80 3C               LD   SP,STACK   
31D9   CD 95 09               CALL   init   
31DC   CD 44 3B               CALL   execStr   
31DF   5C 61 3A 62 20 7B 31 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "\\a:b {1 $b= $b} ; x= 2 x^"   
31F9                          ;*Macro unroll:  expect "\\a:b {1 $b= $b} ; x= 2 x^",1
31F9   E1                     POP   HL   
31FA   E5                     PUSH   HL   
31FB   11 01 00               LD   DE,1   
31FE   B7                     OR   A   
31FF   ED 52                  SBC   HL,DE   
3201   7D                     LD   A,L   
3202   B4                     OR   H   
3203   28 64                  JR   Z,expectM_0_2228S43   
3205   CD 8E 09               CALL   printStr   
3208   43 6F 64 65 3A 20 5C 61 3A 62 20 7B 31 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b {1 $b= $b} ; x= 2 x^"   
3228   CD 8E 09               CALL   printStr   
322B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
323A   21 01 00               LD   HL,1   
323D   CD DC 08               CALL   prtdec   
3240   CD 8E 09               CALL   printStr   
3243   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3250   E1                     POP   hl   
3251   E5                     PUSH   hl   
3252   CD DC 08               CALL   prtdec   
3255   E1                     POP   hl   
3256   CD 8E 09               CALL   printStr   
3259   20 28 23 00            .CSTR   " (#"   
325D   CD 24 09               CALL   prthex   
3260   CD 8E 09               CALL   printStr   
3263   29 0D 0A 00            .CSTR   ")\r\n"   
3267   76                     HALT      
3268   00                     .CSTR      
3269                EXPECTM_0_2228S43:      
3269   E1                     POP   HL   
326A                          ;*Macro unroll:  test "\\a:b {$a $b= $b} ; x= 2 x^", 2
326A   31 80 3C               LD   SP,STACK   
326D   CD 95 09               CALL   init   
3270   CD 44 3B               CALL   execStr   
3273   5C 61 3A 62 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "\\a:b {$a $b= $b} ; x= 2 x^"   
328E                          ;*Macro unroll:  expect "\\a:b {$a $b= $b} ; x= 2 x^",2
328E   E1                     POP   HL   
328F   E5                     PUSH   HL   
3290   11 02 00               LD   DE,2   
3293   B7                     OR   A   
3294   ED 52                  SBC   HL,DE   
3296   7D                     LD   A,L   
3297   B4                     OR   H   
3298   28 65                  JR   Z,expectM_0_2229S43   
329A   CD 8E 09               CALL   printStr   
329D   43 6F 64 65 3A 20 5C 61 3A 62 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b {$a $b= $b} ; x= 2 x^"   
32BE   CD 8E 09               CALL   printStr   
32C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32D0   21 02 00               LD   HL,2   
32D3   CD DC 08               CALL   prtdec   
32D6   CD 8E 09               CALL   printStr   
32D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32E6   E1                     POP   hl   
32E7   E5                     PUSH   hl   
32E8   CD DC 08               CALL   prtdec   
32EB   E1                     POP   hl   
32EC   CD 8E 09               CALL   printStr   
32EF   20 28 23 00            .CSTR   " (#"   
32F3   CD 24 09               CALL   prthex   
32F6   CD 8E 09               CALL   printStr   
32F9   29 0D 0A 00            .CSTR   ")\r\n"   
32FD   76                     HALT      
32FE   00                     .CSTR      
32FF                EXPECTM_0_2229S43:      
32FF   E1                     POP   HL   
3300                          ;*Macro unroll:  test "1 10 20 \\ab {/t {$a} {$b} ??} ;^ +", 11
3300   31 80 3C               LD   SP,STACK   
3303   CD 95 09               CALL   init   
3306   CD 44 3B               CALL   execStr   
3309   31 20 31 30 20 32 30 20 5C 61 62 20 7B 2F 74 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 3B 5E 20 2B 00 .CSTR   "1 10 20 \\ab {/t {$a} {$b} ??} ;^ +"   
332C                          ;*Macro unroll:  expect "1 10 20 \\ab {/t {$a} {$b} ??} ;^ +",11
332C   E1                     POP   HL   
332D   E5                     PUSH   HL   
332E   11 0B 00               LD   DE,11   
3331   B7                     OR   A   
3332   ED 52                  SBC   HL,DE   
3334   7D                     LD   A,L   
3335   B4                     OR   H   
3336   28 6D                  JR   Z,expectM_0_2230S43   
3338   CD 8E 09               CALL   printStr   
333B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 20 7B 2F 74 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab {/t {$a} {$b} ??} ;^ +"   
3364   CD 8E 09               CALL   printStr   
3367   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3376   21 0B 00               LD   HL,11   
3379   CD DC 08               CALL   prtdec   
337C   CD 8E 09               CALL   printStr   
337F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
338C   E1                     POP   hl   
338D   E5                     PUSH   hl   
338E   CD DC 08               CALL   prtdec   
3391   E1                     POP   hl   
3392   CD 8E 09               CALL   printStr   
3395   20 28 23 00            .CSTR   " (#"   
3399   CD 24 09               CALL   prthex   
339C   CD 8E 09               CALL   printStr   
339F   29 0D 0A 00            .CSTR   ")\r\n"   
33A3   76                     HALT      
33A4   00                     .CSTR      
33A5                EXPECTM_0_2230S43:      
33A5   E1                     POP   HL   
33A6                          ;*Macro unroll:  test "1 10 20 \\ab {/f {$a} {$b} ??} ;^ +", 21
33A6   31 80 3C               LD   SP,STACK   
33A9   CD 95 09               CALL   init   
33AC   CD 44 3B               CALL   execStr   
33AF   31 20 31 30 20 32 30 20 5C 61 62 20 7B 2F 66 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 3B 5E 20 2B 00 .CSTR   "1 10 20 \\ab {/f {$a} {$b} ??} ;^ +"   
33D2                          ;*Macro unroll:  expect "1 10 20 \\ab {/f {$a} {$b} ??} ;^ +",21
33D2   E1                     POP   HL   
33D3   E5                     PUSH   HL   
33D4   11 15 00               LD   DE,21   
33D7   B7                     OR   A   
33D8   ED 52                  SBC   HL,DE   
33DA   7D                     LD   A,L   
33DB   B4                     OR   H   
33DC   28 6D                  JR   Z,expectM_0_2231S43   
33DE   CD 8E 09               CALL   printStr   
33E1   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 20 7B 2F 66 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab {/f {$a} {$b} ??} ;^ +"   
340A   CD 8E 09               CALL   printStr   
340D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
341C   21 15 00               LD   HL,21   
341F   CD DC 08               CALL   prtdec   
3422   CD 8E 09               CALL   printStr   
3425   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3432   E1                     POP   hl   
3433   E5                     PUSH   hl   
3434   CD DC 08               CALL   prtdec   
3437   E1                     POP   hl   
3438   CD 8E 09               CALL   printStr   
343B   20 28 23 00            .CSTR   " (#"   
343F   CD 24 09               CALL   prthex   
3442   CD 8E 09               CALL   printStr   
3445   29 0D 0A 00            .CSTR   ")\r\n"   
3449   76                     HALT      
344A   00                     .CSTR      
344B                EXPECTM_0_2231S43:      
344B   E1                     POP   HL   
344C                          ;*Macro unroll:  test "[10 20 30] 1%", 20
344C   31 80 3C               LD   SP,STACK   
344F   CD 95 09               CALL   init   
3452   CD 44 3B               CALL   execStr   
3455   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3463                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3463   E1                     POP   HL   
3464   E5                     PUSH   HL   
3465   11 14 00               LD   DE,20   
3468   B7                     OR   A   
3469   ED 52                  SBC   HL,DE   
346B   7D                     LD   A,L   
346C   B4                     OR   H   
346D   28 58                  JR   Z,expectM_0_2232S43   
346F   CD 8E 09               CALL   printStr   
3472   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
3486   CD 8E 09               CALL   printStr   
3489   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3498   21 14 00               LD   HL,20   
349B   CD DC 08               CALL   prtdec   
349E   CD 8E 09               CALL   printStr   
34A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34AE   E1                     POP   hl   
34AF   E5                     PUSH   hl   
34B0   CD DC 08               CALL   prtdec   
34B3   E1                     POP   hl   
34B4   CD 8E 09               CALL   printStr   
34B7   20 28 23 00            .CSTR   " (#"   
34BB   CD 24 09               CALL   prthex   
34BE   CD 8E 09               CALL   printStr   
34C1   29 0D 0A 00            .CSTR   ")\r\n"   
34C5   76                     HALT      
34C6   00                     .CSTR      
34C7                EXPECTM_0_2232S43:      
34C7   E1                     POP   HL   
34C8                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
34C8   31 80 3C               LD   SP,STACK   
34CB   CD 95 09               CALL   init   
34CE   CD 44 3B               CALL   execStr   
34D1   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
34DF                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
34DF   E1                     POP   HL   
34E0   E5                     PUSH   HL   
34E1   11 02 00               LD   DE,2   
34E4   B7                     OR   A   
34E5   ED 52                  SBC   HL,DE   
34E7   7D                     LD   A,L   
34E8   B4                     OR   H   
34E9   28 58                  JR   Z,expectM_0_2233S43   
34EB   CD 8E 09               CALL   printStr   
34EE   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3502   CD 8E 09               CALL   printStr   
3505   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3514   21 02 00               LD   HL,2   
3517   CD DC 08               CALL   prtdec   
351A   CD 8E 09               CALL   printStr   
351D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
352A   E1                     POP   hl   
352B   E5                     PUSH   hl   
352C   CD DC 08               CALL   prtdec   
352F   E1                     POP   hl   
3530   CD 8E 09               CALL   printStr   
3533   20 28 23 00            .CSTR   " (#"   
3537   CD 24 09               CALL   prthex   
353A   CD 8E 09               CALL   printStr   
353D   29 0D 0A 00            .CSTR   ")\r\n"   
3541   76                     HALT      
3542   00                     .CSTR      
3543                EXPECTM_0_2233S43:      
3543   E1                     POP   HL   
3544                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3544   31 80 3C               LD   SP,STACK   
3547   CD 95 09               CALL   init   
354A   CD 44 3B               CALL   execStr   
354D   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3561                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3561   E1                     POP   HL   
3562   E5                     PUSH   HL   
3563   11 42 00               LD   DE,66   
3566   B7                     OR   A   
3567   ED 52                  SBC   HL,DE   
3569   7D                     LD   A,L   
356A   B4                     OR   H   
356B   28 5E                  JR   Z,expectM_0_2234S43   
356D   CD 8E 09               CALL   printStr   
3570   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
358A   CD 8E 09               CALL   printStr   
358D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
359C   21 42 00               LD   HL,66   
359F   CD DC 08               CALL   prtdec   
35A2   CD 8E 09               CALL   printStr   
35A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35B2   E1                     POP   hl   
35B3   E5                     PUSH   hl   
35B4   CD DC 08               CALL   prtdec   
35B7   E1                     POP   hl   
35B8   CD 8E 09               CALL   printStr   
35BB   20 28 23 00            .CSTR   " (#"   
35BF   CD 24 09               CALL   prthex   
35C2   CD 8E 09               CALL   printStr   
35C5   29 0D 0A 00            .CSTR   ")\r\n"   
35C9   76                     HALT      
35CA   00                     .CSTR      
35CB                EXPECTM_0_2234S43:      
35CB   E1                     POP   HL   
35CC                          ;*Macro unroll:  test "[{10} {20} {30}] 0%^ ", 10
35CC   31 80 3C               LD   SP,STACK   
35CF   CD 95 09               CALL   init   
35D2   CD 44 3B               CALL   execStr   
35D5   5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10} {20} {30}] 0%^ "   
35EB                          ;*Macro unroll:  expect "[{10} {20} {30}] 0%^ ",10
35EB   E1                     POP   HL   
35EC   E5                     PUSH   HL   
35ED   11 0A 00               LD   DE,10   
35F0   B7                     OR   A   
35F1   ED 52                  SBC   HL,DE   
35F3   7D                     LD   A,L   
35F4   B4                     OR   H   
35F5   28 60                  JR   Z,expectM_0_2235S43   
35F7   CD 8E 09               CALL   printStr   
35FA   43 6F 64 65 3A 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10} {20} {30}] 0%^ "   
3616   CD 8E 09               CALL   printStr   
3619   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3628   21 0A 00               LD   HL,10   
362B   CD DC 08               CALL   prtdec   
362E   CD 8E 09               CALL   printStr   
3631   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
363E   E1                     POP   hl   
363F   E5                     PUSH   hl   
3640   CD DC 08               CALL   prtdec   
3643   E1                     POP   hl   
3644   CD 8E 09               CALL   printStr   
3647   20 28 23 00            .CSTR   " (#"   
364B   CD 24 09               CALL   prthex   
364E   CD 8E 09               CALL   printStr   
3651   29 0D 0A 00            .CSTR   ")\r\n"   
3655   76                     HALT      
3656   00                     .CSTR      
3657                EXPECTM_0_2235S43:      
3657   E1                     POP   HL   
3658                          ;*Macro unroll:  test "10 20 \\ab { [{$a} {$b}] 0%^ } ;^", 10
3658   31 80 3C               LD   SP,STACK   
365B   CD 95 09               CALL   init   
365E   CD 44 3B               CALL   execStr   
3661   31 30 20 32 30 20 5C 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 30 25 5E 20 7D 20 3B 5E 00 .CSTR   "10 20 \\ab { [{$a} {$b}] 0%^ } ;^"   
3682                          ;*Macro unroll:  expect "10 20 \\ab { [{$a} {$b}] 0%^ } ;^",10
3682   E1                     POP   HL   
3683   E5                     PUSH   HL   
3684   11 0A 00               LD   DE,10   
3687   B7                     OR   A   
3688   ED 52                  SBC   HL,DE   
368A   7D                     LD   A,L   
368B   B4                     OR   H   
368C   28 6B                  JR   Z,expectM_0_2236S43   
368E   CD 8E 09               CALL   printStr   
3691   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 30 25 5E 20 7D 20 3B 5E 00 .CSTR   "Code: ","10 20 \\ab { [{$a} {$b}] 0%^ } ;^"   
36B8   CD 8E 09               CALL   printStr   
36BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36CA   21 0A 00               LD   HL,10   
36CD   CD DC 08               CALL   prtdec   
36D0   CD 8E 09               CALL   printStr   
36D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36E0   E1                     POP   hl   
36E1   E5                     PUSH   hl   
36E2   CD DC 08               CALL   prtdec   
36E5   E1                     POP   hl   
36E6   CD 8E 09               CALL   printStr   
36E9   20 28 23 00            .CSTR   " (#"   
36ED   CD 24 09               CALL   prthex   
36F0   CD 8E 09               CALL   printStr   
36F3   29 0D 0A 00            .CSTR   ")\r\n"   
36F7   76                     HALT      
36F8   00                     .CSTR      
36F9                EXPECTM_0_2236S43:      
36F9   E1                     POP   HL   
36FA                          ;*Macro unroll:  test "0 10 20 \\iab { [{$a} {$b}] $i%^ } ;^", 10
36FA   31 80 3C               LD   SP,STACK   
36FD   CD 95 09               CALL   init   
3700   CD 44 3B               CALL   execStr   
3703   30 20 31 30 20 32 30 20 5C 69 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 24 69 25 5E 20 7D 20 3B 5E 00 .CSTR   "0 10 20 \\iab { [{$a} {$b}] $i%^ } ;^"   
3728                          ;*Macro unroll:  expect "0 10 20 \\iab { [{$a} {$b}] $i%^ } ;^",10
3728   E1                     POP   HL   
3729   E5                     PUSH   HL   
372A   11 0A 00               LD   DE,10   
372D   B7                     OR   A   
372E   ED 52                  SBC   HL,DE   
3730   7D                     LD   A,L   
3731   B4                     OR   H   
3732   28 6F                  JR   Z,expectM_0_2237S43   
3734   CD 8E 09               CALL   printStr   
3737   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 24 69 25 5E 20 7D 20 3B 5E 00 .CSTR   "Code: ","0 10 20 \\iab { [{$a} {$b}] $i%^ } ;^"   
3762   CD 8E 09               CALL   printStr   
3765   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3774   21 0A 00               LD   HL,10   
3777   CD DC 08               CALL   prtdec   
377A   CD 8E 09               CALL   printStr   
377D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
378A   E1                     POP   hl   
378B   E5                     PUSH   hl   
378C   CD DC 08               CALL   prtdec   
378F   E1                     POP   hl   
3790   CD 8E 09               CALL   printStr   
3793   20 28 23 00            .CSTR   " (#"   
3797   CD 24 09               CALL   prthex   
379A   CD 8E 09               CALL   printStr   
379D   29 0D 0A 00            .CSTR   ")\r\n"   
37A1   76                     HALT      
37A2   00                     .CSTR      
37A3                EXPECTM_0_2237S43:      
37A3   E1                     POP   HL   
37A4                          ;*Macro unroll:  test "1 10 20 \\iab { [{$a} {$b}] $i%^ } ;^", 20
37A4   31 80 3C               LD   SP,STACK   
37A7   CD 95 09               CALL   init   
37AA   CD 44 3B               CALL   execStr   
37AD   31 20 31 30 20 32 30 20 5C 69 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 24 69 25 5E 20 7D 20 3B 5E 00 .CSTR   "1 10 20 \\iab { [{$a} {$b}] $i%^ } ;^"   
37D2                          ;*Macro unroll:  expect "1 10 20 \\iab { [{$a} {$b}] $i%^ } ;^",20
37D2   E1                     POP   HL   
37D3   E5                     PUSH   HL   
37D4   11 14 00               LD   DE,20   
37D7   B7                     OR   A   
37D8   ED 52                  SBC   HL,DE   
37DA   7D                     LD   A,L   
37DB   B4                     OR   H   
37DC   28 6F                  JR   Z,expectM_0_2238S43   
37DE   CD 8E 09               CALL   printStr   
37E1   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 24 69 25 5E 20 7D 20 3B 5E 00 .CSTR   "Code: ","1 10 20 \\iab { [{$a} {$b}] $i%^ } ;^"   
380C   CD 8E 09               CALL   printStr   
380F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
381E   21 14 00               LD   HL,20   
3821   CD DC 08               CALL   prtdec   
3824   CD 8E 09               CALL   printStr   
3827   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3834   E1                     POP   hl   
3835   E5                     PUSH   hl   
3836   CD DC 08               CALL   prtdec   
3839   E1                     POP   hl   
383A   CD 8E 09               CALL   printStr   
383D   20 28 23 00            .CSTR   " (#"   
3841   CD 24 09               CALL   prthex   
3844   CD 8E 09               CALL   printStr   
3847   29 0D 0A 00            .CSTR   ")\r\n"   
384B   76                     HALT      
384C   00                     .CSTR      
384D                EXPECTM_0_2238S43:      
384D   E1                     POP   HL   
384E                          ;*Macro unroll:  test "5 [4] \\a {$a} ; /p ^", 4
384E   31 80 3C               LD   SP,STACK   
3851   CD 95 09               CALL   init   
3854   CD 44 3B               CALL   execStr   
3857   35 20 5B 34 5D 20 5C 61 20 7B 24 61 7D 20 3B 20 2F 70 20 5E 00 .CSTR   "5 [4] \\a {$a} ; /p ^"   
386C                          ;*Macro unroll:  expect "5 [4] \\a {$a} ; /p ^",4
386C   E1                     POP   HL   
386D   E5                     PUSH   HL   
386E   11 04 00               LD   DE,4   
3871   B7                     OR   A   
3872   ED 52                  SBC   HL,DE   
3874   7D                     LD   A,L   
3875   B4                     OR   H   
3876   28 5F                  JR   Z,expectM_0_2239S43   
3878   CD 8E 09               CALL   printStr   
387B   43 6F 64 65 3A 20 35 20 5B 34 5D 20 5C 61 20 7B 24 61 7D 20 3B 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] \\a {$a} ; /p ^"   
3896   CD 8E 09               CALL   printStr   
3899   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38A8   21 04 00               LD   HL,4   
38AB   CD DC 08               CALL   prtdec   
38AE   CD 8E 09               CALL   printStr   
38B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38BE   E1                     POP   hl   
38BF   E5                     PUSH   hl   
38C0   CD DC 08               CALL   prtdec   
38C3   E1                     POP   hl   
38C4   CD 8E 09               CALL   printStr   
38C7   20 28 23 00            .CSTR   " (#"   
38CB   CD 24 09               CALL   prthex   
38CE   CD 8E 09               CALL   printStr   
38D1   29 0D 0A 00            .CSTR   ")\r\n"   
38D5   76                     HALT      
38D6   00                     .CSTR      
38D7                EXPECTM_0_2239S43:      
38D7   E1                     POP   HL   
38D8                          ;*Macro unroll:  test "5 [4] \\ab {$a $b +} ; /p ^", 9
38D8   31 80 3C               LD   SP,STACK   
38DB   CD 95 09               CALL   init   
38DE   CD 44 3B               CALL   execStr   
38E1   35 20 5B 34 5D 20 5C 61 62 20 7B 24 61 20 24 62 20 2B 7D 20 3B 20 2F 70 20 5E 00 .CSTR   "5 [4] \\ab {$a $b +} ; /p ^"   
38FC                          ;*Macro unroll:  expect "5 [4] \\ab {$a $b +} ; /p ^",9
38FC   E1                     POP   HL   
38FD   E5                     PUSH   HL   
38FE   11 09 00               LD   DE,9   
3901   B7                     OR   A   
3902   ED 52                  SBC   HL,DE   
3904   7D                     LD   A,L   
3905   B4                     OR   H   
3906   28 65                  JR   Z,expectM_0_2240S43   
3908   CD 8E 09               CALL   printStr   
390B   43 6F 64 65 3A 20 35 20 5B 34 5D 20 5C 61 62 20 7B 24 61 20 24 62 20 2B 7D 20 3B 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] \\ab {$a $b +} ; /p ^"   
392C   CD 8E 09               CALL   printStr   
392F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
393E   21 09 00               LD   HL,9   
3941   CD DC 08               CALL   prtdec   
3944   CD 8E 09               CALL   printStr   
3947   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3954   E1                     POP   hl   
3955   E5                     PUSH   hl   
3956   CD DC 08               CALL   prtdec   
3959   E1                     POP   hl   
395A   CD 8E 09               CALL   printStr   
395D   20 28 23 00            .CSTR   " (#"   
3961   CD 24 09               CALL   prthex   
3964   CD 8E 09               CALL   printStr   
3967   29 0D 0A 00            .CSTR   ")\r\n"   
396B   76                     HALT      
396C   00                     .CSTR      
396D                EXPECTM_0_2240S43:      
396D   E1                     POP   HL   
396E                          ;*Macro unroll:  test "3i= ( i/b i i-- )^ + +", 6
396E   31 80 3C               LD   SP,STACK   
3971   CD 95 09               CALL   init   
3974   CD 44 3B               CALL   execStr   
3977   33 69 3D 20 28 20 69 2F 62 20 69 20 69 2D 2D 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i/b i i-- )^ + +"   
398E                          ;*Macro unroll:  expect "3i= ( i/b i i-- )^ + +",6
398E   E1                     POP   HL   
398F   E5                     PUSH   HL   
3990   11 06 00               LD   DE,6   
3993   B7                     OR   A   
3994   ED 52                  SBC   HL,DE   
3996   7D                     LD   A,L   
3997   B4                     OR   H   
3998   28 61                  JR   Z,expectM_0_2241S43   
399A   CD 8E 09               CALL   printStr   
399D   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 2F 62 20 69 20 69 2D 2D 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i/b i i-- )^ + +"   
39BA   CD 8E 09               CALL   printStr   
39BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39CC   21 06 00               LD   HL,6   
39CF   CD DC 08               CALL   prtdec   
39D2   CD 8E 09               CALL   printStr   
39D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39E2   E1                     POP   hl   
39E3   E5                     PUSH   hl   
39E4   CD DC 08               CALL   prtdec   
39E7   E1                     POP   hl   
39E8   CD 8E 09               CALL   printStr   
39EB   20 28 23 00            .CSTR   " (#"   
39EF   CD 24 09               CALL   prthex   
39F2   CD 8E 09               CALL   printStr   
39F5   29 0D 0A 00            .CSTR   ")\r\n"   
39F9   76                     HALT      
39FA   00                     .CSTR      
39FB                EXPECTM_0_2241S43:      
39FB   E1                     POP   HL   
39FC                          ;*Macro unroll:  test "3i= [ ( i/b i i-- )^ ] 1%", 2
39FC   31 80 3C               LD   SP,STACK   
39FF   CD 95 09               CALL   init   
3A02   CD 44 3B               CALL   execStr   
3A05   33 69 3D 20 5B 20 28 20 69 2F 62 20 69 20 69 2D 2D 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i/b i i-- )^ ] 1%"   
3A1F                          ;*Macro unroll:  expect "3i= [ ( i/b i i-- )^ ] 1%",2
3A1F   E1                     POP   HL   
3A20   E5                     PUSH   HL   
3A21   11 02 00               LD   DE,2   
3A24   B7                     OR   A   
3A25   ED 52                  SBC   HL,DE   
3A27   7D                     LD   A,L   
3A28   B4                     OR   H   
3A29   28 64                  JR   Z,expectM_0_2242S43   
3A2B   CD 8E 09               CALL   printStr   
3A2E   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 2F 62 20 69 20 69 2D 2D 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i/b i i-- )^ ] 1%"   
3A4E   CD 8E 09               CALL   printStr   
3A51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A60   21 02 00               LD   HL,2   
3A63   CD DC 08               CALL   prtdec   
3A66   CD 8E 09               CALL   printStr   
3A69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A76   E1                     POP   hl   
3A77   E5                     PUSH   hl   
3A78   CD DC 08               CALL   prtdec   
3A7B   E1                     POP   hl   
3A7C   CD 8E 09               CALL   printStr   
3A7F   20 28 23 00            .CSTR   " (#"   
3A83   CD 24 09               CALL   prthex   
3A86   CD 8E 09               CALL   printStr   
3A89   29 0D 0A 00            .CSTR   ")\r\n"   
3A8D   76                     HALT      
3A8E   00                     .CSTR      
3A8F                EXPECTM_0_2242S43:      
3A8F   E1                     POP   HL   
3A90                          ;*Macro unroll:  test "0 j= 4 i= ( i/b i j+= i i-- )^ j ", 10
3A90   31 80 3C               LD   SP,STACK   
3A93   CD 95 09               CALL   init   
3A96   CD 44 3B               CALL   execStr   
3A99   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 2F 62 20 69 20 6A 2B 3D 20 69 20 69 2D 2D 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i/b i j+= i i-- )^ j "   
3ABB                          ;*Macro unroll:  expect "0 j= 4 i= ( i/b i j+= i i-- )^ j ",10
3ABB   E1                     POP   HL   
3ABC   E5                     PUSH   HL   
3ABD   11 0A 00               LD   DE,10   
3AC0   B7                     OR   A   
3AC1   ED 52                  SBC   HL,DE   
3AC3   7D                     LD   A,L   
3AC4   B4                     OR   H   
3AC5   28 6C                  JR   Z,expectM_0_2243S43   
3AC7   CD 8E 09               CALL   printStr   
3ACA   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 2F 62 20 69 20 6A 2B 3D 20 69 20 69 2D 2D 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i/b i j+= i i-- )^ j "   
3AF2   CD 8E 09               CALL   printStr   
3AF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B04   21 0A 00               LD   HL,10   
3B07   CD DC 08               CALL   prtdec   
3B0A   CD 8E 09               CALL   printStr   
3B0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B1A   E1                     POP   hl   
3B1B   E5                     PUSH   hl   
3B1C   CD DC 08               CALL   prtdec   
3B1F   E1                     POP   hl   
3B20   CD 8E 09               CALL   printStr   
3B23   20 28 23 00            .CSTR   " (#"   
3B27   CD 24 09               CALL   prthex   
3B2A   CD 8E 09               CALL   printStr   
3B2D   29 0D 0A 00            .CSTR   ")\r\n"   
3B31   76                     HALT      
3B32   00                     .CSTR      
3B33                EXPECTM_0_2243S43:      
3B33   E1                     POP   HL   
3B34                             ; 
3B34   CD 8E 09               CALL   printStr   
3B37   44 6F 6E 65 21 00      .CSTR   "Done!"   
3B3D   76                     HALT      
3B3E                          ALIGN   2   
3B3E                PRINTER:      
3B3E   E1                     POP   hl   
3B3F   CD DC 08               CALL   prtdec   
3B42   DD E9                  JP   (ix)   
3B44                             ; executes a null teminated string (null executes exit_)
3B44                             ; the string should be immedaitely following the call
3B44                EXECSTR:      ; create a root stack frame
3B44   C1                     POP   bc   ; bc = code*
3B45   0B                     DEC   bc   ; dec to prepare for next routine
3B46   11 00 00               LD   de,0   
3B49   D5                     PUSH   de   ; push fake IP
3B4A   D5                     PUSH   de   ; push null arg_list*
3B4B   D5                     PUSH   de   ; push null first_arg*
3B4C   D5                     PUSH   de   ; push fake BP
3B4D   DD E9                  JP   (ix)   
3B4F                          ALIGN   $100   
3C00                             ; .org RAMSTART
3C00                          DS   DSIZE   
3C80                STACK:       
3C80                          ALIGN   $100   
3D00                VARS:        
3D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3DD0                RESTARTS:      
3DD0                RST08:    DS   2   
3DD2                RST10:    DS   2   
3DD4                RST18:    DS   2   
3DD6                RST20:    DS   2   
3DD8                RST28:    DS   2   
3DDA                RST30:    DS   2   ; 
3DDC                BAUD:     DS   2   ; 
3DDE                INTVEC:   DS   2   ; 
3DE0                NMIVEC:   DS   2   ; 
3DE2                GETCVEC:   DS   2   ; 
3DE4                PUTCVEC:   DS   2   ; 
3DE6                SYSVARS:      
3DE6                             ; initialised sys variables (preserved)
3DE6                VDATAWIDTH:   DS   2   ; 
3DE8                VTIBPTR:   DS   2   ; 
3DEA                VNEXT:    DS   2   ; 
3DEC                VHEAPPTR:   DS   2   ; 
3DEE                             ; uninitialised sys variables (preserved)
3DEE                VPOINTER:   DS   2   ; 
3DF0                VREMAIN:   DS   2   ; 
3DF2                VSAVEDIP:   DS   2   ; 
3DF4                VSAVEDSP:   DS   2   ; 
3DF6                VSAVEDBP:   DS   2   ; 
3DF8                VCHECKSUM:   DS   2   ; 
3DFA                             ; uninitialised sys variables (unpreserved)
3DFA                VTEMP1:   DS   2   ; 
3DFC                VTEMP2:   DS   2   ; 
3DFE                VLASTDEF:   DS   2   ; 
3E00                VHASHSTR:   DS   2   ; 
3E02                TBPTR:    DS   2   ; reserved for tests
3E04                          ALIGN   $100   
3F00                TIB:      DS   TIBSIZE   
4000                          ALIGN   $100   
4000                PAD:      DS   $100   
4100                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08DA DEFINED AT LINE 1378 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1350 IN monty.asm
                    > USED AT LINE 1579 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 787 IN monty.asm
                    > USED AT LINE 794 IN monty.asm
                    > USED AT LINE 1389 IN monty.asm
                    > USED AT LINE 1430 IN monty.asm
                    > USED AT LINE 1454 IN monty.asm
                    > USED AT LINE 1457 IN monty.asm
                    > USED AT LINE 1610 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 845 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 850 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1646 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1189 IN monty.asm
                    > USED AT LINE 1476 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
PLUS_:              0300 DEFINED AT LINE 215 IN monty.asm
AT_:                0303 DEFINED AT LINE 217 IN monty.asm
AMPER_:             0306 DEFINED AT LINE 219 IN monty.asm
DOLLAR_:            0309 DEFINED AT LINE 221 IN monty.asm
LBRACK_:            030C DEFINED AT LINE 223 IN monty.asm
RBRACK_:            030F DEFINED AT LINE 225 IN monty.asm
PERCENT_:           0312 DEFINED AT LINE 227 IN monty.asm
BACKSLASH_:         0315 DEFINED AT LINE 229 IN monty.asm
LBRACE_:            0318 DEFINED AT LINE 231 IN monty.asm
RBRACE_:            031B DEFINED AT LINE 233 IN monty.asm
TICK_:              031E DEFINED AT LINE 235 IN monty.asm
SEMICOLON_:         0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
UNDERSCORE_:        0327 DEFINED AT LINE 241 IN monty.asm
COLON_:             032A DEFINED AT LINE 243 IN monty.asm
UPCASE_:            032D DEFINED AT LINE 245 IN monty.asm
LOWCASE_:           0330 DEFINED AT LINE 247 IN monty.asm
QUESTION_:          0333 DEFINED AT LINE 249 IN monty.asm
STAR_:              0336 DEFINED AT LINE 251 IN monty.asm
BANG_:              0339 DEFINED AT LINE 253 IN monty.asm
NUM_:               033E DEFINED AT LINE 256 IN monty.asm
                    > USED AT LINE 1216 IN monty.asm
HASH_:              0341 DEFINED AT LINE 258 IN monty.asm
PIPE_:              0344 DEFINED AT LINE 260 IN monty.asm
CARET_:             0347 DEFINED AT LINE 262 IN monty.asm
COMMA_:             034A DEFINED AT LINE 264 IN monty.asm
DBLQUOTE_:          034D DEFINED AT LINE 266 IN monty.asm
MINUS_:             0350 DEFINED AT LINE 268 IN monty.asm
EQ_:                0353 DEFINED AT LINE 270 IN monty.asm
EQ0:                035D DEFINED AT LINE 277 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
EQ1:                035E DEFINED AT LINE 279 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
GT_:                0362 DEFINED AT LINE 283 IN monty.asm
LPAREN_:            036D DEFINED AT LINE 291 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 290 IN monty.asm
SLASH_:             0382 DEFINED AT LINE 305 IN monty.asm
NOP_:               0385 DEFINED AT LINE 307 IN monty.asm
RPAREN_:            0387 DEFINED AT LINE 309 IN monty.asm
PLUS:               038A DEFINED AT LINE 316 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD:                038A DEFINED AT LINE 317 IN monty.asm
ADD1:               0395 DEFINED AT LINE 325 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
ADD3:               0399 DEFINED AT LINE 330 IN monty.asm
                    > USED AT LINE 360 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
                    > USED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1230 IN monty.asm
AT:                 03A4 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
ADDR:               03A4 DEFINED AT LINE 342 IN monty.asm
AMPER:              03B0 DEFINED AT LINE 349 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND:                03B0 DEFINED AT LINE 350 IN monty.asm
AND1:               03B7 DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 371 IN monty.asm
PIPE:               03BB DEFINED AT LINE 362 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
OR:                 03BB DEFINED AT LINE 363 IN monty.asm
XOR:                03C4 DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 1263 IN monty.asm
XOR1:               03C5 DEFINED AT LINE 375 IN monty.asm
                    > USED AT LINE 387 IN monty.asm
INVERT:             03CF DEFINED AT LINE 385 IN monty.asm
                    > USED AT LINE 1261 IN monty.asm
DOLLAR:             03D4 DEFINED AT LINE 392 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG:                03D4 DEFINED AT LINE 393 IN monty.asm
ARG0:               03F2 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 420 IN monty.asm
ARG0A:              03FB DEFINED AT LINE 422 IN monty.asm
                    > USED AT LINE 399 IN monty.asm
                    > USED AT LINE 406 IN monty.asm
ARG1:               0400 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 418 IN monty.asm
ARG1A:              0408 DEFINED AT LINE 432 IN monty.asm
                    > USED AT LINE 424 IN monty.asm
LBRACK:             040B DEFINED AT LINE 436 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARRBEGIN:           040B DEFINED AT LINE 437 IN monty.asm
RBRACK:             0427 DEFINED AT LINE 451 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0427 DEFINED AT LINE 452 IN monty.asm
ARREND1:            0441 DEFINED AT LINE 468 IN monty.asm
                    > USED AT LINE 484 IN monty.asm
ARREND2:            0451 DEFINED AT LINE 478 IN monty.asm
                    > USED AT LINE 474 IN monty.asm
ARRINDEX:           0475 DEFINED AT LINE 505 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARRINDEX0:          047D DEFINED AT LINE 511 IN monty.asm
ARRINDEX1:          047E DEFINED AT LINE 513 IN monty.asm
                    > USED AT LINE 510 IN monty.asm
ARRINDEX2:          048A DEFINED AT LINE 522 IN monty.asm
                    > USED AT LINE 519 IN monty.asm
ASSIGN:             048D DEFINED AT LINE 527 IN monty.asm
                    > USED AT LINE 276 IN monty.asm
ASSIGN0:            048F DEFINED AT LINE 530 IN monty.asm
                    > USED AT LINE 324 IN monty.asm
                    > USED AT LINE 334 IN monty.asm
                    > USED AT LINE 1223 IN monty.asm
ASSIGNX:            0490 DEFINED AT LINE 532 IN monty.asm
ASSIGN1:            049C DEFINED AT LINE 540 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
BACKSLASH:          049E DEFINED AT LINE 547 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARGLIST:            049E DEFINED AT LINE 548 IN monty.asm
ARGLIST1:           04A8 DEFINED AT LINE 555 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
ARGLIST1A:          04B0 DEFINED AT LINE 561 IN monty.asm
                    > USED AT LINE 558 IN monty.asm
ARGLIST2:           04B8 DEFINED AT LINE 566 IN monty.asm
ARGLIST3:           04C0 DEFINED AT LINE 574 IN monty.asm
                    > USED AT LINE 560 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
ARGLIST4:           04C3 DEFINED AT LINE 577 IN monty.asm
                    > USED AT LINE 563 IN monty.asm
                    > USED AT LINE 565 IN monty.asm
ARGLIST5:           04C8 DEFINED AT LINE 582 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
LBRACE:             04D4 DEFINED AT LINE 593 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK:              04D4 DEFINED AT LINE 594 IN monty.asm
                    > USED AT LINE 855 IN monty.asm
BLOCK1:             04D8 DEFINED AT LINE 598 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 627 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
                    > USED AT LINE 636 IN monty.asm
BLOCK2:             0504 DEFINED AT LINE 625 IN monty.asm
                    > USED AT LINE 612 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
BLOCK3:             0507 DEFINED AT LINE 628 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
BLOCK4:             050F DEFINED AT LINE 634 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
                    > USED AT LINE 609 IN monty.asm
BLOCK5:             0512 DEFINED AT LINE 637 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
BLOCK6:             053A DEFINED AT LINE 656 IN monty.asm
                    > USED AT LINE 643 IN monty.asm
RBRACE:             053D DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
BLOCKEND:           053D DEFINED AT LINE 661 IN monty.asm
                    > USED AT LINE 1322 IN monty.asm
BLOCKEND1:          0569 DEFINED AT LINE 683 IN monty.asm
                    > USED AT LINE 676 IN monty.asm
BLOCKEND2:          0575 DEFINED AT LINE 690 IN monty.asm
                    > USED AT LINE 682 IN monty.asm
BLOCKEND3:          0587 DEFINED AT LINE 704 IN monty.asm
                    > USED AT LINE 696 IN monty.asm
TICK:               0592 DEFINED AT LINE 715 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR:               0592 DEFINED AT LINE 716 IN monty.asm
CHAR1:              0595 DEFINED AT LINE 718 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
CHAR2:              05A1 DEFINED AT LINE 727 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
CHAR3:              05A4 DEFINED AT LINE 730 IN monty.asm
                    > USED AT LINE 722 IN monty.asm
COLON:              05A7 DEFINED AT LINE 734 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
COMMA:              05A9 DEFINED AT LINE 739 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
DISCARD:            05A9 DEFINED AT LINE 740 IN monty.asm
DISCARD1:           05B6 DEFINED AT LINE 749 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
SLASH:              05B8 DEFINED AT LINE 752 IN monty.asm
                    > USED AT LINE 306 IN monty.asm
DOT:                05D6 DEFINED AT LINE 770 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05E2 DEFINED AT LINE 778 IN monty.asm
                    > USED AT LINE 775 IN monty.asm
DOT2:               05EB DEFINED AT LINE 783 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
DOT3:               05F5 DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 785 IN monty.asm
DOT4:               05F9 DEFINED AT LINE 792 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
DIVIDE:             0600 DEFINED AT LINE 800 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
DIVIDE1:            0605 DEFINED AT LINE 803 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
DIVIDE2:            0612 DEFINED AT LINE 811 IN monty.asm
                    > USED AT LINE 808 IN monty.asm
DIVIDE3:            0613 DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 810 IN monty.asm
EQUALS:             0619 DEFINED AT LINE 821 IN monty.asm
                    > USED AT LINE 281 IN monty.asm
LESSTHANEQ:         0621 DEFINED AT LINE 829 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           0626 DEFINED AT LINE 836 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          062B DEFINED AT LINE 841 IN monty.asm
                    > USED AT LINE 832 IN monty.asm
TRUE1:              062E DEFINED AT LINE 844 IN monty.asm
                    > USED AT LINE 824 IN monty.asm
                    > USED AT LINE 1259 IN monty.asm
NULL1:              0634 DEFINED AT LINE 848 IN monty.asm
FALSE1:             0634 DEFINED AT LINE 849 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 839 IN monty.asm
                    > USED AT LINE 842 IN monty.asm
                    > USED AT LINE 1247 IN monty.asm
LPAREN:             063A DEFINED AT LINE 854 IN monty.asm
                    > USED AT LINE 292 IN monty.asm
CARET:              063D DEFINED AT LINE 860 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
GO:                 063D DEFINED AT LINE 861 IN monty.asm
GO1:                063E DEFINED AT LINE 863 IN monty.asm
                    > USED AT LINE 1039 IN monty.asm
                    > USED AT LINE 1041 IN monty.asm
GO2:                0644 DEFINED AT LINE 868 IN monty.asm
                    > USED AT LINE 866 IN monty.asm
GOBLOCK:            0650 DEFINED AT LINE 876 IN monty.asm
GOBLOCK1:           0650 DEFINED AT LINE 877 IN monty.asm
                    > USED AT LINE 871 IN monty.asm
GOBLOCK2:           0675 DEFINED AT LINE 894 IN monty.asm
                    > USED AT LINE 976 IN monty.asm
GOFUNC:             0683 DEFINED AT LINE 903 IN monty.asm
                    > USED AT LINE 873 IN monty.asm
GOFUNC1:            069C DEFINED AT LINE 922 IN monty.asm
                    > USED AT LINE 932 IN monty.asm
GOFUNC2:            06A2 DEFINED AT LINE 929 IN monty.asm
                    > USED AT LINE 921 IN monty.asm
GOFUNC3:            06AD DEFINED AT LINE 935 IN monty.asm
                    > USED AT LINE 911 IN monty.asm
GOFUNC4:            06C5 DEFINED AT LINE 952 IN monty.asm
                    > USED AT LINE 949 IN monty.asm
GOFUNC5:            06C9 DEFINED AT LINE 956 IN monty.asm
                    > USED AT LINE 962 IN monty.asm
GOFUNC6:            06CC DEFINED AT LINE 960 IN monty.asm
                    > USED AT LINE 955 IN monty.asm
GOFUNC7:            06CF DEFINED AT LINE 963 IN monty.asm
GOFUNC8:            06D4 DEFINED AT LINE 969 IN monty.asm
                    > USED AT LINE 888 IN monty.asm
                    > USED AT LINE 951 IN monty.asm
HASH:               06DF DEFINED AT LINE 978 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
HEXNUM:             06DF DEFINED AT LINE 979 IN monty.asm
HEXNUM1:            06E2 DEFINED AT LINE 981 IN monty.asm
                    > USED AT LINE 998 IN monty.asm
HEXNUM2:            06EA DEFINED AT LINE 987 IN monty.asm
                    > USED AT LINE 985 IN monty.asm
UPCASE:             06FC DEFINED AT LINE 999 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
LOWCASE:            0701 DEFINED AT LINE 1003 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             0706 DEFINED AT LINE 1007 IN monty.asm
                    > USED AT LINE 1002 IN monty.asm
QUESTION:           0713 DEFINED AT LINE 1020 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IF:                 0713 DEFINED AT LINE 1021 IN monty.asm
IFTE:               071F DEFINED AT LINE 1031 IN monty.asm
                    > USED AT LINE 1025 IN monty.asm
IFTE1:              0720 DEFINED AT LINE 1033 IN monty.asm
                    > USED AT LINE 1028 IN monty.asm
STAR:               072C DEFINED AT LINE 1043 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
MUL:                072C DEFINED AT LINE 1044 IN monty.asm
MUL2:               072E DEFINED AT LINE 1047 IN monty.asm
MUL3:               0736 DEFINED AT LINE 1052 IN monty.asm
                    > USED AT LINE 1061 IN monty.asm
NUM:                0748 DEFINED AT LINE 1065 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
NUM0:               0751 DEFINED AT LINE 1071 IN monty.asm
                    > USED AT LINE 1069 IN monty.asm
NUM1:               0752 DEFINED AT LINE 1073 IN monty.asm
                    > USED AT LINE 1090 IN monty.asm
NUM2:               076A DEFINED AT LINE 1091 IN monty.asm
                    > USED AT LINE 989 IN monty.asm
                    > USED AT LINE 991 IN monty.asm
                    > USED AT LINE 1076 IN monty.asm
                    > USED AT LINE 1078 IN monty.asm
NUM3:               0775 DEFINED AT LINE 1099 IN monty.asm
                    > USED AT LINE 1094 IN monty.asm
UNDERSCORE:         0778 DEFINED AT LINE 1103 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
REMAIN:             0778 DEFINED AT LINE 1104 IN monty.asm
RPAREN:             077E DEFINED AT LINE 1109 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
SEMICOLON:          0786 DEFINED AT LINE 1115 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
SHIFTLEFT:          07A2 DEFINED AT LINE 1139 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         07AA DEFINED AT LINE 1146 IN monty.asm
                    > USED AT LINE 1149 IN monty.asm
SHIFTLEFT2:         07AB DEFINED AT LINE 1148 IN monty.asm
                    > USED AT LINE 1145 IN monty.asm
SHIFTRIGHT:         07B2 DEFINED AT LINE 1156 IN monty.asm
                    > USED AT LINE 287 IN monty.asm
SHIFTRIGHT1:        07BA DEFINED AT LINE 1163 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
SHIFTRIGHT2:        07BE DEFINED AT LINE 1166 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
DBLQUOTE:           07C5 DEFINED AT LINE 1175 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
STRING:             07C5 DEFINED AT LINE 1176 IN monty.asm
STRING1:            07CE DEFINED AT LINE 1183 IN monty.asm
                    > USED AT LINE 1190 IN monty.asm
                    > USED AT LINE 1192 IN monty.asm
STRING2:            07D1 DEFINED AT LINE 1187 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
MINUS:              07ED DEFINED AT LINE 1209 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
SUB:                07F9 DEFINED AT LINE 1217 IN monty.asm
                    > USED AT LINE 1214 IN monty.asm
SUB1:               0803 DEFINED AT LINE 1224 IN monty.asm
                    > USED AT LINE 1220 IN monty.asm
COMMAND:            080C DEFINED AT LINE 1237 IN monty.asm
                    > USED AT LINE 758 IN monty.asm
ERROR1:             084D DEFINED AT LINE 1264 IN monty.asm
ABS1:               0853 DEFINED AT LINE 1268 IN monty.asm
                    > USED AT LINE 1239 IN monty.asm
PARTIAL:            0860 DEFINED AT LINE 1283 IN monty.asm
                    > USED AT LINE 1245 IN monty.asm
COMMENT:            0880 DEFINED AT LINE 1299 IN monty.asm
                    > USED AT LINE 756 IN monty.asm
                    > USED AT LINE 1303 IN monty.asm
BREAK:              0889 DEFINED AT LINE 1307 IN monty.asm
                    > USED AT LINE 1241 IN monty.asm
BREAK1:             0890 DEFINED AT LINE 1313 IN monty.asm
                    > USED AT LINE 1311 IN monty.asm
CHARS:              08A3 DEFINED AT LINE 1324 IN monty.asm
                    > USED AT LINE 1243 IN monty.asm
CHARS1:             08A6 DEFINED AT LINE 1326 IN monty.asm
                    > USED AT LINE 1369 IN monty.asm
HEAPPTR:            08AB DEFINED AT LINE 1330 IN monty.asm
                    > USED AT LINE 1249 IN monty.asm
INPUT:              08B7 DEFINED AT LINE 1339 IN monty.asm
                    > USED AT LINE 1251 IN monty.asm
KEY:                08C2 DEFINED AT LINE 1349 IN monty.asm
                    > USED AT LINE 1253 IN monty.asm
OUTPUT:             08CB DEFINED AT LINE 1358 IN monty.asm
                    > USED AT LINE 1257 IN monty.asm
NUMBERS:            08D4 DEFINED AT LINE 1367 IN monty.asm
                    > USED AT LINE 1255 IN monty.asm
FILTER:             08DA DEFINED AT LINE 1376 IN monty.asm
MAP:                08DA DEFINED AT LINE 1377 IN monty.asm
PRTDEC:             08DC DEFINED AT LINE 1385 IN monty.asm
                    > USED AT LINE 791 IN monty.asm
                    > USED AT LINE 1656 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 136
PRTDEC0:            08EB DEFINED AT LINE 1396 IN monty.asm
                    > USED AT LINE 1387 IN monty.asm
PRTDEC1:            090D DEFINED AT LINE 1412 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1402 IN monty.asm
                    > USED AT LINE 1404 IN monty.asm
                    > USED AT LINE 1406 IN monty.asm
                    > USED AT LINE 1409 IN monty.asm
PRTDEC2:            090F DEFINED AT LINE 1414 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
PRTDEC3:            091F DEFINED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
PRTDEC4:            0920 DEFINED AT LINE 1428 IN monty.asm
                    > USED AT LINE 1425 IN monty.asm
PRTHEX:             0924 DEFINED AT LINE 1432 IN monty.asm
                    > USED AT LINE 776 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            092F DEFINED AT LINE 1440 IN monty.asm
                    > USED AT LINE 1435 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
PRTHEX3:            0938 DEFINED AT LINE 1448 IN monty.asm
                    > USED AT LINE 1446 IN monty.asm
PRTSTR0:            0943 DEFINED AT LINE 1456 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
PRTSTR:             0947 DEFINED AT LINE 1459 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
                    > USED AT LINE 1526 IN monty.asm
NESTING:            094C DEFINED AT LINE 1475 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
NESTING0:           0956 DEFINED AT LINE 1481 IN monty.asm
                    > USED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1479 IN monty.asm
NESTING1A:          095D DEFINED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1483 IN monty.asm
NESTING1:           0960 DEFINED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1480 IN monty.asm
NESTING2:           096F DEFINED AT LINE 1498 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
                    > USED AT LINE 1495 IN monty.asm
NESTING3:           0971 DEFINED AT LINE 1501 IN monty.asm
                    > USED AT LINE 1497 IN monty.asm
NESTING4:           097C DEFINED AT LINE 1508 IN monty.asm
                    > USED AT LINE 1503 IN monty.asm
                    > USED AT LINE 1505 IN monty.asm
PROMPT:             097E DEFINED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1554 IN monty.asm
CRLF:               0987 DEFINED AT LINE 1517 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
PRINTSTR:           098E DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1513 IN monty.asm
                    > USED AT LINE 1518 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
                    > USED AT LINE 1654 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 129
INIT:               0995 DEFINED AT LINE 1531 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1549 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              09AE DEFINED AT LINE 1541 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
START:              09B3 DEFINED AT LINE 1547 IN monty.asm
INTERPRET:          09C9 DEFINED AT LINE 1553 IN monty.asm
                    > USED AT LINE 1648 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
INTERPRET2:         09D3 DEFINED AT LINE 1559 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
INTERPRET3:         09DB DEFINED AT LINE 1566 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
INTERPRET4:         09E1 DEFINED AT LINE 1572 IN monty.asm
                    > USED AT LINE 1564 IN monty.asm
INTERPRET5:         09E6 DEFINED AT LINE 1578 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
INTERPRET6:         09F7 DEFINED AT LINE 1605 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
INTERPRET7:         0A05 DEFINED AT LINE 1614 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
INTERPRET8:         0A18 DEFINED AT LINE 1628 IN monty.asm
                    > USED AT LINE 1584 IN monty.asm
NEXT:               0A20 DEFINED AT LINE 1634 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1638 IN monty.asm
NEXT1:              0A2F DEFINED AT LINE 1645 IN monty.asm
                    > USED AT LINE 1639 IN monty.asm
EXIT_:              0A36 DEFINED AT LINE 1649 IN monty.asm
                    > USED AT LINE 1647 IN monty.asm
ERROR:              0A39 DEFINED AT LINE 1653 IN monty.asm
                    > USED AT LINE 1266 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2142S43:  0B65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  0BCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  0C2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  0C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  0CF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  0D5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  0DC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  0E29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  0E8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  0EF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  0F5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  0FC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  102F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  1097 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  1105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  1173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  11DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  124F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  12C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  1335 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  13A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  1417 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  1493 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  1503 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  156F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  15DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  1651 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  16CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  1739 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  17B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  1821 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  189D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  190B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  198D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  19F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  1A75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  1AE9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  1B55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  1BD1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  1C41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  1CAD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  1D1B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  1D89 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  1DF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  1E61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  1ECD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  1F39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  1FA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  2011 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  207D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  20E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  2157 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  21C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  2233 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  22A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  2313 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  237D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  23E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  2457 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  24CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  2545 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  25C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  2649 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  26D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  273D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  27AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  281B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  288D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  28FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  296F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  29E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  2A5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  2ADB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  2B55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  2BD9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  2C5F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  2CEB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  2D7B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  2DFD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  2E85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  2F0F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  2F9B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2224S43:  3025 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2225S43:  30BD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2226S43:  3143 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2227S43:  31D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2228S43:  3269 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2229S43:  32FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2230S43:  33A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2231S43:  344B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2232S43:  34C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2233S43:  3543 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2234S43:  35CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2235S43:  3657 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2236S43:  36F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2237S43:  37A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2238S43:  384D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2239S43:  38D7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2240S43:  396D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2241S43:  39FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2242S43:  3A8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2243S43:  3B33 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3B3E DEFINED AT LINE 134
EXECSTR:            3B44 DEFINED AT LINE 141
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 1533 IN monty.asm
                    > USED AT LINE 1548 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1538 IN monty.asm
RESTARTS:           3DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1535 IN monty.asm
VDATAWIDTH:         3DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 472 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
                    > USED AT LINE 1327 IN monty.asm
VTIBPTR:            3DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1557 IN monty.asm
                    > USED AT LINE 1629 IN monty.asm
VNEXT:              3DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1532 IN monty.asm
VHEAPPTR:           3DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 462 IN monty.asm
                    > USED AT LINE 494 IN monty.asm
                    > USED AT LINE 495 IN monty.asm
                    > USED AT LINE 550 IN monty.asm
                    > USED AT LINE 584 IN monty.asm
                    > USED AT LINE 651 IN monty.asm
                    > USED AT LINE 654 IN monty.asm
                    > USED AT LINE 1117 IN monty.asm
                    > USED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1134 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
                    > USED AT LINE 1196 IN monty.asm
                    > USED AT LINE 1285 IN monty.asm
                    > USED AT LINE 1290 IN monty.asm
                    > USED AT LINE 1291 IN monty.asm
                    > USED AT LINE 1331 IN monty.asm
                    > USED AT LINE 1333 IN monty.asm
VPOINTER:           3DEE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 343 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 346 IN monty.asm
                    > USED AT LINE 428 IN monty.asm
                    > USED AT LINE 515 IN monty.asm
                    > USED AT LINE 533 IN monty.asm
                    > USED AT LINE 1011 IN monty.asm
                    > USED AT LINE 1334 IN monty.asm
VREMAIN:            3DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 766 IN monty.asm
                    > USED AT LINE 1105 IN monty.asm
VSAVEDIP:           3DF2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           3DF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           3DF6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          3DF8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             3DFA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 455 IN monty.asm
                    > USED AT LINE 496 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
                    > USED AT LINE 878 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
                    > USED AT LINE 912 IN monty.asm
                    > USED AT LINE 933 IN monty.asm
                    > USED AT LINE 940 IN monty.asm
                    > USED AT LINE 946 IN monty.asm
                    > USED AT LINE 1286 IN monty.asm
                    > USED AT LINE 1289 IN monty.asm
VTEMP2:             3DFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 913 IN monty.asm
                    > USED AT LINE 934 IN monty.asm
VLASTDEF:           3DFE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           3E00 DEFINED AT LINE 49 IN ram.asm
TBPTR:              3E02 DEFINED AT LINE 50 IN ram.asm
TIB:                3F00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1563 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
                    > USED AT LINE 1630 IN monty.asm
PAD:                4000 DEFINED AT LINE 56 IN ram.asm
HEAP:               4100 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 639 IN monty.asm
