0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 34               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 34               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 34               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 34               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 34               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 34               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 34               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 34               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 34               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 34               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 33               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 34               LD   (RST08),HL   
0094   22 D2 34               LD   (RST10),HL   
0097   22 D4 34               LD   (RST18),HL   
009A   22 D6 34               LD   (RST20),HL   
009D   22 D8 34               LD   (RST28),HL   
00A0   22 DA 34               LD   (RST30),HL   
00A3   22 DE 34               LD   (INTVEC),HL   
00A6   22 E0 34               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 34               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 34               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 33               LD   SP,STACK   
00C6   CD C4 08               CALL   init   
00C9   C3 00 0A               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   4F 09                  DW   next   ; g nNext
0186   00 37                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   A5                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   18                     DB   lsb(arrIndex_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   21                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   A5                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   A5                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   96                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   A5                     DB   lsb(nop_)   ; ;
023C   84                     DB   lsb(lt_)   ; <
023D   6A                     DB   lsb(eq_)   ; =
023E   79                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(arrBegin_)   ; [
025C   24                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   1B                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1E                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   A5                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 A7 03               JP   addr   
0309                AND_:        
0309   C3 B3 03               JP   and   
030C                ARG_:        
030C   C3 D0 03               JP   arg   
030F                ARG_LIST_:      
030F   C3 07 04               JP   arg_list   
0312                ARRBEGIN_:      
0312   C3 39 04               JP   arrBegin   
0315                ARREND_:      
0315   C3 55 04               JP   arrEnd   
0318                ARRINDEX_:      
0318   C3 A3 04               JP   arrIndex   
031B                BLOCK_:      
031B   C3 CB 04               JP   block   
031E                BLOCKEND_:      
031E   C3 34 05               JP   blockend   
0321                CHAR_:       
0321   C3 89 05               JP   char   
0324                COMMAND_:      
0324   C3 59 07               JP   command   
0327                DOT_:        
0327   C3 9E 05               JP   dot   
032A                REMAIN_:      
032A   C3 08 07               JP   remain   
032D                GO_:         
032D   C3 02 06               JP   go   
0330                IDENTU_:      
0330   C3 8C 06               JP   identU   
0333                IDENTL_:      
0333   C3 91 06               JP   identL   
0336                IF_:         
0336   C3 A3 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C8 03               JP   xor1   
033F                MUL_:        
033F   C3 BC 06               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 2E                  JR   eq1   
0347                NUM_:        
0347   C3 D8 06               JP   num   
034A                HEXNUM_:      
034A   C3 6F 06               JP   hexnum   
034D                OR_:         
034D   C3 BE 03               JP   or   
0350                XOR_:        
0350   C3 C7 03               JP   xor   
0353                STRING_:      
0353   C3 31 07               JP   string   
0356                SUB_:        ; negative sign or subtract
0356   03                     INC   bc   ; check if sign of a number
0357   0A                     LD   a,(bc)   
0358   0B                     DEC   bc   
0359   FE 30                  CP   "0"   
035B   38 05                  JR   c,sub1   
035D   FE 3A                  CP   "9"+1   
035F   DA 47 03               JP   c,num_   
0362                SUB1:        ; Subtract the value 2nd on stack from top of stack
0362   D1                     POP   de   
0363   E1                     POP   hl   ; Entry point for INVert
0364                SUB2:        
0364   B7                     OR   a   ; Entry point for NEGate
0365   ED 52                  SBC   hl,de   
0367   E5                     PUSH   hl   
0368   DD E9                  JP   (ix)   
036A                EQ_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   ; is it == ?
036C   FE 3D                  CP   "="   
036E   28 04                  JR   z,eq0   ; no its equality
0370   0B                     DEC   bc   
0371   C3 BB 04               JP   assign   ; no its assignment
0374                EQ0:         
0374   E1                     POP   hl   
0375                EQ1:         
0375   D1                     POP   de   
0376   C3 E1 05               JP   equals   
0379                GT_:         
0379   03                     INC   bc   
037A   0A                     LD   a,(bc)   
037B   FE 3E                  CP   ">"   
037D   CA 1E 07               JP   z,shiftRight   
0380   D1                     POP   de   
0381   E1                     POP   hl   
0382   18 09                  JR   lt1   
0384                LT_:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 3C                  CP   "<"   
0388   CA 0E 07               JP   z,shiftLeft   
038B   E1                     POP   hl   
038C   D1                     POP   de   
038D                LT1:         
038D   FE 3D                  CP   "="   
038F   CA E9 05               JP   z,lessthaneq   
0392   0B                     DEC   bc   
0393   C3 EE 05               JP   lessthan   
0396                DIV_:        
0396   D1                     POP   de   ; get first value
0397   E1                     POP   hl   ; get 2nd value
0398   C5                     PUSH   bc   ; preserve the IP
0399   44 4D                  LD   bc,hl   
039B   CD C8 05               CALL   divide   
039E   22 F6 34               LD   (vRemain),hl   
03A1   C1                     POP   bc   
03A2   D5                     PUSH   de   ; push result
03A3   DD E9                  JP   (ix)   
03A5                NOP_:        
03A5   DD E9                  JP   (ix)   
03A7                             ;*******************************************************************
03A7                             ; word operators
03A7                             ;*******************************************************************
03A7                             ; -- ptr
03A7                ADDR:        
03A7   2A F0 34               LD   hl,(vPointer)   
03AA   E5                     PUSH   hl   
03AB   21 F0 34               LD   hl,vPointer   
03AE   22 F0 34               LD   (vPointer),hl   
03B1   DD E9                  JP   (ix)   
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                OR:          
03BE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BF   E1                     POP   hl   
03C0   7B                     LD   a,e   
03C1   B5                     OR   l   
03C2   6F                     LD   l,a   
03C3   7A                     LD   a,d   
03C4   B4                     OR   h   
03C5   18 F3                  JR   and1   
03C7                XOR:         
03C7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C8                XOR1:        
03C8   E1                     POP   hl   
03C9   7B                     LD   a,e   
03CA   AD                     XOR   l   
03CB   6F                     LD   l,a   
03CC   7A                     LD   a,d   
03CD   AC                     XOR   h   
03CE   18 EA                  JR   and1   
03D0                             ; $a .. $z
03D0                             ; -- value
03D0                             ; returns value of arg
03D0                ARG:         
03D0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D3   FD 56 05               LD   d,(iy+5)   
03D6   EB                     EX   de,hl   
03D7   7D                     LD   a,l   ; arg_list* == null, skip
03D8   B4                     OR   h   
03D9   28 1C                  JR   z,arg0a   
03DB   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03DC   2B                     DEC   hl   
03DD   7E                     LD   a,(hl)   
03DE   23                     INC   hl   
03DF   23                     INC   hl   
03E0   B7                     OR   a   
03E1   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E3   5F                     LD   e,a   ; e = a = num_args
03E4   03                     INC   bc   ; a = next char = arg_name
03E5   0A                     LD   a,(bc)   
03E6   C5                     PUSH   bc   ; save IP
03E7   43                     LD   b,e   ; b = e = num_args
03E8   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EB   FD 56 03               LD   d,(iy+3)   
03EE                ARG0:        
03EE   1B                     DEC   de   ; a = arg_name, de = next arg*
03EF   1B                     DEC   de   
03F0   BE                     CP   (hl)   
03F1   28 09                  JR   z,arg1   
03F3   23                     INC   hl   ; hl = next arg_list*
03F4   10 F8                  DJNZ   arg0   
03F6   C1                     POP   bc   ; no match, restore IP
03F7                ARG0A:       
03F7   11 00 00               LD   de,0   ; return 0
03FA   18 08                  JR   arg1a   
03FC                ARG1:        
03FC   C1                     POP   bc   ; restore IP
03FD   EB                     EX   de,hl   ; hl = arg*
03FE   22 F0 34               LD   (vPointer),hl   ; store arg* in setter
0401   5E                     LD   e,(hl)   
0402   23                     INC   hl   
0403   56                     LD   d,(hl)   ; de = arg
0404                ARG1A:       
0404   D5                     PUSH   de   ; push arg
0405   DD E9                  JP   (ix)   
0407                             ; arg_list - parses input (ab:c)
0407                             ; names after the : represent uninitialised locals
0407                             ; return values are the state of the stack after the block ends
0407                ARG_LIST:      
0407   11 00 00               LD   de,0   ; d = count locals, e = count args ()
040A   2A EC 34               LD   hl,(vHeapPtr)   ; hl = heap*
040D   23                     INC   hl   ; skip length field to start
040E   23                     INC   hl   
040F   E5                     PUSH   hl   ; save start of arg_list
0410   03                     INC   bc   ; point to next char
0411                ARG_LIST1:      
0411   0A                     LD   a,(bc)   
0412   FE 29                  CP   ")"   ; ) is the arg_list terminator
0414   28 12                  JR   z,arg_list4   
0416   FE 3A                  CP   ":"   
0418   20 03                  JR   nz,arg_list2   
041A   14                     INC   d   ; non zero value local count acts as flag
041B   20 08                  JR   nz,arg_list3   
041D                ARG_LIST2:      
041D   77                     LD   (hl),a   
041E   23                     INC   hl   
041F   1C                     INC   e   ; increase arg count
0420   AF                     XOR   a   
0421   B2                     OR   d   
0422   28 01                  JR   z,arg_list3   
0424   14                     INC   d   ; if d > 0 increase local count
0425                ARG_LIST3:      
0425   03                     INC   bc   ; point to next char
0426   18 E9                  JR   arg_list1   
0428                ARG_LIST4:      
0428   AF                     XOR   a   
0429   B2                     OR   d   
042A   28 01                  JR   z,arg_list5   
042C   15                     DEC   d   ; remove initial inc
042D                ARG_LIST5:      
042D   23                     INC   hl   
042E   22 EC 34               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0431   E1                     POP   hl   ; hl = start of arg_list
0432   E5                     PUSH   hl   ; return start of string
0433   2B                     DEC   hl   ; write length bytes to length field at start - 2
0434   72                     LD   (hl),d   
0435   2B                     DEC   hl   
0436   73                     LD   (hl),e   
0437   DD E9                  JP   (ix)   
0439                ARRBEGIN:      
0439   11 00 00               LD   de,0   ; create stack frame
043C   D5                     PUSH   de   ; push null for IP
043D   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0440   FD 56 05               LD   d,(iy+5)   ; 
0443   D5                     PUSH   de   ; 
0444   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0447   FD 56 03               LD   d,(iy+3)   ; 
044A   D5                     PUSH   de   ; 
044B   FD E5                  PUSH   iy   ; push BP
044D   FD 21 00 00            LD   iy,0   ; BP = SP
0451   FD 39                  ADD   iy,sp   
0453   DD E9                  JP   (ix)   
0455                ARREND:      
0455   FD 54                  LD   d,iyh   ; de = BP
0457   FD 5D                  LD   e,iyl   
0459   ED 43 F8 34            LD   (vTemp1),bc   ; save IP
045D   62 6B                  LD   hl,de   ; hl = de = BP
045F   B7                     OR   a   
0460   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0462   CB 3C                  SRL   h   ; 
0464   CB 1D                  RR   l   
0466   44 4D                  LD   bc,hl   ; bc = count
0468   2A EC 34               LD   hl,(vHeapPtr)   ; hl = array[-2]
046B   71                     LD   (hl),c   ; write num items in length word
046C   23                     INC   hl   
046D   70                     LD   (hl),b   
046E   23                     INC   hl   ; hl = array[0], bc = count
046F                             ; de = BP, hl = array[0], bc = count
046F                ARREND1:      
046F   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0472   77                     LD   (hl),a   ; write lsb of array item
0473   23                     INC   hl   ; move to msb of array item
0474   3A E6 34               LD   a,(vDataWidth)   ; vDataWidth=1?
0477   3D                     DEC   a   
0478   28 05                  JR   z,arrEnd2   
047A   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047D   77                     LD   (hl),a   ; write msb of array item
047E   23                     INC   hl   ; move to next word in array
047F                ARREND2:      
047F   FD 2B                  DEC   iy   ; move to next word on stack
0481   FD 2B                  DEC   iy   
0483   0B                     DEC   bc   ; dec items count
0484   79                     LD   a,c   ; if not zero loop
0485   B0                     OR   b   
0486   20 E7                  JR   nz,arrEnd1   
0488   EB                     EX   de,hl   ; de = end of array, hl = BP
0489   F9                     LD   sp,hl   ; sp = BP
048A   E1                     POP   hl   ; de = end of array, hl = old BP
048B   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
048C   FD 62                  LD   iyh,d   
048E   FD 6B                  LD   iyl,e   
0490   D1                     POP   de   ; pop arg_list (discard)
0491   D1                     POP   de   ; pop first_arg* (discard)
0492   D1                     POP   de   ; pop IP (discard)
0493   ED 5B EC 34            LD   de,(vHeapPtr)   ; de = array[-2]
0497   22 EC 34               LD   (vHeapPtr),hl   ; move heap* to end of array
049A   ED 4B F8 34            LD   bc,(vTemp1)   ; restore IP
049E   13                     INC   de   ; de = array[0]
049F   13                     INC   de   
04A0   D5                     PUSH   de   ; return array[0]
04A1   DD E9                  JP   (ix)   
04A3                             ; index of an array, based on vDataWidth
04A3                             ; array num -- value    ; also sets vPointer to address
04A3                ARRINDEX:      
04A3   E1                     POP   hl   ; hl = index
04A4   D1                     POP   de   ; de = array
04A5   3A E6 34               LD   a,(vDataWidth)   ; a = data width
04A8   3D                     DEC   a   
04A9   28 01                  JR   z,arrIndex1   
04AB                ARRINDEX0:      
04AB   29                     ADD   hl,hl   ; if data width = 2 then double
04AC                ARRINDEX1:      
04AC   19                     ADD   hl,de   ; add addr
04AD   22 F0 34               LD   (vPointer),hl   ; store address in setter
04B0   16 00                  LD   d,0   
04B2   5E                     LD   e,(hl)   
04B3   B7                     OR   a   ; check data width again
04B4   28 02                  JR   z,arrIndex2   
04B6   23                     INC   hl   
04B7   56                     LD   d,(hl)   
04B8                ARRINDEX2:      
04B8   D5                     PUSH   de   
04B9   DD E9                  JP   (ix)   
04BB                             ; value _oldValue --            ; uses address in vPointer
04BB                ASSIGN:      
04BB   E1                     POP   hl   ; discard last accessed value
04BC   D1                     POP   de   ; new value
04BD   2A F0 34               LD   hl,(vPointer)   
04C0   73                     LD   (hl),e   
04C1   3A E6 34               LD   a,(vDataWidth)   
04C4   3D                     DEC   a   ; is it byte?
04C5   28 02                  JR   z,assign1   
04C7   23                     INC   hl   
04C8   72                     LD   (hl),d   
04C9                ASSIGN1:      
04C9   DD E9                  JP   (ix)   
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   $22   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 37               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 F8 34            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EC 34            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EC 34            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B F8 34            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                BLOCKEND:      
0534   D9                     EXX      
0535   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0538   FD 56 01               LD   d,(iy+1)   
053B   FD 4E 06               LD   c,(iy+6)   ; bc = IP
053E   FD 46 07               LD   b,(iy+7)   
0541   D9                     EXX      
0542   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0545   FD 56 03               LD   d,(iy+3)   
0548   EB                     EX   de,hl   
0549   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054C   FD 56 01               LD   d,(iy+1)   
054F                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
054F   13                     INC   de   ; for carry flag <=
0550   B7                     OR   a   
0551   ED 52                  SBC   hl,de   
0553   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0555   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0557   FD 5D                  LD   e,iyl   
0559   21 08 00               LD   hl,8   
055C   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055D   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055E   18 0C                  JR   blockend2   
0560                BLOCKEND1:      ; same scope
0560   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0563   FD 56 03               LD   d,(iy+3)   
0566   EB                     EX   de,hl   
0567   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0569   FD 5D                  LD   e,iyl   
056B   EB                     EX   de,hl   
056C                BLOCKEND2:      
056C   44 4D                  LD   bc,hl   ; bc = hl = BP
056E   B7                     OR   a   ; hl = BP - SP = count
056F   ED 72                  SBC   hl,sp   
0571   7D                     LD   a,l   
0572   B4                     OR   h   
0573   28 09                  JR   z,blockend3   
0575   C5                     PUSH   bc   ; bc = count, hl = BP
0576   44 4D                  LD   bc,hl   
0578   E1                     POP   hl   
0579   2B                     DEC   hl   ; hl = BP-1
057A   1B                     DEC   de   ; de = args*-1
057B   ED B8                  LDDR      
057D   13                     INC   de   
057E                BLOCKEND3:      
057E   EB                     EX   de,hl   ; hl = new tos
057F   F9                     LD   sp,hl   ; sp = new tos
0580   D9                     EXX      ; bc = IP, iy = oldBP
0581   D5                     PUSH   de   
0582   C5                     PUSH   bc   
0583   D9                     EXX      
0584   C1                     POP   bc   
0585   FD E1                  POP   iy   
0587   DD E9                  JP   (ix)   
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                             ; ; ;
059E                             ; ; block* -- hblock*
059E                             ; ; copies bytes from TOS to IP to the heap
059E                             ; compile:
059E                             ;   ld (vTemp1),bc              ; save IP
059E                             ; pop de                      ; de = block*
059E                             ; ld hl,bc                    ; hl = IP
059E                             ; or a                        ; bc = size
059E                             ; sbc hl,de
059E                             ; ld bc,hl
059E                             ; ex de,hl                    ; hl = block*
059E                             ; ld de,(vHeapPtr)            ; de = heap*
059E                             ; push de                     ; return hblock*
059E                             ; ldir                        ; copy size bytes from block* to hblock*
059E                             ; ld (vHeapPtr),de
059E                             ; ld bc,(vTemp1)              ; restore IP
059E                             ; jp (ix)
059E                DOT:         
059E   E1                     POP   hl   
059F   03                     INC   bc   
05A0   0A                     LD   a,(bc)   
05A1   FE 68                  CP   "h"   
05A3   20 05                  JR   nz,dot1   
05A5   CD 53 08               CALL   prthex   
05A8   18 17                  JR   dot4   
05AA                DOT1:        
05AA   FE 73                  CP   "s"   
05AC   20 05                  JR   nz,dot2   
05AE   CD 76 08               CALL   prtstr   
05B1   18 0E                  JR   dot4   
05B3                DOT2:        
05B3   FE 63                  CP   "c"   
05B5   20 06                  JR   nz,dot3   
05B7   7D                     LD   a,l   
05B8   CD 85 00               CALL   putchar   
05BB   18 04                  JR   dot4   
05BD                DOT3:        
05BD   0B                     DEC   bc   
05BE   CD 0B 08               CALL   prtdec   
05C1                DOT4:        
05C1   3E 20                  LD   a," "   
05C3   CD 85 00               CALL   putchar   
05C6   DD E9                  JP   (ix)   
05C8                             ; division subroutine.
05C8                             ; bc: divisor, de: dividend, hl: remainder
05C8                DIVIDE:      
05C8   21 00 00               LD   hl,0   ; zero the remainder
05CB   3E 10                  LD   a,16   ; loop counter
05CD                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05CD   CB 21                  SLA   c   
05CF   CB 10                  RL   b   
05D1   ED 6A                  ADC   hl,hl   
05D3   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05D5   38 03                  JR   c,divide2   
05D7   0C                     INC   c   
05D8   18 01                  JR   divide3   
05DA                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05DA   19                     ADD   hl,de   
05DB                DIVIDE3:      
05DB   3D                     DEC   a   
05DC   20 EF                  JR   nz,divide1   
05DE   50 59                  LD   de,bc   ; result from bc to de
05E0   C9                     RET      
05E1                             ; hl = value1, de = value2
05E1                             ; hl = result
05E1                EQUALS:      
05E1   B7                     OR   a   ; reset the carry flag
05E2   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05E4   28 10                  JR   z,true1   
05E6   C3 FC 05               JP   false1   
05E9                             ; hl = value1 de = value2
05E9                             ; hl = result
05E9                LESSTHANEQ:      
05E9   B7                     OR   a   
05EA   ED 52                  SBC   hl,de   
05EC   18 05                  JR   lessthan1   
05EE                             ; hl = value1 de = value2
05EE                             ; hl = result
05EE                LESSTHAN:      
05EE   B7                     OR   a   
05EF   ED 52                  SBC   hl,de   
05F1   28 09                  JR   z,false1   
05F3                LESSTHAN1:      
05F3   FA FC 05               JP   m,false1   
05F6                TRUE1:       
05F6   21 FF FF               LD   hl,TRUE   
05F9   E5                     PUSH   hl   
05FA   DD E9                  JP   (ix)   
05FC                NULL1:       
05FC                FALSE1:      
05FC   21 00 00               LD   hl,FALSE   
05FF   E5                     PUSH   hl   
0600   DD E9                  JP   (ix)   
0602                             ; execute a block of code which ends with }
0602                             ; creates a root scope if BP == stack
0602                             ; else uses outer scope
0602                GO:          
0602   D1                     POP   de   ; de = block*
0603                GO1:         
0603   7B                     LD   a,e   ; if block* == null, exit
0604   B2                     OR   d   
0605   20 02                  JR   nz,go2   
0607   DD E9                  JP   (ix)   
0609                GO2:         
0609   1A                     LD   a,(de)   
060A   FE 7B                  CP   "{"   
060C   CA 3B 06               JP   z,goBlock   
060F                GOFUNC:      ; execute code at pointer
060F   EB                     EX   de,hl   ; hl = func*
0610   5E                     LD   e,(hl)   ; de = hblock*
0611   23                     INC   hl   
0612   56                     LD   d,(hl)   
0613   23                     INC   hl   
0614   D5                     PUSH   de   ; save hblock*
0615   5E                     LD   e,(hl)   ; de = arg_list*
0616   23                     INC   hl   
0617   56                     LD   d,(hl)   
0618   23                     INC   hl   
0619   EB                     EX   de,hl   ; hl = arg_list*
061A   D1                     POP   de   ; restore hblock*
061B   7D                     LD   a,l   ; if arg_list* != null skip
061C   B4                     OR   h   
061D   20 03                  JR   nz,goFunc1   
061F   C5                     PUSH   bc   ; push IP
0620   18 3A                  JR   goBlock2   
0622                GOFUNC1:      
0622   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0623   7E                     LD   a,(hl)   
0624   23                     INC   hl   
0625   B7                     OR   a   
0626   28 05                  JR   z,goFunc3   
0628                GOFUNC2:      
0628   3B                     DEC   sp   
0629   3B                     DEC   sp   
062A   3D                     DEC   a   
062B   20 FB                  JR   nz,goFunc2   
062D                GOFUNC3:      
062D   C5                     PUSH   bc   ; push IP
062E   E5                     PUSH   hl   ; push arg_list*
062F   2B                     DEC   hl   ; hl = num_args*
0630   2B                     DEC   hl   
0631   7E                     LD   a,(hl)   ; hl = num_args * 2
0632   87                     ADD   a,a   
0633   C6 04                  ADD   a,4   ; offset for IP and arg_list
0635   6F                     LD   l,a   
0636   26 00                  LD   h,$0   
0638   39                     ADD   hl,sp   ; hl = first_arg*
0639   18 27                  JR   goBlock4   
063B                GOBLOCK:      
063B   13                     INC   de   
063C   C5                     PUSH   bc   ; push IP
063D   21 80 33               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0640   FD 44                  LD   b,iyh   
0642   FD 4D                  LD   c,iyl   
0644   B7                     OR   a   ; hl = stack - BP = root_scope
0645   ED 42                  SBC   hl,bc   
0647   7D                     LD   a,l   ; if root_scope, skip
0648   B4                     OR   h   
0649   28 11                  JR   z,goBlock2   
064B   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
064E   FD 46 05               LD   b,(iy+5)   
0651   C5                     PUSH   bc   
0652   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0655   FD 46 03               LD   b,(iy+3)   
0658   60 69                  LD   hl,bc   
065A   18 05                  JR   goBlock3   
065C                GOBLOCK2:      
065C   E5                     PUSH   hl   ; push arg_list (null)
065D   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0660   39                     ADD   hl,sp   
0661                GOBLOCK3:      
0661   1B                     DEC   de   
0662                GOBLOCK4:      
0662   E5                     PUSH   hl   ; push first_arg
0663   FD E5                  PUSH   iy   ; push BP
0665   FD 21 00 00            LD   iy,0   ; BP = SP
0669   FD 39                  ADD   iy,sp   
066B   42 4B                  LD   bc,de   ; bc = de = block*-1
066D   DD E9                  JP   (ix)   
066F                HEXNUM:      
066F   21 00 00               LD   hl,0   ; Clear hl to accept the number
0672                HEXNUM1:      
0672   03                     INC   bc   
0673   0A                     LD   a,(bc)   ; Get the character which is a numeral
0674   CB 77                  BIT   6,a   ; is it uppercase alpha?
0676   28 02                  JR   z,hexnum2   ; no a decimal
0678   D6 07                  SUB   7   ; sub 7  to make $a - $F
067A                HEXNUM2:      
067A   D6 30                  SUB   $30   ; form decimal digit
067C   DA FA 06               JP   c,num2   
067F   FE 10                  CP   $0F+1   
0681   D2 FA 06               JP   nc,num2   
0684   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0685   29                     ADD   hl,hl   ; 4X
0686   29                     ADD   hl,hl   ; 8X
0687   29                     ADD   hl,hl   ; 16X
0688   85                     ADD   a,l   ; add into bottom of hl
0689   6F                     LD   l,a   
068A   18 E6                  JR   hexnum1   
068C                IDENTU:      
068C   0A                     LD   a,(bc)   ; a = identifier char
068D   D6 41                  SUB   "A"   ; "A" = 0
068F   18 05                  JR   ident1   
0691                IDENTL:      
0691   0A                     LD   a,(bc)   
0692   D6 61                  SUB   "a"   
0694   C6 1A                  ADD   a,26   
0696                IDENT1:      
0696   87                     ADD   a,a   ; l = a * 2
0697   6F                     LD   l,a   
0698   26 34                  LD   h,msb(vars)   
069A   22 F0 34               LD   (vPointer),hl   ; store address in setter
069D   5E                     LD   e,(hl)   
069E   23                     INC   hl   
069F   56                     LD   d,(hl)   
06A0   D5                     PUSH   de   
06A1   DD E9                  JP   (ix)   
06A3                             ; if
06A3                             ; condition then -- value
06A3                IF:          
06A3   03                     INC   bc   
06A4   0A                     LD   a,(bc)   
06A5   FE 3F                  CP   "?"   
06A7   28 06                  JR   z,ifte   
06A9   0B                     DEC   bc   
06AA   11 00 00               LD   de,0   ; NUL pointer for else
06AD   18 01                  JR   ifte1   
06AF                             ; ifte
06AF                             ; condition then else -- value
06AF                IFTE:        
06AF   D1                     POP   de   ; de = else
06B0                IFTE1:       
06B0   E1                     POP   hl   ; hl = then
06B1   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06B2   7C                     LD   a,h   
06B3   B5                     OR   l   
06B4   E1                     POP   hl   ; hl = then
06B5   CA 03 06               JP   z,go1   ; if z de = else
06B8   EB                     EX   de,hl   ; condition = false, de = then
06B9   C3 03 06               JP   go1   
06BC                MUL:         
06BC   D1                     POP   de   ; get first value
06BD   E1                     POP   hl   
06BE   C5                     PUSH   bc   ; Preserve the IP
06BF   44                     LD   b,h   ; bc = 2nd value
06C0   4D                     LD   c,l   
06C1   21 00 00               LD   hl,0   
06C4   3E 10                  LD   a,16   
06C6                MUL2:        
06C6   29                     ADD   hl,hl   
06C7   CB 13                  RL   e   
06C9   CB 12                  RL   d   
06CB   30 04                  JR   nc,$+6   
06CD   09                     ADD   hl,bc   
06CE   30 01                  JR   nc,$+3   
06D0   13                     INC   de   
06D1   3D                     DEC   a   
06D2   20 F2                  JR   nz,mul2   
06D4   C1                     POP   bc   ; Restore the IP
06D5   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
06D6   DD E9                  JP   (ix)   
06D8                NUM:         
06D8   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06DB   0A                     LD   a,(bc)   ; Get numeral or -
06DC   FE 2D                  CP   "-"   
06DE   20 01                  JR   nz,num0   
06E0   03                     INC   bc   ; move to next char, no flags affected
06E1                NUM0:        
06E1   08                     EX   af,af'   ; save zero flag = 0 for later
06E2                NUM1:        
06E2   0A                     LD   a,(bc)   ; read digit
06E3   D6 30                  SUB   "0"   ; less than 0?
06E5   38 13                  JR   c,num2   ; not a digit, exit loop
06E7   FE 0A                  CP   10   ; greater that 9?
06E9   30 0F                  JR   nc,num2   ; not a digit, exit loop
06EB   03                     INC   bc   ; inc IP
06EC   54 5D                  LD   de,hl   ; multiply hl * 10
06EE   29                     ADD   hl,hl   
06EF   29                     ADD   hl,hl   
06F0   19                     ADD   hl,de   
06F1   29                     ADD   hl,hl   
06F2   85                     ADD   a,l   ; add digit in a to hl
06F3   6F                     LD   l,a   
06F4   3E 00                  LD   a,0   
06F6   8C                     ADC   a,h   
06F7   67                     LD   h,a   
06F8   18 E8                  JR   num1   
06FA                NUM2:        
06FA   0B                     DEC   bc   
06FB   08                     EX   af,af'   ; restore zero flag
06FC   20 07                  JR   nz,num3   
06FE   EB                     EX   de,hl   ; negate the value of hl
06FF   21 00 00               LD   hl,0   
0702   B7                     OR   a   ; jump to sub2
0703   ED 52                  SBC   hl,de   
0705                NUM3:        
0705   E5                     PUSH   hl   ; Put the number on the stack
0706   DD E9                  JP   (ix)   ; and process the next character
0708                REMAIN:      
0708   2A F6 34               LD   hl,(vRemain)   
070B   E5                     PUSH   hl   
070C   DD E9                  JP   (ix)   
070E                             ; shiftLeft
070E                             ; value count -- value2          shift left count places
070E                SHIFTLEFT:      
070E   50 59                  LD   de,bc   ; save IP
0710   C1                     POP   bc   ; bc = count
0711   41                     LD   b,c   ; b = loop counter
0712   E1                     POP   hl   
0713   04                     INC   b   ; test for counter=0 case
0714   18 01                  JR   shiftLeft2   
0716                SHIFTLEFT1:      
0716   29                     ADD   hl,hl   ; left shift hl
0717                SHIFTLEFT2:      
0717   10 FD                  DJNZ   shiftLeft1   
0719   E5                     PUSH   hl   
071A   42 4B                  LD   bc,de   ; restore IP
071C   DD E9                  JP   (ix)   
071E                             ; shiftRight
071E                             ; value count -- value2          shift left count places
071E                SHIFTRIGHT:      
071E   50 59                  LD   de,bc   ; save IP
0720   C1                     POP   bc   ; bc = count
0721   41                     LD   b,c   ; b = loop counter
0722   E1                     POP   hl   
0723   04                     INC   b   ; test for counter=0 case
0724   18 04                  JR   shiftRight2   
0726                SHIFTRIGHT1:      
0726   CB 3C                  SRL   h   ; right shift hl
0728   CB 1D                  RR   l   
072A                SHIFTRIGHT2:      
072A   10 FA                  DJNZ   shiftRight1   
072C   E5                     PUSH   hl   
072D   42 4B                  LD   bc,de   ; restore IP
072F   DD E9                  JP   (ix)   
0731                             ; string
0731                             ; -- ptr                        ; points to start of string chars,
0731                             ; length is stored at start - 2 bytes
0731                STRING:      
0731   2A EC 34               LD   hl,(vHeapPtr)   ; hl = heap*
0734   23                     INC   hl   ; skip length field to start
0735   23                     INC   hl   
0736   E5                     PUSH   hl   ; save start of string
0737   03                     INC   bc   ; point to next char
0738   18 03                  JR   string2   
073A                STRING1:      
073A   77                     LD   (hl),a   
073B   23                     INC   hl   ; increase count
073C   03                     INC   bc   ; point to next char
073D                STRING2:      
073D   0A                     LD   a,(bc)   
073E   FE 22                  CP   DQUOTE   ; " is the string terminator
0740   20 F8                  JR   nz,string1   
0742   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0744   20 F4                  JR   nz,string1   
0746   AF                     XOR   a   ; write NUL to terminate string
0747   77                     LD   (hl),a   ; hl = end of string
0748   23                     INC   hl   
0749   22 EC 34               LD   (vHeapPtr),hl   ; bump heap* to after end of string
074C   2B                     DEC   hl   ; hl = end of string without terminator
074D   D1                     POP   de   ; de = start of string
074E   D5                     PUSH   de   ; return start of string
074F   B7                     OR   a   ; hl = length bytes, de = start of string
0750   ED 52                  SBC   hl,de   
0752   EB                     EX   de,hl   
0753   2B                     DEC   hl   ; write length bytes to length field at start - 2
0754   72                     LD   (hl),d   
0755   2B                     DEC   hl   
0756   73                     LD   (hl),e   
0757   DD E9                  JP   (ix)   
0759                             ;*******************************************************************
0759                             ; commands
0759                             ;*******************************************************************
0759                COMMAND:      
0759   03                     INC   bc   
075A   0A                     LD   a,(bc)   
075B   FE 5C                  CP   $5C   ; \\ comment
075D   CA AA 07               JP   z,comment   
0760   FE 61                  CP   "a"   ; \a absolute
0762   CA 9D 07               JP   z,abs1   
0765   FE 62                  CP   "b"   ; \b bytes
0767   CA B3 07               JP   z,bytes   
076A   FE 66                  CP   "f"   ; \f func
076C   CA BB 07               JP   z,func   
076F   FE 46                  CP   "F"   ; \F false
0771   CA FC 05               JP   z,false1   
0774   FE 69                  CP   "i"   ; \i input
0776   CA D2 07               JP   z,input   
0779   FE 6B                  CP   "k"   ; \k key
077B   CA DD 07               JP   z,key   
077E   FE 6F                  CP   "o"   ; \o output
0780   CA E6 07               JP   z,output   
0783   FE 72                  CP   "r"   ; \r repeat
0785   CA FF 07               JP   z,repeat   
0788   FE 73                  CP   "s"   ; \s select
078A   CA EF 07               JP   z,select   
078D   FE 54                  CP   "T"   ; \T true
078F   CA F6 05               JP   z,true1   
0792   FE 77                  CP   "w"   ; \w words
0794   CA F9 07               JP   z,words   
0797   21 01 00               LD   hl,1   ; error 1: unknown command
079A   C3 68 09               JP   error   
079D                ABS1:        
079D   E1                     POP   hl   
079E   CB 7C                  BIT   7,h   
07A0   C8                     RET   z   
07A1   AF                     XOR   a   
07A2   95                     SUB   l   
07A3   6F                     LD   l,a   
07A4   9F                     SBC   a,a   
07A5   94                     SUB   h   
07A6   67                     LD   h,a   
07A7   E5                     PUSH   hl   
07A8   DD E9                  JP   (ix)   
07AA                COMMENT:      
07AA   03                     INC   bc   ; point to next char
07AB   0A                     LD   a,(bc)   
07AC   FE 20                  CP   " "   ; terminate on any char less than SP
07AE   30 FA                  JR   nc,comment   
07B0   0B                     DEC   bc   
07B1   DD E9                  JP   (ix)   
07B3                BYTES:       
07B3   21 01 00               LD   hl,1   
07B6                BYTES1:      
07B6   22 E6 34               LD   (vDataWidth),hl   
07B9   DD E9                  JP   (ix)   
07BB                             ; arg_list* block* -- ptr
07BB                FUNC:        
07BB   D1                     POP   de   ; de = block* hl = heap*
07BC   2A EC 34               LD   hl,(vHeapPtr)   
07BF   73                     LD   (hl),e   ; compile block*
07C0   23                     INC   hl   
07C1   72                     LD   (hl),d   
07C2   23                     INC   hl   
07C3   D1                     POP   de   ; de = block*
07C4   73                     LD   (hl),e   ; compile arg_list*
07C5   23                     INC   hl   
07C6   72                     LD   (hl),d   
07C7   23                     INC   hl   
07C8   ED 5B EC 34            LD   de,(vHeapPtr)   ; return func*
07CC   D5                     PUSH   de   
07CD   22 EC 34               LD   (vHeapPtr),hl   ; heap* += 4
07D0   DD E9                  JP   (ix)   
07D2                             ; Z80 port input
07D2                             ; port -- value
07D2                INPUT:       
07D2   E1                     POP   hl   
07D3   59                     LD   e,c   ; save IP
07D4   4D                     LD   c,l   
07D5   ED 68                  IN   l,(c)   
07D7   26 00                  LD   h,0   
07D9   4B                     LD   c,e   ; restore IP
07DA   E5                     PUSH   hl   
07DB   DD E9                  JP   (ix)   
07DD                KEY:         
07DD   CD 81 00               CALL   getchar   
07E0   26 00                  LD   h,0   
07E2   6F                     LD   l,a   
07E3   E5                     PUSH   hl   
07E4   DD E9                  JP   (ix)   
07E6                             ; Z80 port output
07E6                             ; value port --
07E6                OUTPUT:      
07E6   E1                     POP   hl   
07E7   59                     LD   e,c   ; save IP
07E8   4D                     LD   c,l   
07E9   E1                     POP   hl   
07EA   ED 69                  OUT   (c),l   
07EC   4B                     LD   c,e   ; restore IP
07ED   DD E9                  JP   (ix)   
07EF                             ; select
07EF                             ; index array -- value
07EF                SELECT:      
07EF   D1                     POP   de   ; de = array
07F0   E1                     POP   hl   ; hl = index
07F1   29                     ADD   hl,hl   ; if data width = 2 then double
07F2   19                     ADD   hl,de   ; add addr
07F3   5E                     LD   e,(hl)   
07F4   23                     INC   hl   
07F5   56                     LD   d,(hl)   
07F6   C3 03 06               JP   go1   
07F9                WORDS:       
07F9   21 02 00               LD   hl,2   
07FC   C3 B6 07               JP   bytes1   
07FF                             ; 
07FF                             ; 
07FF                             ; 
07FF                             ; 
07FF                REPEAT:      
07FF   0B                     DEC   bc   
0800   0B                     DEC   bc   
0801   E1                     POP   hl   
0802   E5                     PUSH   hl   
0803   E5                     PUSH   hl   
0804   C3 02 06               JP   go   
0807                             ; c b --
0807                             ; loops until c = 0
0807                LOOP:        
0807   DD E9                  JP   (ix)   
0809                             ;     pop de                      ; de = block                    c
0809                             ;     pop hl                      ; hl = condition
0809                             ;     push de
0809                             ;     push bc                     ; push IP
0809                             ;     ld bc,de                    ; bc = block
0809                             ;     ld e,(iy+2)                 ; get first_arg* from parent stack frame
0809                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0809                             ;     push de                     ; push first_arg*
0809                             ;     push iy                     ; push BP
0809                             ;     ld iy,0                     ; iy = sp
0809                             ;     add iy,sp
0809                             ; loop1:
0809                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0809                             ;     or h
0809                             ;     jr z,loop3
0809                             ;     ld de,loop2-1               ; IP return address
0809                             ;     push de
0809                             ;     ld e,(iy+2)                 ; push parent first_arg*
0809                             ;     ld d,(iy+3)
0809                             ;     push de                     ;
0809                             ;     push iy                     ; push BP
0809                             ;     ld iy,0                     ; iy = sp
0809                             ;     add iy,sp
0809                             ;     push hl                     ; push condition
0809                             ;     dec bc
0809                             ;     jp (ix)
0809                             ; loop2:
0809                             ;     db ESC                      ; escape from interpreter
0809                             ;     ld c,(iy+6)                 ; bc = block
0809                             ;     ld b,(iy+7)
0809                             ;     pop hl                      ; hl = condition
0809                             ;     jr loop1
0809                             ; loop3:
0809                             ;     ld d,iyh                    ; de = BP
0809                             ;     ld e,iyl
0809                             ;     ex de,hl                    ; hl = BP, de = result
0809                             ;     ld sp,hl                    ; sp = BP
0809                             ;     pop hl                      ; hl = old BP
0809                             ;     pop bc                      ; pop first_arg* (discard)
0809                             ;     pop bc                      ; bc = IP
0809                             ;     ld sp,hl                    ; sp = old BP
0809                             ;     ld iy,0                     ; iy = sp
0809                             ;     add iy,sp
0809                             ;     ld ix,(vNext)                  ; needed?
0809                             ;     jp (ix)
0809                             ; str -- num
0809                             ; hash:
0809                             ; pop hl
0809                             ; push bc
0809                             ; ld bc,hl
0809                             ; call hashStr
0809                             ; pop bc
0809                             ; push hl
0809                             ; jp (ix)
0809                             ; sqrt1:
0809                             ;     pop hl
0809                             ;     push bc
0809                             ;     call squareRoot
0809                             ;     ld (vRemain),bc
0809                             ;     pop bc
0809                             ;     push de
0809                             ;     jp (ix)
0809                FILTER:      
0809                MAP:         
0809                SCAN:        
0809   DD E9                  JP   (ix)   
080B                             ; -------------------------------------------------------------------------------
080B                             ; ; hash C-string
080B                             ; ; BC = str
080B                             ; ; HL = hash
080B                             ; hashStr:
080B                             ;     ld (vHashStr),bc                    ; store source string
080B                             ;     ld hl,0
080B                             ; hashStr1:
080B                             ;     ld a,(bc)                           ; load next char
080B                             ;     inc bc
080B                             ;     cp 0                                ; NUL?
080B                             ;     ret z
080B                             ; hashStr2:
080B                             ;     ld d,0
080B                             ;     ld e,a
080B                             ;     add hl,de
080B                             ;     ld de,hl                            ; hl *= 193 (11000001)
080B                             ;     add hl,hl                           ; shift left
080B                             ;     add hl,de                           ; add
080B                             ;     add hl,hl                           ; shift left
080B                             ;     add hl,hl                           ; shift left
080B                             ;     add hl,hl                           ; shift left
080B                             ;     add hl,hl                           ; shift left
080B                             ;     add hl,hl                           ; shift left
080B                             ;     add hl,hl                           ; shift left
080B                             ;     add hl,de                           ; add
080B                             ;     jr hashStr1
080B                             ; ; squareroot
080B                             ; ; Input: HL = value
080B                             ; ; Result: DE = square root BC = remainder
080B                             ; squareRoot:
080B                             ;     ld bc,0800h
080B                             ;     ld e,c
080B                             ;     xor a
080B                             ; squareRoot1:
080B                             ;     add hl,hl
080B                             ;     rl c
080B                             ;     adc hl,hl
080B                             ;     rl c
080B                             ;     jr nc,$+4
080B                             ;     set 0,l
080B                             ;     ld a,e
080B                             ;     add a,a
080B                             ;     ld e,a
080B                             ;     add a,a
080B                             ;     bit 0,l
080B                             ;     jr nz,$+5
080B                             ;     sub c
080B                             ;     jr nc,squareRoot4
080B                             ;     ld a,c
080B                             ;     sub e
080B                             ;     inc e
080B                             ;     sub e
080B                             ;     ld c,a
080B                             ; squareRoot4:
080B                             ;     djnz squareRoot1
080B                             ;     bit 0,l
080B                             ;     jr z,squareRoot5
080B                             ;     inc b
080B                             ; squareRoot5:
080B                             ;     ld d,0
080B                             ;     ret
080B                             ; print decimal
080B                             ; hl = value
080B                PRTDEC:      
080B   CB 7C                  BIT   7,h   
080D   28 0B                  JR   z,prtdec0   
080F   3E 2D                  LD   a,"-"   
0811   CD 85 00               CALL   putchar   
0814   AF                     XOR   a   
0815   95                     SUB   l   
0816   6F                     LD   l,a   
0817   9F                     SBC   a,a   
0818   94                     SUB   h   
0819   67                     LD   h,a   
081A                PRTDEC0:      
081A   C5                     PUSH   bc   
081B   0E 00                  LD   c,0   ; leading zeros flag = false
081D   11 F0 D8               LD   de,-10000   
0820   CD 3C 08               CALL   prtdec1   
0823   11 18 FC               LD   de,-1000   
0826   CD 3C 08               CALL   prtdec1   
0829   11 9C FF               LD   de,-100   
082C   CD 3C 08               CALL   prtdec1   
082F   1E F6                  LD   e,-10   
0831   CD 3C 08               CALL   prtdec1   
0834   0C                     INC   c   ; flag = true for at least digit
0835   1E FF                  LD   e,-1   
0837   CD 3C 08               CALL   prtdec1   
083A   C1                     POP   bc   
083B   C9                     RET      
083C                PRTDEC1:      
083C   06 2F                  LD   b,"0"-1   
083E                PRTDEC2:      
083E   04                     INC   b   
083F   19                     ADD   hl,de   
0840   38 FC                  JR   c,prtdec2   
0842   ED 52                  SBC   hl,de   
0844   3E 30                  LD   a,"0"   
0846   B8                     CP   b   
0847   20 05                  JR   nz,prtdec3   
0849   AF                     XOR   a   
084A   B1                     OR   c   
084B   C8                     RET   z   
084C   18 01                  JR   prtdec4   
084E                PRTDEC3:      
084E   0C                     INC   c   
084F                PRTDEC4:      
084F   78                     LD   a,b   
0850   C3 85 00               JP   putchar   
0853                PRTHEX:      ; display hl as a 16-bit number in hex.
0853   C5                     PUSH   bc   ; preserve the IP
0854   7C                     LD   a,h   
0855   CD 5E 08               CALL   prthex2   
0858   7D                     LD   a,l   
0859   CD 5E 08               CALL   prthex2   
085C   C1                     POP   bc   
085D   C9                     RET      
085E                PRTHEX2:      
085E   4F                     LD   c,a   
085F   1F                     RRA      
0860   1F                     RRA      
0861   1F                     RRA      
0862   1F                     RRA      
0863   CD 67 08               CALL   prthex3   
0866   79                     LD   a,c   
0867                PRTHEX3:      
0867   E6 0F                  AND   0x0F   
0869   C6 90                  ADD   a,0x90   
086B   27                     DAA      
086C   CE 40                  ADC   a,0x40   
086E   27                     DAA      
086F   C3 85 00               JP   putchar   
0872                PRTSTR0:      
0872   CD 85 00               CALL   putchar   
0875   23                     INC   hl   
0876                PRTSTR:      
0876   7E                     LD   a,(hl)   
0877   B7                     OR   a   
0878   20 F8                  JR   nz,prtstr0   
087A   C9                     RET      
087B                             ; **************************************************************************
087B                             ; calculate nesting value
087B                             ; a is char to be tested,
087B                             ; e is the nesting value (initially 0)
087B                             ; e is increased by ( and [
087B                             ; e is decreased by ) and ]
087B                             ; e has its bit 7 toggled by `
087B                             ; limited to 127 levels
087B                             ; **************************************************************************
087B                NESTING:      
087B   FE 22                  CP   DQUOTE   ; quote char
087D   28 06                  JR   z,nesting0   
087F   FE 60                  CP   "`"   ; quote char
0881   28 02                  JR   z,nesting0   
0883   18 0A                  JR   nesting1   
0885                NESTING0:      
0885   CB 7B                  BIT   7,e   
0887   28 03                  JR   z,nesting1a   
0889   CB BB                  RES   7,e   
088B   C9                     RET      
088C                NESTING1A:      
088C   CB FB                  SET   7,e   
088E   C9                     RET      
088F                NESTING1:      
088F   CB 7B                  BIT   7,e   
0891   C0                     RET   nz   
0892   FE 7B                  CP   "{"   
0894   28 08                  JR   z,nesting2   
0896   FE 5B                  CP   "["   
0898   28 04                  JR   z,nesting2   
089A   FE 28                  CP   "("   
089C   20 02                  JR   nz,nesting3   
089E                NESTING2:      
089E   1C                     INC   e   
089F   C9                     RET      
08A0                NESTING3:      
08A0   FE 7D                  CP   "}"   
08A2   28 07                  JR   z,nesting4   
08A4   FE 5D                  CP   "]"   
08A6   28 03                  JR   z,nesting4   
08A8   FE 29                  CP   ")"   
08AA   C0                     RET   nz   
08AB                NESTING4:      
08AB   1D                     DEC   e   
08AC   C9                     RET      
08AD                PROMPT:      
08AD   CD BD 08               CALL   printStr   
08B0   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08B5   C9                     RET      
08B6                CRLF:        
08B6   CD BD 08               CALL   printStr   
08B9   0D 0A 00               .CSTR   "\r\n"   
08BC   C9                     RET      
08BD                             ; prints a null teminated string
08BD                             ; the string should be immedaitely following the call
08BD                PRINTSTR:      
08BD   E3                     EX   (sp),hl   ; swap			
08BE   CD 76 08               CALL   prtstr   
08C1   23                     INC   hl   ; inc past NUL
08C2   E3                     EX   (sp),hl   ; put it back	
08C3   C9                     RET      
08C4                INIT:        
08C4   DD 2A EA 34            LD   ix,(vNext)   
08C8   FD 21 80 33            LD   iy,STACK   
08CC   21 80 01               LD   hl,isysVars   
08CF   11 E6 34               LD   de,sysVars   
08D2   01 10 00               LD   bc,8 * 2   
08D5   ED B0                  LDIR      
08D7   21 00 34               LD   hl,vars   ; 52 vars LO HI
08DA   06 34                  LD   b,26*2   
08DC   AF                     XOR   a   
08DD                INIT0:       
08DD   77                     LD   (hl),a   
08DE   23                     INC   hl   
08DF   10 FC                  DJNZ   init0   
08E1   C9                     RET      
08E2                START:       
08E2   31 80 33               LD   sp,STACK   ; start of monty
08E5   CD C4 08               CALL   init   ; setups
08E8   CD BD 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
08EB   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
08F8                INTERPRET:      
08F8   CD AD 08               CALL   prompt   
08FB   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
08FE   ED 43 E8 34            LD   (vTIBPtr),bc   
0902                INTERPRET2:      ; calc nesting (a macro might have changed it)
0902   1E 00                  LD   e,0   ; initilize nesting value
0904   C5                     PUSH   bc   ; save offset into TIB,
0905                             ; bc is also the count of chars in TIB
0905   21 00 35               LD   hl,TIB   ; hl is start of TIB
0908   18 06                  JR   interpret4   
090A                INTERPRET3:      
090A   7E                     LD   a,(hl)   ; a = char in TIB
090B   23                     INC   hl   ; inc pointer into TIB
090C   0B                     DEC   bc   ; dec count of chars in TIB
090D   CD 7B 08               CALL   nesting   ; update nesting value
0910                INTERPRET4:      
0910   79                     LD   a,c   ; is count zero?
0911   B0                     OR   b   
0912   20 F6                  JR   nz,interpret3   ; if not loop
0914   C1                     POP   bc   ; restore offset into TIB
0915                INTERPRET5:      
0915   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0918   FE 20                  CP   $20   ; compare to space
091A   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
091C   FE 00                  CP   $0   ; is it end of string? NUL end of string
091E                             ; ???? NEEDED?
091E   28 27                  JR   z,interpret8   
0920   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0922   28 10                  JR   z,interpret7   ; if anything else its macro/control
0924                             ; macro
0924                             ;  ld (vTIBPtr),bc
0924                             ;  ld hl,ctrlCodes
0924                             ;  add a,l			            ; look up key of macros
0924                             ;  ld l,a
0924                             ;  ld e,(hl)
0924                             ;  ld a,e
0924                             ;  or a
0924                             ;  jr z,macro1
0924                             ;  ld d,msb(macros)
0924                             ;  push de
0924                             ;  call call		            ; monty exec_ operation and jump to it
0924                             ;  db DC1,0
0924                             ; macro1:
0924                             ;  ld bc,(vTIBPtr)
0924   18 DC                  JR   interpret2   
0926                INTERPRET6:      
0926   21 00 35               LD   hl,TIB   
0929   09                     ADD   hl,bc   
092A   77                     LD   (hl),a   ; store the character in textbuf
092B   03                     INC   bc   
092C   CD 85 00               CALL   putchar   ; echo character to screen
092F   CD 7B 08               CALL   nesting   
0932   18 E1                  JR   interpret5   ; wait for next character
0934                INTERPRET7:      
0934   21 00 35               LD   hl,TIB   
0937   09                     ADD   hl,bc   
0938   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
093A   23                     INC   hl   
093B   36 0A                  LD   (hl),"\n"   
093D   23                     INC   hl   
093E   03                     INC   bc   
093F   03                     INC   bc   
0940   CD B6 08               CALL   crlf   ; echo character to screen
0943   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0944   B7                     OR   a   
0945   20 CE                  JR   nz,interpret5   
0947                INTERPRET8:      
0947   ED 43 E8 34            LD   (vTIBPtr),bc   
094B   01 00 35               LD   bc,TIB   ; Instructions stored on heap at address HERE,
094E                             ; we pressed enter
094E   0B                     DEC   bc   
094F                NEXT:        
094F   03                     INC   bc   ; Increment the IP
0950   0A                     LD   a,(bc)   ; Get the next character and dispatch
0951   FE 20                  CP   " "   ; whitespace?
0953   28 FA                  JR   z,next   ; space? ignore
0955   38 07                  JR   c,next1   
0957   6F                     LD   l,a   ; index into table
0958   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
095A   6E                     LD   l,(hl)   ; get low jump address
095B   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
095D   E9                     JP   (hl)   ; Jump to routine
095E                NEXT1:       
095E   FE 00                  CP   NUL   ; end of input string?
0960   28 03                  JR   z,exit_   
0962   C3 F8 08               JP   interpret   ; no, other whitespace, macros?
0965                EXIT_:       
0965   60 69                  LD   hl,bc   
0967   E9                     JP   (hl)   
0968                ERROR:       
0968   CD BD 08               CALL   printStr   
096B   45 72 72 6F 72 20 00   .CSTR   "Error "   
0972   CD 0B 08               CALL   prtdec   
0975   C3 F8 08               JP   interpret   
0978                          ALIGN   $100   
0A00                TESTSSTART:      
0A00                          ;*Macro unroll:  test "1 { 10. } \\r", 1
0A00   31 80 33               LD   SP,STACK   
0A03   CD C4 08               CALL   init   
0A06   CD A4 32               CALL   execStr   
0A09   31 20 7B 20 31 30 2E 20 7D 20 5C 72 00 .CSTR   "1 { 10. } \\r"   
0A16                          ;*Macro unroll:  expect "1 { 10. } \\r",1
0A16   E1                     POP   HL   
0A17   E5                     PUSH   HL   
0A18   11 01 00               LD   DE,1   
0A1B   B7                     OR   A   
0A1C   ED 52                  SBC   HL,DE   
0A1E   7D                     LD   A,L   
0A1F   B4                     OR   H   
0A20   28 57                  JR   Z,expectM_0_2136S43   
0A22   CD BD 08               CALL   printStr   
0A25   43 6F 64 65 3A 20 31 20 7B 20 31 30 2E 20 7D 20 5C 72 00 .CSTR   "Code: ","1 { 10. } \\r"   
0A38   CD BD 08               CALL   printStr   
0A3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0A4A   21 01 00               LD   HL,1   
0A4D   CD 0B 08               CALL   prtdec   
0A50   CD BD 08               CALL   printStr   
0A53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0A60   E1                     POP   hl   
0A61   E5                     PUSH   hl   
0A62   CD 0B 08               CALL   prtdec   
0A65   E1                     POP   hl   
0A66   CD BD 08               CALL   printStr   
0A69   20 28 23 00            .CSTR   " (#"   
0A6D   CD 53 08               CALL   prthex   
0A70   CD BD 08               CALL   printStr   
0A73   29 0D 0A 00            .CSTR   ")\r\n"   
0A77   76                     HALT      
0A78   00                     .CSTR      
0A79                EXPECTM_0_2136S43:      
0A79   E1                     POP   HL   
0A7A                             ; 
0A7A                          ;*Macro unroll:  test "\\F", false
0A7A   31 80 33               LD   SP,STACK   
0A7D   CD C4 08               CALL   init   
0A80   CD A4 32               CALL   execStr   
0A83   5C 46 00               .CSTR   "\\F"   
0A86                          ;*Macro unroll:  expect "\\F",false
0A86   E1                     POP   HL   
0A87   E5                     PUSH   HL   
0A88   11 00 00               LD   DE,false   
0A8B   B7                     OR   A   
0A8C   ED 52                  SBC   HL,DE   
0A8E   7D                     LD   A,L   
0A8F   B4                     OR   H   
0A90   28 4D                  JR   Z,expectM_0_2138S43   
0A92   CD BD 08               CALL   printStr   
0A95   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0A9E   CD BD 08               CALL   printStr   
0AA1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0AB0   21 00 00               LD   HL,false   
0AB3   CD 0B 08               CALL   prtdec   
0AB6   CD BD 08               CALL   printStr   
0AB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0AC6   E1                     POP   hl   
0AC7   E5                     PUSH   hl   
0AC8   CD 0B 08               CALL   prtdec   
0ACB   E1                     POP   hl   
0ACC   CD BD 08               CALL   printStr   
0ACF   20 28 23 00            .CSTR   " (#"   
0AD3   CD 53 08               CALL   prthex   
0AD6   CD BD 08               CALL   printStr   
0AD9   29 0D 0A 00            .CSTR   ")\r\n"   
0ADD   76                     HALT      
0ADE   00                     .CSTR      
0ADF                EXPECTM_0_2138S43:      
0ADF   E1                     POP   HL   
0AE0                          ;*Macro unroll:  test "\\T", true
0AE0   31 80 33               LD   SP,STACK   
0AE3   CD C4 08               CALL   init   
0AE6   CD A4 32               CALL   execStr   
0AE9   5C 54 00               .CSTR   "\\T"   
0AEC                          ;*Macro unroll:  expect "\\T",true
0AEC   E1                     POP   HL   
0AED   E5                     PUSH   HL   
0AEE   11 FF FF               LD   DE,true   
0AF1   B7                     OR   A   
0AF2   ED 52                  SBC   HL,DE   
0AF4   7D                     LD   A,L   
0AF5   B4                     OR   H   
0AF6   28 4D                  JR   Z,expectM_0_2139S43   
0AF8   CD BD 08               CALL   printStr   
0AFB   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0B04   CD BD 08               CALL   printStr   
0B07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B16   21 FF FF               LD   HL,true   
0B19   CD 0B 08               CALL   prtdec   
0B1C   CD BD 08               CALL   printStr   
0B1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B2C   E1                     POP   hl   
0B2D   E5                     PUSH   hl   
0B2E   CD 0B 08               CALL   prtdec   
0B31   E1                     POP   hl   
0B32   CD BD 08               CALL   printStr   
0B35   20 28 23 00            .CSTR   " (#"   
0B39   CD 53 08               CALL   prthex   
0B3C   CD BD 08               CALL   printStr   
0B3F   29 0D 0A 00            .CSTR   ")\r\n"   
0B43   76                     HALT      
0B44   00                     .CSTR      
0B45                EXPECTM_0_2139S43:      
0B45   E1                     POP   HL   
0B46                          ;*Macro unroll:  test "1", 1
0B46   31 80 33               LD   SP,STACK   
0B49   CD C4 08               CALL   init   
0B4C   CD A4 32               CALL   execStr   
0B4F   31 00                  .CSTR   "1"   
0B51                          ;*Macro unroll:  expect "1",1
0B51   E1                     POP   HL   
0B52   E5                     PUSH   HL   
0B53   11 01 00               LD   DE,1   
0B56   B7                     OR   A   
0B57   ED 52                  SBC   HL,DE   
0B59   7D                     LD   A,L   
0B5A   B4                     OR   H   
0B5B   28 4C                  JR   Z,expectM_0_2140S43   
0B5D   CD BD 08               CALL   printStr   
0B60   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0B68   CD BD 08               CALL   printStr   
0B6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B7A   21 01 00               LD   HL,1   
0B7D   CD 0B 08               CALL   prtdec   
0B80   CD BD 08               CALL   printStr   
0B83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B90   E1                     POP   hl   
0B91   E5                     PUSH   hl   
0B92   CD 0B 08               CALL   prtdec   
0B95   E1                     POP   hl   
0B96   CD BD 08               CALL   printStr   
0B99   20 28 23 00            .CSTR   " (#"   
0B9D   CD 53 08               CALL   prthex   
0BA0   CD BD 08               CALL   printStr   
0BA3   29 0D 0A 00            .CSTR   ")\r\n"   
0BA7   76                     HALT      
0BA8   00                     .CSTR      
0BA9                EXPECTM_0_2140S43:      
0BA9   E1                     POP   HL   
0BAA                          ;*Macro unroll:  test "2", 2
0BAA   31 80 33               LD   SP,STACK   
0BAD   CD C4 08               CALL   init   
0BB0   CD A4 32               CALL   execStr   
0BB3   32 00                  .CSTR   "2"   
0BB5                          ;*Macro unroll:  expect "2",2
0BB5   E1                     POP   HL   
0BB6   E5                     PUSH   HL   
0BB7   11 02 00               LD   DE,2   
0BBA   B7                     OR   A   
0BBB   ED 52                  SBC   HL,DE   
0BBD   7D                     LD   A,L   
0BBE   B4                     OR   H   
0BBF   28 4C                  JR   Z,expectM_0_2141S43   
0BC1   CD BD 08               CALL   printStr   
0BC4   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0BCC   CD BD 08               CALL   printStr   
0BCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BDE   21 02 00               LD   HL,2   
0BE1   CD 0B 08               CALL   prtdec   
0BE4   CD BD 08               CALL   printStr   
0BE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BF4   E1                     POP   hl   
0BF5   E5                     PUSH   hl   
0BF6   CD 0B 08               CALL   prtdec   
0BF9   E1                     POP   hl   
0BFA   CD BD 08               CALL   printStr   
0BFD   20 28 23 00            .CSTR   " (#"   
0C01   CD 53 08               CALL   prthex   
0C04   CD BD 08               CALL   printStr   
0C07   29 0D 0A 00            .CSTR   ")\r\n"   
0C0B   76                     HALT      
0C0C   00                     .CSTR      
0C0D                EXPECTM_0_2141S43:      
0C0D   E1                     POP   HL   
0C0E                          ;*Macro unroll:  test "1", 1
0C0E   31 80 33               LD   SP,STACK   
0C11   CD C4 08               CALL   init   
0C14   CD A4 32               CALL   execStr   
0C17   31 00                  .CSTR   "1"   
0C19                          ;*Macro unroll:  expect "1",1
0C19   E1                     POP   HL   
0C1A   E5                     PUSH   HL   
0C1B   11 01 00               LD   DE,1   
0C1E   B7                     OR   A   
0C1F   ED 52                  SBC   HL,DE   
0C21   7D                     LD   A,L   
0C22   B4                     OR   H   
0C23   28 4C                  JR   Z,expectM_0_2142S43   
0C25   CD BD 08               CALL   printStr   
0C28   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0C30   CD BD 08               CALL   printStr   
0C33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C42   21 01 00               LD   HL,1   
0C45   CD 0B 08               CALL   prtdec   
0C48   CD BD 08               CALL   printStr   
0C4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C58   E1                     POP   hl   
0C59   E5                     PUSH   hl   
0C5A   CD 0B 08               CALL   prtdec   
0C5D   E1                     POP   hl   
0C5E   CD BD 08               CALL   printStr   
0C61   20 28 23 00            .CSTR   " (#"   
0C65   CD 53 08               CALL   prthex   
0C68   CD BD 08               CALL   printStr   
0C6B   29 0D 0A 00            .CSTR   ")\r\n"   
0C6F   76                     HALT      
0C70   00                     .CSTR      
0C71                EXPECTM_0_2142S43:      
0C71   E1                     POP   HL   
0C72                          ;*Macro unroll:  test "0", 0
0C72   31 80 33               LD   SP,STACK   
0C75   CD C4 08               CALL   init   
0C78   CD A4 32               CALL   execStr   
0C7B   30 00                  .CSTR   "0"   
0C7D                          ;*Macro unroll:  expect "0",0
0C7D   E1                     POP   HL   
0C7E   E5                     PUSH   HL   
0C7F   11 00 00               LD   DE,0   
0C82   B7                     OR   A   
0C83   ED 52                  SBC   HL,DE   
0C85   7D                     LD   A,L   
0C86   B4                     OR   H   
0C87   28 4C                  JR   Z,expectM_0_2143S43   
0C89   CD BD 08               CALL   printStr   
0C8C   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0C94   CD BD 08               CALL   printStr   
0C97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CA6   21 00 00               LD   HL,0   
0CA9   CD 0B 08               CALL   prtdec   
0CAC   CD BD 08               CALL   printStr   
0CAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CBC   E1                     POP   hl   
0CBD   E5                     PUSH   hl   
0CBE   CD 0B 08               CALL   prtdec   
0CC1   E1                     POP   hl   
0CC2   CD BD 08               CALL   printStr   
0CC5   20 28 23 00            .CSTR   " (#"   
0CC9   CD 53 08               CALL   prthex   
0CCC   CD BD 08               CALL   printStr   
0CCF   29 0D 0A 00            .CSTR   ")\r\n"   
0CD3   76                     HALT      
0CD4   00                     .CSTR      
0CD5                EXPECTM_0_2143S43:      
0CD5   E1                     POP   HL   
0CD6                          ;*Macro unroll:  test "10", 10
0CD6   31 80 33               LD   SP,STACK   
0CD9   CD C4 08               CALL   init   
0CDC   CD A4 32               CALL   execStr   
0CDF   31 30 00               .CSTR   "10"   
0CE2                          ;*Macro unroll:  expect "10",10
0CE2   E1                     POP   HL   
0CE3   E5                     PUSH   HL   
0CE4   11 0A 00               LD   DE,10   
0CE7   B7                     OR   A   
0CE8   ED 52                  SBC   HL,DE   
0CEA   7D                     LD   A,L   
0CEB   B4                     OR   H   
0CEC   28 4D                  JR   Z,expectM_0_2144S43   
0CEE   CD BD 08               CALL   printStr   
0CF1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0CFA   CD BD 08               CALL   printStr   
0CFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D0C   21 0A 00               LD   HL,10   
0D0F   CD 0B 08               CALL   prtdec   
0D12   CD BD 08               CALL   printStr   
0D15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D22   E1                     POP   hl   
0D23   E5                     PUSH   hl   
0D24   CD 0B 08               CALL   prtdec   
0D27   E1                     POP   hl   
0D28   CD BD 08               CALL   printStr   
0D2B   20 28 23 00            .CSTR   " (#"   
0D2F   CD 53 08               CALL   prthex   
0D32   CD BD 08               CALL   printStr   
0D35   29 0D 0A 00            .CSTR   ")\r\n"   
0D39   76                     HALT      
0D3A   00                     .CSTR      
0D3B                EXPECTM_0_2144S43:      
0D3B   E1                     POP   HL   
0D3C                          ;*Macro unroll:  test "123", 123
0D3C   31 80 33               LD   SP,STACK   
0D3F   CD C4 08               CALL   init   
0D42   CD A4 32               CALL   execStr   
0D45   31 32 33 00            .CSTR   "123"   
0D49                          ;*Macro unroll:  expect "123",123
0D49   E1                     POP   HL   
0D4A   E5                     PUSH   HL   
0D4B   11 7B 00               LD   DE,123   
0D4E   B7                     OR   A   
0D4F   ED 52                  SBC   HL,DE   
0D51   7D                     LD   A,L   
0D52   B4                     OR   H   
0D53   28 4E                  JR   Z,expectM_0_2145S43   
0D55   CD BD 08               CALL   printStr   
0D58   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0D62   CD BD 08               CALL   printStr   
0D65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D74   21 7B 00               LD   HL,123   
0D77   CD 0B 08               CALL   prtdec   
0D7A   CD BD 08               CALL   printStr   
0D7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D8A   E1                     POP   hl   
0D8B   E5                     PUSH   hl   
0D8C   CD 0B 08               CALL   prtdec   
0D8F   E1                     POP   hl   
0D90   CD BD 08               CALL   printStr   
0D93   20 28 23 00            .CSTR   " (#"   
0D97   CD 53 08               CALL   prthex   
0D9A   CD BD 08               CALL   printStr   
0D9D   29 0D 0A 00            .CSTR   ")\r\n"   
0DA1   76                     HALT      
0DA2   00                     .CSTR      
0DA3                EXPECTM_0_2145S43:      
0DA3   E1                     POP   HL   
0DA4                          ;*Macro unroll:  test "-1",-1
0DA4   31 80 33               LD   SP,STACK   
0DA7   CD C4 08               CALL   init   
0DAA   CD A4 32               CALL   execStr   
0DAD   2D 31 00               .CSTR   "-1"   
0DB0                          ;*Macro unroll:  expect "-1",-1
0DB0   E1                     POP   HL   
0DB1   E5                     PUSH   HL   
0DB2   11 FF FF               LD   DE,-1   
0DB5   B7                     OR   A   
0DB6   ED 52                  SBC   HL,DE   
0DB8   7D                     LD   A,L   
0DB9   B4                     OR   H   
0DBA   28 4D                  JR   Z,expectM_0_2146S43   
0DBC   CD BD 08               CALL   printStr   
0DBF   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0DC8   CD BD 08               CALL   printStr   
0DCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DDA   21 FF FF               LD   HL,-1   
0DDD   CD 0B 08               CALL   prtdec   
0DE0   CD BD 08               CALL   printStr   
0DE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DF0   E1                     POP   hl   
0DF1   E5                     PUSH   hl   
0DF2   CD 0B 08               CALL   prtdec   
0DF5   E1                     POP   hl   
0DF6   CD BD 08               CALL   printStr   
0DF9   20 28 23 00            .CSTR   " (#"   
0DFD   CD 53 08               CALL   prthex   
0E00   CD BD 08               CALL   printStr   
0E03   29 0D 0A 00            .CSTR   ")\r\n"   
0E07   76                     HALT      
0E08   00                     .CSTR      
0E09                EXPECTM_0_2146S43:      
0E09   E1                     POP   HL   
0E0A                          ;*Macro unroll:  test "''", 0
0E0A   31 80 33               LD   SP,STACK   
0E0D   CD C4 08               CALL   init   
0E10   CD A4 32               CALL   execStr   
0E13   27 27 00               .CSTR   "''"   
0E16                          ;*Macro unroll:  expect "''",0
0E16   E1                     POP   HL   
0E17   E5                     PUSH   HL   
0E18   11 00 00               LD   DE,0   
0E1B   B7                     OR   A   
0E1C   ED 52                  SBC   HL,DE   
0E1E   7D                     LD   A,L   
0E1F   B4                     OR   H   
0E20   28 4D                  JR   Z,expectM_0_2147S43   
0E22   CD BD 08               CALL   printStr   
0E25   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0E2E   CD BD 08               CALL   printStr   
0E31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E40   21 00 00               LD   HL,0   
0E43   CD 0B 08               CALL   prtdec   
0E46   CD BD 08               CALL   printStr   
0E49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E56   E1                     POP   hl   
0E57   E5                     PUSH   hl   
0E58   CD 0B 08               CALL   prtdec   
0E5B   E1                     POP   hl   
0E5C   CD BD 08               CALL   printStr   
0E5F   20 28 23 00            .CSTR   " (#"   
0E63   CD 53 08               CALL   prthex   
0E66   CD BD 08               CALL   printStr   
0E69   29 0D 0A 00            .CSTR   ")\r\n"   
0E6D   76                     HALT      
0E6E   00                     .CSTR      
0E6F                EXPECTM_0_2147S43:      
0E6F   E1                     POP   HL   
0E70                          ;*Macro unroll:  test "'a'", $61
0E70   31 80 33               LD   SP,STACK   
0E73   CD C4 08               CALL   init   
0E76   CD A4 32               CALL   execStr   
0E79   27 61 27 00            .CSTR   "'a'"   
0E7D                          ;*Macro unroll:  expect "'a'",$61
0E7D   E1                     POP   HL   
0E7E   E5                     PUSH   HL   
0E7F   11 61 00               LD   DE,$61   
0E82   B7                     OR   A   
0E83   ED 52                  SBC   HL,DE   
0E85   7D                     LD   A,L   
0E86   B4                     OR   H   
0E87   28 4E                  JR   Z,expectM_0_2148S43   
0E89   CD BD 08               CALL   printStr   
0E8C   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0E96   CD BD 08               CALL   printStr   
0E99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EA8   21 61 00               LD   HL,$61   
0EAB   CD 0B 08               CALL   prtdec   
0EAE   CD BD 08               CALL   printStr   
0EB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EBE   E1                     POP   hl   
0EBF   E5                     PUSH   hl   
0EC0   CD 0B 08               CALL   prtdec   
0EC3   E1                     POP   hl   
0EC4   CD BD 08               CALL   printStr   
0EC7   20 28 23 00            .CSTR   " (#"   
0ECB   CD 53 08               CALL   prthex   
0ECE   CD BD 08               CALL   printStr   
0ED1   29 0D 0A 00            .CSTR   ")\r\n"   
0ED5   76                     HALT      
0ED6   00                     .CSTR      
0ED7                EXPECTM_0_2148S43:      
0ED7   E1                     POP   HL   
0ED8                          ;*Macro unroll:  test "'\\''", $27
0ED8   31 80 33               LD   SP,STACK   
0EDB   CD C4 08               CALL   init   
0EDE   CD A4 32               CALL   execStr   
0EE1   27 5C 27 27 00         .CSTR   "'\\''"   
0EE6                          ;*Macro unroll:  expect "'\\''",$27
0EE6   E1                     POP   HL   
0EE7   E5                     PUSH   HL   
0EE8   11 27 00               LD   DE,$27   
0EEB   B7                     OR   A   
0EEC   ED 52                  SBC   HL,DE   
0EEE   7D                     LD   A,L   
0EEF   B4                     OR   H   
0EF0   28 4F                  JR   Z,expectM_0_2149S43   
0EF2   CD BD 08               CALL   printStr   
0EF5   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F00   CD BD 08               CALL   printStr   
0F03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F12   21 27 00               LD   HL,$27   
0F15   CD 0B 08               CALL   prtdec   
0F18   CD BD 08               CALL   printStr   
0F1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F28   E1                     POP   hl   
0F29   E5                     PUSH   hl   
0F2A   CD 0B 08               CALL   prtdec   
0F2D   E1                     POP   hl   
0F2E   CD BD 08               CALL   printStr   
0F31   20 28 23 00            .CSTR   " (#"   
0F35   CD 53 08               CALL   prthex   
0F38   CD BD 08               CALL   printStr   
0F3B   29 0D 0A 00            .CSTR   ")\r\n"   
0F3F   76                     HALT      
0F40   00                     .CSTR      
0F41                EXPECTM_0_2149S43:      
0F41   E1                     POP   HL   
0F42                          ;*Macro unroll:  test "#10", $10
0F42   31 80 33               LD   SP,STACK   
0F45   CD C4 08               CALL   init   
0F48   CD A4 32               CALL   execStr   
0F4B   23 31 30 00            .CSTR   "#10"   
0F4F                          ;*Macro unroll:  expect "#10",$10
0F4F   E1                     POP   HL   
0F50   E5                     PUSH   HL   
0F51   11 10 00               LD   DE,$10   
0F54   B7                     OR   A   
0F55   ED 52                  SBC   HL,DE   
0F57   7D                     LD   A,L   
0F58   B4                     OR   H   
0F59   28 4E                  JR   Z,expectM_0_2150S43   
0F5B   CD BD 08               CALL   printStr   
0F5E   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0F68   CD BD 08               CALL   printStr   
0F6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F7A   21 10 00               LD   HL,$10   
0F7D   CD 0B 08               CALL   prtdec   
0F80   CD BD 08               CALL   printStr   
0F83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F90   E1                     POP   hl   
0F91   E5                     PUSH   hl   
0F92   CD 0B 08               CALL   prtdec   
0F95   E1                     POP   hl   
0F96   CD BD 08               CALL   printStr   
0F99   20 28 23 00            .CSTR   " (#"   
0F9D   CD 53 08               CALL   prthex   
0FA0   CD BD 08               CALL   printStr   
0FA3   29 0D 0A 00            .CSTR   ")\r\n"   
0FA7   76                     HALT      
0FA8   00                     .CSTR      
0FA9                EXPECTM_0_2150S43:      
0FA9   E1                     POP   HL   
0FAA                          ;*Macro unroll:  test "#FF", $FF
0FAA   31 80 33               LD   SP,STACK   
0FAD   CD C4 08               CALL   init   
0FB0   CD A4 32               CALL   execStr   
0FB3   23 46 46 00            .CSTR   "#FF"   
0FB7                          ;*Macro unroll:  expect "#FF",$FF
0FB7   E1                     POP   HL   
0FB8   E5                     PUSH   HL   
0FB9   11 FF 00               LD   DE,$FF   
0FBC   B7                     OR   A   
0FBD   ED 52                  SBC   HL,DE   
0FBF   7D                     LD   A,L   
0FC0   B4                     OR   H   
0FC1   28 4E                  JR   Z,expectM_0_2151S43   
0FC3   CD BD 08               CALL   printStr   
0FC6   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
0FD0   CD BD 08               CALL   printStr   
0FD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FE2   21 FF 00               LD   HL,$FF   
0FE5   CD 0B 08               CALL   prtdec   
0FE8   CD BD 08               CALL   printStr   
0FEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FF8   E1                     POP   hl   
0FF9   E5                     PUSH   hl   
0FFA   CD 0B 08               CALL   prtdec   
0FFD   E1                     POP   hl   
0FFE   CD BD 08               CALL   printStr   
1001   20 28 23 00            .CSTR   " (#"   
1005   CD 53 08               CALL   prthex   
1008   CD BD 08               CALL   printStr   
100B   29 0D 0A 00            .CSTR   ")\r\n"   
100F   76                     HALT      
1010   00                     .CSTR      
1011                EXPECTM_0_2151S43:      
1011   E1                     POP   HL   
1012                          ;*Macro unroll:  test "-1 2 +",1
1012   31 80 33               LD   SP,STACK   
1015   CD C4 08               CALL   init   
1018   CD A4 32               CALL   execStr   
101B   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1022                          ;*Macro unroll:  expect "-1 2 +",1
1022   E1                     POP   HL   
1023   E5                     PUSH   HL   
1024   11 01 00               LD   DE,1   
1027   B7                     OR   A   
1028   ED 52                  SBC   HL,DE   
102A   7D                     LD   A,L   
102B   B4                     OR   H   
102C   28 51                  JR   Z,expectM_0_2152S43   
102E   CD BD 08               CALL   printStr   
1031   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
103E   CD BD 08               CALL   printStr   
1041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1050   21 01 00               LD   HL,1   
1053   CD 0B 08               CALL   prtdec   
1056   CD BD 08               CALL   printStr   
1059   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1066   E1                     POP   hl   
1067   E5                     PUSH   hl   
1068   CD 0B 08               CALL   prtdec   
106B   E1                     POP   hl   
106C   CD BD 08               CALL   printStr   
106F   20 28 23 00            .CSTR   " (#"   
1073   CD 53 08               CALL   prthex   
1076   CD BD 08               CALL   printStr   
1079   29 0D 0A 00            .CSTR   ")\r\n"   
107D   76                     HALT      
107E   00                     .CSTR      
107F                EXPECTM_0_2152S43:      
107F   E1                     POP   HL   
1080                          ;*Macro unroll:  test "-1 1 +",0
1080   31 80 33               LD   SP,STACK   
1083   CD C4 08               CALL   init   
1086   CD A4 32               CALL   execStr   
1089   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1090                          ;*Macro unroll:  expect "-1 1 +",0
1090   E1                     POP   HL   
1091   E5                     PUSH   HL   
1092   11 00 00               LD   DE,0   
1095   B7                     OR   A   
1096   ED 52                  SBC   HL,DE   
1098   7D                     LD   A,L   
1099   B4                     OR   H   
109A   28 51                  JR   Z,expectM_0_2153S43   
109C   CD BD 08               CALL   printStr   
109F   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
10AC   CD BD 08               CALL   printStr   
10AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10BE   21 00 00               LD   HL,0   
10C1   CD 0B 08               CALL   prtdec   
10C4   CD BD 08               CALL   printStr   
10C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10D4   E1                     POP   hl   
10D5   E5                     PUSH   hl   
10D6   CD 0B 08               CALL   prtdec   
10D9   E1                     POP   hl   
10DA   CD BD 08               CALL   printStr   
10DD   20 28 23 00            .CSTR   " (#"   
10E1   CD 53 08               CALL   prthex   
10E4   CD BD 08               CALL   printStr   
10E7   29 0D 0A 00            .CSTR   ")\r\n"   
10EB   76                     HALT      
10EC   00                     .CSTR      
10ED                EXPECTM_0_2153S43:      
10ED   E1                     POP   HL   
10EE                          ;*Macro unroll:  test "1 2 +", 3
10EE   31 80 33               LD   SP,STACK   
10F1   CD C4 08               CALL   init   
10F4   CD A4 32               CALL   execStr   
10F7   31 20 32 20 2B 00      .CSTR   "1 2 +"   
10FD                          ;*Macro unroll:  expect "1 2 +",3
10FD   E1                     POP   HL   
10FE   E5                     PUSH   HL   
10FF   11 03 00               LD   DE,3   
1102   B7                     OR   A   
1103   ED 52                  SBC   HL,DE   
1105   7D                     LD   A,L   
1106   B4                     OR   H   
1107   28 50                  JR   Z,expectM_0_2154S43   
1109   CD BD 08               CALL   printStr   
110C   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1118   CD BD 08               CALL   printStr   
111B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
112A   21 03 00               LD   HL,3   
112D   CD 0B 08               CALL   prtdec   
1130   CD BD 08               CALL   printStr   
1133   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1140   E1                     POP   hl   
1141   E5                     PUSH   hl   
1142   CD 0B 08               CALL   prtdec   
1145   E1                     POP   hl   
1146   CD BD 08               CALL   printStr   
1149   20 28 23 00            .CSTR   " (#"   
114D   CD 53 08               CALL   prthex   
1150   CD BD 08               CALL   printStr   
1153   29 0D 0A 00            .CSTR   ")\r\n"   
1157   76                     HALT      
1158   00                     .CSTR      
1159                EXPECTM_0_2154S43:      
1159   E1                     POP   HL   
115A                          ;*Macro unroll:  test "4 1 2 +", 3
115A   31 80 33               LD   SP,STACK   
115D   CD C4 08               CALL   init   
1160   CD A4 32               CALL   execStr   
1163   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
116B                          ;*Macro unroll:  expect "4 1 2 +",3
116B   E1                     POP   HL   
116C   E5                     PUSH   HL   
116D   11 03 00               LD   DE,3   
1170   B7                     OR   A   
1171   ED 52                  SBC   HL,DE   
1173   7D                     LD   A,L   
1174   B4                     OR   H   
1175   28 52                  JR   Z,expectM_0_2155S43   
1177   CD BD 08               CALL   printStr   
117A   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1188   CD BD 08               CALL   printStr   
118B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
119A   21 03 00               LD   HL,3   
119D   CD 0B 08               CALL   prtdec   
11A0   CD BD 08               CALL   printStr   
11A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11B0   E1                     POP   hl   
11B1   E5                     PUSH   hl   
11B2   CD 0B 08               CALL   prtdec   
11B5   E1                     POP   hl   
11B6   CD BD 08               CALL   printStr   
11B9   20 28 23 00            .CSTR   " (#"   
11BD   CD 53 08               CALL   prthex   
11C0   CD BD 08               CALL   printStr   
11C3   29 0D 0A 00            .CSTR   ")\r\n"   
11C7   76                     HALT      
11C8   00                     .CSTR      
11C9                EXPECTM_0_2155S43:      
11C9   E1                     POP   HL   
11CA                          ;*Macro unroll:  test "1 2 +", 3
11CA   31 80 33               LD   SP,STACK   
11CD   CD C4 08               CALL   init   
11D0   CD A4 32               CALL   execStr   
11D3   31 20 32 20 2B 00      .CSTR   "1 2 +"   
11D9                          ;*Macro unroll:  expect "1 2 +",3
11D9   E1                     POP   HL   
11DA   E5                     PUSH   HL   
11DB   11 03 00               LD   DE,3   
11DE   B7                     OR   A   
11DF   ED 52                  SBC   HL,DE   
11E1   7D                     LD   A,L   
11E2   B4                     OR   H   
11E3   28 50                  JR   Z,expectM_0_2156S43   
11E5   CD BD 08               CALL   printStr   
11E8   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
11F4   CD BD 08               CALL   printStr   
11F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1206   21 03 00               LD   HL,3   
1209   CD 0B 08               CALL   prtdec   
120C   CD BD 08               CALL   printStr   
120F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
121C   E1                     POP   hl   
121D   E5                     PUSH   hl   
121E   CD 0B 08               CALL   prtdec   
1221   E1                     POP   hl   
1222   CD BD 08               CALL   printStr   
1225   20 28 23 00            .CSTR   " (#"   
1229   CD 53 08               CALL   prthex   
122C   CD BD 08               CALL   printStr   
122F   29 0D 0A 00            .CSTR   ")\r\n"   
1233   76                     HALT      
1234   00                     .CSTR      
1235                EXPECTM_0_2156S43:      
1235   E1                     POP   HL   
1236                          ;*Macro unroll:  test "123 456 +", 123+456
1236   31 80 33               LD   SP,STACK   
1239   CD C4 08               CALL   init   
123C   CD A4 32               CALL   execStr   
123F   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1249                          ;*Macro unroll:  expect "123 456 +",123+456
1249   E1                     POP   HL   
124A   E5                     PUSH   HL   
124B   11 43 02               LD   DE,123+456   
124E   B7                     OR   A   
124F   ED 52                  SBC   HL,DE   
1251   7D                     LD   A,L   
1252   B4                     OR   H   
1253   28 54                  JR   Z,expectM_0_2157S43   
1255   CD BD 08               CALL   printStr   
1258   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1268   CD BD 08               CALL   printStr   
126B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
127A   21 43 02               LD   HL,123+456   
127D   CD 0B 08               CALL   prtdec   
1280   CD BD 08               CALL   printStr   
1283   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1290   E1                     POP   hl   
1291   E5                     PUSH   hl   
1292   CD 0B 08               CALL   prtdec   
1295   E1                     POP   hl   
1296   CD BD 08               CALL   printStr   
1299   20 28 23 00            .CSTR   " (#"   
129D   CD 53 08               CALL   prthex   
12A0   CD BD 08               CALL   printStr   
12A3   29 0D 0A 00            .CSTR   ")\r\n"   
12A7   76                     HALT      
12A8   00                     .CSTR      
12A9                EXPECTM_0_2157S43:      
12A9   E1                     POP   HL   
12AA                          ;*Macro unroll:  test "64 128 +", 64+128
12AA   31 80 33               LD   SP,STACK   
12AD   CD C4 08               CALL   init   
12B0   CD A4 32               CALL   execStr   
12B3   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12BC                          ;*Macro unroll:  expect "64 128 +",64+128
12BC   E1                     POP   HL   
12BD   E5                     PUSH   HL   
12BE   11 C0 00               LD   DE,64+128   
12C1   B7                     OR   A   
12C2   ED 52                  SBC   HL,DE   
12C4   7D                     LD   A,L   
12C5   B4                     OR   H   
12C6   28 53                  JR   Z,expectM_0_2158S43   
12C8   CD BD 08               CALL   printStr   
12CB   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12DA   CD BD 08               CALL   printStr   
12DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12EC   21 C0 00               LD   HL,64+128   
12EF   CD 0B 08               CALL   prtdec   
12F2   CD BD 08               CALL   printStr   
12F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1302   E1                     POP   hl   
1303   E5                     PUSH   hl   
1304   CD 0B 08               CALL   prtdec   
1307   E1                     POP   hl   
1308   CD BD 08               CALL   printStr   
130B   20 28 23 00            .CSTR   " (#"   
130F   CD 53 08               CALL   prthex   
1312   CD BD 08               CALL   printStr   
1315   29 0D 0A 00            .CSTR   ")\r\n"   
1319   76                     HALT      
131A   00                     .CSTR      
131B                EXPECTM_0_2158S43:      
131B   E1                     POP   HL   
131C                          ;*Macro unroll:  test "-1 -1 -",0
131C   31 80 33               LD   SP,STACK   
131F   CD C4 08               CALL   init   
1322   CD A4 32               CALL   execStr   
1325   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
132D                          ;*Macro unroll:  expect "-1 -1 -",0
132D   E1                     POP   HL   
132E   E5                     PUSH   HL   
132F   11 00 00               LD   DE,0   
1332   B7                     OR   A   
1333   ED 52                  SBC   HL,DE   
1335   7D                     LD   A,L   
1336   B4                     OR   H   
1337   28 52                  JR   Z,expectM_0_2159S43   
1339   CD BD 08               CALL   printStr   
133C   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
134A   CD BD 08               CALL   printStr   
134D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
135C   21 00 00               LD   HL,0   
135F   CD 0B 08               CALL   prtdec   
1362   CD BD 08               CALL   printStr   
1365   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1372   E1                     POP   hl   
1373   E5                     PUSH   hl   
1374   CD 0B 08               CALL   prtdec   
1377   E1                     POP   hl   
1378   CD BD 08               CALL   printStr   
137B   20 28 23 00            .CSTR   " (#"   
137F   CD 53 08               CALL   prthex   
1382   CD BD 08               CALL   printStr   
1385   29 0D 0A 00            .CSTR   ")\r\n"   
1389   76                     HALT      
138A   00                     .CSTR      
138B                EXPECTM_0_2159S43:      
138B   E1                     POP   HL   
138C                          ;*Macro unroll:  test "5 3 -", 2
138C   31 80 33               LD   SP,STACK   
138F   CD C4 08               CALL   init   
1392   CD A4 32               CALL   execStr   
1395   35 20 33 20 2D 00      .CSTR   "5 3 -"   
139B                          ;*Macro unroll:  expect "5 3 -",2
139B   E1                     POP   HL   
139C   E5                     PUSH   HL   
139D   11 02 00               LD   DE,2   
13A0   B7                     OR   A   
13A1   ED 52                  SBC   HL,DE   
13A3   7D                     LD   A,L   
13A4   B4                     OR   H   
13A5   28 50                  JR   Z,expectM_0_2160S43   
13A7   CD BD 08               CALL   printStr   
13AA   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
13B6   CD BD 08               CALL   printStr   
13B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C8   21 02 00               LD   HL,2   
13CB   CD 0B 08               CALL   prtdec   
13CE   CD BD 08               CALL   printStr   
13D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13DE   E1                     POP   hl   
13DF   E5                     PUSH   hl   
13E0   CD 0B 08               CALL   prtdec   
13E3   E1                     POP   hl   
13E4   CD BD 08               CALL   printStr   
13E7   20 28 23 00            .CSTR   " (#"   
13EB   CD 53 08               CALL   prthex   
13EE   CD BD 08               CALL   printStr   
13F1   29 0D 0A 00            .CSTR   ")\r\n"   
13F5   76                     HALT      
13F6   00                     .CSTR      
13F7                EXPECTM_0_2160S43:      
13F7   E1                     POP   HL   
13F8                          ;*Macro unroll:  test "3 5 &", 1
13F8   31 80 33               LD   SP,STACK   
13FB   CD C4 08               CALL   init   
13FE   CD A4 32               CALL   execStr   
1401   33 20 35 20 26 00      .CSTR   "3 5 &"   
1407                          ;*Macro unroll:  expect "3 5 &",1
1407   E1                     POP   HL   
1408   E5                     PUSH   HL   
1409   11 01 00               LD   DE,1   
140C   B7                     OR   A   
140D   ED 52                  SBC   HL,DE   
140F   7D                     LD   A,L   
1410   B4                     OR   H   
1411   28 50                  JR   Z,expectM_0_2161S43   
1413   CD BD 08               CALL   printStr   
1416   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1422   CD BD 08               CALL   printStr   
1425   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1434   21 01 00               LD   HL,1   
1437   CD 0B 08               CALL   prtdec   
143A   CD BD 08               CALL   printStr   
143D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
144A   E1                     POP   hl   
144B   E5                     PUSH   hl   
144C   CD 0B 08               CALL   prtdec   
144F   E1                     POP   hl   
1450   CD BD 08               CALL   printStr   
1453   20 28 23 00            .CSTR   " (#"   
1457   CD 53 08               CALL   prthex   
145A   CD BD 08               CALL   printStr   
145D   29 0D 0A 00            .CSTR   ")\r\n"   
1461   76                     HALT      
1462   00                     .CSTR      
1463                EXPECTM_0_2161S43:      
1463   E1                     POP   HL   
1464                          ;*Macro unroll:  test "3 5 |", 7
1464   31 80 33               LD   SP,STACK   
1467   CD C4 08               CALL   init   
146A   CD A4 32               CALL   execStr   
146D   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1473                          ;*Macro unroll:  expect "3 5 |",7
1473   E1                     POP   HL   
1474   E5                     PUSH   HL   
1475   11 07 00               LD   DE,7   
1478   B7                     OR   A   
1479   ED 52                  SBC   HL,DE   
147B   7D                     LD   A,L   
147C   B4                     OR   H   
147D   28 50                  JR   Z,expectM_0_2162S43   
147F   CD BD 08               CALL   printStr   
1482   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
148E   CD BD 08               CALL   printStr   
1491   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14A0   21 07 00               LD   HL,7   
14A3   CD 0B 08               CALL   prtdec   
14A6   CD BD 08               CALL   printStr   
14A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14B6   E1                     POP   hl   
14B7   E5                     PUSH   hl   
14B8   CD 0B 08               CALL   prtdec   
14BB   E1                     POP   hl   
14BC   CD BD 08               CALL   printStr   
14BF   20 28 23 00            .CSTR   " (#"   
14C3   CD 53 08               CALL   prthex   
14C6   CD BD 08               CALL   printStr   
14C9   29 0D 0A 00            .CSTR   ")\r\n"   
14CD   76                     HALT      
14CE   00                     .CSTR      
14CF                EXPECTM_0_2162S43:      
14CF   E1                     POP   HL   
14D0                          ;*Macro unroll:  test "2 3 *", 6
14D0   31 80 33               LD   SP,STACK   
14D3   CD C4 08               CALL   init   
14D6   CD A4 32               CALL   execStr   
14D9   32 20 33 20 2A 00      .CSTR   "2 3 *"   
14DF                          ;*Macro unroll:  expect "2 3 *",6
14DF   E1                     POP   HL   
14E0   E5                     PUSH   HL   
14E1   11 06 00               LD   DE,6   
14E4   B7                     OR   A   
14E5   ED 52                  SBC   HL,DE   
14E7   7D                     LD   A,L   
14E8   B4                     OR   H   
14E9   28 50                  JR   Z,expectM_0_2163S43   
14EB   CD BD 08               CALL   printStr   
14EE   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
14FA   CD BD 08               CALL   printStr   
14FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
150C   21 06 00               LD   HL,6   
150F   CD 0B 08               CALL   prtdec   
1512   CD BD 08               CALL   printStr   
1515   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1522   E1                     POP   hl   
1523   E5                     PUSH   hl   
1524   CD 0B 08               CALL   prtdec   
1527   E1                     POP   hl   
1528   CD BD 08               CALL   printStr   
152B   20 28 23 00            .CSTR   " (#"   
152F   CD 53 08               CALL   prthex   
1532   CD BD 08               CALL   printStr   
1535   29 0D 0A 00            .CSTR   ")\r\n"   
1539   76                     HALT      
153A   00                     .CSTR      
153B                EXPECTM_0_2163S43:      
153B   E1                     POP   HL   
153C                          ;*Macro unroll:  test "1 2 3 + *", 5
153C   31 80 33               LD   SP,STACK   
153F   CD C4 08               CALL   init   
1542   CD A4 32               CALL   execStr   
1545   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
154F                          ;*Macro unroll:  expect "1 2 3 + *",5
154F   E1                     POP   HL   
1550   E5                     PUSH   HL   
1551   11 05 00               LD   DE,5   
1554   B7                     OR   A   
1555   ED 52                  SBC   HL,DE   
1557   7D                     LD   A,L   
1558   B4                     OR   H   
1559   28 54                  JR   Z,expectM_0_2164S43   
155B   CD BD 08               CALL   printStr   
155E   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
156E   CD BD 08               CALL   printStr   
1571   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1580   21 05 00               LD   HL,5   
1583   CD 0B 08               CALL   prtdec   
1586   CD BD 08               CALL   printStr   
1589   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1596   E1                     POP   hl   
1597   E5                     PUSH   hl   
1598   CD 0B 08               CALL   prtdec   
159B   E1                     POP   hl   
159C   CD BD 08               CALL   printStr   
159F   20 28 23 00            .CSTR   " (#"   
15A3   CD 53 08               CALL   prthex   
15A6   CD BD 08               CALL   printStr   
15A9   29 0D 0A 00            .CSTR   ")\r\n"   
15AD   76                     HALT      
15AE   00                     .CSTR      
15AF                EXPECTM_0_2164S43:      
15AF   E1                     POP   HL   
15B0                          ;*Macro unroll:  test "7 3 /", 2
15B0   31 80 33               LD   SP,STACK   
15B3   CD C4 08               CALL   init   
15B6   CD A4 32               CALL   execStr   
15B9   37 20 33 20 2F 00      .CSTR   "7 3 /"   
15BF                          ;*Macro unroll:  expect "7 3 /",2
15BF   E1                     POP   HL   
15C0   E5                     PUSH   HL   
15C1   11 02 00               LD   DE,2   
15C4   B7                     OR   A   
15C5   ED 52                  SBC   HL,DE   
15C7   7D                     LD   A,L   
15C8   B4                     OR   H   
15C9   28 50                  JR   Z,expectM_0_2165S43   
15CB   CD BD 08               CALL   printStr   
15CE   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
15DA   CD BD 08               CALL   printStr   
15DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15EC   21 02 00               LD   HL,2   
15EF   CD 0B 08               CALL   prtdec   
15F2   CD BD 08               CALL   printStr   
15F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1602   E1                     POP   hl   
1603   E5                     PUSH   hl   
1604   CD 0B 08               CALL   prtdec   
1607   E1                     POP   hl   
1608   CD BD 08               CALL   printStr   
160B   20 28 23 00            .CSTR   " (#"   
160F   CD 53 08               CALL   prthex   
1612   CD BD 08               CALL   printStr   
1615   29 0D 0A 00            .CSTR   ")\r\n"   
1619   76                     HALT      
161A   00                     .CSTR      
161B                EXPECTM_0_2165S43:      
161B   E1                     POP   HL   
161C                          ;*Macro unroll:  test "7 3 / _", 1
161C   31 80 33               LD   SP,STACK   
161F   CD C4 08               CALL   init   
1622   CD A4 32               CALL   execStr   
1625   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
162D                          ;*Macro unroll:  expect "7 3 / _",1
162D   E1                     POP   HL   
162E   E5                     PUSH   HL   
162F   11 01 00               LD   DE,1   
1632   B7                     OR   A   
1633   ED 52                  SBC   HL,DE   
1635   7D                     LD   A,L   
1636   B4                     OR   H   
1637   28 52                  JR   Z,expectM_0_2166S43   
1639   CD BD 08               CALL   printStr   
163C   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
164A   CD BD 08               CALL   printStr   
164D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
165C   21 01 00               LD   HL,1   
165F   CD 0B 08               CALL   prtdec   
1662   CD BD 08               CALL   printStr   
1665   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1672   E1                     POP   hl   
1673   E5                     PUSH   hl   
1674   CD 0B 08               CALL   prtdec   
1677   E1                     POP   hl   
1678   CD BD 08               CALL   printStr   
167B   20 28 23 00            .CSTR   " (#"   
167F   CD 53 08               CALL   prthex   
1682   CD BD 08               CALL   printStr   
1685   29 0D 0A 00            .CSTR   ")\r\n"   
1689   76                     HALT      
168A   00                     .CSTR      
168B                EXPECTM_0_2166S43:      
168B   E1                     POP   HL   
168C                          ;*Macro unroll:  test "2 3 ==", FALSE
168C   31 80 33               LD   SP,STACK   
168F   CD C4 08               CALL   init   
1692   CD A4 32               CALL   execStr   
1695   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
169C                          ;*Macro unroll:  expect "2 3 ==",FALSE
169C   E1                     POP   HL   
169D   E5                     PUSH   HL   
169E   11 00 00               LD   DE,FALSE   
16A1   B7                     OR   A   
16A2   ED 52                  SBC   HL,DE   
16A4   7D                     LD   A,L   
16A5   B4                     OR   H   
16A6   28 51                  JR   Z,expectM_0_2167S43   
16A8   CD BD 08               CALL   printStr   
16AB   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
16B8   CD BD 08               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 00 00               LD   HL,FALSE   
16CD   CD 0B 08               CALL   prtdec   
16D0   CD BD 08               CALL   printStr   
16D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16E0   E1                     POP   hl   
16E1   E5                     PUSH   hl   
16E2   CD 0B 08               CALL   prtdec   
16E5   E1                     POP   hl   
16E6   CD BD 08               CALL   printStr   
16E9   20 28 23 00            .CSTR   " (#"   
16ED   CD 53 08               CALL   prthex   
16F0   CD BD 08               CALL   printStr   
16F3   29 0D 0A 00            .CSTR   ")\r\n"   
16F7   76                     HALT      
16F8   00                     .CSTR      
16F9                EXPECTM_0_2167S43:      
16F9   E1                     POP   HL   
16FA                          ;*Macro unroll:  test "3 3 ==", TRUE
16FA   31 80 33               LD   SP,STACK   
16FD   CD C4 08               CALL   init   
1700   CD A4 32               CALL   execStr   
1703   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
170A                          ;*Macro unroll:  expect "3 3 ==",TRUE
170A   E1                     POP   HL   
170B   E5                     PUSH   HL   
170C   11 FF FF               LD   DE,TRUE   
170F   B7                     OR   A   
1710   ED 52                  SBC   HL,DE   
1712   7D                     LD   A,L   
1713   B4                     OR   H   
1714   28 51                  JR   Z,expectM_0_2168S43   
1716   CD BD 08               CALL   printStr   
1719   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1726   CD BD 08               CALL   printStr   
1729   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1738   21 FF FF               LD   HL,TRUE   
173B   CD 0B 08               CALL   prtdec   
173E   CD BD 08               CALL   printStr   
1741   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
174E   E1                     POP   hl   
174F   E5                     PUSH   hl   
1750   CD 0B 08               CALL   prtdec   
1753   E1                     POP   hl   
1754   CD BD 08               CALL   printStr   
1757   20 28 23 00            .CSTR   " (#"   
175B   CD 53 08               CALL   prthex   
175E   CD BD 08               CALL   printStr   
1761   29 0D 0A 00            .CSTR   ")\r\n"   
1765   76                     HALT      
1766   00                     .CSTR      
1767                EXPECTM_0_2168S43:      
1767   E1                     POP   HL   
1768                          ;*Macro unroll:  test "1 2 <", TRUE
1768   31 80 33               LD   SP,STACK   
176B   CD C4 08               CALL   init   
176E   CD A4 32               CALL   execStr   
1771   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1777                          ;*Macro unroll:  expect "1 2 <",TRUE
1777   E1                     POP   HL   
1778   E5                     PUSH   HL   
1779   11 FF FF               LD   DE,TRUE   
177C   B7                     OR   A   
177D   ED 52                  SBC   HL,DE   
177F   7D                     LD   A,L   
1780   B4                     OR   H   
1781   28 50                  JR   Z,expectM_0_2169S43   
1783   CD BD 08               CALL   printStr   
1786   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1792   CD BD 08               CALL   printStr   
1795   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17A4   21 FF FF               LD   HL,TRUE   
17A7   CD 0B 08               CALL   prtdec   
17AA   CD BD 08               CALL   printStr   
17AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17BA   E1                     POP   hl   
17BB   E5                     PUSH   hl   
17BC   CD 0B 08               CALL   prtdec   
17BF   E1                     POP   hl   
17C0   CD BD 08               CALL   printStr   
17C3   20 28 23 00            .CSTR   " (#"   
17C7   CD 53 08               CALL   prthex   
17CA   CD BD 08               CALL   printStr   
17CD   29 0D 0A 00            .CSTR   ")\r\n"   
17D1   76                     HALT      
17D2   00                     .CSTR      
17D3                EXPECTM_0_2169S43:      
17D3   E1                     POP   HL   
17D4                          ;*Macro unroll:  test "2 1 <", FALSE
17D4   31 80 33               LD   SP,STACK   
17D7   CD C4 08               CALL   init   
17DA   CD A4 32               CALL   execStr   
17DD   32 20 31 20 3C 00      .CSTR   "2 1 <"   
17E3                          ;*Macro unroll:  expect "2 1 <",FALSE
17E3   E1                     POP   HL   
17E4   E5                     PUSH   HL   
17E5   11 00 00               LD   DE,FALSE   
17E8   B7                     OR   A   
17E9   ED 52                  SBC   HL,DE   
17EB   7D                     LD   A,L   
17EC   B4                     OR   H   
17ED   28 50                  JR   Z,expectM_0_2170S43   
17EF   CD BD 08               CALL   printStr   
17F2   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
17FE   CD BD 08               CALL   printStr   
1801   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1810   21 00 00               LD   HL,FALSE   
1813   CD 0B 08               CALL   prtdec   
1816   CD BD 08               CALL   printStr   
1819   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1826   E1                     POP   hl   
1827   E5                     PUSH   hl   
1828   CD 0B 08               CALL   prtdec   
182B   E1                     POP   hl   
182C   CD BD 08               CALL   printStr   
182F   20 28 23 00            .CSTR   " (#"   
1833   CD 53 08               CALL   prthex   
1836   CD BD 08               CALL   printStr   
1839   29 0D 0A 00            .CSTR   ")\r\n"   
183D   76                     HALT      
183E   00                     .CSTR      
183F                EXPECTM_0_2170S43:      
183F   E1                     POP   HL   
1840                          ;*Macro unroll:  test "2 3 <", TRUE
1840   31 80 33               LD   SP,STACK   
1843   CD C4 08               CALL   init   
1846   CD A4 32               CALL   execStr   
1849   32 20 33 20 3C 00      .CSTR   "2 3 <"   
184F                          ;*Macro unroll:  expect "2 3 <",TRUE
184F   E1                     POP   HL   
1850   E5                     PUSH   HL   
1851   11 FF FF               LD   DE,TRUE   
1854   B7                     OR   A   
1855   ED 52                  SBC   HL,DE   
1857   7D                     LD   A,L   
1858   B4                     OR   H   
1859   28 50                  JR   Z,expectM_0_2171S43   
185B   CD BD 08               CALL   printStr   
185E   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
186A   CD BD 08               CALL   printStr   
186D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
187C   21 FF FF               LD   HL,TRUE   
187F   CD 0B 08               CALL   prtdec   
1882   CD BD 08               CALL   printStr   
1885   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1892   E1                     POP   hl   
1893   E5                     PUSH   hl   
1894   CD 0B 08               CALL   prtdec   
1897   E1                     POP   hl   
1898   CD BD 08               CALL   printStr   
189B   20 28 23 00            .CSTR   " (#"   
189F   CD 53 08               CALL   prthex   
18A2   CD BD 08               CALL   printStr   
18A5   29 0D 0A 00            .CSTR   ")\r\n"   
18A9   76                     HALT      
18AA   00                     .CSTR      
18AB                EXPECTM_0_2171S43:      
18AB   E1                     POP   HL   
18AC                          ;*Macro unroll:  test "3 3 <", FALSE
18AC   31 80 33               LD   SP,STACK   
18AF   CD C4 08               CALL   init   
18B2   CD A4 32               CALL   execStr   
18B5   33 20 33 20 3C 00      .CSTR   "3 3 <"   
18BB                          ;*Macro unroll:  expect "3 3 <",FALSE
18BB   E1                     POP   HL   
18BC   E5                     PUSH   HL   
18BD   11 00 00               LD   DE,FALSE   
18C0   B7                     OR   A   
18C1   ED 52                  SBC   HL,DE   
18C3   7D                     LD   A,L   
18C4   B4                     OR   H   
18C5   28 50                  JR   Z,expectM_0_2172S43   
18C7   CD BD 08               CALL   printStr   
18CA   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
18D6   CD BD 08               CALL   printStr   
18D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E8   21 00 00               LD   HL,FALSE   
18EB   CD 0B 08               CALL   prtdec   
18EE   CD BD 08               CALL   printStr   
18F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18FE   E1                     POP   hl   
18FF   E5                     PUSH   hl   
1900   CD 0B 08               CALL   prtdec   
1903   E1                     POP   hl   
1904   CD BD 08               CALL   printStr   
1907   20 28 23 00            .CSTR   " (#"   
190B   CD 53 08               CALL   prthex   
190E   CD BD 08               CALL   printStr   
1911   29 0D 0A 00            .CSTR   ")\r\n"   
1915   76                     HALT      
1916   00                     .CSTR      
1917                EXPECTM_0_2172S43:      
1917   E1                     POP   HL   
1918                          ;*Macro unroll:  test "1 2 >", FALSE
1918   31 80 33               LD   SP,STACK   
191B   CD C4 08               CALL   init   
191E   CD A4 32               CALL   execStr   
1921   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1927                          ;*Macro unroll:  expect "1 2 >",FALSE
1927   E1                     POP   HL   
1928   E5                     PUSH   HL   
1929   11 00 00               LD   DE,FALSE   
192C   B7                     OR   A   
192D   ED 52                  SBC   HL,DE   
192F   7D                     LD   A,L   
1930   B4                     OR   H   
1931   28 50                  JR   Z,expectM_0_2173S43   
1933   CD BD 08               CALL   printStr   
1936   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1942   CD BD 08               CALL   printStr   
1945   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1954   21 00 00               LD   HL,FALSE   
1957   CD 0B 08               CALL   prtdec   
195A   CD BD 08               CALL   printStr   
195D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
196A   E1                     POP   hl   
196B   E5                     PUSH   hl   
196C   CD 0B 08               CALL   prtdec   
196F   E1                     POP   hl   
1970   CD BD 08               CALL   printStr   
1973   20 28 23 00            .CSTR   " (#"   
1977   CD 53 08               CALL   prthex   
197A   CD BD 08               CALL   printStr   
197D   29 0D 0A 00            .CSTR   ")\r\n"   
1981   76                     HALT      
1982   00                     .CSTR      
1983                EXPECTM_0_2173S43:      
1983   E1                     POP   HL   
1984                          ;*Macro unroll:  test "2 1 >", TRUE
1984   31 80 33               LD   SP,STACK   
1987   CD C4 08               CALL   init   
198A   CD A4 32               CALL   execStr   
198D   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1993                          ;*Macro unroll:  expect "2 1 >",TRUE
1993   E1                     POP   HL   
1994   E5                     PUSH   HL   
1995   11 FF FF               LD   DE,TRUE   
1998   B7                     OR   A   
1999   ED 52                  SBC   HL,DE   
199B   7D                     LD   A,L   
199C   B4                     OR   H   
199D   28 50                  JR   Z,expectM_0_2174S43   
199F   CD BD 08               CALL   printStr   
19A2   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
19AE   CD BD 08               CALL   printStr   
19B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19C0   21 FF FF               LD   HL,TRUE   
19C3   CD 0B 08               CALL   prtdec   
19C6   CD BD 08               CALL   printStr   
19C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19D6   E1                     POP   hl   
19D7   E5                     PUSH   hl   
19D8   CD 0B 08               CALL   prtdec   
19DB   E1                     POP   hl   
19DC   CD BD 08               CALL   printStr   
19DF   20 28 23 00            .CSTR   " (#"   
19E3   CD 53 08               CALL   prthex   
19E6   CD BD 08               CALL   printStr   
19E9   29 0D 0A 00            .CSTR   ")\r\n"   
19ED   76                     HALT      
19EE   00                     .CSTR      
19EF                EXPECTM_0_2174S43:      
19EF   E1                     POP   HL   
19F0                          ;*Macro unroll:  test "3 3 >", FALSE
19F0   31 80 33               LD   SP,STACK   
19F3   CD C4 08               CALL   init   
19F6   CD A4 32               CALL   execStr   
19F9   33 20 33 20 3E 00      .CSTR   "3 3 >"   
19FF                          ;*Macro unroll:  expect "3 3 >",FALSE
19FF   E1                     POP   HL   
1A00   E5                     PUSH   HL   
1A01   11 00 00               LD   DE,FALSE   
1A04   B7                     OR   A   
1A05   ED 52                  SBC   HL,DE   
1A07   7D                     LD   A,L   
1A08   B4                     OR   H   
1A09   28 50                  JR   Z,expectM_0_2175S43   
1A0B   CD BD 08               CALL   printStr   
1A0E   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1A1A   CD BD 08               CALL   printStr   
1A1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A2C   21 00 00               LD   HL,FALSE   
1A2F   CD 0B 08               CALL   prtdec   
1A32   CD BD 08               CALL   printStr   
1A35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A42   E1                     POP   hl   
1A43   E5                     PUSH   hl   
1A44   CD 0B 08               CALL   prtdec   
1A47   E1                     POP   hl   
1A48   CD BD 08               CALL   printStr   
1A4B   20 28 23 00            .CSTR   " (#"   
1A4F   CD 53 08               CALL   prthex   
1A52   CD BD 08               CALL   printStr   
1A55   29 0D 0A 00            .CSTR   ")\r\n"   
1A59   76                     HALT      
1A5A   00                     .CSTR      
1A5B                EXPECTM_0_2175S43:      
1A5B   E1                     POP   HL   
1A5C                          ;*Macro unroll:  test "4 3 >", TRUE
1A5C   31 80 33               LD   SP,STACK   
1A5F   CD C4 08               CALL   init   
1A62   CD A4 32               CALL   execStr   
1A65   34 20 33 20 3E 00      .CSTR   "4 3 >"   
1A6B                          ;*Macro unroll:  expect "4 3 >",TRUE
1A6B   E1                     POP   HL   
1A6C   E5                     PUSH   HL   
1A6D   11 FF FF               LD   DE,TRUE   
1A70   B7                     OR   A   
1A71   ED 52                  SBC   HL,DE   
1A73   7D                     LD   A,L   
1A74   B4                     OR   H   
1A75   28 50                  JR   Z,expectM_0_2176S43   
1A77   CD BD 08               CALL   printStr   
1A7A   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1A86   CD BD 08               CALL   printStr   
1A89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A98   21 FF FF               LD   HL,TRUE   
1A9B   CD 0B 08               CALL   prtdec   
1A9E   CD BD 08               CALL   printStr   
1AA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AAE   E1                     POP   hl   
1AAF   E5                     PUSH   hl   
1AB0   CD 0B 08               CALL   prtdec   
1AB3   E1                     POP   hl   
1AB4   CD BD 08               CALL   printStr   
1AB7   20 28 23 00            .CSTR   " (#"   
1ABB   CD 53 08               CALL   prthex   
1ABE   CD BD 08               CALL   printStr   
1AC1   29 0D 0A 00            .CSTR   ")\r\n"   
1AC5   76                     HALT      
1AC6   00                     .CSTR      
1AC7                EXPECTM_0_2176S43:      
1AC7   E1                     POP   HL   
1AC8                          ;*Macro unroll:  test "2 2 <=", TRUE
1AC8   31 80 33               LD   SP,STACK   
1ACB   CD C4 08               CALL   init   
1ACE   CD A4 32               CALL   execStr   
1AD1   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
1AD8                          ;*Macro unroll:  expect "2 2 <=",TRUE
1AD8   E1                     POP   HL   
1AD9   E5                     PUSH   HL   
1ADA   11 FF FF               LD   DE,TRUE   
1ADD   B7                     OR   A   
1ADE   ED 52                  SBC   HL,DE   
1AE0   7D                     LD   A,L   
1AE1   B4                     OR   H   
1AE2   28 51                  JR   Z,expectM_0_2177S43   
1AE4   CD BD 08               CALL   printStr   
1AE7   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
1AF4   CD BD 08               CALL   printStr   
1AF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B06   21 FF FF               LD   HL,TRUE   
1B09   CD 0B 08               CALL   prtdec   
1B0C   CD BD 08               CALL   printStr   
1B0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B1C   E1                     POP   hl   
1B1D   E5                     PUSH   hl   
1B1E   CD 0B 08               CALL   prtdec   
1B21   E1                     POP   hl   
1B22   CD BD 08               CALL   printStr   
1B25   20 28 23 00            .CSTR   " (#"   
1B29   CD 53 08               CALL   prthex   
1B2C   CD BD 08               CALL   printStr   
1B2F   29 0D 0A 00            .CSTR   ")\r\n"   
1B33   76                     HALT      
1B34   00                     .CSTR      
1B35                EXPECTM_0_2177S43:      
1B35   E1                     POP   HL   
1B36                          ;*Macro unroll:  test "2 2 >=", TRUE
1B36   31 80 33               LD   SP,STACK   
1B39   CD C4 08               CALL   init   
1B3C   CD A4 32               CALL   execStr   
1B3F   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
1B46                          ;*Macro unroll:  expect "2 2 >=",TRUE
1B46   E1                     POP   HL   
1B47   E5                     PUSH   HL   
1B48   11 FF FF               LD   DE,TRUE   
1B4B   B7                     OR   A   
1B4C   ED 52                  SBC   HL,DE   
1B4E   7D                     LD   A,L   
1B4F   B4                     OR   H   
1B50   28 51                  JR   Z,expectM_0_2178S43   
1B52   CD BD 08               CALL   printStr   
1B55   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
1B62   CD BD 08               CALL   printStr   
1B65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B74   21 FF FF               LD   HL,TRUE   
1B77   CD 0B 08               CALL   prtdec   
1B7A   CD BD 08               CALL   printStr   
1B7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B8A   E1                     POP   hl   
1B8B   E5                     PUSH   hl   
1B8C   CD 0B 08               CALL   prtdec   
1B8F   E1                     POP   hl   
1B90   CD BD 08               CALL   printStr   
1B93   20 28 23 00            .CSTR   " (#"   
1B97   CD 53 08               CALL   prthex   
1B9A   CD BD 08               CALL   printStr   
1B9D   29 0D 0A 00            .CSTR   ")\r\n"   
1BA1   76                     HALT      
1BA2   00                     .CSTR      
1BA3                EXPECTM_0_2178S43:      
1BA3   E1                     POP   HL   
1BA4                          ;*Macro unroll:  test "3 1 <<", 6
1BA4   31 80 33               LD   SP,STACK   
1BA7   CD C4 08               CALL   init   
1BAA   CD A4 32               CALL   execStr   
1BAD   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
1BB4                          ;*Macro unroll:  expect "3 1 <<",6
1BB4   E1                     POP   HL   
1BB5   E5                     PUSH   HL   
1BB6   11 06 00               LD   DE,6   
1BB9   B7                     OR   A   
1BBA   ED 52                  SBC   HL,DE   
1BBC   7D                     LD   A,L   
1BBD   B4                     OR   H   
1BBE   28 51                  JR   Z,expectM_0_2179S43   
1BC0   CD BD 08               CALL   printStr   
1BC3   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
1BD0   CD BD 08               CALL   printStr   
1BD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BE2   21 06 00               LD   HL,6   
1BE5   CD 0B 08               CALL   prtdec   
1BE8   CD BD 08               CALL   printStr   
1BEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BF8   E1                     POP   hl   
1BF9   E5                     PUSH   hl   
1BFA   CD 0B 08               CALL   prtdec   
1BFD   E1                     POP   hl   
1BFE   CD BD 08               CALL   printStr   
1C01   20 28 23 00            .CSTR   " (#"   
1C05   CD 53 08               CALL   prthex   
1C08   CD BD 08               CALL   printStr   
1C0B   29 0D 0A 00            .CSTR   ")\r\n"   
1C0F   76                     HALT      
1C10   00                     .CSTR      
1C11                EXPECTM_0_2179S43:      
1C11   E1                     POP   HL   
1C12                          ;*Macro unroll:  test "10 1 >>", 5
1C12   31 80 33               LD   SP,STACK   
1C15   CD C4 08               CALL   init   
1C18   CD A4 32               CALL   execStr   
1C1B   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
1C23                          ;*Macro unroll:  expect "10 1 >>",5
1C23   E1                     POP   HL   
1C24   E5                     PUSH   HL   
1C25   11 05 00               LD   DE,5   
1C28   B7                     OR   A   
1C29   ED 52                  SBC   HL,DE   
1C2B   7D                     LD   A,L   
1C2C   B4                     OR   H   
1C2D   28 52                  JR   Z,expectM_0_2180S43   
1C2F   CD BD 08               CALL   printStr   
1C32   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
1C40   CD BD 08               CALL   printStr   
1C43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C52   21 05 00               LD   HL,5   
1C55   CD 0B 08               CALL   prtdec   
1C58   CD BD 08               CALL   printStr   
1C5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C68   E1                     POP   hl   
1C69   E5                     PUSH   hl   
1C6A   CD 0B 08               CALL   prtdec   
1C6D   E1                     POP   hl   
1C6E   CD BD 08               CALL   printStr   
1C71   20 28 23 00            .CSTR   " (#"   
1C75   CD 53 08               CALL   prthex   
1C78   CD BD 08               CALL   printStr   
1C7B   29 0D 0A 00            .CSTR   ")\r\n"   
1C7F   76                     HALT      
1C80   00                     .CSTR      
1C81                EXPECTM_0_2180S43:      
1C81   E1                     POP   HL   
1C82                          ;*Macro unroll:  test "1 x = x", 1
1C82   31 80 33               LD   SP,STACK   
1C85   CD C4 08               CALL   init   
1C88   CD A4 32               CALL   execStr   
1C8B   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
1C93                          ;*Macro unroll:  expect "1 x = x",1
1C93   E1                     POP   HL   
1C94   E5                     PUSH   HL   
1C95   11 01 00               LD   DE,1   
1C98   B7                     OR   A   
1C99   ED 52                  SBC   HL,DE   
1C9B   7D                     LD   A,L   
1C9C   B4                     OR   H   
1C9D   28 52                  JR   Z,expectM_0_2181S43   
1C9F   CD BD 08               CALL   printStr   
1CA2   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
1CB0   CD BD 08               CALL   printStr   
1CB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CC2   21 01 00               LD   HL,1   
1CC5   CD 0B 08               CALL   prtdec   
1CC8   CD BD 08               CALL   printStr   
1CCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CD8   E1                     POP   hl   
1CD9   E5                     PUSH   hl   
1CDA   CD 0B 08               CALL   prtdec   
1CDD   E1                     POP   hl   
1CDE   CD BD 08               CALL   printStr   
1CE1   20 28 23 00            .CSTR   " (#"   
1CE5   CD 53 08               CALL   prthex   
1CE8   CD BD 08               CALL   printStr   
1CEB   29 0D 0A 00            .CSTR   ")\r\n"   
1CEF   76                     HALT      
1CF0   00                     .CSTR      
1CF1                EXPECTM_0_2181S43:      
1CF1   E1                     POP   HL   
1CF2                          ;*Macro unroll:  test "1{}:", 1
1CF2   31 80 33               LD   SP,STACK   
1CF5   CD C4 08               CALL   init   
1CF8   CD A4 32               CALL   execStr   
1CFB   31 7B 7D 3A 00         .CSTR   "1{}:"   
1D00                          ;*Macro unroll:  expect "1{}:",1
1D00   E1                     POP   HL   
1D01   E5                     PUSH   HL   
1D02   11 01 00               LD   DE,1   
1D05   B7                     OR   A   
1D06   ED 52                  SBC   HL,DE   
1D08   7D                     LD   A,L   
1D09   B4                     OR   H   
1D0A   28 4F                  JR   Z,expectM_0_2182S43   
1D0C   CD BD 08               CALL   printStr   
1D0F   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
1D1A   CD BD 08               CALL   printStr   
1D1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D2C   21 01 00               LD   HL,1   
1D2F   CD 0B 08               CALL   prtdec   
1D32   CD BD 08               CALL   printStr   
1D35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D42   E1                     POP   hl   
1D43   E5                     PUSH   hl   
1D44   CD 0B 08               CALL   prtdec   
1D47   E1                     POP   hl   
1D48   CD BD 08               CALL   printStr   
1D4B   20 28 23 00            .CSTR   " (#"   
1D4F   CD 53 08               CALL   prthex   
1D52   CD BD 08               CALL   printStr   
1D55   29 0D 0A 00            .CSTR   ")\r\n"   
1D59   76                     HALT      
1D5A   00                     .CSTR      
1D5B                EXPECTM_0_2182S43:      
1D5B   E1                     POP   HL   
1D5C                          ;*Macro unroll:  test "{1}:", 1
1D5C   31 80 33               LD   SP,STACK   
1D5F   CD C4 08               CALL   init   
1D62   CD A4 32               CALL   execStr   
1D65   7B 31 7D 3A 00         .CSTR   "{1}:"   
1D6A                          ;*Macro unroll:  expect "{1}:",1
1D6A   E1                     POP   HL   
1D6B   E5                     PUSH   HL   
1D6C   11 01 00               LD   DE,1   
1D6F   B7                     OR   A   
1D70   ED 52                  SBC   HL,DE   
1D72   7D                     LD   A,L   
1D73   B4                     OR   H   
1D74   28 4F                  JR   Z,expectM_0_2183S43   
1D76   CD BD 08               CALL   printStr   
1D79   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
1D84   CD BD 08               CALL   printStr   
1D87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D96   21 01 00               LD   HL,1   
1D99   CD 0B 08               CALL   prtdec   
1D9C   CD BD 08               CALL   printStr   
1D9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DAC   E1                     POP   hl   
1DAD   E5                     PUSH   hl   
1DAE   CD 0B 08               CALL   prtdec   
1DB1   E1                     POP   hl   
1DB2   CD BD 08               CALL   printStr   
1DB5   20 28 23 00            .CSTR   " (#"   
1DB9   CD 53 08               CALL   prthex   
1DBC   CD BD 08               CALL   printStr   
1DBF   29 0D 0A 00            .CSTR   ")\r\n"   
1DC3   76                     HALT      
1DC4   00                     .CSTR      
1DC5                EXPECTM_0_2183S43:      
1DC5   E1                     POP   HL   
1DC6                          ;*Macro unroll:  test "{{1}:}:", 1
1DC6   31 80 33               LD   SP,STACK   
1DC9   CD C4 08               CALL   init   
1DCC   CD A4 32               CALL   execStr   
1DCF   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
1DD7                          ;*Macro unroll:  expect "{{1}:}:",1
1DD7   E1                     POP   HL   
1DD8   E5                     PUSH   HL   
1DD9   11 01 00               LD   DE,1   
1DDC   B7                     OR   A   
1DDD   ED 52                  SBC   HL,DE   
1DDF   7D                     LD   A,L   
1DE0   B4                     OR   H   
1DE1   28 52                  JR   Z,expectM_0_2184S43   
1DE3   CD BD 08               CALL   printStr   
1DE6   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
1DF4   CD BD 08               CALL   printStr   
1DF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E06   21 01 00               LD   HL,1   
1E09   CD 0B 08               CALL   prtdec   
1E0C   CD BD 08               CALL   printStr   
1E0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E1C   E1                     POP   hl   
1E1D   E5                     PUSH   hl   
1E1E   CD 0B 08               CALL   prtdec   
1E21   E1                     POP   hl   
1E22   CD BD 08               CALL   printStr   
1E25   20 28 23 00            .CSTR   " (#"   
1E29   CD 53 08               CALL   prthex   
1E2C   CD BD 08               CALL   printStr   
1E2F   29 0D 0A 00            .CSTR   ")\r\n"   
1E33   76                     HALT      
1E34   00                     .CSTR      
1E35                EXPECTM_0_2184S43:      
1E35   E1                     POP   HL   
1E36                          ;*Macro unroll:  test "{{{1}:}:}:", 1
1E36   31 80 33               LD   SP,STACK   
1E39   CD C4 08               CALL   init   
1E3C   CD A4 32               CALL   execStr   
1E3F   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
1E4A                          ;*Macro unroll:  expect "{{{1}:}:}:",1
1E4A   E1                     POP   HL   
1E4B   E5                     PUSH   HL   
1E4C   11 01 00               LD   DE,1   
1E4F   B7                     OR   A   
1E50   ED 52                  SBC   HL,DE   
1E52   7D                     LD   A,L   
1E53   B4                     OR   H   
1E54   28 55                  JR   Z,expectM_0_2185S43   
1E56   CD BD 08               CALL   printStr   
1E59   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
1E6A   CD BD 08               CALL   printStr   
1E6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E7C   21 01 00               LD   HL,1   
1E7F   CD 0B 08               CALL   prtdec   
1E82   CD BD 08               CALL   printStr   
1E85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E92   E1                     POP   hl   
1E93   E5                     PUSH   hl   
1E94   CD 0B 08               CALL   prtdec   
1E97   E1                     POP   hl   
1E98   CD BD 08               CALL   printStr   
1E9B   20 28 23 00            .CSTR   " (#"   
1E9F   CD 53 08               CALL   prthex   
1EA2   CD BD 08               CALL   printStr   
1EA5   29 0D 0A 00            .CSTR   ")\r\n"   
1EA9   76                     HALT      
1EAA   00                     .CSTR      
1EAB                EXPECTM_0_2185S43:      
1EAB   E1                     POP   HL   
1EAC                          ;*Macro unroll:  test "5 \\F {10} ?", 5
1EAC   31 80 33               LD   SP,STACK   
1EAF   CD C4 08               CALL   init   
1EB2   CD A4 32               CALL   execStr   
1EB5   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
1EC1                          ;*Macro unroll:  expect "5 \\F {10} ?",5
1EC1   E1                     POP   HL   
1EC2   E5                     PUSH   HL   
1EC3   11 05 00               LD   DE,5   
1EC6   B7                     OR   A   
1EC7   ED 52                  SBC   HL,DE   
1EC9   7D                     LD   A,L   
1ECA   B4                     OR   H   
1ECB   28 56                  JR   Z,expectM_0_2186S43   
1ECD   CD BD 08               CALL   printStr   
1ED0   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
1EE2   CD BD 08               CALL   printStr   
1EE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF4   21 05 00               LD   HL,5   
1EF7   CD 0B 08               CALL   prtdec   
1EFA   CD BD 08               CALL   printStr   
1EFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F0A   E1                     POP   hl   
1F0B   E5                     PUSH   hl   
1F0C   CD 0B 08               CALL   prtdec   
1F0F   E1                     POP   hl   
1F10   CD BD 08               CALL   printStr   
1F13   20 28 23 00            .CSTR   " (#"   
1F17   CD 53 08               CALL   prthex   
1F1A   CD BD 08               CALL   printStr   
1F1D   29 0D 0A 00            .CSTR   ")\r\n"   
1F21   76                     HALT      
1F22   00                     .CSTR      
1F23                EXPECTM_0_2186S43:      
1F23   E1                     POP   HL   
1F24                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
1F24   31 80 33               LD   SP,STACK   
1F27   CD C4 08               CALL   init   
1F2A   CD A4 32               CALL   execStr   
1F2D   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
1F3B                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
1F3B   E1                     POP   HL   
1F3C   E5                     PUSH   HL   
1F3D   11 0F 00               LD   DE,15   
1F40   B7                     OR   A   
1F41   ED 52                  SBC   HL,DE   
1F43   7D                     LD   A,L   
1F44   B4                     OR   H   
1F45   28 58                  JR   Z,expectM_0_2187S43   
1F47   CD BD 08               CALL   printStr   
1F4A   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
1F5E   CD BD 08               CALL   printStr   
1F61   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F70   21 0F 00               LD   HL,15   
1F73   CD 0B 08               CALL   prtdec   
1F76   CD BD 08               CALL   printStr   
1F79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F86   E1                     POP   hl   
1F87   E5                     PUSH   hl   
1F88   CD 0B 08               CALL   prtdec   
1F8B   E1                     POP   hl   
1F8C   CD BD 08               CALL   printStr   
1F8F   20 28 23 00            .CSTR   " (#"   
1F93   CD 53 08               CALL   prthex   
1F96   CD BD 08               CALL   printStr   
1F99   29 0D 0A 00            .CSTR   ")\r\n"   
1F9D   76                     HALT      
1F9E   00                     .CSTR      
1F9F                EXPECTM_0_2187S43:      
1F9F   E1                     POP   HL   
1FA0                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
1FA0   31 80 33               LD   SP,STACK   
1FA3   CD C4 08               CALL   init   
1FA6   CD A4 32               CALL   execStr   
1FA9   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
1FBD                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
1FBD   E1                     POP   HL   
1FBE   E5                     PUSH   HL   
1FBF   11 15 00               LD   DE,21   
1FC2   B7                     OR   A   
1FC3   ED 52                  SBC   HL,DE   
1FC5   7D                     LD   A,L   
1FC6   B4                     OR   H   
1FC7   28 5E                  JR   Z,expectM_0_2188S43   
1FC9   CD BD 08               CALL   printStr   
1FCC   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
1FE6   CD BD 08               CALL   printStr   
1FE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FF8   21 15 00               LD   HL,21   
1FFB   CD 0B 08               CALL   prtdec   
1FFE   CD BD 08               CALL   printStr   
2001   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
200E   E1                     POP   hl   
200F   E5                     PUSH   hl   
2010   CD 0B 08               CALL   prtdec   
2013   E1                     POP   hl   
2014   CD BD 08               CALL   printStr   
2017   20 28 23 00            .CSTR   " (#"   
201B   CD 53 08               CALL   prthex   
201E   CD BD 08               CALL   printStr   
2021   29 0D 0A 00            .CSTR   ")\r\n"   
2025   76                     HALT      
2026   00                     .CSTR      
2027                EXPECTM_0_2188S43:      
2027   E1                     POP   HL   
2028                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
2028   31 80 33               LD   SP,STACK   
202B   CD C4 08               CALL   init   
202E   CD A4 32               CALL   execStr   
2031   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
2045                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
2045   E1                     POP   HL   
2046   E5                     PUSH   HL   
2047   11 0B 00               LD   DE,11   
204A   B7                     OR   A   
204B   ED 52                  SBC   HL,DE   
204D   7D                     LD   A,L   
204E   B4                     OR   H   
204F   28 5E                  JR   Z,expectM_0_2189S43   
2051   CD BD 08               CALL   printStr   
2054   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
206E   CD BD 08               CALL   printStr   
2071   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2080   21 0B 00               LD   HL,11   
2083   CD 0B 08               CALL   prtdec   
2086   CD BD 08               CALL   printStr   
2089   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2096   E1                     POP   hl   
2097   E5                     PUSH   hl   
2098   CD 0B 08               CALL   prtdec   
209B   E1                     POP   hl   
209C   CD BD 08               CALL   printStr   
209F   20 28 23 00            .CSTR   " (#"   
20A3   CD 53 08               CALL   prthex   
20A6   CD BD 08               CALL   printStr   
20A9   29 0D 0A 00            .CSTR   ")\r\n"   
20AD   76                     HALT      
20AE   00                     .CSTR      
20AF                EXPECTM_0_2189S43:      
20AF   E1                     POP   HL   
20B0                          ;*Macro unroll:  test "() -2%", $0000
20B0   31 80 33               LD   SP,STACK   
20B3   CD C4 08               CALL   init   
20B6   CD A4 32               CALL   execStr   
20B9   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
20C0                          ;*Macro unroll:  expect "() -2%",$0000
20C0   E1                     POP   HL   
20C1   E5                     PUSH   HL   
20C2   11 00 00               LD   DE,$0000   
20C5   B7                     OR   A   
20C6   ED 52                  SBC   HL,DE   
20C8   7D                     LD   A,L   
20C9   B4                     OR   H   
20CA   28 51                  JR   Z,expectM_0_2190S43   
20CC   CD BD 08               CALL   printStr   
20CF   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
20DC   CD BD 08               CALL   printStr   
20DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20EE   21 00 00               LD   HL,$0000   
20F1   CD 0B 08               CALL   prtdec   
20F4   CD BD 08               CALL   printStr   
20F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2104   E1                     POP   hl   
2105   E5                     PUSH   hl   
2106   CD 0B 08               CALL   prtdec   
2109   E1                     POP   hl   
210A   CD BD 08               CALL   printStr   
210D   20 28 23 00            .CSTR   " (#"   
2111   CD 53 08               CALL   prthex   
2114   CD BD 08               CALL   printStr   
2117   29 0D 0A 00            .CSTR   ")\r\n"   
211B   76                     HALT      
211C   00                     .CSTR      
211D                EXPECTM_0_2190S43:      
211D   E1                     POP   HL   
211E                          ;*Macro unroll:  test "(a) -1%", $0001
211E   31 80 33               LD   SP,STACK   
2121   CD C4 08               CALL   init   
2124   CD A4 32               CALL   execStr   
2127   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
212F                          ;*Macro unroll:  expect "(a) -1%",$0001
212F   E1                     POP   HL   
2130   E5                     PUSH   HL   
2131   11 01 00               LD   DE,$0001   
2134   B7                     OR   A   
2135   ED 52                  SBC   HL,DE   
2137   7D                     LD   A,L   
2138   B4                     OR   H   
2139   28 52                  JR   Z,expectM_0_2191S43   
213B   CD BD 08               CALL   printStr   
213E   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
214C   CD BD 08               CALL   printStr   
214F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
215E   21 01 00               LD   HL,$0001   
2161   CD 0B 08               CALL   prtdec   
2164   CD BD 08               CALL   printStr   
2167   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2174   E1                     POP   hl   
2175   E5                     PUSH   hl   
2176   CD 0B 08               CALL   prtdec   
2179   E1                     POP   hl   
217A   CD BD 08               CALL   printStr   
217D   20 28 23 00            .CSTR   " (#"   
2181   CD 53 08               CALL   prthex   
2184   CD BD 08               CALL   printStr   
2187   29 0D 0A 00            .CSTR   ")\r\n"   
218B   76                     HALT      
218C   00                     .CSTR      
218D                EXPECTM_0_2191S43:      
218D   E1                     POP   HL   
218E                          ;*Macro unroll:  test "(a:) -1%", $0001
218E   31 80 33               LD   SP,STACK   
2191   CD C4 08               CALL   init   
2194   CD A4 32               CALL   execStr   
2197   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
21A0                          ;*Macro unroll:  expect "(a:) -1%",$0001
21A0   E1                     POP   HL   
21A1   E5                     PUSH   HL   
21A2   11 01 00               LD   DE,$0001   
21A5   B7                     OR   A   
21A6   ED 52                  SBC   HL,DE   
21A8   7D                     LD   A,L   
21A9   B4                     OR   H   
21AA   28 53                  JR   Z,expectM_0_2192S43   
21AC   CD BD 08               CALL   printStr   
21AF   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
21BE   CD BD 08               CALL   printStr   
21C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21D0   21 01 00               LD   HL,$0001   
21D3   CD 0B 08               CALL   prtdec   
21D6   CD BD 08               CALL   printStr   
21D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E6   E1                     POP   hl   
21E7   E5                     PUSH   hl   
21E8   CD 0B 08               CALL   prtdec   
21EB   E1                     POP   hl   
21EC   CD BD 08               CALL   printStr   
21EF   20 28 23 00            .CSTR   " (#"   
21F3   CD 53 08               CALL   prthex   
21F6   CD BD 08               CALL   printStr   
21F9   29 0D 0A 00            .CSTR   ")\r\n"   
21FD   76                     HALT      
21FE   00                     .CSTR      
21FF                EXPECTM_0_2192S43:      
21FF   E1                     POP   HL   
2200                          ;*Macro unroll:  test "(a:b) -1%", $0102
2200   31 80 33               LD   SP,STACK   
2203   CD C4 08               CALL   init   
2206   CD A4 32               CALL   execStr   
2209   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
2213                          ;*Macro unroll:  expect "(a:b) -1%",$0102
2213   E1                     POP   HL   
2214   E5                     PUSH   HL   
2215   11 02 01               LD   DE,$0102   
2218   B7                     OR   A   
2219   ED 52                  SBC   HL,DE   
221B   7D                     LD   A,L   
221C   B4                     OR   H   
221D   28 54                  JR   Z,expectM_0_2193S43   
221F   CD BD 08               CALL   printStr   
2222   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
2232   CD BD 08               CALL   printStr   
2235   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2244   21 02 01               LD   HL,$0102   
2247   CD 0B 08               CALL   prtdec   
224A   CD BD 08               CALL   printStr   
224D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
225A   E1                     POP   hl   
225B   E5                     PUSH   hl   
225C   CD 0B 08               CALL   prtdec   
225F   E1                     POP   hl   
2260   CD BD 08               CALL   printStr   
2263   20 28 23 00            .CSTR   " (#"   
2267   CD 53 08               CALL   prthex   
226A   CD BD 08               CALL   printStr   
226D   29 0D 0A 00            .CSTR   ")\r\n"   
2271   76                     HALT      
2272   00                     .CSTR      
2273                EXPECTM_0_2193S43:      
2273   E1                     POP   HL   
2274                          ;*Macro unroll:  test "(:b) -1%", $0101
2274   31 80 33               LD   SP,STACK   
2277   CD C4 08               CALL   init   
227A   CD A4 32               CALL   execStr   
227D   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
2286                          ;*Macro unroll:  expect "(:b) -1%",$0101
2286   E1                     POP   HL   
2287   E5                     PUSH   HL   
2288   11 01 01               LD   DE,$0101   
228B   B7                     OR   A   
228C   ED 52                  SBC   HL,DE   
228E   7D                     LD   A,L   
228F   B4                     OR   H   
2290   28 53                  JR   Z,expectM_0_2194S43   
2292   CD BD 08               CALL   printStr   
2295   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
22A4   CD BD 08               CALL   printStr   
22A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22B6   21 01 01               LD   HL,$0101   
22B9   CD 0B 08               CALL   prtdec   
22BC   CD BD 08               CALL   printStr   
22BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22CC   E1                     POP   hl   
22CD   E5                     PUSH   hl   
22CE   CD 0B 08               CALL   prtdec   
22D1   E1                     POP   hl   
22D2   CD BD 08               CALL   printStr   
22D5   20 28 23 00            .CSTR   " (#"   
22D9   CD 53 08               CALL   prthex   
22DC   CD BD 08               CALL   printStr   
22DF   29 0D 0A 00            .CSTR   ")\r\n"   
22E3   76                     HALT      
22E4   00                     .CSTR      
22E5                EXPECTM_0_2194S43:      
22E5   E1                     POP   HL   
22E6                          ;*Macro unroll:  test "() {2} \\f:", 2
22E6   31 80 33               LD   SP,STACK   
22E9   CD C4 08               CALL   init   
22EC   CD A4 32               CALL   execStr   
22EF   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
22FA                          ;*Macro unroll:  expect "() {2} \\f:",2
22FA   E1                     POP   HL   
22FB   E5                     PUSH   HL   
22FC   11 02 00               LD   DE,2   
22FF   B7                     OR   A   
2300   ED 52                  SBC   HL,DE   
2302   7D                     LD   A,L   
2303   B4                     OR   H   
2304   28 55                  JR   Z,expectM_0_2195S43   
2306   CD BD 08               CALL   printStr   
2309   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
231A   CD BD 08               CALL   printStr   
231D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
232C   21 02 00               LD   HL,2   
232F   CD 0B 08               CALL   prtdec   
2332   CD BD 08               CALL   printStr   
2335   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2342   E1                     POP   hl   
2343   E5                     PUSH   hl   
2344   CD 0B 08               CALL   prtdec   
2347   E1                     POP   hl   
2348   CD BD 08               CALL   printStr   
234B   20 28 23 00            .CSTR   " (#"   
234F   CD 53 08               CALL   prthex   
2352   CD BD 08               CALL   printStr   
2355   29 0D 0A 00            .CSTR   ")\r\n"   
2359   76                     HALT      
235A   00                     .CSTR      
235B                EXPECTM_0_2195S43:      
235B   E1                     POP   HL   
235C                          ;*Macro unroll:  test "(a) {2} \\f:", 2
235C   31 80 33               LD   SP,STACK   
235F   CD C4 08               CALL   init   
2362   CD A4 32               CALL   execStr   
2365   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
2371                          ;*Macro unroll:  expect "(a) {2} \\f:",2
2371   E1                     POP   HL   
2372   E5                     PUSH   HL   
2373   11 02 00               LD   DE,2   
2376   B7                     OR   A   
2377   ED 52                  SBC   HL,DE   
2379   7D                     LD   A,L   
237A   B4                     OR   H   
237B   28 56                  JR   Z,expectM_0_2196S43   
237D   CD BD 08               CALL   printStr   
2380   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
2392   CD BD 08               CALL   printStr   
2395   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23A4   21 02 00               LD   HL,2   
23A7   CD 0B 08               CALL   prtdec   
23AA   CD BD 08               CALL   printStr   
23AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23BA   E1                     POP   hl   
23BB   E5                     PUSH   hl   
23BC   CD 0B 08               CALL   prtdec   
23BF   E1                     POP   hl   
23C0   CD BD 08               CALL   printStr   
23C3   20 28 23 00            .CSTR   " (#"   
23C7   CD 53 08               CALL   prthex   
23CA   CD BD 08               CALL   printStr   
23CD   29 0D 0A 00            .CSTR   ")\r\n"   
23D1   76                     HALT      
23D2   00                     .CSTR      
23D3                EXPECTM_0_2196S43:      
23D3   E1                     POP   HL   
23D4                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
23D4   31 80 33               LD   SP,STACK   
23D7   CD C4 08               CALL   init   
23DA   CD A4 32               CALL   execStr   
23DD   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
23EC                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
23EC   E1                     POP   HL   
23ED   E5                     PUSH   HL   
23EE   11 05 00               LD   DE,5   
23F1   B7                     OR   A   
23F2   ED 52                  SBC   HL,DE   
23F4   7D                     LD   A,L   
23F5   B4                     OR   H   
23F6   28 59                  JR   Z,expectM_0_2197S43   
23F8   CD BD 08               CALL   printStr   
23FB   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
2410   CD BD 08               CALL   printStr   
2413   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2422   21 05 00               LD   HL,5   
2425   CD 0B 08               CALL   prtdec   
2428   CD BD 08               CALL   printStr   
242B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2438   E1                     POP   hl   
2439   E5                     PUSH   hl   
243A   CD 0B 08               CALL   prtdec   
243D   E1                     POP   hl   
243E   CD BD 08               CALL   printStr   
2441   20 28 23 00            .CSTR   " (#"   
2445   CD 53 08               CALL   prthex   
2448   CD BD 08               CALL   printStr   
244B   29 0D 0A 00            .CSTR   ")\r\n"   
244F   76                     HALT      
2450   00                     .CSTR      
2451                EXPECTM_0_2197S43:      
2451   E1                     POP   HL   
2452                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
2452   31 80 33               LD   SP,STACK   
2455   CD C4 08               CALL   init   
2458   CD A4 32               CALL   execStr   
245B   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
246C                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
246C   E1                     POP   HL   
246D   E5                     PUSH   HL   
246E   11 05 00               LD   DE,5   
2471   B7                     OR   A   
2472   ED 52                  SBC   HL,DE   
2474   7D                     LD   A,L   
2475   B4                     OR   H   
2476   28 5B                  JR   Z,expectM_0_2198S43   
2478   CD BD 08               CALL   printStr   
247B   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
2492   CD BD 08               CALL   printStr   
2495   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A4   21 05 00               LD   HL,5   
24A7   CD 0B 08               CALL   prtdec   
24AA   CD BD 08               CALL   printStr   
24AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24BA   E1                     POP   hl   
24BB   E5                     PUSH   hl   
24BC   CD 0B 08               CALL   prtdec   
24BF   E1                     POP   hl   
24C0   CD BD 08               CALL   printStr   
24C3   20 28 23 00            .CSTR   " (#"   
24C7   CD 53 08               CALL   prthex   
24CA   CD BD 08               CALL   printStr   
24CD   29 0D 0A 00            .CSTR   ")\r\n"   
24D1   76                     HALT      
24D2   00                     .CSTR      
24D3                EXPECTM_0_2198S43:      
24D3   E1                     POP   HL   
24D4                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
24D4   31 80 33               LD   SP,STACK   
24D7   CD C4 08               CALL   init   
24DA   CD A4 32               CALL   execStr   
24DD   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
24EC                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
24EC   E1                     POP   HL   
24ED   E5                     PUSH   HL   
24EE   11 02 00               LD   DE,2   
24F1   B7                     OR   A   
24F2   ED 52                  SBC   HL,DE   
24F4   7D                     LD   A,L   
24F5   B4                     OR   H   
24F6   28 59                  JR   Z,expectM_0_2199S43   
24F8   CD BD 08               CALL   printStr   
24FB   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
2510   CD BD 08               CALL   printStr   
2513   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2522   21 02 00               LD   HL,2   
2525   CD 0B 08               CALL   prtdec   
2528   CD BD 08               CALL   printStr   
252B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2538   E1                     POP   hl   
2539   E5                     PUSH   hl   
253A   CD 0B 08               CALL   prtdec   
253D   E1                     POP   hl   
253E   CD BD 08               CALL   printStr   
2541   20 28 23 00            .CSTR   " (#"   
2545   CD 53 08               CALL   prthex   
2548   CD BD 08               CALL   printStr   
254B   29 0D 0A 00            .CSTR   ")\r\n"   
254F   76                     HALT      
2550   00                     .CSTR      
2551                EXPECTM_0_2199S43:      
2551   E1                     POP   HL   
2552                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
2552   31 80 33               LD   SP,STACK   
2555   CD C4 08               CALL   init   
2558   CD A4 32               CALL   execStr   
255B   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
256F                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
256F   E1                     POP   HL   
2570   E5                     PUSH   HL   
2571   11 05 00               LD   DE,5   
2574   B7                     OR   A   
2575   ED 52                  SBC   HL,DE   
2577   7D                     LD   A,L   
2578   B4                     OR   H   
2579   28 5E                  JR   Z,expectM_0_2200S43   
257B   CD BD 08               CALL   printStr   
257E   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
2598   CD BD 08               CALL   printStr   
259B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25AA   21 05 00               LD   HL,5   
25AD   CD 0B 08               CALL   prtdec   
25B0   CD BD 08               CALL   printStr   
25B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25C0   E1                     POP   hl   
25C1   E5                     PUSH   hl   
25C2   CD 0B 08               CALL   prtdec   
25C5   E1                     POP   hl   
25C6   CD BD 08               CALL   printStr   
25C9   20 28 23 00            .CSTR   " (#"   
25CD   CD 53 08               CALL   prthex   
25D0   CD BD 08               CALL   printStr   
25D3   29 0D 0A 00            .CSTR   ")\r\n"   
25D7   76                     HALT      
25D8   00                     .CSTR      
25D9                EXPECTM_0_2200S43:      
25D9   E1                     POP   HL   
25DA                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
25DA   31 80 33               LD   SP,STACK   
25DD   CD C4 08               CALL   init   
25E0   CD A4 32               CALL   execStr   
25E3   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
25F8                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
25F8   E1                     POP   HL   
25F9   E5                     PUSH   HL   
25FA   11 01 00               LD   DE,1   
25FD   B7                     OR   A   
25FE   ED 52                  SBC   HL,DE   
2600   7D                     LD   A,L   
2601   B4                     OR   H   
2602   28 5F                  JR   Z,expectM_0_2201S43   
2604   CD BD 08               CALL   printStr   
2607   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
2622   CD BD 08               CALL   printStr   
2625   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2634   21 01 00               LD   HL,1   
2637   CD 0B 08               CALL   prtdec   
263A   CD BD 08               CALL   printStr   
263D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
264A   E1                     POP   hl   
264B   E5                     PUSH   hl   
264C   CD 0B 08               CALL   prtdec   
264F   E1                     POP   hl   
2650   CD BD 08               CALL   printStr   
2653   20 28 23 00            .CSTR   " (#"   
2657   CD 53 08               CALL   prthex   
265A   CD BD 08               CALL   printStr   
265D   29 0D 0A 00            .CSTR   ")\r\n"   
2661   76                     HALT      
2662   00                     .CSTR      
2663                EXPECTM_0_2201S43:      
2663   E1                     POP   HL   
2664                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
2664   31 80 33               LD   SP,STACK   
2667   CD C4 08               CALL   init   
266A   CD A4 32               CALL   execStr   
266D   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
2685                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
2685   E1                     POP   HL   
2686   E5                     PUSH   HL   
2687   11 07 00               LD   DE,7   
268A   B7                     OR   A   
268B   ED 52                  SBC   HL,DE   
268D   7D                     LD   A,L   
268E   B4                     OR   H   
268F   28 62                  JR   Z,expectM_0_2202S43   
2691   CD BD 08               CALL   printStr   
2694   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
26B2   CD BD 08               CALL   printStr   
26B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C4   21 07 00               LD   HL,7   
26C7   CD 0B 08               CALL   prtdec   
26CA   CD BD 08               CALL   printStr   
26CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26DA   E1                     POP   hl   
26DB   E5                     PUSH   hl   
26DC   CD 0B 08               CALL   prtdec   
26DF   E1                     POP   hl   
26E0   CD BD 08               CALL   printStr   
26E3   20 28 23 00            .CSTR   " (#"   
26E7   CD 53 08               CALL   prthex   
26EA   CD BD 08               CALL   printStr   
26ED   29 0D 0A 00            .CSTR   ")\r\n"   
26F1   76                     HALT      
26F2   00                     .CSTR      
26F3                EXPECTM_0_2202S43:      
26F3   E1                     POP   HL   
26F4                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
26F4   31 80 33               LD   SP,STACK   
26F7   CD C4 08               CALL   init   
26FA   CD A4 32               CALL   execStr   
26FD   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2717                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2717   E1                     POP   HL   
2718   E5                     PUSH   HL   
2719   11 06 00               LD   DE,6   
271C   B7                     OR   A   
271D   ED 52                  SBC   HL,DE   
271F   7D                     LD   A,L   
2720   B4                     OR   H   
2721   28 64                  JR   Z,expectM_0_2203S43   
2723   CD BD 08               CALL   printStr   
2726   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2746   CD BD 08               CALL   printStr   
2749   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2758   21 06 00               LD   HL,6   
275B   CD 0B 08               CALL   prtdec   
275E   CD BD 08               CALL   printStr   
2761   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
276E   E1                     POP   hl   
276F   E5                     PUSH   hl   
2770   CD 0B 08               CALL   prtdec   
2773   E1                     POP   hl   
2774   CD BD 08               CALL   printStr   
2777   20 28 23 00            .CSTR   " (#"   
277B   CD 53 08               CALL   prthex   
277E   CD BD 08               CALL   printStr   
2781   29 0D 0A 00            .CSTR   ")\r\n"   
2785   76                     HALT      
2786   00                     .CSTR      
2787                EXPECTM_0_2203S43:      
2787   E1                     POP   HL   
2788                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
2788   31 80 33               LD   SP,STACK   
278B   CD C4 08               CALL   init   
278E   CD A4 32               CALL   execStr   
2791   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
27A4                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
27A4   E1                     POP   HL   
27A5   E5                     PUSH   HL   
27A6   11 02 00               LD   DE,2   
27A9   B7                     OR   A   
27AA   ED 52                  SBC   HL,DE   
27AC   7D                     LD   A,L   
27AD   B4                     OR   H   
27AE   28 5D                  JR   Z,expectM_0_2204S43   
27B0   CD BD 08               CALL   printStr   
27B3   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
27CC   CD BD 08               CALL   printStr   
27CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DE   21 02 00               LD   HL,2   
27E1   CD 0B 08               CALL   prtdec   
27E4   CD BD 08               CALL   printStr   
27E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27F4   E1                     POP   hl   
27F5   E5                     PUSH   hl   
27F6   CD 0B 08               CALL   prtdec   
27F9   E1                     POP   hl   
27FA   CD BD 08               CALL   printStr   
27FD   20 28 23 00            .CSTR   " (#"   
2801   CD 53 08               CALL   prthex   
2804   CD BD 08               CALL   printStr   
2807   29 0D 0A 00            .CSTR   ")\r\n"   
280B   76                     HALT      
280C   00                     .CSTR      
280D                EXPECTM_0_2204S43:      
280D   E1                     POP   HL   
280E                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
280E   31 80 33               LD   SP,STACK   
2811   CD C4 08               CALL   init   
2814   CD A4 32               CALL   execStr   
2817   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
282D                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
282D   E1                     POP   HL   
282E   E5                     PUSH   HL   
282F   11 01 00               LD   DE,1   
2832   B7                     OR   A   
2833   ED 52                  SBC   HL,DE   
2835   7D                     LD   A,L   
2836   B4                     OR   H   
2837   28 60                  JR   Z,expectM_0_2205S43   
2839   CD BD 08               CALL   printStr   
283C   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2858   CD BD 08               CALL   printStr   
285B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
286A   21 01 00               LD   HL,1   
286D   CD 0B 08               CALL   prtdec   
2870   CD BD 08               CALL   printStr   
2873   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2880   E1                     POP   hl   
2881   E5                     PUSH   hl   
2882   CD 0B 08               CALL   prtdec   
2885   E1                     POP   hl   
2886   CD BD 08               CALL   printStr   
2889   20 28 23 00            .CSTR   " (#"   
288D   CD 53 08               CALL   prthex   
2890   CD BD 08               CALL   printStr   
2893   29 0D 0A 00            .CSTR   ")\r\n"   
2897   76                     HALT      
2898   00                     .CSTR      
2899                EXPECTM_0_2205S43:      
2899   E1                     POP   HL   
289A                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
289A   31 80 33               LD   SP,STACK   
289D   CD C4 08               CALL   init   
28A0   CD A4 32               CALL   execStr   
28A3   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
28BA                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
28BA   E1                     POP   HL   
28BB   E5                     PUSH   HL   
28BC   11 02 00               LD   DE,2   
28BF   B7                     OR   A   
28C0   ED 52                  SBC   HL,DE   
28C2   7D                     LD   A,L   
28C3   B4                     OR   H   
28C4   28 61                  JR   Z,expectM_0_2206S43   
28C6   CD BD 08               CALL   printStr   
28C9   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
28E6   CD BD 08               CALL   printStr   
28E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28F8   21 02 00               LD   HL,2   
28FB   CD 0B 08               CALL   prtdec   
28FE   CD BD 08               CALL   printStr   
2901   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
290E   E1                     POP   hl   
290F   E5                     PUSH   hl   
2910   CD 0B 08               CALL   prtdec   
2913   E1                     POP   hl   
2914   CD BD 08               CALL   printStr   
2917   20 28 23 00            .CSTR   " (#"   
291B   CD 53 08               CALL   prthex   
291E   CD BD 08               CALL   printStr   
2921   29 0D 0A 00            .CSTR   ")\r\n"   
2925   76                     HALT      
2926   00                     .CSTR      
2927                EXPECTM_0_2206S43:      
2927   E1                     POP   HL   
2928                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2928   31 80 33               LD   SP,STACK   
292B   CD C4 08               CALL   init   
292E   CD A4 32               CALL   execStr   
2931   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2949                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2949   E1                     POP   HL   
294A   E5                     PUSH   HL   
294B   11 02 00               LD   DE,2   
294E   B7                     OR   A   
294F   ED 52                  SBC   HL,DE   
2951   7D                     LD   A,L   
2952   B4                     OR   H   
2953   28 62                  JR   Z,expectM_0_2207S43   
2955   CD BD 08               CALL   printStr   
2958   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
2976   CD BD 08               CALL   printStr   
2979   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2988   21 02 00               LD   HL,2   
298B   CD 0B 08               CALL   prtdec   
298E   CD BD 08               CALL   printStr   
2991   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299E   E1                     POP   hl   
299F   E5                     PUSH   hl   
29A0   CD 0B 08               CALL   prtdec   
29A3   E1                     POP   hl   
29A4   CD BD 08               CALL   printStr   
29A7   20 28 23 00            .CSTR   " (#"   
29AB   CD 53 08               CALL   prthex   
29AE   CD BD 08               CALL   printStr   
29B1   29 0D 0A 00            .CSTR   ")\r\n"   
29B5   76                     HALT      
29B6   00                     .CSTR      
29B7                EXPECTM_0_2207S43:      
29B7   E1                     POP   HL   
29B8                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
29B8   31 80 33               LD   SP,STACK   
29BB   CD C4 08               CALL   init   
29BE   CD A4 32               CALL   execStr   
29C1   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
29D8                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
29D8   E1                     POP   HL   
29D9   E5                     PUSH   HL   
29DA   11 02 00               LD   DE,2   
29DD   B7                     OR   A   
29DE   ED 52                  SBC   HL,DE   
29E0   7D                     LD   A,L   
29E1   B4                     OR   H   
29E2   28 61                  JR   Z,expectM_0_2208S43   
29E4   CD BD 08               CALL   printStr   
29E7   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2A04   CD BD 08               CALL   printStr   
2A07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A16   21 02 00               LD   HL,2   
2A19   CD 0B 08               CALL   prtdec   
2A1C   CD BD 08               CALL   printStr   
2A1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A2C   E1                     POP   hl   
2A2D   E5                     PUSH   hl   
2A2E   CD 0B 08               CALL   prtdec   
2A31   E1                     POP   hl   
2A32   CD BD 08               CALL   printStr   
2A35   20 28 23 00            .CSTR   " (#"   
2A39   CD 53 08               CALL   prthex   
2A3C   CD BD 08               CALL   printStr   
2A3F   29 0D 0A 00            .CSTR   ")\r\n"   
2A43   76                     HALT      
2A44   00                     .CSTR      
2A45                EXPECTM_0_2208S43:      
2A45   E1                     POP   HL   
2A46                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
2A46   31 80 33               LD   SP,STACK   
2A49   CD C4 08               CALL   init   
2A4C   CD A4 32               CALL   execStr   
2A4F   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
2A6D                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
2A6D   E1                     POP   HL   
2A6E   E5                     PUSH   HL   
2A6F   11 05 00               LD   DE,5   
2A72   B7                     OR   A   
2A73   ED 52                  SBC   HL,DE   
2A75   7D                     LD   A,L   
2A76   B4                     OR   H   
2A77   28 68                  JR   Z,expectM_0_2209S43   
2A79   CD BD 08               CALL   printStr   
2A7C   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
2AA0   CD BD 08               CALL   printStr   
2AA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AB2   21 05 00               LD   HL,5   
2AB5   CD 0B 08               CALL   prtdec   
2AB8   CD BD 08               CALL   printStr   
2ABB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AC8   E1                     POP   hl   
2AC9   E5                     PUSH   hl   
2ACA   CD 0B 08               CALL   prtdec   
2ACD   E1                     POP   hl   
2ACE   CD BD 08               CALL   printStr   
2AD1   20 28 23 00            .CSTR   " (#"   
2AD5   CD 53 08               CALL   prthex   
2AD8   CD BD 08               CALL   printStr   
2ADB   29 0D 0A 00            .CSTR   ")\r\n"   
2ADF   76                     HALT      
2AE0   00                     .CSTR      
2AE1                EXPECTM_0_2209S43:      
2AE1   E1                     POP   HL   
2AE2                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
2AE2   31 80 33               LD   SP,STACK   
2AE5   CD C4 08               CALL   init   
2AE8   CD A4 32               CALL   execStr   
2AEB   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
2B00                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
2B00   E1                     POP   HL   
2B01   E5                     PUSH   HL   
2B02   11 02 00               LD   DE,2   
2B05   B7                     OR   A   
2B06   ED 52                  SBC   HL,DE   
2B08   7D                     LD   A,L   
2B09   B4                     OR   H   
2B0A   28 5F                  JR   Z,expectM_0_2210S43   
2B0C   CD BD 08               CALL   printStr   
2B0F   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
2B2A   CD BD 08               CALL   printStr   
2B2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B3C   21 02 00               LD   HL,2   
2B3F   CD 0B 08               CALL   prtdec   
2B42   CD BD 08               CALL   printStr   
2B45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B52   E1                     POP   hl   
2B53   E5                     PUSH   hl   
2B54   CD 0B 08               CALL   prtdec   
2B57   E1                     POP   hl   
2B58   CD BD 08               CALL   printStr   
2B5B   20 28 23 00            .CSTR   " (#"   
2B5F   CD 53 08               CALL   prthex   
2B62   CD BD 08               CALL   printStr   
2B65   29 0D 0A 00            .CSTR   ")\r\n"   
2B69   76                     HALT      
2B6A   00                     .CSTR      
2B6B                EXPECTM_0_2210S43:      
2B6B   E1                     POP   HL   
2B6C                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
2B6C   31 80 33               LD   SP,STACK   
2B6F   CD C4 08               CALL   init   
2B72   CD A4 32               CALL   execStr   
2B75   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
2B90                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
2B90   E1                     POP   HL   
2B91   E5                     PUSH   HL   
2B92   11 64 00               LD   DE,100   
2B95   B7                     OR   A   
2B96   ED 52                  SBC   HL,DE   
2B98   7D                     LD   A,L   
2B99   B4                     OR   H   
2B9A   28 65                  JR   Z,expectM_0_2211S43   
2B9C   CD BD 08               CALL   printStr   
2B9F   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
2BC0   CD BD 08               CALL   printStr   
2BC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BD2   21 64 00               LD   HL,100   
2BD5   CD 0B 08               CALL   prtdec   
2BD8   CD BD 08               CALL   printStr   
2BDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BE8   E1                     POP   hl   
2BE9   E5                     PUSH   hl   
2BEA   CD 0B 08               CALL   prtdec   
2BED   E1                     POP   hl   
2BEE   CD BD 08               CALL   printStr   
2BF1   20 28 23 00            .CSTR   " (#"   
2BF5   CD 53 08               CALL   prthex   
2BF8   CD BD 08               CALL   printStr   
2BFB   29 0D 0A 00            .CSTR   ")\r\n"   
2BFF   76                     HALT      
2C00   00                     .CSTR      
2C01                EXPECTM_0_2211S43:      
2C01   E1                     POP   HL   
2C02                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
2C02   31 80 33               LD   SP,STACK   
2C05   CD C4 08               CALL   init   
2C08   CD A4 32               CALL   execStr   
2C0B   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
2C27                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
2C27   E1                     POP   HL   
2C28   E5                     PUSH   HL   
2C29   11 01 00               LD   DE,1   
2C2C   B7                     OR   A   
2C2D   ED 52                  SBC   HL,DE   
2C2F   7D                     LD   A,L   
2C30   B4                     OR   H   
2C31   28 66                  JR   Z,expectM_0_2212S43   
2C33   CD BD 08               CALL   printStr   
2C36   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
2C58   CD BD 08               CALL   printStr   
2C5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C6A   21 01 00               LD   HL,1   
2C6D   CD 0B 08               CALL   prtdec   
2C70   CD BD 08               CALL   printStr   
2C73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C80   E1                     POP   hl   
2C81   E5                     PUSH   hl   
2C82   CD 0B 08               CALL   prtdec   
2C85   E1                     POP   hl   
2C86   CD BD 08               CALL   printStr   
2C89   20 28 23 00            .CSTR   " (#"   
2C8D   CD 53 08               CALL   prthex   
2C90   CD BD 08               CALL   printStr   
2C93   29 0D 0A 00            .CSTR   ")\r\n"   
2C97   76                     HALT      
2C98   00                     .CSTR      
2C99                EXPECTM_0_2212S43:      
2C99   E1                     POP   HL   
2C9A                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
2C9A   31 80 33               LD   SP,STACK   
2C9D   CD C4 08               CALL   init   
2CA0   CD A4 32               CALL   execStr   
2CA3   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
2CC0                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
2CC0   E1                     POP   HL   
2CC1   E5                     PUSH   HL   
2CC2   11 02 00               LD   DE,2   
2CC5   B7                     OR   A   
2CC6   ED 52                  SBC   HL,DE   
2CC8   7D                     LD   A,L   
2CC9   B4                     OR   H   
2CCA   28 67                  JR   Z,expectM_0_2213S43   
2CCC   CD BD 08               CALL   printStr   
2CCF   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
2CF2   CD BD 08               CALL   printStr   
2CF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D04   21 02 00               LD   HL,2   
2D07   CD 0B 08               CALL   prtdec   
2D0A   CD BD 08               CALL   printStr   
2D0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D1A   E1                     POP   hl   
2D1B   E5                     PUSH   hl   
2D1C   CD 0B 08               CALL   prtdec   
2D1F   E1                     POP   hl   
2D20   CD BD 08               CALL   printStr   
2D23   20 28 23 00            .CSTR   " (#"   
2D27   CD 53 08               CALL   prthex   
2D2A   CD BD 08               CALL   printStr   
2D2D   29 0D 0A 00            .CSTR   ")\r\n"   
2D31   76                     HALT      
2D32   00                     .CSTR      
2D33                EXPECTM_0_2213S43:      
2D33   E1                     POP   HL   
2D34                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
2D34   31 80 33               LD   SP,STACK   
2D37   CD C4 08               CALL   init   
2D3A   CD A4 32               CALL   execStr   
2D3D   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2D62                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
2D62   E1                     POP   HL   
2D63   E5                     PUSH   HL   
2D64   11 0B 00               LD   DE,11   
2D67   B7                     OR   A   
2D68   ED 52                  SBC   HL,DE   
2D6A   7D                     LD   A,L   
2D6B   B4                     OR   H   
2D6C   28 6F                  JR   Z,expectM_0_2214S43   
2D6E   CD BD 08               CALL   printStr   
2D71   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2D9C   CD BD 08               CALL   printStr   
2D9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DAE   21 0B 00               LD   HL,11   
2DB1   CD 0B 08               CALL   prtdec   
2DB4   CD BD 08               CALL   printStr   
2DB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DC4   E1                     POP   hl   
2DC5   E5                     PUSH   hl   
2DC6   CD 0B 08               CALL   prtdec   
2DC9   E1                     POP   hl   
2DCA   CD BD 08               CALL   printStr   
2DCD   20 28 23 00            .CSTR   " (#"   
2DD1   CD 53 08               CALL   prthex   
2DD4   CD BD 08               CALL   printStr   
2DD7   29 0D 0A 00            .CSTR   ")\r\n"   
2DDB   76                     HALT      
2DDC   00                     .CSTR      
2DDD                EXPECTM_0_2214S43:      
2DDD   E1                     POP   HL   
2DDE                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
2DDE   31 80 33               LD   SP,STACK   
2DE1   CD C4 08               CALL   init   
2DE4   CD A4 32               CALL   execStr   
2DE7   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
2E0C                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
2E0C   E1                     POP   HL   
2E0D   E5                     PUSH   HL   
2E0E   11 15 00               LD   DE,21   
2E11   B7                     OR   A   
2E12   ED 52                  SBC   HL,DE   
2E14   7D                     LD   A,L   
2E15   B4                     OR   H   
2E16   28 6F                  JR   Z,expectM_0_2215S43   
2E18   CD BD 08               CALL   printStr   
2E1B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
2E46   CD BD 08               CALL   printStr   
2E49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E58   21 15 00               LD   HL,21   
2E5B   CD 0B 08               CALL   prtdec   
2E5E   CD BD 08               CALL   printStr   
2E61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E6E   E1                     POP   hl   
2E6F   E5                     PUSH   hl   
2E70   CD 0B 08               CALL   prtdec   
2E73   E1                     POP   hl   
2E74   CD BD 08               CALL   printStr   
2E77   20 28 23 00            .CSTR   " (#"   
2E7B   CD 53 08               CALL   prthex   
2E7E   CD BD 08               CALL   printStr   
2E81   29 0D 0A 00            .CSTR   ")\r\n"   
2E85   76                     HALT      
2E86   00                     .CSTR      
2E87                EXPECTM_0_2215S43:      
2E87   E1                     POP   HL   
2E88                          ;*Macro unroll:  test "[10 20 30] 1%", 20
2E88   31 80 33               LD   SP,STACK   
2E8B   CD C4 08               CALL   init   
2E8E   CD A4 32               CALL   execStr   
2E91   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
2E9F                          ;*Macro unroll:  expect "[10 20 30] 1%",20
2E9F   E1                     POP   HL   
2EA0   E5                     PUSH   HL   
2EA1   11 14 00               LD   DE,20   
2EA4   B7                     OR   A   
2EA5   ED 52                  SBC   HL,DE   
2EA7   7D                     LD   A,L   
2EA8   B4                     OR   H   
2EA9   28 58                  JR   Z,expectM_0_2216S43   
2EAB   CD BD 08               CALL   printStr   
2EAE   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
2EC2   CD BD 08               CALL   printStr   
2EC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ED4   21 14 00               LD   HL,20   
2ED7   CD 0B 08               CALL   prtdec   
2EDA   CD BD 08               CALL   printStr   
2EDD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EEA   E1                     POP   hl   
2EEB   E5                     PUSH   hl   
2EEC   CD 0B 08               CALL   prtdec   
2EEF   E1                     POP   hl   
2EF0   CD BD 08               CALL   printStr   
2EF3   20 28 23 00            .CSTR   " (#"   
2EF7   CD 53 08               CALL   prthex   
2EFA   CD BD 08               CALL   printStr   
2EFD   29 0D 0A 00            .CSTR   ")\r\n"   
2F01   76                     HALT      
2F02   00                     .CSTR      
2F03                EXPECTM_0_2216S43:      
2F03   E1                     POP   HL   
2F04                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
2F04   31 80 33               LD   SP,STACK   
2F07   CD C4 08               CALL   init   
2F0A   CD A4 32               CALL   execStr   
2F0D   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
2F1B                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
2F1B   E1                     POP   HL   
2F1C   E5                     PUSH   HL   
2F1D   11 02 00               LD   DE,2   
2F20   B7                     OR   A   
2F21   ED 52                  SBC   HL,DE   
2F23   7D                     LD   A,L   
2F24   B4                     OR   H   
2F25   28 58                  JR   Z,expectM_0_2217S43   
2F27   CD BD 08               CALL   printStr   
2F2A   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
2F3E   CD BD 08               CALL   printStr   
2F41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F50   21 02 00               LD   HL,2   
2F53   CD 0B 08               CALL   prtdec   
2F56   CD BD 08               CALL   printStr   
2F59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F66   E1                     POP   hl   
2F67   E5                     PUSH   hl   
2F68   CD 0B 08               CALL   prtdec   
2F6B   E1                     POP   hl   
2F6C   CD BD 08               CALL   printStr   
2F6F   20 28 23 00            .CSTR   " (#"   
2F73   CD 53 08               CALL   prthex   
2F76   CD BD 08               CALL   printStr   
2F79   29 0D 0A 00            .CSTR   ")\r\n"   
2F7D   76                     HALT      
2F7E   00                     .CSTR      
2F7F                EXPECTM_0_2217S43:      
2F7F   E1                     POP   HL   
2F80                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
2F80   31 80 33               LD   SP,STACK   
2F83   CD C4 08               CALL   init   
2F86   CD A4 32               CALL   execStr   
2F89   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
2F9D                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
2F9D   E1                     POP   HL   
2F9E   E5                     PUSH   HL   
2F9F   11 42 00               LD   DE,66   
2FA2   B7                     OR   A   
2FA3   ED 52                  SBC   HL,DE   
2FA5   7D                     LD   A,L   
2FA6   B4                     OR   H   
2FA7   28 5E                  JR   Z,expectM_0_2218S43   
2FA9   CD BD 08               CALL   printStr   
2FAC   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
2FC6   CD BD 08               CALL   printStr   
2FC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FD8   21 42 00               LD   HL,66   
2FDB   CD 0B 08               CALL   prtdec   
2FDE   CD BD 08               CALL   printStr   
2FE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FEE   E1                     POP   hl   
2FEF   E5                     PUSH   hl   
2FF0   CD 0B 08               CALL   prtdec   
2FF3   E1                     POP   hl   
2FF4   CD BD 08               CALL   printStr   
2FF7   20 28 23 00            .CSTR   " (#"   
2FFB   CD 53 08               CALL   prthex   
2FFE   CD BD 08               CALL   printStr   
3001   29 0D 0A 00            .CSTR   ")\r\n"   
3005   76                     HALT      
3006   00                     .CSTR      
3007                EXPECTM_0_2218S43:      
3007   E1                     POP   HL   
3008                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
3008   31 80 33               LD   SP,STACK   
300B   CD C4 08               CALL   init   
300E   CD A4 32               CALL   execStr   
3011   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
3027                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
3027   E1                     POP   HL   
3028   E5                     PUSH   HL   
3029   11 0A 00               LD   DE,10   
302C   B7                     OR   A   
302D   ED 52                  SBC   HL,DE   
302F   7D                     LD   A,L   
3030   B4                     OR   H   
3031   28 60                  JR   Z,expectM_0_2219S43   
3033   CD BD 08               CALL   printStr   
3036   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
3052   CD BD 08               CALL   printStr   
3055   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3064   21 0A 00               LD   HL,10   
3067   CD 0B 08               CALL   prtdec   
306A   CD BD 08               CALL   printStr   
306D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
307A   E1                     POP   hl   
307B   E5                     PUSH   hl   
307C   CD 0B 08               CALL   prtdec   
307F   E1                     POP   hl   
3080   CD BD 08               CALL   printStr   
3083   20 28 23 00            .CSTR   " (#"   
3087   CD 53 08               CALL   prthex   
308A   CD BD 08               CALL   printStr   
308D   29 0D 0A 00            .CSTR   ")\r\n"   
3091   76                     HALT      
3092   00                     .CSTR      
3093                EXPECTM_0_2219S43:      
3093   E1                     POP   HL   
3094                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
3094   31 80 33               LD   SP,STACK   
3097   CD C4 08               CALL   init   
309A   CD A4 32               CALL   execStr   
309D   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
30C1                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
30C1   E1                     POP   HL   
30C2   E5                     PUSH   HL   
30C3   11 0A 00               LD   DE,10   
30C6   B7                     OR   A   
30C7   ED 52                  SBC   HL,DE   
30C9   7D                     LD   A,L   
30CA   B4                     OR   H   
30CB   28 6E                  JR   Z,expectM_0_2220S43   
30CD   CD BD 08               CALL   printStr   
30D0   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
30FA   CD BD 08               CALL   printStr   
30FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
310C   21 0A 00               LD   HL,10   
310F   CD 0B 08               CALL   prtdec   
3112   CD BD 08               CALL   printStr   
3115   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3122   E1                     POP   hl   
3123   E5                     PUSH   hl   
3124   CD 0B 08               CALL   prtdec   
3127   E1                     POP   hl   
3128   CD BD 08               CALL   printStr   
312B   20 28 23 00            .CSTR   " (#"   
312F   CD 53 08               CALL   prthex   
3132   CD BD 08               CALL   printStr   
3135   29 0D 0A 00            .CSTR   ")\r\n"   
3139   76                     HALT      
313A   00                     .CSTR      
313B                EXPECTM_0_2220S43:      
313B   E1                     POP   HL   
313C                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
313C   31 80 33               LD   SP,STACK   
313F   CD C4 08               CALL   init   
3142   CD A4 32               CALL   execStr   
3145   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
316B                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
316B   E1                     POP   HL   
316C   E5                     PUSH   HL   
316D   11 0A 00               LD   DE,10   
3170   B7                     OR   A   
3171   ED 52                  SBC   HL,DE   
3173   7D                     LD   A,L   
3174   B4                     OR   H   
3175   28 70                  JR   Z,expectM_0_2221S43   
3177   CD BD 08               CALL   printStr   
317A   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
31A6   CD BD 08               CALL   printStr   
31A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B8   21 0A 00               LD   HL,10   
31BB   CD 0B 08               CALL   prtdec   
31BE   CD BD 08               CALL   printStr   
31C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31CE   E1                     POP   hl   
31CF   E5                     PUSH   hl   
31D0   CD 0B 08               CALL   prtdec   
31D3   E1                     POP   hl   
31D4   CD BD 08               CALL   printStr   
31D7   20 28 23 00            .CSTR   " (#"   
31DB   CD 53 08               CALL   prthex   
31DE   CD BD 08               CALL   printStr   
31E1   29 0D 0A 00            .CSTR   ")\r\n"   
31E5   76                     HALT      
31E6   00                     .CSTR      
31E7                EXPECTM_0_2221S43:      
31E7   E1                     POP   HL   
31E8                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
31E8   31 80 33               LD   SP,STACK   
31EB   CD C4 08               CALL   init   
31EE   CD A4 32               CALL   execStr   
31F1   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3217                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
3217   E1                     POP   HL   
3218   E5                     PUSH   HL   
3219   11 14 00               LD   DE,20   
321C   B7                     OR   A   
321D   ED 52                  SBC   HL,DE   
321F   7D                     LD   A,L   
3220   B4                     OR   H   
3221   28 70                  JR   Z,expectM_0_2222S43   
3223   CD BD 08               CALL   printStr   
3226   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3252   CD BD 08               CALL   printStr   
3255   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3264   21 14 00               LD   HL,20   
3267   CD 0B 08               CALL   prtdec   
326A   CD BD 08               CALL   printStr   
326D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
327A   E1                     POP   hl   
327B   E5                     PUSH   hl   
327C   CD 0B 08               CALL   prtdec   
327F   E1                     POP   hl   
3280   CD BD 08               CALL   printStr   
3283   20 28 23 00            .CSTR   " (#"   
3287   CD 53 08               CALL   prthex   
328A   CD BD 08               CALL   printStr   
328D   29 0D 0A 00            .CSTR   ")\r\n"   
3291   76                     HALT      
3292   00                     .CSTR      
3293                EXPECTM_0_2222S43:      
3293   E1                     POP   HL   
3294                             ; 
3294                             ; 
3294                             ; 
3294                             ; 
3294                             ; 
3294                             ; 
3294                             ; 
3294                             ; test "10 sqrt", 3
3294                             ; test "10 sqrt %", 1
3294                             ; test "[ 1 ] closure call", 1
3294                             ; test "[ [ 2 ] ] closure call 0%", 2
3294   CD BD 08               CALL   printStr   
3297   44 6F 6E 65 21 00      .CSTR   "Done!"   
329D   76                     HALT      
329E                          ALIGN   2   
329E                PRINTER:      
329E   E1                     POP   hl   
329F   CD 0B 08               CALL   prtdec   
32A2   DD E9                  JP   (ix)   
32A4                             ; executes a null teminated string (null executes exit_)
32A4                             ; the string should be immedaitely following the call
32A4                EXECSTR:      ; create a root stack frame
32A4   C1                     POP   bc   ; bc = code*
32A5   0B                     DEC   bc   ; dec to prepare for next routine
32A6   11 00 00               LD   de,0   
32A9   D5                     PUSH   de   ; push fake IP
32AA   D5                     PUSH   de   ; push null arg_list*
32AB   D5                     PUSH   de   ; push null first_arg*
32AC   D5                     PUSH   de   ; push fake BP
32AD   DD E9                  JP   (ix)   
32AF                          ALIGN   $100   
3300                             ; .org RAMSTART
3300                          DS   DSIZE   
3380                STACK:       
3380                          ALIGN   $100   
3400                VARS:        
3400                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
34D0                RESTARTS:      
34D0                RST08:    DS   2   
34D2                RST10:    DS   2   
34D4                RST18:    DS   2   
34D6                RST20:    DS   2   
34D8                RST28:    DS   2   
34DA                RST30:    DS   2   ; 
34DC                BAUD:     DS   2   ; 
34DE                INTVEC:   DS   2   ; 
34E0                NMIVEC:   DS   2   ; 
34E2                GETCVEC:   DS   2   ; 
34E4                PUTCVEC:   DS   2   ; 
34E6                SYSVARS:      
34E6                             ; initialised sys variables
34E6                VDATAWIDTH:   DS   2   ; 
34E8                VTIBPTR:   DS   2   ; 
34EA                VNEXT:    DS   2   ; 
34EC                VHEAPPTR:   DS   2   ; 
34EE                             ; uninitialised sys variables
34EE                VBLOCKEND:   DS   2   ; 
34F0                VPOINTER:   DS   2   ; 
34F2                VHASHSTR:   DS   2   ; 
34F4                VLASTDEF:   DS   2   ; 
34F6                VREMAIN:   DS   2   ; 
34F8                VTEMP1:   DS   2   ; 
34FA                VTEMP2:   DS   2   ; 
34FC                TBPTR:    DS   2   ; reserved for tests
34FE                          ALIGN   $100   
3500                TIB:      DS   TIBSIZE   
3600                          ALIGN   $100   
3600                PAD:      DS   $100   
3700                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0809 DEFINED AT LINE 1323 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1201 IN monty.asm
                    > USED AT LINE 1590 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 752 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1441 IN monty.asm
                    > USED AT LINE 1465 IN monty.asm
                    > USED AT LINE 1468 IN monty.asm
                    > USED AT LINE 1621 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 810 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1089 IN monty.asm
                    > USED AT LINE 1487 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 221 IN monty.asm
AND_:               0309 DEFINED AT LINE 223 IN monty.asm
ARG_:               030C DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 227 IN monty.asm
ARRBEGIN_:          0312 DEFINED AT LINE 229 IN monty.asm
ARREND_:            0315 DEFINED AT LINE 231 IN monty.asm
ARRINDEX_:          0318 DEFINED AT LINE 233 IN monty.asm
BLOCK_:             031B DEFINED AT LINE 235 IN monty.asm
BLOCKEND_:          031E DEFINED AT LINE 237 IN monty.asm
CHAR_:              0321 DEFINED AT LINE 239 IN monty.asm
COMMAND_:           0324 DEFINED AT LINE 241 IN monty.asm
DOT_:               0327 DEFINED AT LINE 243 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 245 IN monty.asm
GO_:                032D DEFINED AT LINE 247 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 249 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 251 IN monty.asm
IF_:                0336 DEFINED AT LINE 253 IN monty.asm
INV_:               0339 DEFINED AT LINE 255 IN monty.asm
MUL_:               033F DEFINED AT LINE 258 IN monty.asm
NOT_:               0342 DEFINED AT LINE 260 IN monty.asm
NUM_:               0347 DEFINED AT LINE 263 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 265 IN monty.asm
OR_:                034D DEFINED AT LINE 267 IN monty.asm
XOR_:               0350 DEFINED AT LINE 269 IN monty.asm
STRING_:            0353 DEFINED AT LINE 271 IN monty.asm
SUB_:               0356 DEFINED AT LINE 273 IN monty.asm
SUB1:               0362 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
SUB2:               0364 DEFINED AT LINE 284 IN monty.asm
EQ_:                036A DEFINED AT LINE 290 IN monty.asm
EQ0:                0374 DEFINED AT LINE 297 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
EQ1:                0375 DEFINED AT LINE 299 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
GT_:                0379 DEFINED AT LINE 303 IN monty.asm
LT_:                0384 DEFINED AT LINE 312 IN monty.asm
LT1:                038D DEFINED AT LINE 319 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DIV_:               0396 DEFINED AT LINE 325 IN monty.asm
NOP_:               03A5 DEFINED AT LINE 336 IN monty.asm
ADDR:               03A7 DEFINED AT LINE 344 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
AND:                03B3 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
AND1:               03BA DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 370 IN monty.asm
                    > USED AT LINE 380 IN monty.asm
OR:                 03BE DEFINED AT LINE 362 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
XOR:                03C7 DEFINED AT LINE 371 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
XOR1:               03C8 DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
ARG:                03D0 DEFINED AT LINE 385 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARG0:               03EE DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
ARG0A:              03F7 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 391 IN monty.asm
                    > USED AT LINE 398 IN monty.asm
ARG1:               03FC DEFINED AT LINE 417 IN monty.asm
                    > USED AT LINE 410 IN monty.asm
ARG1A:              0404 DEFINED AT LINE 424 IN monty.asm
                    > USED AT LINE 416 IN monty.asm
ARG_LIST:           0407 DEFINED AT LINE 433 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG_LIST1:          0411 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
ARG_LIST2:          041D DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 445 IN monty.asm
ARG_LIST3:          0425 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 447 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
ARG_LIST4:          0428 DEFINED AT LINE 459 IN monty.asm
                    > USED AT LINE 443 IN monty.asm
ARG_LIST5:          042D DEFINED AT LINE 464 IN monty.asm
                    > USED AT LINE 462 IN monty.asm
ARRBEGIN:           0439 DEFINED AT LINE 475 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARREND:             0455 DEFINED AT LINE 489 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARREND1:            046F DEFINED AT LINE 505 IN monty.asm
                    > USED AT LINE 521 IN monty.asm
ARREND2:            047F DEFINED AT LINE 515 IN monty.asm
                    > USED AT LINE 511 IN monty.asm
ARRINDEX:           04A3 DEFINED AT LINE 542 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRINDEX0:          04AB DEFINED AT LINE 548 IN monty.asm
ARRINDEX1:          04AC DEFINED AT LINE 550 IN monty.asm
                    > USED AT LINE 547 IN monty.asm
ARRINDEX2:          04B8 DEFINED AT LINE 559 IN monty.asm
                    > USED AT LINE 556 IN monty.asm
ASSIGN:             04BB DEFINED AT LINE 565 IN monty.asm
                    > USED AT LINE 296 IN monty.asm
ASSIGN1:            04C9 DEFINED AT LINE 575 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
BLOCK:              04CB DEFINED AT LINE 578 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
BLOCK1:             04CF DEFINED AT LINE 582 IN monty.asm
                    > USED AT LINE 586 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
                    > USED AT LINE 620 IN monty.asm
BLOCK2:             04FB DEFINED AT LINE 609 IN monty.asm
                    > USED AT LINE 596 IN monty.asm
                    > USED AT LINE 598 IN monty.asm
                    > USED AT LINE 600 IN monty.asm
BLOCK3:             04FE DEFINED AT LINE 612 IN monty.asm
                    > USED AT LINE 603 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
BLOCK4:             0506 DEFINED AT LINE 618 IN monty.asm
                    > USED AT LINE 589 IN monty.asm
                    > USED AT LINE 591 IN monty.asm
                    > USED AT LINE 593 IN monty.asm
BLOCK5:             0509 DEFINED AT LINE 621 IN monty.asm
                    > USED AT LINE 617 IN monty.asm
BLOCK6:             0531 DEFINED AT LINE 640 IN monty.asm
                    > USED AT LINE 627 IN monty.asm
BLOCKEND:           0534 DEFINED AT LINE 644 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
BLOCKEND1:          0560 DEFINED AT LINE 667 IN monty.asm
                    > USED AT LINE 660 IN monty.asm
BLOCKEND2:          056C DEFINED AT LINE 674 IN monty.asm
                    > USED AT LINE 666 IN monty.asm
BLOCKEND3:          057E DEFINED AT LINE 688 IN monty.asm
                    > USED AT LINE 680 IN monty.asm
CHAR:               0589 DEFINED AT LINE 699 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
CHAR1:              058C DEFINED AT LINE 701 IN monty.asm
                    > USED AT LINE 712 IN monty.asm
CHAR2:              0598 DEFINED AT LINE 710 IN monty.asm
                    > USED AT LINE 707 IN monty.asm
CHAR3:              059B DEFINED AT LINE 713 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
DOT:                059E DEFINED AT LINE 735 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT1:               05AA DEFINED AT LINE 743 IN monty.asm
                    > USED AT LINE 740 IN monty.asm
DOT2:               05B3 DEFINED AT LINE 748 IN monty.asm
                    > USED AT LINE 745 IN monty.asm
DOT3:               05BD DEFINED AT LINE 754 IN monty.asm
                    > USED AT LINE 750 IN monty.asm
DOT4:               05C1 DEFINED AT LINE 757 IN monty.asm
                    > USED AT LINE 742 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 753 IN monty.asm
DIVIDE:             05C8 DEFINED AT LINE 765 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
DIVIDE1:            05CD DEFINED AT LINE 768 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
DIVIDE2:            05DA DEFINED AT LINE 776 IN monty.asm
                    > USED AT LINE 773 IN monty.asm
DIVIDE3:            05DB DEFINED AT LINE 778 IN monty.asm
                    > USED AT LINE 775 IN monty.asm
EQUALS:             05E1 DEFINED AT LINE 786 IN monty.asm
                    > USED AT LINE 301 IN monty.asm
LESSTHANEQ:         05E9 DEFINED AT LINE 794 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
LESSTHAN:           05EE DEFINED AT LINE 801 IN monty.asm
                    > USED AT LINE 323 IN monty.asm
LESSTHAN1:          05F3 DEFINED AT LINE 806 IN monty.asm
                    > USED AT LINE 797 IN monty.asm
TRUE1:              05F6 DEFINED AT LINE 809 IN monty.asm
                    > USED AT LINE 789 IN monty.asm
                    > USED AT LINE 1136 IN monty.asm
NULL1:              05FC DEFINED AT LINE 813 IN monty.asm
FALSE1:             05FC DEFINED AT LINE 814 IN monty.asm
                    > USED AT LINE 790 IN monty.asm
                    > USED AT LINE 804 IN monty.asm
                    > USED AT LINE 807 IN monty.asm
                    > USED AT LINE 1124 IN monty.asm
GO:                 0602 DEFINED AT LINE 823 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
                    > USED AT LINE 1245 IN monty.asm
GO1:                0603 DEFINED AT LINE 825 IN monty.asm
                    > USED AT LINE 968 IN monty.asm
                    > USED AT LINE 970 IN monty.asm
                    > USED AT LINE 1228 IN monty.asm
GO2:                0609 DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 828 IN monty.asm
GOFUNC:             060F DEFINED AT LINE 835 IN monty.asm
GOFUNC1:            0622 DEFINED AT LINE 853 IN monty.asm
                    > USED AT LINE 850 IN monty.asm
GOFUNC2:            0628 DEFINED AT LINE 859 IN monty.asm
                    > USED AT LINE 863 IN monty.asm
GOFUNC3:            062D DEFINED AT LINE 864 IN monty.asm
                    > USED AT LINE 858 IN monty.asm
GOBLOCK:            063B DEFINED AT LINE 877 IN monty.asm
                    > USED AT LINE 833 IN monty.asm
GOBLOCK2:           065C DEFINED AT LINE 895 IN monty.asm
                    > USED AT LINE 852 IN monty.asm
                    > USED AT LINE 887 IN monty.asm
GOBLOCK3:           0661 DEFINED AT LINE 899 IN monty.asm
                    > USED AT LINE 894 IN monty.asm
GOBLOCK4:           0662 DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 875 IN monty.asm
HEXNUM:             066F DEFINED AT LINE 909 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
HEXNUM1:            0672 DEFINED AT LINE 911 IN monty.asm
                    > USED AT LINE 928 IN monty.asm
HEXNUM2:            067A DEFINED AT LINE 917 IN monty.asm
                    > USED AT LINE 915 IN monty.asm
IDENTU:             068C DEFINED AT LINE 929 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENTL:             0691 DEFINED AT LINE 933 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
IDENT1:             0696 DEFINED AT LINE 937 IN monty.asm
                    > USED AT LINE 932 IN monty.asm
IF:                 06A3 DEFINED AT LINE 950 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
IFTE:               06AF DEFINED AT LINE 960 IN monty.asm
                    > USED AT LINE 954 IN monty.asm
IFTE1:              06B0 DEFINED AT LINE 962 IN monty.asm
                    > USED AT LINE 957 IN monty.asm
MUL:                06BC DEFINED AT LINE 972 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
MUL2:               06C6 DEFINED AT LINE 981 IN monty.asm
                    > USED AT LINE 990 IN monty.asm
NUM:                06D8 DEFINED AT LINE 995 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
NUM0:               06E1 DEFINED AT LINE 1001 IN monty.asm
                    > USED AT LINE 999 IN monty.asm
NUM1:               06E2 DEFINED AT LINE 1003 IN monty.asm
                    > USED AT LINE 1020 IN monty.asm
NUM2:               06FA DEFINED AT LINE 1021 IN monty.asm
                    > USED AT LINE 919 IN monty.asm
                    > USED AT LINE 921 IN monty.asm
                    > USED AT LINE 1006 IN monty.asm
                    > USED AT LINE 1008 IN monty.asm
NUM3:               0705 DEFINED AT LINE 1029 IN monty.asm
                    > USED AT LINE 1024 IN monty.asm
REMAIN:             0708 DEFINED AT LINE 1033 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
SHIFTLEFT:          070E DEFINED AT LINE 1040 IN monty.asm
                    > USED AT LINE 316 IN monty.asm
SHIFTLEFT1:         0716 DEFINED AT LINE 1047 IN monty.asm
                    > USED AT LINE 1050 IN monty.asm
SHIFTLEFT2:         0717 DEFINED AT LINE 1049 IN monty.asm
                    > USED AT LINE 1046 IN monty.asm
SHIFTRIGHT:         071E DEFINED AT LINE 1057 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
SHIFTRIGHT1:        0726 DEFINED AT LINE 1064 IN monty.asm
                    > USED AT LINE 1068 IN monty.asm
SHIFTRIGHT2:        072A DEFINED AT LINE 1067 IN monty.asm
                    > USED AT LINE 1063 IN monty.asm
STRING:             0731 DEFINED AT LINE 1076 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
STRING1:            073A DEFINED AT LINE 1083 IN monty.asm
                    > USED AT LINE 1090 IN monty.asm
                    > USED AT LINE 1092 IN monty.asm
STRING2:            073D DEFINED AT LINE 1087 IN monty.asm
                    > USED AT LINE 1082 IN monty.asm
COMMAND:            0759 DEFINED AT LINE 1112 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
ABS1:               079D DEFINED AT LINE 1143 IN monty.asm
                    > USED AT LINE 1118 IN monty.asm
COMMENT:            07AA DEFINED AT LINE 1156 IN monty.asm
                    > USED AT LINE 1116 IN monty.asm
                    > USED AT LINE 1160 IN monty.asm
BYTES:              07B3 DEFINED AT LINE 1164 IN monty.asm
                    > USED AT LINE 1120 IN monty.asm
BYTES1:             07B6 DEFINED AT LINE 1166 IN monty.asm
                    > USED AT LINE 1232 IN monty.asm
FUNC:               07BB DEFINED AT LINE 1171 IN monty.asm
                    > USED AT LINE 1122 IN monty.asm
INPUT:              07D2 DEFINED AT LINE 1190 IN monty.asm
                    > USED AT LINE 1126 IN monty.asm
KEY:                07DD DEFINED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1128 IN monty.asm
OUTPUT:             07E6 DEFINED AT LINE 1209 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
SELECT:             07EF DEFINED AT LINE 1220 IN monty.asm
                    > USED AT LINE 1134 IN monty.asm
WORDS:              07F9 DEFINED AT LINE 1230 IN monty.asm
                    > USED AT LINE 1138 IN monty.asm
REPEAT:             07FF DEFINED AT LINE 1239 IN monty.asm
                    > USED AT LINE 1132 IN monty.asm
LOOP:               0807 DEFINED AT LINE 1250 IN monty.asm
FILTER:             0809 DEFINED AT LINE 1321 IN monty.asm
MAP:                0809 DEFINED AT LINE 1322 IN monty.asm
PRTDEC:             080B DEFINED AT LINE 1396 IN monty.asm
                    > USED AT LINE 756 IN monty.asm
                    > USED AT LINE 1667 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 128
PRTDEC0:            081A DEFINED AT LINE 1407 IN monty.asm
                    > USED AT LINE 1398 IN monty.asm
PRTDEC1:            083C DEFINED AT LINE 1423 IN monty.asm
                    > USED AT LINE 1411 IN monty.asm
                    > USED AT LINE 1413 IN monty.asm
                    > USED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
                    > USED AT LINE 1420 IN monty.asm
PRTDEC2:            083E DEFINED AT LINE 1425 IN monty.asm
                    > USED AT LINE 1428 IN monty.asm
PRTDEC3:            084E DEFINED AT LINE 1437 IN monty.asm
                    > USED AT LINE 1432 IN monty.asm
PRTDEC4:            084F DEFINED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1436 IN monty.asm
PRTHEX:             0853 DEFINED AT LINE 1443 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            085E DEFINED AT LINE 1451 IN monty.asm
                    > USED AT LINE 1446 IN monty.asm
                    > USED AT LINE 1448 IN monty.asm
PRTHEX3:            0867 DEFINED AT LINE 1459 IN monty.asm
                    > USED AT LINE 1457 IN monty.asm
PRTSTR0:            0872 DEFINED AT LINE 1467 IN monty.asm
                    > USED AT LINE 1473 IN monty.asm
PRTSTR:             0876 DEFINED AT LINE 1470 IN monty.asm
                    > USED AT LINE 746 IN monty.asm
                    > USED AT LINE 1537 IN monty.asm
NESTING:            087B DEFINED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
                    > USED AT LINE 1622 IN monty.asm
NESTING0:           0885 DEFINED AT LINE 1492 IN monty.asm
                    > USED AT LINE 1488 IN monty.asm
                    > USED AT LINE 1490 IN monty.asm
NESTING1A:          088C DEFINED AT LINE 1497 IN monty.asm
                    > USED AT LINE 1494 IN monty.asm
NESTING1:           088F DEFINED AT LINE 1500 IN monty.asm
                    > USED AT LINE 1491 IN monty.asm
NESTING2:           089E DEFINED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1504 IN monty.asm
                    > USED AT LINE 1506 IN monty.asm
NESTING3:           08A0 DEFINED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1508 IN monty.asm
NESTING4:           08AB DEFINED AT LINE 1519 IN monty.asm
                    > USED AT LINE 1514 IN monty.asm
                    > USED AT LINE 1516 IN monty.asm
PROMPT:             08AD DEFINED AT LINE 1523 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
CRLF:               08B6 DEFINED AT LINE 1528 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
PRINTSTR:           08BD DEFINED AT LINE 1535 IN monty.asm
                    > USED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1529 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
                    > USED AT LINE 1665 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 121
INIT:               08C4 DEFINED AT LINE 1542 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1560 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              08DD DEFINED AT LINE 1552 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
START:              08E2 DEFINED AT LINE 1558 IN monty.asm
INTERPRET:          08F8 DEFINED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1659 IN monty.asm
                    > USED AT LINE 1668 IN monty.asm
INTERPRET2:         0902 DEFINED AT LINE 1570 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
INTERPRET3:         090A DEFINED AT LINE 1577 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
INTERPRET4:         0910 DEFINED AT LINE 1583 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
INTERPRET5:         0915 DEFINED AT LINE 1589 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
                    > USED AT LINE 1637 IN monty.asm
INTERPRET6:         0926 DEFINED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1592 IN monty.asm
INTERPRET7:         0934 DEFINED AT LINE 1625 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
INTERPRET8:         0947 DEFINED AT LINE 1639 IN monty.asm
                    > USED AT LINE 1595 IN monty.asm
NEXT:               094F DEFINED AT LINE 1645 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1649 IN monty.asm
NEXT1:              095E DEFINED AT LINE 1656 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
EXIT_:              0965 DEFINED AT LINE 1660 IN monty.asm
                    > USED AT LINE 1658 IN monty.asm
ERROR:              0968 DEFINED AT LINE 1664 IN monty.asm
                    > USED AT LINE 1141 IN monty.asm
TESTSSTART:         0A00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2136S43:  0A79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  0ADF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  0B45 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  0BA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  0C0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  0C71 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  0CD5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  0D3B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  0DA3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  0E09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  0E6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  0ED7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  0F41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  0FA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  1011 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  107F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  10ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  1159 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  11C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  1235 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  12A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  131B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  138B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  13F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  1463 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  14CF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  153B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  15AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  161B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  168B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  16F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  1767 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  17D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  183F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  18AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  1917 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  1983 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  19EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  1A5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  1AC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  1B35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  1BA3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  1C11 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  1C81 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  1CF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  1D5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  1DC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  1E35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  1EAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  1F23 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  1F9F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  2027 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  20AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  211D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  218D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  21FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  2273 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  22E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  235B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  23D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  2451 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  24D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  2551 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  25D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  2663 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  26F3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  2787 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  280D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  2899 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  2927 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  29B7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  2A45 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  2AE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  2B6B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  2C01 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  2C99 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  2D33 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  2DDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  2E87 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  2F03 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  2F7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  3007 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  3093 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  313B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  31E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  3293 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            329E DEFINED AT LINE 126
EXECSTR:            32A4 DEFINED AT LINE 133
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3380 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 880 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
                    > USED AT LINE 1559 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3400 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1549 IN monty.asm
RESTARTS:           34D0 DEFINED AT LINE 11 IN ram.asm
RST08:              34D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              34D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              34D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              34D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              34D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              34DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               34DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             34DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             34E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            34E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            34E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            34E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1546 IN monty.asm
VDATAWIDTH:         34E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 509 IN monty.asm
                    > USED AT LINE 545 IN monty.asm
                    > USED AT LINE 570 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
VTIBPTR:            34E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1568 IN monty.asm
                    > USED AT LINE 1640 IN monty.asm
VNEXT:              34EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1543 IN monty.asm
VHEAPPTR:           34EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 435 IN monty.asm
                    > USED AT LINE 466 IN monty.asm
                    > USED AT LINE 499 IN monty.asm
                    > USED AT LINE 531 IN monty.asm
                    > USED AT LINE 532 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 1077 IN monty.asm
                    > USED AT LINE 1096 IN monty.asm
                    > USED AT LINE 1173 IN monty.asm
                    > USED AT LINE 1183 IN monty.asm
                    > USED AT LINE 1185 IN monty.asm
VBLOCKEND:          34EE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           34F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 347 IN monty.asm
                    > USED AT LINE 348 IN monty.asm
                    > USED AT LINE 420 IN monty.asm
                    > USED AT LINE 552 IN monty.asm
                    > USED AT LINE 568 IN monty.asm
                    > USED AT LINE 941 IN monty.asm
VHASHSTR:           34F2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           34F4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            34F6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 331 IN monty.asm
                    > USED AT LINE 1034 IN monty.asm
VTEMP1:             34F8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 492 IN monty.asm
                    > USED AT LINE 533 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
                    > USED AT LINE 639 IN monty.asm
VTEMP2:             34FA DEFINED AT LINE 42 IN ram.asm
TBPTR:              34FC DEFINED AT LINE 43 IN ram.asm
TIB:                3500 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1574 IN monty.asm
                    > USED AT LINE 1617 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
                    > USED AT LINE 1641 IN monty.asm
PAD:                3600 DEFINED AT LINE 49 IN ram.asm
HEAP:               3700 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
