0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4E               LD   (RST08),HL   
0094   22 D2 4E               LD   (RST10),HL   
0097   22 D4 4E               LD   (RST18),HL   
009A   22 D6 4E               LD   (RST20),HL   
009D   22 D8 4E               LD   (RST28),HL   
00A0   22 DA 4E               LD   (RST30),HL   
00A3   22 DE 4E               LD   (INTVEC),HL   
00A6   22 E0 4E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4C                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4D                  DW   BUF   ; vBUFPtr pointer into BUF
0188   C4 0C                  DW   next   ; nNext
018A   1E 4F                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 E4 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 9E 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 C4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 2D 05               JP   rbrace   
031E                TICK_:       
031E   C3 89 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 85 07               JP   semicolon   
0324                DOT_:        
0324   C3 F9 05               JP   dot   
0327                COLON_:      
0327   C3 8E 04               JP   colon   
032A                UPCASE_:      
032A   C3 01 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 06 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 18 07               JP   question   
0333                STAR_:       
0333   C3 31 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 4D 07               JP   num   
033E                HASH_:       
033E   C3 65 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 45 06               JP   caret   
0347                COMMA_:      
0347   C3 A0 05               JP   comma   
034A                DQUOTE_:      
034A   C3 C4 07               JP   dquote   
034D                MINUS_:      
034D   C3 EC 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 7D 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 24 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA B1 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA A1 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 2C 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 31 06               JP   lessthan   
037C                SLASH_:      
037C   C3 AF 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 7D 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 7F 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 4E            LD   de,(vPointer)   
039A   21 F2 4E               LD   hl,vPointer   
039D   C3 00 0B               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 4E               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   18 15                  JR   arrayEnd3   
0431                ARRAYEND1:      
0431   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0434   77                     LD   (hl),a   ; write lsb of array item
0435   23                     INC   hl   ; move to msb of array item
0436   3A E6 4E               LD   a,(vDataWidth)   ; vDataWidth=1?
0439   3D                     DEC   a   
043A   28 05                  JR   z,arrayEnd2   
043C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043F   77                     LD   (hl),a   ; write msb of array item
0440   23                     INC   hl   ; move to next word in array
0441                ARRAYEND2:      
0441   FD 2B                  DEC   iy   ; move to next word on stack
0443   FD 2B                  DEC   iy   
0445   0B                     DEC   bc   ; dec items count
0446                ARRAYEND3:      
0446   79                     LD   a,c   ; if not zero loop
0447   B0                     OR   b   
0448   20 E7                  JR   nz,arrayEnd1   
044A   EB                     EX   de,hl   ; de = end of array, hl = BP
044B   F9                     LD   sp,hl   ; sp = BP
044C   E1                     POP   hl   ; de = end of array, hl = old BP
044D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044E   FD 62                  LD   iyh,d   
0450   FD 6B                  LD   iyl,e   
0452   D1                     POP   de   ; pop arg_list (discard)
0453   D1                     POP   de   ; pop first_arg* (discard)
0454   D1                     POP   de   ; pop IP (discard)
0455   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = array[-2]
0459   13                     INC   de   
045A   13                     INC   de   
045B   D5                     PUSH   de   ; return array[0]
045C   22 F0 4E               LD   (vHeapPtr),hl   ; move heap* to end of array
045F   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
0463   DD E9                  JP   (ix)   
0465                             ; index of an array, based on vDataWidth
0465                             ; array num -- value    ; also sets vPointer to address
0465                HASH:        
0465                ARRAYINDEX:      
0465   E1                     POP   hl   ; hl = index
0466   D1                     POP   de   ; de = array
0467   3A E6 4E               LD   a,(vDataWidth)   ; a = data width
046A   3D                     DEC   a   
046B   28 01                  JR   z,arrayIndex1   
046D                ARRAYINDEX0:      
046D   29                     ADD   hl,hl   ; if data width = 2 then double
046E                ARRAYINDEX1:      
046E   19                     ADD   hl,de   ; add addr
046F   22 F2 4E               LD   (vPointer),hl   ; store address in setter
0472   16 00                  LD   d,0   
0474   5E                     LD   e,(hl)   
0475   B7                     OR   a   ; check data width again
0476   28 02                  JR   z,arrayIndex2   
0478   23                     INC   hl   
0479   56                     LD   d,(hl)   
047A                ARRAYINDEX2:      
047A   D5                     PUSH   de   
047B   DD E9                  JP   (ix)   
047D                             ; value _oldValue --            ; uses address in vPointer
047D                ASSIGN:      
047D   E1                     POP   hl   ; discard last accessed value
047E   E1                     POP   hl   ; hl = new value
047F                ASSIGN0:      
047F   EB                     EX   de,hl   ; de = new value
0480                ASSIGNX:      
0480   2A F2 4E               LD   hl,(vPointer)   
0483   73                     LD   (hl),e   
0484   3A E6 4E               LD   a,(vDataWidth)   
0487   3D                     DEC   a   ; is it byte?
0488   28 02                  JR   z,assign1   
048A   23                     INC   hl   
048B   72                     LD   (hl),d   
048C                ASSIGN1:      
048C   DD E9                  JP   (ix)   
048E                             ; arg_list - parses input (ab:c)
048E                             ; names after the : represent uninitialised locals
048E                             ; return values are the state of the stack after the block ends
048E                             ; format: numLocals totNumArgs argChars...
048E                COLON:       
048E                ARGLIST:      
048E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0491   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0494   E5                     PUSH   hl   ; save start of arg_list
0495   23                     INC   hl   ; skip length fields to start of string
0496   23                     INC   hl   
0497   03                     INC   bc   ; point to next char
0498                ARGLIST1:      
0498   0A                     LD   a,(bc)   
0499   FE 3A                  CP   ":"   ; ":" switches from args to locals
049B   20 03                  JR   nz,arglist1a   
049D   14                     INC   d   ; non zero value local count acts as flag
049E   18 10                  JR   arglist3   
04A0                ARGLIST1A:      
04A0   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A2   38 0F                  JR   c,arglist4   
04A4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04A6   30 0B                  JR   nc,arglist4   
04A8                ARGLIST2:      
04A8   77                     LD   (hl),a   
04A9   23                     INC   hl   
04AA   1C                     INC   e   ; increase arg count
04AB   AF                     XOR   a   
04AC   B2                     OR   d   
04AD   28 01                  JR   z,arglist3   
04AF   14                     INC   d   ; if d > 0 increase local count
04B0                ARGLIST3:      
04B0   03                     INC   bc   ; point to next char
04B1   18 E5                  JR   arglist1   
04B3                ARGLIST4:      
04B3   0B                     DEC   bc   
04B4   AF                     XOR   a   
04B5   B2                     OR   d   
04B6   28 01                  JR   z,arglist5   
04B8   15                     DEC   d   ; remove initial inc
04B9                ARGLIST5:      
04B9   23                     INC   hl   
04BA   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04BD   E1                     POP   hl   ; hl = start of arg_list
04BE   E5                     PUSH   hl   ; return start of arg_list
04BF   72                     LD   (hl),d   ; write number of locals at start - 1
04C0   23                     INC   hl   
04C1   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C2   DD E9                  JP   (ix)   
04C4                LBRACE:      
04C4                BLOCKSTART:      
04C4   C5                     PUSH   bc   ; return pointer to first { of block
04C5   03                     INC   bc   
04C6   16 01                  LD   d,1   ; nesting: count first parenthesis
04C8                BLOCKSTART1:      ; Skip to end of definition
04C8   0A                     LD   a,(bc)   ; Get the next character
04C9   03                     INC   bc   ; Point to next character
04CA   FE 21                  CP   " " + 1   ; ignore whitespace
04CC   38 FA                  JR   c,blockStart1   
04CE   FE 29                  CP   ")"   
04D0   28 2D                  JR   z,blockStart4   
04D2   FE 7D                  CP   "}"   
04D4   28 29                  JR   z,blockStart4   
04D6   FE 5D                  CP   "]"   
04D8   28 25                  JR   z,blockStart4   
04DA   FE 28                  CP   "("   
04DC   28 16                  JR   z,blockStart2   
04DE   FE 7B                  CP   "{"   
04E0   28 12                  JR   z,blockStart2   
04E2   FE 5B                  CP   "["   
04E4   28 0E                  JR   z,blockStart2   
04E6   FE 27                  CP   "'"   
04E8   28 0D                  JR   z,blockStart3   
04EA   FE 60                  CP   "`"   
04EC   28 09                  JR   z,blockStart3   
04EE   FE 22                  CP   DQ   
04F0   28 05                  JR   z,blockStart3   
04F2   18 D4                  JR   blockStart1   
04F4                BLOCKSTART2:      
04F4   14                     INC   d   
04F5   18 D1                  JR   blockStart1   
04F7                BLOCKSTART3:      
04F7   3E 80                  LD   a,$80   
04F9   AA                     XOR   d   
04FA   57                     LD   d,a   
04FB   20 CB                  JR   nz,blockStart1   
04FD   18 03                  JR   blockStart5   
04FF                BLOCKSTART4:      
04FF   15                     DEC   d   
0500   20 C6                  JR   nz,blockStart1   ; get the next element
0502                BLOCKSTART5:      
0502   60 69                  LD   hl,bc   ; hl = IP
0504   11 1E 4F               LD   de,HEAP   ; is IP pointing to object in heap
0507   B7                     OR   a   ; IP - HEAP
0508   ED 52                  SBC   hl,de   
050A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050C   28 1C                  JR   z,blockStart6   
050E   60 69                  LD   hl,bc   ; hl = IP
0510   D1                     POP   de   ; de = block*
0511   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
0515   B7                     OR   a   ; bc = size
0516   ED 52                  SBC   hl,de   
0518   44 4D                  LD   bc,hl   
051A   EB                     EX   de,hl   ; hl = block* de = heap*
051B   ED 5B F0 4E            LD   de,(vHeapPtr)   
051F   D5                     PUSH   de   ; return hblock*
0520   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0522   ED 53 F0 4E            LD   (vHeapPtr),de   ; heap* += size
0526   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
052A                BLOCKSTART6:      
052A   0B                     DEC   bc   ; balanced, exit
052B   DD E9                  JP   (ix)   
052D                RBRACE:      
052D                BLOCKEND:      
052D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0530   FD 56 01               LD   d,(iy+1)   
0533   ED 53 00 4F            LD   (vTemp1),de   
0537   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
053A   FD 56 07               LD   d,(iy+7)   
053D   ED 53 02 4F            LD   (vTemp2),de   
0541   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0544   FD 56 03               LD   d,(iy+3)   
0547   EB                     EX   de,hl   
0548   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054B   FD 56 01               LD   d,(iy+1)   
054E   13                     INC   de   ; for carry flag <=
054F   B7                     OR   a   
0550   ED 52                  SBC   hl,de   
0552   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0554   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0556   FD 5D                  LD   e,iyl   
0558   21 08 00               LD   hl,8   
055B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055D   18 0C                  JR   blockEnd2   
055F                BLOCKEND1:      ; same scope
055F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0562   FD 56 03               LD   d,(iy+3)   
0565   EB                     EX   de,hl   
0566   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0568   FD 5D                  LD   e,iyl   
056A   EB                     EX   de,hl   
056B                BLOCKEND2:      
056B   44 4D                  LD   bc,hl   ; bc = hl = BP
056D   B7                     OR   a   ; hl = BP - SP = count
056E   ED 72                  SBC   hl,sp   
0570   7D                     LD   a,l   
0571   B4                     OR   h   
0572   28 09                  JR   z,blockEnd3   
0574   C5                     PUSH   bc   ; bc = count, hl = BP
0575   44 4D                  LD   bc,hl   
0577   E1                     POP   hl   
0578   2B                     DEC   hl   ; hl = BP-1
0579   1B                     DEC   de   ; de = args*-1
057A   ED B8                  LDDR      
057C   13                     INC   de   
057D                BLOCKEND3:      
057D   EB                     EX   de,hl   ; sp = de = new tos*
057E   F9                     LD   sp,hl   
057F   ED 4B 02 4F            LD   bc,(vTemp2)   
0583   FD 2A 00 4F            LD   iy,(vTemp1)   
0587   DD E9                  JP   (ix)   
0589                TICK:        
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                BACKSLASH:      
059E   DD E9                  JP   (ix)   
05A0                             ; , discard stack item
05A0                             ; x y -- x
05A0                COMMA:       
05A0                DISCARD:      
05A0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A2   FD 5D                  LD   e,iyl   
05A4   EB                     EX   de,hl   
05A5   B7                     OR   a   
05A6   ED 72                  SBC   hl,sp   
05A8   CB 7C                  BIT   7,h   
05AA   20 01                  JR   nz,discard1   
05AC   E1                     POP   hl   
05AD                DISCARD1:      
05AD   DD E9                  JP   (ix)   
05AF                SLASH:       
05AF                COMMAND:      
05AF   CD 60 0B               CALL   jumpTable   
05B2   2F                     DB   "/"   ; // comment
05B3   12 08                  DW   comment   
05B5   61                     DB   "a"   
05B6   1B 08                  DW   command_a   
05B8   62                     DB   "b"   
05B9   55 08                  DW   command_b   
05BB   63                     DB   "c"   ; /c chars
05BC   06 0B                  DW   chars   
05BE   64                     DB   "d"   ; /d decimal
05BF   0E 0B                  DW   decimal   
05C1   66                     DB   "f"   ; /f false
05C2   3F 06                  DW   false1   
05C4   68                     DB   "h"   ; /h hexadecimal
05C5   16 0B                  DW   hexadecimal   
05C7   69                     DB   "i"   
05C8   A4 09                  DW   command_i   
05CA   6B                     DB   "k"   ; /k key
05CB   27 0B                  DW   key   
05CD   6E                     DB   "n"   ; /n numbers
05CE   39 0B                  DW   numbers   
05D0   6F                     DB   "o"   ; /o output
05D1   30 0B                  DW   output   
05D3   70                     DB   "p"   
05D4   B0 09                  DW   command_p   
05D6   72                     DB   "r"   
05D7   AA 0A                  DW   command_r   
05D9   73                     DB   "s"   ; /s size
05DA   B9 0A                  DW   size   
05DC   74                     DB   "t"   ; /t true
05DD   39 06                  DW   true1   
05DF   76                     DB   "v"   
05E0   C1 0A                  DW   command_v   
05E2   78                     DB   "x"   ; /x xor
05E3   B4 03                  DW   xor   
05E5   00                     DB   NUL   
05E6   E8 05                  DW   div   
05E8                DIV:         
05E8   D1                     POP   de   
05E9   E1                     POP   hl   
05EA   C5                     PUSH   bc   ; preserve the IP
05EB   44 4D                  LD   bc,hl   
05ED   CD 0B 06               CALL   divide   
05F0   EB                     EX   de,hl   
05F1   ED 53 F4 4E            LD   (vRemain),de   
05F5   C1                     POP   bc   
05F6   C3 93 03               JP   add3   
05F9                DOT:         
05F9   CD 60 0B               CALL   jumpTable   
05FC   61                     DB   "a"   ; .a print array
05FD   61 08                  DW   bufferArray   
05FF   63                     DB   "c"   ; .c print char
0600   83 09                  DW   bufferChar   
0602   73                     DB   "s"   ; .s print string
0603   69 09                  DW   bufferString   
0605   78                     DB   "x"   ; .x print x chars
0606   88 09                  DW   bufferXChars   
0608   00                     DB   NUL   ; .  print number
0609   AA 08                  DW   bufferNumber   
060B                             ; division subroutine.
060B                             ; bc: divisor, de: dividend, hl: remainder
060B                DIVIDE:      
060B   21 00 00               LD   hl,0   ; zero the remainder
060E   3E 10                  LD   a,16   ; loop counter
0610                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0610   CB 21                  SLA   c   
0612   CB 10                  RL   b   
0614   ED 6A                  ADC   hl,hl   
0616   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0618   38 03                  JR   c,divide2   
061A   0C                     INC   c   
061B   18 01                  JR   divide3   
061D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061D   19                     ADD   hl,de   
061E                DIVIDE3:      
061E   3D                     DEC   a   
061F   20 EF                  JR   nz,divide1   
0621   50 59                  LD   de,bc   ; result from bc to de
0623   C9                     RET      
0624                             ; hl = value1, de = value2
0624                             ; hl = result
0624                EQUALS:      
0624   B7                     OR   a   ; reset the carry flag
0625   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0627   28 10                  JR   z,true1   
0629   C3 3F 06               JP   false1   
062C                             ; hl = value1 de = value2
062C                             ; hl = result
062C                LESSTHANEQ:      
062C   B7                     OR   a   
062D   ED 52                  SBC   hl,de   
062F   18 05                  JR   lessthan1   
0631                             ; hl = value1 de = value2
0631                             ; hl = result
0631                LESSTHAN:      
0631   B7                     OR   a   
0632   ED 52                  SBC   hl,de   
0634   28 09                  JR   z,false1   
0636                LESSTHAN1:      
0636   FA 3F 06               JP   m,false1   
0639                TRUE1:       
0639   21 FF FF               LD   hl,TRUE   
063C   E5                     PUSH   hl   
063D   DD E9                  JP   (ix)   
063F                NULL1:       
063F                FALSE1:      
063F   21 00 00               LD   hl,FALSE   
0642   E5                     PUSH   hl   
0643   DD E9                  JP   (ix)   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 06                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8A 06               JP   nz,goLambda   
0656                             ; inc de                      ; de is the address to jump back to
0656   D5                     PUSH   de   ; push de just before stack frame
0657                GOBLOCK:      
0657                GOBLOCK1:      
0657   ED 53 00 4F            LD   (vTemp1),de   ; save de
065B   21 00 4C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065E   FD 54                  LD   d,iyh   
0660   FD 5D                  LD   e,iyl   
0662   B7                     OR   a   ; if stack* == BP then this is the root_scope
0663   ED 52                  SBC   hl,de   
0665   ED 5B 00 4F            LD   de,(vTemp1)   ; restore de
0669   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066A   B4                     OR   h   
066B   3E 00                  LD   a,0   
066D   28 6A                  JR   z,goLambda8   
066F   C5                     PUSH   bc   ; push IP
0670   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0673   FD 46 05               LD   b,(iy+5)   
0676   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0679   FD 66 03               LD   h,(iy+3)   
067C                GOBLOCK2:      
067C   C5                     PUSH   bc   ; arg_list*
067D   E5                     PUSH   hl   ; first_arg*
067E   FD E5                  PUSH   iy   ; push BP
0680   FD 21 00 00            LD   iy,0   ; BP = SP
0684   FD 39                  ADD   iy,sp   
0686   42 4B                  LD   bc,de   ; bc = de = block*-1
0688   DD E9                  JP   (ix)   
068A                GOLAMBDA:      ; execute lambda
068A   EB                     EX   de,hl   ; hl = lambda*
068B   5E                     LD   e,(hl)   ; de = partial_array*
068C   23                     INC   hl   
068D   56                     LD   d,(hl)   
068E   23                     INC   hl   
068F   7B                     LD   a,e   ; if partial_array* == null skip
0690   B2                     OR   d   
0691   28 21                  JR   z,goLambda3   
0693   ED 43 00 4F            LD   (vTemp1),bc   
0697   22 02 4F               LD   (vTemp2),hl   ; save bc,hl
069A   EB                     EX   de,hl   ; hl = partial_array*
069B   2B                     DEC   hl   ; bc = count
069C   46                     LD   b,(hl)   
069D   2B                     DEC   hl   
069E   4E                     LD   c,(hl)   
069F   23                     INC   hl   ; hl = array data*
06A0   23                     INC   hl   
06A1   18 06                  JR   goLambda2   ; push each item on stack
06A3                GOLAMBDA1:      
06A3   5E                     LD   e,(hl)   ; de = partial item
06A4   23                     INC   hl   
06A5   56                     LD   d,(hl)   
06A6   23                     INC   hl   
06A7   D5                     PUSH   de   ; push on stack
06A8   0B                     DEC   bc   
06A9                GOLAMBDA2:      
06A9   79                     LD   a,c   ; if count != 0 then loop
06AA   B0                     OR   b   
06AB   20 F6                  JR   nz,goLambda1   
06AD   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore bc
06B1   2A 02 4F               LD   hl,(vTemp2)   ; restore hl
06B4                GOLAMBDA3:      
06B4   5E                     LD   e,(hl)   ; de = block*
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   ED 53 00 4F            LD   (vTemp1),de   ; save block*
06BC   5E                     LD   e,(hl)   ; de = arg_list*
06BD   23                     INC   hl   
06BE   56                     LD   d,(hl)   
06BF   23                     INC   hl   
06C0   EB                     EX   de,hl   ; hl = arg_list*
06C1   ED 5B 00 4F            LD   de,(vTemp1)   ; restore de = block*
06C5   7D                     LD   a,l   ; if arg_list* == null a = 0
06C6   B4                     OR   h   
06C7   20 03                  JR   nz,goLambda4   
06C9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06CA   18 0D                  JR   goLambda8   
06CC                GOLAMBDA4:      ; allocate locals
06CC   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06CD   18 03                  JR   goLambda6   
06CF                GOLAMBDA5:      ; loop
06CF   3B                     DEC   sp   
06D0   3B                     DEC   sp   
06D1   3D                     DEC   a   
06D2                GOLAMBDA6:      
06D2   B7                     OR   a   
06D3   20 FA                  JR   nz,goLambda5   ; end loop
06D5                GOLAMBDA7:      
06D5   23                     INC   hl   ; a = num_args* x 2
06D6   7E                     LD   a,(hl)   
06D7   2B                     DEC   hl   
06D8   87                     ADD   a,a   ; a *= 2
06D9                GOLAMBDA8:      
06D9   C5                     PUSH   bc   ; push IP
06DA   44 4D                  LD   bc,hl   
06DC   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DF   85                     ADD   a,l   
06E0   6F                     LD   l,a   
06E1   39                     ADD   hl,sp   
06E2   18 98                  JR   goBlock2   
06E4                DOLLAR:      
06E4                HEXNUM:      
06E4   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E7                HEXNUM1:      
06E7   03                     INC   bc   
06E8   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E9   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EB   28 02                  JR   z,hexnum2   ; no a decimal
06ED   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EF                HEXNUM2:      
06EF   D6 30                  SUB   $30   ; form decimal digit
06F1   DA 6F 07               JP   c,num2   
06F4   FE 10                  CP   $0F+1   
06F6   D2 6F 07               JP   nc,num2   
06F9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FA   29                     ADD   hl,hl   ; 4X
06FB   29                     ADD   hl,hl   ; 8X
06FC   29                     ADD   hl,hl   ; 16X
06FD   85                     ADD   a,l   ; add into bottom of hl
06FE   6F                     LD   l,a   
06FF   18 E6                  JR   hexnum1   
0701                UPCASE:      
0701   0A                     LD   a,(bc)   ; a = identifier char
0702   D6 41                  SUB   "A"   ; "A" = 0
0704   18 05                  JR   ident1   
0706                LOWCASE:      
0706   0A                     LD   a,(bc)   
0707   D6 61                  SUB   "a"   
0709   C6 1A                  ADD   a,26   
070B                IDENT1:      
070B   87                     ADD   a,a   ; l = a * 2
070C   6F                     LD   l,a   
070D   26 4E                  LD   h,msb(vars)   
070F   22 F2 4E               LD   (vPointer),hl   ; store address in setter
0712   5E                     LD   e,(hl)   
0713   23                     INC   hl   
0714   56                     LD   d,(hl)   
0715   D5                     PUSH   de   
0716   DD E9                  JP   (ix)   
0718                             ; if
0718                             ; condition then -- value
0718                QUESTION:      
0718                IF:          
0718   03                     INC   bc   
0719   0A                     LD   a,(bc)   
071A   FE 3F                  CP   "?"   
071C   28 06                  JR   z,ifte   
071E   0B                     DEC   bc   
071F   11 00 00               LD   de,NUL   ; NUL pointer for else
0722   18 01                  JR   ifte1   
0724                             ; ifte
0724                             ; condition then else -- value
0724                IFTE:        
0724   D1                     POP   de   ; de = else
0725                IFTE1:       
0725   E1                     POP   hl   ; hl = then
0726   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0727   7C                     LD   a,h   
0728   B5                     OR   l   
0729   E1                     POP   hl   ; hl = then
072A   CA 46 06               JP   z,go1   ; if z de = else
072D   EB                     EX   de,hl   ; condition = false, de = then
072E   C3 46 06               JP   go1   
0731                STAR:        
0731                MUL:         
0731   D1                     POP   de   ; get first value
0732   E1                     POP   hl   
0733                MUL2:        
0733   C5                     PUSH   bc   ; Preserve the IP
0734   44 4D                  LD   bc,hl   ; bc = 2nd value
0736   21 00 00               LD   hl,0   
0739   3E 10                  LD   a,16   
073B                MUL3:        
073B   29                     ADD   hl,hl   
073C   CB 13                  RL   e   
073E   CB 12                  RL   d   
0740   30 04                  JR   nc,$+6   
0742   09                     ADD   hl,bc   
0743   30 01                  JR   nc,$+3   
0745   13                     INC   de   
0746   3D                     DEC   a   
0747   20 F2                  JR   nz,mul3   
0749   C1                     POP   bc   ; Restore the IP
074A   C3 93 03               JP   add3   
074D                NUM:         
074D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0750   0A                     LD   a,(bc)   ; Get numeral or -
0751   FE 2D                  CP   "-"   
0753   20 01                  JR   nz,num0   
0755   03                     INC   bc   ; move to next char, no flags affected
0756                NUM0:        
0756   08                     EX   af,af'   ; save zero flag = 0 for later
0757                NUM1:        
0757   0A                     LD   a,(bc)   ; read digit
0758   D6 30                  SUB   "0"   ; less than 0?
075A   38 13                  JR   c,num2   ; not a digit, exit loop
075C   FE 0A                  CP   10   ; greater that 9?
075E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0760   03                     INC   bc   ; inc IP
0761   54 5D                  LD   de,hl   ; multiply hl * 10
0763   29                     ADD   hl,hl   
0764   29                     ADD   hl,hl   
0765   19                     ADD   hl,de   
0766   29                     ADD   hl,hl   
0767   85                     ADD   a,l   ; add digit in a to hl
0768   6F                     LD   l,a   
0769   3E 00                  LD   a,0   
076B   8C                     ADC   a,h   
076C   67                     LD   h,a   
076D   18 E8                  JR   num1   
076F                NUM2:        
076F   0B                     DEC   bc   
0770   08                     EX   af,af'   ; restore zero flag
0771   20 07                  JR   nz,num3   
0773   EB                     EX   de,hl   ; negate the value of hl
0774   21 00 00               LD   hl,0   
0777   B7                     OR   a   ; jump to sub2
0778   ED 52                  SBC   hl,de   
077A                NUM3:        
077A   E5                     PUSH   hl   ; Put the number on the stack
077B   DD E9                  JP   (ix)   ; and process the next character
077D                RPAREN:      
077D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0780   FD 46 09               LD   b,(iy+9)   
0783   DD E9                  JP   (ix)   
0785                             ; arg_list* block* -- ptr
0785                SEMICOLON:      
0785   D1                     POP   de   ; de = block* hl = heap*
0786   2A F0 4E               LD   hl,(vHeapPtr)   
0789   AF                     XOR   a   
078A   77                     LD   (hl),a   ; compile null partial_array*
078B   23                     INC   hl   
078C   77                     LD   (hl),a   
078D   23                     INC   hl   
078E   73                     LD   (hl),e   ; compile block*
078F   23                     INC   hl   
0790   72                     LD   (hl),d   
0791   23                     INC   hl   
0792   D1                     POP   de   ; de = block*
0793   73                     LD   (hl),e   ; compile arg_list*
0794   23                     INC   hl   
0795   72                     LD   (hl),d   
0796   23                     INC   hl   
0797   ED 5B F0 4E            LD   de,(vHeapPtr)   ; return lambda*
079B   D5                     PUSH   de   
079C   22 F0 4E               LD   (vHeapPtr),hl   ; heap* += 4
079F   DD E9                  JP   (ix)   
07A1                             ; shiftLeft
07A1                             ; value count -- value2          shift left count places
07A1                SHIFTLEFT:      
07A1   50 59                  LD   de,bc   ; save IP
07A3   C1                     POP   bc   ; bc = count
07A4   41                     LD   b,c   ; b = loop counter
07A5   E1                     POP   hl   
07A6   04                     INC   b   ; test for counter=0 case
07A7   18 01                  JR   shiftLeft2   
07A9                SHIFTLEFT1:      
07A9   29                     ADD   hl,hl   ; left shift hl
07AA                SHIFTLEFT2:      
07AA   10 FD                  DJNZ   shiftLeft1   
07AC   E5                     PUSH   hl   
07AD   42 4B                  LD   bc,de   ; restore IP
07AF   DD E9                  JP   (ix)   
07B1                             ; shiftRight
07B1                             ; value count -- value2          shift left count places
07B1                SHIFTRIGHT:      
07B1   50 59                  LD   de,bc   ; save IP
07B3   C1                     POP   bc   ; bc = count
07B4   41                     LD   b,c   ; b = loop counter
07B5   E1                     POP   hl   
07B6   04                     INC   b   ; test for counter=0 case
07B7   18 04                  JR   shiftRight2   
07B9                SHIFTRIGHT1:      
07B9   CB 3C                  SRL   h   ; right shift hl
07BB   CB 1D                  RR   l   
07BD                SHIFTRIGHT2:      
07BD   10 FA                  DJNZ   shiftRight1   
07BF   E5                     PUSH   hl   
07C0   42 4B                  LD   bc,de   ; restore IP
07C2   DD E9                  JP   (ix)   
07C4                             ; string
07C4                             ; -- ptr                        ; points to start of string chars,
07C4                             ; length is stored at start - 2 bytes
07C4                DQUOTE:      
07C4                STRING:      
07C4   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
07C7   23                     INC   hl   ; skip length field to start
07C8   23                     INC   hl   
07C9   E5                     PUSH   hl   ; save start of string
07CA   03                     INC   bc   ; point to next char
07CB   18 03                  JR   string2   
07CD                STRING1:      
07CD   77                     LD   (hl),a   
07CE   23                     INC   hl   ; increase count
07CF   03                     INC   bc   ; point to next char
07D0                STRING2:      
07D0   0A                     LD   a,(bc)   
07D1   FE 22                  CP   DQ   ; " is the string terminator
07D3   28 04                  JR   z,string3   
07D5   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D7   20 F4                  JR   nz,string1   
07D9                STRING3:      
07D9   AF                     XOR   a   ; write NUL to terminate string
07DA   77                     LD   (hl),a   ; hl = end of string
07DB   23                     INC   hl   
07DC   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07DF   2B                     DEC   hl   ; hl = end of string without terminator
07E0   D1                     POP   de   ; de = start of string
07E1   D5                     PUSH   de   ; return start of string
07E2   B7                     OR   a   ; hl = length bytes, de = start of string
07E3   ED 52                  SBC   hl,de   
07E5   EB                     EX   de,hl   
07E6   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E7   72                     LD   (hl),d   
07E8   2B                     DEC   hl   
07E9   73                     LD   (hl),e   
07EA   DD E9                  JP   (ix)   
07EC                MINUS:       ; negative sign or subtract
07EC   03                     INC   bc   ; check if sign of a number
07ED   0A                     LD   a,(bc)   
07EE   0B                     DEC   bc   
07EF   FE 30                  CP   "0"   
07F1   38 05                  JR   c,sub   
07F3   FE 3A                  CP   "9"+1   
07F5   DA 3B 03               JP   c,num_   
07F8                SUB:         ; Subtract the value 2nd on stack from top of stack
07F8   03                     INC   bc   
07F9   FE 2D                  CP   "-"   
07FB   20 05                  JR   nz,sub1   
07FD   E1                     POP   hl   
07FE   2B                     DEC   hl   
07FF   C3 7F 04               JP   assign0   
0802                SUB1:        
0802   0B                     DEC   bc   
0803   D1                     POP   de   
0804   E1                     POP   hl   
0805   B7                     OR   a   
0806   ED 52                  SBC   hl,de   
0808   C3 93 03               JP   add3   
080B                ERROR1:      
080B   21 01 00               LD   hl,1   ; error 1: unknown command
080E   E5                     PUSH   hl   
080F   C3 E4 0C               JP   error   
0812                COMMENT:      
0812   03                     INC   bc   ; point to next char
0813   0A                     LD   a,(bc)   
0814   FE 20                  CP   " "   ; terminate on any char less than SP
0816   30 FA                  JR   nc,comment   
0818   0B                     DEC   bc   
0819   DD E9                  JP   (ix)   
081B                COMMAND_A:      
081B   CD 60 0B               CALL   jumpTable   
081E   62                     DB   "b"   ; /ab absolute
081F   27 08                  DW   absolute   
0821   64                     DB   "d"   ; /ad address of
0822   34 08                  DW   addrOf   
0824   00                     DB   NUL   
0825   0B 08                  DW   error1   
0827                             ; /ab absolute
0827                             ; num -- num
0827                ABSOLUTE:      
0827   E1                     POP   hl   
0828   CB 7C                  BIT   7,h   
082A   C8                     RET   z   
082B   AF                     XOR   a   
082C   95                     SUB   l   
082D   6F                     LD   l,a   
082E   9F                     SBC   a,a   
082F   94                     SUB   h   
0830   67                     LD   h,a   
0831   E5                     PUSH   hl   
0832   DD E9                  JP   (ix)   
0834                             ; /ad addrOf
0834                             ; char -- addr
0834                ADDROF:      
0834   E1                     POP   hl   ; a = char
0835   7D                     LD   a,l   
0836   FE 7B                  CP   "z"+1   ; if a > z then exit
0838   30 19                  JR   nc,addrOf2   
083A   D6 41                  SUB   "A"   ; a - 65
083C   38 15                  JR   c,addrOf2   ; if < A then exit
083E   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0840   38 06                  JR   c,addrOf1   
0842   D6 06                  SUB   "a"-("Z"+1)   
0844   FE 1A                  CP   "Z"-"A"+1   
0846   38 0B                  JR   c,addrOf2   ; if < a then exit
0848                ADDROF1:      
0848   87                     ADD   a,a   ; double a
0849   21 00 4E               LD   hl,VARS   ; hl = VARS + a
084C   85                     ADD   a,l   
084D   6F                     LD   l,a   
084E   3E 00                  LD   a,0   
0850   8C                     ADC   a,h   
0851   67                     LD   h,a   
0852   E5                     PUSH   hl   
0853                ADDROF2:      
0853   DD E9                  JP   (ix)   
0855                COMMAND_B:      
0855   CD 60 0B               CALL   jumpTable   
0858   72                     DB   "r"   ; /br break
0859   4F 09                  DW   break   
085B   79                     DB   "y"   ; /by cold boot
085C   27 0C                  DW   coldStart   
085E   00                     DB   NUL   
085F   0B 08                  DW   error1   
0861                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0861                BUFFERARRAY:      
0861   CD 45 06               CALL   go   
0864   00 00                  DW   NUL   
0866   6F 08                  DW   bufferArrayM_1763S1258   
0868   6A 08                  DW   $+2   
086A   02                     DB   2   
086B   03 61 62 63            .PSTR   "abc"   
086F                BUFFERARRAYM_1763S1258:      
086F   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
08AA                             ; .cstr "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}" ; block
08AA                             ; /bd buffer decimal
08AA                             ; value --
08AA                BUFFERNUMBER:      
08AA   3A E8 4E               LD   a,(vNumBase)   
08AD   FE 10                  CP   16   
08AF   28 66                  JR   z,bufferHex   ; else falls through
08B1                             ; /bd buffer decimal
08B1                             ; value --
08B1                BUFFERDEC:      
08B1   ED 5B EC 4E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08B5   D9                     EXX      
08B6   E1                     POP   hl   ; hl = value
08B7   CD CB 08               CALL   bufferDec0   
08BA   D9                     EXX      ; de = buffer*' bc = IP
08BB   3E 20                  LD   a," "   ; append space to buffer
08BD   12                     LD   (de),a   
08BE   1C                     INC   e   ; buffer*++, wraparound
08BF   CC 49 0B               CALL   z,flushBuffer   
08C2   2A EC 4E               LD   hl,(vBufPtr)   ; hl = buffer*
08C5   ED 53 EC 4E            LD   (vBufPtr),de   ; update buffer* with buffer*'
08C9   DD E9                  JP   (ix)   
08CB                             ; hl = value
08CB                             ; de' = buffer*
08CB                             ; a, bc, de, hl destroyed
08CB                BUFFERDEC0:      
08CB   CB 7C                  BIT   7,h   
08CD   28 0C                  JR   z,bufferDec1   
08CF   D9                     EXX      
08D0   3E 2D                  LD   a,"-"   
08D2   12                     LD   (de),a   
08D3   13                     INC   de   
08D4   D9                     EXX      
08D5   AF                     XOR   a   
08D6   95                     SUB   l   
08D7   6F                     LD   l,a   
08D8   9F                     SBC   a,a   
08D9   94                     SUB   h   
08DA   67                     LD   h,a   
08DB                BUFFERDEC1:      
08DB   0E 00                  LD   c,0   ; leading zeros flag = false
08DD   11 F0 D8               LD   de,-10000   
08E0   CD FB 08               CALL   bufferDec2   
08E3   11 18 FC               LD   de,-1000   
08E6   CD FB 08               CALL   bufferDec2   
08E9   11 9C FF               LD   de,-100   
08EC   CD FB 08               CALL   bufferDec2   
08EF   1E F6                  LD   e,-10   
08F1   CD FB 08               CALL   bufferDec2   
08F4   0C                     INC   c   ; flag = true for at least digit
08F5   1E FF                  LD   e,-1   
08F7   CD FB 08               CALL   bufferDec2   
08FA   C9                     RET      
08FB                BUFFERDEC2:      
08FB   06 2F                  LD   b,"0"-1   
08FD                BUFFERDEC3:      
08FD   04                     INC   b   
08FE   19                     ADD   hl,de   
08FF   38 FC                  JR   c,bufferDec3   
0901   ED 52                  SBC   hl,de   
0903   3E 30                  LD   a,"0"   
0905   B8                     CP   b   
0906   20 05                  JR   nz,bufferDec4   
0908   AF                     XOR   a   
0909   B1                     OR   c   
090A   C8                     RET   z   
090B   18 01                  JR   bufferDec5   
090D                BUFFERDEC4:      
090D   0C                     INC   c   
090E                BUFFERDEC5:      
090E   78                     LD   a,b   
090F   D9                     EXX      
0910   12                     LD   (de),a   
0911   1C                     INC   e   
0912   CC 49 0B               CALL   z,flushBuffer   
0915   D9                     EXX      
0916   C9                     RET      
0917                             ; /bh buffer hex
0917                             ; value --
0917                BUFFERHEX:      
0917   E1                     POP   hl   ; hl = value
0918   ED 5B EC 4E            LD   de,(vBufPtr)   
091C   3E 24                  LD   a,"$"   ; # prefix
091E   12                     LD   (de),a   
091F   1C                     INC   e   ; buffer*++, wraparound
0920   CC 49 0B               CALL   z,flushBuffer   
0923   7C                     LD   a,h   
0924   CD 38 09               CALL   bufferHex1   
0927   7D                     LD   a,l   
0928   CD 38 09               CALL   bufferHex1   
092B   3E 20                  LD   a," "   ; append space to buffer
092D   12                     LD   (de),a   
092E   1C                     INC   e   ; buffer*++, wraparound
092F   CC 49 0B               CALL   z,flushBuffer   
0932   ED 53 EC 4E            LD   (vBufPtr),de   
0936   DD E9                  JP   (ix)   
0938                BUFFERHEX1:      
0938   F5                     PUSH   af   
0939   1F                     RRA      
093A   1F                     RRA      
093B   1F                     RRA      
093C   1F                     RRA      
093D   CD 41 09               CALL   bufferHex2   
0940   F1                     POP   af   
0941                BUFFERHEX2:      
0941   E6 0F                  AND   0x0F   
0943   C6 90                  ADD   a,0x90   
0945   27                     DAA      
0946   CE 40                  ADC   a,0x40   
0948   27                     DAA      
0949   12                     LD   (de),a   
094A   1C                     INC   e   ; buffer*++, wraparound
094B   CC 49 0B               CALL   z,flushBuffer   
094E   C9                     RET      
094F                             ; /br break from loop
094F                             ; --
094F                BREAK:       
094F   E1                     POP   hl   
0950   7D                     LD   a,l   
0951   B4                     OR   h   
0952   28 02                  JR   z,break1   
0954   DD E9                  JP   (ix)   
0956                BREAK1:      
0956   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0958   FD 54                  LD   d,iyh   
095A   21 08 00               LD   hl,8   
095D   19                     ADD   hl,de   
095E   23                     INC   hl   
095F   23                     INC   hl   
0960   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0963   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0966   C3 2D 05               JP   blockEnd   
0969                             ; /bs buffered string
0969                             ; string* --
0969                BUFFERSTRING:      
0969   E1                     POP   hl   ; hl = string*
096A   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
096E   18 06                  JR   bufferString1   
0970                BUFFERSTRING0:      
0970   12                     LD   (de),a   ; a -> buffer*
0971   1C                     INC   e   ; buffer*++, wraparound
0972   CC 49 0B               CALL   z,flushBuffer   
0975   23                     INC   hl   
0976                BUFFERSTRING1:      
0976   7E                     LD   a,(hl)   ; a <- string*
0977   B7                     OR   a   ; if NUL exit loop
0978   20 F6                  JR   nz,bufferString0   
097A   2A EC 4E               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
097D   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
0981   DD E9                  JP   (ix)   
0983                             ; /bc buffer char
0983                             ; char --
0983                BUFFERCHAR:      
0983   21 01 00               LD   hl,1   
0986   18 01                  JR   bufferXChars0   
0988                             ; /bx buffered x chars
0988                             ; char length --
0988                BUFFERXCHARS:      
0988   E1                     POP   hl   ; hl = length
0989                BUFFERXCHARS0:      
0989   D1                     POP   de   ; a' = char
098A   7B                     LD   a,e   
098B   08                     EX   af,af'   
098C   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
0990   18 08                  JR   bufferXChars2   
0992                BUFFERXCHARS1:      
0992   08                     EX   af,af'   
0993   12                     LD   (de),a   
0994   08                     EX   af,af'   
0995   1C                     INC   e   ; buffer*++, wraparound
0996   CC 49 0B               CALL   z,flushBuffer   
0999   2B                     DEC   hl   
099A                BUFFERXCHARS2:      
099A   7D                     LD   a,l   
099B   B4                     OR   h   
099C   20 F4                  JR   nz,bufferXChars1   
099E   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*'
09A2   DD E9                  JP   (ix)   
09A4                COMMAND_I:      
09A4   CD 60 0B               CALL   jumpTable   
09A7   6E                     DB   "n"   ; /in input
09A8   1C 0B                  DW   input   
09AA   76                     DB   "v"   ; /iv invert
09AB   BF 03                  DW   invert   
09AD   00                     DB   NUL   
09AE   0B 08                  DW   error1   
09B0                COMMAND_P:      
09B0   CD 60 0B               CALL   jumpTable   
09B3   61                     DB   "a"   ; /pa partial
09B4   C5 09                  DW   partial   
09B6   62                     DB   "b"   ; /pb print buffer
09B7   70 0A                  DW   printBuffer   
09B9   63                     DB   "c"   ; /pc print chars
09BA   96 0A                  DW   printChars   
09BC   6B                     DB   "k"   ; /pk print stack
09BD   A8 0A                  DW   printStack   
09BF   78                     DB   "x"   ; /px print xpartial
09C0   E5 09                  DW   xpartial   
09C2   00                     DB   NUL   
09C3   0B 08                  DW   error1   
09C5                             ; /pa partial
09C5                             ; array* lambda* -- lambda1*
09C5                PARTIAL:      
09C5   E1                     POP   hl   ; h1 = lambda*
09C6   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09CA   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
09CE   01 06 00               LD   bc,6   ; bc = count
09D1   ED B0                  LDIR      ; clone lambda
09D3   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
09D7   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09DA   ED 53 F0 4E            LD   (vHeapPtr),de   ; heap* += 6
09DE   D1                     POP   de   ; de = array*
09DF   E5                     PUSH   hl   ; return partial_array*
09E0   73                     LD   (hl),e   ; compile array*
09E1   23                     INC   hl   
09E2   72                     LD   (hl),d   
09E3   DD E9                  JP   (ix)   
09E5                             ; /px xpartial
09E5                             ; arg_list* block* -- lambda*
09E5                XPARTIAL:      
09E5   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
09E9   E1                     POP   hl   ; hl = block*
09EA   22 02 4F               LD   (vTemp2),hl   ; save block*
09ED   FD 5E 04               LD   e,(iy+4)   ; de = outer arg_list
09F0   FD 56 05               LD   d,(iy+5)   
09F3   7B                     LD   a,e   ; if arg_list == null then make a lambda
09F4   B2                     OR   d   
09F5   20 09                  JR   nz,xpartial0   
09F7   21 00 00               LD   hl,0   ; partial_array = null
09FA   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
09FE   18 54                  JR   xpartial5   
0A00                XPARTIAL0:      
0A00   E1                     POP   hl   ; hl = inner arg_list*
0A01   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
0A05   D5                     PUSH   de   ; push new arglist*
0A06   7E                     LD   a,(hl)   ; compile inner num locals
0A07   12                     LD   (de),a   
0A08   23                     INC   hl   
0A09   13                     INC   de   
0A0A   7E                     LD   a,(hl)   ; compile inner length
0A0B   12                     LD   (de),a   
0A0C   23                     INC   hl   
0A0D   13                     INC   de   
0A0E   B7                     OR   a   ; compile args if inner length > 0
0A0F   28 05                  JR   z,xpartial1   
0A11   4F                     LD   c,a   
0A12   06 00                  LD   b,0   
0A14   ED B0                  LDIR      
0A16                XPARTIAL1:      
0A16   EB                     EX   de,hl   ; hl = outer arg_list
0A17   FD 5E 04               LD   e,(iy+4)   
0A1A   FD 56 05               LD   d,(iy+5)   
0A1D   EB                     EX   de,hl   
0A1E   7D                     LD   a,l   ; skip if outer arg_list == null
0A1F   B4                     OR   h   
0A20   28 0B                  JR   z,xpartial2   
0A22   23                     INC   hl   ; a = outer length
0A23   7E                     LD   a,(hl)   
0A24   23                     INC   hl   
0A25   B7                     OR   a   
0A26   28 05                  JR   z,xpartial2   
0A28   4F                     LD   c,a   
0A29   06 00                  LD   b,0   
0A2B   ED B0                  LDIR      ; append outer args
0A2D                XPARTIAL2:      ; a = outer length
0A2D                             ; z flag = (a == 0)
0A2D                             ; de = partial_array[-2]
0A2D   47                     LD   b,a   ; b = a = outer length
0A2E   12                     LD   (de),a   ; compile partial_array length field
0A2F   13                     INC   de   
0A30   AF                     XOR   a   
0A31   12                     LD   (de),a   
0A32   13                     INC   de   
0A33   D5                     PUSH   de   ; push partial_array*
0A34   28 1D                  JR   z,xpartial4   ; if (a == 0) skip appending args to partial array
0A36   2A F0 4E               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0A39   7E                     LD   a,(hl)   ; add outer length to new locals
0A3A   80                     ADD   a,b   
0A3B   77                     LD   (hl),a   
0A3C   23                     INC   hl   
0A3D   7E                     LD   a,(hl)   ; add outer length to new length
0A3E   80                     ADD   a,b   
0A3F   77                     LD   (hl),a   
0A40   EB                     EX   de,hl   ; hl = first_arg
0A41   FD 5E 02               LD   e,(iy+2)   
0A44   FD 56 03               LD   d,(iy+3)   
0A47   EB                     EX   de,hl   
0A48                XPARTIAL3:      
0A48   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0A49   4E                     LD   c,(hl)   
0A4A   2B                     DEC   hl   
0A4B   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0A4C   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0A4D   13                     INC   de   
0A4E   79                     LD   a,c   
0A4F   12                     LD   (de),a   
0A50   13                     INC   de   
0A51   10 F5                  DJNZ   xpartial3   ; b = outer length
0A53                XPARTIAL4:      
0A53   E1                     POP   hl   ; hl = partial_array*
0A54                XPARTIAL5:      
0A54   C1                     POP   bc   ; bc = new arg_list*
0A55   D5                     PUSH   de   ; return new lambda*
0A56   EB                     EX   de,hl   ; hl = new lambda*, de = partial_array*
0A57   73                     LD   (hl),e   ; compile partial_array* to lambda
0A58   23                     INC   hl   
0A59   72                     LD   (hl),d   
0A5A   23                     INC   hl   
0A5B   ED 5B 02 4F            LD   de,(vTemp2)   ; de = block*
0A5F   73                     LD   (hl),e   ; compile block* to lambda
0A60   23                     INC   hl   
0A61   72                     LD   (hl),d   
0A62   23                     INC   hl   
0A63   71                     LD   (hl),c   ; compile new arg_list* to lambda
0A64   23                     INC   hl   
0A65   70                     LD   (hl),b   
0A66   23                     INC   hl   
0A67   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap ptr
0A6A   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
0A6E   DD E9                  JP   (ix)   
0A70                             ; ; arg_list* block* -- ptr
0A70                             ; semicolon:
0A70                             ;     pop de                      ; de = block* hl = heap*
0A70                             ;     ld hl,(vHeapPtr)
0A70                             ;     xor a
0A70                             ;     ld (hl),a                   ; compile null partial_array*
0A70                             ;     inc hl
0A70                             ;     ld (hl),a
0A70                             ;     inc hl
0A70                             ;     ld (hl),e                   ; compile block*
0A70                             ;     inc hl
0A70                             ;     ld (hl),d
0A70                             ;     inc hl
0A70                             ;     pop de                      ; de = block*
0A70                             ;     ld (hl),e                   ; compile arg_list*
0A70                             ;     inc hl
0A70                             ;     ld (hl),d
0A70                             ;     inc hl
0A70                             ;     ld de,(vHeapPtr)            ; return lambda*
0A70                             ;     push de
0A70                             ;     ld (vHeapPtr),hl            ; heap* += 4
0A70                             ;     jp (ix)
0A70                             ; arg:
0A70                             ;     ld e,(iy+4)                 ; hl = arg_list*
0A70                             ;     ld d,(iy+5)
0A70                             ;     ex de,hl
0A70                             ;     ld a,l                      ; arg_list* == null, skip
0A70                             ;     or h
0A70                             ;     jr z,arg0a
0A70                             ;     inc hl                      ; a = num_args, hl = arg_list*
0A70                             ;     ld a,(hl)
0A70                             ;     inc hl
0A70                             ;     or a
0A70                             ;     jr z,arg0a                  ; num_args == 0, skip
0A70                             ;     ld e,a                      ; e = a = num_args
0A70                             ;     inc bc                      ; a = next char = dollar_name
0A70                             ;     ld a,(bc)
0A70                             ;     push bc                     ; save IP
0A70                             ;     ld b,e                      ; b = e = num_args
0A70                             ;     ld e,(iy+2)                 ; de = first_arg*, hl = argslist*
0A70                             ;     ld d,(iy+3)
0A70                             ; arg0:
0A70                             ;     dec de                      ; a = dollar_name, de = next arg*
0A70                             ;     dec de
0A70                             ;     cp (hl)
0A70                             ;     jr z,arg1
0A70                             ;     inc hl                      ; hl = next arg_list*
0A70                             ;     djnz arg0
0A70                             ;     pop bc                      ; no match, restore IP
0A70                             ; arg0a:
0A70                             ;     ld de,0                     ; return 0
0A70                             ;     jr arg1a
0A70                             ; arg1:
0A70                             ;     pop bc                      ; restore IP
0A70                             ;     ex de,hl                    ; hl = arg*
0A70                             ;     ld (vPointer),hl            ; store arg* in setter
0A70                             ;     ld e,(hl)
0A70                             ;     inc hl
0A70                             ;     ld d,(hl)                   ; de = arg
0A70                             ; arg1a:
0A70                             ;     push de                     ; push arg
0A70                             ;     jp (ix)
0A70                             ; /pb printBuffer
0A70                             ; --
0A70                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0A70                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0A70                PRINTBUFFER:      
0A70   CD 45 06               CALL   go   
0A73   00 00                  DW   NUL   
0A75   7C 0A                  DW   printBufferM_2150S1665   
0A77   79 0A                  DW   $+2   
0A79   00                     DB   0   
0A7A   01 61                  .PSTR   "a"   
0A7C                PRINTBUFFERM_2150S1665:      
0A7C   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A96                             ; printChars
0A96                             ; char* len --
0A96                PRINTCHARS:      
0A96   E1                     POP   hl   ; hl = count
0A97   D1                     POP   de   ; de = char*
0A98   CD A3 0A               CALL   printChars2   
0A9B   DD E9                  JP   (ix)   
0A9D                PRINTCHARS1:      
0A9D   1A                     LD   a,(de)   ; print char at char*
0A9E   CD 85 00               CALL   putchar   
0AA1   13                     INC   de   ; char*++
0AA2   2B                     DEC   hl   ; count--
0AA3                PRINTCHARS2:      
0AA3   7D                     LD   a,l   ; count == 0?
0AA4   B4                     OR   h   
0AA5   C8                     RET   z   
0AA6   18 F5                  JR   printChars1   ; if not loop
0AA8                             ; /pk print stack
0AA8                             ; --
0AA8                PRINTSTACK:      
0AA8                             ;     ld (vTemp1),bc
0AA8                             ;     call printStr
0AA8                             ;     .cstr "=> "
0AA8                             ;     ld hl,STACK
0AA8                             ;     sbc hl,sp
0AA8                             ;     srl h
0AA8                             ;     rr l
0AA8                             ;     ld bc,hl
0AA8                             ;     ld hl,STACK
0AA8                             ;     jr printStack2
0AA8                             ; printStack1:
0AA8                             ;     dec bc
0AA8                             ;     dec hl
0AA8                             ;     ld d,(hl)
0AA8                             ;     dec hl
0AA8                             ;     ld e,(hl)
0AA8                             ;     ex de,hl
0AA8                             ;     call prthex
0AA8                             ;     ex de,hl
0AA8                             ;     ld a," "
0AA8                             ;     call putchar
0AA8                             ; printStack2:
0AA8                             ;     ld a,c
0AA8                             ;     or b
0AA8                             ;     jr nz,printStack1
0AA8                             ;     call prompt
0AA8                             ;     ld bc,(vTemp1)
0AA8   DD E9                  JP   (ix)   
0AAA                COMMAND_R:      
0AAA   CD 60 0B               CALL   jumpTable   
0AAD   65                     DB   "e"   ; /re remainder
0AAE   B3 0A                  DW   remain   
0AB0   00                     DB   NUL   
0AB1   0B 08                  DW   error1   
0AB3                REMAIN:      
0AB3   2A F4 4E               LD   hl,(vRemain)   
0AB6   E5                     PUSH   hl   
0AB7   DD E9                  JP   (ix)   
0AB9                SIZE:        
0AB9   E1                     POP   hl   
0ABA   2B                     DEC   hl   ; msb size
0ABB   56                     LD   d,(hl)   
0ABC   2B                     DEC   hl   ; lsb size
0ABD   5E                     LD   e,(hl)   
0ABE   D5                     PUSH   de   
0ABF   DD E9                  JP   (ix)   
0AC1                COMMAND_V:      
0AC1   CD 60 0B               CALL   jumpTable   
0AC4   62                     DB   "b"   
0AC5   E5 0A                  DW   varBufPtr   
0AC7   68                     DB   "h"   
0AC8   EE 0A                  DW   varHeapPtr   
0ACA   74                     DB   "t"   
0ACB   F7 0A                  DW   varTIBPtr   
0ACD   42                     DB   "B"   
0ACE   D6 0A                  DW   constBufStart   
0AD0   54                     DB   "T"   
0AD1   E0 0A                  DW   constTIBStart   
0AD3   00                     DB   NUL   
0AD4   0B 08                  DW   error1   
0AD6                CONSTBUFSTART:      
0AD6   11 00 4D               LD   de,BUF   
0AD9   18 28                  JR   constant   
0ADB                CONSTHEAPSTART:      
0ADB   11 1E 4F               LD   de,HEAP   
0ADE   18 23                  JR   constant   
0AE0                CONSTTIBSTART:      
0AE0   11 00 4C               LD   de,TIB   
0AE3   18 1E                  JR   constant   
0AE5                VARBUFPTR:      
0AE5   ED 5B EC 4E            LD   de,(vBufPtr)   
0AE9   21 EC 4E               LD   hl,vBufPtr   
0AEC   18 12                  JR   variable   
0AEE                VARHEAPPTR:      
0AEE   ED 5B F0 4E            LD   de,(vHeapPtr)   
0AF2   21 F0 4E               LD   hl,vHeapPtr   
0AF5   18 09                  JR   variable   
0AF7                VARTIBPTR:      
0AF7   ED 5B EA 4E            LD   de,(vTIBPtr)   
0AFB   21 EA 4E               LD   hl,vTIBPtr   
0AFE   18 00                  JR   variable   
0B00                VARIABLE:      
0B00   22 F2 4E               LD   (vPointer),hl   
0B03                CONSTANT:      
0B03   D5                     PUSH   de   
0B04   DD E9                  JP   (ix)   
0B06                CHARS:       
0B06   21 01 00               LD   hl,1   
0B09                CHARS1:      
0B09   22 E6 4E               LD   (vDataWidth),hl   
0B0C   DD E9                  JP   (ix)   
0B0E                DECIMAL:      
0B0E   21 0A 00               LD   hl,10   
0B11                DECIMAL1:      
0B11   22 E8 4E               LD   (vNumBase),hl   
0B14   DD E9                  JP   (ix)   
0B16                HEXADECIMAL:      
0B16   21 10 00               LD   hl,16   
0B19   C3 11 0B               JP   decimal1   
0B1C                             ; Z80 port input
0B1C                             ; port -- value
0B1C                INPUT:       
0B1C   E1                     POP   hl   
0B1D   59                     LD   e,c   ; save IP
0B1E   4D                     LD   c,l   
0B1F   ED 68                  IN   l,(c)   
0B21   26 00                  LD   h,0   
0B23   4B                     LD   c,e   ; restore IP
0B24   E5                     PUSH   hl   
0B25   DD E9                  JP   (ix)   
0B27                KEY:         
0B27   CD 81 00               CALL   getchar   
0B2A   26 00                  LD   h,0   
0B2C   6F                     LD   l,a   
0B2D   E5                     PUSH   hl   
0B2E   DD E9                  JP   (ix)   
0B30                             ; Z80 port output
0B30                             ; value port --
0B30                OUTPUT:      
0B30   E1                     POP   hl   
0B31   59                     LD   e,c   ; save IP
0B32   4D                     LD   c,l   
0B33   E1                     POP   hl   
0B34   ED 69                  OUT   (c),l   
0B36   4B                     LD   c,e   ; restore IP
0B37   DD E9                  JP   (ix)   
0B39                NUMBERS:      
0B39   21 02 00               LD   hl,2   
0B3C   C3 09 0B               JP   chars1   
0B3F                             ; 
0B3F                             ; keyIter:
0B3F                             ;     call go
0B3F                             ;     .cstr "{/k /t}"             ; block
0B3F                             ; fromIter:
0B3F                             ;     call go
0B3F                             ;     dw NUL                      ; NUL closure
0B3F                             ;     dw $+4
0B3F                             ;     dw args1A0L
0B3F                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B3F                             ; fromIter1:
0B3F                             ;     call go
0B3F                             ;     dw NUL                      ; NUL closure
0B3F                             ;     dw $+4
0B3F                             ;     dw args2A0L
0B3F                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B3F                FILTER:      
0B3F                MAP:         
0B3F                SCAN:        
0B3F   DD E9                  JP   (ix)   
0B41                             ;*******************************************************************
0B41                             ; reusable arglists
0B41                             ;*******************************************************************
0B41                ARGS1A0L:      ; one arg zero locals
0B41   00                     DB   0   
0B42   01 61                  .PSTR   "a"   
0B44                ARGS1A2L:      ; one arg two locals
0B44   02                     DB   2   
0B45   03 61 62 63            .PSTR   "abc"   
0B49                             ;*******************************************************************
0B49                             ; general routines
0B49                             ;*******************************************************************
0B49                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0B49                FLUSHBUFFER:      
0B49   F5                     PUSH   af   
0B4A   D5                     PUSH   de   
0B4B   E5                     PUSH   hl   
0B4C   2A EC 4E               LD   hl,(vBufPtr)   
0B4F   11 00 4D               LD   de,BUF   
0B52   ED 53 EC 4E            LD   (vBufPtr),de   
0B56   B7                     OR   a   
0B57   ED 52                  SBC   hl,de   
0B59   CD A3 0A               CALL   printChars2   
0B5C   E1                     POP   hl   
0B5D   D1                     POP   de   
0B5E   F1                     POP   af   
0B5F   C9                     RET      
0B60                             ; followed by a table
0B60                             ; db char
0B60                             ; dw addr
0B60                             ; the final item must have char == NUL
0B60                JUMPTABLE:      
0B60   03                     INC   bc   
0B61   E1                     POP   hl   
0B62                JUMPTABLE0:      
0B62   AF                     XOR   a   
0B63   BE                     CP   (hl)   
0B64   28 09                  JR   z,jumpTable1   
0B66   0A                     LD   a,(bc)   
0B67   BE                     CP   (hl)   
0B68   28 06                  JR   z,jumpTable2   
0B6A   23                     INC   hl   
0B6B   23                     INC   hl   
0B6C   23                     INC   hl   
0B6D   18 F3                  JR   jumpTable0   
0B6F                JUMPTABLE1:      
0B6F   0B                     DEC   bc   
0B70                JUMPTABLE2:      
0B70   23                     INC   hl   
0B71   5E                     LD   e,(hl)   
0B72   23                     INC   hl   
0B73   56                     LD   d,(hl)   
0B74   EB                     EX   de,hl   
0B75   E9                     JP   (hl)   
0B76                PRTSTR0:      
0B76   CD 85 00               CALL   putchar   
0B79   23                     INC   hl   
0B7A                PRTSTR:      
0B7A   7E                     LD   a,(hl)   
0B7B   B7                     OR   a   
0B7C   20 F8                  JR   nz,prtstr0   
0B7E   C9                     RET      
0B7F                             ; **************************************************************************
0B7F                             ; calculate nesting value
0B7F                             ; a is char to be tested,
0B7F                             ; e is the nesting value (initially 0)
0B7F                             ; e is increased by ( and [
0B7F                             ; e is decreased by ) and ]
0B7F                             ; e has its bit 7 toggled by `
0B7F                             ; limited to 127 levels
0B7F                             ; **************************************************************************
0B7F                NESTING:      
0B7F   FE 22                  CP   DQ   ; quote char
0B81   28 06                  JR   z,nesting0   
0B83   FE 60                  CP   "`"   ; quote char
0B85   28 02                  JR   z,nesting0   
0B87   18 0A                  JR   nesting1   
0B89                NESTING0:      
0B89   CB 7B                  BIT   7,e   
0B8B   28 03                  JR   z,nesting1a   
0B8D   CB BB                  RES   7,e   
0B8F   C9                     RET      
0B90                NESTING1A:      
0B90   CB FB                  SET   7,e   
0B92   C9                     RET      
0B93                NESTING1:      
0B93   CB 7B                  BIT   7,e   
0B95   C0                     RET   nz   
0B96   FE 7B                  CP   "{"   
0B98   28 08                  JR   z,nesting2   
0B9A   FE 5B                  CP   "["   
0B9C   28 04                  JR   z,nesting2   
0B9E   FE 28                  CP   "("   
0BA0   20 02                  JR   nz,nesting3   
0BA2                NESTING2:      
0BA2   1C                     INC   e   
0BA3   C9                     RET      
0BA4                NESTING3:      
0BA4   FE 7D                  CP   "}"   
0BA6   28 07                  JR   z,nesting4   
0BA8   FE 5D                  CP   "]"   
0BAA   28 03                  JR   z,nesting4   
0BAC   FE 29                  CP   ")"   
0BAE   C0                     RET   nz   
0BAF                NESTING4:      
0BAF   1D                     DEC   e   
0BB0   C9                     RET      
0BB1                PROMPT:      
0BB1   CD C1 0B               CALL   printStr   
0BB4   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BB9   C9                     RET      
0BBA                CRLF:        
0BBA   CD C1 0B               CALL   printStr   
0BBD   0D 0A 00               .CSTR   "\r\n"   
0BC0   C9                     RET      
0BC1                             ; prints a null teminated string
0BC1                             ; the string should be immediately following the call
0BC1                PRINTSTR:      
0BC1   E3                     EX   (sp),hl   ; swap			
0BC2   CD 7A 0B               CALL   prtstr   
0BC5   23                     INC   hl   ; inc past NUL
0BC6   E3                     EX   (sp),hl   ; put it back	
0BC7   C9                     RET      
0BC8                TITLESTR:      
0BC8   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0BDC                INIT:        
0BDC   21 C8 0B               LD   hl,titleStr   
0BDF   11 0A 4F               LD   de,titleBuf   
0BE2   06 14                  LD   b,20   
0BE4                INIT1:       
0BE4   1A                     LD   a,(de)   
0BE5   BE                     CP   (hl)   
0BE6   20 17                  JR   nz,coldBoot0   
0BE8   13                     INC   de   
0BE9   23                     INC   hl   
0BEA   10 F8                  DJNZ   init1   
0BEC                WARMINIT:      
0BEC   ED 4B F6 4E            LD   bc,(vSavedIP)   ; restore IP
0BF0   ED 7B F8 4E            LD   sp,(vSavedSP)   ; restore SP
0BF4   DD 2A FA 4E            LD   ix,(vSavedNext)   ; restore Next
0BF8   FD 2A FC 4E            LD   iy,(vSavedBP)   ; restore BP
0BFC   C3 36 0C               JP   start1   
0BFF                COLDBOOT0:      
0BFF   21 C8 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0C02   11 0A 4F               LD   de,titleBuf   
0C05   06 14                  LD   b,20   
0C07   ED B0                  LDIR      
0C09                COLDINIT:      
0C09   21 80 01               LD   hl,isysVars   
0C0C   11 E6 4E               LD   de,sysVars   
0C0F   01 10 00               LD   bc,8 * 2   
0C12   ED B0                  LDIR      
0C14   21 00 4E               LD   hl,vars   ; 52 vars LO HI
0C17   06 34                  LD   b,26*2   
0C19   AF                     XOR   a   
0C1A                COLDBOOT1:      
0C1A   77                     LD   (hl),a   
0C1B   23                     INC   hl   
0C1C   10 FC                  DJNZ   coldBoot1   
0C1E   DD 2A EE 4E            LD   ix,(vNext)   
0C22   FD 21 00 4C            LD   iy,STACK   
0C26   C9                     RET      
0C27                COLDSTART:      
0C27   31 00 4C               LD   sp,STACK   
0C2A   CD FF 0B               CALL   coldBoot0   
0C2D   C3 36 0C               JP   start1   
0C30                START:       
0C30   31 00 4C               LD   sp,STACK   ; start Monty
0C33   CD DC 0B               CALL   init   ; setups
0C36                START1:      
0C36   21 0A 4F               LD   hl,titleBuf   
0C39   CD 7A 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0C3C                INTERPRET:      
0C3C   CD 49 0B               CALL   flushBuffer   
0C3F   CD B1 0B               CALL   prompt   
0C42   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C45   21 00 4C               LD   hl,TIB   
0C48   22 EA 4E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C4B                INTERPRET2:      ; calculate nesting
0C4B   1E 00                  LD   e,0   ; initilize nesting value
0C4D   C5                     PUSH   bc   ; save offset into TIB,
0C4E                             ; bc is also the count of chars in TIB
0C4E   21 00 4C               LD   hl,TIB   ; hl is start of TIB
0C51   18 0B                  JR   interpret4   
0C53                INTERPRET3:      
0C53   3E 33                  LD   a,"3"   
0C55   CD 85 00               CALL   putchar   
0C58   7E                     LD   a,(hl)   ; a = char in TIB
0C59   23                     INC   hl   ; inc pointer into TIB
0C5A   0B                     DEC   bc   ; dec count of chars in TIB
0C5B   CD 7F 0B               CALL   nesting   ; update nesting value
0C5E                INTERPRET4:      
0C5E   79                     LD   a,c   ; is count zero?
0C5F   B0                     OR   b   
0C60   20 F1                  JR   nz,interpret3   ; if not loop
0C62   C1                     POP   bc   ; restore offset into TIB
0C63                INTERPRET5:      
0C63   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C66   FE 20                  CP   $20   ; compare to space
0C68   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C6A   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C6C                             ; ???? NEEDED?
0C6C   28 3B                  JR   z,interpret8   
0C6E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C70   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C72   FE 05                  CP   CTRL_E   
0C74   CA 07 0D               JP   z,edit_   
0C77   FE 08                  CP   CTRL_H   
0C79   CA F7 0C               JP   z,backSpace_   
0C7C   FE 0A                  CP   CTRL_J   
0C7E   CA 1F 0D               JP   z,reEdit_   
0C81   FE 13                  CP   CTRL_S   
0C83   CA 22 0D               JP   z,printStack_   
0C86                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C86                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C86                             ; DB     lsb(list_)       ; FF  ^L 12
0C86                             ; DB     lsb(printStack_) ; DLE ^P 16
0C86                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C86                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C86                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C86                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C86                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C86                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C86                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C86                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C86                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C86                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C86                INTERPRET5A:      
0C86                             ; ld (vTIBPtr),bc
0C86                             ; ld bc,(vTIBPtr)
0C86   18 C3                  JR   interpret2   
0C88                INTERPRET6:      
0C88   21 00 4C               LD   hl,TIB   
0C8B   09                     ADD   hl,bc   
0C8C   77                     LD   (hl),a   ; store the character in textbuf
0C8D   03                     INC   bc   
0C8E   CD 85 00               CALL   putchar   ; echo character to screen
0C91   CD 7F 0B               CALL   nesting   
0C94   18 CD                  JR   interpret5   ; wait for next character
0C96                INTERPRET7:      
0C96   21 00 4C               LD   hl,TIB   
0C99   09                     ADD   hl,bc   
0C9A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C9C   23                     INC   hl   
0C9D   36 0A                  LD   (hl),"\n"   
0C9F   23                     INC   hl   
0CA0   03                     INC   bc   
0CA1   03                     INC   bc   
0CA2   CD BA 0B               CALL   crlf   ; echo character to screen
0CA5   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0CA6   B7                     OR   a   
0CA7   20 BA                  JR   nz,interpret5   
0CA9                INTERPRET8:      
0CA9   21 00 4C               LD   hl,TIB   
0CAC   09                     ADD   hl,bc   
0CAD   22 EA 4E               LD   (vTIBPtr),hl   
0CB0   01 00 4C               LD   bc,TIB   
0CB3   ED 43 F6 4E            LD   (vSavedIP),bc   ; save IP
0CB7   ED 73 F8 4E            LD   (vSavedSP),sp   ; save SP
0CBB   DD 22 FA 4E            LD   (vSavedNext),ix   ; save Next
0CBF   FD 22 FC 4E            LD   (vSavedBP),iy   ; save BP
0CC3   0B                     DEC   bc   
0CC4                NEXT:        
0CC4   03                     INC   bc   ; Increment the IP
0CC5   0A                     LD   a,(bc)   ; Get the next character and dispatch
0CC6   FE 20                  CP   " "   ; whitespace?
0CC8   28 FA                  JR   z,next   ; space? ignore
0CCA   38 09                  JR   c,next1   
0CCC   D6 20                  SUB   " "   
0CCE   6F                     LD   l,a   ; index into table
0CCF   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CD1   6E                     LD   l,(hl)   ; get low jump address
0CD2   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CD4   E9                     JP   (hl)   ; Jump to routine
0CD5                NEXT1:       
0CD5   FE 00                  CP   NUL   ; end of input string?
0CD7   28 03                  JR   z,exit   
0CD9   C3 3C 0C               JP   interpret   ; no, other whitespace, macros?
0CDC                EXIT:        
0CDC   03                     INC   bc   
0CDD   60 69                  LD   hl,bc   
0CDF   E9                     JP   (hl)   
0CE0                RUN:         
0CE0   C1                     POP   bc   
0CE1   0B                     DEC   bc   
0CE2   DD E9                  JP   (ix)   
0CE4                ERROR:       
0CE4   CD E0 0C               CALL   run   
0CE7   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0CF4   C3 3C 0C               JP   interpret   
0CF7                BACKSPACE_:      
0CF7   79                     LD   a,c   
0CF8   B0                     OR   b   
0CF9   CA 4B 0C               JP   z,interpret2   
0CFC   0B                     DEC   bc   
0CFD   CD C1 0B               CALL   printStr   
0D00   08 20 08 00            .CSTR   "\b \b"   
0D04   C3 4B 0C               JP   interpret2   
0D07                             ; edit
0D07                EDIT_:       
0D07   CD E0 0C               CALL   run   
0D0A   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0D1C   C3 3C 0C               JP   interpret   
0D1F                REEDIT_:      
0D1F   C3 3C 0C               JP   interpret   
0D22                PRINTSTACK_:      
0D22   CD E0 0C               CALL   run   
0D25   2F 70 6B 00            .CSTR   "/pk"   
0D29   C3 3C 0C               JP   interpret   
0D2C                             ; editDef:
0D2C                             ;     pop hl                      ; pop ret address
0D2C                             ;     ex (sp),hl                  ; swap with TOS
0D2C                             ;     push hl                     ; dup TOS
0D2C                             ;     ld a,l                      ; a = ident
0D2C                             ;     ld de,TIB                   ; de = start of TIB
0D2C                             ;     ld (vTIBPtr),de             ; update TIB*
0D2C                             ;     push ix                     ; save NEXT
0D2C                             ;     ld ix,editDef0              ; NEXT = editDef0
0D2C                             ;     jp lookupRef                ; convert letter into address
0D2C                             ; editDef0:
0D2C                             ;     ld e,(hl)                   ; de = (hl++)
0D2C                             ;     inc hl
0D2C                             ;     ld d,(hl)
0D2C                             ;     ld a,d                      ; de == 0 ?
0D2C                             ;     or e
0D2C                             ;     jr z,editDef4
0D2C                             ;     ld ix,editDef3              ; NEXT = editDef3
0D2C                             ;     ex de,hl
0D2C                             ;     ld a,(hl)
0D2C                             ;     cp "{"
0D2C                             ;     jr nz,editDef1
0D2C                             ;     jp editBlock0               ; convert letter into address
0D2C                             ; editDef1:
0D2C                             ;     cp "("
0D2C                             ;     jr nz,editDef2
0D2C                             ;     jp editBlock0               ; convert letter into address
0D2C                             ; editDef2:
0D2C                             ;     jp editLambda
0D2C                             ; editDef3:
0D2C                             ;     ld a," "                    ; write assign
0D2C                             ;     call writeChar
0D2C                             ;     pop hl                      ; a = ident
0D2C                             ;     ld a,l
0D2C                             ;     call writeChar
0D2C                             ;     ld a,"="                    ; write assign
0D2C                             ;     call writeChar
0D2C                             ;     ld ix,editDef4              ; NEXT = editDef4
0D2C                             ;     jp printTIB
0D2C                             ; editDef4:
0D2C                             ;     pop ix                      ; restore NEXT
0D2C                             ;     jp (ix)
0D2C                             ; writeChar:
0D2C                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D2C                             ;     ld (de),a                   ; write ident
0D2C                             ;     inc de
0D2C                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D2C                             ;     ret
0D2C                             ; ; printTIB
0D2C                             ; printTIB:
0D2C                             ;     ld hl,(vTIBPtr)
0D2C                             ;     ld de,TIB
0D2C                             ;     or a
0D2C                             ;     sbc hl,de
0D2C                             ;     jp printTIB2
0D2C                             ; printTIB1:
0D2C                             ;     ld a,(de)
0D2C                             ;     call putchar
0D2C                             ; printTIB2:
0D2C                             ;     ld a,l
0D2C                             ;     or h
0D2C                             ;     jr nz,printTIB1
0D2C                             ;     jp (ix)
0D2C                             ; editBlock:
0D2C                             ;     pop hl                      ; hl = block*
0D2C                             ; editBlock0:
0D2C                             ;     push ix                     ; save next
0D2C                             ;     push hl                     ; push block*
0D2C                             ;     push hl                     ; push block*
0D2C                             ;     ld ix,(editBlock2)
0D2C                             ;     jp blockLength
0D2C                             ; editBlock1:
0D2C                             ;     pop hl                      ; bc = length, (sp) = IP
0D2C                             ;     pop de                      ; de = block*
0D2C                             ;     ld a,l
0D2C                             ;     or h
0D2C                             ;     jr z,editBlock2
0D2C                             ;     push bc
0D2C                             ;     ld bc,hl
0D2C                             ;     ex de,hl                    ; hl = block*
0D2C                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D2C                             ;     ldir                        ; copy block to TIB
0D2C                             ;     ld (vTIBPtr),de              ; save TIB*
0D2C                             ;     pop bc
0D2C                             ; editBlock2:
0D2C                             ;     pop ix                      ; restore next
0D2C                             ;     jp (ix)
0D2C                             ; editLambda:
0D2C                             ;     jp (ix)
0D2C                             ; editArray:
0D2C                             ;     jp (ix)
0D2C                             ; editArglist:
0D2C                             ;     jp (ix)
0D2C                             ; ; blockLength
0D2C                             ; ; addr1 -- length
0D2C                             ; blockLength:
0D2C                             ;     pop hl                      ; block*
0D2C                             ;     push hl                     ; save block*
0D2C                             ;     inc hl                      ; skip first char
0D2C                             ;     ld d,1                      ; increase nesting
0D2C                             ; blockLength1:                   ; Skip to end of definition
0D2C                             ;     ld a,(hl)                   ; Get the next character
0D2C                             ;     inc hl                      ; Point to next character
0D2C                             ;     cp " " + 1                  ; ignore whitespace
0D2C                             ;     jr c,blockLength1
0D2C                             ;     cp ")"
0D2C                             ;     jr z,blockLength4
0D2C                             ;     cp "}"
0D2C                             ;     jr z,blockLength4
0D2C                             ;     cp "]"
0D2C                             ;     jr z,blockLength4
0D2C                             ;     cp "("
0D2C                             ;     jr z,blockLength2
0D2C                             ;     cp "{"
0D2C                             ;     jr z,blockLength2
0D2C                             ;     cp "["
0D2C                             ;     jr z,blockLength2
0D2C                             ;     cp "'"
0D2C                             ;     jr z,blockLength3
0D2C                             ;     cp "`"
0D2C                             ;     jr z,blockLength3
0D2C                             ;     cp DQ
0D2C                             ;     jr z,blockLength3
0D2C                             ;     jr blockLength1
0D2C                             ; blockLength2:
0D2C                             ;     inc d
0D2C                             ;     jr blockLength1
0D2C                             ; blockLength4:
0D2C                             ;     dec d
0D2C                             ;     jr nz, blockLength1         ; get the next element
0D2C                             ; blockLength3:
0D2C                             ;     ld a,$80
0D2C                             ;     xor d
0D2C                             ;     ld d,a
0D2C                             ;     jr nz, blockLength1
0D2C                             ;     pop hl                      ; hl = block*
0D2C                             ;     or a
0D2C                             ;     sbc hl,de
0D2C                             ;     push hl
0D2C                             ;     jp (ix)
0D2C                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D2C                             ; \a start of stack \#3 depth \b base \$ prompt
0D2C                             ; DW dStack               ; a vS0 start of datastack			
0D2C                             ; DW FALSE                ; b vBase16
0D2C                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D2C                             ; DW 0                    ; d
0D2C                             ; DW 65                   ; e vLastDef "A" last command u defined
0D2C                             ; DW 0                    ; f
0D2C                             ; DW page6                ; g 256 bytes limits
0D2C                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D2C                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                          ;*Macro unroll:  test "1 :b{:a{%a}/px};^F= 3F",3
0E00   31 00 4C               LD   SP,STACK   
0E03   CD 09 0C               CALL   coldInit   
0E06   CD 44 4A               CALL   execStr   
0E09   31 20 3A 62 7B 3A 61 7B 25 61 7D 2F 70 78 7D 3B 5E 46 3D 20 33 46 00 DB   "1 :b{:a{%a}/px};^F= 3F",0   
0E20   CD 49 0B               CALL   flushBuffer   
0E23   E1                     POP   HL   
0E24   E5                     PUSH   HL   
0E25   11 03 00               LD   DE,3   
0E28   B7                     OR   A   
0E29   ED 52                  SBC   HL,DE   
0E2B   7D                     LD   A,L   
0E2C   B4                     OR   H   
0E2D   CA 9E 0E               JP   Z,expectM_2782S15   
0E30   CD C1 0B               CALL   printStr   
0E33   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 2F 70 78 7D 3B 5E 46 3D 20 33 46 00 .CSTR   "Code: ","1 :b{:a{%a}/px};^F= 3F"   
0E50   CD C1 0B               CALL   printStr   
0E53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E62   21 03 00               LD   hl,3   
0E65   E5                     PUSH   hl   
0E66   E5                     PUSH   hl   
0E67   CD E0 0C               CALL   run   
0E6A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E72   CD 49 0B               CALL   flushBuffer   
0E75   CD C1 0B               CALL   printStr   
0E78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E85   E1                     POP   hl   
0E86   E5                     PUSH   hl   
0E87   E5                     PUSH   hl   
0E88   CD E0 0C               CALL   run   
0E8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E9A   CD 49 0B               CALL   flushBuffer   
0E9D   76                     HALT      
0E9E                EXPECTM_2782S15:      
0E9E   E1                     POP   HL   
0E9F                             ; test ":ab{%b %a-}/px F= 1 2F^ .", false
0E9F   CD C1 0B               CALL   printStr   
0EA2   44 6F 6E 65 21 00      .CSTR   "Done!"   
0EA8   76                     HALT      
0EA9                             ; 
0EA9                          ;*Macro unroll:  test "/f", false
0EA9   31 00 4C               LD   SP,STACK   
0EAC   CD 09 0C               CALL   coldInit   
0EAF   CD 44 4A               CALL   execStr   
0EB2   2F 66 00               DB   "/f",0   
0EB5   CD 49 0B               CALL   flushBuffer   
0EB8   E1                     POP   HL   
0EB9   E5                     PUSH   HL   
0EBA   11 00 00               LD   DE,false   
0EBD   B7                     OR   A   
0EBE   ED 52                  SBC   HL,DE   
0EC0   7D                     LD   A,L   
0EC1   B4                     OR   H   
0EC2   CA 1F 0F               JP   Z,expectM_2788S24   
0EC5   CD C1 0B               CALL   printStr   
0EC8   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0ED1   CD C1 0B               CALL   printStr   
0ED4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EE3   21 00 00               LD   hl,false   
0EE6   E5                     PUSH   hl   
0EE7   E5                     PUSH   hl   
0EE8   CD E0 0C               CALL   run   
0EEB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EF3   CD 49 0B               CALL   flushBuffer   
0EF6   CD C1 0B               CALL   printStr   
0EF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F06   E1                     POP   hl   
0F07   E5                     PUSH   hl   
0F08   E5                     PUSH   hl   
0F09   CD E0 0C               CALL   run   
0F0C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F1B   CD 49 0B               CALL   flushBuffer   
0F1E   76                     HALT      
0F1F                EXPECTM_2788S24:      
0F1F   E1                     POP   HL   
0F20                          ;*Macro unroll:  test "/t", true
0F20   31 00 4C               LD   SP,STACK   
0F23   CD 09 0C               CALL   coldInit   
0F26   CD 44 4A               CALL   execStr   
0F29   2F 74 00               DB   "/t",0   
0F2C   CD 49 0B               CALL   flushBuffer   
0F2F   E1                     POP   HL   
0F30   E5                     PUSH   HL   
0F31   11 FF FF               LD   DE,true   
0F34   B7                     OR   A   
0F35   ED 52                  SBC   HL,DE   
0F37   7D                     LD   A,L   
0F38   B4                     OR   H   
0F39   CA 96 0F               JP   Z,expectM_2789S25   
0F3C   CD C1 0B               CALL   printStr   
0F3F   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0F48   CD C1 0B               CALL   printStr   
0F4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F5A   21 FF FF               LD   hl,true   
0F5D   E5                     PUSH   hl   
0F5E   E5                     PUSH   hl   
0F5F   CD E0 0C               CALL   run   
0F62   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F6A   CD 49 0B               CALL   flushBuffer   
0F6D   CD C1 0B               CALL   printStr   
0F70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F7D   E1                     POP   hl   
0F7E   E5                     PUSH   hl   
0F7F   E5                     PUSH   hl   
0F80   CD E0 0C               CALL   run   
0F83   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F92   CD 49 0B               CALL   flushBuffer   
0F95   76                     HALT      
0F96                EXPECTM_2789S25:      
0F96   E1                     POP   HL   
0F97                          ;*Macro unroll:  test "1", 1
0F97   31 00 4C               LD   SP,STACK   
0F9A   CD 09 0C               CALL   coldInit   
0F9D   CD 44 4A               CALL   execStr   
0FA0   31 00                  DB   "1",0   
0FA2   CD 49 0B               CALL   flushBuffer   
0FA5   E1                     POP   HL   
0FA6   E5                     PUSH   HL   
0FA7   11 01 00               LD   DE,1   
0FAA   B7                     OR   A   
0FAB   ED 52                  SBC   HL,DE   
0FAD   7D                     LD   A,L   
0FAE   B4                     OR   H   
0FAF   CA 0B 10               JP   Z,expectM_2790S26   
0FB2   CD C1 0B               CALL   printStr   
0FB5   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FBD   CD C1 0B               CALL   printStr   
0FC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FCF   21 01 00               LD   hl,1   
0FD2   E5                     PUSH   hl   
0FD3   E5                     PUSH   hl   
0FD4   CD E0 0C               CALL   run   
0FD7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FDF   CD 49 0B               CALL   flushBuffer   
0FE2   CD C1 0B               CALL   printStr   
0FE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FF2   E1                     POP   hl   
0FF3   E5                     PUSH   hl   
0FF4   E5                     PUSH   hl   
0FF5   CD E0 0C               CALL   run   
0FF8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1007   CD 49 0B               CALL   flushBuffer   
100A   76                     HALT      
100B                EXPECTM_2790S26:      
100B   E1                     POP   HL   
100C                          ;*Macro unroll:  test "2", 2
100C   31 00 4C               LD   SP,STACK   
100F   CD 09 0C               CALL   coldInit   
1012   CD 44 4A               CALL   execStr   
1015   32 00                  DB   "2",0   
1017   CD 49 0B               CALL   flushBuffer   
101A   E1                     POP   HL   
101B   E5                     PUSH   HL   
101C   11 02 00               LD   DE,2   
101F   B7                     OR   A   
1020   ED 52                  SBC   HL,DE   
1022   7D                     LD   A,L   
1023   B4                     OR   H   
1024   CA 80 10               JP   Z,expectM_2791S27   
1027   CD C1 0B               CALL   printStr   
102A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1032   CD C1 0B               CALL   printStr   
1035   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1044   21 02 00               LD   hl,2   
1047   E5                     PUSH   hl   
1048   E5                     PUSH   hl   
1049   CD E0 0C               CALL   run   
104C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1054   CD 49 0B               CALL   flushBuffer   
1057   CD C1 0B               CALL   printStr   
105A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1067   E1                     POP   hl   
1068   E5                     PUSH   hl   
1069   E5                     PUSH   hl   
106A   CD E0 0C               CALL   run   
106D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
107C   CD 49 0B               CALL   flushBuffer   
107F   76                     HALT      
1080                EXPECTM_2791S27:      
1080   E1                     POP   HL   
1081                          ;*Macro unroll:  test "1", 1
1081   31 00 4C               LD   SP,STACK   
1084   CD 09 0C               CALL   coldInit   
1087   CD 44 4A               CALL   execStr   
108A   31 00                  DB   "1",0   
108C   CD 49 0B               CALL   flushBuffer   
108F   E1                     POP   HL   
1090   E5                     PUSH   HL   
1091   11 01 00               LD   DE,1   
1094   B7                     OR   A   
1095   ED 52                  SBC   HL,DE   
1097   7D                     LD   A,L   
1098   B4                     OR   H   
1099   CA F5 10               JP   Z,expectM_2792S28   
109C   CD C1 0B               CALL   printStr   
109F   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10A7   CD C1 0B               CALL   printStr   
10AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10B9   21 01 00               LD   hl,1   
10BC   E5                     PUSH   hl   
10BD   E5                     PUSH   hl   
10BE   CD E0 0C               CALL   run   
10C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10C9   CD 49 0B               CALL   flushBuffer   
10CC   CD C1 0B               CALL   printStr   
10CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10DC   E1                     POP   hl   
10DD   E5                     PUSH   hl   
10DE   E5                     PUSH   hl   
10DF   CD E0 0C               CALL   run   
10E2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10F1   CD 49 0B               CALL   flushBuffer   
10F4   76                     HALT      
10F5                EXPECTM_2792S28:      
10F5   E1                     POP   HL   
10F6                          ;*Macro unroll:  test "0", 0
10F6   31 00 4C               LD   SP,STACK   
10F9   CD 09 0C               CALL   coldInit   
10FC   CD 44 4A               CALL   execStr   
10FF   30 00                  DB   "0",0   
1101   CD 49 0B               CALL   flushBuffer   
1104   E1                     POP   HL   
1105   E5                     PUSH   HL   
1106   11 00 00               LD   DE,0   
1109   B7                     OR   A   
110A   ED 52                  SBC   HL,DE   
110C   7D                     LD   A,L   
110D   B4                     OR   H   
110E   CA 6A 11               JP   Z,expectM_2793S29   
1111   CD C1 0B               CALL   printStr   
1114   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
111C   CD C1 0B               CALL   printStr   
111F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
112E   21 00 00               LD   hl,0   
1131   E5                     PUSH   hl   
1132   E5                     PUSH   hl   
1133   CD E0 0C               CALL   run   
1136   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
113E   CD 49 0B               CALL   flushBuffer   
1141   CD C1 0B               CALL   printStr   
1144   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1151   E1                     POP   hl   
1152   E5                     PUSH   hl   
1153   E5                     PUSH   hl   
1154   CD E0 0C               CALL   run   
1157   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1166   CD 49 0B               CALL   flushBuffer   
1169   76                     HALT      
116A                EXPECTM_2793S29:      
116A   E1                     POP   HL   
116B                          ;*Macro unroll:  test "10", 10
116B   31 00 4C               LD   SP,STACK   
116E   CD 09 0C               CALL   coldInit   
1171   CD 44 4A               CALL   execStr   
1174   31 30 00               DB   "10",0   
1177   CD 49 0B               CALL   flushBuffer   
117A   E1                     POP   HL   
117B   E5                     PUSH   HL   
117C   11 0A 00               LD   DE,10   
117F   B7                     OR   A   
1180   ED 52                  SBC   HL,DE   
1182   7D                     LD   A,L   
1183   B4                     OR   H   
1184   CA E1 11               JP   Z,expectM_2794S30   
1187   CD C1 0B               CALL   printStr   
118A   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1193   CD C1 0B               CALL   printStr   
1196   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11A5   21 0A 00               LD   hl,10   
11A8   E5                     PUSH   hl   
11A9   E5                     PUSH   hl   
11AA   CD E0 0C               CALL   run   
11AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11B5   CD 49 0B               CALL   flushBuffer   
11B8   CD C1 0B               CALL   printStr   
11BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C8   E1                     POP   hl   
11C9   E5                     PUSH   hl   
11CA   E5                     PUSH   hl   
11CB   CD E0 0C               CALL   run   
11CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11DD   CD 49 0B               CALL   flushBuffer   
11E0   76                     HALT      
11E1                EXPECTM_2794S30:      
11E1   E1                     POP   HL   
11E2                          ;*Macro unroll:  test "123", 123
11E2   31 00 4C               LD   SP,STACK   
11E5   CD 09 0C               CALL   coldInit   
11E8   CD 44 4A               CALL   execStr   
11EB   31 32 33 00            DB   "123",0   
11EF   CD 49 0B               CALL   flushBuffer   
11F2   E1                     POP   HL   
11F3   E5                     PUSH   HL   
11F4   11 7B 00               LD   DE,123   
11F7   B7                     OR   A   
11F8   ED 52                  SBC   HL,DE   
11FA   7D                     LD   A,L   
11FB   B4                     OR   H   
11FC   CA 5A 12               JP   Z,expectM_2795S31   
11FF   CD C1 0B               CALL   printStr   
1202   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
120C   CD C1 0B               CALL   printStr   
120F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
121E   21 7B 00               LD   hl,123   
1221   E5                     PUSH   hl   
1222   E5                     PUSH   hl   
1223   CD E0 0C               CALL   run   
1226   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
122E   CD 49 0B               CALL   flushBuffer   
1231   CD C1 0B               CALL   printStr   
1234   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1241   E1                     POP   hl   
1242   E5                     PUSH   hl   
1243   E5                     PUSH   hl   
1244   CD E0 0C               CALL   run   
1247   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1256   CD 49 0B               CALL   flushBuffer   
1259   76                     HALT      
125A                EXPECTM_2795S31:      
125A   E1                     POP   HL   
125B                          ;*Macro unroll:  test "-1",-1
125B   31 00 4C               LD   SP,STACK   
125E   CD 09 0C               CALL   coldInit   
1261   CD 44 4A               CALL   execStr   
1264   2D 31 00               DB   "-1",0   
1267   CD 49 0B               CALL   flushBuffer   
126A   E1                     POP   HL   
126B   E5                     PUSH   HL   
126C   11 FF FF               LD   DE,-1   
126F   B7                     OR   A   
1270   ED 52                  SBC   HL,DE   
1272   7D                     LD   A,L   
1273   B4                     OR   H   
1274   CA D1 12               JP   Z,expectM_2796S32   
1277   CD C1 0B               CALL   printStr   
127A   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1283   CD C1 0B               CALL   printStr   
1286   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1295   21 FF FF               LD   hl,-1   
1298   E5                     PUSH   hl   
1299   E5                     PUSH   hl   
129A   CD E0 0C               CALL   run   
129D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12A5   CD 49 0B               CALL   flushBuffer   
12A8   CD C1 0B               CALL   printStr   
12AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12B8   E1                     POP   hl   
12B9   E5                     PUSH   hl   
12BA   E5                     PUSH   hl   
12BB   CD E0 0C               CALL   run   
12BE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12CD   CD 49 0B               CALL   flushBuffer   
12D0   76                     HALT      
12D1                EXPECTM_2796S32:      
12D1   E1                     POP   HL   
12D2                          ;*Macro unroll:  test "''", 0
12D2   31 00 4C               LD   SP,STACK   
12D5   CD 09 0C               CALL   coldInit   
12D8   CD 44 4A               CALL   execStr   
12DB   27 27 00               DB   "''",0   
12DE   CD 49 0B               CALL   flushBuffer   
12E1   E1                     POP   HL   
12E2   E5                     PUSH   HL   
12E3   11 00 00               LD   DE,0   
12E6   B7                     OR   A   
12E7   ED 52                  SBC   HL,DE   
12E9   7D                     LD   A,L   
12EA   B4                     OR   H   
12EB   CA 48 13               JP   Z,expectM_2797S33   
12EE   CD C1 0B               CALL   printStr   
12F1   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
12FA   CD C1 0B               CALL   printStr   
12FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
130C   21 00 00               LD   hl,0   
130F   E5                     PUSH   hl   
1310   E5                     PUSH   hl   
1311   CD E0 0C               CALL   run   
1314   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
131C   CD 49 0B               CALL   flushBuffer   
131F   CD C1 0B               CALL   printStr   
1322   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
132F   E1                     POP   hl   
1330   E5                     PUSH   hl   
1331   E5                     PUSH   hl   
1332   CD E0 0C               CALL   run   
1335   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1344   CD 49 0B               CALL   flushBuffer   
1347   76                     HALT      
1348                EXPECTM_2797S33:      
1348   E1                     POP   HL   
1349                          ;*Macro unroll:  test "'a'", $61
1349   31 00 4C               LD   SP,STACK   
134C   CD 09 0C               CALL   coldInit   
134F   CD 44 4A               CALL   execStr   
1352   27 61 27 00            DB   "'a'",0   
1356   CD 49 0B               CALL   flushBuffer   
1359   E1                     POP   HL   
135A   E5                     PUSH   HL   
135B   11 61 00               LD   DE,$61   
135E   B7                     OR   A   
135F   ED 52                  SBC   HL,DE   
1361   7D                     LD   A,L   
1362   B4                     OR   H   
1363   CA C1 13               JP   Z,expectM_2798S34   
1366   CD C1 0B               CALL   printStr   
1369   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1373   CD C1 0B               CALL   printStr   
1376   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1385   21 61 00               LD   hl,$61   
1388   E5                     PUSH   hl   
1389   E5                     PUSH   hl   
138A   CD E0 0C               CALL   run   
138D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1395   CD 49 0B               CALL   flushBuffer   
1398   CD C1 0B               CALL   printStr   
139B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13A8   E1                     POP   hl   
13A9   E5                     PUSH   hl   
13AA   E5                     PUSH   hl   
13AB   CD E0 0C               CALL   run   
13AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13BD   CD 49 0B               CALL   flushBuffer   
13C0   76                     HALT      
13C1                EXPECTM_2798S34:      
13C1   E1                     POP   HL   
13C2                          ;*Macro unroll:  test "'\\''", $27
13C2   31 00 4C               LD   SP,STACK   
13C5   CD 09 0C               CALL   coldInit   
13C8   CD 44 4A               CALL   execStr   
13CB   27 5C 27 27 00         DB   "'\\''",0   
13D0   CD 49 0B               CALL   flushBuffer   
13D3   E1                     POP   HL   
13D4   E5                     PUSH   HL   
13D5   11 27 00               LD   DE,$27   
13D8   B7                     OR   A   
13D9   ED 52                  SBC   HL,DE   
13DB   7D                     LD   A,L   
13DC   B4                     OR   H   
13DD   CA 3C 14               JP   Z,expectM_2799S35   
13E0   CD C1 0B               CALL   printStr   
13E3   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
13EE   CD C1 0B               CALL   printStr   
13F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1400   21 27 00               LD   hl,$27   
1403   E5                     PUSH   hl   
1404   E5                     PUSH   hl   
1405   CD E0 0C               CALL   run   
1408   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1410   CD 49 0B               CALL   flushBuffer   
1413   CD C1 0B               CALL   printStr   
1416   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1423   E1                     POP   hl   
1424   E5                     PUSH   hl   
1425   E5                     PUSH   hl   
1426   CD E0 0C               CALL   run   
1429   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1438   CD 49 0B               CALL   flushBuffer   
143B   76                     HALT      
143C                EXPECTM_2799S35:      
143C   E1                     POP   HL   
143D                          ;*Macro unroll:  test "$10", $10
143D   31 00 4C               LD   SP,STACK   
1440   CD 09 0C               CALL   coldInit   
1443   CD 44 4A               CALL   execStr   
1446   24 31 30 00            DB   "$10",0   
144A   CD 49 0B               CALL   flushBuffer   
144D   E1                     POP   HL   
144E   E5                     PUSH   HL   
144F   11 10 00               LD   DE,$10   
1452   B7                     OR   A   
1453   ED 52                  SBC   HL,DE   
1455   7D                     LD   A,L   
1456   B4                     OR   H   
1457   CA B5 14               JP   Z,expectM_2800S36   
145A   CD C1 0B               CALL   printStr   
145D   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1467   CD C1 0B               CALL   printStr   
146A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1479   21 10 00               LD   hl,$10   
147C   E5                     PUSH   hl   
147D   E5                     PUSH   hl   
147E   CD E0 0C               CALL   run   
1481   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1489   CD 49 0B               CALL   flushBuffer   
148C   CD C1 0B               CALL   printStr   
148F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
149C   E1                     POP   hl   
149D   E5                     PUSH   hl   
149E   E5                     PUSH   hl   
149F   CD E0 0C               CALL   run   
14A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14B1   CD 49 0B               CALL   flushBuffer   
14B4   76                     HALT      
14B5                EXPECTM_2800S36:      
14B5   E1                     POP   HL   
14B6                          ;*Macro unroll:  test "$FF", $FF
14B6   31 00 4C               LD   SP,STACK   
14B9   CD 09 0C               CALL   coldInit   
14BC   CD 44 4A               CALL   execStr   
14BF   24 46 46 00            DB   "$FF",0   
14C3   CD 49 0B               CALL   flushBuffer   
14C6   E1                     POP   HL   
14C7   E5                     PUSH   HL   
14C8   11 FF 00               LD   DE,$FF   
14CB   B7                     OR   A   
14CC   ED 52                  SBC   HL,DE   
14CE   7D                     LD   A,L   
14CF   B4                     OR   H   
14D0   CA 2E 15               JP   Z,expectM_2801S37   
14D3   CD C1 0B               CALL   printStr   
14D6   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
14E0   CD C1 0B               CALL   printStr   
14E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14F2   21 FF 00               LD   hl,$FF   
14F5   E5                     PUSH   hl   
14F6   E5                     PUSH   hl   
14F7   CD E0 0C               CALL   run   
14FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1502   CD 49 0B               CALL   flushBuffer   
1505   CD C1 0B               CALL   printStr   
1508   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1515   E1                     POP   hl   
1516   E5                     PUSH   hl   
1517   E5                     PUSH   hl   
1518   CD E0 0C               CALL   run   
151B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
152A   CD 49 0B               CALL   flushBuffer   
152D   76                     HALT      
152E                EXPECTM_2801S37:      
152E   E1                     POP   HL   
152F                          ;*Macro unroll:  test "-1 2 +",1
152F   31 00 4C               LD   SP,STACK   
1532   CD 09 0C               CALL   coldInit   
1535   CD 44 4A               CALL   execStr   
1538   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
153F   CD 49 0B               CALL   flushBuffer   
1542   E1                     POP   HL   
1543   E5                     PUSH   HL   
1544   11 01 00               LD   DE,1   
1547   B7                     OR   A   
1548   ED 52                  SBC   HL,DE   
154A   7D                     LD   A,L   
154B   B4                     OR   H   
154C   CA AD 15               JP   Z,expectM_2802S38   
154F   CD C1 0B               CALL   printStr   
1552   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
155F   CD C1 0B               CALL   printStr   
1562   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1571   21 01 00               LD   hl,1   
1574   E5                     PUSH   hl   
1575   E5                     PUSH   hl   
1576   CD E0 0C               CALL   run   
1579   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1581   CD 49 0B               CALL   flushBuffer   
1584   CD C1 0B               CALL   printStr   
1587   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1594   E1                     POP   hl   
1595   E5                     PUSH   hl   
1596   E5                     PUSH   hl   
1597   CD E0 0C               CALL   run   
159A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15A9   CD 49 0B               CALL   flushBuffer   
15AC   76                     HALT      
15AD                EXPECTM_2802S38:      
15AD   E1                     POP   HL   
15AE                          ;*Macro unroll:  test "-1 1 +",0
15AE   31 00 4C               LD   SP,STACK   
15B1   CD 09 0C               CALL   coldInit   
15B4   CD 44 4A               CALL   execStr   
15B7   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
15BE   CD 49 0B               CALL   flushBuffer   
15C1   E1                     POP   HL   
15C2   E5                     PUSH   HL   
15C3   11 00 00               LD   DE,0   
15C6   B7                     OR   A   
15C7   ED 52                  SBC   HL,DE   
15C9   7D                     LD   A,L   
15CA   B4                     OR   H   
15CB   CA 2C 16               JP   Z,expectM_2803S39   
15CE   CD C1 0B               CALL   printStr   
15D1   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
15DE   CD C1 0B               CALL   printStr   
15E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15F0   21 00 00               LD   hl,0   
15F3   E5                     PUSH   hl   
15F4   E5                     PUSH   hl   
15F5   CD E0 0C               CALL   run   
15F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1600   CD 49 0B               CALL   flushBuffer   
1603   CD C1 0B               CALL   printStr   
1606   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1613   E1                     POP   hl   
1614   E5                     PUSH   hl   
1615   E5                     PUSH   hl   
1616   CD E0 0C               CALL   run   
1619   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1628   CD 49 0B               CALL   flushBuffer   
162B   76                     HALT      
162C                EXPECTM_2803S39:      
162C   E1                     POP   HL   
162D                          ;*Macro unroll:  test "1 2 +", 3
162D   31 00 4C               LD   SP,STACK   
1630   CD 09 0C               CALL   coldInit   
1633   CD 44 4A               CALL   execStr   
1636   31 20 32 20 2B 00      DB   "1 2 +",0   
163C   CD 49 0B               CALL   flushBuffer   
163F   E1                     POP   HL   
1640   E5                     PUSH   HL   
1641   11 03 00               LD   DE,3   
1644   B7                     OR   A   
1645   ED 52                  SBC   HL,DE   
1647   7D                     LD   A,L   
1648   B4                     OR   H   
1649   CA A9 16               JP   Z,expectM_2804S40   
164C   CD C1 0B               CALL   printStr   
164F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
165B   CD C1 0B               CALL   printStr   
165E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
166D   21 03 00               LD   hl,3   
1670   E5                     PUSH   hl   
1671   E5                     PUSH   hl   
1672   CD E0 0C               CALL   run   
1675   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
167D   CD 49 0B               CALL   flushBuffer   
1680   CD C1 0B               CALL   printStr   
1683   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1690   E1                     POP   hl   
1691   E5                     PUSH   hl   
1692   E5                     PUSH   hl   
1693   CD E0 0C               CALL   run   
1696   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16A5   CD 49 0B               CALL   flushBuffer   
16A8   76                     HALT      
16A9                EXPECTM_2804S40:      
16A9   E1                     POP   HL   
16AA                          ;*Macro unroll:  test "4 1 2 +", 3
16AA   31 00 4C               LD   SP,STACK   
16AD   CD 09 0C               CALL   coldInit   
16B0   CD 44 4A               CALL   execStr   
16B3   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
16BB   CD 49 0B               CALL   flushBuffer   
16BE   E1                     POP   HL   
16BF   E5                     PUSH   HL   
16C0   11 03 00               LD   DE,3   
16C3   B7                     OR   A   
16C4   ED 52                  SBC   HL,DE   
16C6   7D                     LD   A,L   
16C7   B4                     OR   H   
16C8   CA 2A 17               JP   Z,expectM_2805S41   
16CB   CD C1 0B               CALL   printStr   
16CE   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
16DC   CD C1 0B               CALL   printStr   
16DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16EE   21 03 00               LD   hl,3   
16F1   E5                     PUSH   hl   
16F2   E5                     PUSH   hl   
16F3   CD E0 0C               CALL   run   
16F6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16FE   CD 49 0B               CALL   flushBuffer   
1701   CD C1 0B               CALL   printStr   
1704   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1711   E1                     POP   hl   
1712   E5                     PUSH   hl   
1713   E5                     PUSH   hl   
1714   CD E0 0C               CALL   run   
1717   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1726   CD 49 0B               CALL   flushBuffer   
1729   76                     HALT      
172A                EXPECTM_2805S41:      
172A   E1                     POP   HL   
172B                          ;*Macro unroll:  test "123 456 +", 123+456
172B   31 00 4C               LD   SP,STACK   
172E   CD 09 0C               CALL   coldInit   
1731   CD 44 4A               CALL   execStr   
1734   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
173E   CD 49 0B               CALL   flushBuffer   
1741   E1                     POP   HL   
1742   E5                     PUSH   HL   
1743   11 43 02               LD   DE,123+456   
1746   B7                     OR   A   
1747   ED 52                  SBC   HL,DE   
1749   7D                     LD   A,L   
174A   B4                     OR   H   
174B   CA AF 17               JP   Z,expectM_2806S42   
174E   CD C1 0B               CALL   printStr   
1751   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1761   CD C1 0B               CALL   printStr   
1764   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1773   21 43 02               LD   hl,123+456   
1776   E5                     PUSH   hl   
1777   E5                     PUSH   hl   
1778   CD E0 0C               CALL   run   
177B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1783   CD 49 0B               CALL   flushBuffer   
1786   CD C1 0B               CALL   printStr   
1789   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1796   E1                     POP   hl   
1797   E5                     PUSH   hl   
1798   E5                     PUSH   hl   
1799   CD E0 0C               CALL   run   
179C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17AB   CD 49 0B               CALL   flushBuffer   
17AE   76                     HALT      
17AF                EXPECTM_2806S42:      
17AF   E1                     POP   HL   
17B0                          ;*Macro unroll:  test "64 128 +", 64+128
17B0   31 00 4C               LD   SP,STACK   
17B3   CD 09 0C               CALL   coldInit   
17B6   CD 44 4A               CALL   execStr   
17B9   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
17C2   CD 49 0B               CALL   flushBuffer   
17C5   E1                     POP   HL   
17C6   E5                     PUSH   HL   
17C7   11 C0 00               LD   DE,64+128   
17CA   B7                     OR   A   
17CB   ED 52                  SBC   HL,DE   
17CD   7D                     LD   A,L   
17CE   B4                     OR   H   
17CF   CA 32 18               JP   Z,expectM_2807S43   
17D2   CD C1 0B               CALL   printStr   
17D5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
17E4   CD C1 0B               CALL   printStr   
17E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F6   21 C0 00               LD   hl,64+128   
17F9   E5                     PUSH   hl   
17FA   E5                     PUSH   hl   
17FB   CD E0 0C               CALL   run   
17FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1806   CD 49 0B               CALL   flushBuffer   
1809   CD C1 0B               CALL   printStr   
180C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1819   E1                     POP   hl   
181A   E5                     PUSH   hl   
181B   E5                     PUSH   hl   
181C   CD E0 0C               CALL   run   
181F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
182E   CD 49 0B               CALL   flushBuffer   
1831   76                     HALT      
1832                EXPECTM_2807S43:      
1832   E1                     POP   HL   
1833                          ;*Macro unroll:  test "1 2 +", 3
1833   31 00 4C               LD   SP,STACK   
1836   CD 09 0C               CALL   coldInit   
1839   CD 44 4A               CALL   execStr   
183C   31 20 32 20 2B 00      DB   "1 2 +",0   
1842   CD 49 0B               CALL   flushBuffer   
1845   E1                     POP   HL   
1846   E5                     PUSH   HL   
1847   11 03 00               LD   DE,3   
184A   B7                     OR   A   
184B   ED 52                  SBC   HL,DE   
184D   7D                     LD   A,L   
184E   B4                     OR   H   
184F   CA AF 18               JP   Z,expectM_2808S44   
1852   CD C1 0B               CALL   printStr   
1855   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1861   CD C1 0B               CALL   printStr   
1864   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1873   21 03 00               LD   hl,3   
1876   E5                     PUSH   hl   
1877   E5                     PUSH   hl   
1878   CD E0 0C               CALL   run   
187B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1883   CD 49 0B               CALL   flushBuffer   
1886   CD C1 0B               CALL   printStr   
1889   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1896   E1                     POP   hl   
1897   E5                     PUSH   hl   
1898   E5                     PUSH   hl   
1899   CD E0 0C               CALL   run   
189C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18AB   CD 49 0B               CALL   flushBuffer   
18AE   76                     HALT      
18AF                EXPECTM_2808S44:      
18AF   E1                     POP   HL   
18B0                          ;*Macro unroll:  test "1a= a++ a",2
18B0   31 00 4C               LD   SP,STACK   
18B3   CD 09 0C               CALL   coldInit   
18B6   CD 44 4A               CALL   execStr   
18B9   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
18C3   CD 49 0B               CALL   flushBuffer   
18C6   E1                     POP   HL   
18C7   E5                     PUSH   HL   
18C8   11 02 00               LD   DE,2   
18CB   B7                     OR   A   
18CC   ED 52                  SBC   HL,DE   
18CE   7D                     LD   A,L   
18CF   B4                     OR   H   
18D0   CA 34 19               JP   Z,expectM_2809S45   
18D3   CD C1 0B               CALL   printStr   
18D6   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
18E6   CD C1 0B               CALL   printStr   
18E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18F8   21 02 00               LD   hl,2   
18FB   E5                     PUSH   hl   
18FC   E5                     PUSH   hl   
18FD   CD E0 0C               CALL   run   
1900   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1908   CD 49 0B               CALL   flushBuffer   
190B   CD C1 0B               CALL   printStr   
190E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
191B   E1                     POP   hl   
191C   E5                     PUSH   hl   
191D   E5                     PUSH   hl   
191E   CD E0 0C               CALL   run   
1921   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1930   CD 49 0B               CALL   flushBuffer   
1933   76                     HALT      
1934                EXPECTM_2809S45:      
1934   E1                     POP   HL   
1935                          ;*Macro unroll:  test "-1 -1 -",0
1935   31 00 4C               LD   SP,STACK   
1938   CD 09 0C               CALL   coldInit   
193B   CD 44 4A               CALL   execStr   
193E   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1946   CD 49 0B               CALL   flushBuffer   
1949   E1                     POP   HL   
194A   E5                     PUSH   HL   
194B   11 00 00               LD   DE,0   
194E   B7                     OR   A   
194F   ED 52                  SBC   HL,DE   
1951   7D                     LD   A,L   
1952   B4                     OR   H   
1953   CA B5 19               JP   Z,expectM_2810S46   
1956   CD C1 0B               CALL   printStr   
1959   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1967   CD C1 0B               CALL   printStr   
196A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1979   21 00 00               LD   hl,0   
197C   E5                     PUSH   hl   
197D   E5                     PUSH   hl   
197E   CD E0 0C               CALL   run   
1981   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1989   CD 49 0B               CALL   flushBuffer   
198C   CD C1 0B               CALL   printStr   
198F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
199C   E1                     POP   hl   
199D   E5                     PUSH   hl   
199E   E5                     PUSH   hl   
199F   CD E0 0C               CALL   run   
19A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19B1   CD 49 0B               CALL   flushBuffer   
19B4   76                     HALT      
19B5                EXPECTM_2810S46:      
19B5   E1                     POP   HL   
19B6                          ;*Macro unroll:  test "5 3 -", 2
19B6   31 00 4C               LD   SP,STACK   
19B9   CD 09 0C               CALL   coldInit   
19BC   CD 44 4A               CALL   execStr   
19BF   35 20 33 20 2D 00      DB   "5 3 -",0   
19C5   CD 49 0B               CALL   flushBuffer   
19C8   E1                     POP   HL   
19C9   E5                     PUSH   HL   
19CA   11 02 00               LD   DE,2   
19CD   B7                     OR   A   
19CE   ED 52                  SBC   HL,DE   
19D0   7D                     LD   A,L   
19D1   B4                     OR   H   
19D2   CA 32 1A               JP   Z,expectM_2811S47   
19D5   CD C1 0B               CALL   printStr   
19D8   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
19E4   CD C1 0B               CALL   printStr   
19E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19F6   21 02 00               LD   hl,2   
19F9   E5                     PUSH   hl   
19FA   E5                     PUSH   hl   
19FB   CD E0 0C               CALL   run   
19FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A06   CD 49 0B               CALL   flushBuffer   
1A09   CD C1 0B               CALL   printStr   
1A0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A19   E1                     POP   hl   
1A1A   E5                     PUSH   hl   
1A1B   E5                     PUSH   hl   
1A1C   CD E0 0C               CALL   run   
1A1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A2E   CD 49 0B               CALL   flushBuffer   
1A31   76                     HALT      
1A32                EXPECTM_2811S47:      
1A32   E1                     POP   HL   
1A33                          ;*Macro unroll:  test "2 1 -",1
1A33   31 00 4C               LD   SP,STACK   
1A36   CD 09 0C               CALL   coldInit   
1A39   CD 44 4A               CALL   execStr   
1A3C   32 20 31 20 2D 00      DB   "2 1 -",0   
1A42   CD 49 0B               CALL   flushBuffer   
1A45   E1                     POP   HL   
1A46   E5                     PUSH   HL   
1A47   11 01 00               LD   DE,1   
1A4A   B7                     OR   A   
1A4B   ED 52                  SBC   HL,DE   
1A4D   7D                     LD   A,L   
1A4E   B4                     OR   H   
1A4F   CA AF 1A               JP   Z,expectM_2812S48   
1A52   CD C1 0B               CALL   printStr   
1A55   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1A61   CD C1 0B               CALL   printStr   
1A64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A73   21 01 00               LD   hl,1   
1A76   E5                     PUSH   hl   
1A77   E5                     PUSH   hl   
1A78   CD E0 0C               CALL   run   
1A7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A83   CD 49 0B               CALL   flushBuffer   
1A86   CD C1 0B               CALL   printStr   
1A89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A96   E1                     POP   hl   
1A97   E5                     PUSH   hl   
1A98   E5                     PUSH   hl   
1A99   CD E0 0C               CALL   run   
1A9C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AAB   CD 49 0B               CALL   flushBuffer   
1AAE   76                     HALT      
1AAF                EXPECTM_2812S48:      
1AAF   E1                     POP   HL   
1AB0                          ;*Macro unroll:  test "3a= a-- a",2
1AB0   31 00 4C               LD   SP,STACK   
1AB3   CD 09 0C               CALL   coldInit   
1AB6   CD 44 4A               CALL   execStr   
1AB9   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1AC3   CD 49 0B               CALL   flushBuffer   
1AC6   E1                     POP   HL   
1AC7   E5                     PUSH   HL   
1AC8   11 02 00               LD   DE,2   
1ACB   B7                     OR   A   
1ACC   ED 52                  SBC   HL,DE   
1ACE   7D                     LD   A,L   
1ACF   B4                     OR   H   
1AD0   CA 34 1B               JP   Z,expectM_2813S49   
1AD3   CD C1 0B               CALL   printStr   
1AD6   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1AE6   CD C1 0B               CALL   printStr   
1AE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AF8   21 02 00               LD   hl,2   
1AFB   E5                     PUSH   hl   
1AFC   E5                     PUSH   hl   
1AFD   CD E0 0C               CALL   run   
1B00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B08   CD 49 0B               CALL   flushBuffer   
1B0B   CD C1 0B               CALL   printStr   
1B0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B1B   E1                     POP   hl   
1B1C   E5                     PUSH   hl   
1B1D   E5                     PUSH   hl   
1B1E   CD E0 0C               CALL   run   
1B21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B30   CD 49 0B               CALL   flushBuffer   
1B33   76                     HALT      
1B34                EXPECTM_2813S49:      
1B34   E1                     POP   HL   
1B35                          ;*Macro unroll:  test "3 5 &", 1
1B35   31 00 4C               LD   SP,STACK   
1B38   CD 09 0C               CALL   coldInit   
1B3B   CD 44 4A               CALL   execStr   
1B3E   33 20 35 20 26 00      DB   "3 5 &",0   
1B44   CD 49 0B               CALL   flushBuffer   
1B47   E1                     POP   HL   
1B48   E5                     PUSH   HL   
1B49   11 01 00               LD   DE,1   
1B4C   B7                     OR   A   
1B4D   ED 52                  SBC   HL,DE   
1B4F   7D                     LD   A,L   
1B50   B4                     OR   H   
1B51   CA B1 1B               JP   Z,expectM_2814S50   
1B54   CD C1 0B               CALL   printStr   
1B57   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1B63   CD C1 0B               CALL   printStr   
1B66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B75   21 01 00               LD   hl,1   
1B78   E5                     PUSH   hl   
1B79   E5                     PUSH   hl   
1B7A   CD E0 0C               CALL   run   
1B7D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B85   CD 49 0B               CALL   flushBuffer   
1B88   CD C1 0B               CALL   printStr   
1B8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B98   E1                     POP   hl   
1B99   E5                     PUSH   hl   
1B9A   E5                     PUSH   hl   
1B9B   CD E0 0C               CALL   run   
1B9E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BAD   CD 49 0B               CALL   flushBuffer   
1BB0   76                     HALT      
1BB1                EXPECTM_2814S50:      
1BB1   E1                     POP   HL   
1BB2                          ;*Macro unroll:  test "3 5 |", 7
1BB2   31 00 4C               LD   SP,STACK   
1BB5   CD 09 0C               CALL   coldInit   
1BB8   CD 44 4A               CALL   execStr   
1BBB   33 20 35 20 7C 00      DB   "3 5 |",0   
1BC1   CD 49 0B               CALL   flushBuffer   
1BC4   E1                     POP   HL   
1BC5   E5                     PUSH   HL   
1BC6   11 07 00               LD   DE,7   
1BC9   B7                     OR   A   
1BCA   ED 52                  SBC   HL,DE   
1BCC   7D                     LD   A,L   
1BCD   B4                     OR   H   
1BCE   CA 2E 1C               JP   Z,expectM_2815S51   
1BD1   CD C1 0B               CALL   printStr   
1BD4   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1BE0   CD C1 0B               CALL   printStr   
1BE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BF2   21 07 00               LD   hl,7   
1BF5   E5                     PUSH   hl   
1BF6   E5                     PUSH   hl   
1BF7   CD E0 0C               CALL   run   
1BFA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C02   CD 49 0B               CALL   flushBuffer   
1C05   CD C1 0B               CALL   printStr   
1C08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C15   E1                     POP   hl   
1C16   E5                     PUSH   hl   
1C17   E5                     PUSH   hl   
1C18   CD E0 0C               CALL   run   
1C1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C2A   CD 49 0B               CALL   flushBuffer   
1C2D   76                     HALT      
1C2E                EXPECTM_2815S51:      
1C2E   E1                     POP   HL   
1C2F                          ;*Macro unroll:  test "3 5 /x", 6
1C2F   31 00 4C               LD   SP,STACK   
1C32   CD 09 0C               CALL   coldInit   
1C35   CD 44 4A               CALL   execStr   
1C38   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1C3F   CD 49 0B               CALL   flushBuffer   
1C42   E1                     POP   HL   
1C43   E5                     PUSH   HL   
1C44   11 06 00               LD   DE,6   
1C47   B7                     OR   A   
1C48   ED 52                  SBC   HL,DE   
1C4A   7D                     LD   A,L   
1C4B   B4                     OR   H   
1C4C   CA AD 1C               JP   Z,expectM_2816S52   
1C4F   CD C1 0B               CALL   printStr   
1C52   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1C5F   CD C1 0B               CALL   printStr   
1C62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C71   21 06 00               LD   hl,6   
1C74   E5                     PUSH   hl   
1C75   E5                     PUSH   hl   
1C76   CD E0 0C               CALL   run   
1C79   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C81   CD 49 0B               CALL   flushBuffer   
1C84   CD C1 0B               CALL   printStr   
1C87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C94   E1                     POP   hl   
1C95   E5                     PUSH   hl   
1C96   E5                     PUSH   hl   
1C97   CD E0 0C               CALL   run   
1C9A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CA9   CD 49 0B               CALL   flushBuffer   
1CAC   76                     HALT      
1CAD                EXPECTM_2816S52:      
1CAD   E1                     POP   HL   
1CAE                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1CAE   31 00 4C               LD   SP,STACK   
1CB1   CD 09 0C               CALL   coldInit   
1CB4   CD 44 4A               CALL   execStr   
1CB7   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1CC6   CD 49 0B               CALL   flushBuffer   
1CC9   E1                     POP   HL   
1CCA   E5                     PUSH   HL   
1CCB   11 06 00               LD   DE,6   
1CCE   B7                     OR   A   
1CCF   ED 52                  SBC   HL,DE   
1CD1   7D                     LD   A,L   
1CD2   B4                     OR   H   
1CD3   CA 3C 1D               JP   Z,expectM_2817S53   
1CD6   CD C1 0B               CALL   printStr   
1CD9   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1CEE   CD C1 0B               CALL   printStr   
1CF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D00   21 06 00               LD   hl,6   
1D03   E5                     PUSH   hl   
1D04   E5                     PUSH   hl   
1D05   CD E0 0C               CALL   run   
1D08   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D10   CD 49 0B               CALL   flushBuffer   
1D13   CD C1 0B               CALL   printStr   
1D16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D23   E1                     POP   hl   
1D24   E5                     PUSH   hl   
1D25   E5                     PUSH   hl   
1D26   CD E0 0C               CALL   run   
1D29   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D38   CD 49 0B               CALL   flushBuffer   
1D3B   76                     HALT      
1D3C                EXPECTM_2817S53:      
1D3C   E1                     POP   HL   
1D3D                          ;*Macro unroll:  test "2 3 *", 6
1D3D   31 00 4C               LD   SP,STACK   
1D40   CD 09 0C               CALL   coldInit   
1D43   CD 44 4A               CALL   execStr   
1D46   32 20 33 20 2A 00      DB   "2 3 *",0   
1D4C   CD 49 0B               CALL   flushBuffer   
1D4F   E1                     POP   HL   
1D50   E5                     PUSH   HL   
1D51   11 06 00               LD   DE,6   
1D54   B7                     OR   A   
1D55   ED 52                  SBC   HL,DE   
1D57   7D                     LD   A,L   
1D58   B4                     OR   H   
1D59   CA B9 1D               JP   Z,expectM_2818S54   
1D5C   CD C1 0B               CALL   printStr   
1D5F   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1D6B   CD C1 0B               CALL   printStr   
1D6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D7D   21 06 00               LD   hl,6   
1D80   E5                     PUSH   hl   
1D81   E5                     PUSH   hl   
1D82   CD E0 0C               CALL   run   
1D85   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D8D   CD 49 0B               CALL   flushBuffer   
1D90   CD C1 0B               CALL   printStr   
1D93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DA0   E1                     POP   hl   
1DA1   E5                     PUSH   hl   
1DA2   E5                     PUSH   hl   
1DA3   CD E0 0C               CALL   run   
1DA6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DB5   CD 49 0B               CALL   flushBuffer   
1DB8   76                     HALT      
1DB9                EXPECTM_2818S54:      
1DB9   E1                     POP   HL   
1DBA                          ;*Macro unroll:  test "1 2 3 + *", 5
1DBA   31 00 4C               LD   SP,STACK   
1DBD   CD 09 0C               CALL   coldInit   
1DC0   CD 44 4A               CALL   execStr   
1DC3   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1DCD   CD 49 0B               CALL   flushBuffer   
1DD0   E1                     POP   HL   
1DD1   E5                     PUSH   HL   
1DD2   11 05 00               LD   DE,5   
1DD5   B7                     OR   A   
1DD6   ED 52                  SBC   HL,DE   
1DD8   7D                     LD   A,L   
1DD9   B4                     OR   H   
1DDA   CA 3E 1E               JP   Z,expectM_2819S55   
1DDD   CD C1 0B               CALL   printStr   
1DE0   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1DF0   CD C1 0B               CALL   printStr   
1DF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E02   21 05 00               LD   hl,5   
1E05   E5                     PUSH   hl   
1E06   E5                     PUSH   hl   
1E07   CD E0 0C               CALL   run   
1E0A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E12   CD 49 0B               CALL   flushBuffer   
1E15   CD C1 0B               CALL   printStr   
1E18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E25   E1                     POP   hl   
1E26   E5                     PUSH   hl   
1E27   E5                     PUSH   hl   
1E28   CD E0 0C               CALL   run   
1E2B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E3A   CD 49 0B               CALL   flushBuffer   
1E3D   76                     HALT      
1E3E                EXPECTM_2819S55:      
1E3E   E1                     POP   HL   
1E3F                          ;*Macro unroll:  test "7 3 /", 2
1E3F   31 00 4C               LD   SP,STACK   
1E42   CD 09 0C               CALL   coldInit   
1E45   CD 44 4A               CALL   execStr   
1E48   37 20 33 20 2F 00      DB   "7 3 /",0   
1E4E   CD 49 0B               CALL   flushBuffer   
1E51   E1                     POP   HL   
1E52   E5                     PUSH   HL   
1E53   11 02 00               LD   DE,2   
1E56   B7                     OR   A   
1E57   ED 52                  SBC   HL,DE   
1E59   7D                     LD   A,L   
1E5A   B4                     OR   H   
1E5B   CA BB 1E               JP   Z,expectM_2820S56   
1E5E   CD C1 0B               CALL   printStr   
1E61   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1E6D   CD C1 0B               CALL   printStr   
1E70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E7F   21 02 00               LD   hl,2   
1E82   E5                     PUSH   hl   
1E83   E5                     PUSH   hl   
1E84   CD E0 0C               CALL   run   
1E87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E8F   CD 49 0B               CALL   flushBuffer   
1E92   CD C1 0B               CALL   printStr   
1E95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA2   E1                     POP   hl   
1EA3   E5                     PUSH   hl   
1EA4   E5                     PUSH   hl   
1EA5   CD E0 0C               CALL   run   
1EA8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EB7   CD 49 0B               CALL   flushBuffer   
1EBA   76                     HALT      
1EBB                EXPECTM_2820S56:      
1EBB   E1                     POP   HL   
1EBC                          ;*Macro unroll:  test "7 3 / /re", 1
1EBC   31 00 4C               LD   SP,STACK   
1EBF   CD 09 0C               CALL   coldInit   
1EC2   CD 44 4A               CALL   execStr   
1EC5   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
1ECF   CD 49 0B               CALL   flushBuffer   
1ED2   E1                     POP   HL   
1ED3   E5                     PUSH   HL   
1ED4   11 01 00               LD   DE,1   
1ED7   B7                     OR   A   
1ED8   ED 52                  SBC   HL,DE   
1EDA   7D                     LD   A,L   
1EDB   B4                     OR   H   
1EDC   CA 40 1F               JP   Z,expectM_2821S57   
1EDF   CD C1 0B               CALL   printStr   
1EE2   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1EF2   CD C1 0B               CALL   printStr   
1EF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F04   21 01 00               LD   hl,1   
1F07   E5                     PUSH   hl   
1F08   E5                     PUSH   hl   
1F09   CD E0 0C               CALL   run   
1F0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F14   CD 49 0B               CALL   flushBuffer   
1F17   CD C1 0B               CALL   printStr   
1F1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F27   E1                     POP   hl   
1F28   E5                     PUSH   hl   
1F29   E5                     PUSH   hl   
1F2A   CD E0 0C               CALL   run   
1F2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F3C   CD 49 0B               CALL   flushBuffer   
1F3F   76                     HALT      
1F40                EXPECTM_2821S57:      
1F40   E1                     POP   HL   
1F41                          ;*Macro unroll:  test "7 3 /", 2
1F41   31 00 4C               LD   SP,STACK   
1F44   CD 09 0C               CALL   coldInit   
1F47   CD 44 4A               CALL   execStr   
1F4A   37 20 33 20 2F 00      DB   "7 3 /",0   
1F50   CD 49 0B               CALL   flushBuffer   
1F53   E1                     POP   HL   
1F54   E5                     PUSH   HL   
1F55   11 02 00               LD   DE,2   
1F58   B7                     OR   A   
1F59   ED 52                  SBC   HL,DE   
1F5B   7D                     LD   A,L   
1F5C   B4                     OR   H   
1F5D   CA BD 1F               JP   Z,expectM_2822S58   
1F60   CD C1 0B               CALL   printStr   
1F63   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1F6F   CD C1 0B               CALL   printStr   
1F72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F81   21 02 00               LD   hl,2   
1F84   E5                     PUSH   hl   
1F85   E5                     PUSH   hl   
1F86   CD E0 0C               CALL   run   
1F89   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F91   CD 49 0B               CALL   flushBuffer   
1F94   CD C1 0B               CALL   printStr   
1F97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA4   E1                     POP   hl   
1FA5   E5                     PUSH   hl   
1FA6   E5                     PUSH   hl   
1FA7   CD E0 0C               CALL   run   
1FAA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FB9   CD 49 0B               CALL   flushBuffer   
1FBC   76                     HALT      
1FBD                EXPECTM_2822S58:      
1FBD   E1                     POP   HL   
1FBE                          ;*Macro unroll:  test "2 3 ==", FALSE
1FBE   31 00 4C               LD   SP,STACK   
1FC1   CD 09 0C               CALL   coldInit   
1FC4   CD 44 4A               CALL   execStr   
1FC7   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
1FCE   CD 49 0B               CALL   flushBuffer   
1FD1   E1                     POP   HL   
1FD2   E5                     PUSH   HL   
1FD3   11 00 00               LD   DE,FALSE   
1FD6   B7                     OR   A   
1FD7   ED 52                  SBC   HL,DE   
1FD9   7D                     LD   A,L   
1FDA   B4                     OR   H   
1FDB   CA 3C 20               JP   Z,expectM_2823S59   
1FDE   CD C1 0B               CALL   printStr   
1FE1   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1FEE   CD C1 0B               CALL   printStr   
1FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2000   21 00 00               LD   hl,FALSE   
2003   E5                     PUSH   hl   
2004   E5                     PUSH   hl   
2005   CD E0 0C               CALL   run   
2008   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2010   CD 49 0B               CALL   flushBuffer   
2013   CD C1 0B               CALL   printStr   
2016   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2023   E1                     POP   hl   
2024   E5                     PUSH   hl   
2025   E5                     PUSH   hl   
2026   CD E0 0C               CALL   run   
2029   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2038   CD 49 0B               CALL   flushBuffer   
203B   76                     HALT      
203C                EXPECTM_2823S59:      
203C   E1                     POP   HL   
203D                          ;*Macro unroll:  test "3 3 ==", TRUE
203D   31 00 4C               LD   SP,STACK   
2040   CD 09 0C               CALL   coldInit   
2043   CD 44 4A               CALL   execStr   
2046   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
204D   CD 49 0B               CALL   flushBuffer   
2050   E1                     POP   HL   
2051   E5                     PUSH   HL   
2052   11 FF FF               LD   DE,TRUE   
2055   B7                     OR   A   
2056   ED 52                  SBC   HL,DE   
2058   7D                     LD   A,L   
2059   B4                     OR   H   
205A   CA BB 20               JP   Z,expectM_2824S60   
205D   CD C1 0B               CALL   printStr   
2060   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
206D   CD C1 0B               CALL   printStr   
2070   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
207F   21 FF FF               LD   hl,TRUE   
2082   E5                     PUSH   hl   
2083   E5                     PUSH   hl   
2084   CD E0 0C               CALL   run   
2087   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
208F   CD 49 0B               CALL   flushBuffer   
2092   CD C1 0B               CALL   printStr   
2095   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A2   E1                     POP   hl   
20A3   E5                     PUSH   hl   
20A4   E5                     PUSH   hl   
20A5   CD E0 0C               CALL   run   
20A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20B7   CD 49 0B               CALL   flushBuffer   
20BA   76                     HALT      
20BB                EXPECTM_2824S60:      
20BB   E1                     POP   HL   
20BC                          ;*Macro unroll:  test "1 2 <", TRUE
20BC   31 00 4C               LD   SP,STACK   
20BF   CD 09 0C               CALL   coldInit   
20C2   CD 44 4A               CALL   execStr   
20C5   31 20 32 20 3C 00      DB   "1 2 <",0   
20CB   CD 49 0B               CALL   flushBuffer   
20CE   E1                     POP   HL   
20CF   E5                     PUSH   HL   
20D0   11 FF FF               LD   DE,TRUE   
20D3   B7                     OR   A   
20D4   ED 52                  SBC   HL,DE   
20D6   7D                     LD   A,L   
20D7   B4                     OR   H   
20D8   CA 38 21               JP   Z,expectM_2825S61   
20DB   CD C1 0B               CALL   printStr   
20DE   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
20EA   CD C1 0B               CALL   printStr   
20ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20FC   21 FF FF               LD   hl,TRUE   
20FF   E5                     PUSH   hl   
2100   E5                     PUSH   hl   
2101   CD E0 0C               CALL   run   
2104   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
210C   CD 49 0B               CALL   flushBuffer   
210F   CD C1 0B               CALL   printStr   
2112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
211F   E1                     POP   hl   
2120   E5                     PUSH   hl   
2121   E5                     PUSH   hl   
2122   CD E0 0C               CALL   run   
2125   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2134   CD 49 0B               CALL   flushBuffer   
2137   76                     HALT      
2138                EXPECTM_2825S61:      
2138   E1                     POP   HL   
2139                          ;*Macro unroll:  test "2 1 <", FALSE
2139   31 00 4C               LD   SP,STACK   
213C   CD 09 0C               CALL   coldInit   
213F   CD 44 4A               CALL   execStr   
2142   32 20 31 20 3C 00      DB   "2 1 <",0   
2148   CD 49 0B               CALL   flushBuffer   
214B   E1                     POP   HL   
214C   E5                     PUSH   HL   
214D   11 00 00               LD   DE,FALSE   
2150   B7                     OR   A   
2151   ED 52                  SBC   HL,DE   
2153   7D                     LD   A,L   
2154   B4                     OR   H   
2155   CA B5 21               JP   Z,expectM_2826S62   
2158   CD C1 0B               CALL   printStr   
215B   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2167   CD C1 0B               CALL   printStr   
216A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2179   21 00 00               LD   hl,FALSE   
217C   E5                     PUSH   hl   
217D   E5                     PUSH   hl   
217E   CD E0 0C               CALL   run   
2181   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2189   CD 49 0B               CALL   flushBuffer   
218C   CD C1 0B               CALL   printStr   
218F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
219C   E1                     POP   hl   
219D   E5                     PUSH   hl   
219E   E5                     PUSH   hl   
219F   CD E0 0C               CALL   run   
21A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21B1   CD 49 0B               CALL   flushBuffer   
21B4   76                     HALT      
21B5                EXPECTM_2826S62:      
21B5   E1                     POP   HL   
21B6                          ;*Macro unroll:  test "2 3 <", TRUE
21B6   31 00 4C               LD   SP,STACK   
21B9   CD 09 0C               CALL   coldInit   
21BC   CD 44 4A               CALL   execStr   
21BF   32 20 33 20 3C 00      DB   "2 3 <",0   
21C5   CD 49 0B               CALL   flushBuffer   
21C8   E1                     POP   HL   
21C9   E5                     PUSH   HL   
21CA   11 FF FF               LD   DE,TRUE   
21CD   B7                     OR   A   
21CE   ED 52                  SBC   HL,DE   
21D0   7D                     LD   A,L   
21D1   B4                     OR   H   
21D2   CA 32 22               JP   Z,expectM_2827S63   
21D5   CD C1 0B               CALL   printStr   
21D8   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
21E4   CD C1 0B               CALL   printStr   
21E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F6   21 FF FF               LD   hl,TRUE   
21F9   E5                     PUSH   hl   
21FA   E5                     PUSH   hl   
21FB   CD E0 0C               CALL   run   
21FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2206   CD 49 0B               CALL   flushBuffer   
2209   CD C1 0B               CALL   printStr   
220C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2219   E1                     POP   hl   
221A   E5                     PUSH   hl   
221B   E5                     PUSH   hl   
221C   CD E0 0C               CALL   run   
221F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
222E   CD 49 0B               CALL   flushBuffer   
2231   76                     HALT      
2232                EXPECTM_2827S63:      
2232   E1                     POP   HL   
2233                          ;*Macro unroll:  test "3 3 <", FALSE
2233   31 00 4C               LD   SP,STACK   
2236   CD 09 0C               CALL   coldInit   
2239   CD 44 4A               CALL   execStr   
223C   33 20 33 20 3C 00      DB   "3 3 <",0   
2242   CD 49 0B               CALL   flushBuffer   
2245   E1                     POP   HL   
2246   E5                     PUSH   HL   
2247   11 00 00               LD   DE,FALSE   
224A   B7                     OR   A   
224B   ED 52                  SBC   HL,DE   
224D   7D                     LD   A,L   
224E   B4                     OR   H   
224F   CA AF 22               JP   Z,expectM_2828S64   
2252   CD C1 0B               CALL   printStr   
2255   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2261   CD C1 0B               CALL   printStr   
2264   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2273   21 00 00               LD   hl,FALSE   
2276   E5                     PUSH   hl   
2277   E5                     PUSH   hl   
2278   CD E0 0C               CALL   run   
227B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2283   CD 49 0B               CALL   flushBuffer   
2286   CD C1 0B               CALL   printStr   
2289   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2296   E1                     POP   hl   
2297   E5                     PUSH   hl   
2298   E5                     PUSH   hl   
2299   CD E0 0C               CALL   run   
229C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22AB   CD 49 0B               CALL   flushBuffer   
22AE   76                     HALT      
22AF                EXPECTM_2828S64:      
22AF   E1                     POP   HL   
22B0                          ;*Macro unroll:  test "1 2 >", FALSE
22B0   31 00 4C               LD   SP,STACK   
22B3   CD 09 0C               CALL   coldInit   
22B6   CD 44 4A               CALL   execStr   
22B9   31 20 32 20 3E 00      DB   "1 2 >",0   
22BF   CD 49 0B               CALL   flushBuffer   
22C2   E1                     POP   HL   
22C3   E5                     PUSH   HL   
22C4   11 00 00               LD   DE,FALSE   
22C7   B7                     OR   A   
22C8   ED 52                  SBC   HL,DE   
22CA   7D                     LD   A,L   
22CB   B4                     OR   H   
22CC   CA 2C 23               JP   Z,expectM_2829S65   
22CF   CD C1 0B               CALL   printStr   
22D2   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
22DE   CD C1 0B               CALL   printStr   
22E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F0   21 00 00               LD   hl,FALSE   
22F3   E5                     PUSH   hl   
22F4   E5                     PUSH   hl   
22F5   CD E0 0C               CALL   run   
22F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2300   CD 49 0B               CALL   flushBuffer   
2303   CD C1 0B               CALL   printStr   
2306   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2313   E1                     POP   hl   
2314   E5                     PUSH   hl   
2315   E5                     PUSH   hl   
2316   CD E0 0C               CALL   run   
2319   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2328   CD 49 0B               CALL   flushBuffer   
232B   76                     HALT      
232C                EXPECTM_2829S65:      
232C   E1                     POP   HL   
232D                          ;*Macro unroll:  test "2 1 >", TRUE
232D   31 00 4C               LD   SP,STACK   
2330   CD 09 0C               CALL   coldInit   
2333   CD 44 4A               CALL   execStr   
2336   32 20 31 20 3E 00      DB   "2 1 >",0   
233C   CD 49 0B               CALL   flushBuffer   
233F   E1                     POP   HL   
2340   E5                     PUSH   HL   
2341   11 FF FF               LD   DE,TRUE   
2344   B7                     OR   A   
2345   ED 52                  SBC   HL,DE   
2347   7D                     LD   A,L   
2348   B4                     OR   H   
2349   CA A9 23               JP   Z,expectM_2830S66   
234C   CD C1 0B               CALL   printStr   
234F   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
235B   CD C1 0B               CALL   printStr   
235E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
236D   21 FF FF               LD   hl,TRUE   
2370   E5                     PUSH   hl   
2371   E5                     PUSH   hl   
2372   CD E0 0C               CALL   run   
2375   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
237D   CD 49 0B               CALL   flushBuffer   
2380   CD C1 0B               CALL   printStr   
2383   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2390   E1                     POP   hl   
2391   E5                     PUSH   hl   
2392   E5                     PUSH   hl   
2393   CD E0 0C               CALL   run   
2396   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23A5   CD 49 0B               CALL   flushBuffer   
23A8   76                     HALT      
23A9                EXPECTM_2830S66:      
23A9   E1                     POP   HL   
23AA                          ;*Macro unroll:  test "3 3 >", FALSE
23AA   31 00 4C               LD   SP,STACK   
23AD   CD 09 0C               CALL   coldInit   
23B0   CD 44 4A               CALL   execStr   
23B3   33 20 33 20 3E 00      DB   "3 3 >",0   
23B9   CD 49 0B               CALL   flushBuffer   
23BC   E1                     POP   HL   
23BD   E5                     PUSH   HL   
23BE   11 00 00               LD   DE,FALSE   
23C1   B7                     OR   A   
23C2   ED 52                  SBC   HL,DE   
23C4   7D                     LD   A,L   
23C5   B4                     OR   H   
23C6   CA 26 24               JP   Z,expectM_2831S67   
23C9   CD C1 0B               CALL   printStr   
23CC   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
23D8   CD C1 0B               CALL   printStr   
23DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23EA   21 00 00               LD   hl,FALSE   
23ED   E5                     PUSH   hl   
23EE   E5                     PUSH   hl   
23EF   CD E0 0C               CALL   run   
23F2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23FA   CD 49 0B               CALL   flushBuffer   
23FD   CD C1 0B               CALL   printStr   
2400   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
240D   E1                     POP   hl   
240E   E5                     PUSH   hl   
240F   E5                     PUSH   hl   
2410   CD E0 0C               CALL   run   
2413   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2422   CD 49 0B               CALL   flushBuffer   
2425   76                     HALT      
2426                EXPECTM_2831S67:      
2426   E1                     POP   HL   
2427                          ;*Macro unroll:  test "4 3 >", TRUE
2427   31 00 4C               LD   SP,STACK   
242A   CD 09 0C               CALL   coldInit   
242D   CD 44 4A               CALL   execStr   
2430   34 20 33 20 3E 00      DB   "4 3 >",0   
2436   CD 49 0B               CALL   flushBuffer   
2439   E1                     POP   HL   
243A   E5                     PUSH   HL   
243B   11 FF FF               LD   DE,TRUE   
243E   B7                     OR   A   
243F   ED 52                  SBC   HL,DE   
2441   7D                     LD   A,L   
2442   B4                     OR   H   
2443   CA A3 24               JP   Z,expectM_2832S68   
2446   CD C1 0B               CALL   printStr   
2449   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2455   CD C1 0B               CALL   printStr   
2458   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2467   21 FF FF               LD   hl,TRUE   
246A   E5                     PUSH   hl   
246B   E5                     PUSH   hl   
246C   CD E0 0C               CALL   run   
246F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2477   CD 49 0B               CALL   flushBuffer   
247A   CD C1 0B               CALL   printStr   
247D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
248A   E1                     POP   hl   
248B   E5                     PUSH   hl   
248C   E5                     PUSH   hl   
248D   CD E0 0C               CALL   run   
2490   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
249F   CD 49 0B               CALL   flushBuffer   
24A2   76                     HALT      
24A3                EXPECTM_2832S68:      
24A3   E1                     POP   HL   
24A4                          ;*Macro unroll:  test "2 2 <=", TRUE
24A4   31 00 4C               LD   SP,STACK   
24A7   CD 09 0C               CALL   coldInit   
24AA   CD 44 4A               CALL   execStr   
24AD   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
24B4   CD 49 0B               CALL   flushBuffer   
24B7   E1                     POP   HL   
24B8   E5                     PUSH   HL   
24B9   11 FF FF               LD   DE,TRUE   
24BC   B7                     OR   A   
24BD   ED 52                  SBC   HL,DE   
24BF   7D                     LD   A,L   
24C0   B4                     OR   H   
24C1   CA 22 25               JP   Z,expectM_2833S69   
24C4   CD C1 0B               CALL   printStr   
24C7   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
24D4   CD C1 0B               CALL   printStr   
24D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24E6   21 FF FF               LD   hl,TRUE   
24E9   E5                     PUSH   hl   
24EA   E5                     PUSH   hl   
24EB   CD E0 0C               CALL   run   
24EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24F6   CD 49 0B               CALL   flushBuffer   
24F9   CD C1 0B               CALL   printStr   
24FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2509   E1                     POP   hl   
250A   E5                     PUSH   hl   
250B   E5                     PUSH   hl   
250C   CD E0 0C               CALL   run   
250F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
251E   CD 49 0B               CALL   flushBuffer   
2521   76                     HALT      
2522                EXPECTM_2833S69:      
2522   E1                     POP   HL   
2523                          ;*Macro unroll:  test "2 2 >=", TRUE
2523   31 00 4C               LD   SP,STACK   
2526   CD 09 0C               CALL   coldInit   
2529   CD 44 4A               CALL   execStr   
252C   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2533   CD 49 0B               CALL   flushBuffer   
2536   E1                     POP   HL   
2537   E5                     PUSH   HL   
2538   11 FF FF               LD   DE,TRUE   
253B   B7                     OR   A   
253C   ED 52                  SBC   HL,DE   
253E   7D                     LD   A,L   
253F   B4                     OR   H   
2540   CA A1 25               JP   Z,expectM_2834S70   
2543   CD C1 0B               CALL   printStr   
2546   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2553   CD C1 0B               CALL   printStr   
2556   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2565   21 FF FF               LD   hl,TRUE   
2568   E5                     PUSH   hl   
2569   E5                     PUSH   hl   
256A   CD E0 0C               CALL   run   
256D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2575   CD 49 0B               CALL   flushBuffer   
2578   CD C1 0B               CALL   printStr   
257B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2588   E1                     POP   hl   
2589   E5                     PUSH   hl   
258A   E5                     PUSH   hl   
258B   CD E0 0C               CALL   run   
258E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
259D   CD 49 0B               CALL   flushBuffer   
25A0   76                     HALT      
25A1                EXPECTM_2834S70:      
25A1   E1                     POP   HL   
25A2                          ;*Macro unroll:  test "3 1 <<", 6
25A2   31 00 4C               LD   SP,STACK   
25A5   CD 09 0C               CALL   coldInit   
25A8   CD 44 4A               CALL   execStr   
25AB   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
25B2   CD 49 0B               CALL   flushBuffer   
25B5   E1                     POP   HL   
25B6   E5                     PUSH   HL   
25B7   11 06 00               LD   DE,6   
25BA   B7                     OR   A   
25BB   ED 52                  SBC   HL,DE   
25BD   7D                     LD   A,L   
25BE   B4                     OR   H   
25BF   CA 20 26               JP   Z,expectM_2835S71   
25C2   CD C1 0B               CALL   printStr   
25C5   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
25D2   CD C1 0B               CALL   printStr   
25D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25E4   21 06 00               LD   hl,6   
25E7   E5                     PUSH   hl   
25E8   E5                     PUSH   hl   
25E9   CD E0 0C               CALL   run   
25EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25F4   CD 49 0B               CALL   flushBuffer   
25F7   CD C1 0B               CALL   printStr   
25FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2607   E1                     POP   hl   
2608   E5                     PUSH   hl   
2609   E5                     PUSH   hl   
260A   CD E0 0C               CALL   run   
260D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
261C   CD 49 0B               CALL   flushBuffer   
261F   76                     HALT      
2620                EXPECTM_2835S71:      
2620   E1                     POP   HL   
2621                          ;*Macro unroll:  test "10 1 >>", 5
2621   31 00 4C               LD   SP,STACK   
2624   CD 09 0C               CALL   coldInit   
2627   CD 44 4A               CALL   execStr   
262A   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2632   CD 49 0B               CALL   flushBuffer   
2635   E1                     POP   HL   
2636   E5                     PUSH   HL   
2637   11 05 00               LD   DE,5   
263A   B7                     OR   A   
263B   ED 52                  SBC   HL,DE   
263D   7D                     LD   A,L   
263E   B4                     OR   H   
263F   CA A1 26               JP   Z,expectM_2836S72   
2642   CD C1 0B               CALL   printStr   
2645   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2653   CD C1 0B               CALL   printStr   
2656   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2665   21 05 00               LD   hl,5   
2668   E5                     PUSH   hl   
2669   E5                     PUSH   hl   
266A   CD E0 0C               CALL   run   
266D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2675   CD 49 0B               CALL   flushBuffer   
2678   CD C1 0B               CALL   printStr   
267B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2688   E1                     POP   hl   
2689   E5                     PUSH   hl   
268A   E5                     PUSH   hl   
268B   CD E0 0C               CALL   run   
268E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
269D   CD 49 0B               CALL   flushBuffer   
26A0   76                     HALT      
26A1                EXPECTM_2836S72:      
26A1   E1                     POP   HL   
26A2                          ;*Macro unroll:  test "1 x = x", 1
26A2   31 00 4C               LD   SP,STACK   
26A5   CD 09 0C               CALL   coldInit   
26A8   CD 44 4A               CALL   execStr   
26AB   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
26B3   CD 49 0B               CALL   flushBuffer   
26B6   E1                     POP   HL   
26B7   E5                     PUSH   HL   
26B8   11 01 00               LD   DE,1   
26BB   B7                     OR   A   
26BC   ED 52                  SBC   HL,DE   
26BE   7D                     LD   A,L   
26BF   B4                     OR   H   
26C0   CA 22 27               JP   Z,expectM_2837S73   
26C3   CD C1 0B               CALL   printStr   
26C6   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
26D4   CD C1 0B               CALL   printStr   
26D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E6   21 01 00               LD   hl,1   
26E9   E5                     PUSH   hl   
26EA   E5                     PUSH   hl   
26EB   CD E0 0C               CALL   run   
26EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26F6   CD 49 0B               CALL   flushBuffer   
26F9   CD C1 0B               CALL   printStr   
26FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2709   E1                     POP   hl   
270A   E5                     PUSH   hl   
270B   E5                     PUSH   hl   
270C   CD E0 0C               CALL   run   
270F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
271E   CD 49 0B               CALL   flushBuffer   
2721   76                     HALT      
2722                EXPECTM_2837S73:      
2722   E1                     POP   HL   
2723                          ;*Macro unroll:  test "1{}^", 1
2723   31 00 4C               LD   SP,STACK   
2726   CD 09 0C               CALL   coldInit   
2729   CD 44 4A               CALL   execStr   
272C   31 7B 7D 5E 00         DB   "1{}^",0   
2731   CD 49 0B               CALL   flushBuffer   
2734   E1                     POP   HL   
2735   E5                     PUSH   HL   
2736   11 01 00               LD   DE,1   
2739   B7                     OR   A   
273A   ED 52                  SBC   HL,DE   
273C   7D                     LD   A,L   
273D   B4                     OR   H   
273E   CA 9D 27               JP   Z,expectM_2838S74   
2741   CD C1 0B               CALL   printStr   
2744   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
274F   CD C1 0B               CALL   printStr   
2752   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2761   21 01 00               LD   hl,1   
2764   E5                     PUSH   hl   
2765   E5                     PUSH   hl   
2766   CD E0 0C               CALL   run   
2769   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2771   CD 49 0B               CALL   flushBuffer   
2774   CD C1 0B               CALL   printStr   
2777   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2784   E1                     POP   hl   
2785   E5                     PUSH   hl   
2786   E5                     PUSH   hl   
2787   CD E0 0C               CALL   run   
278A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2799   CD 49 0B               CALL   flushBuffer   
279C   76                     HALT      
279D                EXPECTM_2838S74:      
279D   E1                     POP   HL   
279E                          ;*Macro unroll:  test "{1}^", 1
279E   31 00 4C               LD   SP,STACK   
27A1   CD 09 0C               CALL   coldInit   
27A4   CD 44 4A               CALL   execStr   
27A7   7B 31 7D 5E 00         DB   "{1}^",0   
27AC   CD 49 0B               CALL   flushBuffer   
27AF   E1                     POP   HL   
27B0   E5                     PUSH   HL   
27B1   11 01 00               LD   DE,1   
27B4   B7                     OR   A   
27B5   ED 52                  SBC   HL,DE   
27B7   7D                     LD   A,L   
27B8   B4                     OR   H   
27B9   CA 18 28               JP   Z,expectM_2839S75   
27BC   CD C1 0B               CALL   printStr   
27BF   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
27CA   CD C1 0B               CALL   printStr   
27CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DC   21 01 00               LD   hl,1   
27DF   E5                     PUSH   hl   
27E0   E5                     PUSH   hl   
27E1   CD E0 0C               CALL   run   
27E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27EC   CD 49 0B               CALL   flushBuffer   
27EF   CD C1 0B               CALL   printStr   
27F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27FF   E1                     POP   hl   
2800   E5                     PUSH   hl   
2801   E5                     PUSH   hl   
2802   CD E0 0C               CALL   run   
2805   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2814   CD 49 0B               CALL   flushBuffer   
2817   76                     HALT      
2818                EXPECTM_2839S75:      
2818   E1                     POP   HL   
2819                          ;*Macro unroll:  test "{{1}^}^", 1
2819   31 00 4C               LD   SP,STACK   
281C   CD 09 0C               CALL   coldInit   
281F   CD 44 4A               CALL   execStr   
2822   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
282A   CD 49 0B               CALL   flushBuffer   
282D   E1                     POP   HL   
282E   E5                     PUSH   HL   
282F   11 01 00               LD   DE,1   
2832   B7                     OR   A   
2833   ED 52                  SBC   HL,DE   
2835   7D                     LD   A,L   
2836   B4                     OR   H   
2837   CA 99 28               JP   Z,expectM_2840S76   
283A   CD C1 0B               CALL   printStr   
283D   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
284B   CD C1 0B               CALL   printStr   
284E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285D   21 01 00               LD   hl,1   
2860   E5                     PUSH   hl   
2861   E5                     PUSH   hl   
2862   CD E0 0C               CALL   run   
2865   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
286D   CD 49 0B               CALL   flushBuffer   
2870   CD C1 0B               CALL   printStr   
2873   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2880   E1                     POP   hl   
2881   E5                     PUSH   hl   
2882   E5                     PUSH   hl   
2883   CD E0 0C               CALL   run   
2886   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2895   CD 49 0B               CALL   flushBuffer   
2898   76                     HALT      
2899                EXPECTM_2840S76:      
2899   E1                     POP   HL   
289A                          ;*Macro unroll:  test "{{{1}^}^}^", 1
289A   31 00 4C               LD   SP,STACK   
289D   CD 09 0C               CALL   coldInit   
28A0   CD 44 4A               CALL   execStr   
28A3   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
28AE   CD 49 0B               CALL   flushBuffer   
28B1   E1                     POP   HL   
28B2   E5                     PUSH   HL   
28B3   11 01 00               LD   DE,1   
28B6   B7                     OR   A   
28B7   ED 52                  SBC   HL,DE   
28B9   7D                     LD   A,L   
28BA   B4                     OR   H   
28BB   CA 20 29               JP   Z,expectM_2841S77   
28BE   CD C1 0B               CALL   printStr   
28C1   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
28D2   CD C1 0B               CALL   printStr   
28D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E4   21 01 00               LD   hl,1   
28E7   E5                     PUSH   hl   
28E8   E5                     PUSH   hl   
28E9   CD E0 0C               CALL   run   
28EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F4   CD 49 0B               CALL   flushBuffer   
28F7   CD C1 0B               CALL   printStr   
28FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2907   E1                     POP   hl   
2908   E5                     PUSH   hl   
2909   E5                     PUSH   hl   
290A   CD E0 0C               CALL   run   
290D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291C   CD 49 0B               CALL   flushBuffer   
291F   76                     HALT      
2920                EXPECTM_2841S77:      
2920   E1                     POP   HL   
2921                          ;*Macro unroll:  test "5 /f{10} ?", 5
2921   31 00 4C               LD   SP,STACK   
2924   CD 09 0C               CALL   coldInit   
2927   CD 44 4A               CALL   execStr   
292A   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2935   CD 49 0B               CALL   flushBuffer   
2938   E1                     POP   HL   
2939   E5                     PUSH   HL   
293A   11 05 00               LD   DE,5   
293D   B7                     OR   A   
293E   ED 52                  SBC   HL,DE   
2940   7D                     LD   A,L   
2941   B4                     OR   H   
2942   CA A7 29               JP   Z,expectM_2842S78   
2945   CD C1 0B               CALL   printStr   
2948   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2959   CD C1 0B               CALL   printStr   
295C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
296B   21 05 00               LD   hl,5   
296E   E5                     PUSH   hl   
296F   E5                     PUSH   hl   
2970   CD E0 0C               CALL   run   
2973   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
297B   CD 49 0B               CALL   flushBuffer   
297E   CD C1 0B               CALL   printStr   
2981   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
298E   E1                     POP   hl   
298F   E5                     PUSH   hl   
2990   E5                     PUSH   hl   
2991   CD E0 0C               CALL   run   
2994   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29A3   CD 49 0B               CALL   flushBuffer   
29A6   76                     HALT      
29A7                EXPECTM_2842S78:      
29A7   E1                     POP   HL   
29A8                          ;*Macro unroll:  test "5 /t{10} ? +", 15
29A8   31 00 4C               LD   SP,STACK   
29AB   CD 09 0C               CALL   coldInit   
29AE   CD 44 4A               CALL   execStr   
29B1   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
29BE   CD 49 0B               CALL   flushBuffer   
29C1   E1                     POP   HL   
29C2   E5                     PUSH   HL   
29C3   11 0F 00               LD   DE,15   
29C6   B7                     OR   A   
29C7   ED 52                  SBC   HL,DE   
29C9   7D                     LD   A,L   
29CA   B4                     OR   H   
29CB   CA 32 2A               JP   Z,expectM_2843S79   
29CE   CD C1 0B               CALL   printStr   
29D1   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
29E4   CD C1 0B               CALL   printStr   
29E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F6   21 0F 00               LD   hl,15   
29F9   E5                     PUSH   hl   
29FA   E5                     PUSH   hl   
29FB   CD E0 0C               CALL   run   
29FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A06   CD 49 0B               CALL   flushBuffer   
2A09   CD C1 0B               CALL   printStr   
2A0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A19   E1                     POP   hl   
2A1A   E5                     PUSH   hl   
2A1B   E5                     PUSH   hl   
2A1C   CD E0 0C               CALL   run   
2A1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A2E   CD 49 0B               CALL   flushBuffer   
2A31   76                     HALT      
2A32                EXPECTM_2843S79:      
2A32   E1                     POP   HL   
2A33                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2A33   31 00 4C               LD   SP,STACK   
2A36   CD 09 0C               CALL   coldInit   
2A39   CD 44 4A               CALL   execStr   
2A3C   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2A4E   CD 49 0B               CALL   flushBuffer   
2A51   E1                     POP   HL   
2A52   E5                     PUSH   HL   
2A53   11 15 00               LD   DE,21   
2A56   B7                     OR   A   
2A57   ED 52                  SBC   HL,DE   
2A59   7D                     LD   A,L   
2A5A   B4                     OR   H   
2A5B   CA C7 2A               JP   Z,expectM_2844S80   
2A5E   CD C1 0B               CALL   printStr   
2A61   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2A79   CD C1 0B               CALL   printStr   
2A7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A8B   21 15 00               LD   hl,21   
2A8E   E5                     PUSH   hl   
2A8F   E5                     PUSH   hl   
2A90   CD E0 0C               CALL   run   
2A93   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A9B   CD 49 0B               CALL   flushBuffer   
2A9E   CD C1 0B               CALL   printStr   
2AA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AAE   E1                     POP   hl   
2AAF   E5                     PUSH   hl   
2AB0   E5                     PUSH   hl   
2AB1   CD E0 0C               CALL   run   
2AB4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AC3   CD 49 0B               CALL   flushBuffer   
2AC6   76                     HALT      
2AC7                EXPECTM_2844S80:      
2AC7   E1                     POP   HL   
2AC8                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2AC8   31 00 4C               LD   SP,STACK   
2ACB   CD 09 0C               CALL   coldInit   
2ACE   CD 44 4A               CALL   execStr   
2AD1   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2AE3   CD 49 0B               CALL   flushBuffer   
2AE6   E1                     POP   HL   
2AE7   E5                     PUSH   HL   
2AE8   11 0B 00               LD   DE,11   
2AEB   B7                     OR   A   
2AEC   ED 52                  SBC   HL,DE   
2AEE   7D                     LD   A,L   
2AEF   B4                     OR   H   
2AF0   CA 5C 2B               JP   Z,expectM_2845S81   
2AF3   CD C1 0B               CALL   printStr   
2AF6   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2B0E   CD C1 0B               CALL   printStr   
2B11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B20   21 0B 00               LD   hl,11   
2B23   E5                     PUSH   hl   
2B24   E5                     PUSH   hl   
2B25   CD E0 0C               CALL   run   
2B28   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B30   CD 49 0B               CALL   flushBuffer   
2B33   CD C1 0B               CALL   printStr   
2B36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B43   E1                     POP   hl   
2B44   E5                     PUSH   hl   
2B45   E5                     PUSH   hl   
2B46   CD E0 0C               CALL   run   
2B49   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B58   CD 49 0B               CALL   flushBuffer   
2B5B   76                     HALT      
2B5C                EXPECTM_2845S81:      
2B5C   E1                     POP   HL   
2B5D                          ;*Macro unroll:  test ": 0#", $0000
2B5D   31 00 4C               LD   SP,STACK   
2B60   CD 09 0C               CALL   coldInit   
2B63   CD 44 4A               CALL   execStr   
2B66   3A 20 30 23 00         DB   ": 0#",0   
2B6B   CD 49 0B               CALL   flushBuffer   
2B6E   E1                     POP   HL   
2B6F   E5                     PUSH   HL   
2B70   11 00 00               LD   DE,$0000   
2B73   B7                     OR   A   
2B74   ED 52                  SBC   HL,DE   
2B76   7D                     LD   A,L   
2B77   B4                     OR   H   
2B78   CA D7 2B               JP   Z,expectM_2846S82   
2B7B   CD C1 0B               CALL   printStr   
2B7E   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2B89   CD C1 0B               CALL   printStr   
2B8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B9B   21 00 00               LD   hl,$0000   
2B9E   E5                     PUSH   hl   
2B9F   E5                     PUSH   hl   
2BA0   CD E0 0C               CALL   run   
2BA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BAB   CD 49 0B               CALL   flushBuffer   
2BAE   CD C1 0B               CALL   printStr   
2BB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BBE   E1                     POP   hl   
2BBF   E5                     PUSH   hl   
2BC0   E5                     PUSH   hl   
2BC1   CD E0 0C               CALL   run   
2BC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BD3   CD 49 0B               CALL   flushBuffer   
2BD6   76                     HALT      
2BD7                EXPECTM_2846S82:      
2BD7   E1                     POP   HL   
2BD8                          ;*Macro unroll:  test ":a 0#", $0100
2BD8   31 00 4C               LD   SP,STACK   
2BDB   CD 09 0C               CALL   coldInit   
2BDE   CD 44 4A               CALL   execStr   
2BE1   3A 61 20 30 23 00      DB   ":a 0#",0   
2BE7   CD 49 0B               CALL   flushBuffer   
2BEA   E1                     POP   HL   
2BEB   E5                     PUSH   HL   
2BEC   11 00 01               LD   DE,$0100   
2BEF   B7                     OR   A   
2BF0   ED 52                  SBC   HL,DE   
2BF2   7D                     LD   A,L   
2BF3   B4                     OR   H   
2BF4   CA 54 2C               JP   Z,expectM_2847S83   
2BF7   CD C1 0B               CALL   printStr   
2BFA   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2C06   CD C1 0B               CALL   printStr   
2C09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C18   21 00 01               LD   hl,$0100   
2C1B   E5                     PUSH   hl   
2C1C   E5                     PUSH   hl   
2C1D   CD E0 0C               CALL   run   
2C20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C28   CD 49 0B               CALL   flushBuffer   
2C2B   CD C1 0B               CALL   printStr   
2C2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C3B   E1                     POP   hl   
2C3C   E5                     PUSH   hl   
2C3D   E5                     PUSH   hl   
2C3E   CD E0 0C               CALL   run   
2C41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C50   CD 49 0B               CALL   flushBuffer   
2C53   76                     HALT      
2C54                EXPECTM_2847S83:      
2C54   E1                     POP   HL   
2C55                          ;*Macro unroll:  test ":a: 0#", $0100
2C55   31 00 4C               LD   SP,STACK   
2C58   CD 09 0C               CALL   coldInit   
2C5B   CD 44 4A               CALL   execStr   
2C5E   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2C65   CD 49 0B               CALL   flushBuffer   
2C68   E1                     POP   HL   
2C69   E5                     PUSH   HL   
2C6A   11 00 01               LD   DE,$0100   
2C6D   B7                     OR   A   
2C6E   ED 52                  SBC   HL,DE   
2C70   7D                     LD   A,L   
2C71   B4                     OR   H   
2C72   CA D3 2C               JP   Z,expectM_2848S84   
2C75   CD C1 0B               CALL   printStr   
2C78   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2C85   CD C1 0B               CALL   printStr   
2C88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C97   21 00 01               LD   hl,$0100   
2C9A   E5                     PUSH   hl   
2C9B   E5                     PUSH   hl   
2C9C   CD E0 0C               CALL   run   
2C9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CA7   CD 49 0B               CALL   flushBuffer   
2CAA   CD C1 0B               CALL   printStr   
2CAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CBA   E1                     POP   hl   
2CBB   E5                     PUSH   hl   
2CBC   E5                     PUSH   hl   
2CBD   CD E0 0C               CALL   run   
2CC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CCF   CD 49 0B               CALL   flushBuffer   
2CD2   76                     HALT      
2CD3                EXPECTM_2848S84:      
2CD3   E1                     POP   HL   
2CD4                          ;*Macro unroll:  test ":a:b 0#", $0201
2CD4   31 00 4C               LD   SP,STACK   
2CD7   CD 09 0C               CALL   coldInit   
2CDA   CD 44 4A               CALL   execStr   
2CDD   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
2CE5   CD 49 0B               CALL   flushBuffer   
2CE8   E1                     POP   HL   
2CE9   E5                     PUSH   HL   
2CEA   11 01 02               LD   DE,$0201   
2CED   B7                     OR   A   
2CEE   ED 52                  SBC   HL,DE   
2CF0   7D                     LD   A,L   
2CF1   B4                     OR   H   
2CF2   CA 54 2D               JP   Z,expectM_2849S85   
2CF5   CD C1 0B               CALL   printStr   
2CF8   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2D06   CD C1 0B               CALL   printStr   
2D09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D18   21 01 02               LD   hl,$0201   
2D1B   E5                     PUSH   hl   
2D1C   E5                     PUSH   hl   
2D1D   CD E0 0C               CALL   run   
2D20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D28   CD 49 0B               CALL   flushBuffer   
2D2B   CD C1 0B               CALL   printStr   
2D2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D3B   E1                     POP   hl   
2D3C   E5                     PUSH   hl   
2D3D   E5                     PUSH   hl   
2D3E   CD E0 0C               CALL   run   
2D41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D50   CD 49 0B               CALL   flushBuffer   
2D53   76                     HALT      
2D54                EXPECTM_2849S85:      
2D54   E1                     POP   HL   
2D55                          ;*Macro unroll:  test "::b 0#", $0101
2D55   31 00 4C               LD   SP,STACK   
2D58   CD 09 0C               CALL   coldInit   
2D5B   CD 44 4A               CALL   execStr   
2D5E   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
2D65   CD 49 0B               CALL   flushBuffer   
2D68   E1                     POP   HL   
2D69   E5                     PUSH   HL   
2D6A   11 01 01               LD   DE,$0101   
2D6D   B7                     OR   A   
2D6E   ED 52                  SBC   HL,DE   
2D70   7D                     LD   A,L   
2D71   B4                     OR   H   
2D72   CA D3 2D               JP   Z,expectM_2850S86   
2D75   CD C1 0B               CALL   printStr   
2D78   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2D85   CD C1 0B               CALL   printStr   
2D88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D97   21 01 01               LD   hl,$0101   
2D9A   E5                     PUSH   hl   
2D9B   E5                     PUSH   hl   
2D9C   CD E0 0C               CALL   run   
2D9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DA7   CD 49 0B               CALL   flushBuffer   
2DAA   CD C1 0B               CALL   printStr   
2DAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DBA   E1                     POP   hl   
2DBB   E5                     PUSH   hl   
2DBC   E5                     PUSH   hl   
2DBD   CD E0 0C               CALL   run   
2DC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DCF   CD 49 0B               CALL   flushBuffer   
2DD2   76                     HALT      
2DD3                EXPECTM_2850S86:      
2DD3   E1                     POP   HL   
2DD4                          ;*Macro unroll:  test ":{2};^", 2
2DD4   31 00 4C               LD   SP,STACK   
2DD7   CD 09 0C               CALL   coldInit   
2DDA   CD 44 4A               CALL   execStr   
2DDD   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
2DE4   CD 49 0B               CALL   flushBuffer   
2DE7   E1                     POP   HL   
2DE8   E5                     PUSH   HL   
2DE9   11 02 00               LD   DE,2   
2DEC   B7                     OR   A   
2DED   ED 52                  SBC   HL,DE   
2DEF   7D                     LD   A,L   
2DF0   B4                     OR   H   
2DF1   CA 52 2E               JP   Z,expectM_2851S87   
2DF4   CD C1 0B               CALL   printStr   
2DF7   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2E04   CD C1 0B               CALL   printStr   
2E07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E16   21 02 00               LD   hl,2   
2E19   E5                     PUSH   hl   
2E1A   E5                     PUSH   hl   
2E1B   CD E0 0C               CALL   run   
2E1E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E26   CD 49 0B               CALL   flushBuffer   
2E29   CD C1 0B               CALL   printStr   
2E2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E39   E1                     POP   hl   
2E3A   E5                     PUSH   hl   
2E3B   E5                     PUSH   hl   
2E3C   CD E0 0C               CALL   run   
2E3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E4E   CD 49 0B               CALL   flushBuffer   
2E51   76                     HALT      
2E52                EXPECTM_2851S87:      
2E52   E1                     POP   HL   
2E53                          ;*Macro unroll:  test ":a{2};^", 2
2E53   31 00 4C               LD   SP,STACK   
2E56   CD 09 0C               CALL   coldInit   
2E59   CD 44 4A               CALL   execStr   
2E5C   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
2E64   CD 49 0B               CALL   flushBuffer   
2E67   E1                     POP   HL   
2E68   E5                     PUSH   HL   
2E69   11 02 00               LD   DE,2   
2E6C   B7                     OR   A   
2E6D   ED 52                  SBC   HL,DE   
2E6F   7D                     LD   A,L   
2E70   B4                     OR   H   
2E71   CA D3 2E               JP   Z,expectM_2852S88   
2E74   CD C1 0B               CALL   printStr   
2E77   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2E85   CD C1 0B               CALL   printStr   
2E88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E97   21 02 00               LD   hl,2   
2E9A   E5                     PUSH   hl   
2E9B   E5                     PUSH   hl   
2E9C   CD E0 0C               CALL   run   
2E9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EA7   CD 49 0B               CALL   flushBuffer   
2EAA   CD C1 0B               CALL   printStr   
2EAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EBA   E1                     POP   hl   
2EBB   E5                     PUSH   hl   
2EBC   E5                     PUSH   hl   
2EBD   CD E0 0C               CALL   run   
2EC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2ECF   CD 49 0B               CALL   flushBuffer   
2ED2   76                     HALT      
2ED3                EXPECTM_2852S88:      
2ED3   E1                     POP   HL   
2ED4                          ;*Macro unroll:  test "5 :a{%a};^", 5
2ED4   31 00 4C               LD   SP,STACK   
2ED7   CD 09 0C               CALL   coldInit   
2EDA   CD 44 4A               CALL   execStr   
2EDD   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
2EE8   CD 49 0B               CALL   flushBuffer   
2EEB   E1                     POP   HL   
2EEC   E5                     PUSH   HL   
2EED   11 05 00               LD   DE,5   
2EF0   B7                     OR   A   
2EF1   ED 52                  SBC   HL,DE   
2EF3   7D                     LD   A,L   
2EF4   B4                     OR   H   
2EF5   CA 5A 2F               JP   Z,expectM_2853S89   
2EF8   CD C1 0B               CALL   printStr   
2EFB   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
2F0C   CD C1 0B               CALL   printStr   
2F0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F1E   21 05 00               LD   hl,5   
2F21   E5                     PUSH   hl   
2F22   E5                     PUSH   hl   
2F23   CD E0 0C               CALL   run   
2F26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F2E   CD 49 0B               CALL   flushBuffer   
2F31   CD C1 0B               CALL   printStr   
2F34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F41   E1                     POP   hl   
2F42   E5                     PUSH   hl   
2F43   E5                     PUSH   hl   
2F44   CD E0 0C               CALL   run   
2F47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F56   CD 49 0B               CALL   flushBuffer   
2F59   76                     HALT      
2F5A                EXPECTM_2853S89:      
2F5A   E1                     POP   HL   
2F5B                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
2F5B   31 00 4C               LD   SP,STACK   
2F5E   CD 09 0C               CALL   coldInit   
2F61   CD 44 4A               CALL   execStr   
2F64   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
2F71   CD 49 0B               CALL   flushBuffer   
2F74   E1                     POP   HL   
2F75   E5                     PUSH   HL   
2F76   11 05 00               LD   DE,5   
2F79   B7                     OR   A   
2F7A   ED 52                  SBC   HL,DE   
2F7C   7D                     LD   A,L   
2F7D   B4                     OR   H   
2F7E   CA E5 2F               JP   Z,expectM_2854S90   
2F81   CD C1 0B               CALL   printStr   
2F84   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
2F97   CD C1 0B               CALL   printStr   
2F9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA9   21 05 00               LD   hl,5   
2FAC   E5                     PUSH   hl   
2FAD   E5                     PUSH   hl   
2FAE   CD E0 0C               CALL   run   
2FB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FB9   CD 49 0B               CALL   flushBuffer   
2FBC   CD C1 0B               CALL   printStr   
2FBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FCC   E1                     POP   hl   
2FCD   E5                     PUSH   hl   
2FCE   E5                     PUSH   hl   
2FCF   CD E0 0C               CALL   run   
2FD2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FE1   CD 49 0B               CALL   flushBuffer   
2FE4   76                     HALT      
2FE5                EXPECTM_2854S90:      
2FE5   E1                     POP   HL   
2FE6                          ;*Macro unroll:  test ":a{{2}^};^", 2
2FE6   31 00 4C               LD   SP,STACK   
2FE9   CD 09 0C               CALL   coldInit   
2FEC   CD 44 4A               CALL   execStr   
2FEF   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
2FFA   CD 49 0B               CALL   flushBuffer   
2FFD   E1                     POP   HL   
2FFE   E5                     PUSH   HL   
2FFF   11 02 00               LD   DE,2   
3002   B7                     OR   A   
3003   ED 52                  SBC   HL,DE   
3005   7D                     LD   A,L   
3006   B4                     OR   H   
3007   CA 6C 30               JP   Z,expectM_2855S91   
300A   CD C1 0B               CALL   printStr   
300D   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
301E   CD C1 0B               CALL   printStr   
3021   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3030   21 02 00               LD   hl,2   
3033   E5                     PUSH   hl   
3034   E5                     PUSH   hl   
3035   CD E0 0C               CALL   run   
3038   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3040   CD 49 0B               CALL   flushBuffer   
3043   CD C1 0B               CALL   printStr   
3046   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3053   E1                     POP   hl   
3054   E5                     PUSH   hl   
3055   E5                     PUSH   hl   
3056   CD E0 0C               CALL   run   
3059   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3068   CD 49 0B               CALL   flushBuffer   
306B   76                     HALT      
306C                EXPECTM_2855S91:      
306C   E1                     POP   HL   
306D                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
306D   31 00 4C               LD   SP,STACK   
3070   CD 09 0C               CALL   coldInit   
3073   CD 44 4A               CALL   execStr   
3076   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
3086   CD 49 0B               CALL   flushBuffer   
3089   E1                     POP   HL   
308A   E5                     PUSH   HL   
308B   11 05 00               LD   DE,5   
308E   B7                     OR   A   
308F   ED 52                  SBC   HL,DE   
3091   7D                     LD   A,L   
3092   B4                     OR   H   
3093   CA FD 30               JP   Z,expectM_2856S92   
3096   CD C1 0B               CALL   printStr   
3099   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
30AF   CD C1 0B               CALL   printStr   
30B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30C1   21 05 00               LD   hl,5   
30C4   E5                     PUSH   hl   
30C5   E5                     PUSH   hl   
30C6   CD E0 0C               CALL   run   
30C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30D1   CD 49 0B               CALL   flushBuffer   
30D4   CD C1 0B               CALL   printStr   
30D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30E4   E1                     POP   hl   
30E5   E5                     PUSH   hl   
30E6   E5                     PUSH   hl   
30E7   CD E0 0C               CALL   run   
30EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30F9   CD 49 0B               CALL   flushBuffer   
30FC   76                     HALT      
30FD                EXPECTM_2856S92:      
30FD   E1                     POP   HL   
30FE                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
30FE   31 00 4C               LD   SP,STACK   
3101   CD 09 0C               CALL   coldInit   
3104   CD 44 4A               CALL   execStr   
3107   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
3118   CD 49 0B               CALL   flushBuffer   
311B   E1                     POP   HL   
311C   E5                     PUSH   HL   
311D   11 01 00               LD   DE,1   
3120   B7                     OR   A   
3121   ED 52                  SBC   HL,DE   
3123   7D                     LD   A,L   
3124   B4                     OR   H   
3125   CA 90 31               JP   Z,expectM_2857S93   
3128   CD C1 0B               CALL   printStr   
312B   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
3142   CD C1 0B               CALL   printStr   
3145   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3154   21 01 00               LD   hl,1   
3157   E5                     PUSH   hl   
3158   E5                     PUSH   hl   
3159   CD E0 0C               CALL   run   
315C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3164   CD 49 0B               CALL   flushBuffer   
3167   CD C1 0B               CALL   printStr   
316A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3177   E1                     POP   hl   
3178   E5                     PUSH   hl   
3179   E5                     PUSH   hl   
317A   CD E0 0C               CALL   run   
317D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
318C   CD 49 0B               CALL   flushBuffer   
318F   76                     HALT      
3190                EXPECTM_2857S93:      
3190   E1                     POP   HL   
3191                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
3191   31 00 4C               LD   SP,STACK   
3194   CD 09 0C               CALL   coldInit   
3197   CD 44 4A               CALL   execStr   
319A   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
31AE   CD 49 0B               CALL   flushBuffer   
31B1   E1                     POP   HL   
31B2   E5                     PUSH   HL   
31B3   11 07 00               LD   DE,7   
31B6   B7                     OR   A   
31B7   ED 52                  SBC   HL,DE   
31B9   7D                     LD   A,L   
31BA   B4                     OR   H   
31BB   CA 29 32               JP   Z,expectM_2858S94   
31BE   CD C1 0B               CALL   printStr   
31C1   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
31DB   CD C1 0B               CALL   printStr   
31DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31ED   21 07 00               LD   hl,7   
31F0   E5                     PUSH   hl   
31F1   E5                     PUSH   hl   
31F2   CD E0 0C               CALL   run   
31F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31FD   CD 49 0B               CALL   flushBuffer   
3200   CD C1 0B               CALL   printStr   
3203   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3210   E1                     POP   hl   
3211   E5                     PUSH   hl   
3212   E5                     PUSH   hl   
3213   CD E0 0C               CALL   run   
3216   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3225   CD 49 0B               CALL   flushBuffer   
3228   76                     HALT      
3229                EXPECTM_2858S94:      
3229   E1                     POP   HL   
322A                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
322A   31 00 4C               LD   SP,STACK   
322D   CD 09 0C               CALL   coldInit   
3230   CD 44 4A               CALL   execStr   
3233   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
3249   CD 49 0B               CALL   flushBuffer   
324C   E1                     POP   HL   
324D   E5                     PUSH   HL   
324E   11 06 00               LD   DE,6   
3251   B7                     OR   A   
3252   ED 52                  SBC   HL,DE   
3254   7D                     LD   A,L   
3255   B4                     OR   H   
3256   CA C6 32               JP   Z,expectM_2859S95   
3259   CD C1 0B               CALL   printStr   
325C   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
3278   CD C1 0B               CALL   printStr   
327B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328A   21 06 00               LD   hl,6   
328D   E5                     PUSH   hl   
328E   E5                     PUSH   hl   
328F   CD E0 0C               CALL   run   
3292   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
329A   CD 49 0B               CALL   flushBuffer   
329D   CD C1 0B               CALL   printStr   
32A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32AD   E1                     POP   hl   
32AE   E5                     PUSH   hl   
32AF   E5                     PUSH   hl   
32B0   CD E0 0C               CALL   run   
32B3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32C2   CD 49 0B               CALL   flushBuffer   
32C5   76                     HALT      
32C6                EXPECTM_2859S95:      
32C6   E1                     POP   HL   
32C7                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
32C7   31 00 4C               LD   SP,STACK   
32CA   CD 09 0C               CALL   coldInit   
32CD   CD 44 4A               CALL   execStr   
32D0   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
32DF   CD 49 0B               CALL   flushBuffer   
32E2   E1                     POP   HL   
32E3   E5                     PUSH   HL   
32E4   11 02 00               LD   DE,2   
32E7   B7                     OR   A   
32E8   ED 52                  SBC   HL,DE   
32EA   7D                     LD   A,L   
32EB   B4                     OR   H   
32EC   CA 55 33               JP   Z,expectM_2860S96   
32EF   CD C1 0B               CALL   printStr   
32F2   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
3307   CD C1 0B               CALL   printStr   
330A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3319   21 02 00               LD   hl,2   
331C   E5                     PUSH   hl   
331D   E5                     PUSH   hl   
331E   CD E0 0C               CALL   run   
3321   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3329   CD 49 0B               CALL   flushBuffer   
332C   CD C1 0B               CALL   printStr   
332F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
333C   E1                     POP   hl   
333D   E5                     PUSH   hl   
333E   E5                     PUSH   hl   
333F   CD E0 0C               CALL   run   
3342   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3351   CD 49 0B               CALL   flushBuffer   
3354   76                     HALT      
3355                EXPECTM_2860S96:      
3355   E1                     POP   HL   
3356                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
3356   31 00 4C               LD   SP,STACK   
3359   CD 09 0C               CALL   coldInit   
335C   CD 44 4A               CALL   execStr   
335F   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
3371   CD 49 0B               CALL   flushBuffer   
3374   E1                     POP   HL   
3375   E5                     PUSH   HL   
3376   11 01 00               LD   DE,1   
3379   B7                     OR   A   
337A   ED 52                  SBC   HL,DE   
337C   7D                     LD   A,L   
337D   B4                     OR   H   
337E   CA EA 33               JP   Z,expectM_2861S97   
3381   CD C1 0B               CALL   printStr   
3384   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
339C   CD C1 0B               CALL   printStr   
339F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33AE   21 01 00               LD   hl,1   
33B1   E5                     PUSH   hl   
33B2   E5                     PUSH   hl   
33B3   CD E0 0C               CALL   run   
33B6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33BE   CD 49 0B               CALL   flushBuffer   
33C1   CD C1 0B               CALL   printStr   
33C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D1   E1                     POP   hl   
33D2   E5                     PUSH   hl   
33D3   E5                     PUSH   hl   
33D4   CD E0 0C               CALL   run   
33D7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33E6   CD 49 0B               CALL   flushBuffer   
33E9   76                     HALT      
33EA                EXPECTM_2861S97:      
33EA   E1                     POP   HL   
33EB                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
33EB   31 00 4C               LD   SP,STACK   
33EE   CD 09 0C               CALL   coldInit   
33F1   CD 44 4A               CALL   execStr   
33F4   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3407   CD 49 0B               CALL   flushBuffer   
340A   E1                     POP   HL   
340B   E5                     PUSH   HL   
340C   11 02 00               LD   DE,2   
340F   B7                     OR   A   
3410   ED 52                  SBC   HL,DE   
3412   7D                     LD   A,L   
3413   B4                     OR   H   
3414   CA 81 34               JP   Z,expectM_2862S98   
3417   CD C1 0B               CALL   printStr   
341A   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3433   CD C1 0B               CALL   printStr   
3436   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3445   21 02 00               LD   hl,2   
3448   E5                     PUSH   hl   
3449   E5                     PUSH   hl   
344A   CD E0 0C               CALL   run   
344D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3455   CD 49 0B               CALL   flushBuffer   
3458   CD C1 0B               CALL   printStr   
345B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3468   E1                     POP   hl   
3469   E5                     PUSH   hl   
346A   E5                     PUSH   hl   
346B   CD E0 0C               CALL   run   
346E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
347D   CD 49 0B               CALL   flushBuffer   
3480   76                     HALT      
3481                EXPECTM_2862S98:      
3481   E1                     POP   HL   
3482                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
3482   31 00 4C               LD   SP,STACK   
3485   CD 09 0C               CALL   coldInit   
3488   CD 44 4A               CALL   execStr   
348B   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
349F   CD 49 0B               CALL   flushBuffer   
34A2   E1                     POP   HL   
34A3   E5                     PUSH   HL   
34A4   11 02 00               LD   DE,2   
34A7   B7                     OR   A   
34A8   ED 52                  SBC   HL,DE   
34AA   7D                     LD   A,L   
34AB   B4                     OR   H   
34AC   CA 1A 35               JP   Z,expectM_2863S99   
34AF   CD C1 0B               CALL   printStr   
34B2   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
34CC   CD C1 0B               CALL   printStr   
34CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34DE   21 02 00               LD   hl,2   
34E1   E5                     PUSH   hl   
34E2   E5                     PUSH   hl   
34E3   CD E0 0C               CALL   run   
34E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34EE   CD 49 0B               CALL   flushBuffer   
34F1   CD C1 0B               CALL   printStr   
34F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3501   E1                     POP   hl   
3502   E5                     PUSH   hl   
3503   E5                     PUSH   hl   
3504   CD E0 0C               CALL   run   
3507   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3516   CD 49 0B               CALL   flushBuffer   
3519   76                     HALT      
351A                EXPECTM_2863S99:      
351A   E1                     POP   HL   
351B                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
351B   31 00 4C               LD   SP,STACK   
351E   CD 09 0C               CALL   coldInit   
3521   CD 44 4A               CALL   execStr   
3524   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3537   CD 49 0B               CALL   flushBuffer   
353A   E1                     POP   HL   
353B   E5                     PUSH   HL   
353C   11 02 00               LD   DE,2   
353F   B7                     OR   A   
3540   ED 52                  SBC   HL,DE   
3542   7D                     LD   A,L   
3543   B4                     OR   H   
3544   CA B1 35               JP   Z,expectM_2864S100   
3547   CD C1 0B               CALL   printStr   
354A   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3563   CD C1 0B               CALL   printStr   
3566   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3575   21 02 00               LD   hl,2   
3578   E5                     PUSH   hl   
3579   E5                     PUSH   hl   
357A   CD E0 0C               CALL   run   
357D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3585   CD 49 0B               CALL   flushBuffer   
3588   CD C1 0B               CALL   printStr   
358B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3598   E1                     POP   hl   
3599   E5                     PUSH   hl   
359A   E5                     PUSH   hl   
359B   CD E0 0C               CALL   run   
359E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35AD   CD 49 0B               CALL   flushBuffer   
35B0   76                     HALT      
35B1                EXPECTM_2864S100:      
35B1   E1                     POP   HL   
35B2                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
35B2   31 00 4C               LD   SP,STACK   
35B5   CD 09 0C               CALL   coldInit   
35B8   CD 44 4A               CALL   execStr   
35BB   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
35D5   CD 49 0B               CALL   flushBuffer   
35D8   E1                     POP   HL   
35D9   E5                     PUSH   HL   
35DA   11 05 00               LD   DE,5   
35DD   B7                     OR   A   
35DE   ED 52                  SBC   HL,DE   
35E0   7D                     LD   A,L   
35E1   B4                     OR   H   
35E2   CA 56 36               JP   Z,expectM_2865S101   
35E5   CD C1 0B               CALL   printStr   
35E8   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
3608   CD C1 0B               CALL   printStr   
360B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
361A   21 05 00               LD   hl,5   
361D   E5                     PUSH   hl   
361E   E5                     PUSH   hl   
361F   CD E0 0C               CALL   run   
3622   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
362A   CD 49 0B               CALL   flushBuffer   
362D   CD C1 0B               CALL   printStr   
3630   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
363D   E1                     POP   hl   
363E   E5                     PUSH   hl   
363F   E5                     PUSH   hl   
3640   CD E0 0C               CALL   run   
3643   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3652   CD 49 0B               CALL   flushBuffer   
3655   76                     HALT      
3656                EXPECTM_2865S101:      
3656   E1                     POP   HL   
3657                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3657   31 00 4C               LD   SP,STACK   
365A   CD 09 0C               CALL   coldInit   
365D   CD 44 4A               CALL   execStr   
3660   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3671   CD 49 0B               CALL   flushBuffer   
3674   E1                     POP   HL   
3675   E5                     PUSH   HL   
3676   11 02 00               LD   DE,2   
3679   B7                     OR   A   
367A   ED 52                  SBC   HL,DE   
367C   7D                     LD   A,L   
367D   B4                     OR   H   
367E   CA E9 36               JP   Z,expectM_2866S102   
3681   CD C1 0B               CALL   printStr   
3684   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
369B   CD C1 0B               CALL   printStr   
369E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36AD   21 02 00               LD   hl,2   
36B0   E5                     PUSH   hl   
36B1   E5                     PUSH   hl   
36B2   CD E0 0C               CALL   run   
36B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36BD   CD 49 0B               CALL   flushBuffer   
36C0   CD C1 0B               CALL   printStr   
36C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36D0   E1                     POP   hl   
36D1   E5                     PUSH   hl   
36D2   E5                     PUSH   hl   
36D3   CD E0 0C               CALL   run   
36D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36E5   CD 49 0B               CALL   flushBuffer   
36E8   76                     HALT      
36E9                EXPECTM_2866S102:      
36E9   E1                     POP   HL   
36EA                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
36EA   31 00 4C               LD   SP,STACK   
36ED   CD 09 0C               CALL   coldInit   
36F0   CD 44 4A               CALL   execStr   
36F3   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
370B   CD 49 0B               CALL   flushBuffer   
370E   E1                     POP   HL   
370F   E5                     PUSH   HL   
3710   11 64 00               LD   DE,100   
3713   B7                     OR   A   
3714   ED 52                  SBC   HL,DE   
3716   7D                     LD   A,L   
3717   B4                     OR   H   
3718   CA 8A 37               JP   Z,expectM_2867S103   
371B   CD C1 0B               CALL   printStr   
371E   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
373C   CD C1 0B               CALL   printStr   
373F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
374E   21 64 00               LD   hl,100   
3751   E5                     PUSH   hl   
3752   E5                     PUSH   hl   
3753   CD E0 0C               CALL   run   
3756   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
375E   CD 49 0B               CALL   flushBuffer   
3761   CD C1 0B               CALL   printStr   
3764   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3771   E1                     POP   hl   
3772   E5                     PUSH   hl   
3773   E5                     PUSH   hl   
3774   CD E0 0C               CALL   run   
3777   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3786   CD 49 0B               CALL   flushBuffer   
3789   76                     HALT      
378A                EXPECTM_2867S103:      
378A   E1                     POP   HL   
378B                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
378B   31 00 4C               LD   SP,STACK   
378E   CD 09 0C               CALL   coldInit   
3791   CD 44 4A               CALL   execStr   
3794   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
37AD   CD 49 0B               CALL   flushBuffer   
37B0   E1                     POP   HL   
37B1   E5                     PUSH   HL   
37B2   11 01 00               LD   DE,1   
37B5   B7                     OR   A   
37B6   ED 52                  SBC   HL,DE   
37B8   7D                     LD   A,L   
37B9   B4                     OR   H   
37BA   CA 2D 38               JP   Z,expectM_2868S104   
37BD   CD C1 0B               CALL   printStr   
37C0   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
37DF   CD C1 0B               CALL   printStr   
37E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37F1   21 01 00               LD   hl,1   
37F4   E5                     PUSH   hl   
37F5   E5                     PUSH   hl   
37F6   CD E0 0C               CALL   run   
37F9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3801   CD 49 0B               CALL   flushBuffer   
3804   CD C1 0B               CALL   printStr   
3807   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3814   E1                     POP   hl   
3815   E5                     PUSH   hl   
3816   E5                     PUSH   hl   
3817   CD E0 0C               CALL   run   
381A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3829   CD 49 0B               CALL   flushBuffer   
382C   76                     HALT      
382D                EXPECTM_2868S104:      
382D   E1                     POP   HL   
382E                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
382E   31 00 4C               LD   SP,STACK   
3831   CD 09 0C               CALL   coldInit   
3834   CD 44 4A               CALL   execStr   
3837   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3851   CD 49 0B               CALL   flushBuffer   
3854   E1                     POP   HL   
3855   E5                     PUSH   HL   
3856   11 02 00               LD   DE,2   
3859   B7                     OR   A   
385A   ED 52                  SBC   HL,DE   
385C   7D                     LD   A,L   
385D   B4                     OR   H   
385E   CA D2 38               JP   Z,expectM_2869S105   
3861   CD C1 0B               CALL   printStr   
3864   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3884   CD C1 0B               CALL   printStr   
3887   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3896   21 02 00               LD   hl,2   
3899   E5                     PUSH   hl   
389A   E5                     PUSH   hl   
389B   CD E0 0C               CALL   run   
389E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38A6   CD 49 0B               CALL   flushBuffer   
38A9   CD C1 0B               CALL   printStr   
38AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38B9   E1                     POP   hl   
38BA   E5                     PUSH   hl   
38BB   E5                     PUSH   hl   
38BC   CD E0 0C               CALL   run   
38BF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38CE   CD 49 0B               CALL   flushBuffer   
38D1   76                     HALT      
38D2                EXPECTM_2869S105:      
38D2   E1                     POP   HL   
38D3                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
38D3   31 00 4C               LD   SP,STACK   
38D6   CD 09 0C               CALL   coldInit   
38D9   CD 44 4A               CALL   execStr   
38DC   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
38FB   CD 49 0B               CALL   flushBuffer   
38FE   E1                     POP   HL   
38FF   E5                     PUSH   HL   
3900   11 0B 00               LD   DE,11   
3903   B7                     OR   A   
3904   ED 52                  SBC   HL,DE   
3906   7D                     LD   A,L   
3907   B4                     OR   H   
3908   CA 81 39               JP   Z,expectM_2870S106   
390B   CD C1 0B               CALL   printStr   
390E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3933   CD C1 0B               CALL   printStr   
3936   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3945   21 0B 00               LD   hl,11   
3948   E5                     PUSH   hl   
3949   E5                     PUSH   hl   
394A   CD E0 0C               CALL   run   
394D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3955   CD 49 0B               CALL   flushBuffer   
3958   CD C1 0B               CALL   printStr   
395B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3968   E1                     POP   hl   
3969   E5                     PUSH   hl   
396A   E5                     PUSH   hl   
396B   CD E0 0C               CALL   run   
396E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
397D   CD 49 0B               CALL   flushBuffer   
3980   76                     HALT      
3981                EXPECTM_2870S106:      
3981   E1                     POP   HL   
3982                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3982   31 00 4C               LD   SP,STACK   
3985   CD 09 0C               CALL   coldInit   
3988   CD 44 4A               CALL   execStr   
398B   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
39AA   CD 49 0B               CALL   flushBuffer   
39AD   E1                     POP   HL   
39AE   E5                     PUSH   HL   
39AF   11 15 00               LD   DE,21   
39B2   B7                     OR   A   
39B3   ED 52                  SBC   HL,DE   
39B5   7D                     LD   A,L   
39B6   B4                     OR   H   
39B7   CA 30 3A               JP   Z,expectM_2871S107   
39BA   CD C1 0B               CALL   printStr   
39BD   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
39E2   CD C1 0B               CALL   printStr   
39E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F4   21 15 00               LD   hl,21   
39F7   E5                     PUSH   hl   
39F8   E5                     PUSH   hl   
39F9   CD E0 0C               CALL   run   
39FC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A04   CD 49 0B               CALL   flushBuffer   
3A07   CD C1 0B               CALL   printStr   
3A0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A17   E1                     POP   hl   
3A18   E5                     PUSH   hl   
3A19   E5                     PUSH   hl   
3A1A   CD E0 0C               CALL   run   
3A1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A2C   CD 49 0B               CALL   flushBuffer   
3A2F   76                     HALT      
3A30                EXPECTM_2871S107:      
3A30   E1                     POP   HL   
3A31                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3A31   31 00 4C               LD   SP,STACK   
3A34   CD 09 0C               CALL   coldInit   
3A37   CD 44 4A               CALL   execStr   
3A3A   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3A48   CD 49 0B               CALL   flushBuffer   
3A4B   E1                     POP   HL   
3A4C   E5                     PUSH   HL   
3A4D   11 14 00               LD   DE,20   
3A50   B7                     OR   A   
3A51   ED 52                  SBC   HL,DE   
3A53   7D                     LD   A,L   
3A54   B4                     OR   H   
3A55   CA BD 3A               JP   Z,expectM_2872S108   
3A58   CD C1 0B               CALL   printStr   
3A5B   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3A6F   CD C1 0B               CALL   printStr   
3A72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A81   21 14 00               LD   hl,20   
3A84   E5                     PUSH   hl   
3A85   E5                     PUSH   hl   
3A86   CD E0 0C               CALL   run   
3A89   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A91   CD 49 0B               CALL   flushBuffer   
3A94   CD C1 0B               CALL   printStr   
3A97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AA4   E1                     POP   hl   
3AA5   E5                     PUSH   hl   
3AA6   E5                     PUSH   hl   
3AA7   CD E0 0C               CALL   run   
3AAA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AB9   CD 49 0B               CALL   flushBuffer   
3ABC   76                     HALT      
3ABD                EXPECTM_2872S108:      
3ABD   E1                     POP   HL   
3ABE                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3ABE   31 00 4C               LD   SP,STACK   
3AC1   CD 09 0C               CALL   coldInit   
3AC4   CD 44 4A               CALL   execStr   
3AC7   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3AD8   CD 49 0B               CALL   flushBuffer   
3ADB   E1                     POP   HL   
3ADC   E5                     PUSH   HL   
3ADD   11 04 00               LD   DE,4   
3AE0   B7                     OR   A   
3AE1   ED 52                  SBC   HL,DE   
3AE3   7D                     LD   A,L   
3AE4   B4                     OR   H   
3AE5   CA 50 3B               JP   Z,expectM_2873S109   
3AE8   CD C1 0B               CALL   printStr   
3AEB   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3B02   CD C1 0B               CALL   printStr   
3B05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B14   21 04 00               LD   hl,4   
3B17   E5                     PUSH   hl   
3B18   E5                     PUSH   hl   
3B19   CD E0 0C               CALL   run   
3B1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B24   CD 49 0B               CALL   flushBuffer   
3B27   CD C1 0B               CALL   printStr   
3B2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B37   E1                     POP   hl   
3B38   E5                     PUSH   hl   
3B39   E5                     PUSH   hl   
3B3A   CD E0 0C               CALL   run   
3B3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B4C   CD 49 0B               CALL   flushBuffer   
3B4F   76                     HALT      
3B50                EXPECTM_2873S109:      
3B50   E1                     POP   HL   
3B51                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3B51   31 00 4C               LD   SP,STACK   
3B54   CD 09 0C               CALL   coldInit   
3B57   CD 44 4A               CALL   execStr   
3B5A   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3B68   CD 49 0B               CALL   flushBuffer   
3B6B   E1                     POP   HL   
3B6C   E5                     PUSH   HL   
3B6D   11 02 00               LD   DE,2   
3B70   B7                     OR   A   
3B71   ED 52                  SBC   HL,DE   
3B73   7D                     LD   A,L   
3B74   B4                     OR   H   
3B75   CA DD 3B               JP   Z,expectM_2874S110   
3B78   CD C1 0B               CALL   printStr   
3B7B   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3B8F   CD C1 0B               CALL   printStr   
3B92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BA1   21 02 00               LD   hl,2   
3BA4   E5                     PUSH   hl   
3BA5   E5                     PUSH   hl   
3BA6   CD E0 0C               CALL   run   
3BA9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BB1   CD 49 0B               CALL   flushBuffer   
3BB4   CD C1 0B               CALL   printStr   
3BB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BC4   E1                     POP   hl   
3BC5   E5                     PUSH   hl   
3BC6   E5                     PUSH   hl   
3BC7   CD E0 0C               CALL   run   
3BCA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BD9   CD 49 0B               CALL   flushBuffer   
3BDC   76                     HALT      
3BDD                EXPECTM_2874S110:      
3BDD   E1                     POP   HL   
3BDE                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3BDE   31 00 4C               LD   SP,STACK   
3BE1   CD 09 0C               CALL   coldInit   
3BE4   CD 44 4A               CALL   execStr   
3BE7   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
3BFB   CD 49 0B               CALL   flushBuffer   
3BFE   E1                     POP   HL   
3BFF   E5                     PUSH   HL   
3C00   11 42 00               LD   DE,66   
3C03   B7                     OR   A   
3C04   ED 52                  SBC   HL,DE   
3C06   7D                     LD   A,L   
3C07   B4                     OR   H   
3C08   CA 76 3C               JP   Z,expectM_2875S111   
3C0B   CD C1 0B               CALL   printStr   
3C0E   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3C28   CD C1 0B               CALL   printStr   
3C2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C3A   21 42 00               LD   hl,66   
3C3D   E5                     PUSH   hl   
3C3E   E5                     PUSH   hl   
3C3F   CD E0 0C               CALL   run   
3C42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C4A   CD 49 0B               CALL   flushBuffer   
3C4D   CD C1 0B               CALL   printStr   
3C50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C5D   E1                     POP   hl   
3C5E   E5                     PUSH   hl   
3C5F   E5                     PUSH   hl   
3C60   CD E0 0C               CALL   run   
3C63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C72   CD 49 0B               CALL   flushBuffer   
3C75   76                     HALT      
3C76                EXPECTM_2875S111:      
3C76   E1                     POP   HL   
3C77                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3C77   31 00 4C               LD   SP,STACK   
3C7A   CD 09 0C               CALL   coldInit   
3C7D   CD 44 4A               CALL   execStr   
3C80   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3C94   CD 49 0B               CALL   flushBuffer   
3C97   E1                     POP   HL   
3C98   E5                     PUSH   HL   
3C99   11 0A 00               LD   DE,10   
3C9C   B7                     OR   A   
3C9D   ED 52                  SBC   HL,DE   
3C9F   7D                     LD   A,L   
3CA0   B4                     OR   H   
3CA1   CA 0F 3D               JP   Z,expectM_2876S112   
3CA4   CD C1 0B               CALL   printStr   
3CA7   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3CC1   CD C1 0B               CALL   printStr   
3CC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CD3   21 0A 00               LD   hl,10   
3CD6   E5                     PUSH   hl   
3CD7   E5                     PUSH   hl   
3CD8   CD E0 0C               CALL   run   
3CDB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CE3   CD 49 0B               CALL   flushBuffer   
3CE6   CD C1 0B               CALL   printStr   
3CE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF6   E1                     POP   hl   
3CF7   E5                     PUSH   hl   
3CF8   E5                     PUSH   hl   
3CF9   CD E0 0C               CALL   run   
3CFC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D0B   CD 49 0B               CALL   flushBuffer   
3D0E   76                     HALT      
3D0F                EXPECTM_2876S112:      
3D0F   E1                     POP   HL   
3D10                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3D10   31 00 4C               LD   SP,STACK   
3D13   CD 09 0C               CALL   coldInit   
3D16   CD 44 4A               CALL   execStr   
3D19   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
3D36   CD 49 0B               CALL   flushBuffer   
3D39   E1                     POP   HL   
3D3A   E5                     PUSH   HL   
3D3B   11 0A 00               LD   DE,10   
3D3E   B7                     OR   A   
3D3F   ED 52                  SBC   HL,DE   
3D41   7D                     LD   A,L   
3D42   B4                     OR   H   
3D43   CA BA 3D               JP   Z,expectM_2877S113   
3D46   CD C1 0B               CALL   printStr   
3D49   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3D6C   CD C1 0B               CALL   printStr   
3D6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D7E   21 0A 00               LD   hl,10   
3D81   E5                     PUSH   hl   
3D82   E5                     PUSH   hl   
3D83   CD E0 0C               CALL   run   
3D86   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D8E   CD 49 0B               CALL   flushBuffer   
3D91   CD C1 0B               CALL   printStr   
3D94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DA1   E1                     POP   hl   
3DA2   E5                     PUSH   hl   
3DA3   E5                     PUSH   hl   
3DA4   CD E0 0C               CALL   run   
3DA7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DB6   CD 49 0B               CALL   flushBuffer   
3DB9   76                     HALT      
3DBA                EXPECTM_2877S113:      
3DBA   E1                     POP   HL   
3DBB                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3DBB   31 00 4C               LD   SP,STACK   
3DBE   CD 09 0C               CALL   coldInit   
3DC1   CD 44 4A               CALL   execStr   
3DC4   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3DE5   CD 49 0B               CALL   flushBuffer   
3DE8   E1                     POP   HL   
3DE9   E5                     PUSH   HL   
3DEA   11 0A 00               LD   DE,10   
3DED   B7                     OR   A   
3DEE   ED 52                  SBC   HL,DE   
3DF0   7D                     LD   A,L   
3DF1   B4                     OR   H   
3DF2   CA 6D 3E               JP   Z,expectM_2878S114   
3DF5   CD C1 0B               CALL   printStr   
3DF8   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3E1F   CD C1 0B               CALL   printStr   
3E22   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E31   21 0A 00               LD   hl,10   
3E34   E5                     PUSH   hl   
3E35   E5                     PUSH   hl   
3E36   CD E0 0C               CALL   run   
3E39   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E41   CD 49 0B               CALL   flushBuffer   
3E44   CD C1 0B               CALL   printStr   
3E47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E54   E1                     POP   hl   
3E55   E5                     PUSH   hl   
3E56   E5                     PUSH   hl   
3E57   CD E0 0C               CALL   run   
3E5A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E69   CD 49 0B               CALL   flushBuffer   
3E6C   76                     HALT      
3E6D                EXPECTM_2878S114:      
3E6D   E1                     POP   HL   
3E6E                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3E6E   31 00 4C               LD   SP,STACK   
3E71   CD 09 0C               CALL   coldInit   
3E74   CD 44 4A               CALL   execStr   
3E77   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3E98   CD 49 0B               CALL   flushBuffer   
3E9B   E1                     POP   HL   
3E9C   E5                     PUSH   HL   
3E9D   11 14 00               LD   DE,20   
3EA0   B7                     OR   A   
3EA1   ED 52                  SBC   HL,DE   
3EA3   7D                     LD   A,L   
3EA4   B4                     OR   H   
3EA5   CA 20 3F               JP   Z,expectM_2879S115   
3EA8   CD C1 0B               CALL   printStr   
3EAB   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3ED2   CD C1 0B               CALL   printStr   
3ED5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EE4   21 14 00               LD   hl,20   
3EE7   E5                     PUSH   hl   
3EE8   E5                     PUSH   hl   
3EE9   CD E0 0C               CALL   run   
3EEC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EF4   CD 49 0B               CALL   flushBuffer   
3EF7   CD C1 0B               CALL   printStr   
3EFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F07   E1                     POP   hl   
3F08   E5                     PUSH   hl   
3F09   E5                     PUSH   hl   
3F0A   CD E0 0C               CALL   run   
3F0D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F1C   CD 49 0B               CALL   flushBuffer   
3F1F   76                     HALT      
3F20                EXPECTM_2879S115:      
3F20   E1                     POP   HL   
3F21                          ;*Macro unroll:  test "5 [4] :a {%a}; /pa ^", 4
3F21   31 00 4C               LD   SP,STACK   
3F24   CD 09 0C               CALL   coldInit   
3F27   CD 44 4A               CALL   execStr   
3F2A   35 20 5B 34 5D 20 3A 61 20 7B 25 61 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :a {%a}; /pa ^",0   
3F3F   CD 49 0B               CALL   flushBuffer   
3F42   E1                     POP   HL   
3F43   E5                     PUSH   HL   
3F44   11 04 00               LD   DE,4   
3F47   B7                     OR   A   
3F48   ED 52                  SBC   HL,DE   
3F4A   7D                     LD   A,L   
3F4B   B4                     OR   H   
3F4C   CA BB 3F               JP   Z,expectM_2880S116   
3F4F   CD C1 0B               CALL   printStr   
3F52   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 20 7B 25 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a {%a}; /pa ^"   
3F6D   CD C1 0B               CALL   printStr   
3F70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F7F   21 04 00               LD   hl,4   
3F82   E5                     PUSH   hl   
3F83   E5                     PUSH   hl   
3F84   CD E0 0C               CALL   run   
3F87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F8F   CD 49 0B               CALL   flushBuffer   
3F92   CD C1 0B               CALL   printStr   
3F95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA2   E1                     POP   hl   
3FA3   E5                     PUSH   hl   
3FA4   E5                     PUSH   hl   
3FA5   CD E0 0C               CALL   run   
3FA8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FB7   CD 49 0B               CALL   flushBuffer   
3FBA   76                     HALT      
3FBB                EXPECTM_2880S116:      
3FBB   E1                     POP   HL   
3FBC                          ;*Macro unroll:  test "5 [4] :ab {%a %b +}; /pa ^", 9
3FBC   31 00 4C               LD   SP,STACK   
3FBF   CD 09 0C               CALL   coldInit   
3FC2   CD 44 4A               CALL   execStr   
3FC5   35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :ab {%a %b +}; /pa ^",0   
3FE0   CD 49 0B               CALL   flushBuffer   
3FE3   E1                     POP   HL   
3FE4   E5                     PUSH   HL   
3FE5   11 09 00               LD   DE,9   
3FE8   B7                     OR   A   
3FE9   ED 52                  SBC   HL,DE   
3FEB   7D                     LD   A,L   
3FEC   B4                     OR   H   
3FED   CA 62 40               JP   Z,expectM_2881S117   
3FF0   CD C1 0B               CALL   printStr   
3FF3   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab {%a %b +}; /pa ^"   
4014   CD C1 0B               CALL   printStr   
4017   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4026   21 09 00               LD   hl,9   
4029   E5                     PUSH   hl   
402A   E5                     PUSH   hl   
402B   CD E0 0C               CALL   run   
402E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4036   CD 49 0B               CALL   flushBuffer   
4039   CD C1 0B               CALL   printStr   
403C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4049   E1                     POP   hl   
404A   E5                     PUSH   hl   
404B   E5                     PUSH   hl   
404C   CD E0 0C               CALL   run   
404F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
405E   CD 49 0B               CALL   flushBuffer   
4061   76                     HALT      
4062                EXPECTM_2881S117:      
4062   E1                     POP   HL   
4063                          ;*Macro unroll:  test "5 [4] :ab {%a %b -}; /pa ^", 1
4063   31 00 4C               LD   SP,STACK   
4066   CD 09 0C               CALL   coldInit   
4069   CD 44 4A               CALL   execStr   
406C   35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :ab {%a %b -}; /pa ^",0   
4087   CD 49 0B               CALL   flushBuffer   
408A   E1                     POP   HL   
408B   E5                     PUSH   HL   
408C   11 01 00               LD   DE,1   
408F   B7                     OR   A   
4090   ED 52                  SBC   HL,DE   
4092   7D                     LD   A,L   
4093   B4                     OR   H   
4094   CA 09 41               JP   Z,expectM_2882S118   
4097   CD C1 0B               CALL   printStr   
409A   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab {%a %b -}; /pa ^"   
40BB   CD C1 0B               CALL   printStr   
40BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40CD   21 01 00               LD   hl,1   
40D0   E5                     PUSH   hl   
40D1   E5                     PUSH   hl   
40D2   CD E0 0C               CALL   run   
40D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40DD   CD 49 0B               CALL   flushBuffer   
40E0   CD C1 0B               CALL   printStr   
40E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40F0   E1                     POP   hl   
40F1   E5                     PUSH   hl   
40F2   E5                     PUSH   hl   
40F3   CD E0 0C               CALL   run   
40F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4105   CD 49 0B               CALL   flushBuffer   
4108   76                     HALT      
4109                EXPECTM_2882S118:      
4109   E1                     POP   HL   
410A                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
410A   31 00 4C               LD   SP,STACK   
410D   CD 09 0C               CALL   coldInit   
4110   CD 44 4A               CALL   execStr   
4113   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
412B   CD 49 0B               CALL   flushBuffer   
412E   E1                     POP   HL   
412F   E5                     PUSH   HL   
4130   11 06 00               LD   DE,6   
4133   B7                     OR   A   
4134   ED 52                  SBC   HL,DE   
4136   7D                     LD   A,L   
4137   B4                     OR   H   
4138   CA AA 41               JP   Z,expectM_2883S119   
413B   CD C1 0B               CALL   printStr   
413E   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
415C   CD C1 0B               CALL   printStr   
415F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
416E   21 06 00               LD   hl,6   
4171   E5                     PUSH   hl   
4172   E5                     PUSH   hl   
4173   CD E0 0C               CALL   run   
4176   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
417E   CD 49 0B               CALL   flushBuffer   
4181   CD C1 0B               CALL   printStr   
4184   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4191   E1                     POP   hl   
4192   E5                     PUSH   hl   
4193   E5                     PUSH   hl   
4194   CD E0 0C               CALL   run   
4197   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41A6   CD 49 0B               CALL   flushBuffer   
41A9   76                     HALT      
41AA                EXPECTM_2883S119:      
41AA   E1                     POP   HL   
41AB                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
41AB   31 00 4C               LD   SP,STACK   
41AE   CD 09 0C               CALL   coldInit   
41B1   CD 44 4A               CALL   execStr   
41B4   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
41CF   CD 49 0B               CALL   flushBuffer   
41D2   E1                     POP   HL   
41D3   E5                     PUSH   HL   
41D4   11 02 00               LD   DE,2   
41D7   B7                     OR   A   
41D8   ED 52                  SBC   HL,DE   
41DA   7D                     LD   A,L   
41DB   B4                     OR   H   
41DC   CA 51 42               JP   Z,expectM_2884S120   
41DF   CD C1 0B               CALL   printStr   
41E2   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4203   CD C1 0B               CALL   printStr   
4206   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4215   21 02 00               LD   hl,2   
4218   E5                     PUSH   hl   
4219   E5                     PUSH   hl   
421A   CD E0 0C               CALL   run   
421D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4225   CD 49 0B               CALL   flushBuffer   
4228   CD C1 0B               CALL   printStr   
422B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4238   E1                     POP   hl   
4239   E5                     PUSH   hl   
423A   E5                     PUSH   hl   
423B   CD E0 0C               CALL   run   
423E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
424D   CD 49 0B               CALL   flushBuffer   
4250   76                     HALT      
4251                EXPECTM_2884S120:      
4251   E1                     POP   HL   
4252                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4252   31 00 4C               LD   SP,STACK   
4255   CD 09 0C               CALL   coldInit   
4258   CD 44 4A               CALL   execStr   
425B   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4281   CD 49 0B               CALL   flushBuffer   
4284   E1                     POP   HL   
4285   E5                     PUSH   HL   
4286   11 0A 00               LD   DE,10   
4289   B7                     OR   A   
428A   ED 52                  SBC   HL,DE   
428C   7D                     LD   A,L   
428D   B4                     OR   H   
428E   CA 0E 43               JP   Z,expectM_2885S121   
4291   CD C1 0B               CALL   printStr   
4294   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
42C0   CD C1 0B               CALL   printStr   
42C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D2   21 0A 00               LD   hl,10   
42D5   E5                     PUSH   hl   
42D6   E5                     PUSH   hl   
42D7   CD E0 0C               CALL   run   
42DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42E2   CD 49 0B               CALL   flushBuffer   
42E5   CD C1 0B               CALL   printStr   
42E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F5   E1                     POP   hl   
42F6   E5                     PUSH   hl   
42F7   E5                     PUSH   hl   
42F8   CD E0 0C               CALL   run   
42FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
430A   CD 49 0B               CALL   flushBuffer   
430D   76                     HALT      
430E                EXPECTM_2885S121:      
430E   E1                     POP   HL   
430F                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
430F   31 00 4C               LD   SP,STACK   
4312   CD 09 0C               CALL   coldInit   
4315   CD 44 4A               CALL   execStr   
4318   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
4345   CD 49 0B               CALL   flushBuffer   
4348   E1                     POP   HL   
4349   E5                     PUSH   HL   
434A   11 06 00               LD   DE,6   
434D   B7                     OR   A   
434E   ED 52                  SBC   HL,DE   
4350   7D                     LD   A,L   
4351   B4                     OR   H   
4352   CA D9 43               JP   Z,expectM_2886S122   
4355   CD C1 0B               CALL   printStr   
4358   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
438B   CD C1 0B               CALL   printStr   
438E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
439D   21 06 00               LD   hl,6   
43A0   E5                     PUSH   hl   
43A1   E5                     PUSH   hl   
43A2   CD E0 0C               CALL   run   
43A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43AD   CD 49 0B               CALL   flushBuffer   
43B0   CD C1 0B               CALL   printStr   
43B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43C0   E1                     POP   hl   
43C1   E5                     PUSH   hl   
43C2   E5                     PUSH   hl   
43C3   CD E0 0C               CALL   run   
43C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43D5   CD 49 0B               CALL   flushBuffer   
43D8   76                     HALT      
43D9                EXPECTM_2886S122:      
43D9   E1                     POP   HL   
43DA                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
43DA   31 00 4C               LD   SP,STACK   
43DD   CD 09 0C               CALL   coldInit   
43E0   CD 44 4A               CALL   execStr   
43E3   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
43EF   CD 49 0B               CALL   flushBuffer   
43F2   E1                     POP   HL   
43F3   E5                     PUSH   HL   
43F4   11 00 00               LD   DE,NUL   
43F7   B7                     OR   A   
43F8   ED 52                  SBC   HL,DE   
43FA   7D                     LD   A,L   
43FB   B4                     OR   H   
43FC   CA 62 44               JP   Z,expectM_2887S123   
43FF   CD C1 0B               CALL   printStr   
4402   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4414   CD C1 0B               CALL   printStr   
4417   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4426   21 00 00               LD   hl,NUL   
4429   E5                     PUSH   hl   
442A   E5                     PUSH   hl   
442B   CD E0 0C               CALL   run   
442E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4436   CD 49 0B               CALL   flushBuffer   
4439   CD C1 0B               CALL   printStr   
443C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4449   E1                     POP   hl   
444A   E5                     PUSH   hl   
444B   E5                     PUSH   hl   
444C   CD E0 0C               CALL   run   
444F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
445E   CD 49 0B               CALL   flushBuffer   
4461   76                     HALT      
4462                EXPECTM_2887S123:      
4462   E1                     POP   HL   
4463                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4463   31 00 4C               LD   SP,STACK   
4466   CD 09 0C               CALL   coldInit   
4469   CD 44 4A               CALL   execStr   
446C   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4478   CD 49 0B               CALL   flushBuffer   
447B   E1                     POP   HL   
447C   E5                     PUSH   HL   
447D   11 00 00               LD   DE,NUL   
4480   B7                     OR   A   
4481   ED 52                  SBC   HL,DE   
4483   7D                     LD   A,L   
4484   B4                     OR   H   
4485   CA EB 44               JP   Z,expectM_2888S124   
4488   CD C1 0B               CALL   printStr   
448B   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
449D   CD C1 0B               CALL   printStr   
44A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44AF   21 00 00               LD   hl,NUL   
44B2   E5                     PUSH   hl   
44B3   E5                     PUSH   hl   
44B4   CD E0 0C               CALL   run   
44B7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44BF   CD 49 0B               CALL   flushBuffer   
44C2   CD C1 0B               CALL   printStr   
44C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44D2   E1                     POP   hl   
44D3   E5                     PUSH   hl   
44D4   E5                     PUSH   hl   
44D5   CD E0 0C               CALL   run   
44D8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44E7   CD 49 0B               CALL   flushBuffer   
44EA   76                     HALT      
44EB                EXPECTM_2888S124:      
44EB   E1                     POP   HL   
44EC                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
44EC   31 00 4C               LD   SP,STACK   
44EF   CD 09 0C               CALL   coldInit   
44F2   CD 44 4A               CALL   execStr   
44F5   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
4501   CD 49 0B               CALL   flushBuffer   
4504   E1                     POP   HL   
4505   E5                     PUSH   HL   
4506   11 00 00               LD   DE,NUL   
4509   B7                     OR   A   
450A   ED 52                  SBC   HL,DE   
450C   7D                     LD   A,L   
450D   B4                     OR   H   
450E   CA 74 45               JP   Z,expectM_2889S125   
4511   CD C1 0B               CALL   printStr   
4514   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4526   CD C1 0B               CALL   printStr   
4529   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4538   21 00 00               LD   hl,NUL   
453B   E5                     PUSH   hl   
453C   E5                     PUSH   hl   
453D   CD E0 0C               CALL   run   
4540   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4548   CD 49 0B               CALL   flushBuffer   
454B   CD C1 0B               CALL   printStr   
454E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
455B   E1                     POP   hl   
455C   E5                     PUSH   hl   
455D   E5                     PUSH   hl   
455E   CD E0 0C               CALL   run   
4561   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4570   CD 49 0B               CALL   flushBuffer   
4573   76                     HALT      
4574                EXPECTM_2889S125:      
4574   E1                     POP   HL   
4575                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4575   31 00 4C               LD   SP,STACK   
4578   CD 09 0C               CALL   coldInit   
457B   CD 44 4A               CALL   execStr   
457E   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
458A   CD 49 0B               CALL   flushBuffer   
458D   E1                     POP   HL   
458E   E5                     PUSH   HL   
458F   11 00 00               LD   DE,NUL   
4592   B7                     OR   A   
4593   ED 52                  SBC   HL,DE   
4595   7D                     LD   A,L   
4596   B4                     OR   H   
4597   CA FD 45               JP   Z,expectM_2890S126   
459A   CD C1 0B               CALL   printStr   
459D   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
45AF   CD C1 0B               CALL   printStr   
45B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45C1   21 00 00               LD   hl,NUL   
45C4   E5                     PUSH   hl   
45C5   E5                     PUSH   hl   
45C6   CD E0 0C               CALL   run   
45C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45D1   CD 49 0B               CALL   flushBuffer   
45D4   CD C1 0B               CALL   printStr   
45D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45E4   E1                     POP   hl   
45E5   E5                     PUSH   hl   
45E6   E5                     PUSH   hl   
45E7   CD E0 0C               CALL   run   
45EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45F9   CD 49 0B               CALL   flushBuffer   
45FC   76                     HALT      
45FD                EXPECTM_2890S126:      
45FD   E1                     POP   HL   
45FE                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
45FE   31 00 4C               LD   SP,STACK   
4601   CD 09 0C               CALL   coldInit   
4604   CD 44 4A               CALL   execStr   
4607   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
460F   CD 49 0B               CALL   flushBuffer   
4612   E1                     POP   HL   
4613   E5                     PUSH   HL   
4614   11 66 4E               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4617   B7                     OR   A   
4618   ED 52                  SBC   HL,DE   
461A   7D                     LD   A,L   
461B   B4                     OR   H   
461C   CA 7E 46               JP   Z,expectM_2891S127   
461F   CD C1 0B               CALL   printStr   
4622   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4630   CD C1 0B               CALL   printStr   
4633   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4642   21 66 4E               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4645   E5                     PUSH   hl   
4646   E5                     PUSH   hl   
4647   CD E0 0C               CALL   run   
464A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4652   CD 49 0B               CALL   flushBuffer   
4655   CD C1 0B               CALL   printStr   
4658   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4665   E1                     POP   hl   
4666   E5                     PUSH   hl   
4667   E5                     PUSH   hl   
4668   CD E0 0C               CALL   run   
466B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
467A   CD 49 0B               CALL   flushBuffer   
467D   76                     HALT      
467E                EXPECTM_2891S127:      
467E   E1                     POP   HL   
467F                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
467F   31 00 4C               LD   SP,STACK   
4682   CD 09 0C               CALL   coldInit   
4685   CD 44 4A               CALL   execStr   
4688   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4690   CD 49 0B               CALL   flushBuffer   
4693   E1                     POP   HL   
4694   E5                     PUSH   HL   
4695   11 34 4E               LD   DE,VARS + ("Z"-"A"+1)*2   
4698   B7                     OR   A   
4699   ED 52                  SBC   HL,DE   
469B   7D                     LD   A,L   
469C   B4                     OR   H   
469D   CA FF 46               JP   Z,expectM_2892S128   
46A0   CD C1 0B               CALL   printStr   
46A3   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
46B1   CD C1 0B               CALL   printStr   
46B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46C3   21 34 4E               LD   hl,VARS + ("Z"-"A"+1)*2   
46C6   E5                     PUSH   hl   
46C7   E5                     PUSH   hl   
46C8   CD E0 0C               CALL   run   
46CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46D3   CD 49 0B               CALL   flushBuffer   
46D6   CD C1 0B               CALL   printStr   
46D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46E6   E1                     POP   hl   
46E7   E5                     PUSH   hl   
46E8   E5                     PUSH   hl   
46E9   CD E0 0C               CALL   run   
46EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46FB   CD 49 0B               CALL   flushBuffer   
46FE   76                     HALT      
46FF                EXPECTM_2892S128:      
46FF   E1                     POP   HL   
4700                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4700   31 00 4C               LD   SP,STACK   
4703   CD 09 0C               CALL   coldInit   
4706   CD 44 4A               CALL   execStr   
4709   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4711   CD 49 0B               CALL   flushBuffer   
4714   E1                     POP   HL   
4715   E5                     PUSH   HL   
4716   11 32 4E               LD   DE,VARS + ("Z"-"A")*2   
4719   B7                     OR   A   
471A   ED 52                  SBC   HL,DE   
471C   7D                     LD   A,L   
471D   B4                     OR   H   
471E   CA 80 47               JP   Z,expectM_2893S129   
4721   CD C1 0B               CALL   printStr   
4724   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4732   CD C1 0B               CALL   printStr   
4735   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4744   21 32 4E               LD   hl,VARS + ("Z"-"A")*2   
4747   E5                     PUSH   hl   
4748   E5                     PUSH   hl   
4749   CD E0 0C               CALL   run   
474C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4754   CD 49 0B               CALL   flushBuffer   
4757   CD C1 0B               CALL   printStr   
475A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4767   E1                     POP   hl   
4768   E5                     PUSH   hl   
4769   E5                     PUSH   hl   
476A   CD E0 0C               CALL   run   
476D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
477C   CD 49 0B               CALL   flushBuffer   
477F   76                     HALT      
4780                EXPECTM_2893S129:      
4780   E1                     POP   HL   
4781                          ;*Macro unroll:  test "'A' /ad", VARS
4781   31 00 4C               LD   SP,STACK   
4784   CD 09 0C               CALL   coldInit   
4787   CD 44 4A               CALL   execStr   
478A   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4792   CD 49 0B               CALL   flushBuffer   
4795   E1                     POP   HL   
4796   E5                     PUSH   HL   
4797   11 00 4E               LD   DE,VARS   
479A   B7                     OR   A   
479B   ED 52                  SBC   HL,DE   
479D   7D                     LD   A,L   
479E   B4                     OR   H   
479F   CA 01 48               JP   Z,expectM_2894S130   
47A2   CD C1 0B               CALL   printStr   
47A5   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
47B3   CD C1 0B               CALL   printStr   
47B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47C5   21 00 4E               LD   hl,VARS   
47C8   E5                     PUSH   hl   
47C9   E5                     PUSH   hl   
47CA   CD E0 0C               CALL   run   
47CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47D5   CD 49 0B               CALL   flushBuffer   
47D8   CD C1 0B               CALL   printStr   
47DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47E8   E1                     POP   hl   
47E9   E5                     PUSH   hl   
47EA   E5                     PUSH   hl   
47EB   CD E0 0C               CALL   run   
47EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47FD   CD 49 0B               CALL   flushBuffer   
4800   76                     HALT      
4801                EXPECTM_2894S130:      
4801   E1                     POP   HL   
4802                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4802   31 00 4C               LD   SP,STACK   
4805   CD 09 0C               CALL   coldInit   
4808   CD 44 4A               CALL   execStr   
480B   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
4818   CD 49 0B               CALL   flushBuffer   
481B   E1                     POP   HL   
481C   E5                     PUSH   HL   
481D   11 2D 00               LD   DE,$2D   
4820   B7                     OR   A   
4821   ED 52                  SBC   HL,DE   
4823   7D                     LD   A,L   
4824   B4                     OR   H   
4825   CA 8C 48               JP   Z,expectM_2895S131   
4828   CD C1 0B               CALL   printStr   
482B   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
483E   CD C1 0B               CALL   printStr   
4841   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4850   21 2D 00               LD   hl,$2D   
4853   E5                     PUSH   hl   
4854   E5                     PUSH   hl   
4855   CD E0 0C               CALL   run   
4858   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4860   CD 49 0B               CALL   flushBuffer   
4863   CD C1 0B               CALL   printStr   
4866   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4873   E1                     POP   hl   
4874   E5                     PUSH   hl   
4875   E5                     PUSH   hl   
4876   CD E0 0C               CALL   run   
4879   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4888   CD 49 0B               CALL   flushBuffer   
488B   76                     HALT      
488C                EXPECTM_2895S131:      
488C   E1                     POP   HL   
488D                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
488D   31 00 4C               LD   SP,STACK   
4890   CD 09 0C               CALL   coldInit   
4893   CD 44 4A               CALL   execStr   
4896   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
48A5   CD 49 0B               CALL   flushBuffer   
48A8   E1                     POP   HL   
48A9   E5                     PUSH   HL   
48AA   11 41 00               LD   DE,65   
48AD   B7                     OR   A   
48AE   ED 52                  SBC   HL,DE   
48B0   7D                     LD   A,L   
48B1   B4                     OR   H   
48B2   CA 1B 49               JP   Z,expectM_2896S132   
48B5   CD C1 0B               CALL   printStr   
48B8   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
48CD   CD C1 0B               CALL   printStr   
48D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48DF   21 41 00               LD   hl,65   
48E2   E5                     PUSH   hl   
48E3   E5                     PUSH   hl   
48E4   CD E0 0C               CALL   run   
48E7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48EF   CD 49 0B               CALL   flushBuffer   
48F2   CD C1 0B               CALL   printStr   
48F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4902   E1                     POP   hl   
4903   E5                     PUSH   hl   
4904   E5                     PUSH   hl   
4905   CD E0 0C               CALL   run   
4908   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4917   CD 49 0B               CALL   flushBuffer   
491A   76                     HALT      
491B                EXPECTM_2896S132:      
491B   E1                     POP   HL   
491C                          ;*Macro unroll:  test "123. /c/vB 1#", $32
491C   31 00 4C               LD   SP,STACK   
491F   CD 09 0C               CALL   coldInit   
4922   CD 44 4A               CALL   execStr   
4925   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
4933   CD 49 0B               CALL   flushBuffer   
4936   E1                     POP   HL   
4937   E5                     PUSH   HL   
4938   11 32 00               LD   DE,$32   
493B   B7                     OR   A   
493C   ED 52                  SBC   HL,DE   
493E   7D                     LD   A,L   
493F   B4                     OR   H   
4940   CA A8 49               JP   Z,expectM_2897S133   
4943   CD C1 0B               CALL   printStr   
4946   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
495A   CD C1 0B               CALL   printStr   
495D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
496C   21 32 00               LD   hl,$32   
496F   E5                     PUSH   hl   
4970   E5                     PUSH   hl   
4971   CD E0 0C               CALL   run   
4974   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
497C   CD 49 0B               CALL   flushBuffer   
497F   CD C1 0B               CALL   printStr   
4982   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
498F   E1                     POP   hl   
4990   E5                     PUSH   hl   
4991   E5                     PUSH   hl   
4992   CD E0 0C               CALL   run   
4995   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49A4   CD 49 0B               CALL   flushBuffer   
49A7   76                     HALT      
49A8                EXPECTM_2897S133:      
49A8   E1                     POP   HL   
49A9                          ;*Macro unroll:  test ":a{%a}/px F=1F^", 1
49A9   31 00 4C               LD   SP,STACK   
49AC   CD 09 0C               CALL   coldInit   
49AF   CD 44 4A               CALL   execStr   
49B2   3A 61 7B 25 61 7D 2F 70 78 20 46 3D 31 46 5E 00 DB   ":a{%a}/px F=1F^",0   
49C2   CD 49 0B               CALL   flushBuffer   
49C5   E1                     POP   HL   
49C6   E5                     PUSH   HL   
49C7   11 01 00               LD   DE,1   
49CA   B7                     OR   A   
49CB   ED 52                  SBC   HL,DE   
49CD   7D                     LD   A,L   
49CE   B4                     OR   H   
49CF   CA 39 4A               JP   Z,expectM_2898S135   
49D2   CD C1 0B               CALL   printStr   
49D5   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 2F 70 78 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}/px F=1F^"   
49EB   CD C1 0B               CALL   printStr   
49EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49FD   21 01 00               LD   hl,1   
4A00   E5                     PUSH   hl   
4A01   E5                     PUSH   hl   
4A02   CD E0 0C               CALL   run   
4A05   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A0D   CD 49 0B               CALL   flushBuffer   
4A10   CD C1 0B               CALL   printStr   
4A13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A20   E1                     POP   hl   
4A21   E5                     PUSH   hl   
4A22   E5                     PUSH   hl   
4A23   CD E0 0C               CALL   run   
4A26   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A35   CD 49 0B               CALL   flushBuffer   
4A38   76                     HALT      
4A39                EXPECTM_2898S135:      
4A39   E1                     POP   HL   
4A3A                             ; 
4A3A   CD C1 0B               CALL   printStr   
4A3D   44 6F 6E 65 21 00      .CSTR   "Done!"   
4A43   76                     HALT      
4A44                             ; executes a null teminated string (null executes exit_)
4A44                             ; the string should be immedaitely following the call
4A44                EXECSTR:      ; create a root stack frame
4A44   C1                     POP   bc   ; bc = code*
4A45   0B                     DEC   bc   ; dec to prepare for next routine
4A46   11 00 00               LD   de,0   
4A49   D5                     PUSH   de   ; push fake IP
4A4A   D5                     PUSH   de   ; push null arg_list*
4A4B   D5                     PUSH   de   ; push null first_arg*
4A4C   D5                     PUSH   de   ; push fake BP
4A4D   DD E9                  JP   (ix)   
4A4F                STKSIZE:   EQU   $100   ; Stack size
4A4F                TIBSIZE:   EQU   $100   ; 256 bytes
4A4F                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4A4F                          ALIGN   $100   
4B00                          DS   STKSIZE   
4C00                STACK:       
4C00                          ALIGN   $100   
4C00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                VARS:        
4E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4ED0                RESTARTS:      
4ED0                RST08:    DS   2   
4ED2                RST10:    DS   2   
4ED4                RST18:    DS   2   
4ED6                RST20:    DS   2   
4ED8                RST28:    DS   2   
4EDA                RST30:    DS   2   ; 
4EDC                BAUD:     DS   2   ; 
4EDE                INTVEC:   DS   2   ; 
4EE0                NMIVEC:   DS   2   ; 
4EE2                GETCVEC:   DS   2   ; 
4EE4                PUTCVEC:   DS   2   ; 
4EE6                SYSVARS:      
4EE6                             ; initialised sys variables (preserved)
4EE6                VDATAWIDTH:   DS   2   ; 
4EE8                VNUMBASE:   DS   2   ; 
4EEA                VTIBPTR:   DS   2   ; 
4EEC                VBUFPTR:   DS   2   ; 
4EEE                VNEXT:    DS   2   ; 
4EF0                VHEAPPTR:   DS   2   ; 
4EF2                             ; uninitialised sys variables (preserved)
4EF2                VPOINTER:   DS   2   ; 
4EF4                VREMAIN:   DS   2   ; 
4EF6                VSAVEDIP:   DS   2   ; 
4EF8                VSAVEDSP:   DS   2   ; 
4EFA                VSAVEDNEXT:   DS   2   ; 
4EFC                VSAVEDBP:   DS   2   ; 
4EFE                VCHECKSUM:   DS   2   ; 
4F00                             ; uninitialised sys variables (unpreserved)
4F00                VTEMP1:   DS   2   ; 
4F02                VTEMP2:   DS   2   ; 
4F04                VLASTDEF:   DS   2   ; 
4F06                VHASHSTR:   DS   2   ; 
4F08                TBPTR:    DS   2   ; reserved for tests
4F0A                TITLEBUF:   DS   20   
4F1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B3F DEFINED AT LINE 1861 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 189 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 192 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 194 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 221 IN MAIN.asm
DQUOTE_:            034A DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                035F DEFINED AT LINE 240 IN MAIN.asm
LT_:                036A DEFINED AT LINE 248 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 260 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 383 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 398 IN MAIN.asm
ARRAYEND1:          0431 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRAYEND2:          0441 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARRAYEND3:          0446 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
HASH:               0465 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
ARRAYINDEX:         0465 DEFINED AT LINE 454 IN MAIN.asm
ARRAYINDEX0:        046D DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX1:        046E DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
ARRAYINDEX2:        047A DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ASSIGN:             047D DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            047F DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
ASSIGNX:            0480 DEFINED AT LINE 481 IN MAIN.asm
ASSIGN1:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
COLON:              048E DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            048E DEFINED AT LINE 497 IN MAIN.asm
ARGLIST1:           0498 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST1A:          04A0 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARGLIST2:           04A8 DEFINED AT LINE 515 IN MAIN.asm
ARGLIST3:           04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST4:           04B3 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST5:           04B9 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
LBRACE:             04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKSTART:         04C4 DEFINED AT LINE 543 IN MAIN.asm
BLOCKSTART1:        04C8 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
BLOCKSTART2:        04F4 DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
BLOCKSTART3:        04F7 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
BLOCKSTART4:        04FF DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
BLOCKSTART5:        0502 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART6:        052A DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
RBRACE:             052D DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
BLOCKEND:           052D DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
BLOCKEND1:          055F DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKEND2:          056B DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND3:          057D DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
TICK:               0589 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CHAR:               0589 DEFINED AT LINE 661 IN MAIN.asm
CHAR1:              058C DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
CHAR2:              0598 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CHAR3:              059B DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
BACKSLASH:          059E DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
COMMA:              05A0 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05A0 DEFINED AT LINE 685 IN MAIN.asm
DISCARD1:           05AD DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
SLASH:              05AF DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
COMMAND:            05AF DEFINED AT LINE 698 IN MAIN.asm
DIV:                05E8 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
DOT:                05F9 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DIVIDE:             060B DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DIVIDE1:            0610 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE2:            061D DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DIVIDE3:            061E DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
EQUALS:             0624 DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         062C DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           0631 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0636 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
TRUE1:              0639 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
NULL1:              063F DEFINED AT LINE 812 IN MAIN.asm
FALSE1:             063F DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0646 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
GO2:                064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
GOBLOCK:            0657 DEFINED AT LINE 837 IN MAIN.asm
GOBLOCK1:           0657 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK2:           067C DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOLAMBDA:           068A DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOLAMBDA1:          06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOLAMBDA2:          06A9 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA3:          06B4 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOLAMBDA4:          06CC DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
GOLAMBDA5:          06CF DEFINED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOLAMBDA6:          06D2 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
GOLAMBDA7:          06D5 DEFINED AT LINE 923 IN MAIN.asm
GOLAMBDA8:          06D9 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
DOLLAR:             06E4 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             06E4 DEFINED AT LINE 938 IN MAIN.asm
HEXNUM1:            06E7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
HEXNUM2:            06EF DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
UPCASE:             0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0706 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             070B DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
QUESTION:           0718 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0718 DEFINED AT LINE 980 IN MAIN.asm
IFTE:               0724 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
IFTE1:              0725 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
STAR:               0731 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0731 DEFINED AT LINE 1003 IN MAIN.asm
MUL2:               0733 DEFINED AT LINE 1006 IN MAIN.asm
MUL3:               073B DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
NUM:                074D DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0756 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
NUM1:               0757 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
NUM2:               076F DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
NUM3:               077A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
RPAREN:             077D DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          0785 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
SHIFTLEFT:          07A1 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07A9 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
SHIFTLEFT2:         07AA DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
SHIFTRIGHT:         07B1 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07B9 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
SHIFTRIGHT2:        07BD DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
DQUOTE:             07C4 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07C4 DEFINED AT LINE 1129 IN MAIN.asm
STRING1:            07CD DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRING2:            07D0 DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
STRING3:            07D9 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
MINUS:              07EC DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                07F8 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
SUB1:               0802 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
ERROR1:             080B DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
COMMENT:            0812 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
COMMAND_A:          081B DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
ABSOLUTE:           0827 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
ADDROF:             0834 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
ADDROF1:            0848 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
ADDROF2:            0853 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
COMMAND_B:          0855 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BUFFERARRAY:        0861 DEFINED AT LINE 32
                    > USED AT LINE 751 IN MAIN.asm
BUFFERARRAYM_1763S1258: 086F DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       08AA DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
BUFFERDEC:          08B1 DEFINED AT LINE 1271 IN MAIN.asm
BUFFERDEC0:         08CB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BUFFERDEC1:         08DB DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
BUFFERDEC2:         08FB DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC3:         08FD DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERDEC4:         090D DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
BUFFERDEC5:         090E DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
BUFFERHEX:          0917 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
BUFFERHEX1:         0938 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERHEX2:         0941 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
BREAK:              094F DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
BREAK1:             0956 DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BUFFERSTRING:       0969 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
BUFFERSTRING0:      0970 DEFINED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
BUFFERSTRING1:      0976 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
BUFFERCHAR:         0983 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
BUFFERXCHARS:       0988 DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
BUFFERXCHARS0:      0989 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
BUFFERXCHARS1:      0992 DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERXCHARS2:      099A DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
COMMAND_I:          09A4 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
COMMAND_P:          09B0 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PARTIAL:            09C5 DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
XPARTIAL:           09E5 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
XPARTIAL0:          0A00 DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
XPARTIAL1:          0A16 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
XPARTIAL2:          0A2D DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
XPARTIAL3:          0A48 DEFINED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
XPARTIAL4:          0A53 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
XPARTIAL5:          0A54 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
PRINTBUFFER:        0A70 DEFINED AT LINE 32
                    > USED AT LINE 1462 IN MAIN.asm
PRINTBUFFERM_2150S1665: 0A7C DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0A96 DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
PRINTCHARS1:        0A9D DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1685 IN MAIN.asm
PRINTCHARS2:        0AA3 DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
PRINTSTACK:         0AA8 DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
COMMAND_R:          0AAA DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
REMAIN:             0AB3 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
SIZE:               0AB9 DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
COMMAND_V:          0AC1 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
CONSTBUFSTART:      0AD6 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
CONSTHEAPSTART:     0ADB DEFINED AT LINE 1759 IN MAIN.asm
CONSTTIBSTART:      0AE0 DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
VARBUFPTR:          0AE5 DEFINED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
VARHEAPPTR:         0AEE DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
VARTIBPTR:          0AF7 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
VARIABLE:           0B00 DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
CONSTANT:           0B03 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
CHARS:              0B06 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
CHARS1:             0B09 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
DECIMAL:            0B0E DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
DECIMAL1:           0B11 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
HEXADECIMAL:        0B16 DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
INPUT:              0B1C DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
KEY:                0B27 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
OUTPUT:             0B30 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
NUMBERS:            0B39 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
FILTER:             0B3F DEFINED AT LINE 1859 IN MAIN.asm
MAP:                0B3F DEFINED AT LINE 1860 IN MAIN.asm
ARGS1A0L:           0B41 DEFINED AT LINE 1868 IN MAIN.asm
ARGS1A2L:           0B44 DEFINED AT LINE 1872 IN MAIN.asm
FLUSHBUFFER:        0B49 DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0B60 DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
JUMPTABLE0:         0B62 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
JUMPTABLE1:         0B6F DEFINED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
JUMPTABLE2:         0B70 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
PRTSTR0:            0B76 DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
PRTSTR:             0B7A DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
NESTING:            0B7F DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
NESTING0:           0B89 DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
NESTING1A:          0B90 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
NESTING1:           0B93 DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
NESTING2:           0BA2 DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
NESTING3:           0BA4 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
NESTING4:           0BAF DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
PROMPT:             0BB1 DEFINED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
CRLF:               0BBA DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
PRINTSTR:           0BC1 DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 18
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 139
TITLESTR:           0BC8 DEFINED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
INIT:               0BDC DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
INIT1:              0BE4 DEFINED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
WARMINIT:           0BEC DEFINED AT LINE 2014 IN MAIN.asm
COLDBOOT0:          0BFF DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
COLDINIT:           0C09 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C1A DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
COLDSTART:          0C27 DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
START:              0C30 DEFINED AT LINE 2049 IN MAIN.asm
START1:             0C36 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
INTERPRET:          0C3C DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
INTERPRET2:         0C4B DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
INTERPRET3:         0C53 DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
INTERPRET4:         0C5E DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
INTERPRET5:         0C63 DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
INTERPRET5A:        0C86 DEFINED AT LINE 2126 IN MAIN.asm
INTERPRET6:         0C88 DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
INTERPRET7:         0C96 DEFINED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
INTERPRET8:         0CA9 DEFINED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
NEXT:               0CC4 DEFINED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
NEXT1:              0CD5 DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
EXIT:               0CDC DEFINED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
RUN:                0CE0 DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0CE4 DEFINED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
BACKSPACE_:         0CF7 DEFINED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
EDIT_:              0D07 DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
REEDIT_:            0D1F DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
PRINTSTACK_:        0D22 DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
TESTSSTART:         0E00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_2782S15:    0E9E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2788S24:    0F1F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2789S25:    0F96 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2790S26:    100B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2791S27:    1080 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2792S28:    10F5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2793S29:    116A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2794S30:    11E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2795S31:    125A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2796S32:    12D1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2797S33:    1348 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2798S34:    13C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2799S35:    143C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2800S36:    14B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2801S37:    152E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2802S38:    15AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2803S39:    162C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2804S40:    16A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2805S41:    172A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2806S42:    17AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2807S43:    1832 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2808S44:    18AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2809S45:    1934 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2810S46:    19B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2811S47:    1A32 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2812S48:    1AAF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2813S49:    1B34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2814S50:    1BB1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2815S51:    1C2E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2816S52:    1CAD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2817S53:    1D3C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2818S54:    1DB9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2819S55:    1E3E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2820S56:    1EBB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2821S57:    1F40 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2822S58:    1FBD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2823S59:    203C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2824S60:    20BB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2825S61:    2138 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2826S62:    21B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2827S63:    2232 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2828S64:    22AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2829S65:    232C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2830S66:    23A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2831S67:    2426 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2832S68:    24A3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2833S69:    2522 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2834S70:    25A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2835S71:    2620 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2836S72:    26A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2837S73:    2722 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2838S74:    279D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2839S75:    2818 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2840S76:    2899 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2841S77:    2920 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2842S78:    29A7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2843S79:    2A32 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2844S80:    2AC7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2845S81:    2B5C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2846S82:    2BD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2847S83:    2C54 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2848S84:    2CD3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2849S85:    2D54 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2850S86:    2DD3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2851S87:    2E52 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2852S88:    2ED3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2853S89:    2F5A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2854S90:    2FE5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2855S91:    306C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2856S92:    30FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2857S93:    3190 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S94:    3229 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S95:    32C6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S96:    3355 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S97:    33EA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S98:    3481 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S99:    351A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S100:   35B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S101:   3656 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S102:   36E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S103:   378A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S104:   382D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S105:   38D2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S106:   3981 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S107:   3A30 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S108:   3ABD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S109:   3B50 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S110:   3BDD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S111:   3C76 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S112:   3D0F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S113:   3DBA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S114:   3E6D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S115:   3F20 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S116:   3FBB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S117:   4062 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S118:   4109 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S119:   41AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S120:   4251 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S121:   430E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S122:   43D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S123:   4462 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S124:   44EB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S125:   4574 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S126:   45FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S127:   467E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S128:   46FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S129:   4780 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S130:   4801 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S131:   488C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S132:   491B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S133:   49A8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S135:   4A39 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4A44 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4C00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4C00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
BUF:                4D00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
VARS:               4E00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           4ED0 DEFINED AT LINE 18 IN ram.asm
RST08:              4ED0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4ED2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4ED4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4ED6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4ED8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4EDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4EDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4EDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4EE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4EE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4EE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4EE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2029 IN MAIN.asm
VDATAWIDTH:         4EE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
VNUMBASE:           4EE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
VTIBPTR:            4EEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
VBUFPTR:            4EEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
VNEXT:              4EEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2041 IN MAIN.asm
VHEAPPTR:           4EF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
VPOINTER:           4EF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
VREMAIN:            4EF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
VSAVEDIP:           4EF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
VSAVEDSP:           4EF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
VSAVEDNEXT:         4EFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
VSAVEDBP:           4EFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
VCHECKSUM:          4EFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4F00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
VTEMP2:             4F02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
VLASTDEF:           4F04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4F06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4F08 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           4F0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
HEAP:               4F1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
