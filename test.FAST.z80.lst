0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; call prtdec
0000                             ; push hl
0000                             ; call prtdec
0000                             ; pop hl
0000                             ; call printStr
0000                             ; .cstr " (#"
0000                             ; call prthex
0000                             ; call printStr
0000                             ; .cstr ")\r\n"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 call run
0000                 .cstr "."
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". `(#`.s .h `)\r\n`.s"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 47               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 47               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 47               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 47               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 47               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 47               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 47               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 47               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 47               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 47               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 46               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 47               LD   (RST08),HL   
0094   22 D2 47               LD   (RST10),HL   
0097   22 D4 47               LD   (RST18),HL   
009A   22 D6 47               LD   (RST20),HL   
009D   22 D8 47               LD   (RST28),HL   
00A0   22 DA 47               LD   (RST30),HL   
00A3   22 DE 47               LD   (INTVEC),HL   
00A6   22 E0 47               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 47               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 47               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 46               LD   SP,STACK   
00C6   CD 93 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                STKSIZE:   EQU   $80   ; Stack size
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TRESERV:   EQU   0   ; reserved
00CC                TNUMBER:   EQU   1   ; number
00CC                TSTRING:   EQU   2   ; string
00CC                TPOINTER:   EQU   3   ; pointer
00CC                TARRAY:   EQU   4   ; array
00CC                TBLOCK:   EQU   5   ; block
00CC                TFUNC:    EQU   6   ; function
00CC                TARGLST:   EQU   7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 49                  DW   TIB   ; vTIBPtr pointer into TIB
0184   00 4A                  DW   BUF   ; vBUFPtr pointer into BUF
0186   37 0C                  DW   next   ; nNext
0188   00 4C                  DW   HEAP   ; vHeapPtr \h start of the free mem
018A                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   85                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   6D                     DB   lsb(lparen_)   ; (
0209   87                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   82                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   70                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   85                     DB   lsb(nop_)   ; ~
025F   85                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 9C 03               JP   at   
0306                AMPER_:      
0306   C3 A6 03               JP   amper   
0309                DOLLAR_:      
0309   C3 CA 03               JP   dollar   
030C                LBRACK_:      
030C   C3 01 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1D 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 70 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AA 05               JP   backslash   
0318                LBRACE_:      
0318   C3 D0 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 39 05               JP   rbrace   
031E                TICK_:       
031E   C3 95 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 C6 07               JP   semicolon   
0324                DOT_:        
0324   C3 D9 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 B8 07               JP   underscore   
032A                COLON_:      
032A   C3 99 04               JP   colon   
032D                UPCASE_:      
032D   C3 3C 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 41 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 53 07               JP   question   
0336                STAR_:       
0336   C3 6C 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 88 07               JP   num   
0341                HASH_:       
0341   C3 1F 07               JP   hash   
0344                PIPE_:       
0344   C3 B1 03               JP   pipe   
0347                CARET_:      
0347   C3 7B 06               JP   caret   
034A                COMMA_:      
034A   C3 AC 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 05 08               JP   dblquote   
0350                MINUS_:      
0350   C3 2D 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 88 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 57 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA F2 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 78 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA E2 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 5F 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 64 06               JP   lessthan   
0382                SLASH_:      
0382   C3 BB 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 BE 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; implementations
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8A 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399                             ; inc bc
0399                             ; ld a,(bc)
0399                             ; cp "="                      ; += add to variable
0399                             ; jp z,assign0
0399   E5                     PUSH   hl   
039A                             ; dec bc
039A   DD E9                  JP   (ix)   
039C                             ; @ addr
039C                             ; -- ptr
039C                AT:          
039C                ADDR:        
039C   ED 5B F0 47            LD   de,(vPointer)   
03A0   21 F0 47               LD   hl,vPointer   
03A3   C3 BD 0A               JP   variable   
03A6                AMPER:       
03A6                AND:         
03A6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A7   E1                     POP   hl   
03A8   7B                     LD   a,e   
03A9   A5                     AND   l   
03AA   6F                     LD   l,a   
03AB   7A                     LD   a,d   
03AC   A4                     AND   h   
03AD                AND1:        
03AD   67                     LD   h,a   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                PIPE:        
03B1                OR:          
03B1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   B5                     OR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   B4                     OR   h   
03B8   18 F3                  JR   and1   
03BA                XOR:         
03BA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BB                XOR1:        
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   AD                     XOR   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   AC                     XOR   h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                INVERT:      ; Bitwise INVert the top member of the stack
03C5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C8   18 F1                  JR   xor1   
03CA                             ; $a .. $z
03CA                             ; -- value
03CA                             ; returns value of arg
03CA                DOLLAR:      
03CA                ARG:         
03CA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CD   FD 56 05               LD   d,(iy+5)   
03D0   EB                     EX   de,hl   
03D1   7D                     LD   a,l   ; arg_list* == null, skip
03D2   B4                     OR   h   
03D3   28 1C                  JR   z,arg0a   
03D5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D6   2B                     DEC   hl   
03D7   7E                     LD   a,(hl)   
03D8   23                     INC   hl   
03D9   23                     INC   hl   
03DA   B7                     OR   a   
03DB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DD   5F                     LD   e,a   ; e = a = num_args
03DE   03                     INC   bc   ; a = next char = dollar_name
03DF   0A                     LD   a,(bc)   
03E0   C5                     PUSH   bc   ; save IP
03E1   43                     LD   b,e   ; b = e = num_args
03E2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E5   FD 56 03               LD   d,(iy+3)   
03E8                ARG0:        
03E8   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E9   1B                     DEC   de   
03EA   BE                     CP   (hl)   
03EB   28 09                  JR   z,arg1   
03ED   23                     INC   hl   ; hl = next arg_list*
03EE   10 F8                  DJNZ   arg0   
03F0   C1                     POP   bc   ; no match, restore IP
03F1                ARG0A:       
03F1   11 00 00               LD   de,0   ; return 0
03F4   18 08                  JR   arg1a   
03F6                ARG1:        
03F6   C1                     POP   bc   ; restore IP
03F7   EB                     EX   de,hl   ; hl = arg*
03F8   22 F0 47               LD   (vPointer),hl   ; store arg* in setter
03FB   5E                     LD   e,(hl)   
03FC   23                     INC   hl   
03FD   56                     LD   d,(hl)   ; de = arg
03FE                ARG1A:       
03FE   D5                     PUSH   de   ; push arg
03FF   DD E9                  JP   (ix)   
0401                LBRACK:      
0401                ARRAYSTART:      
0401   11 00 00               LD   de,0   ; create stack frame
0404   D5                     PUSH   de   ; push null for IP
0405   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0408   FD 56 05               LD   d,(iy+5)   ; 
040B   D5                     PUSH   de   ; 
040C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040F   FD 56 03               LD   d,(iy+3)   ; 
0412   D5                     PUSH   de   ; 
0413   FD E5                  PUSH   iy   ; push BP
0415   FD 21 00 00            LD   iy,0   ; BP = SP
0419   FD 39                  ADD   iy,sp   
041B   DD E9                  JP   (ix)   
041D                RBRACK:      
041D                ARRAYEND:      
041D   FD 54                  LD   d,iyh   ; de = BP
041F   FD 5D                  LD   e,iyl   
0421   ED 43 FC 47            LD   (vTemp1),bc   ; save IP
0425   62 6B                  LD   hl,de   ; hl = de = BP
0427   B7                     OR   a   
0428   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042A   CB 3C                  SRL   h   ; 
042C   CB 1D                  RR   l   
042E   44 4D                  LD   bc,hl   ; bc = count
0430   2A EE 47               LD   hl,(vHeapPtr)   ; hl = array[-3]
0433   71                     LD   (hl),c   ; write num items in length word
0434   23                     INC   hl   
0435   70                     LD   (hl),b   
0436   23                     INC   hl   ; hl = array[0], bc = count
0437                             ; de = BP, hl = array[0], bc = count
0437   3E 04                  LD   a,TARRAY   
0439   77                     LD   (hl),a   
043A   23                     INC   hl   
043B                ARRAYEND1:      
043B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043E   77                     LD   (hl),a   ; write lsb of array item
043F   23                     INC   hl   ; move to msb of array item
0440   3A E6 47               LD   a,(vDataWidth)   ; vDataWidth=1?
0443   3D                     DEC   a   
0444   28 05                  JR   z,arrayEnd2   
0446   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0449   77                     LD   (hl),a   ; write msb of array item
044A   23                     INC   hl   ; move to next word in array
044B                ARRAYEND2:      
044B   FD 2B                  DEC   iy   ; move to next word on stack
044D   FD 2B                  DEC   iy   
044F   0B                     DEC   bc   ; dec items count
0450   79                     LD   a,c   ; if not zero loop
0451   B0                     OR   b   
0452   20 E7                  JR   nz,arrayEnd1   
0454   EB                     EX   de,hl   ; de = end of array, hl = BP
0455   F9                     LD   sp,hl   ; sp = BP
0456   E1                     POP   hl   ; de = end of array, hl = old BP
0457   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0458   FD 62                  LD   iyh,d   
045A   FD 6B                  LD   iyl,e   
045C   D1                     POP   de   ; pop arg_list (discard)
045D   D1                     POP   de   ; pop first_arg* (discard)
045E   D1                     POP   de   ; pop IP (discard)
045F   ED 5B EE 47            LD   de,(vHeapPtr)   ; de = array[-4]
0463   13                     INC   de   ; de = array[0]
0464   13                     INC   de   
0465   13                     INC   de   
0466   D5                     PUSH   de   ; return array[0]
0467   22 EE 47               LD   (vHeapPtr),hl   ; move heap* to end of array
046A   ED 4B FC 47            LD   bc,(vTemp1)   ; restore IP
046E   DD E9                  JP   (ix)   
0470                             ; index of an array, based on vDataWidth
0470                             ; array num -- value    ; also sets vPointer to address
0470                ARRINDEX:      
0470   E1                     POP   hl   ; hl = index
0471   D1                     POP   de   ; de = array
0472   3A E6 47               LD   a,(vDataWidth)   ; a = data width
0475   3D                     DEC   a   
0476   28 01                  JR   z,arrIndex1   
0478                ARRINDEX0:      
0478   29                     ADD   hl,hl   ; if data width = 2 then double
0479                ARRINDEX1:      
0479   19                     ADD   hl,de   ; add addr
047A   22 F0 47               LD   (vPointer),hl   ; store address in setter
047D   16 00                  LD   d,0   
047F   5E                     LD   e,(hl)   
0480   B7                     OR   a   ; check data width again
0481   28 02                  JR   z,arrIndex2   
0483   23                     INC   hl   
0484   56                     LD   d,(hl)   
0485                ARRINDEX2:      
0485   D5                     PUSH   de   
0486   DD E9                  JP   (ix)   
0488                             ; value _oldValue --            ; uses address in vPointer
0488                ASSIGN:      
0488   E1                     POP   hl   ; discard last accessed value
0489   E1                     POP   hl   ; hl = new value
048A                ASSIGN0:      
048A   EB                     EX   de,hl   ; de = new value
048B                ASSIGNX:      
048B   2A F0 47               LD   hl,(vPointer)   
048E   73                     LD   (hl),e   
048F   3A E6 47               LD   a,(vDataWidth)   
0492   3D                     DEC   a   ; is it byte?
0493   28 02                  JR   z,assign1   
0495   23                     INC   hl   
0496   72                     LD   (hl),d   
0497                ASSIGN1:      
0497   DD E9                  JP   (ix)   
0499                             ; arg_list - parses input (ab:c)
0499                             ; names after the : represent uninitialised locals
0499                             ; return values are the state of the stack after the block ends
0499                COLON:       
0499                ARGLIST:      
0499   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049C   2A EE 47               LD   hl,(vHeapPtr)   ; hl = heap*
049F   23                     INC   hl   ; skip length field to start
04A0   23                     INC   hl   
04A1   E5                     PUSH   hl   ; save start of arg_list
04A2   03                     INC   bc   ; point to next char
04A3                ARGLIST1:      
04A3   0A                     LD   a,(bc)   
04A4   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A6   20 03                  JR   nz,arglist1a   
04A8   14                     INC   d   ; non zero value local count acts as flag
04A9   18 10                  JR   arglist3   
04AB                ARGLIST1A:      
04AB   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AD   38 0F                  JR   c,arglist4   
04AF   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B1   30 0B                  JR   nc,arglist4   
04B3                ARGLIST2:      
04B3   77                     LD   (hl),a   
04B4   23                     INC   hl   
04B5   1C                     INC   e   ; increase arg count
04B6   AF                     XOR   a   
04B7   B2                     OR   d   
04B8   28 01                  JR   z,arglist3   
04BA   14                     INC   d   ; if d > 0 increase local count
04BB                ARGLIST3:      
04BB   03                     INC   bc   ; point to next char
04BC   18 E5                  JR   arglist1   
04BE                ARGLIST4:      
04BE   0B                     DEC   bc   
04BF   AF                     XOR   a   
04C0   B2                     OR   d   
04C1   28 01                  JR   z,arglist5   
04C3   15                     DEC   d   ; remove initial inc
04C4                ARGLIST5:      
04C4   23                     INC   hl   
04C5   22 EE 47               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C8   E1                     POP   hl   ; hl = start of arg_list
04C9   E5                     PUSH   hl   ; return start of arg_list
04CA   2B                     DEC   hl   ; write number of locals at start - 1
04CB   72                     LD   (hl),d   
04CC   2B                     DEC   hl   ; write number of args + locals at start - 2
04CD   73                     LD   (hl),e   
04CE   DD E9                  JP   (ix)   
04D0                LBRACE:      
04D0                BLOCK:       
04D0   C5                     PUSH   bc   ; return pointer to first { of block
04D1   03                     INC   bc   
04D2   16 01                  LD   d,1   ; nesting: count first parenthesis
04D4                BLOCK1:      ; Skip to end of definition
04D4   0A                     LD   a,(bc)   ; Get the next character
04D5   03                     INC   bc   ; Point to next character
04D6   FE 21                  CP   " " + 1   ; ignore whitespace
04D8   38 FA                  JR   c,block1   
04DA   FE 29                  CP   ")"   
04DC   28 2D                  JR   z,block4   
04DE   FE 7D                  CP   "}"   
04E0   28 29                  JR   z,block4   
04E2   FE 5D                  CP   "]"   
04E4   28 25                  JR   z,block4   
04E6   FE 28                  CP   "("   
04E8   28 16                  JR   z,block2   
04EA   FE 7B                  CP   "{"   
04EC   28 12                  JR   z,block2   
04EE   FE 5B                  CP   "["   
04F0   28 0E                  JR   z,block2   
04F2   FE 27                  CP   "'"   
04F4   28 0D                  JR   z,block3   
04F6   FE 60                  CP   "`"   
04F8   28 09                  JR   z,block3   
04FA   FE 22                  CP   DQUOTE   
04FC   28 05                  JR   z,block3   
04FE   18 D4                  JR   block1   
0500                BLOCK2:      
0500   14                     INC   d   
0501   18 D1                  JR   block1   
0503                BLOCK3:      
0503   3E 80                  LD   a,$80   
0505   AA                     XOR   d   
0506   47                     LD   b,a   
0507   20 CB                  JR   nz,block1   
0509   18 03                  JR   block5   
050B                BLOCK4:      
050B   15                     DEC   d   
050C   20 C6                  JR   nz,block1   ; get the next element
050E                BLOCK5:      
050E   60 69                  LD   hl,bc   ; hl = IP
0510   11 00 4C               LD   de,HEAP   ; is IP pointing to object in heap
0513   B7                     OR   a   ; IP - HEAP
0514   ED 52                  SBC   hl,de   
0516   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0518   28 1C                  JR   z,block6   
051A   60 69                  LD   hl,bc   ; hl = IP
051C   D1                     POP   de   ; de = block*
051D   ED 43 FC 47            LD   (vTemp1),bc   ; save IP
0521   B7                     OR   a   ; bc = size
0522   ED 52                  SBC   hl,de   
0524   44 4D                  LD   bc,hl   
0526   EB                     EX   de,hl   ; hl = block* de = heap*
0527   ED 5B EE 47            LD   de,(vHeapPtr)   
052B   D5                     PUSH   de   ; return hblock*
052C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
052E   ED 53 EE 47            LD   (vHeapPtr),de   ; heap* += size
0532   ED 4B FC 47            LD   bc,(vTemp1)   ; restore IP
0536                BLOCK6:      
0536   0B                     DEC   bc   ; balanced, exit
0537   DD E9                  JP   (ix)   
0539                RBRACE:      
0539                BLOCKEND:      
0539   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053C   FD 56 01               LD   d,(iy+1)   
053F   ED 53 FC 47            LD   (vTemp1),de   
0543   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0546   FD 56 07               LD   d,(iy+7)   
0549   ED 53 FE 47            LD   (vTemp2),de   
054D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0550   FD 56 03               LD   d,(iy+3)   
0553   EB                     EX   de,hl   
0554   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0557   FD 56 01               LD   d,(iy+1)   
055A   13                     INC   de   ; for carry flag <=
055B   B7                     OR   a   
055C   ED 52                  SBC   hl,de   
055E   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0560   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0562   FD 5D                  LD   e,iyl   
0564   21 08 00               LD   hl,8   
0567   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0568   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0569   18 0C                  JR   blockEnd2   
056B                BLOCKEND1:      ; same scope
056B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056E   FD 56 03               LD   d,(iy+3)   
0571   EB                     EX   de,hl   
0572   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0574   FD 5D                  LD   e,iyl   
0576   EB                     EX   de,hl   
0577                BLOCKEND2:      
0577   44 4D                  LD   bc,hl   ; bc = hl = BP
0579   B7                     OR   a   ; hl = BP - SP = count
057A   ED 72                  SBC   hl,sp   
057C   7D                     LD   a,l   
057D   B4                     OR   h   
057E   28 09                  JR   z,blockEnd3   
0580   C5                     PUSH   bc   ; bc = count, hl = BP
0581   44 4D                  LD   bc,hl   
0583   E1                     POP   hl   
0584   2B                     DEC   hl   ; hl = BP-1
0585   1B                     DEC   de   ; de = args*-1
0586   ED B8                  LDDR      
0588   13                     INC   de   
0589                BLOCKEND3:      
0589   EB                     EX   de,hl   ; sp = de = new tos*
058A   F9                     LD   sp,hl   
058B   ED 4B FE 47            LD   bc,(vTemp2)   
058F   FD 2A FC 47            LD   iy,(vTemp1)   
0593   DD E9                  JP   (ix)   
0595                TICK:        
0595                CHAR:        
0595   21 00 00               LD   hl,0   ; if "" is empty or null
0598                CHAR1:       
0598   03                     INC   bc   ; point to next char
0599   0A                     LD   a,(bc)   
059A   FE 27                  CP   "'"   ; ' is the terminator
059C   28 09                  JR   z,char3   
059E   FE 5C                  CP   $5c   ; \ is the escape
05A0   20 02                  JR   nz,char2   
05A2   03                     INC   bc   
05A3   0A                     LD   a,(bc)   
05A4                CHAR2:       
05A4   6F                     LD   l,a   
05A5   18 F1                  JR   char1   
05A7                CHAR3:       
05A7   E5                     PUSH   hl   
05A8   DD E9                  JP   (ix)   
05AA                BACKSLASH:      
05AA   DD E9                  JP   (ix)   
05AC                             ; , discard stack item
05AC                             ; x y -- x
05AC                COMMA:       
05AC                DISCARD:      
05AC   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AE   FD 5D                  LD   e,iyl   
05B0   EB                     EX   de,hl   
05B1   B7                     OR   a   
05B2   ED 72                  SBC   hl,sp   
05B4   CB 7C                  BIT   7,h   
05B6   20 01                  JR   nz,discard1   
05B8   E1                     POP   hl   
05B9                DISCARD1:      
05B9   DD E9                  JP   (ix)   
05BB                SLASH:       
05BB   03                     INC   bc   
05BC   0A                     LD   a,(bc)   
05BD   FE 5C                  CP   $5C   
05BF   CA 9D 08               JP   z,comment   
05C2   FE 41                  CP   "A"   
05C4   D2 4C 08               JP   nc,command   
05C7   0B                     DEC   bc   
05C8   D1                     POP   de   
05C9   E1                     POP   hl   
05CA   C5                     PUSH   bc   ; preserve the IP
05CB   44 4D                  LD   bc,hl   
05CD   CD 3E 06               CALL   divide   
05D0   EB                     EX   de,hl   
05D1   ED 53 F2 47            LD   (vRemain),de   
05D5   C1                     POP   bc   
05D6   C3 99 03               JP   add3   
05D9                DOT:         
05D9   03                     INC   bc   
05DA   0A                     LD   a,(bc)   
05DB   FE 68                  CP   "h"   
05DD   CA EE 05               JP   z,dotHex   
05E0   FE 73                  CP   "s"   
05E2   CA 02 06               JP   z,dotStr   
05E5   FE 63                  CP   "c"   
05E7   CA 16 06               JP   z,dotChar   
05EA   0B                     DEC   bc   
05EB   C3 2A 06               JP   dotDec   
05EE                DOTHEX:      
05EE   CD 7B 06               CALL   go   
05F1   00 00                  DW   NUL   ; closure
05F3   F7 05                  DW   dotHex_block   
05F5   38 0B                  DW   args1A0L   
05F7                DOTHEX_BLOCK:      
05F7   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
0602                DOTSTR:      
0602   CD 7B 06               CALL   go   
0605   00 00                  DW   NUL   ; closure
0607   0B 06                  DW   dotStr_block   
0609   38 0B                  DW   args1A0L   
060B                DOTSTR_BLOCK:      
060B   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
0616                DOTCHAR:      
0616   CD 7B 06               CALL   go   
0619   00 00                  DW   NUL   ; closure
061B   1F 06                  DW   dotChar_block   
061D   38 0B                  DW   args1A0L   
061F                DOTCHAR_BLOCK:      
061F   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
062A                DOTDEC:      
062A   CD 7B 06               CALL   go   
062D   00 00                  DW   NUL   ; closure
062F   33 06                  DW   dotDec_block   
0631   38 0B                  DW   args1A0L   
0633                DOTDEC_BLOCK:      
0633   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
063E                             ; division subroutine.
063E                             ; bc: divisor, de: dividend, hl: remainder
063E                DIVIDE:      
063E   21 00 00               LD   hl,0   ; zero the remainder
0641   3E 10                  LD   a,16   ; loop counter
0643                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0643   CB 21                  SLA   c   
0645   CB 10                  RL   b   
0647   ED 6A                  ADC   hl,hl   
0649   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
064B   38 03                  JR   c,divide2   
064D   0C                     INC   c   
064E   18 01                  JR   divide3   
0650                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0650   19                     ADD   hl,de   
0651                DIVIDE3:      
0651   3D                     DEC   a   
0652   20 EF                  JR   nz,divide1   
0654   50 59                  LD   de,bc   ; result from bc to de
0656   C9                     RET      
0657                             ; hl = value1, de = value2
0657                             ; hl = result
0657                EQUALS:      
0657   B7                     OR   a   ; reset the carry flag
0658   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
065A   28 10                  JR   z,true1   
065C   C3 72 06               JP   false1   
065F                             ; hl = value1 de = value2
065F                             ; hl = result
065F                LESSTHANEQ:      
065F   B7                     OR   a   
0660   ED 52                  SBC   hl,de   
0662   18 05                  JR   lessthan1   
0664                             ; hl = value1 de = value2
0664                             ; hl = result
0664                LESSTHAN:      
0664   B7                     OR   a   
0665   ED 52                  SBC   hl,de   
0667   28 09                  JR   z,false1   
0669                LESSTHAN1:      
0669   FA 72 06               JP   m,false1   
066C                TRUE1:       
066C   21 FF FF               LD   hl,TRUE   
066F   E5                     PUSH   hl   
0670   DD E9                  JP   (ix)   
0672                NULL1:       
0672                FALSE1:      
0672   21 00 00               LD   hl,FALSE   
0675   E5                     PUSH   hl   
0676   DD E9                  JP   (ix)   
0678                LPAREN:      
0678   C3 D0 04               JP   block   
067B                             ; execute a block of code which ends with }
067B                             ; creates a root scope if BP == stack
067B                             ; else uses outer scope
067B                CARET:       
067B                GO:          
067B   D1                     POP   de   ; de = block*
067C                GO1:         
067C   7B                     LD   a,e   ; if block* == null, exit
067D   B2                     OR   d   
067E   20 02                  JR   nz,go2   
0680   DD E9                  JP   (ix)   
0682                GO2:         
0682   1A                     LD   a,(de)   
0683   FE 7B                  CP   "{"   
0685   28 07                  JR   z,goBlock1   
0687   FE 28                  CP   "("   
0689   C2 C1 06               JP   nz,goFunc   
068C   13                     INC   de   ; de is the address to jump back to
068D   D5                     PUSH   de   ; push de just before stack frame
068E                GOBLOCK:      
068E                GOBLOCK1:      
068E   ED 53 FC 47            LD   (vTemp1),de   ; save de
0692   21 80 46               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0695   FD 54                  LD   d,iyh   
0697   FD 5D                  LD   e,iyl   
0699   B7                     OR   a   ; if stack* == BP then this is the root_scope
069A   ED 52                  SBC   hl,de   
069C   ED 5B FC 47            LD   de,(vTemp1)   ; restore de
06A0   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06A1   B4                     OR   h   
06A2   3E 00                  LD   a,0   
06A4   28 6E                  JR   z,goFunc8   
06A6   C5                     PUSH   bc   ; push IP
06A7   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06AA   FD 46 05               LD   b,(iy+5)   
06AD   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06B0   FD 66 03               LD   h,(iy+3)   
06B3                GOBLOCK2:      
06B3   C5                     PUSH   bc   ; arg_list*
06B4   E5                     PUSH   hl   ; first_arg*
06B5   FD E5                  PUSH   iy   ; push BP
06B7   FD 21 00 00            LD   iy,0   ; BP = SP
06BB   FD 39                  ADD   iy,sp   
06BD   42 4B                  LD   bc,de   ; bc = de = block*-1
06BF   DD E9                  JP   (ix)   
06C1                GOFUNC:      ; execute function
06C1   EB                     EX   de,hl   ; hl = func*
06C2   5E                     LD   e,(hl)   ; de = partial_array*
06C3   23                     INC   hl   
06C4   56                     LD   d,(hl)   
06C5   23                     INC   hl   
06C6   7B                     LD   a,e   ; if partial_array* == null skip
06C7   B2                     OR   d   
06C8   28 23                  JR   z,goFunc3   
06CA   ED 43 FC 47            LD   (vTemp1),bc   
06CE   22 FE 47               LD   (vTemp2),hl   ; save bc,hl
06D1   EB                     EX   de,hl   ; hl = partial_array*
06D2   2B                     DEC   hl   ; skip type byte
06D3   2B                     DEC   hl   ; bc = count
06D4   46                     LD   b,(hl)   
06D5   2B                     DEC   hl   
06D6   4E                     LD   c,(hl)   
06D7   23                     INC   hl   ; hl = array data*
06D8   23                     INC   hl   
06D9   23                     INC   hl   
06DA   18 06                  JR   goFunc2   ; push each item on stack
06DC                GOFUNC1:      
06DC   5E                     LD   e,(hl)   ; de = partial item
06DD   23                     INC   hl   
06DE   56                     LD   d,(hl)   
06DF   23                     INC   hl   
06E0   D5                     PUSH   de   ; push on stack
06E1   0B                     DEC   bc   
06E2                GOFUNC2:      
06E2   79                     LD   a,c   ; if count != 0 then loop
06E3   B0                     OR   b   
06E4   20 F6                  JR   nz,goFunc1   
06E6   ED 4B FC 47            LD   bc,(vTemp1)   ; restore bc
06EA   2A FE 47               LD   hl,(vTemp2)   ; restore hl
06ED                GOFUNC3:      
06ED   5E                     LD   e,(hl)   ; de = block*
06EE   23                     INC   hl   
06EF   56                     LD   d,(hl)   
06F0   23                     INC   hl   
06F1   ED 53 FC 47            LD   (vTemp1),de   ; save block*
06F5   5E                     LD   e,(hl)   ; de = arg_list*
06F6   23                     INC   hl   
06F7   56                     LD   d,(hl)   
06F8   23                     INC   hl   
06F9   EB                     EX   de,hl   ; hl = arg_list*
06FA   ED 5B FC 47            LD   de,(vTemp1)   ; restore de = block*
06FE   7D                     LD   a,l   ; if arg_list* == null a = 0
06FF   B4                     OR   h   
0700   20 03                  JR   nz,goFunc4   
0702   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
0703   18 0F                  JR   goFunc8   
0705                GOFUNC4:      ; allocate locals
0705   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0706   7E                     LD   a,(hl)   
0707   18 03                  JR   goFunc6   
0709                GOFUNC5:      ; loop
0709   3B                     DEC   sp   
070A   3B                     DEC   sp   
070B   3D                     DEC   a   
070C                GOFUNC6:      
070C   B7                     OR   a   
070D   20 FA                  JR   nz,goFunc5   ; end loop
070F                GOFUNC7:      
070F   2B                     DEC   hl   ; a = num_args* x 2
0710   7E                     LD   a,(hl)   
0711   23                     INC   hl   
0712   23                     INC   hl   
0713   87                     ADD   a,a   ; a *= 2
0714                GOFUNC8:      
0714   C5                     PUSH   bc   ; push IP
0715   44 4D                  LD   bc,hl   
0717   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
071A   85                     ADD   a,l   
071B   6F                     LD   l,a   
071C   39                     ADD   hl,sp   
071D   18 94                  JR   goBlock2   
071F                HASH:        
071F                HEXNUM:      
071F   21 00 00               LD   hl,0   ; Clear hl to accept the number
0722                HEXNUM1:      
0722   03                     INC   bc   
0723   0A                     LD   a,(bc)   ; Get the character which is a numeral
0724   CB 77                  BIT   6,a   ; is it uppercase alpha?
0726   28 02                  JR   z,hexnum2   ; no a decimal
0728   D6 07                  SUB   7   ; sub 7  to make $a - $F
072A                HEXNUM2:      
072A   D6 30                  SUB   $30   ; form decimal digit
072C   DA AA 07               JP   c,num2   
072F   FE 10                  CP   $0F+1   
0731   D2 AA 07               JP   nc,num2   
0734   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0735   29                     ADD   hl,hl   ; 4X
0736   29                     ADD   hl,hl   ; 8X
0737   29                     ADD   hl,hl   ; 16X
0738   85                     ADD   a,l   ; add into bottom of hl
0739   6F                     LD   l,a   
073A   18 E6                  JR   hexnum1   
073C                UPCASE:      
073C   0A                     LD   a,(bc)   ; a = identifier char
073D   D6 41                  SUB   "A"   ; "A" = 0
073F   18 05                  JR   ident1   
0741                LOWCASE:      
0741   0A                     LD   a,(bc)   
0742   D6 61                  SUB   "a"   
0744   C6 1A                  ADD   a,26   
0746                IDENT1:      
0746   87                     ADD   a,a   ; l = a * 2
0747   6F                     LD   l,a   
0748   26 47                  LD   h,msb(vars)   
074A   22 F0 47               LD   (vPointer),hl   ; store address in setter
074D   5E                     LD   e,(hl)   
074E   23                     INC   hl   
074F   56                     LD   d,(hl)   
0750   D5                     PUSH   de   
0751   DD E9                  JP   (ix)   
0753                             ; if
0753                             ; condition then -- value
0753                QUESTION:      
0753                IF:          
0753   03                     INC   bc   
0754   0A                     LD   a,(bc)   
0755   FE 3F                  CP   "?"   
0757   28 06                  JR   z,ifte   
0759   0B                     DEC   bc   
075A   11 00 00               LD   de,NUL   ; NUL pointer for else
075D   18 01                  JR   ifte1   
075F                             ; ifte
075F                             ; condition then else -- value
075F                IFTE:        
075F   D1                     POP   de   ; de = else
0760                IFTE1:       
0760   E1                     POP   hl   ; hl = then
0761   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0762   7C                     LD   a,h   
0763   B5                     OR   l   
0764   E1                     POP   hl   ; hl = then
0765   CA 7C 06               JP   z,go1   ; if z de = else
0768   EB                     EX   de,hl   ; condition = false, de = then
0769   C3 7C 06               JP   go1   
076C                STAR:        
076C                MUL:         
076C   D1                     POP   de   ; get first value
076D   E1                     POP   hl   
076E                MUL2:        
076E   C5                     PUSH   bc   ; Preserve the IP
076F   44 4D                  LD   bc,hl   ; bc = 2nd value
0771   21 00 00               LD   hl,0   
0774   3E 10                  LD   a,16   
0776                MUL3:        
0776   29                     ADD   hl,hl   
0777   CB 13                  RL   e   
0779   CB 12                  RL   d   
077B   30 04                  JR   nc,$+6   
077D   09                     ADD   hl,bc   
077E   30 01                  JR   nc,$+3   
0780   13                     INC   de   
0781   3D                     DEC   a   
0782   20 F2                  JR   nz,mul3   
0784   C1                     POP   bc   ; Restore the IP
0785   C3 99 03               JP   add3   
0788                NUM:         
0788   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
078B   0A                     LD   a,(bc)   ; Get numeral or -
078C   FE 2D                  CP   "-"   
078E   20 01                  JR   nz,num0   
0790   03                     INC   bc   ; move to next char, no flags affected
0791                NUM0:        
0791   08                     EX   af,af'   ; save zero flag = 0 for later
0792                NUM1:        
0792   0A                     LD   a,(bc)   ; read digit
0793   D6 30                  SUB   "0"   ; less than 0?
0795   38 13                  JR   c,num2   ; not a digit, exit loop
0797   FE 0A                  CP   10   ; greater that 9?
0799   30 0F                  JR   nc,num2   ; not a digit, exit loop
079B   03                     INC   bc   ; inc IP
079C   54 5D                  LD   de,hl   ; multiply hl * 10
079E   29                     ADD   hl,hl   
079F   29                     ADD   hl,hl   
07A0   19                     ADD   hl,de   
07A1   29                     ADD   hl,hl   
07A2   85                     ADD   a,l   ; add digit in a to hl
07A3   6F                     LD   l,a   
07A4   3E 00                  LD   a,0   
07A6   8C                     ADC   a,h   
07A7   67                     LD   h,a   
07A8   18 E8                  JR   num1   
07AA                NUM2:        
07AA   0B                     DEC   bc   
07AB   08                     EX   af,af'   ; restore zero flag
07AC   20 07                  JR   nz,num3   
07AE   EB                     EX   de,hl   ; negate the value of hl
07AF   21 00 00               LD   hl,0   
07B2   B7                     OR   a   ; jump to sub2
07B3   ED 52                  SBC   hl,de   
07B5                NUM3:        
07B5   E5                     PUSH   hl   ; Put the number on the stack
07B6   DD E9                  JP   (ix)   ; and process the next character
07B8                UNDERSCORE:      
07B8                REMAIN:      
07B8   2A F2 47               LD   hl,(vRemain)   
07BB   E5                     PUSH   hl   
07BC   DD E9                  JP   (ix)   
07BE                RPAREN:      
07BE   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07C1   FD 46 09               LD   b,(iy+9)   
07C4   DD E9                  JP   (ix)   
07C6                             ; arg_list* block* -- ptr
07C6                SEMICOLON:      
07C6   D1                     POP   de   ; de = block* hl = heap*
07C7   2A EE 47               LD   hl,(vHeapPtr)   
07CA   AF                     XOR   a   
07CB   77                     LD   (hl),a   ; compile null partial_array*
07CC   23                     INC   hl   
07CD   77                     LD   (hl),a   
07CE   23                     INC   hl   
07CF   73                     LD   (hl),e   ; compile block*
07D0   23                     INC   hl   
07D1   72                     LD   (hl),d   
07D2   23                     INC   hl   
07D3   D1                     POP   de   ; de = block*
07D4   73                     LD   (hl),e   ; compile arg_list*
07D5   23                     INC   hl   
07D6   72                     LD   (hl),d   
07D7   23                     INC   hl   
07D8   ED 5B EE 47            LD   de,(vHeapPtr)   ; return func*
07DC   D5                     PUSH   de   
07DD   22 EE 47               LD   (vHeapPtr),hl   ; heap* += 4
07E0   DD E9                  JP   (ix)   
07E2                             ; shiftLeft
07E2                             ; value count -- value2          shift left count places
07E2                SHIFTLEFT:      
07E2   50 59                  LD   de,bc   ; save IP
07E4   C1                     POP   bc   ; bc = count
07E5   41                     LD   b,c   ; b = loop counter
07E6   E1                     POP   hl   
07E7   04                     INC   b   ; test for counter=0 case
07E8   18 01                  JR   shiftLeft2   
07EA                SHIFTLEFT1:      
07EA   29                     ADD   hl,hl   ; left shift hl
07EB                SHIFTLEFT2:      
07EB   10 FD                  DJNZ   shiftLeft1   
07ED   E5                     PUSH   hl   
07EE   42 4B                  LD   bc,de   ; restore IP
07F0   DD E9                  JP   (ix)   
07F2                             ; shiftRight
07F2                             ; value count -- value2          shift left count places
07F2                SHIFTRIGHT:      
07F2   50 59                  LD   de,bc   ; save IP
07F4   C1                     POP   bc   ; bc = count
07F5   41                     LD   b,c   ; b = loop counter
07F6   E1                     POP   hl   
07F7   04                     INC   b   ; test for counter=0 case
07F8   18 04                  JR   shiftRight2   
07FA                SHIFTRIGHT1:      
07FA   CB 3C                  SRL   h   ; right shift hl
07FC   CB 1D                  RR   l   
07FE                SHIFTRIGHT2:      
07FE   10 FA                  DJNZ   shiftRight1   
0800   E5                     PUSH   hl   
0801   42 4B                  LD   bc,de   ; restore IP
0803   DD E9                  JP   (ix)   
0805                             ; string
0805                             ; -- ptr                        ; points to start of string chars,
0805                             ; length is stored at start - 2 bytes
0805                DBLQUOTE:      
0805                STRING:      
0805   2A EE 47               LD   hl,(vHeapPtr)   ; hl = heap*
0808   23                     INC   hl   ; skip length field to start
0809   23                     INC   hl   
080A   E5                     PUSH   hl   ; save start of string
080B   03                     INC   bc   ; point to next char
080C   18 03                  JR   string2   
080E                STRING1:      
080E   77                     LD   (hl),a   
080F   23                     INC   hl   ; increase count
0810   03                     INC   bc   ; point to next char
0811                STRING2:      
0811   0A                     LD   a,(bc)   
0812   FE 22                  CP   DQUOTE   ; " is the string terminator
0814   28 04                  JR   z,string3   
0816   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0818   20 F4                  JR   nz,string1   
081A                STRING3:      
081A   AF                     XOR   a   ; write NUL to terminate string
081B   77                     LD   (hl),a   ; hl = end of string
081C   23                     INC   hl   
081D   22 EE 47               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0820   2B                     DEC   hl   ; hl = end of string without terminator
0821   D1                     POP   de   ; de = start of string
0822   D5                     PUSH   de   ; return start of string
0823   B7                     OR   a   ; hl = length bytes, de = start of string
0824   ED 52                  SBC   hl,de   
0826   EB                     EX   de,hl   
0827   2B                     DEC   hl   ; write length bytes to length field at start - 2
0828   72                     LD   (hl),d   
0829   2B                     DEC   hl   
082A   73                     LD   (hl),e   
082B   DD E9                  JP   (ix)   
082D                MINUS:       ; negative sign or subtract
082D   03                     INC   bc   ; check if sign of a number
082E   0A                     LD   a,(bc)   
082F   0B                     DEC   bc   
0830   FE 30                  CP   "0"   
0832   38 05                  JR   c,sub   
0834   FE 3A                  CP   "9"+1   
0836   DA 3E 03               JP   c,num_   
0839                SUB:         ; Subtract the value 2nd on stack from top of stack
0839   03                     INC   bc   
083A   FE 2D                  CP   "-"   
083C   20 05                  JR   nz,sub1   
083E   E1                     POP   hl   
083F   2B                     DEC   hl   
0840   C3 8A 04               JP   assign0   
0843                SUB1:        
0843   0B                     DEC   bc   
0844   D1                     POP   de   
0845   E1                     POP   hl   
0846   B7                     OR   a   
0847   ED 52                  SBC   hl,de   
0849   C3 99 03               JP   add3   
084C                             ;*******************************************************************
084C                             ; commands
084C                             ; a contains command letter
084C                             ; bc points to command letter
084C                             ;*******************************************************************
084C                COMMAND:      
084C   FE 2F                  CP   "/"   ; // comment
084E   CA 9D 08               JP   z,comment   
0851   FE 61                  CP   "a"   ; /ab absolute /ad address of
0853   28 51                  JR   z,command_a   
0855   FE 62                  CP   "b"   ; /ba buf array /bb buf block
0857                             ; /bd buf decimal /bp buf params
0857                             ; /bs buf string /br break
0857   CA E3 08               JP   z,command_b   
085A   FE 63                  CP   "c"   ; /c chars
085C   CA D2 0A               JP   z,chars   
085F   FE 66                  CP   "f"   ; /f false
0861   CA 72 06               JP   z,false1   
0864   FE 69                  CP   "i"   ; /in input iv invert
0866   CA C3 0A               JP   z,command_i   
0869   FE 6B                  CP   "k"   ; /k key
086B   CA E5 0A               JP   z,key   
086E   FE 6E                  CP   "n"   ; /n numbers
0870   CA F7 0A               JP   z,numbers   
0873   FE 6F                  CP   "o"   ; /o output
0875   CA EE 0A               JP   z,output   
0878   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
087A   CA EF 09               JP   z,command_p   
087D   FE 73                  CP   "s"   ; /s size
087F   CA 3C 0A               JP   z,size   
0882   FE 74                  CP   "t"   ; /t true
0884   CA 6C 06               JP   z,true1   
0887   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
0889   CA 70 0A               JP   z,command_v   
088C   FE 78                  CP   "x"   ; /x xor
088E   CA BA 03               JP   z,xor   
0891   FE 7A                  CP   "z"   ; /z
0893   CA FF 0A               JP   z,zprt   
0896                ERROR1:      
0896   21 01 00               LD   hl,1   ; error 1: unknown command
0899   E5                     PUSH   hl   
089A   C3 57 0C               JP   error   
089D                COMMENT:      
089D   03                     INC   bc   ; point to next char
089E   0A                     LD   a,(bc)   
089F   FE 20                  CP   " "   ; terminate on any char less than SP
08A1   30 FA                  JR   nc,comment   
08A3   0B                     DEC   bc   
08A4   DD E9                  JP   (ix)   
08A6                COMMAND_A:      
08A6   03                     INC   bc   
08A7   0A                     LD   a,(bc)   
08A8   FE 62                  CP   "b"   
08AA   CA B5 08               JP   z,absolute   
08AD   FE 64                  CP   "d"   
08AF   CA C2 08               JP   z,addrOf   
08B2   C3 96 08               JP   error1   
08B5                             ; /ab absolute
08B5                             ; num -- num
08B5                ABSOLUTE:      
08B5   E1                     POP   hl   
08B6   CB 7C                  BIT   7,h   
08B8   C8                     RET   z   
08B9   AF                     XOR   a   
08BA   95                     SUB   l   
08BB   6F                     LD   l,a   
08BC   9F                     SBC   a,a   
08BD   94                     SUB   h   
08BE   67                     LD   h,a   
08BF   E5                     PUSH   hl   
08C0   DD E9                  JP   (ix)   
08C2                             ; /ad addrOf
08C2                             ; char -- addr
08C2                ADDROF:      
08C2   E1                     POP   hl   ; a = char
08C3   7D                     LD   a,l   
08C4   FE 7B                  CP   "z"+1   ; if a > z then exit
08C6   30 19                  JR   nc,addrOf2   
08C8   D6 41                  SUB   "A"   ; a - 65
08CA   38 15                  JR   c,addrOf2   ; if < A then exit
08CC   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08CE   38 06                  JR   c,addrOf1   
08D0   D6 06                  SUB   "a"-("Z"+1)   
08D2   FE 1A                  CP   "Z"-"A"+1   
08D4   38 0B                  JR   c,addrOf2   ; if < a then exit
08D6                ADDROF1:      
08D6   87                     ADD   a,a   ; double a
08D7   21 00 47               LD   hl,VARS   ; hl = VARS + a
08DA   85                     ADD   a,l   
08DB   6F                     LD   l,a   
08DC   3E 00                  LD   a,0   
08DE   8C                     ADC   a,h   
08DF   67                     LD   h,a   
08E0   E5                     PUSH   hl   
08E1                ADDROF2:      
08E1   DD E9                  JP   (ix)   
08E3                COMMAND_B:      
08E3   03                     INC   bc   
08E4   0A                     LD   a,(bc)   
08E5   FE 63                  CP   "c"   ; /bc buffer char
08E7   CA 06 09               JP   z,bufferChar   
08EA   FE 64                  CP   "d"   ; /bd buffer decimal
08EC   CA 15 09               JP   z,bufferDec   
08EF   FE 68                  CP   "h"   ; /bd buffer hexadecimal
08F1   CA 76 09               JP   z,bufferHex   
08F4   FE 72                  CP   "r"   ; /br break
08F6   CA A5 09               JP   z,break   
08F9   FE 73                  CP   "s"   ; /bs buffer string
08FB   CA BF 09               JP   z,bufferString   
08FE   FE 78                  CP   "x"   ; /bx buffer x spaces
0900   CA DB 09               JP   z,bufferXSpaces   
0903   C3 96 08               JP   error1   
0906                             ; /bc buffer char
0906                             ; char -- length
0906                BUFFERCHAR:      
0906   D1                     POP   de   ; e = char
0907   2A EA 47               LD   hl,(vBufPtr)   ; hl = buffer*
090A   73                     LD   (hl),e   ; e -> buffer*
090B   23                     INC   hl   ; buffer*++
090C   22 EA 47               LD   (vBufPtr),hl   ; save buffer*' in pointer
090F   11 01 00               LD   de,1   ; return 1 byte
0912   D5                     PUSH   de   
0913   DD E9                  JP   (ix)   
0915                             ; /bd buffer decimal
0915                             ; value -- length               ; length can be used to rewind buffer*
0915                BUFFERDEC:      
0915   ED 5B EA 47            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0919   D9                     EXX      
091A   E1                     POP   hl   ; hl = value
091B   CD 2D 09               CALL   bufferDec0   
091E   D9                     EXX      ; de = buffer*' bc = IP
091F   2A EA 47               LD   hl,(vBufPtr)   ; hl = buffer*
0922   ED 53 EA 47            LD   (vBufPtr),de   ; update buffer* with buffer*'
0926   EB                     EX   de,hl   ; hl = length
0927   B7                     OR   a   
0928   ED 52                  SBC   hl,de   
092A   E5                     PUSH   hl   ; return length
092B   DD E9                  JP   (ix)   
092D                             ; hl = value
092D                             ; de' = buffer*
092D                             ; a, bc, de, hl destroyed
092D                BUFFERDEC0:      
092D   CB 7C                  BIT   7,h   
092F   28 0C                  JR   z,bufferDec1   
0931   D9                     EXX      
0932   3E 2D                  LD   a,"-"   
0934   12                     LD   (de),a   
0935   13                     INC   de   
0936   D9                     EXX      
0937   AF                     XOR   a   
0938   95                     SUB   l   
0939   6F                     LD   l,a   
093A   9F                     SBC   a,a   
093B   94                     SUB   h   
093C   67                     LD   h,a   
093D                BUFFERDEC1:      
093D   0E 00                  LD   c,0   ; leading zeros flag = false
093F   11 F0 D8               LD   de,-10000   
0942   CD 5D 09               CALL   bufferDec2   
0945   11 18 FC               LD   de,-1000   
0948   CD 5D 09               CALL   bufferDec2   
094B   11 9C FF               LD   de,-100   
094E   CD 5D 09               CALL   bufferDec2   
0951   1E F6                  LD   e,-10   
0953   CD 5D 09               CALL   bufferDec2   
0956   0C                     INC   c   ; flag = true for at least digit
0957   1E FF                  LD   e,-1   
0959   CD 5D 09               CALL   bufferDec2   
095C   C9                     RET      
095D                BUFFERDEC2:      
095D   06 2F                  LD   b,"0"-1   
095F                BUFFERDEC3:      
095F   04                     INC   b   
0960   19                     ADD   hl,de   
0961   38 FC                  JR   c,bufferDec3   
0963   ED 52                  SBC   hl,de   
0965   3E 30                  LD   a,"0"   
0967   B8                     CP   b   
0968   20 05                  JR   nz,bufferDec4   
096A   AF                     XOR   a   
096B   B1                     OR   c   
096C   C8                     RET   z   
096D   18 01                  JR   bufferDec5   
096F                BUFFERDEC4:      
096F   0C                     INC   c   
0970                BUFFERDEC5:      
0970   78                     LD   a,b   
0971   D9                     EXX      
0972   12                     LD   (de),a   
0973   13                     INC   de   
0974   D9                     EXX      
0975   C9                     RET      
0976                             ; /bh buffer hex
0976                             ; value -- length               ; length can be used to rewind buffer*
0976                BUFFERHEX:      
0976   E1                     POP   hl   ; hl = value
0977   ED 5B EA 47            LD   de,(vBufPtr)   
097B   7C                     LD   a,h   
097C   CD 91 09               CALL   bufferHex1   
097F   7D                     LD   a,l   
0980   CD 91 09               CALL   bufferHex1   
0983   EB                     EX   de,hl   
0984   ED 5B EA 47            LD   de,(vBufPtr)   
0988   22 EA 47               LD   (vBufPtr),hl   
098B   B7                     OR   a   
098C   ED 52                  SBC   hl,de   
098E   E5                     PUSH   hl   
098F   DD E9                  JP   (ix)   
0991                BUFFERHEX1:      
0991   F5                     PUSH   af   
0992   1F                     RRA      
0993   1F                     RRA      
0994   1F                     RRA      
0995   1F                     RRA      
0996   CD 9A 09               CALL   bufferHex2   
0999   F1                     POP   af   
099A                BUFFERHEX2:      
099A   E6 0F                  AND   0x0F   
099C   C6 90                  ADD   a,0x90   
099E   27                     DAA      
099F   CE 40                  ADC   a,0x40   
09A1   27                     DAA      
09A2   12                     LD   (de),a   
09A3   13                     INC   de   
09A4   C9                     RET      
09A5                             ; /br break from loop
09A5                             ; --
09A5                BREAK:       
09A5   E1                     POP   hl   
09A6   7D                     LD   a,l   
09A7   B4                     OR   h   
09A8   28 02                  JR   z,break1   
09AA   DD E9                  JP   (ix)   
09AC                BREAK1:      
09AC   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09AE   FD 54                  LD   d,iyh   
09B0   21 08 00               LD   hl,8   
09B3   19                     ADD   hl,de   
09B4   23                     INC   hl   
09B5   23                     INC   hl   
09B6   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09B9   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09BC   C3 39 05               JP   blockEnd   
09BF                             ; /bs buffered string
09BF                             ; string* -- length
09BF                BUFFERSTRING:      
09BF   E1                     POP   hl   ; hl = string*
09C0   ED 5B EA 47            LD   de,(vBufPtr)   ; de = buffer*
09C4   18 03                  JR   bufferString1   
09C6                BUFFERSTRING0:      
09C6   12                     LD   (de),a   ; a -> buffer*
09C7   13                     INC   de   ; string*++ buffer++
09C8   23                     INC   hl   
09C9                BUFFERSTRING1:      
09C9   7E                     LD   a,(hl)   ; a <- string*
09CA   B7                     OR   a   ; if NUL exit loop
09CB   20 F9                  JR   nz,bufferString0   
09CD   2A EA 47               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09D0   ED 53 EA 47            LD   (vBufPtr),de   ; save buffer*' in pointer
09D4   EB                     EX   de,hl   ; hl = length
09D5   B7                     OR   a   
09D6   ED 52                  SBC   hl,de   
09D8   E5                     PUSH   hl   ; return length
09D9   DD E9                  JP   (ix)   
09DB                             ; /bx buffered x spaces
09DB                             ; length -- length
09DB                BUFFERXSPACES:      
09DB   D1                     POP   de   ; bc = length
09DC   D5                     PUSH   de   ; return length
09DD   2A EA 47               LD   hl,(vBufPtr)   ; hl = buffer*
09E0   18 04                  JR   bufferXSpaces2   
09E2                BUFFERXSPACES1:      
09E2   36 20                  LD   (hl)," "   
09E4   23                     INC   hl   
09E5   1B                     DEC   de   
09E6                BUFFERXSPACES2:      
09E6   7B                     LD   a,e   
09E7   B2                     OR   d   
09E8   20 F8                  JR   nz,bufferXSpaces1   
09EA   22 EA 47               LD   (vBufPtr),hl   ; save buffer*'
09ED   DD E9                  JP   (ix)   
09EF                COMMAND_P:      
09EF   03                     INC   bc   
09F0   0A                     LD   a,(bc)   
09F1   FE 61                  CP   "a"   
09F3   CA 08 0A               JP   z,partial   
09F6   FE 63                  CP   "c"   
09F8   CA 28 0A               JP   z,printChars   
09FB   FE 6B                  CP   "k"   
09FD   CA 3A 0A               JP   z,printStack   
0A00   FE 78                  CP   "x"   
0A02   CA 45 0A               JP   z,printX   
0A05   C3 96 08               JP   error1   
0A08                             ; partial
0A08                             ; array* func* -- func1*
0A08                PARTIAL:      
0A08   E1                     POP   hl   ; h1 = func*
0A09   ED 5B EE 47            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A0D   ED 43 FC 47            LD   (vTemp1),bc   ; save IP
0A11   01 06 00               LD   bc,6   ; bc = count
0A14   ED B0                  LDIR      ; clone func
0A16   ED 4B FC 47            LD   bc,(vTemp1)   ; restore IP
0A1A   2A EE 47               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A1D   ED 53 EE 47            LD   (vHeapPtr),de   ; heap* += 6
0A21   D1                     POP   de   ; de = array*
0A22   E5                     PUSH   hl   ; return partial_array*
0A23   73                     LD   (hl),e   ; compile array*
0A24   23                     INC   hl   
0A25   72                     LD   (hl),d   
0A26   DD E9                  JP   (ix)   
0A28                             ; printChars
0A28                             ; char* len --
0A28                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A28                PRINTCHARS:      
0A28   E1                     POP   hl   
0A29   2B                     DEC   hl   
0A2A   D1                     POP   de   
0A2B   C3 30 0A               JP   printChars2   
0A2E                PRINTCHARS1:      
0A2E   13                     INC   de   
0A2F   2B                     DEC   hl   
0A30                PRINTCHARS2:      
0A30   1A                     LD   a,(de)   
0A31   CD 85 00               CALL   putchar   
0A34   7D                     LD   a,l   
0A35   B4                     OR   h   
0A36   20 F6                  JR   nz,printChars1   
0A38   DD E9                  JP   (ix)   
0A3A                             ; /pk print stack
0A3A                             ; --
0A3A                PRINTSTACK:      
0A3A                             ;     ld (vTemp1),bc
0A3A                             ;     call printStr
0A3A                             ;     .cstr "=> "
0A3A                             ;     ld hl,STACK
0A3A                             ;     sbc hl,sp
0A3A                             ;     srl h
0A3A                             ;     rr l
0A3A                             ;     ld bc,hl
0A3A                             ;     ld hl,STACK
0A3A                             ;     jr printStack2
0A3A                             ; printStack1:
0A3A                             ;     dec bc
0A3A                             ;     dec hl
0A3A                             ;     ld d,(hl)
0A3A                             ;     dec hl
0A3A                             ;     ld e,(hl)
0A3A                             ;     ex de,hl
0A3A                             ;     call prthex
0A3A                             ;     ex de,hl
0A3A                             ;     ld a," "
0A3A                             ;     call putchar
0A3A                             ; printStack2:
0A3A                             ;     ld a,c
0A3A                             ;     or b
0A3A                             ;     jr nz,printStack1
0A3A                             ;     call prompt
0A3A                             ;     ld bc,(vTemp1)
0A3A   DD E9                  JP   (ix)   
0A3C                SIZE:        
0A3C   E1                     POP   hl   
0A3D   2B                     DEC   hl   
0A3E   2B                     DEC   hl   
0A3F   56                     LD   d,(hl)   
0A40   2B                     DEC   hl   
0A41   5E                     LD   e,(hl)   
0A42   D5                     PUSH   de   
0A43   DD E9                  JP   (ix)   
0A45                PRINTX:      
0A45   CD 7B 06               CALL   go   
0A48   00 00                  DW   NUL   ; closure
0A4A   4E 0A                  DW   printX_block   
0A4C   38 0B                  DW   args1A0L   
0A4E                PRINTX_BLOCK:      
0A4E   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0A70                COMMAND_V:      
0A70   03                     INC   bc   
0A71   0A                     LD   a,(bc)   
0A72   FE 62                  CP   "b"   
0A74   CA A2 0A               JP   z,varBufPtr   
0A77   FE 68                  CP   "h"   
0A79   CA AB 0A               JP   z,varHeapPtr   
0A7C   FE 74                  CP   "t"   
0A7E   CA B4 0A               JP   z,varTIBPtr   
0A81   FE 42                  CP   "B"   
0A83   CA 93 0A               JP   z,constBufStart   
0A86   FE 48                  CP   "H"   
0A88   CA 98 0A               JP   z,constHeapStart   
0A8B   FE 54                  CP   "T"   
0A8D   CA 9D 0A               JP   z,constTIBStart   
0A90   C3 96 08               JP   error1   
0A93                CONSTBUFSTART:      
0A93   11 00 4A               LD   de,BUF   
0A96   18 28                  JR   constant   
0A98                CONSTHEAPSTART:      
0A98   11 00 4C               LD   de,HEAP   
0A9B   18 23                  JR   constant   
0A9D                CONSTTIBSTART:      
0A9D   11 00 49               LD   de,TIB   
0AA0   18 1E                  JR   constant   
0AA2                VARBUFPTR:      
0AA2   ED 5B EA 47            LD   de,(vBufPtr)   
0AA6   21 EA 47               LD   hl,vBufPtr   
0AA9   18 12                  JR   variable   
0AAB                VARHEAPPTR:      
0AAB   ED 5B EE 47            LD   de,(vHeapPtr)   
0AAF   21 EE 47               LD   hl,vHeapPtr   
0AB2   18 09                  JR   variable   
0AB4                VARTIBPTR:      
0AB4   ED 5B E8 47            LD   de,(vTIBPtr)   
0AB8   21 E8 47               LD   hl,vTIBPtr   
0ABB   18 00                  JR   variable   
0ABD                VARIABLE:      
0ABD   22 F0 47               LD   (vPointer),hl   
0AC0                CONSTANT:      
0AC0   D5                     PUSH   de   
0AC1   DD E9                  JP   (ix)   
0AC3                COMMAND_I:      
0AC3   03                     INC   bc   
0AC4   0A                     LD   a,(bc)   
0AC5   FE 6E                  CP   "n"   ; /in input
0AC7   CA DA 0A               JP   z,input   
0ACA   FE 76                  CP   "v"   ; /iv invert
0ACC   CA C5 03               JP   z,invert   
0ACF   C3 96 08               JP   error1   
0AD2                CHARS:       
0AD2   21 01 00               LD   hl,1   
0AD5                CHARS1:      
0AD5   22 E6 47               LD   (vDataWidth),hl   
0AD8   DD E9                  JP   (ix)   
0ADA                             ; Z80 port input
0ADA                             ; port -- value
0ADA                INPUT:       
0ADA   E1                     POP   hl   
0ADB   59                     LD   e,c   ; save IP
0ADC   4D                     LD   c,l   
0ADD   ED 68                  IN   l,(c)   
0ADF   26 00                  LD   h,0   
0AE1   4B                     LD   c,e   ; restore IP
0AE2   E5                     PUSH   hl   
0AE3   DD E9                  JP   (ix)   
0AE5                KEY:         
0AE5   CD 81 00               CALL   getchar   
0AE8   26 00                  LD   h,0   
0AEA   6F                     LD   l,a   
0AEB   E5                     PUSH   hl   
0AEC   DD E9                  JP   (ix)   
0AEE                             ; Z80 port output
0AEE                             ; value port --
0AEE                OUTPUT:      
0AEE   E1                     POP   hl   
0AEF   59                     LD   e,c   ; save IP
0AF0   4D                     LD   c,l   
0AF1   E1                     POP   hl   
0AF2   ED 69                  OUT   (c),l   
0AF4   4B                     LD   c,e   ; restore IP
0AF5   DD E9                  JP   (ix)   
0AF7                NUMBERS:      
0AF7   21 02 00               LD   hl,2   
0AFA   C3 D5 0A               JP   chars1   
0AFD                             ; 
0AFD                             ; 
0AFD                             ; 
0AFD                             ; 
0AFD                FILTER:      
0AFD                MAP:         
0AFD                SCAN:        
0AFD   DD E9                  JP   (ix)   
0AFF                ZPRT:        
0AFF   CD 7B 06               CALL   go   
0B02   00 00                  DW   NUL   ; closure
0B04   0C 0B                  DW   zprt_block   
0B06   0A 0B                  DW   zprt_args   
0B08   02                     DB   2   ; num args + locals
0B09   01                     DB   1   ; num locals
0B0A                ZPRT_ARGS:      
0B0A   6E 73                  DB   "ns"   
0B0C                ZPRT_BLOCK:      
0B0C   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B33                             ;*******************************************************************
0B33                             ; reusable arglists
0B33                             ;*******************************************************************
0B33                ARGS0A1L_:      ; zero args one local
0B33   01                     DB   1   ; num args + locals
0B34   01                     DB   1   ; num locals
0B35                ARGS0A1L:      
0B35   61                     DB   "a"   
0B36                ARGS1A0L_:      ; one arg zero locals
0B36   01                     DB   1   ; num args + locals
0B37   00                     DB   0   ; num locals
0B38                ARGS1A0L:      
0B38   61                     DB   "a"   
0B39                ARGS1A1L_:      ; one arg one local
0B39   02                     DB   2   ; num args + locals
0B3A   01                     DB   1   ; num locals
0B3B                ARGS1A1L:      
0B3B   61 62                  DB   "ab"   
0B3D                ARGS2A0L_:      ; two args zero locals
0B3D   02                     DB   2   ; num args + locals
0B3E   00                     DB   0   ; num locals
0B3F                ARGS2A0L:      
0B3F   61 62                  DB   "ab"   
0B41                             ;*******************************************************************
0B41                             ; general routines
0B41                             ;*******************************************************************
0B41                PRTSTR0:      
0B41   CD 85 00               CALL   putchar   
0B44   23                     INC   hl   
0B45                PRTSTR:      
0B45   7E                     LD   a,(hl)   
0B46   B7                     OR   a   
0B47   20 F8                  JR   nz,prtstr0   
0B49   C9                     RET      
0B4A                             ; **************************************************************************
0B4A                             ; calculate nesting value
0B4A                             ; a is char to be tested,
0B4A                             ; e is the nesting value (initially 0)
0B4A                             ; e is increased by ( and [
0B4A                             ; e is decreased by ) and ]
0B4A                             ; e has its bit 7 toggled by `
0B4A                             ; limited to 127 levels
0B4A                             ; **************************************************************************
0B4A                NESTING:      
0B4A   FE 22                  CP   DQUOTE   ; quote char
0B4C   28 06                  JR   z,nesting0   
0B4E   FE 60                  CP   "`"   ; quote char
0B50   28 02                  JR   z,nesting0   
0B52   18 0A                  JR   nesting1   
0B54                NESTING0:      
0B54   CB 7B                  BIT   7,e   
0B56   28 03                  JR   z,nesting1a   
0B58   CB BB                  RES   7,e   
0B5A   C9                     RET      
0B5B                NESTING1A:      
0B5B   CB FB                  SET   7,e   
0B5D   C9                     RET      
0B5E                NESTING1:      
0B5E   CB 7B                  BIT   7,e   
0B60   C0                     RET   nz   
0B61   FE 7B                  CP   "{"   
0B63   28 08                  JR   z,nesting2   
0B65   FE 5B                  CP   "["   
0B67   28 04                  JR   z,nesting2   
0B69   FE 28                  CP   "("   
0B6B   20 02                  JR   nz,nesting3   
0B6D                NESTING2:      
0B6D   1C                     INC   e   
0B6E   C9                     RET      
0B6F                NESTING3:      
0B6F   FE 7D                  CP   "}"   
0B71   28 07                  JR   z,nesting4   
0B73   FE 5D                  CP   "]"   
0B75   28 03                  JR   z,nesting4   
0B77   FE 29                  CP   ")"   
0B79   C0                     RET   nz   
0B7A                NESTING4:      
0B7A   1D                     DEC   e   
0B7B   C9                     RET      
0B7C                PROMPT:      
0B7C   CD 8C 0B               CALL   printStr   
0B7F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B84   C9                     RET      
0B85                CRLF:        
0B85   CD 8C 0B               CALL   printStr   
0B88   0D 0A 00               .CSTR   "\r\n"   
0B8B   C9                     RET      
0B8C                             ; prints a null teminated string
0B8C                             ; the string should be immediately following the call
0B8C                PRINTSTR:      
0B8C   E3                     EX   (sp),hl   ; swap			
0B8D   CD 45 0B               CALL   prtstr   
0B90   23                     INC   hl   ; inc past NUL
0B91   E3                     EX   (sp),hl   ; put it back	
0B92   C9                     RET      
0B93                INIT:        
0B93   DD 2A EC 47            LD   ix,(vNext)   
0B97   FD 21 80 46            LD   iy,STACK   
0B9B   21 80 01               LD   hl,isysVars   
0B9E   11 E6 47               LD   de,sysVars   
0BA1   01 10 00               LD   bc,8 * 2   
0BA4   ED B0                  LDIR      
0BA6   21 00 47               LD   hl,vars   ; 52 vars LO HI
0BA9   06 34                  LD   b,26*2   
0BAB   AF                     XOR   a   
0BAC                INIT0:       
0BAC   77                     LD   (hl),a   
0BAD   23                     INC   hl   
0BAE   10 FC                  DJNZ   init0   
0BB0   C9                     RET      
0BB1                START:       
0BB1   31 80 46               LD   sp,STACK   ; start Monty
0BB4   CD 93 0B               CALL   init   ; setups
0BB7   CD 8C 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BBA   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0BC7                INTERPRET:      
0BC7   CD 7C 0B               CALL   prompt   
0BCA   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BCD   21 00 49               LD   hl,TIB   
0BD0   22 E8 47               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BD3                INTERPRET2:      ; calculate nesting
0BD3   1E 00                  LD   e,0   ; initilize nesting value
0BD5   C5                     PUSH   bc   ; save offset into TIB,
0BD6                             ; bc is also the count of chars in TIB
0BD6   21 00 49               LD   hl,TIB   ; hl is start of TIB
0BD9   18 06                  JR   interpret4   
0BDB                INTERPRET3:      
0BDB   7E                     LD   a,(hl)   ; a = char in TIB
0BDC   23                     INC   hl   ; inc pointer into TIB
0BDD   0B                     DEC   bc   ; dec count of chars in TIB
0BDE   CD 4A 0B               CALL   nesting   ; update nesting value
0BE1                INTERPRET4:      
0BE1   79                     LD   a,c   ; is count zero?
0BE2   B0                     OR   b   
0BE3   20 F6                  JR   nz,interpret3   ; if not loop
0BE5   C1                     POP   bc   ; restore offset into TIB
0BE6                INTERPRET5:      
0BE6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BE9   FE 20                  CP   $20   ; compare to space
0BEB   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BED   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BEF                             ; ???? NEEDED?
0BEF   28 3B                  JR   z,interpret8   
0BF1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BF3   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BF5   FE 05                  CP   CTRL_E   
0BF7   CA 7A 0C               JP   z,edit_   
0BFA   FE 08                  CP   CTRL_H   
0BFC   CA 6A 0C               JP   z,backSpace_   
0BFF   FE 0A                  CP   CTRL_J   
0C01   CA 92 0C               JP   z,reEdit_   
0C04   FE 13                  CP   CTRL_S   
0C06   CA 95 0C               JP   z,printStack_   
0C09                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C09                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C09                             ; DB     lsb(list_)       ; FF  ^L 12
0C09                             ; DB     lsb(printStack_) ; DLE ^P 16
0C09                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C09                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C09                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C09                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C09                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C09                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C09                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C09                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C09                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C09                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C09                INTERPRET5A:      
0C09                             ; ld (vTIBPtr),bc
0C09                             ; ld bc,(vTIBPtr)
0C09   18 C8                  JR   interpret2   
0C0B                INTERPRET6:      
0C0B   21 00 49               LD   hl,TIB   
0C0E   09                     ADD   hl,bc   
0C0F   77                     LD   (hl),a   ; store the character in textbuf
0C10   03                     INC   bc   
0C11   CD 85 00               CALL   putchar   ; echo character to screen
0C14   CD 4A 0B               CALL   nesting   
0C17   18 CD                  JR   interpret5   ; wait for next character
0C19                INTERPRET7:      
0C19   21 00 49               LD   hl,TIB   
0C1C   09                     ADD   hl,bc   
0C1D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C1F   23                     INC   hl   
0C20   36 0A                  LD   (hl),"\n"   
0C22   23                     INC   hl   
0C23   03                     INC   bc   
0C24   03                     INC   bc   
0C25   CD 85 0B               CALL   crlf   ; echo character to screen
0C28   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C29   B7                     OR   a   
0C2A   20 BA                  JR   nz,interpret5   
0C2C                INTERPRET8:      
0C2C   21 00 49               LD   hl,TIB   
0C2F   09                     ADD   hl,bc   
0C30   22 E8 47               LD   (vTIBPtr),hl   
0C33   01 00 49               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C36                             ; we pressed enter
0C36   0B                     DEC   bc   
0C37                NEXT:        
0C37   03                     INC   bc   ; Increment the IP
0C38   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C39   FE 20                  CP   " "   ; whitespace?
0C3B   28 FA                  JR   z,next   ; space? ignore
0C3D   38 09                  JR   c,next1   
0C3F   D6 20                  SUB   " "   
0C41   6F                     LD   l,a   ; index into table
0C42   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C44   6E                     LD   l,(hl)   ; get low jump address
0C45   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C47   E9                     JP   (hl)   ; Jump to routine
0C48                NEXT1:       
0C48   FE 00                  CP   NUL   ; end of input string?
0C4A   28 03                  JR   z,exit   
0C4C   C3 C7 0B               JP   interpret   ; no, other whitespace, macros?
0C4F                EXIT:        
0C4F   03                     INC   bc   
0C50   60 69                  LD   hl,bc   
0C52   E9                     JP   (hl)   
0C53                RUN:         
0C53   C1                     POP   bc   
0C54   0B                     DEC   bc   
0C55   DD E9                  JP   (ix)   
0C57                ERROR:       
0C57   CD 53 0C               CALL   run   
0C5A   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C67   C3 C7 0B               JP   interpret   
0C6A                BACKSPACE_:      
0C6A   79                     LD   a,c   
0C6B   B0                     OR   b   
0C6C   CA D3 0B               JP   z,interpret2   
0C6F   0B                     DEC   bc   
0C70   CD 8C 0B               CALL   printStr   
0C73   08 20 08 00            .CSTR   "\b \b"   
0C77   C3 D3 0B               JP   interpret2   
0C7A                             ; edit
0C7A                EDIT_:       
0C7A   CD 53 0C               CALL   run   
0C7D   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C8F   C3 C7 0B               JP   interpret   
0C92                REEDIT_:      
0C92   C3 C7 0B               JP   interpret   
0C95                PRINTSTACK_:      
0C95   CD 53 0C               CALL   run   
0C98   2F 70 6B 00            .CSTR   "/pk"   
0C9C   C3 C7 0B               JP   interpret   
0C9F                             ; editDef:
0C9F                             ;     pop hl                      ; pop ret address
0C9F                             ;     ex (sp),hl                  ; swap with TOS
0C9F                             ;     push hl                     ; dup TOS
0C9F                             ;     ld a,l                      ; a = ident
0C9F                             ;     ld de,TIB                   ; de = start of TIB
0C9F                             ;     ld (vTIBPtr),de             ; update TIB*
0C9F                             ;     push ix                     ; save NEXT
0C9F                             ;     ld ix,editDef0              ; NEXT = editDef0
0C9F                             ;     jp lookupRef                ; convert letter into address
0C9F                             ; editDef0:
0C9F                             ;     ld e,(hl)                   ; de = (hl++)
0C9F                             ;     inc hl
0C9F                             ;     ld d,(hl)
0C9F                             ;     ld a,d                      ; de == 0 ?
0C9F                             ;     or e
0C9F                             ;     jr z,editDef4
0C9F                             ;     ld ix,editDef3              ; NEXT = editDef3
0C9F                             ;     ex de,hl
0C9F                             ;     ld a,(hl)
0C9F                             ;     cp "{"
0C9F                             ;     jr nz,editDef1
0C9F                             ;     jp editBlock0               ; convert letter into address
0C9F                             ; editDef1:
0C9F                             ;     cp "("
0C9F                             ;     jr nz,editDef2
0C9F                             ;     jp editBlock0               ; convert letter into address
0C9F                             ; editDef2:
0C9F                             ;     jp editFunc
0C9F                             ; editDef3:
0C9F                             ;     ld a," "                    ; write assign
0C9F                             ;     call writeChar
0C9F                             ;     pop hl                      ; a = ident
0C9F                             ;     ld a,l
0C9F                             ;     call writeChar
0C9F                             ;     ld a,"="                    ; write assign
0C9F                             ;     call writeChar
0C9F                             ;     ld ix,editDef4              ; NEXT = editDef4
0C9F                             ;     jp printTIB
0C9F                             ; editDef4:
0C9F                             ;     pop ix                      ; restore NEXT
0C9F                             ;     jp (ix)
0C9F                             ; writeChar:
0C9F                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C9F                             ;     ld (de),a                   ; write ident
0C9F                             ;     inc de
0C9F                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C9F                             ;     ret
0C9F                             ; ; printTIB
0C9F                             ; printTIB:
0C9F                             ;     ld hl,(vTIBPtr)
0C9F                             ;     ld de,TIB
0C9F                             ;     or a
0C9F                             ;     sbc hl,de
0C9F                             ;     jp printTIB2
0C9F                             ; printTIB1:
0C9F                             ;     ld a,(de)
0C9F                             ;     call putchar
0C9F                             ; printTIB2:
0C9F                             ;     ld a,l
0C9F                             ;     or h
0C9F                             ;     jr nz,printTIB1
0C9F                             ;     jp (ix)
0C9F                             ; editBlock:
0C9F                             ;     pop hl                      ; hl = block*
0C9F                             ; editBlock0:
0C9F                             ;     push ix                     ; save next
0C9F                             ;     push hl                     ; push block*
0C9F                             ;     push hl                     ; push block*
0C9F                             ;     ld ix,(editBlock2)
0C9F                             ;     jp blockLength
0C9F                             ; editBlock1:
0C9F                             ;     pop hl                      ; bc = length, (sp) = IP
0C9F                             ;     pop de                      ; de = block*
0C9F                             ;     ld a,l
0C9F                             ;     or h
0C9F                             ;     jr z,editBlock2
0C9F                             ;     push bc
0C9F                             ;     ld bc,hl
0C9F                             ;     ex de,hl                    ; hl = block*
0C9F                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C9F                             ;     ldir                        ; copy block to TIB
0C9F                             ;     ld (vTIBPtr),de              ; save TIB*
0C9F                             ;     pop bc
0C9F                             ; editBlock2:
0C9F                             ;     pop ix                      ; restore next
0C9F                             ;     jp (ix)
0C9F                             ; editFunc:
0C9F                             ;     jp (ix)
0C9F                             ; editArray:
0C9F                             ;     jp (ix)
0C9F                             ; editArglist:
0C9F                             ;     jp (ix)
0C9F                             ; ; blockLength
0C9F                             ; ; addr1 -- length
0C9F                             ; blockLength:
0C9F                             ;     pop hl                      ; block*
0C9F                             ;     push hl                     ; save block*
0C9F                             ;     inc hl                      ; skip first char
0C9F                             ;     ld d,1                      ; increase nesting
0C9F                             ; blockLength1:                   ; Skip to end of definition
0C9F                             ;     ld a,(hl)                   ; Get the next character
0C9F                             ;     inc hl                      ; Point to next character
0C9F                             ;     cp " " + 1                  ; ignore whitespace
0C9F                             ;     jr c,blockLength1
0C9F                             ;     cp ")"
0C9F                             ;     jr z,blockLength4
0C9F                             ;     cp "}"
0C9F                             ;     jr z,blockLength4
0C9F                             ;     cp "]"
0C9F                             ;     jr z,blockLength4
0C9F                             ;     cp "("
0C9F                             ;     jr z,blockLength2
0C9F                             ;     cp "{"
0C9F                             ;     jr z,blockLength2
0C9F                             ;     cp "["
0C9F                             ;     jr z,blockLength2
0C9F                             ;     cp "'"
0C9F                             ;     jr z,blockLength3
0C9F                             ;     cp "`"
0C9F                             ;     jr z,blockLength3
0C9F                             ;     cp DQUOTE
0C9F                             ;     jr z,blockLength3
0C9F                             ;     jr blockLength1
0C9F                             ; blockLength2:
0C9F                             ;     inc d
0C9F                             ;     jr blockLength1
0C9F                             ; blockLength4:
0C9F                             ;     dec d
0C9F                             ;     jr nz, blockLength1         ; get the next element
0C9F                             ; blockLength3:
0C9F                             ;     ld a,$80
0C9F                             ;     xor d
0C9F                             ;     ld d,a
0C9F                             ;     jr nz, blockLength1
0C9F                             ;     pop hl                      ; hl = block*
0C9F                             ;     or a
0C9F                             ;     sbc hl,de
0C9F                             ;     push hl
0C9F                             ;     jp (ix)
0C9F                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C9F                             ; \a start of stack \#3 depth \b base \$ prompt
0C9F                             ; DW dStack               ; a vS0 start of datastack			
0C9F                             ; DW FALSE                ; b vBase16
0C9F                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C9F                             ; DW 0                    ; d
0C9F                             ; DW 65                   ; e vLastDef "A" last command u defined
0C9F                             ; DW 0                    ; f
0C9F                             ; DW page6                ; g 256 bytes limits
0C9F                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C9F                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
0D00   31 80 46               LD   SP,STACK   
0D03   CD 93 0B               CALL   init   
0D06   CD 16 45               CALL   execStr   
0D09   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
0D1D                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
0D1D   E1                     POP   HL   
0D1E   E5                     PUSH   HL   
0D1F   11 04 00               LD   DE,4   
0D22   B7                     OR   A   
0D23   ED 52                  SBC   HL,DE   
0D25   7D                     LD   A,L   
0D26   B4                     OR   H   
0D27   CA 8E 0D               JP   Z,expectM_0_2602S50   
0D2A   CD 8C 0B               CALL   printStr   
0D2D   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
0D47   CD 8C 0B               CALL   printStr   
0D4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D59   21 04 00               LD   hl,4   
0D5C   E5                     PUSH   hl   
0D5D   CD 53 0C               CALL   run   
0D60   2E 00                  .CSTR   "."   
0D62   CD 8C 0B               CALL   printStr   
0D65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D72   E1                     POP   hl   
0D73   E5                     PUSH   hl   
0D74   E5                     PUSH   hl   
0D75   CD 53 0C               CALL   run   
0D78   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0D8C   76                     HALT      
0D8D   00                     .CSTR      
0D8E                EXPECTM_0_2602S50:      
0D8E   E1                     POP   HL   
0D8F                             ; test "5 [4] :ab{$a $b +}; /pa ^", 9
0D8F   CD 8C 0B               CALL   printStr   
0D92   44 6F 6E 65 21 00      .CSTR   "Done!"   
0D98   76                     HALT      
0D99                             ; 
0D99                          ;*Macro unroll:  test "/f", false
0D99   31 80 46               LD   SP,STACK   
0D9C   CD 93 0B               CALL   init   
0D9F   CD 16 45               CALL   execStr   
0DA2   2F 66 00               .CSTR   "/f"   
0DA5                          ;*Macro unroll:  expect "/f",false
0DA5   E1                     POP   HL   
0DA6   E5                     PUSH   HL   
0DA7   11 00 00               LD   DE,false   
0DAA   B7                     OR   A   
0DAB   ED 52                  SBC   HL,DE   
0DAD   7D                     LD   A,L   
0DAE   B4                     OR   H   
0DAF   CA 05 0E               JP   Z,expectM_0_2608S50   
0DB2   CD 8C 0B               CALL   printStr   
0DB5   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0DBE   CD 8C 0B               CALL   printStr   
0DC1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DD0   21 00 00               LD   hl,false   
0DD3   E5                     PUSH   hl   
0DD4   CD 53 0C               CALL   run   
0DD7   2E 00                  .CSTR   "."   
0DD9   CD 8C 0B               CALL   printStr   
0DDC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DE9   E1                     POP   hl   
0DEA   E5                     PUSH   hl   
0DEB   E5                     PUSH   hl   
0DEC   CD 53 0C               CALL   run   
0DEF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E03   76                     HALT      
0E04   00                     .CSTR      
0E05                EXPECTM_0_2608S50:      
0E05   E1                     POP   HL   
0E06                          ;*Macro unroll:  test "/t", true
0E06   31 80 46               LD   SP,STACK   
0E09   CD 93 0B               CALL   init   
0E0C   CD 16 45               CALL   execStr   
0E0F   2F 74 00               .CSTR   "/t"   
0E12                          ;*Macro unroll:  expect "/t",true
0E12   E1                     POP   HL   
0E13   E5                     PUSH   HL   
0E14   11 FF FF               LD   DE,true   
0E17   B7                     OR   A   
0E18   ED 52                  SBC   HL,DE   
0E1A   7D                     LD   A,L   
0E1B   B4                     OR   H   
0E1C   CA 72 0E               JP   Z,expectM_0_2609S50   
0E1F   CD 8C 0B               CALL   printStr   
0E22   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E2B   CD 8C 0B               CALL   printStr   
0E2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E3D   21 FF FF               LD   hl,true   
0E40   E5                     PUSH   hl   
0E41   CD 53 0C               CALL   run   
0E44   2E 00                  .CSTR   "."   
0E46   CD 8C 0B               CALL   printStr   
0E49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E56   E1                     POP   hl   
0E57   E5                     PUSH   hl   
0E58   E5                     PUSH   hl   
0E59   CD 53 0C               CALL   run   
0E5C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E70   76                     HALT      
0E71   00                     .CSTR      
0E72                EXPECTM_0_2609S50:      
0E72   E1                     POP   HL   
0E73                          ;*Macro unroll:  test "1", 1
0E73   31 80 46               LD   SP,STACK   
0E76   CD 93 0B               CALL   init   
0E79   CD 16 45               CALL   execStr   
0E7C   31 00                  .CSTR   "1"   
0E7E                          ;*Macro unroll:  expect "1",1
0E7E   E1                     POP   HL   
0E7F   E5                     PUSH   HL   
0E80   11 01 00               LD   DE,1   
0E83   B7                     OR   A   
0E84   ED 52                  SBC   HL,DE   
0E86   7D                     LD   A,L   
0E87   B4                     OR   H   
0E88   CA DD 0E               JP   Z,expectM_0_2610S50   
0E8B   CD 8C 0B               CALL   printStr   
0E8E   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E96   CD 8C 0B               CALL   printStr   
0E99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EA8   21 01 00               LD   hl,1   
0EAB   E5                     PUSH   hl   
0EAC   CD 53 0C               CALL   run   
0EAF   2E 00                  .CSTR   "."   
0EB1   CD 8C 0B               CALL   printStr   
0EB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EC1   E1                     POP   hl   
0EC2   E5                     PUSH   hl   
0EC3   E5                     PUSH   hl   
0EC4   CD 53 0C               CALL   run   
0EC7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0EDB   76                     HALT      
0EDC   00                     .CSTR      
0EDD                EXPECTM_0_2610S50:      
0EDD   E1                     POP   HL   
0EDE                          ;*Macro unroll:  test "2", 2
0EDE   31 80 46               LD   SP,STACK   
0EE1   CD 93 0B               CALL   init   
0EE4   CD 16 45               CALL   execStr   
0EE7   32 00                  .CSTR   "2"   
0EE9                          ;*Macro unroll:  expect "2",2
0EE9   E1                     POP   HL   
0EEA   E5                     PUSH   HL   
0EEB   11 02 00               LD   DE,2   
0EEE   B7                     OR   A   
0EEF   ED 52                  SBC   HL,DE   
0EF1   7D                     LD   A,L   
0EF2   B4                     OR   H   
0EF3   CA 48 0F               JP   Z,expectM_0_2611S50   
0EF6   CD 8C 0B               CALL   printStr   
0EF9   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F01   CD 8C 0B               CALL   printStr   
0F04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F13   21 02 00               LD   hl,2   
0F16   E5                     PUSH   hl   
0F17   CD 53 0C               CALL   run   
0F1A   2E 00                  .CSTR   "."   
0F1C   CD 8C 0B               CALL   printStr   
0F1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F2C   E1                     POP   hl   
0F2D   E5                     PUSH   hl   
0F2E   E5                     PUSH   hl   
0F2F   CD 53 0C               CALL   run   
0F32   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F46   76                     HALT      
0F47   00                     .CSTR      
0F48                EXPECTM_0_2611S50:      
0F48   E1                     POP   HL   
0F49                          ;*Macro unroll:  test "1", 1
0F49   31 80 46               LD   SP,STACK   
0F4C   CD 93 0B               CALL   init   
0F4F   CD 16 45               CALL   execStr   
0F52   31 00                  .CSTR   "1"   
0F54                          ;*Macro unroll:  expect "1",1
0F54   E1                     POP   HL   
0F55   E5                     PUSH   HL   
0F56   11 01 00               LD   DE,1   
0F59   B7                     OR   A   
0F5A   ED 52                  SBC   HL,DE   
0F5C   7D                     LD   A,L   
0F5D   B4                     OR   H   
0F5E   CA B3 0F               JP   Z,expectM_0_2612S50   
0F61   CD 8C 0B               CALL   printStr   
0F64   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F6C   CD 8C 0B               CALL   printStr   
0F6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F7E   21 01 00               LD   hl,1   
0F81   E5                     PUSH   hl   
0F82   CD 53 0C               CALL   run   
0F85   2E 00                  .CSTR   "."   
0F87   CD 8C 0B               CALL   printStr   
0F8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F97   E1                     POP   hl   
0F98   E5                     PUSH   hl   
0F99   E5                     PUSH   hl   
0F9A   CD 53 0C               CALL   run   
0F9D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0FB1   76                     HALT      
0FB2   00                     .CSTR      
0FB3                EXPECTM_0_2612S50:      
0FB3   E1                     POP   HL   
0FB4                          ;*Macro unroll:  test "0", 0
0FB4   31 80 46               LD   SP,STACK   
0FB7   CD 93 0B               CALL   init   
0FBA   CD 16 45               CALL   execStr   
0FBD   30 00                  .CSTR   "0"   
0FBF                          ;*Macro unroll:  expect "0",0
0FBF   E1                     POP   HL   
0FC0   E5                     PUSH   HL   
0FC1   11 00 00               LD   DE,0   
0FC4   B7                     OR   A   
0FC5   ED 52                  SBC   HL,DE   
0FC7   7D                     LD   A,L   
0FC8   B4                     OR   H   
0FC9   CA 1E 10               JP   Z,expectM_0_2613S50   
0FCC   CD 8C 0B               CALL   printStr   
0FCF   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0FD7   CD 8C 0B               CALL   printStr   
0FDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FE9   21 00 00               LD   hl,0   
0FEC   E5                     PUSH   hl   
0FED   CD 53 0C               CALL   run   
0FF0   2E 00                  .CSTR   "."   
0FF2   CD 8C 0B               CALL   printStr   
0FF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1002   E1                     POP   hl   
1003   E5                     PUSH   hl   
1004   E5                     PUSH   hl   
1005   CD 53 0C               CALL   run   
1008   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
101C   76                     HALT      
101D   00                     .CSTR      
101E                EXPECTM_0_2613S50:      
101E   E1                     POP   HL   
101F                          ;*Macro unroll:  test "10", 10
101F   31 80 46               LD   SP,STACK   
1022   CD 93 0B               CALL   init   
1025   CD 16 45               CALL   execStr   
1028   31 30 00               .CSTR   "10"   
102B                          ;*Macro unroll:  expect "10",10
102B   E1                     POP   HL   
102C   E5                     PUSH   HL   
102D   11 0A 00               LD   DE,10   
1030   B7                     OR   A   
1031   ED 52                  SBC   HL,DE   
1033   7D                     LD   A,L   
1034   B4                     OR   H   
1035   CA 8B 10               JP   Z,expectM_0_2614S50   
1038   CD 8C 0B               CALL   printStr   
103B   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1044   CD 8C 0B               CALL   printStr   
1047   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1056   21 0A 00               LD   hl,10   
1059   E5                     PUSH   hl   
105A   CD 53 0C               CALL   run   
105D   2E 00                  .CSTR   "."   
105F   CD 8C 0B               CALL   printStr   
1062   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
106F   E1                     POP   hl   
1070   E5                     PUSH   hl   
1071   E5                     PUSH   hl   
1072   CD 53 0C               CALL   run   
1075   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1089   76                     HALT      
108A   00                     .CSTR      
108B                EXPECTM_0_2614S50:      
108B   E1                     POP   HL   
108C                          ;*Macro unroll:  test "123", 123
108C   31 80 46               LD   SP,STACK   
108F   CD 93 0B               CALL   init   
1092   CD 16 45               CALL   execStr   
1095   31 32 33 00            .CSTR   "123"   
1099                          ;*Macro unroll:  expect "123",123
1099   E1                     POP   HL   
109A   E5                     PUSH   HL   
109B   11 7B 00               LD   DE,123   
109E   B7                     OR   A   
109F   ED 52                  SBC   HL,DE   
10A1   7D                     LD   A,L   
10A2   B4                     OR   H   
10A3   CA FA 10               JP   Z,expectM_0_2615S50   
10A6   CD 8C 0B               CALL   printStr   
10A9   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
10B3   CD 8C 0B               CALL   printStr   
10B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10C5   21 7B 00               LD   hl,123   
10C8   E5                     PUSH   hl   
10C9   CD 53 0C               CALL   run   
10CC   2E 00                  .CSTR   "."   
10CE   CD 8C 0B               CALL   printStr   
10D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10DE   E1                     POP   hl   
10DF   E5                     PUSH   hl   
10E0   E5                     PUSH   hl   
10E1   CD 53 0C               CALL   run   
10E4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
10F8   76                     HALT      
10F9   00                     .CSTR      
10FA                EXPECTM_0_2615S50:      
10FA   E1                     POP   HL   
10FB                          ;*Macro unroll:  test "-1",-1
10FB   31 80 46               LD   SP,STACK   
10FE   CD 93 0B               CALL   init   
1101   CD 16 45               CALL   execStr   
1104   2D 31 00               .CSTR   "-1"   
1107                          ;*Macro unroll:  expect "-1",-1
1107   E1                     POP   HL   
1108   E5                     PUSH   HL   
1109   11 FF FF               LD   DE,-1   
110C   B7                     OR   A   
110D   ED 52                  SBC   HL,DE   
110F   7D                     LD   A,L   
1110   B4                     OR   H   
1111   CA 67 11               JP   Z,expectM_0_2616S50   
1114   CD 8C 0B               CALL   printStr   
1117   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1120   CD 8C 0B               CALL   printStr   
1123   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1132   21 FF FF               LD   hl,-1   
1135   E5                     PUSH   hl   
1136   CD 53 0C               CALL   run   
1139   2E 00                  .CSTR   "."   
113B   CD 8C 0B               CALL   printStr   
113E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
114B   E1                     POP   hl   
114C   E5                     PUSH   hl   
114D   E5                     PUSH   hl   
114E   CD 53 0C               CALL   run   
1151   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1165   76                     HALT      
1166   00                     .CSTR      
1167                EXPECTM_0_2616S50:      
1167   E1                     POP   HL   
1168                          ;*Macro unroll:  test "''", 0
1168   31 80 46               LD   SP,STACK   
116B   CD 93 0B               CALL   init   
116E   CD 16 45               CALL   execStr   
1171   27 27 00               .CSTR   "''"   
1174                          ;*Macro unroll:  expect "''",0
1174   E1                     POP   HL   
1175   E5                     PUSH   HL   
1176   11 00 00               LD   DE,0   
1179   B7                     OR   A   
117A   ED 52                  SBC   HL,DE   
117C   7D                     LD   A,L   
117D   B4                     OR   H   
117E   CA D4 11               JP   Z,expectM_0_2617S50   
1181   CD 8C 0B               CALL   printStr   
1184   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
118D   CD 8C 0B               CALL   printStr   
1190   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
119F   21 00 00               LD   hl,0   
11A2   E5                     PUSH   hl   
11A3   CD 53 0C               CALL   run   
11A6   2E 00                  .CSTR   "."   
11A8   CD 8C 0B               CALL   printStr   
11AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11B8   E1                     POP   hl   
11B9   E5                     PUSH   hl   
11BA   E5                     PUSH   hl   
11BB   CD 53 0C               CALL   run   
11BE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
11D2   76                     HALT      
11D3   00                     .CSTR      
11D4                EXPECTM_0_2617S50:      
11D4   E1                     POP   HL   
11D5                          ;*Macro unroll:  test "'a'", $61
11D5   31 80 46               LD   SP,STACK   
11D8   CD 93 0B               CALL   init   
11DB   CD 16 45               CALL   execStr   
11DE   27 61 27 00            .CSTR   "'a'"   
11E2                          ;*Macro unroll:  expect "'a'",$61
11E2   E1                     POP   HL   
11E3   E5                     PUSH   HL   
11E4   11 61 00               LD   DE,$61   
11E7   B7                     OR   A   
11E8   ED 52                  SBC   HL,DE   
11EA   7D                     LD   A,L   
11EB   B4                     OR   H   
11EC   CA 43 12               JP   Z,expectM_0_2618S50   
11EF   CD 8C 0B               CALL   printStr   
11F2   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
11FC   CD 8C 0B               CALL   printStr   
11FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
120E   21 61 00               LD   hl,$61   
1211   E5                     PUSH   hl   
1212   CD 53 0C               CALL   run   
1215   2E 00                  .CSTR   "."   
1217   CD 8C 0B               CALL   printStr   
121A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1227   E1                     POP   hl   
1228   E5                     PUSH   hl   
1229   E5                     PUSH   hl   
122A   CD 53 0C               CALL   run   
122D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1241   76                     HALT      
1242   00                     .CSTR      
1243                EXPECTM_0_2618S50:      
1243   E1                     POP   HL   
1244                          ;*Macro unroll:  test "'\\''", $27
1244   31 80 46               LD   SP,STACK   
1247   CD 93 0B               CALL   init   
124A   CD 16 45               CALL   execStr   
124D   27 5C 27 27 00         .CSTR   "'\\''"   
1252                          ;*Macro unroll:  expect "'\\''",$27
1252   E1                     POP   HL   
1253   E5                     PUSH   HL   
1254   11 27 00               LD   DE,$27   
1257   B7                     OR   A   
1258   ED 52                  SBC   HL,DE   
125A   7D                     LD   A,L   
125B   B4                     OR   H   
125C   CA B4 12               JP   Z,expectM_0_2619S50   
125F   CD 8C 0B               CALL   printStr   
1262   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
126D   CD 8C 0B               CALL   printStr   
1270   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
127F   21 27 00               LD   hl,$27   
1282   E5                     PUSH   hl   
1283   CD 53 0C               CALL   run   
1286   2E 00                  .CSTR   "."   
1288   CD 8C 0B               CALL   printStr   
128B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1298   E1                     POP   hl   
1299   E5                     PUSH   hl   
129A   E5                     PUSH   hl   
129B   CD 53 0C               CALL   run   
129E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
12B2   76                     HALT      
12B3   00                     .CSTR      
12B4                EXPECTM_0_2619S50:      
12B4   E1                     POP   HL   
12B5                          ;*Macro unroll:  test "#10", $10
12B5   31 80 46               LD   SP,STACK   
12B8   CD 93 0B               CALL   init   
12BB   CD 16 45               CALL   execStr   
12BE   23 31 30 00            .CSTR   "#10"   
12C2                          ;*Macro unroll:  expect "#10",$10
12C2   E1                     POP   HL   
12C3   E5                     PUSH   HL   
12C4   11 10 00               LD   DE,$10   
12C7   B7                     OR   A   
12C8   ED 52                  SBC   HL,DE   
12CA   7D                     LD   A,L   
12CB   B4                     OR   H   
12CC   CA 23 13               JP   Z,expectM_0_2620S50   
12CF   CD 8C 0B               CALL   printStr   
12D2   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
12DC   CD 8C 0B               CALL   printStr   
12DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12EE   21 10 00               LD   hl,$10   
12F1   E5                     PUSH   hl   
12F2   CD 53 0C               CALL   run   
12F5   2E 00                  .CSTR   "."   
12F7   CD 8C 0B               CALL   printStr   
12FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1307   E1                     POP   hl   
1308   E5                     PUSH   hl   
1309   E5                     PUSH   hl   
130A   CD 53 0C               CALL   run   
130D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1321   76                     HALT      
1322   00                     .CSTR      
1323                EXPECTM_0_2620S50:      
1323   E1                     POP   HL   
1324                          ;*Macro unroll:  test "#FF", $FF
1324   31 80 46               LD   SP,STACK   
1327   CD 93 0B               CALL   init   
132A   CD 16 45               CALL   execStr   
132D   23 46 46 00            .CSTR   "#FF"   
1331                          ;*Macro unroll:  expect "#FF",$FF
1331   E1                     POP   HL   
1332   E5                     PUSH   HL   
1333   11 FF 00               LD   DE,$FF   
1336   B7                     OR   A   
1337   ED 52                  SBC   HL,DE   
1339   7D                     LD   A,L   
133A   B4                     OR   H   
133B   CA 92 13               JP   Z,expectM_0_2621S50   
133E   CD 8C 0B               CALL   printStr   
1341   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
134B   CD 8C 0B               CALL   printStr   
134E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
135D   21 FF 00               LD   hl,$FF   
1360   E5                     PUSH   hl   
1361   CD 53 0C               CALL   run   
1364   2E 00                  .CSTR   "."   
1366   CD 8C 0B               CALL   printStr   
1369   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1376   E1                     POP   hl   
1377   E5                     PUSH   hl   
1378   E5                     PUSH   hl   
1379   CD 53 0C               CALL   run   
137C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1390   76                     HALT      
1391   00                     .CSTR      
1392                EXPECTM_0_2621S50:      
1392   E1                     POP   HL   
1393                          ;*Macro unroll:  test "-1 2 +",1
1393   31 80 46               LD   SP,STACK   
1396   CD 93 0B               CALL   init   
1399   CD 16 45               CALL   execStr   
139C   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
13A3                          ;*Macro unroll:  expect "-1 2 +",1
13A3   E1                     POP   HL   
13A4   E5                     PUSH   HL   
13A5   11 01 00               LD   DE,1   
13A8   B7                     OR   A   
13A9   ED 52                  SBC   HL,DE   
13AB   7D                     LD   A,L   
13AC   B4                     OR   H   
13AD   CA 07 14               JP   Z,expectM_0_2622S50   
13B0   CD 8C 0B               CALL   printStr   
13B3   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
13C0   CD 8C 0B               CALL   printStr   
13C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D2   21 01 00               LD   hl,1   
13D5   E5                     PUSH   hl   
13D6   CD 53 0C               CALL   run   
13D9   2E 00                  .CSTR   "."   
13DB   CD 8C 0B               CALL   printStr   
13DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EB   E1                     POP   hl   
13EC   E5                     PUSH   hl   
13ED   E5                     PUSH   hl   
13EE   CD 53 0C               CALL   run   
13F1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1405   76                     HALT      
1406   00                     .CSTR      
1407                EXPECTM_0_2622S50:      
1407   E1                     POP   HL   
1408                          ;*Macro unroll:  test "-1 1 +",0
1408   31 80 46               LD   SP,STACK   
140B   CD 93 0B               CALL   init   
140E   CD 16 45               CALL   execStr   
1411   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1418                          ;*Macro unroll:  expect "-1 1 +",0
1418   E1                     POP   HL   
1419   E5                     PUSH   HL   
141A   11 00 00               LD   DE,0   
141D   B7                     OR   A   
141E   ED 52                  SBC   HL,DE   
1420   7D                     LD   A,L   
1421   B4                     OR   H   
1422   CA 7C 14               JP   Z,expectM_0_2623S50   
1425   CD 8C 0B               CALL   printStr   
1428   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1435   CD 8C 0B               CALL   printStr   
1438   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1447   21 00 00               LD   hl,0   
144A   E5                     PUSH   hl   
144B   CD 53 0C               CALL   run   
144E   2E 00                  .CSTR   "."   
1450   CD 8C 0B               CALL   printStr   
1453   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1460   E1                     POP   hl   
1461   E5                     PUSH   hl   
1462   E5                     PUSH   hl   
1463   CD 53 0C               CALL   run   
1466   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
147A   76                     HALT      
147B   00                     .CSTR      
147C                EXPECTM_0_2623S50:      
147C   E1                     POP   HL   
147D                          ;*Macro unroll:  test "1 2 +", 3
147D   31 80 46               LD   SP,STACK   
1480   CD 93 0B               CALL   init   
1483   CD 16 45               CALL   execStr   
1486   31 20 32 20 2B 00      .CSTR   "1 2 +"   
148C                          ;*Macro unroll:  expect "1 2 +",3
148C   E1                     POP   HL   
148D   E5                     PUSH   HL   
148E   11 03 00               LD   DE,3   
1491   B7                     OR   A   
1492   ED 52                  SBC   HL,DE   
1494   7D                     LD   A,L   
1495   B4                     OR   H   
1496   CA EF 14               JP   Z,expectM_0_2624S50   
1499   CD 8C 0B               CALL   printStr   
149C   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
14A8   CD 8C 0B               CALL   printStr   
14AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14BA   21 03 00               LD   hl,3   
14BD   E5                     PUSH   hl   
14BE   CD 53 0C               CALL   run   
14C1   2E 00                  .CSTR   "."   
14C3   CD 8C 0B               CALL   printStr   
14C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D3   E1                     POP   hl   
14D4   E5                     PUSH   hl   
14D5   E5                     PUSH   hl   
14D6   CD 53 0C               CALL   run   
14D9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
14ED   76                     HALT      
14EE   00                     .CSTR      
14EF                EXPECTM_0_2624S50:      
14EF   E1                     POP   HL   
14F0                          ;*Macro unroll:  test "4 1 2 +", 3
14F0   31 80 46               LD   SP,STACK   
14F3   CD 93 0B               CALL   init   
14F6   CD 16 45               CALL   execStr   
14F9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1501                          ;*Macro unroll:  expect "4 1 2 +",3
1501   E1                     POP   HL   
1502   E5                     PUSH   HL   
1503   11 03 00               LD   DE,3   
1506   B7                     OR   A   
1507   ED 52                  SBC   HL,DE   
1509   7D                     LD   A,L   
150A   B4                     OR   H   
150B   CA 66 15               JP   Z,expectM_0_2625S50   
150E   CD 8C 0B               CALL   printStr   
1511   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
151F   CD 8C 0B               CALL   printStr   
1522   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1531   21 03 00               LD   hl,3   
1534   E5                     PUSH   hl   
1535   CD 53 0C               CALL   run   
1538   2E 00                  .CSTR   "."   
153A   CD 8C 0B               CALL   printStr   
153D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
154A   E1                     POP   hl   
154B   E5                     PUSH   hl   
154C   E5                     PUSH   hl   
154D   CD 53 0C               CALL   run   
1550   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1564   76                     HALT      
1565   00                     .CSTR      
1566                EXPECTM_0_2625S50:      
1566   E1                     POP   HL   
1567                          ;*Macro unroll:  test "123 456 +", 123+456
1567   31 80 46               LD   SP,STACK   
156A   CD 93 0B               CALL   init   
156D   CD 16 45               CALL   execStr   
1570   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
157A                          ;*Macro unroll:  expect "123 456 +",123+456
157A   E1                     POP   HL   
157B   E5                     PUSH   HL   
157C   11 43 02               LD   DE,123+456   
157F   B7                     OR   A   
1580   ED 52                  SBC   HL,DE   
1582   7D                     LD   A,L   
1583   B4                     OR   H   
1584   CA E1 15               JP   Z,expectM_0_2626S50   
1587   CD 8C 0B               CALL   printStr   
158A   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
159A   CD 8C 0B               CALL   printStr   
159D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AC   21 43 02               LD   hl,123+456   
15AF   E5                     PUSH   hl   
15B0   CD 53 0C               CALL   run   
15B3   2E 00                  .CSTR   "."   
15B5   CD 8C 0B               CALL   printStr   
15B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C5   E1                     POP   hl   
15C6   E5                     PUSH   hl   
15C7   E5                     PUSH   hl   
15C8   CD 53 0C               CALL   run   
15CB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
15DF   76                     HALT      
15E0   00                     .CSTR      
15E1                EXPECTM_0_2626S50:      
15E1   E1                     POP   HL   
15E2                          ;*Macro unroll:  test "64 128 +", 64+128
15E2   31 80 46               LD   SP,STACK   
15E5   CD 93 0B               CALL   init   
15E8   CD 16 45               CALL   execStr   
15EB   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
15F4                          ;*Macro unroll:  expect "64 128 +",64+128
15F4   E1                     POP   HL   
15F5   E5                     PUSH   HL   
15F6   11 C0 00               LD   DE,64+128   
15F9   B7                     OR   A   
15FA   ED 52                  SBC   HL,DE   
15FC   7D                     LD   A,L   
15FD   B4                     OR   H   
15FE   CA 5A 16               JP   Z,expectM_0_2627S50   
1601   CD 8C 0B               CALL   printStr   
1604   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1613   CD 8C 0B               CALL   printStr   
1616   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1625   21 C0 00               LD   hl,64+128   
1628   E5                     PUSH   hl   
1629   CD 53 0C               CALL   run   
162C   2E 00                  .CSTR   "."   
162E   CD 8C 0B               CALL   printStr   
1631   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
163E   E1                     POP   hl   
163F   E5                     PUSH   hl   
1640   E5                     PUSH   hl   
1641   CD 53 0C               CALL   run   
1644   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1658   76                     HALT      
1659   00                     .CSTR      
165A                EXPECTM_0_2627S50:      
165A   E1                     POP   HL   
165B                          ;*Macro unroll:  test "1 2 +", 3
165B   31 80 46               LD   SP,STACK   
165E   CD 93 0B               CALL   init   
1661   CD 16 45               CALL   execStr   
1664   31 20 32 20 2B 00      .CSTR   "1 2 +"   
166A                          ;*Macro unroll:  expect "1 2 +",3
166A   E1                     POP   HL   
166B   E5                     PUSH   HL   
166C   11 03 00               LD   DE,3   
166F   B7                     OR   A   
1670   ED 52                  SBC   HL,DE   
1672   7D                     LD   A,L   
1673   B4                     OR   H   
1674   CA CD 16               JP   Z,expectM_0_2628S50   
1677   CD 8C 0B               CALL   printStr   
167A   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1686   CD 8C 0B               CALL   printStr   
1689   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1698   21 03 00               LD   hl,3   
169B   E5                     PUSH   hl   
169C   CD 53 0C               CALL   run   
169F   2E 00                  .CSTR   "."   
16A1   CD 8C 0B               CALL   printStr   
16A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16B1   E1                     POP   hl   
16B2   E5                     PUSH   hl   
16B3   E5                     PUSH   hl   
16B4   CD 53 0C               CALL   run   
16B7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
16CB   76                     HALT      
16CC   00                     .CSTR      
16CD                EXPECTM_0_2628S50:      
16CD   E1                     POP   HL   
16CE                          ;*Macro unroll:  test "1a= a++ a",2
16CE   31 80 46               LD   SP,STACK   
16D1   CD 93 0B               CALL   init   
16D4   CD 16 45               CALL   execStr   
16D7   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
16E1                          ;*Macro unroll:  expect "1a= a++ a",2
16E1   E1                     POP   HL   
16E2   E5                     PUSH   HL   
16E3   11 02 00               LD   DE,2   
16E6   B7                     OR   A   
16E7   ED 52                  SBC   HL,DE   
16E9   7D                     LD   A,L   
16EA   B4                     OR   H   
16EB   CA 48 17               JP   Z,expectM_0_2629S50   
16EE   CD 8C 0B               CALL   printStr   
16F1   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1701   CD 8C 0B               CALL   printStr   
1704   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1713   21 02 00               LD   hl,2   
1716   E5                     PUSH   hl   
1717   CD 53 0C               CALL   run   
171A   2E 00                  .CSTR   "."   
171C   CD 8C 0B               CALL   printStr   
171F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
172C   E1                     POP   hl   
172D   E5                     PUSH   hl   
172E   E5                     PUSH   hl   
172F   CD 53 0C               CALL   run   
1732   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1746   76                     HALT      
1747   00                     .CSTR      
1748                EXPECTM_0_2629S50:      
1748   E1                     POP   HL   
1749                          ;*Macro unroll:  test "-1 -1 -",0
1749   31 80 46               LD   SP,STACK   
174C   CD 93 0B               CALL   init   
174F   CD 16 45               CALL   execStr   
1752   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
175A                          ;*Macro unroll:  expect "-1 -1 -",0
175A   E1                     POP   HL   
175B   E5                     PUSH   HL   
175C   11 00 00               LD   DE,0   
175F   B7                     OR   A   
1760   ED 52                  SBC   HL,DE   
1762   7D                     LD   A,L   
1763   B4                     OR   H   
1764   CA BF 17               JP   Z,expectM_0_2630S50   
1767   CD 8C 0B               CALL   printStr   
176A   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1778   CD 8C 0B               CALL   printStr   
177B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
178A   21 00 00               LD   hl,0   
178D   E5                     PUSH   hl   
178E   CD 53 0C               CALL   run   
1791   2E 00                  .CSTR   "."   
1793   CD 8C 0B               CALL   printStr   
1796   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17A3   E1                     POP   hl   
17A4   E5                     PUSH   hl   
17A5   E5                     PUSH   hl   
17A6   CD 53 0C               CALL   run   
17A9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
17BD   76                     HALT      
17BE   00                     .CSTR      
17BF                EXPECTM_0_2630S50:      
17BF   E1                     POP   HL   
17C0                          ;*Macro unroll:  test "5 3 -", 2
17C0   31 80 46               LD   SP,STACK   
17C3   CD 93 0B               CALL   init   
17C6   CD 16 45               CALL   execStr   
17C9   35 20 33 20 2D 00      .CSTR   "5 3 -"   
17CF                          ;*Macro unroll:  expect "5 3 -",2
17CF   E1                     POP   HL   
17D0   E5                     PUSH   HL   
17D1   11 02 00               LD   DE,2   
17D4   B7                     OR   A   
17D5   ED 52                  SBC   HL,DE   
17D7   7D                     LD   A,L   
17D8   B4                     OR   H   
17D9   CA 32 18               JP   Z,expectM_0_2631S50   
17DC   CD 8C 0B               CALL   printStr   
17DF   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
17EB   CD 8C 0B               CALL   printStr   
17EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17FD   21 02 00               LD   hl,2   
1800   E5                     PUSH   hl   
1801   CD 53 0C               CALL   run   
1804   2E 00                  .CSTR   "."   
1806   CD 8C 0B               CALL   printStr   
1809   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1816   E1                     POP   hl   
1817   E5                     PUSH   hl   
1818   E5                     PUSH   hl   
1819   CD 53 0C               CALL   run   
181C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1830   76                     HALT      
1831   00                     .CSTR      
1832                EXPECTM_0_2631S50:      
1832   E1                     POP   HL   
1833                          ;*Macro unroll:  test "2 1 -",1
1833   31 80 46               LD   SP,STACK   
1836   CD 93 0B               CALL   init   
1839   CD 16 45               CALL   execStr   
183C   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1842                          ;*Macro unroll:  expect "2 1 -",1
1842   E1                     POP   HL   
1843   E5                     PUSH   HL   
1844   11 01 00               LD   DE,1   
1847   B7                     OR   A   
1848   ED 52                  SBC   HL,DE   
184A   7D                     LD   A,L   
184B   B4                     OR   H   
184C   CA A5 18               JP   Z,expectM_0_2632S50   
184F   CD 8C 0B               CALL   printStr   
1852   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
185E   CD 8C 0B               CALL   printStr   
1861   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1870   21 01 00               LD   hl,1   
1873   E5                     PUSH   hl   
1874   CD 53 0C               CALL   run   
1877   2E 00                  .CSTR   "."   
1879   CD 8C 0B               CALL   printStr   
187C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1889   E1                     POP   hl   
188A   E5                     PUSH   hl   
188B   E5                     PUSH   hl   
188C   CD 53 0C               CALL   run   
188F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
18A3   76                     HALT      
18A4   00                     .CSTR      
18A5                EXPECTM_0_2632S50:      
18A5   E1                     POP   HL   
18A6                          ;*Macro unroll:  test "3a= a-- a",2
18A6   31 80 46               LD   SP,STACK   
18A9   CD 93 0B               CALL   init   
18AC   CD 16 45               CALL   execStr   
18AF   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
18B9                          ;*Macro unroll:  expect "3a= a-- a",2
18B9   E1                     POP   HL   
18BA   E5                     PUSH   HL   
18BB   11 02 00               LD   DE,2   
18BE   B7                     OR   A   
18BF   ED 52                  SBC   HL,DE   
18C1   7D                     LD   A,L   
18C2   B4                     OR   H   
18C3   CA 20 19               JP   Z,expectM_0_2633S50   
18C6   CD 8C 0B               CALL   printStr   
18C9   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
18D9   CD 8C 0B               CALL   printStr   
18DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18EB   21 02 00               LD   hl,2   
18EE   E5                     PUSH   hl   
18EF   CD 53 0C               CALL   run   
18F2   2E 00                  .CSTR   "."   
18F4   CD 8C 0B               CALL   printStr   
18F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1904   E1                     POP   hl   
1905   E5                     PUSH   hl   
1906   E5                     PUSH   hl   
1907   CD 53 0C               CALL   run   
190A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
191E   76                     HALT      
191F   00                     .CSTR      
1920                EXPECTM_0_2633S50:      
1920   E1                     POP   HL   
1921                          ;*Macro unroll:  test "3 5 &", 1
1921   31 80 46               LD   SP,STACK   
1924   CD 93 0B               CALL   init   
1927   CD 16 45               CALL   execStr   
192A   33 20 35 20 26 00      .CSTR   "3 5 &"   
1930                          ;*Macro unroll:  expect "3 5 &",1
1930   E1                     POP   HL   
1931   E5                     PUSH   HL   
1932   11 01 00               LD   DE,1   
1935   B7                     OR   A   
1936   ED 52                  SBC   HL,DE   
1938   7D                     LD   A,L   
1939   B4                     OR   H   
193A   CA 93 19               JP   Z,expectM_0_2634S50   
193D   CD 8C 0B               CALL   printStr   
1940   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
194C   CD 8C 0B               CALL   printStr   
194F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195E   21 01 00               LD   hl,1   
1961   E5                     PUSH   hl   
1962   CD 53 0C               CALL   run   
1965   2E 00                  .CSTR   "."   
1967   CD 8C 0B               CALL   printStr   
196A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1977   E1                     POP   hl   
1978   E5                     PUSH   hl   
1979   E5                     PUSH   hl   
197A   CD 53 0C               CALL   run   
197D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1991   76                     HALT      
1992   00                     .CSTR      
1993                EXPECTM_0_2634S50:      
1993   E1                     POP   HL   
1994                          ;*Macro unroll:  test "3 5 |", 7
1994   31 80 46               LD   SP,STACK   
1997   CD 93 0B               CALL   init   
199A   CD 16 45               CALL   execStr   
199D   33 20 35 20 7C 00      .CSTR   "3 5 |"   
19A3                          ;*Macro unroll:  expect "3 5 |",7
19A3   E1                     POP   HL   
19A4   E5                     PUSH   HL   
19A5   11 07 00               LD   DE,7   
19A8   B7                     OR   A   
19A9   ED 52                  SBC   HL,DE   
19AB   7D                     LD   A,L   
19AC   B4                     OR   H   
19AD   CA 06 1A               JP   Z,expectM_0_2635S50   
19B0   CD 8C 0B               CALL   printStr   
19B3   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
19BF   CD 8C 0B               CALL   printStr   
19C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19D1   21 07 00               LD   hl,7   
19D4   E5                     PUSH   hl   
19D5   CD 53 0C               CALL   run   
19D8   2E 00                  .CSTR   "."   
19DA   CD 8C 0B               CALL   printStr   
19DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19EA   E1                     POP   hl   
19EB   E5                     PUSH   hl   
19EC   E5                     PUSH   hl   
19ED   CD 53 0C               CALL   run   
19F0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A04   76                     HALT      
1A05   00                     .CSTR      
1A06                EXPECTM_0_2635S50:      
1A06   E1                     POP   HL   
1A07                          ;*Macro unroll:  test "3 5 /x", 6
1A07   31 80 46               LD   SP,STACK   
1A0A   CD 93 0B               CALL   init   
1A0D   CD 16 45               CALL   execStr   
1A10   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1A17                          ;*Macro unroll:  expect "3 5 /x",6
1A17   E1                     POP   HL   
1A18   E5                     PUSH   HL   
1A19   11 06 00               LD   DE,6   
1A1C   B7                     OR   A   
1A1D   ED 52                  SBC   HL,DE   
1A1F   7D                     LD   A,L   
1A20   B4                     OR   H   
1A21   CA 7B 1A               JP   Z,expectM_0_2636S50   
1A24   CD 8C 0B               CALL   printStr   
1A27   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1A34   CD 8C 0B               CALL   printStr   
1A37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A46   21 06 00               LD   hl,6   
1A49   E5                     PUSH   hl   
1A4A   CD 53 0C               CALL   run   
1A4D   2E 00                  .CSTR   "."   
1A4F   CD 8C 0B               CALL   printStr   
1A52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5F   E1                     POP   hl   
1A60   E5                     PUSH   hl   
1A61   E5                     PUSH   hl   
1A62   CD 53 0C               CALL   run   
1A65   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A79   76                     HALT      
1A7A   00                     .CSTR      
1A7B                EXPECTM_0_2636S50:      
1A7B   E1                     POP   HL   
1A7C                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1A7C   31 80 46               LD   SP,STACK   
1A7F   CD 93 0B               CALL   init   
1A82   CD 16 45               CALL   execStr   
1A85   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1A94                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1A94   E1                     POP   HL   
1A95   E5                     PUSH   HL   
1A96   11 06 00               LD   DE,6   
1A99   B7                     OR   A   
1A9A   ED 52                  SBC   HL,DE   
1A9C   7D                     LD   A,L   
1A9D   B4                     OR   H   
1A9E   CA 00 1B               JP   Z,expectM_0_2637S50   
1AA1   CD 8C 0B               CALL   printStr   
1AA4   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1AB9   CD 8C 0B               CALL   printStr   
1ABC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ACB   21 06 00               LD   hl,6   
1ACE   E5                     PUSH   hl   
1ACF   CD 53 0C               CALL   run   
1AD2   2E 00                  .CSTR   "."   
1AD4   CD 8C 0B               CALL   printStr   
1AD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AE4   E1                     POP   hl   
1AE5   E5                     PUSH   hl   
1AE6   E5                     PUSH   hl   
1AE7   CD 53 0C               CALL   run   
1AEA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1AFE   76                     HALT      
1AFF   00                     .CSTR      
1B00                EXPECTM_0_2637S50:      
1B00   E1                     POP   HL   
1B01                          ;*Macro unroll:  test "2 3 *", 6
1B01   31 80 46               LD   SP,STACK   
1B04   CD 93 0B               CALL   init   
1B07   CD 16 45               CALL   execStr   
1B0A   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1B10                          ;*Macro unroll:  expect "2 3 *",6
1B10   E1                     POP   HL   
1B11   E5                     PUSH   HL   
1B12   11 06 00               LD   DE,6   
1B15   B7                     OR   A   
1B16   ED 52                  SBC   HL,DE   
1B18   7D                     LD   A,L   
1B19   B4                     OR   H   
1B1A   CA 73 1B               JP   Z,expectM_0_2638S50   
1B1D   CD 8C 0B               CALL   printStr   
1B20   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1B2C   CD 8C 0B               CALL   printStr   
1B2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B3E   21 06 00               LD   hl,6   
1B41   E5                     PUSH   hl   
1B42   CD 53 0C               CALL   run   
1B45   2E 00                  .CSTR   "."   
1B47   CD 8C 0B               CALL   printStr   
1B4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B57   E1                     POP   hl   
1B58   E5                     PUSH   hl   
1B59   E5                     PUSH   hl   
1B5A   CD 53 0C               CALL   run   
1B5D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B71   76                     HALT      
1B72   00                     .CSTR      
1B73                EXPECTM_0_2638S50:      
1B73   E1                     POP   HL   
1B74                          ;*Macro unroll:  test "1 2 3 + *", 5
1B74   31 80 46               LD   SP,STACK   
1B77   CD 93 0B               CALL   init   
1B7A   CD 16 45               CALL   execStr   
1B7D   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1B87                          ;*Macro unroll:  expect "1 2 3 + *",5
1B87   E1                     POP   HL   
1B88   E5                     PUSH   HL   
1B89   11 05 00               LD   DE,5   
1B8C   B7                     OR   A   
1B8D   ED 52                  SBC   HL,DE   
1B8F   7D                     LD   A,L   
1B90   B4                     OR   H   
1B91   CA EE 1B               JP   Z,expectM_0_2639S50   
1B94   CD 8C 0B               CALL   printStr   
1B97   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1BA7   CD 8C 0B               CALL   printStr   
1BAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BB9   21 05 00               LD   hl,5   
1BBC   E5                     PUSH   hl   
1BBD   CD 53 0C               CALL   run   
1BC0   2E 00                  .CSTR   "."   
1BC2   CD 8C 0B               CALL   printStr   
1BC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BD2   E1                     POP   hl   
1BD3   E5                     PUSH   hl   
1BD4   E5                     PUSH   hl   
1BD5   CD 53 0C               CALL   run   
1BD8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1BEC   76                     HALT      
1BED   00                     .CSTR      
1BEE                EXPECTM_0_2639S50:      
1BEE   E1                     POP   HL   
1BEF                          ;*Macro unroll:  test "7 3 /", 2
1BEF   31 80 46               LD   SP,STACK   
1BF2   CD 93 0B               CALL   init   
1BF5   CD 16 45               CALL   execStr   
1BF8   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1BFE                          ;*Macro unroll:  expect "7 3 /",2
1BFE   E1                     POP   HL   
1BFF   E5                     PUSH   HL   
1C00   11 02 00               LD   DE,2   
1C03   B7                     OR   A   
1C04   ED 52                  SBC   HL,DE   
1C06   7D                     LD   A,L   
1C07   B4                     OR   H   
1C08   CA 61 1C               JP   Z,expectM_0_2640S50   
1C0B   CD 8C 0B               CALL   printStr   
1C0E   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C1A   CD 8C 0B               CALL   printStr   
1C1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C2C   21 02 00               LD   hl,2   
1C2F   E5                     PUSH   hl   
1C30   CD 53 0C               CALL   run   
1C33   2E 00                  .CSTR   "."   
1C35   CD 8C 0B               CALL   printStr   
1C38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C45   E1                     POP   hl   
1C46   E5                     PUSH   hl   
1C47   E5                     PUSH   hl   
1C48   CD 53 0C               CALL   run   
1C4B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C5F   76                     HALT      
1C60   00                     .CSTR      
1C61                EXPECTM_0_2640S50:      
1C61   E1                     POP   HL   
1C62                          ;*Macro unroll:  test "7 3 / _", 1
1C62   31 80 46               LD   SP,STACK   
1C65   CD 93 0B               CALL   init   
1C68   CD 16 45               CALL   execStr   
1C6B   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1C73                          ;*Macro unroll:  expect "7 3 / _",1
1C73   E1                     POP   HL   
1C74   E5                     PUSH   HL   
1C75   11 01 00               LD   DE,1   
1C78   B7                     OR   A   
1C79   ED 52                  SBC   HL,DE   
1C7B   7D                     LD   A,L   
1C7C   B4                     OR   H   
1C7D   CA D8 1C               JP   Z,expectM_0_2641S50   
1C80   CD 8C 0B               CALL   printStr   
1C83   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1C91   CD 8C 0B               CALL   printStr   
1C94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CA3   21 01 00               LD   hl,1   
1CA6   E5                     PUSH   hl   
1CA7   CD 53 0C               CALL   run   
1CAA   2E 00                  .CSTR   "."   
1CAC   CD 8C 0B               CALL   printStr   
1CAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CBC   E1                     POP   hl   
1CBD   E5                     PUSH   hl   
1CBE   E5                     PUSH   hl   
1CBF   CD 53 0C               CALL   run   
1CC2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1CD6   76                     HALT      
1CD7   00                     .CSTR      
1CD8                EXPECTM_0_2641S50:      
1CD8   E1                     POP   HL   
1CD9                          ;*Macro unroll:  test "7 3 /", 2
1CD9   31 80 46               LD   SP,STACK   
1CDC   CD 93 0B               CALL   init   
1CDF   CD 16 45               CALL   execStr   
1CE2   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CE8                          ;*Macro unroll:  expect "7 3 /",2
1CE8   E1                     POP   HL   
1CE9   E5                     PUSH   HL   
1CEA   11 02 00               LD   DE,2   
1CED   B7                     OR   A   
1CEE   ED 52                  SBC   HL,DE   
1CF0   7D                     LD   A,L   
1CF1   B4                     OR   H   
1CF2   CA 4B 1D               JP   Z,expectM_0_2642S50   
1CF5   CD 8C 0B               CALL   printStr   
1CF8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D04   CD 8C 0B               CALL   printStr   
1D07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D16   21 02 00               LD   hl,2   
1D19   E5                     PUSH   hl   
1D1A   CD 53 0C               CALL   run   
1D1D   2E 00                  .CSTR   "."   
1D1F   CD 8C 0B               CALL   printStr   
1D22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D2F   E1                     POP   hl   
1D30   E5                     PUSH   hl   
1D31   E5                     PUSH   hl   
1D32   CD 53 0C               CALL   run   
1D35   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D49   76                     HALT      
1D4A   00                     .CSTR      
1D4B                EXPECTM_0_2642S50:      
1D4B   E1                     POP   HL   
1D4C                          ;*Macro unroll:  test "2 3 ==", FALSE
1D4C   31 80 46               LD   SP,STACK   
1D4F   CD 93 0B               CALL   init   
1D52   CD 16 45               CALL   execStr   
1D55   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1D5C                          ;*Macro unroll:  expect "2 3 ==",FALSE
1D5C   E1                     POP   HL   
1D5D   E5                     PUSH   HL   
1D5E   11 00 00               LD   DE,FALSE   
1D61   B7                     OR   A   
1D62   ED 52                  SBC   HL,DE   
1D64   7D                     LD   A,L   
1D65   B4                     OR   H   
1D66   CA C0 1D               JP   Z,expectM_0_2643S50   
1D69   CD 8C 0B               CALL   printStr   
1D6C   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1D79   CD 8C 0B               CALL   printStr   
1D7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D8B   21 00 00               LD   hl,FALSE   
1D8E   E5                     PUSH   hl   
1D8F   CD 53 0C               CALL   run   
1D92   2E 00                  .CSTR   "."   
1D94   CD 8C 0B               CALL   printStr   
1D97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DA4   E1                     POP   hl   
1DA5   E5                     PUSH   hl   
1DA6   E5                     PUSH   hl   
1DA7   CD 53 0C               CALL   run   
1DAA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1DBE   76                     HALT      
1DBF   00                     .CSTR      
1DC0                EXPECTM_0_2643S50:      
1DC0   E1                     POP   HL   
1DC1                          ;*Macro unroll:  test "3 3 ==", TRUE
1DC1   31 80 46               LD   SP,STACK   
1DC4   CD 93 0B               CALL   init   
1DC7   CD 16 45               CALL   execStr   
1DCA   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1DD1                          ;*Macro unroll:  expect "3 3 ==",TRUE
1DD1   E1                     POP   HL   
1DD2   E5                     PUSH   HL   
1DD3   11 FF FF               LD   DE,TRUE   
1DD6   B7                     OR   A   
1DD7   ED 52                  SBC   HL,DE   
1DD9   7D                     LD   A,L   
1DDA   B4                     OR   H   
1DDB   CA 35 1E               JP   Z,expectM_0_2644S50   
1DDE   CD 8C 0B               CALL   printStr   
1DE1   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1DEE   CD 8C 0B               CALL   printStr   
1DF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E00   21 FF FF               LD   hl,TRUE   
1E03   E5                     PUSH   hl   
1E04   CD 53 0C               CALL   run   
1E07   2E 00                  .CSTR   "."   
1E09   CD 8C 0B               CALL   printStr   
1E0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E19   E1                     POP   hl   
1E1A   E5                     PUSH   hl   
1E1B   E5                     PUSH   hl   
1E1C   CD 53 0C               CALL   run   
1E1F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E33   76                     HALT      
1E34   00                     .CSTR      
1E35                EXPECTM_0_2644S50:      
1E35   E1                     POP   HL   
1E36                          ;*Macro unroll:  test "1 2 <", TRUE
1E36   31 80 46               LD   SP,STACK   
1E39   CD 93 0B               CALL   init   
1E3C   CD 16 45               CALL   execStr   
1E3F   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1E45                          ;*Macro unroll:  expect "1 2 <",TRUE
1E45   E1                     POP   HL   
1E46   E5                     PUSH   HL   
1E47   11 FF FF               LD   DE,TRUE   
1E4A   B7                     OR   A   
1E4B   ED 52                  SBC   HL,DE   
1E4D   7D                     LD   A,L   
1E4E   B4                     OR   H   
1E4F   CA A8 1E               JP   Z,expectM_0_2645S50   
1E52   CD 8C 0B               CALL   printStr   
1E55   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1E61   CD 8C 0B               CALL   printStr   
1E64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E73   21 FF FF               LD   hl,TRUE   
1E76   E5                     PUSH   hl   
1E77   CD 53 0C               CALL   run   
1E7A   2E 00                  .CSTR   "."   
1E7C   CD 8C 0B               CALL   printStr   
1E7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E8C   E1                     POP   hl   
1E8D   E5                     PUSH   hl   
1E8E   E5                     PUSH   hl   
1E8F   CD 53 0C               CALL   run   
1E92   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1EA6   76                     HALT      
1EA7   00                     .CSTR      
1EA8                EXPECTM_0_2645S50:      
1EA8   E1                     POP   HL   
1EA9                          ;*Macro unroll:  test "2 1 <", FALSE
1EA9   31 80 46               LD   SP,STACK   
1EAC   CD 93 0B               CALL   init   
1EAF   CD 16 45               CALL   execStr   
1EB2   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1EB8                          ;*Macro unroll:  expect "2 1 <",FALSE
1EB8   E1                     POP   HL   
1EB9   E5                     PUSH   HL   
1EBA   11 00 00               LD   DE,FALSE   
1EBD   B7                     OR   A   
1EBE   ED 52                  SBC   HL,DE   
1EC0   7D                     LD   A,L   
1EC1   B4                     OR   H   
1EC2   CA 1B 1F               JP   Z,expectM_0_2646S50   
1EC5   CD 8C 0B               CALL   printStr   
1EC8   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1ED4   CD 8C 0B               CALL   printStr   
1ED7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EE6   21 00 00               LD   hl,FALSE   
1EE9   E5                     PUSH   hl   
1EEA   CD 53 0C               CALL   run   
1EED   2E 00                  .CSTR   "."   
1EEF   CD 8C 0B               CALL   printStr   
1EF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EFF   E1                     POP   hl   
1F00   E5                     PUSH   hl   
1F01   E5                     PUSH   hl   
1F02   CD 53 0C               CALL   run   
1F05   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F19   76                     HALT      
1F1A   00                     .CSTR      
1F1B                EXPECTM_0_2646S50:      
1F1B   E1                     POP   HL   
1F1C                          ;*Macro unroll:  test "2 3 <", TRUE
1F1C   31 80 46               LD   SP,STACK   
1F1F   CD 93 0B               CALL   init   
1F22   CD 16 45               CALL   execStr   
1F25   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1F2B                          ;*Macro unroll:  expect "2 3 <",TRUE
1F2B   E1                     POP   HL   
1F2C   E5                     PUSH   HL   
1F2D   11 FF FF               LD   DE,TRUE   
1F30   B7                     OR   A   
1F31   ED 52                  SBC   HL,DE   
1F33   7D                     LD   A,L   
1F34   B4                     OR   H   
1F35   CA 8E 1F               JP   Z,expectM_0_2647S50   
1F38   CD 8C 0B               CALL   printStr   
1F3B   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1F47   CD 8C 0B               CALL   printStr   
1F4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F59   21 FF FF               LD   hl,TRUE   
1F5C   E5                     PUSH   hl   
1F5D   CD 53 0C               CALL   run   
1F60   2E 00                  .CSTR   "."   
1F62   CD 8C 0B               CALL   printStr   
1F65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F72   E1                     POP   hl   
1F73   E5                     PUSH   hl   
1F74   E5                     PUSH   hl   
1F75   CD 53 0C               CALL   run   
1F78   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F8C   76                     HALT      
1F8D   00                     .CSTR      
1F8E                EXPECTM_0_2647S50:      
1F8E   E1                     POP   HL   
1F8F                          ;*Macro unroll:  test "3 3 <", FALSE
1F8F   31 80 46               LD   SP,STACK   
1F92   CD 93 0B               CALL   init   
1F95   CD 16 45               CALL   execStr   
1F98   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1F9E                          ;*Macro unroll:  expect "3 3 <",FALSE
1F9E   E1                     POP   HL   
1F9F   E5                     PUSH   HL   
1FA0   11 00 00               LD   DE,FALSE   
1FA3   B7                     OR   A   
1FA4   ED 52                  SBC   HL,DE   
1FA6   7D                     LD   A,L   
1FA7   B4                     OR   H   
1FA8   CA 01 20               JP   Z,expectM_0_2648S50   
1FAB   CD 8C 0B               CALL   printStr   
1FAE   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1FBA   CD 8C 0B               CALL   printStr   
1FBD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FCC   21 00 00               LD   hl,FALSE   
1FCF   E5                     PUSH   hl   
1FD0   CD 53 0C               CALL   run   
1FD3   2E 00                  .CSTR   "."   
1FD5   CD 8C 0B               CALL   printStr   
1FD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE5   E1                     POP   hl   
1FE6   E5                     PUSH   hl   
1FE7   E5                     PUSH   hl   
1FE8   CD 53 0C               CALL   run   
1FEB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1FFF   76                     HALT      
2000   00                     .CSTR      
2001                EXPECTM_0_2648S50:      
2001   E1                     POP   HL   
2002                          ;*Macro unroll:  test "1 2 >", FALSE
2002   31 80 46               LD   SP,STACK   
2005   CD 93 0B               CALL   init   
2008   CD 16 45               CALL   execStr   
200B   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2011                          ;*Macro unroll:  expect "1 2 >",FALSE
2011   E1                     POP   HL   
2012   E5                     PUSH   HL   
2013   11 00 00               LD   DE,FALSE   
2016   B7                     OR   A   
2017   ED 52                  SBC   HL,DE   
2019   7D                     LD   A,L   
201A   B4                     OR   H   
201B   CA 74 20               JP   Z,expectM_0_2649S50   
201E   CD 8C 0B               CALL   printStr   
2021   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
202D   CD 8C 0B               CALL   printStr   
2030   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
203F   21 00 00               LD   hl,FALSE   
2042   E5                     PUSH   hl   
2043   CD 53 0C               CALL   run   
2046   2E 00                  .CSTR   "."   
2048   CD 8C 0B               CALL   printStr   
204B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2058   E1                     POP   hl   
2059   E5                     PUSH   hl   
205A   E5                     PUSH   hl   
205B   CD 53 0C               CALL   run   
205E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2072   76                     HALT      
2073   00                     .CSTR      
2074                EXPECTM_0_2649S50:      
2074   E1                     POP   HL   
2075                          ;*Macro unroll:  test "2 1 >", TRUE
2075   31 80 46               LD   SP,STACK   
2078   CD 93 0B               CALL   init   
207B   CD 16 45               CALL   execStr   
207E   32 20 31 20 3E 00      .CSTR   "2 1 >"   
2084                          ;*Macro unroll:  expect "2 1 >",TRUE
2084   E1                     POP   HL   
2085   E5                     PUSH   HL   
2086   11 FF FF               LD   DE,TRUE   
2089   B7                     OR   A   
208A   ED 52                  SBC   HL,DE   
208C   7D                     LD   A,L   
208D   B4                     OR   H   
208E   CA E7 20               JP   Z,expectM_0_2650S50   
2091   CD 8C 0B               CALL   printStr   
2094   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
20A0   CD 8C 0B               CALL   printStr   
20A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20B2   21 FF FF               LD   hl,TRUE   
20B5   E5                     PUSH   hl   
20B6   CD 53 0C               CALL   run   
20B9   2E 00                  .CSTR   "."   
20BB   CD 8C 0B               CALL   printStr   
20BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20CB   E1                     POP   hl   
20CC   E5                     PUSH   hl   
20CD   E5                     PUSH   hl   
20CE   CD 53 0C               CALL   run   
20D1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
20E5   76                     HALT      
20E6   00                     .CSTR      
20E7                EXPECTM_0_2650S50:      
20E7   E1                     POP   HL   
20E8                          ;*Macro unroll:  test "3 3 >", FALSE
20E8   31 80 46               LD   SP,STACK   
20EB   CD 93 0B               CALL   init   
20EE   CD 16 45               CALL   execStr   
20F1   33 20 33 20 3E 00      .CSTR   "3 3 >"   
20F7                          ;*Macro unroll:  expect "3 3 >",FALSE
20F7   E1                     POP   HL   
20F8   E5                     PUSH   HL   
20F9   11 00 00               LD   DE,FALSE   
20FC   B7                     OR   A   
20FD   ED 52                  SBC   HL,DE   
20FF   7D                     LD   A,L   
2100   B4                     OR   H   
2101   CA 5A 21               JP   Z,expectM_0_2651S50   
2104   CD 8C 0B               CALL   printStr   
2107   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2113   CD 8C 0B               CALL   printStr   
2116   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2125   21 00 00               LD   hl,FALSE   
2128   E5                     PUSH   hl   
2129   CD 53 0C               CALL   run   
212C   2E 00                  .CSTR   "."   
212E   CD 8C 0B               CALL   printStr   
2131   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
213E   E1                     POP   hl   
213F   E5                     PUSH   hl   
2140   E5                     PUSH   hl   
2141   CD 53 0C               CALL   run   
2144   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2158   76                     HALT      
2159   00                     .CSTR      
215A                EXPECTM_0_2651S50:      
215A   E1                     POP   HL   
215B                          ;*Macro unroll:  test "4 3 >", TRUE
215B   31 80 46               LD   SP,STACK   
215E   CD 93 0B               CALL   init   
2161   CD 16 45               CALL   execStr   
2164   34 20 33 20 3E 00      .CSTR   "4 3 >"   
216A                          ;*Macro unroll:  expect "4 3 >",TRUE
216A   E1                     POP   HL   
216B   E5                     PUSH   HL   
216C   11 FF FF               LD   DE,TRUE   
216F   B7                     OR   A   
2170   ED 52                  SBC   HL,DE   
2172   7D                     LD   A,L   
2173   B4                     OR   H   
2174   CA CD 21               JP   Z,expectM_0_2652S50   
2177   CD 8C 0B               CALL   printStr   
217A   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2186   CD 8C 0B               CALL   printStr   
2189   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2198   21 FF FF               LD   hl,TRUE   
219B   E5                     PUSH   hl   
219C   CD 53 0C               CALL   run   
219F   2E 00                  .CSTR   "."   
21A1   CD 8C 0B               CALL   printStr   
21A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21B1   E1                     POP   hl   
21B2   E5                     PUSH   hl   
21B3   E5                     PUSH   hl   
21B4   CD 53 0C               CALL   run   
21B7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
21CB   76                     HALT      
21CC   00                     .CSTR      
21CD                EXPECTM_0_2652S50:      
21CD   E1                     POP   HL   
21CE                          ;*Macro unroll:  test "2 2 <=", TRUE
21CE   31 80 46               LD   SP,STACK   
21D1   CD 93 0B               CALL   init   
21D4   CD 16 45               CALL   execStr   
21D7   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
21DE                          ;*Macro unroll:  expect "2 2 <=",TRUE
21DE   E1                     POP   HL   
21DF   E5                     PUSH   HL   
21E0   11 FF FF               LD   DE,TRUE   
21E3   B7                     OR   A   
21E4   ED 52                  SBC   HL,DE   
21E6   7D                     LD   A,L   
21E7   B4                     OR   H   
21E8   CA 42 22               JP   Z,expectM_0_2653S50   
21EB   CD 8C 0B               CALL   printStr   
21EE   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
21FB   CD 8C 0B               CALL   printStr   
21FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
220D   21 FF FF               LD   hl,TRUE   
2210   E5                     PUSH   hl   
2211   CD 53 0C               CALL   run   
2214   2E 00                  .CSTR   "."   
2216   CD 8C 0B               CALL   printStr   
2219   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2226   E1                     POP   hl   
2227   E5                     PUSH   hl   
2228   E5                     PUSH   hl   
2229   CD 53 0C               CALL   run   
222C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2240   76                     HALT      
2241   00                     .CSTR      
2242                EXPECTM_0_2653S50:      
2242   E1                     POP   HL   
2243                          ;*Macro unroll:  test "2 2 >=", TRUE
2243   31 80 46               LD   SP,STACK   
2246   CD 93 0B               CALL   init   
2249   CD 16 45               CALL   execStr   
224C   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2253                          ;*Macro unroll:  expect "2 2 >=",TRUE
2253   E1                     POP   HL   
2254   E5                     PUSH   HL   
2255   11 FF FF               LD   DE,TRUE   
2258   B7                     OR   A   
2259   ED 52                  SBC   HL,DE   
225B   7D                     LD   A,L   
225C   B4                     OR   H   
225D   CA B7 22               JP   Z,expectM_0_2654S50   
2260   CD 8C 0B               CALL   printStr   
2263   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2270   CD 8C 0B               CALL   printStr   
2273   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2282   21 FF FF               LD   hl,TRUE   
2285   E5                     PUSH   hl   
2286   CD 53 0C               CALL   run   
2289   2E 00                  .CSTR   "."   
228B   CD 8C 0B               CALL   printStr   
228E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
229B   E1                     POP   hl   
229C   E5                     PUSH   hl   
229D   E5                     PUSH   hl   
229E   CD 53 0C               CALL   run   
22A1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
22B5   76                     HALT      
22B6   00                     .CSTR      
22B7                EXPECTM_0_2654S50:      
22B7   E1                     POP   HL   
22B8                          ;*Macro unroll:  test "3 1 <<", 6
22B8   31 80 46               LD   SP,STACK   
22BB   CD 93 0B               CALL   init   
22BE   CD 16 45               CALL   execStr   
22C1   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
22C8                          ;*Macro unroll:  expect "3 1 <<",6
22C8   E1                     POP   HL   
22C9   E5                     PUSH   HL   
22CA   11 06 00               LD   DE,6   
22CD   B7                     OR   A   
22CE   ED 52                  SBC   HL,DE   
22D0   7D                     LD   A,L   
22D1   B4                     OR   H   
22D2   CA 2C 23               JP   Z,expectM_0_2655S50   
22D5   CD 8C 0B               CALL   printStr   
22D8   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
22E5   CD 8C 0B               CALL   printStr   
22E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F7   21 06 00               LD   hl,6   
22FA   E5                     PUSH   hl   
22FB   CD 53 0C               CALL   run   
22FE   2E 00                  .CSTR   "."   
2300   CD 8C 0B               CALL   printStr   
2303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2310   E1                     POP   hl   
2311   E5                     PUSH   hl   
2312   E5                     PUSH   hl   
2313   CD 53 0C               CALL   run   
2316   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
232A   76                     HALT      
232B   00                     .CSTR      
232C                EXPECTM_0_2655S50:      
232C   E1                     POP   HL   
232D                          ;*Macro unroll:  test "10 1 >>", 5
232D   31 80 46               LD   SP,STACK   
2330   CD 93 0B               CALL   init   
2333   CD 16 45               CALL   execStr   
2336   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
233E                          ;*Macro unroll:  expect "10 1 >>",5
233E   E1                     POP   HL   
233F   E5                     PUSH   HL   
2340   11 05 00               LD   DE,5   
2343   B7                     OR   A   
2344   ED 52                  SBC   HL,DE   
2346   7D                     LD   A,L   
2347   B4                     OR   H   
2348   CA A3 23               JP   Z,expectM_0_2656S50   
234B   CD 8C 0B               CALL   printStr   
234E   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
235C   CD 8C 0B               CALL   printStr   
235F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
236E   21 05 00               LD   hl,5   
2371   E5                     PUSH   hl   
2372   CD 53 0C               CALL   run   
2375   2E 00                  .CSTR   "."   
2377   CD 8C 0B               CALL   printStr   
237A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2387   E1                     POP   hl   
2388   E5                     PUSH   hl   
2389   E5                     PUSH   hl   
238A   CD 53 0C               CALL   run   
238D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
23A1   76                     HALT      
23A2   00                     .CSTR      
23A3                EXPECTM_0_2656S50:      
23A3   E1                     POP   HL   
23A4                          ;*Macro unroll:  test "1 x = x", 1
23A4   31 80 46               LD   SP,STACK   
23A7   CD 93 0B               CALL   init   
23AA   CD 16 45               CALL   execStr   
23AD   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
23B5                          ;*Macro unroll:  expect "1 x = x",1
23B5   E1                     POP   HL   
23B6   E5                     PUSH   HL   
23B7   11 01 00               LD   DE,1   
23BA   B7                     OR   A   
23BB   ED 52                  SBC   HL,DE   
23BD   7D                     LD   A,L   
23BE   B4                     OR   H   
23BF   CA 1A 24               JP   Z,expectM_0_2657S50   
23C2   CD 8C 0B               CALL   printStr   
23C5   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
23D3   CD 8C 0B               CALL   printStr   
23D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23E5   21 01 00               LD   hl,1   
23E8   E5                     PUSH   hl   
23E9   CD 53 0C               CALL   run   
23EC   2E 00                  .CSTR   "."   
23EE   CD 8C 0B               CALL   printStr   
23F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23FE   E1                     POP   hl   
23FF   E5                     PUSH   hl   
2400   E5                     PUSH   hl   
2401   CD 53 0C               CALL   run   
2404   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2418   76                     HALT      
2419   00                     .CSTR      
241A                EXPECTM_0_2657S50:      
241A   E1                     POP   HL   
241B                          ;*Macro unroll:  test "1{}^", 1
241B   31 80 46               LD   SP,STACK   
241E   CD 93 0B               CALL   init   
2421   CD 16 45               CALL   execStr   
2424   31 7B 7D 5E 00         .CSTR   "1{}^"   
2429                          ;*Macro unroll:  expect "1{}^",1
2429   E1                     POP   HL   
242A   E5                     PUSH   HL   
242B   11 01 00               LD   DE,1   
242E   B7                     OR   A   
242F   ED 52                  SBC   HL,DE   
2431   7D                     LD   A,L   
2432   B4                     OR   H   
2433   CA 8B 24               JP   Z,expectM_0_2658S50   
2436   CD 8C 0B               CALL   printStr   
2439   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2444   CD 8C 0B               CALL   printStr   
2447   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2456   21 01 00               LD   hl,1   
2459   E5                     PUSH   hl   
245A   CD 53 0C               CALL   run   
245D   2E 00                  .CSTR   "."   
245F   CD 8C 0B               CALL   printStr   
2462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
246F   E1                     POP   hl   
2470   E5                     PUSH   hl   
2471   E5                     PUSH   hl   
2472   CD 53 0C               CALL   run   
2475   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2489   76                     HALT      
248A   00                     .CSTR      
248B                EXPECTM_0_2658S50:      
248B   E1                     POP   HL   
248C                          ;*Macro unroll:  test "{1}^", 1
248C   31 80 46               LD   SP,STACK   
248F   CD 93 0B               CALL   init   
2492   CD 16 45               CALL   execStr   
2495   7B 31 7D 5E 00         .CSTR   "{1}^"   
249A                          ;*Macro unroll:  expect "{1}^",1
249A   E1                     POP   HL   
249B   E5                     PUSH   HL   
249C   11 01 00               LD   DE,1   
249F   B7                     OR   A   
24A0   ED 52                  SBC   HL,DE   
24A2   7D                     LD   A,L   
24A3   B4                     OR   H   
24A4   CA FC 24               JP   Z,expectM_0_2659S50   
24A7   CD 8C 0B               CALL   printStr   
24AA   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
24B5   CD 8C 0B               CALL   printStr   
24B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24C7   21 01 00               LD   hl,1   
24CA   E5                     PUSH   hl   
24CB   CD 53 0C               CALL   run   
24CE   2E 00                  .CSTR   "."   
24D0   CD 8C 0B               CALL   printStr   
24D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24E0   E1                     POP   hl   
24E1   E5                     PUSH   hl   
24E2   E5                     PUSH   hl   
24E3   CD 53 0C               CALL   run   
24E6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
24FA   76                     HALT      
24FB   00                     .CSTR      
24FC                EXPECTM_0_2659S50:      
24FC   E1                     POP   HL   
24FD                          ;*Macro unroll:  test "{{1}^}^", 1
24FD   31 80 46               LD   SP,STACK   
2500   CD 93 0B               CALL   init   
2503   CD 16 45               CALL   execStr   
2506   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
250E                          ;*Macro unroll:  expect "{{1}^}^",1
250E   E1                     POP   HL   
250F   E5                     PUSH   HL   
2510   11 01 00               LD   DE,1   
2513   B7                     OR   A   
2514   ED 52                  SBC   HL,DE   
2516   7D                     LD   A,L   
2517   B4                     OR   H   
2518   CA 73 25               JP   Z,expectM_0_2660S50   
251B   CD 8C 0B               CALL   printStr   
251E   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
252C   CD 8C 0B               CALL   printStr   
252F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253E   21 01 00               LD   hl,1   
2541   E5                     PUSH   hl   
2542   CD 53 0C               CALL   run   
2545   2E 00                  .CSTR   "."   
2547   CD 8C 0B               CALL   printStr   
254A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2557   E1                     POP   hl   
2558   E5                     PUSH   hl   
2559   E5                     PUSH   hl   
255A   CD 53 0C               CALL   run   
255D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2571   76                     HALT      
2572   00                     .CSTR      
2573                EXPECTM_0_2660S50:      
2573   E1                     POP   HL   
2574                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2574   31 80 46               LD   SP,STACK   
2577   CD 93 0B               CALL   init   
257A   CD 16 45               CALL   execStr   
257D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2588                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2588   E1                     POP   HL   
2589   E5                     PUSH   HL   
258A   11 01 00               LD   DE,1   
258D   B7                     OR   A   
258E   ED 52                  SBC   HL,DE   
2590   7D                     LD   A,L   
2591   B4                     OR   H   
2592   CA F0 25               JP   Z,expectM_0_2661S50   
2595   CD 8C 0B               CALL   printStr   
2598   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
25A9   CD 8C 0B               CALL   printStr   
25AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25BB   21 01 00               LD   hl,1   
25BE   E5                     PUSH   hl   
25BF   CD 53 0C               CALL   run   
25C2   2E 00                  .CSTR   "."   
25C4   CD 8C 0B               CALL   printStr   
25C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25D4   E1                     POP   hl   
25D5   E5                     PUSH   hl   
25D6   E5                     PUSH   hl   
25D7   CD 53 0C               CALL   run   
25DA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
25EE   76                     HALT      
25EF   00                     .CSTR      
25F0                EXPECTM_0_2661S50:      
25F0   E1                     POP   HL   
25F1                          ;*Macro unroll:  test "5 /f{10} ?", 5
25F1   31 80 46               LD   SP,STACK   
25F4   CD 93 0B               CALL   init   
25F7   CD 16 45               CALL   execStr   
25FA   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
2605                          ;*Macro unroll:  expect "5 /f{10} ?",5
2605   E1                     POP   HL   
2606   E5                     PUSH   HL   
2607   11 05 00               LD   DE,5   
260A   B7                     OR   A   
260B   ED 52                  SBC   HL,DE   
260D   7D                     LD   A,L   
260E   B4                     OR   H   
260F   CA 6D 26               JP   Z,expectM_0_2662S50   
2612   CD 8C 0B               CALL   printStr   
2615   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2626   CD 8C 0B               CALL   printStr   
2629   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2638   21 05 00               LD   hl,5   
263B   E5                     PUSH   hl   
263C   CD 53 0C               CALL   run   
263F   2E 00                  .CSTR   "."   
2641   CD 8C 0B               CALL   printStr   
2644   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2651   E1                     POP   hl   
2652   E5                     PUSH   hl   
2653   E5                     PUSH   hl   
2654   CD 53 0C               CALL   run   
2657   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
266B   76                     HALT      
266C   00                     .CSTR      
266D                EXPECTM_0_2662S50:      
266D   E1                     POP   HL   
266E                          ;*Macro unroll:  test "5 /t{10} ? +", 15
266E   31 80 46               LD   SP,STACK   
2671   CD 93 0B               CALL   init   
2674   CD 16 45               CALL   execStr   
2677   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
2684                          ;*Macro unroll:  expect "5 /t{10} ? +",15
2684   E1                     POP   HL   
2685   E5                     PUSH   HL   
2686   11 0F 00               LD   DE,15   
2689   B7                     OR   A   
268A   ED 52                  SBC   HL,DE   
268C   7D                     LD   A,L   
268D   B4                     OR   H   
268E   CA EE 26               JP   Z,expectM_0_2663S50   
2691   CD 8C 0B               CALL   printStr   
2694   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
26A7   CD 8C 0B               CALL   printStr   
26AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B9   21 0F 00               LD   hl,15   
26BC   E5                     PUSH   hl   
26BD   CD 53 0C               CALL   run   
26C0   2E 00                  .CSTR   "."   
26C2   CD 8C 0B               CALL   printStr   
26C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D2   E1                     POP   hl   
26D3   E5                     PUSH   hl   
26D4   E5                     PUSH   hl   
26D5   CD 53 0C               CALL   run   
26D8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
26EC   76                     HALT      
26ED   00                     .CSTR      
26EE                EXPECTM_0_2663S50:      
26EE   E1                     POP   HL   
26EF                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
26EF   31 80 46               LD   SP,STACK   
26F2   CD 93 0B               CALL   init   
26F5   CD 16 45               CALL   execStr   
26F8   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
270A                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
270A   E1                     POP   HL   
270B   E5                     PUSH   HL   
270C   11 15 00               LD   DE,21   
270F   B7                     OR   A   
2710   ED 52                  SBC   HL,DE   
2712   7D                     LD   A,L   
2713   B4                     OR   H   
2714   CA 79 27               JP   Z,expectM_0_2664S50   
2717   CD 8C 0B               CALL   printStr   
271A   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2732   CD 8C 0B               CALL   printStr   
2735   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2744   21 15 00               LD   hl,21   
2747   E5                     PUSH   hl   
2748   CD 53 0C               CALL   run   
274B   2E 00                  .CSTR   "."   
274D   CD 8C 0B               CALL   printStr   
2750   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275D   E1                     POP   hl   
275E   E5                     PUSH   hl   
275F   E5                     PUSH   hl   
2760   CD 53 0C               CALL   run   
2763   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2777   76                     HALT      
2778   00                     .CSTR      
2779                EXPECTM_0_2664S50:      
2779   E1                     POP   HL   
277A                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
277A   31 80 46               LD   SP,STACK   
277D   CD 93 0B               CALL   init   
2780   CD 16 45               CALL   execStr   
2783   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
2795                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
2795   E1                     POP   HL   
2796   E5                     PUSH   HL   
2797   11 0B 00               LD   DE,11   
279A   B7                     OR   A   
279B   ED 52                  SBC   HL,DE   
279D   7D                     LD   A,L   
279E   B4                     OR   H   
279F   CA 04 28               JP   Z,expectM_0_2665S50   
27A2   CD 8C 0B               CALL   printStr   
27A5   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
27BD   CD 8C 0B               CALL   printStr   
27C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27CF   21 0B 00               LD   hl,11   
27D2   E5                     PUSH   hl   
27D3   CD 53 0C               CALL   run   
27D6   2E 00                  .CSTR   "."   
27D8   CD 8C 0B               CALL   printStr   
27DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E8   E1                     POP   hl   
27E9   E5                     PUSH   hl   
27EA   E5                     PUSH   hl   
27EB   CD 53 0C               CALL   run   
27EE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2802   76                     HALT      
2803   00                     .CSTR      
2804                EXPECTM_0_2665S50:      
2804   E1                     POP   HL   
2805                          ;*Macro unroll:  test ": -2%", $0000
2805   31 80 46               LD   SP,STACK   
2808   CD 93 0B               CALL   init   
280B   CD 16 45               CALL   execStr   
280E   3A 20 2D 32 25 00      .CSTR   ": -2%"   
2814                          ;*Macro unroll:  expect ": -2%",$0000
2814   E1                     POP   HL   
2815   E5                     PUSH   HL   
2816   11 00 00               LD   DE,$0000   
2819   B7                     OR   A   
281A   ED 52                  SBC   HL,DE   
281C   7D                     LD   A,L   
281D   B4                     OR   H   
281E   CA 77 28               JP   Z,expectM_0_2666S50   
2821   CD 8C 0B               CALL   printStr   
2824   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2830   CD 8C 0B               CALL   printStr   
2833   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2842   21 00 00               LD   hl,$0000   
2845   E5                     PUSH   hl   
2846   CD 53 0C               CALL   run   
2849   2E 00                  .CSTR   "."   
284B   CD 8C 0B               CALL   printStr   
284E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
285B   E1                     POP   hl   
285C   E5                     PUSH   hl   
285D   E5                     PUSH   hl   
285E   CD 53 0C               CALL   run   
2861   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2875   76                     HALT      
2876   00                     .CSTR      
2877                EXPECTM_0_2666S50:      
2877   E1                     POP   HL   
2878                          ;*Macro unroll:  test ":a -1%", $0001
2878   31 80 46               LD   SP,STACK   
287B   CD 93 0B               CALL   init   
287E   CD 16 45               CALL   execStr   
2881   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
2888                          ;*Macro unroll:  expect ":a -1%",$0001
2888   E1                     POP   HL   
2889   E5                     PUSH   HL   
288A   11 01 00               LD   DE,$0001   
288D   B7                     OR   A   
288E   ED 52                  SBC   HL,DE   
2890   7D                     LD   A,L   
2891   B4                     OR   H   
2892   CA EC 28               JP   Z,expectM_0_2667S50   
2895   CD 8C 0B               CALL   printStr   
2898   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
28A5   CD 8C 0B               CALL   printStr   
28A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B7   21 01 00               LD   hl,$0001   
28BA   E5                     PUSH   hl   
28BB   CD 53 0C               CALL   run   
28BE   2E 00                  .CSTR   "."   
28C0   CD 8C 0B               CALL   printStr   
28C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28D0   E1                     POP   hl   
28D1   E5                     PUSH   hl   
28D2   E5                     PUSH   hl   
28D3   CD 53 0C               CALL   run   
28D6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
28EA   76                     HALT      
28EB   00                     .CSTR      
28EC                EXPECTM_0_2667S50:      
28EC   E1                     POP   HL   
28ED                          ;*Macro unroll:  test ":a: -1%", $0001
28ED   31 80 46               LD   SP,STACK   
28F0   CD 93 0B               CALL   init   
28F3   CD 16 45               CALL   execStr   
28F6   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
28FE                          ;*Macro unroll:  expect ":a: -1%",$0001
28FE   E1                     POP   HL   
28FF   E5                     PUSH   HL   
2900   11 01 00               LD   DE,$0001   
2903   B7                     OR   A   
2904   ED 52                  SBC   HL,DE   
2906   7D                     LD   A,L   
2907   B4                     OR   H   
2908   CA 63 29               JP   Z,expectM_0_2668S50   
290B   CD 8C 0B               CALL   printStr   
290E   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
291C   CD 8C 0B               CALL   printStr   
291F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
292E   21 01 00               LD   hl,$0001   
2931   E5                     PUSH   hl   
2932   CD 53 0C               CALL   run   
2935   2E 00                  .CSTR   "."   
2937   CD 8C 0B               CALL   printStr   
293A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2947   E1                     POP   hl   
2948   E5                     PUSH   hl   
2949   E5                     PUSH   hl   
294A   CD 53 0C               CALL   run   
294D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2961   76                     HALT      
2962   00                     .CSTR      
2963                EXPECTM_0_2668S50:      
2963   E1                     POP   HL   
2964                          ;*Macro unroll:  test ":a:b -1%", $0102
2964   31 80 46               LD   SP,STACK   
2967   CD 93 0B               CALL   init   
296A   CD 16 45               CALL   execStr   
296D   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
2976                          ;*Macro unroll:  expect ":a:b -1%",$0102
2976   E1                     POP   HL   
2977   E5                     PUSH   HL   
2978   11 02 01               LD   DE,$0102   
297B   B7                     OR   A   
297C   ED 52                  SBC   HL,DE   
297E   7D                     LD   A,L   
297F   B4                     OR   H   
2980   CA DC 29               JP   Z,expectM_0_2669S50   
2983   CD 8C 0B               CALL   printStr   
2986   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
2995   CD 8C 0B               CALL   printStr   
2998   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29A7   21 02 01               LD   hl,$0102   
29AA   E5                     PUSH   hl   
29AB   CD 53 0C               CALL   run   
29AE   2E 00                  .CSTR   "."   
29B0   CD 8C 0B               CALL   printStr   
29B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29C0   E1                     POP   hl   
29C1   E5                     PUSH   hl   
29C2   E5                     PUSH   hl   
29C3   CD 53 0C               CALL   run   
29C6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
29DA   76                     HALT      
29DB   00                     .CSTR      
29DC                EXPECTM_0_2669S50:      
29DC   E1                     POP   HL   
29DD                          ;*Macro unroll:  test "::b -1%", $0101
29DD   31 80 46               LD   SP,STACK   
29E0   CD 93 0B               CALL   init   
29E3   CD 16 45               CALL   execStr   
29E6   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
29EE                          ;*Macro unroll:  expect "::b -1%",$0101
29EE   E1                     POP   HL   
29EF   E5                     PUSH   HL   
29F0   11 01 01               LD   DE,$0101   
29F3   B7                     OR   A   
29F4   ED 52                  SBC   HL,DE   
29F6   7D                     LD   A,L   
29F7   B4                     OR   H   
29F8   CA 53 2A               JP   Z,expectM_0_2670S50   
29FB   CD 8C 0B               CALL   printStr   
29FE   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2A0C   CD 8C 0B               CALL   printStr   
2A0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A1E   21 01 01               LD   hl,$0101   
2A21   E5                     PUSH   hl   
2A22   CD 53 0C               CALL   run   
2A25   2E 00                  .CSTR   "."   
2A27   CD 8C 0B               CALL   printStr   
2A2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A37   E1                     POP   hl   
2A38   E5                     PUSH   hl   
2A39   E5                     PUSH   hl   
2A3A   CD 53 0C               CALL   run   
2A3D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A51   76                     HALT      
2A52   00                     .CSTR      
2A53                EXPECTM_0_2670S50:      
2A53   E1                     POP   HL   
2A54                          ;*Macro unroll:  test ":{2};^", 2
2A54   31 80 46               LD   SP,STACK   
2A57   CD 93 0B               CALL   init   
2A5A   CD 16 45               CALL   execStr   
2A5D   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2A64                          ;*Macro unroll:  expect ":{2};^",2
2A64   E1                     POP   HL   
2A65   E5                     PUSH   HL   
2A66   11 02 00               LD   DE,2   
2A69   B7                     OR   A   
2A6A   ED 52                  SBC   HL,DE   
2A6C   7D                     LD   A,L   
2A6D   B4                     OR   H   
2A6E   CA C8 2A               JP   Z,expectM_0_2671S50   
2A71   CD 8C 0B               CALL   printStr   
2A74   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2A81   CD 8C 0B               CALL   printStr   
2A84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A93   21 02 00               LD   hl,2   
2A96   E5                     PUSH   hl   
2A97   CD 53 0C               CALL   run   
2A9A   2E 00                  .CSTR   "."   
2A9C   CD 8C 0B               CALL   printStr   
2A9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AAC   E1                     POP   hl   
2AAD   E5                     PUSH   hl   
2AAE   E5                     PUSH   hl   
2AAF   CD 53 0C               CALL   run   
2AB2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2AC6   76                     HALT      
2AC7   00                     .CSTR      
2AC8                EXPECTM_0_2671S50:      
2AC8   E1                     POP   HL   
2AC9                          ;*Macro unroll:  test ":a{2};^", 2
2AC9   31 80 46               LD   SP,STACK   
2ACC   CD 93 0B               CALL   init   
2ACF   CD 16 45               CALL   execStr   
2AD2   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2ADA                          ;*Macro unroll:  expect ":a{2};^",2
2ADA   E1                     POP   HL   
2ADB   E5                     PUSH   HL   
2ADC   11 02 00               LD   DE,2   
2ADF   B7                     OR   A   
2AE0   ED 52                  SBC   HL,DE   
2AE2   7D                     LD   A,L   
2AE3   B4                     OR   H   
2AE4   CA 3F 2B               JP   Z,expectM_0_2672S50   
2AE7   CD 8C 0B               CALL   printStr   
2AEA   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2AF8   CD 8C 0B               CALL   printStr   
2AFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B0A   21 02 00               LD   hl,2   
2B0D   E5                     PUSH   hl   
2B0E   CD 53 0C               CALL   run   
2B11   2E 00                  .CSTR   "."   
2B13   CD 8C 0B               CALL   printStr   
2B16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B23   E1                     POP   hl   
2B24   E5                     PUSH   hl   
2B25   E5                     PUSH   hl   
2B26   CD 53 0C               CALL   run   
2B29   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B3D   76                     HALT      
2B3E   00                     .CSTR      
2B3F                EXPECTM_0_2672S50:      
2B3F   E1                     POP   HL   
2B40                          ;*Macro unroll:  test "5 :a{$a};^", 5
2B40   31 80 46               LD   SP,STACK   
2B43   CD 93 0B               CALL   init   
2B46   CD 16 45               CALL   execStr   
2B49   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2B54                          ;*Macro unroll:  expect "5 :a{$a};^",5
2B54   E1                     POP   HL   
2B55   E5                     PUSH   HL   
2B56   11 05 00               LD   DE,5   
2B59   B7                     OR   A   
2B5A   ED 52                  SBC   HL,DE   
2B5C   7D                     LD   A,L   
2B5D   B4                     OR   H   
2B5E   CA BC 2B               JP   Z,expectM_0_2673S50   
2B61   CD 8C 0B               CALL   printStr   
2B64   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2B75   CD 8C 0B               CALL   printStr   
2B78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B87   21 05 00               LD   hl,5   
2B8A   E5                     PUSH   hl   
2B8B   CD 53 0C               CALL   run   
2B8E   2E 00                  .CSTR   "."   
2B90   CD 8C 0B               CALL   printStr   
2B93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BA0   E1                     POP   hl   
2BA1   E5                     PUSH   hl   
2BA2   E5                     PUSH   hl   
2BA3   CD 53 0C               CALL   run   
2BA6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2BBA   76                     HALT      
2BBB   00                     .CSTR      
2BBC                EXPECTM_0_2673S50:      
2BBC   E1                     POP   HL   
2BBD                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2BBD   31 80 46               LD   SP,STACK   
2BC0   CD 93 0B               CALL   init   
2BC3   CD 16 45               CALL   execStr   
2BC6   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2BD3                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2BD3   E1                     POP   HL   
2BD4   E5                     PUSH   HL   
2BD5   11 05 00               LD   DE,5   
2BD8   B7                     OR   A   
2BD9   ED 52                  SBC   HL,DE   
2BDB   7D                     LD   A,L   
2BDC   B4                     OR   H   
2BDD   CA 3D 2C               JP   Z,expectM_0_2674S50   
2BE0   CD 8C 0B               CALL   printStr   
2BE3   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2BF6   CD 8C 0B               CALL   printStr   
2BF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C08   21 05 00               LD   hl,5   
2C0B   E5                     PUSH   hl   
2C0C   CD 53 0C               CALL   run   
2C0F   2E 00                  .CSTR   "."   
2C11   CD 8C 0B               CALL   printStr   
2C14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C21   E1                     POP   hl   
2C22   E5                     PUSH   hl   
2C23   E5                     PUSH   hl   
2C24   CD 53 0C               CALL   run   
2C27   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C3B   76                     HALT      
2C3C   00                     .CSTR      
2C3D                EXPECTM_0_2674S50:      
2C3D   E1                     POP   HL   
2C3E                          ;*Macro unroll:  test ":a{{2}^};^", 2
2C3E   31 80 46               LD   SP,STACK   
2C41   CD 93 0B               CALL   init   
2C44   CD 16 45               CALL   execStr   
2C47   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2C52                          ;*Macro unroll:  expect ":a{{2}^};^",2
2C52   E1                     POP   HL   
2C53   E5                     PUSH   HL   
2C54   11 02 00               LD   DE,2   
2C57   B7                     OR   A   
2C58   ED 52                  SBC   HL,DE   
2C5A   7D                     LD   A,L   
2C5B   B4                     OR   H   
2C5C   CA BA 2C               JP   Z,expectM_0_2675S50   
2C5F   CD 8C 0B               CALL   printStr   
2C62   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2C73   CD 8C 0B               CALL   printStr   
2C76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C85   21 02 00               LD   hl,2   
2C88   E5                     PUSH   hl   
2C89   CD 53 0C               CALL   run   
2C8C   2E 00                  .CSTR   "."   
2C8E   CD 8C 0B               CALL   printStr   
2C91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C9E   E1                     POP   hl   
2C9F   E5                     PUSH   hl   
2CA0   E5                     PUSH   hl   
2CA1   CD 53 0C               CALL   run   
2CA4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2CB8   76                     HALT      
2CB9   00                     .CSTR      
2CBA                EXPECTM_0_2675S50:      
2CBA   E1                     POP   HL   
2CBB                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2CBB   31 80 46               LD   SP,STACK   
2CBE   CD 93 0B               CALL   init   
2CC1   CD 16 45               CALL   execStr   
2CC4   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2CD4                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2CD4   E1                     POP   HL   
2CD5   E5                     PUSH   HL   
2CD6   11 05 00               LD   DE,5   
2CD9   B7                     OR   A   
2CDA   ED 52                  SBC   HL,DE   
2CDC   7D                     LD   A,L   
2CDD   B4                     OR   H   
2CDE   CA 41 2D               JP   Z,expectM_0_2676S50   
2CE1   CD 8C 0B               CALL   printStr   
2CE4   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2CFA   CD 8C 0B               CALL   printStr   
2CFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D0C   21 05 00               LD   hl,5   
2D0F   E5                     PUSH   hl   
2D10   CD 53 0C               CALL   run   
2D13   2E 00                  .CSTR   "."   
2D15   CD 8C 0B               CALL   printStr   
2D18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D25   E1                     POP   hl   
2D26   E5                     PUSH   hl   
2D27   E5                     PUSH   hl   
2D28   CD 53 0C               CALL   run   
2D2B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2D3F   76                     HALT      
2D40   00                     .CSTR      
2D41                EXPECTM_0_2676S50:      
2D41   E1                     POP   HL   
2D42                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2D42   31 80 46               LD   SP,STACK   
2D45   CD 93 0B               CALL   init   
2D48   CD 16 45               CALL   execStr   
2D4B   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2D5C                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2D5C   E1                     POP   HL   
2D5D   E5                     PUSH   HL   
2D5E   11 01 00               LD   DE,1   
2D61   B7                     OR   A   
2D62   ED 52                  SBC   HL,DE   
2D64   7D                     LD   A,L   
2D65   B4                     OR   H   
2D66   CA CA 2D               JP   Z,expectM_0_2677S50   
2D69   CD 8C 0B               CALL   printStr   
2D6C   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2D83   CD 8C 0B               CALL   printStr   
2D86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D95   21 01 00               LD   hl,1   
2D98   E5                     PUSH   hl   
2D99   CD 53 0C               CALL   run   
2D9C   2E 00                  .CSTR   "."   
2D9E   CD 8C 0B               CALL   printStr   
2DA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DAE   E1                     POP   hl   
2DAF   E5                     PUSH   hl   
2DB0   E5                     PUSH   hl   
2DB1   CD 53 0C               CALL   run   
2DB4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2DC8   76                     HALT      
2DC9   00                     .CSTR      
2DCA                EXPECTM_0_2677S50:      
2DCA   E1                     POP   HL   
2DCB                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2DCB   31 80 46               LD   SP,STACK   
2DCE   CD 93 0B               CALL   init   
2DD1   CD 16 45               CALL   execStr   
2DD4   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2DE8                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2DE8   E1                     POP   HL   
2DE9   E5                     PUSH   HL   
2DEA   11 07 00               LD   DE,7   
2DED   B7                     OR   A   
2DEE   ED 52                  SBC   HL,DE   
2DF0   7D                     LD   A,L   
2DF1   B4                     OR   H   
2DF2   CA 59 2E               JP   Z,expectM_0_2678S50   
2DF5   CD 8C 0B               CALL   printStr   
2DF8   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2E12   CD 8C 0B               CALL   printStr   
2E15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E24   21 07 00               LD   hl,7   
2E27   E5                     PUSH   hl   
2E28   CD 53 0C               CALL   run   
2E2B   2E 00                  .CSTR   "."   
2E2D   CD 8C 0B               CALL   printStr   
2E30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E3D   E1                     POP   hl   
2E3E   E5                     PUSH   hl   
2E3F   E5                     PUSH   hl   
2E40   CD 53 0C               CALL   run   
2E43   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E57   76                     HALT      
2E58   00                     .CSTR      
2E59                EXPECTM_0_2678S50:      
2E59   E1                     POP   HL   
2E5A                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2E5A   31 80 46               LD   SP,STACK   
2E5D   CD 93 0B               CALL   init   
2E60   CD 16 45               CALL   execStr   
2E63   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2E79                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2E79   E1                     POP   HL   
2E7A   E5                     PUSH   HL   
2E7B   11 06 00               LD   DE,6   
2E7E   B7                     OR   A   
2E7F   ED 52                  SBC   HL,DE   
2E81   7D                     LD   A,L   
2E82   B4                     OR   H   
2E83   CA EC 2E               JP   Z,expectM_0_2679S50   
2E86   CD 8C 0B               CALL   printStr   
2E89   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2EA5   CD 8C 0B               CALL   printStr   
2EA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EB7   21 06 00               LD   hl,6   
2EBA   E5                     PUSH   hl   
2EBB   CD 53 0C               CALL   run   
2EBE   2E 00                  .CSTR   "."   
2EC0   CD 8C 0B               CALL   printStr   
2EC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED0   E1                     POP   hl   
2ED1   E5                     PUSH   hl   
2ED2   E5                     PUSH   hl   
2ED3   CD 53 0C               CALL   run   
2ED6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2EEA   76                     HALT      
2EEB   00                     .CSTR      
2EEC                EXPECTM_0_2679S50:      
2EEC   E1                     POP   HL   
2EED                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2EED   31 80 46               LD   SP,STACK   
2EF0   CD 93 0B               CALL   init   
2EF3   CD 16 45               CALL   execStr   
2EF6   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2F05                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2F05   E1                     POP   HL   
2F06   E5                     PUSH   HL   
2F07   11 02 00               LD   DE,2   
2F0A   B7                     OR   A   
2F0B   ED 52                  SBC   HL,DE   
2F0D   7D                     LD   A,L   
2F0E   B4                     OR   H   
2F0F   CA 71 2F               JP   Z,expectM_0_2680S50   
2F12   CD 8C 0B               CALL   printStr   
2F15   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2F2A   CD 8C 0B               CALL   printStr   
2F2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F3C   21 02 00               LD   hl,2   
2F3F   E5                     PUSH   hl   
2F40   CD 53 0C               CALL   run   
2F43   2E 00                  .CSTR   "."   
2F45   CD 8C 0B               CALL   printStr   
2F48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F55   E1                     POP   hl   
2F56   E5                     PUSH   hl   
2F57   E5                     PUSH   hl   
2F58   CD 53 0C               CALL   run   
2F5B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2F6F   76                     HALT      
2F70   00                     .CSTR      
2F71                EXPECTM_0_2680S50:      
2F71   E1                     POP   HL   
2F72                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2F72   31 80 46               LD   SP,STACK   
2F75   CD 93 0B               CALL   init   
2F78   CD 16 45               CALL   execStr   
2F7B   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2F8D                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2F8D   E1                     POP   HL   
2F8E   E5                     PUSH   HL   
2F8F   11 01 00               LD   DE,1   
2F92   B7                     OR   A   
2F93   ED 52                  SBC   HL,DE   
2F95   7D                     LD   A,L   
2F96   B4                     OR   H   
2F97   CA FC 2F               JP   Z,expectM_0_2681S50   
2F9A   CD 8C 0B               CALL   printStr   
2F9D   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2FB5   CD 8C 0B               CALL   printStr   
2FB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FC7   21 01 00               LD   hl,1   
2FCA   E5                     PUSH   hl   
2FCB   CD 53 0C               CALL   run   
2FCE   2E 00                  .CSTR   "."   
2FD0   CD 8C 0B               CALL   printStr   
2FD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FE0   E1                     POP   hl   
2FE1   E5                     PUSH   hl   
2FE2   E5                     PUSH   hl   
2FE3   CD 53 0C               CALL   run   
2FE6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2FFA   76                     HALT      
2FFB   00                     .CSTR      
2FFC                EXPECTM_0_2681S50:      
2FFC   E1                     POP   HL   
2FFD                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2FFD   31 80 46               LD   SP,STACK   
3000   CD 93 0B               CALL   init   
3003   CD 16 45               CALL   execStr   
3006   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
3019                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
3019   E1                     POP   HL   
301A   E5                     PUSH   HL   
301B   11 02 00               LD   DE,2   
301E   B7                     OR   A   
301F   ED 52                  SBC   HL,DE   
3021   7D                     LD   A,L   
3022   B4                     OR   H   
3023   CA 89 30               JP   Z,expectM_0_2682S50   
3026   CD 8C 0B               CALL   printStr   
3029   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3042   CD 8C 0B               CALL   printStr   
3045   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3054   21 02 00               LD   hl,2   
3057   E5                     PUSH   hl   
3058   CD 53 0C               CALL   run   
305B   2E 00                  .CSTR   "."   
305D   CD 8C 0B               CALL   printStr   
3060   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
306D   E1                     POP   hl   
306E   E5                     PUSH   hl   
306F   E5                     PUSH   hl   
3070   CD 53 0C               CALL   run   
3073   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3087   76                     HALT      
3088   00                     .CSTR      
3089                EXPECTM_0_2682S50:      
3089   E1                     POP   HL   
308A                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
308A   31 80 46               LD   SP,STACK   
308D   CD 93 0B               CALL   init   
3090   CD 16 45               CALL   execStr   
3093   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
30A7                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
30A7   E1                     POP   HL   
30A8   E5                     PUSH   HL   
30A9   11 02 00               LD   DE,2   
30AC   B7                     OR   A   
30AD   ED 52                  SBC   HL,DE   
30AF   7D                     LD   A,L   
30B0   B4                     OR   H   
30B1   CA 18 31               JP   Z,expectM_0_2683S50   
30B4   CD 8C 0B               CALL   printStr   
30B7   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
30D1   CD 8C 0B               CALL   printStr   
30D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E3   21 02 00               LD   hl,2   
30E6   E5                     PUSH   hl   
30E7   CD 53 0C               CALL   run   
30EA   2E 00                  .CSTR   "."   
30EC   CD 8C 0B               CALL   printStr   
30EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30FC   E1                     POP   hl   
30FD   E5                     PUSH   hl   
30FE   E5                     PUSH   hl   
30FF   CD 53 0C               CALL   run   
3102   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3116   76                     HALT      
3117   00                     .CSTR      
3118                EXPECTM_0_2683S50:      
3118   E1                     POP   HL   
3119                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3119   31 80 46               LD   SP,STACK   
311C   CD 93 0B               CALL   init   
311F   CD 16 45               CALL   execStr   
3122   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
3135                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
3135   E1                     POP   HL   
3136   E5                     PUSH   HL   
3137   11 02 00               LD   DE,2   
313A   B7                     OR   A   
313B   ED 52                  SBC   HL,DE   
313D   7D                     LD   A,L   
313E   B4                     OR   H   
313F   CA A5 31               JP   Z,expectM_0_2684S50   
3142   CD 8C 0B               CALL   printStr   
3145   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
315E   CD 8C 0B               CALL   printStr   
3161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3170   21 02 00               LD   hl,2   
3173   E5                     PUSH   hl   
3174   CD 53 0C               CALL   run   
3177   2E 00                  .CSTR   "."   
3179   CD 8C 0B               CALL   printStr   
317C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3189   E1                     POP   hl   
318A   E5                     PUSH   hl   
318B   E5                     PUSH   hl   
318C   CD 53 0C               CALL   run   
318F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
31A3   76                     HALT      
31A4   00                     .CSTR      
31A5                EXPECTM_0_2684S50:      
31A5   E1                     POP   HL   
31A6                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
31A6   31 80 46               LD   SP,STACK   
31A9   CD 93 0B               CALL   init   
31AC   CD 16 45               CALL   execStr   
31AF   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
31C9                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
31C9   E1                     POP   HL   
31CA   E5                     PUSH   HL   
31CB   11 05 00               LD   DE,5   
31CE   B7                     OR   A   
31CF   ED 52                  SBC   HL,DE   
31D1   7D                     LD   A,L   
31D2   B4                     OR   H   
31D3   CA 40 32               JP   Z,expectM_0_2685S50   
31D6   CD 8C 0B               CALL   printStr   
31D9   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
31F9   CD 8C 0B               CALL   printStr   
31FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
320B   21 05 00               LD   hl,5   
320E   E5                     PUSH   hl   
320F   CD 53 0C               CALL   run   
3212   2E 00                  .CSTR   "."   
3214   CD 8C 0B               CALL   printStr   
3217   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3224   E1                     POP   hl   
3225   E5                     PUSH   hl   
3226   E5                     PUSH   hl   
3227   CD 53 0C               CALL   run   
322A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
323E   76                     HALT      
323F   00                     .CSTR      
3240                EXPECTM_0_2685S50:      
3240   E1                     POP   HL   
3241                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3241   31 80 46               LD   SP,STACK   
3244   CD 93 0B               CALL   init   
3247   CD 16 45               CALL   execStr   
324A   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
325B                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
325B   E1                     POP   HL   
325C   E5                     PUSH   HL   
325D   11 02 00               LD   DE,2   
3260   B7                     OR   A   
3261   ED 52                  SBC   HL,DE   
3263   7D                     LD   A,L   
3264   B4                     OR   H   
3265   CA C9 32               JP   Z,expectM_0_2686S50   
3268   CD 8C 0B               CALL   printStr   
326B   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3282   CD 8C 0B               CALL   printStr   
3285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3294   21 02 00               LD   hl,2   
3297   E5                     PUSH   hl   
3298   CD 53 0C               CALL   run   
329B   2E 00                  .CSTR   "."   
329D   CD 8C 0B               CALL   printStr   
32A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32AD   E1                     POP   hl   
32AE   E5                     PUSH   hl   
32AF   E5                     PUSH   hl   
32B0   CD 53 0C               CALL   run   
32B3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
32C7   76                     HALT      
32C8   00                     .CSTR      
32C9                EXPECTM_0_2686S50:      
32C9   E1                     POP   HL   
32CA                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
32CA   31 80 46               LD   SP,STACK   
32CD   CD 93 0B               CALL   init   
32D0   CD 16 45               CALL   execStr   
32D3   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
32EA                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
32EA   E1                     POP   HL   
32EB   E5                     PUSH   HL   
32EC   11 64 00               LD   DE,100   
32EF   B7                     OR   A   
32F0   ED 52                  SBC   HL,DE   
32F2   7D                     LD   A,L   
32F3   B4                     OR   H   
32F4   CA 5E 33               JP   Z,expectM_0_2687S50   
32F7   CD 8C 0B               CALL   printStr   
32FA   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
3317   CD 8C 0B               CALL   printStr   
331A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3329   21 64 00               LD   hl,100   
332C   E5                     PUSH   hl   
332D   CD 53 0C               CALL   run   
3330   2E 00                  .CSTR   "."   
3332   CD 8C 0B               CALL   printStr   
3335   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3342   E1                     POP   hl   
3343   E5                     PUSH   hl   
3344   E5                     PUSH   hl   
3345   CD 53 0C               CALL   run   
3348   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
335C   76                     HALT      
335D   00                     .CSTR      
335E                EXPECTM_0_2687S50:      
335E   E1                     POP   HL   
335F                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
335F   31 80 46               LD   SP,STACK   
3362   CD 93 0B               CALL   init   
3365   CD 16 45               CALL   execStr   
3368   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
3380                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
3380   E1                     POP   HL   
3381   E5                     PUSH   HL   
3382   11 01 00               LD   DE,1   
3385   B7                     OR   A   
3386   ED 52                  SBC   HL,DE   
3388   7D                     LD   A,L   
3389   B4                     OR   H   
338A   CA F5 33               JP   Z,expectM_0_2688S50   
338D   CD 8C 0B               CALL   printStr   
3390   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
33AE   CD 8C 0B               CALL   printStr   
33B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33C0   21 01 00               LD   hl,1   
33C3   E5                     PUSH   hl   
33C4   CD 53 0C               CALL   run   
33C7   2E 00                  .CSTR   "."   
33C9   CD 8C 0B               CALL   printStr   
33CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D9   E1                     POP   hl   
33DA   E5                     PUSH   hl   
33DB   E5                     PUSH   hl   
33DC   CD 53 0C               CALL   run   
33DF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
33F3   76                     HALT      
33F4   00                     .CSTR      
33F5                EXPECTM_0_2688S50:      
33F5   E1                     POP   HL   
33F6                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
33F6   31 80 46               LD   SP,STACK   
33F9   CD 93 0B               CALL   init   
33FC   CD 16 45               CALL   execStr   
33FF   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
3418                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
3418   E1                     POP   HL   
3419   E5                     PUSH   HL   
341A   11 02 00               LD   DE,2   
341D   B7                     OR   A   
341E   ED 52                  SBC   HL,DE   
3420   7D                     LD   A,L   
3421   B4                     OR   H   
3422   CA 8E 34               JP   Z,expectM_0_2689S50   
3425   CD 8C 0B               CALL   printStr   
3428   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3447   CD 8C 0B               CALL   printStr   
344A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3459   21 02 00               LD   hl,2   
345C   E5                     PUSH   hl   
345D   CD 53 0C               CALL   run   
3460   2E 00                  .CSTR   "."   
3462   CD 8C 0B               CALL   printStr   
3465   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3472   E1                     POP   hl   
3473   E5                     PUSH   hl   
3474   E5                     PUSH   hl   
3475   CD 53 0C               CALL   run   
3478   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
348C   76                     HALT      
348D   00                     .CSTR      
348E                EXPECTM_0_2689S50:      
348E   E1                     POP   HL   
348F                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
348F   31 80 46               LD   SP,STACK   
3492   CD 93 0B               CALL   init   
3495   CD 16 45               CALL   execStr   
3498   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
34B7                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
34B7   E1                     POP   HL   
34B8   E5                     PUSH   HL   
34B9   11 0B 00               LD   DE,11   
34BC   B7                     OR   A   
34BD   ED 52                  SBC   HL,DE   
34BF   7D                     LD   A,L   
34C0   B4                     OR   H   
34C1   CA 33 35               JP   Z,expectM_0_2690S50   
34C4   CD 8C 0B               CALL   printStr   
34C7   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
34EC   CD 8C 0B               CALL   printStr   
34EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34FE   21 0B 00               LD   hl,11   
3501   E5                     PUSH   hl   
3502   CD 53 0C               CALL   run   
3505   2E 00                  .CSTR   "."   
3507   CD 8C 0B               CALL   printStr   
350A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3517   E1                     POP   hl   
3518   E5                     PUSH   hl   
3519   E5                     PUSH   hl   
351A   CD 53 0C               CALL   run   
351D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3531   76                     HALT      
3532   00                     .CSTR      
3533                EXPECTM_0_2690S50:      
3533   E1                     POP   HL   
3534                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3534   31 80 46               LD   SP,STACK   
3537   CD 93 0B               CALL   init   
353A   CD 16 45               CALL   execStr   
353D   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
355C                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
355C   E1                     POP   HL   
355D   E5                     PUSH   HL   
355E   11 15 00               LD   DE,21   
3561   B7                     OR   A   
3562   ED 52                  SBC   HL,DE   
3564   7D                     LD   A,L   
3565   B4                     OR   H   
3566   CA D8 35               JP   Z,expectM_0_2691S50   
3569   CD 8C 0B               CALL   printStr   
356C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3591   CD 8C 0B               CALL   printStr   
3594   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35A3   21 15 00               LD   hl,21   
35A6   E5                     PUSH   hl   
35A7   CD 53 0C               CALL   run   
35AA   2E 00                  .CSTR   "."   
35AC   CD 8C 0B               CALL   printStr   
35AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35BC   E1                     POP   hl   
35BD   E5                     PUSH   hl   
35BE   E5                     PUSH   hl   
35BF   CD 53 0C               CALL   run   
35C2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
35D6   76                     HALT      
35D7   00                     .CSTR      
35D8                EXPECTM_0_2691S50:      
35D8   E1                     POP   HL   
35D9                          ;*Macro unroll:  test "[10 20 30] 1%", 20
35D9   31 80 46               LD   SP,STACK   
35DC   CD 93 0B               CALL   init   
35DF   CD 16 45               CALL   execStr   
35E2   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
35F0                          ;*Macro unroll:  expect "[10 20 30] 1%",20
35F0   E1                     POP   HL   
35F1   E5                     PUSH   HL   
35F2   11 14 00               LD   DE,20   
35F5   B7                     OR   A   
35F6   ED 52                  SBC   HL,DE   
35F8   7D                     LD   A,L   
35F9   B4                     OR   H   
35FA   CA 5B 36               JP   Z,expectM_0_2692S50   
35FD   CD 8C 0B               CALL   printStr   
3600   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
3614   CD 8C 0B               CALL   printStr   
3617   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3626   21 14 00               LD   hl,20   
3629   E5                     PUSH   hl   
362A   CD 53 0C               CALL   run   
362D   2E 00                  .CSTR   "."   
362F   CD 8C 0B               CALL   printStr   
3632   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
363F   E1                     POP   hl   
3640   E5                     PUSH   hl   
3641   E5                     PUSH   hl   
3642   CD 53 0C               CALL   run   
3645   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3659   76                     HALT      
365A   00                     .CSTR      
365B                EXPECTM_0_2692S50:      
365B   E1                     POP   HL   
365C                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
365C   31 80 46               LD   SP,STACK   
365F   CD 93 0B               CALL   init   
3662   CD 16 45               CALL   execStr   
3665   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
3676                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
3676   E1                     POP   HL   
3677   E5                     PUSH   HL   
3678   11 04 00               LD   DE,4   
367B   B7                     OR   A   
367C   ED 52                  SBC   HL,DE   
367E   7D                     LD   A,L   
367F   B4                     OR   H   
3680   CA E4 36               JP   Z,expectM_0_2693S50   
3683   CD 8C 0B               CALL   printStr   
3686   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
369D   CD 8C 0B               CALL   printStr   
36A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36AF   21 04 00               LD   hl,4   
36B2   E5                     PUSH   hl   
36B3   CD 53 0C               CALL   run   
36B6   2E 00                  .CSTR   "."   
36B8   CD 8C 0B               CALL   printStr   
36BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36C8   E1                     POP   hl   
36C9   E5                     PUSH   hl   
36CA   E5                     PUSH   hl   
36CB   CD 53 0C               CALL   run   
36CE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
36E2   76                     HALT      
36E3   00                     .CSTR      
36E4                EXPECTM_0_2693S50:      
36E4   E1                     POP   HL   
36E5                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
36E5   31 80 46               LD   SP,STACK   
36E8   CD 93 0B               CALL   init   
36EB   CD 16 45               CALL   execStr   
36EE   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
36FC                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
36FC   E1                     POP   HL   
36FD   E5                     PUSH   HL   
36FE   11 02 00               LD   DE,2   
3701   B7                     OR   A   
3702   ED 52                  SBC   HL,DE   
3704   7D                     LD   A,L   
3705   B4                     OR   H   
3706   CA 67 37               JP   Z,expectM_0_2694S50   
3709   CD 8C 0B               CALL   printStr   
370C   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3720   CD 8C 0B               CALL   printStr   
3723   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3732   21 02 00               LD   hl,2   
3735   E5                     PUSH   hl   
3736   CD 53 0C               CALL   run   
3739   2E 00                  .CSTR   "."   
373B   CD 8C 0B               CALL   printStr   
373E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
374B   E1                     POP   hl   
374C   E5                     PUSH   hl   
374D   E5                     PUSH   hl   
374E   CD 53 0C               CALL   run   
3751   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3765   76                     HALT      
3766   00                     .CSTR      
3767                EXPECTM_0_2694S50:      
3767   E1                     POP   HL   
3768                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3768   31 80 46               LD   SP,STACK   
376B   CD 93 0B               CALL   init   
376E   CD 16 45               CALL   execStr   
3771   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3785                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3785   E1                     POP   HL   
3786   E5                     PUSH   HL   
3787   11 42 00               LD   DE,66   
378A   B7                     OR   A   
378B   ED 52                  SBC   HL,DE   
378D   7D                     LD   A,L   
378E   B4                     OR   H   
378F   CA F6 37               JP   Z,expectM_0_2695S50   
3792   CD 8C 0B               CALL   printStr   
3795   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
37AF   CD 8C 0B               CALL   printStr   
37B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37C1   21 42 00               LD   hl,66   
37C4   E5                     PUSH   hl   
37C5   CD 53 0C               CALL   run   
37C8   2E 00                  .CSTR   "."   
37CA   CD 8C 0B               CALL   printStr   
37CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37DA   E1                     POP   hl   
37DB   E5                     PUSH   hl   
37DC   E5                     PUSH   hl   
37DD   CD 53 0C               CALL   run   
37E0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
37F4   76                     HALT      
37F5   00                     .CSTR      
37F6                EXPECTM_0_2695S50:      
37F6   E1                     POP   HL   
37F7                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
37F7   31 80 46               LD   SP,STACK   
37FA   CD 93 0B               CALL   init   
37FD   CD 16 45               CALL   execStr   
3800   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3814                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3814   E1                     POP   HL   
3815   E5                     PUSH   HL   
3816   11 0A 00               LD   DE,10   
3819   B7                     OR   A   
381A   ED 52                  SBC   HL,DE   
381C   7D                     LD   A,L   
381D   B4                     OR   H   
381E   CA 85 38               JP   Z,expectM_0_2696S50   
3821   CD 8C 0B               CALL   printStr   
3824   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
383E   CD 8C 0B               CALL   printStr   
3841   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3850   21 0A 00               LD   hl,10   
3853   E5                     PUSH   hl   
3854   CD 53 0C               CALL   run   
3857   2E 00                  .CSTR   "."   
3859   CD 8C 0B               CALL   printStr   
385C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3869   E1                     POP   hl   
386A   E5                     PUSH   hl   
386B   E5                     PUSH   hl   
386C   CD 53 0C               CALL   run   
386F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3883   76                     HALT      
3884   00                     .CSTR      
3885                EXPECTM_0_2696S50:      
3885   E1                     POP   HL   
3886                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
3886   31 80 46               LD   SP,STACK   
3889   CD 93 0B               CALL   init   
388C   CD 16 45               CALL   execStr   
388F   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
38AB                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
38AB   E1                     POP   HL   
38AC   E5                     PUSH   HL   
38AD   11 0A 00               LD   DE,10   
38B0   B7                     OR   A   
38B1   ED 52                  SBC   HL,DE   
38B3   7D                     LD   A,L   
38B4   B4                     OR   H   
38B5   CA 24 39               JP   Z,expectM_0_2697S50   
38B8   CD 8C 0B               CALL   printStr   
38BB   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
38DD   CD 8C 0B               CALL   printStr   
38E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38EF   21 0A 00               LD   hl,10   
38F2   E5                     PUSH   hl   
38F3   CD 53 0C               CALL   run   
38F6   2E 00                  .CSTR   "."   
38F8   CD 8C 0B               CALL   printStr   
38FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3908   E1                     POP   hl   
3909   E5                     PUSH   hl   
390A   E5                     PUSH   hl   
390B   CD 53 0C               CALL   run   
390E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3922   76                     HALT      
3923   00                     .CSTR      
3924                EXPECTM_0_2697S50:      
3924   E1                     POP   HL   
3925                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3925   31 80 46               LD   SP,STACK   
3928   CD 93 0B               CALL   init   
392B   CD 16 45               CALL   execStr   
392E   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
394E                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
394E   E1                     POP   HL   
394F   E5                     PUSH   HL   
3950   11 0A 00               LD   DE,10   
3953   B7                     OR   A   
3954   ED 52                  SBC   HL,DE   
3956   7D                     LD   A,L   
3957   B4                     OR   H   
3958   CA CB 39               JP   Z,expectM_0_2698S50   
395B   CD 8C 0B               CALL   printStr   
395E   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3984   CD 8C 0B               CALL   printStr   
3987   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3996   21 0A 00               LD   hl,10   
3999   E5                     PUSH   hl   
399A   CD 53 0C               CALL   run   
399D   2E 00                  .CSTR   "."   
399F   CD 8C 0B               CALL   printStr   
39A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39AF   E1                     POP   hl   
39B0   E5                     PUSH   hl   
39B1   E5                     PUSH   hl   
39B2   CD 53 0C               CALL   run   
39B5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
39C9   76                     HALT      
39CA   00                     .CSTR      
39CB                EXPECTM_0_2698S50:      
39CB   E1                     POP   HL   
39CC                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
39CC   31 80 46               LD   SP,STACK   
39CF   CD 93 0B               CALL   init   
39D2   CD 16 45               CALL   execStr   
39D5   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
39F5                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
39F5   E1                     POP   HL   
39F6   E5                     PUSH   HL   
39F7   11 14 00               LD   DE,20   
39FA   B7                     OR   A   
39FB   ED 52                  SBC   HL,DE   
39FD   7D                     LD   A,L   
39FE   B4                     OR   H   
39FF   CA 72 3A               JP   Z,expectM_0_2699S50   
3A02   CD 8C 0B               CALL   printStr   
3A05   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3A2B   CD 8C 0B               CALL   printStr   
3A2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A3D   21 14 00               LD   hl,20   
3A40   E5                     PUSH   hl   
3A41   CD 53 0C               CALL   run   
3A44   2E 00                  .CSTR   "."   
3A46   CD 8C 0B               CALL   printStr   
3A49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A56   E1                     POP   hl   
3A57   E5                     PUSH   hl   
3A58   E5                     PUSH   hl   
3A59   CD 53 0C               CALL   run   
3A5C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3A70   76                     HALT      
3A71   00                     .CSTR      
3A72                EXPECTM_0_2699S50:      
3A72   E1                     POP   HL   
3A73                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3A73   31 80 46               LD   SP,STACK   
3A76   CD 93 0B               CALL   init   
3A79   CD 16 45               CALL   execStr   
3A7C   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3A90                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3A90   E1                     POP   HL   
3A91   E5                     PUSH   HL   
3A92   11 04 00               LD   DE,4   
3A95   B7                     OR   A   
3A96   ED 52                  SBC   HL,DE   
3A98   7D                     LD   A,L   
3A99   B4                     OR   H   
3A9A   CA 01 3B               JP   Z,expectM_0_2700S50   
3A9D   CD 8C 0B               CALL   printStr   
3AA0   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3ABA   CD 8C 0B               CALL   printStr   
3ABD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ACC   21 04 00               LD   hl,4   
3ACF   E5                     PUSH   hl   
3AD0   CD 53 0C               CALL   run   
3AD3   2E 00                  .CSTR   "."   
3AD5   CD 8C 0B               CALL   printStr   
3AD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AE5   E1                     POP   hl   
3AE6   E5                     PUSH   hl   
3AE7   E5                     PUSH   hl   
3AE8   CD 53 0C               CALL   run   
3AEB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3AFF   76                     HALT      
3B00   00                     .CSTR      
3B01                EXPECTM_0_2700S50:      
3B01   E1                     POP   HL   
3B02                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3B02   31 80 46               LD   SP,STACK   
3B05   CD 93 0B               CALL   init   
3B08   CD 16 45               CALL   execStr   
3B0B   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3B25                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3B25   E1                     POP   HL   
3B26   E5                     PUSH   HL   
3B27   11 09 00               LD   DE,9   
3B2A   B7                     OR   A   
3B2B   ED 52                  SBC   HL,DE   
3B2D   7D                     LD   A,L   
3B2E   B4                     OR   H   
3B2F   CA 9C 3B               JP   Z,expectM_0_2701S50   
3B32   CD 8C 0B               CALL   printStr   
3B35   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3B55   CD 8C 0B               CALL   printStr   
3B58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B67   21 09 00               LD   hl,9   
3B6A   E5                     PUSH   hl   
3B6B   CD 53 0C               CALL   run   
3B6E   2E 00                  .CSTR   "."   
3B70   CD 8C 0B               CALL   printStr   
3B73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B80   E1                     POP   hl   
3B81   E5                     PUSH   hl   
3B82   E5                     PUSH   hl   
3B83   CD 53 0C               CALL   run   
3B86   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B9A   76                     HALT      
3B9B   00                     .CSTR      
3B9C                EXPECTM_0_2701S50:      
3B9C   E1                     POP   HL   
3B9D                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3B9D   31 80 46               LD   SP,STACK   
3BA0   CD 93 0B               CALL   init   
3BA3   CD 16 45               CALL   execStr   
3BA6   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3BBE                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3BBE   E1                     POP   HL   
3BBF   E5                     PUSH   HL   
3BC0   11 06 00               LD   DE,6   
3BC3   B7                     OR   A   
3BC4   ED 52                  SBC   HL,DE   
3BC6   7D                     LD   A,L   
3BC7   B4                     OR   H   
3BC8   CA 33 3C               JP   Z,expectM_0_2702S50   
3BCB   CD 8C 0B               CALL   printStr   
3BCE   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3BEC   CD 8C 0B               CALL   printStr   
3BEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BFE   21 06 00               LD   hl,6   
3C01   E5                     PUSH   hl   
3C02   CD 53 0C               CALL   run   
3C05   2E 00                  .CSTR   "."   
3C07   CD 8C 0B               CALL   printStr   
3C0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C17   E1                     POP   hl   
3C18   E5                     PUSH   hl   
3C19   E5                     PUSH   hl   
3C1A   CD 53 0C               CALL   run   
3C1D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C31   76                     HALT      
3C32   00                     .CSTR      
3C33                EXPECTM_0_2702S50:      
3C33   E1                     POP   HL   
3C34                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3C34   31 80 46               LD   SP,STACK   
3C37   CD 93 0B               CALL   init   
3C3A   CD 16 45               CALL   execStr   
3C3D   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3C58                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3C58   E1                     POP   HL   
3C59   E5                     PUSH   HL   
3C5A   11 02 00               LD   DE,2   
3C5D   B7                     OR   A   
3C5E   ED 52                  SBC   HL,DE   
3C60   7D                     LD   A,L   
3C61   B4                     OR   H   
3C62   CA D0 3C               JP   Z,expectM_0_2703S50   
3C65   CD 8C 0B               CALL   printStr   
3C68   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3C89   CD 8C 0B               CALL   printStr   
3C8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C9B   21 02 00               LD   hl,2   
3C9E   E5                     PUSH   hl   
3C9F   CD 53 0C               CALL   run   
3CA2   2E 00                  .CSTR   "."   
3CA4   CD 8C 0B               CALL   printStr   
3CA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CB4   E1                     POP   hl   
3CB5   E5                     PUSH   hl   
3CB6   E5                     PUSH   hl   
3CB7   CD 53 0C               CALL   run   
3CBA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3CCE   76                     HALT      
3CCF   00                     .CSTR      
3CD0                EXPECTM_0_2703S50:      
3CD0   E1                     POP   HL   
3CD1                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3CD1   31 80 46               LD   SP,STACK   
3CD4   CD 93 0B               CALL   init   
3CD7   CD 16 45               CALL   execStr   
3CDA   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3D00                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3D00   E1                     POP   HL   
3D01   E5                     PUSH   HL   
3D02   11 0A 00               LD   DE,10   
3D05   B7                     OR   A   
3D06   ED 52                  SBC   HL,DE   
3D08   7D                     LD   A,L   
3D09   B4                     OR   H   
3D0A   CA 83 3D               JP   Z,expectM_0_2704S50   
3D0D   CD 8C 0B               CALL   printStr   
3D10   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3D3C   CD 8C 0B               CALL   printStr   
3D3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D4E   21 0A 00               LD   hl,10   
3D51   E5                     PUSH   hl   
3D52   CD 53 0C               CALL   run   
3D55   2E 00                  .CSTR   "."   
3D57   CD 8C 0B               CALL   printStr   
3D5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D67   E1                     POP   hl   
3D68   E5                     PUSH   hl   
3D69   E5                     PUSH   hl   
3D6A   CD 53 0C               CALL   run   
3D6D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3D81   76                     HALT      
3D82   00                     .CSTR      
3D83                EXPECTM_0_2704S50:      
3D83   E1                     POP   HL   
3D84                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
3D84   31 80 46               LD   SP,STACK   
3D87   CD 93 0B               CALL   init   
3D8A   CD 16 45               CALL   execStr   
3D8D   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
3D99                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
3D99   E1                     POP   HL   
3D9A   E5                     PUSH   HL   
3D9B   11 00 00               LD   DE,NUL   
3D9E   B7                     OR   A   
3D9F   ED 52                  SBC   HL,DE   
3DA1   7D                     LD   A,L   
3DA2   B4                     OR   H   
3DA3   CA 02 3E               JP   Z,expectM_0_2705S50   
3DA6   CD 8C 0B               CALL   printStr   
3DA9   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
3DBB   CD 8C 0B               CALL   printStr   
3DBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DCD   21 00 00               LD   hl,NUL   
3DD0   E5                     PUSH   hl   
3DD1   CD 53 0C               CALL   run   
3DD4   2E 00                  .CSTR   "."   
3DD6   CD 8C 0B               CALL   printStr   
3DD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DE6   E1                     POP   hl   
3DE7   E5                     PUSH   hl   
3DE8   E5                     PUSH   hl   
3DE9   CD 53 0C               CALL   run   
3DEC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E00   76                     HALT      
3E01   00                     .CSTR      
3E02                EXPECTM_0_2705S50:      
3E02   E1                     POP   HL   
3E03                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3E03   31 80 46               LD   SP,STACK   
3E06   CD 93 0B               CALL   init   
3E09   CD 16 45               CALL   execStr   
3E0C   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3E18                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3E18   E1                     POP   HL   
3E19   E5                     PUSH   HL   
3E1A   11 00 00               LD   DE,NUL   
3E1D   B7                     OR   A   
3E1E   ED 52                  SBC   HL,DE   
3E20   7D                     LD   A,L   
3E21   B4                     OR   H   
3E22   CA 81 3E               JP   Z,expectM_0_2706S50   
3E25   CD 8C 0B               CALL   printStr   
3E28   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3E3A   CD 8C 0B               CALL   printStr   
3E3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E4C   21 00 00               LD   hl,NUL   
3E4F   E5                     PUSH   hl   
3E50   CD 53 0C               CALL   run   
3E53   2E 00                  .CSTR   "."   
3E55   CD 8C 0B               CALL   printStr   
3E58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E65   E1                     POP   hl   
3E66   E5                     PUSH   hl   
3E67   E5                     PUSH   hl   
3E68   CD 53 0C               CALL   run   
3E6B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E7F   76                     HALT      
3E80   00                     .CSTR      
3E81                EXPECTM_0_2706S50:      
3E81   E1                     POP   HL   
3E82                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3E82   31 80 46               LD   SP,STACK   
3E85   CD 93 0B               CALL   init   
3E88   CD 16 45               CALL   execStr   
3E8B   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3E97                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3E97   E1                     POP   HL   
3E98   E5                     PUSH   HL   
3E99   11 00 00               LD   DE,NUL   
3E9C   B7                     OR   A   
3E9D   ED 52                  SBC   HL,DE   
3E9F   7D                     LD   A,L   
3EA0   B4                     OR   H   
3EA1   CA 00 3F               JP   Z,expectM_0_2707S50   
3EA4   CD 8C 0B               CALL   printStr   
3EA7   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3EB9   CD 8C 0B               CALL   printStr   
3EBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ECB   21 00 00               LD   hl,NUL   
3ECE   E5                     PUSH   hl   
3ECF   CD 53 0C               CALL   run   
3ED2   2E 00                  .CSTR   "."   
3ED4   CD 8C 0B               CALL   printStr   
3ED7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EE4   E1                     POP   hl   
3EE5   E5                     PUSH   hl   
3EE6   E5                     PUSH   hl   
3EE7   CD 53 0C               CALL   run   
3EEA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3EFE   76                     HALT      
3EFF   00                     .CSTR      
3F00                EXPECTM_0_2707S50:      
3F00   E1                     POP   HL   
3F01                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
3F01   31 80 46               LD   SP,STACK   
3F04   CD 93 0B               CALL   init   
3F07   CD 16 45               CALL   execStr   
3F0A   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
3F16                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
3F16   E1                     POP   HL   
3F17   E5                     PUSH   HL   
3F18   11 00 00               LD   DE,NUL   
3F1B   B7                     OR   A   
3F1C   ED 52                  SBC   HL,DE   
3F1E   7D                     LD   A,L   
3F1F   B4                     OR   H   
3F20   CA 7F 3F               JP   Z,expectM_0_2708S50   
3F23   CD 8C 0B               CALL   printStr   
3F26   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
3F38   CD 8C 0B               CALL   printStr   
3F3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F4A   21 00 00               LD   hl,NUL   
3F4D   E5                     PUSH   hl   
3F4E   CD 53 0C               CALL   run   
3F51   2E 00                  .CSTR   "."   
3F53   CD 8C 0B               CALL   printStr   
3F56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F63   E1                     POP   hl   
3F64   E5                     PUSH   hl   
3F65   E5                     PUSH   hl   
3F66   CD 53 0C               CALL   run   
3F69   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3F7D   76                     HALT      
3F7E   00                     .CSTR      
3F7F                EXPECTM_0_2708S50:      
3F7F   E1                     POP   HL   
3F80                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
3F80   31 80 46               LD   SP,STACK   
3F83   CD 93 0B               CALL   init   
3F86   CD 16 45               CALL   execStr   
3F89   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
3F91                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
3F91   E1                     POP   HL   
3F92   E5                     PUSH   HL   
3F93   11 66 47               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3F96   B7                     OR   A   
3F97   ED 52                  SBC   HL,DE   
3F99   7D                     LD   A,L   
3F9A   B4                     OR   H   
3F9B   CA F6 3F               JP   Z,expectM_0_2709S50   
3F9E   CD 8C 0B               CALL   printStr   
3FA1   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
3FAF   CD 8C 0B               CALL   printStr   
3FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FC1   21 66 47               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3FC4   E5                     PUSH   hl   
3FC5   CD 53 0C               CALL   run   
3FC8   2E 00                  .CSTR   "."   
3FCA   CD 8C 0B               CALL   printStr   
3FCD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FDA   E1                     POP   hl   
3FDB   E5                     PUSH   hl   
3FDC   E5                     PUSH   hl   
3FDD   CD 53 0C               CALL   run   
3FE0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3FF4   76                     HALT      
3FF5   00                     .CSTR      
3FF6                EXPECTM_0_2709S50:      
3FF6   E1                     POP   HL   
3FF7                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
3FF7   31 80 46               LD   SP,STACK   
3FFA   CD 93 0B               CALL   init   
3FFD   CD 16 45               CALL   execStr   
4000   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
4008                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
4008   E1                     POP   HL   
4009   E5                     PUSH   HL   
400A   11 34 47               LD   DE,VARS + ("Z"-"A"+1)*2   
400D   B7                     OR   A   
400E   ED 52                  SBC   HL,DE   
4010   7D                     LD   A,L   
4011   B4                     OR   H   
4012   CA 6D 40               JP   Z,expectM_0_2710S50   
4015   CD 8C 0B               CALL   printStr   
4018   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4026   CD 8C 0B               CALL   printStr   
4029   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4038   21 34 47               LD   hl,VARS + ("Z"-"A"+1)*2   
403B   E5                     PUSH   hl   
403C   CD 53 0C               CALL   run   
403F   2E 00                  .CSTR   "."   
4041   CD 8C 0B               CALL   printStr   
4044   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4051   E1                     POP   hl   
4052   E5                     PUSH   hl   
4053   E5                     PUSH   hl   
4054   CD 53 0C               CALL   run   
4057   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
406B   76                     HALT      
406C   00                     .CSTR      
406D                EXPECTM_0_2710S50:      
406D   E1                     POP   HL   
406E                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
406E   31 80 46               LD   SP,STACK   
4071   CD 93 0B               CALL   init   
4074   CD 16 45               CALL   execStr   
4077   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
407F                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
407F   E1                     POP   HL   
4080   E5                     PUSH   HL   
4081   11 32 47               LD   DE,VARS + ("Z"-"A")*2   
4084   B7                     OR   A   
4085   ED 52                  SBC   HL,DE   
4087   7D                     LD   A,L   
4088   B4                     OR   H   
4089   CA E4 40               JP   Z,expectM_0_2711S50   
408C   CD 8C 0B               CALL   printStr   
408F   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
409D   CD 8C 0B               CALL   printStr   
40A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40AF   21 32 47               LD   hl,VARS + ("Z"-"A")*2   
40B2   E5                     PUSH   hl   
40B3   CD 53 0C               CALL   run   
40B6   2E 00                  .CSTR   "."   
40B8   CD 8C 0B               CALL   printStr   
40BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40C8   E1                     POP   hl   
40C9   E5                     PUSH   hl   
40CA   E5                     PUSH   hl   
40CB   CD 53 0C               CALL   run   
40CE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
40E2   76                     HALT      
40E3   00                     .CSTR      
40E4                EXPECTM_0_2711S50:      
40E4   E1                     POP   HL   
40E5                          ;*Macro unroll:  test "'A' /ad", VARS
40E5   31 80 46               LD   SP,STACK   
40E8   CD 93 0B               CALL   init   
40EB   CD 16 45               CALL   execStr   
40EE   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
40F6                          ;*Macro unroll:  expect "'A' /ad",VARS
40F6   E1                     POP   HL   
40F7   E5                     PUSH   HL   
40F8   11 00 47               LD   DE,VARS   
40FB   B7                     OR   A   
40FC   ED 52                  SBC   HL,DE   
40FE   7D                     LD   A,L   
40FF   B4                     OR   H   
4100   CA 5B 41               JP   Z,expectM_0_2712S50   
4103   CD 8C 0B               CALL   printStr   
4106   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4114   CD 8C 0B               CALL   printStr   
4117   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4126   21 00 47               LD   hl,VARS   
4129   E5                     PUSH   hl   
412A   CD 53 0C               CALL   run   
412D   2E 00                  .CSTR   "."   
412F   CD 8C 0B               CALL   printStr   
4132   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
413F   E1                     POP   hl   
4140   E5                     PUSH   hl   
4141   E5                     PUSH   hl   
4142   CD 53 0C               CALL   run   
4145   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4159   76                     HALT      
415A   00                     .CSTR      
415B                EXPECTM_0_2712S50:      
415B   E1                     POP   HL   
415C                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
415C   31 80 46               LD   SP,STACK   
415F   CD 93 0B               CALL   init   
4162   CD 16 45               CALL   execStr   
4165   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
4174                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
4174   E1                     POP   HL   
4175   E5                     PUSH   HL   
4176   11 2D 00               LD   DE,$2D   
4179   B7                     OR   A   
417A   ED 52                  SBC   HL,DE   
417C   7D                     LD   A,L   
417D   B4                     OR   H   
417E   CA E0 41               JP   Z,expectM_0_2713S50   
4181   CD 8C 0B               CALL   printStr   
4184   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
4199   CD 8C 0B               CALL   printStr   
419C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41AB   21 2D 00               LD   hl,$2D   
41AE   E5                     PUSH   hl   
41AF   CD 53 0C               CALL   run   
41B2   2E 00                  .CSTR   "."   
41B4   CD 8C 0B               CALL   printStr   
41B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41C4   E1                     POP   hl   
41C5   E5                     PUSH   hl   
41C6   E5                     PUSH   hl   
41C7   CD 53 0C               CALL   run   
41CA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
41DE   76                     HALT      
41DF   00                     .CSTR      
41E0                EXPECTM_0_2713S50:      
41E0   E1                     POP   HL   
41E1                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
41E1   31 80 46               LD   SP,STACK   
41E4   CD 93 0B               CALL   init   
41E7   CD 16 45               CALL   execStr   
41EA   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
41FA                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
41FA   E1                     POP   HL   
41FB   E5                     PUSH   HL   
41FC   11 41 00               LD   DE,65   
41FF   B7                     OR   A   
4200   ED 52                  SBC   HL,DE   
4202   7D                     LD   A,L   
4203   B4                     OR   H   
4204   CA 67 42               JP   Z,expectM_0_2714S50   
4207   CD 8C 0B               CALL   printStr   
420A   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
4220   CD 8C 0B               CALL   printStr   
4223   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4232   21 41 00               LD   hl,65   
4235   E5                     PUSH   hl   
4236   CD 53 0C               CALL   run   
4239   2E 00                  .CSTR   "."   
423B   CD 8C 0B               CALL   printStr   
423E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
424B   E1                     POP   hl   
424C   E5                     PUSH   hl   
424D   E5                     PUSH   hl   
424E   CD 53 0C               CALL   run   
4251   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4265   76                     HALT      
4266   00                     .CSTR      
4267                EXPECTM_0_2714S50:      
4267   E1                     POP   HL   
4268                          ;*Macro unroll:  test "123 /bd", 3
4268   31 80 46               LD   SP,STACK   
426B   CD 93 0B               CALL   init   
426E   CD 16 45               CALL   execStr   
4271   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
4279                          ;*Macro unroll:  expect "123 /bd",3
4279   E1                     POP   HL   
427A   E5                     PUSH   HL   
427B   11 03 00               LD   DE,3   
427E   B7                     OR   A   
427F   ED 52                  SBC   HL,DE   
4281   7D                     LD   A,L   
4282   B4                     OR   H   
4283   CA DE 42               JP   Z,expectM_0_2715S50   
4286   CD 8C 0B               CALL   printStr   
4289   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
4297   CD 8C 0B               CALL   printStr   
429A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42A9   21 03 00               LD   hl,3   
42AC   E5                     PUSH   hl   
42AD   CD 53 0C               CALL   run   
42B0   2E 00                  .CSTR   "."   
42B2   CD 8C 0B               CALL   printStr   
42B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42C2   E1                     POP   hl   
42C3   E5                     PUSH   hl   
42C4   E5                     PUSH   hl   
42C5   CD 53 0C               CALL   run   
42C8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
42DC   76                     HALT      
42DD   00                     .CSTR      
42DE                EXPECTM_0_2715S50:      
42DE   E1                     POP   HL   
42DF                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
42DF   31 80 46               LD   SP,STACK   
42E2   CD 93 0B               CALL   init   
42E5   CD 16 45               CALL   execStr   
42E8   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
42F8                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
42F8   E1                     POP   HL   
42F9   E5                     PUSH   HL   
42FA   11 32 00               LD   DE,$32   
42FD   B7                     OR   A   
42FE   ED 52                  SBC   HL,DE   
4300   7D                     LD   A,L   
4301   B4                     OR   H   
4302   CA 65 43               JP   Z,expectM_0_2716S50   
4305   CD 8C 0B               CALL   printStr   
4308   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
431E   CD 8C 0B               CALL   printStr   
4321   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4330   21 32 00               LD   hl,$32   
4333   E5                     PUSH   hl   
4334   CD 53 0C               CALL   run   
4337   2E 00                  .CSTR   "."   
4339   CD 8C 0B               CALL   printStr   
433C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4349   E1                     POP   hl   
434A   E5                     PUSH   hl   
434B   E5                     PUSH   hl   
434C   CD 53 0C               CALL   run   
434F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4363   76                     HALT      
4364   00                     .CSTR      
4365                EXPECTM_0_2716S50:      
4365   E1                     POP   HL   
4366                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
4366   31 80 46               LD   SP,STACK   
4369   CD 93 0B               CALL   init   
436C   CD 16 45               CALL   execStr   
436F   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
438B                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
438B   E1                     POP   HL   
438C   E5                     PUSH   HL   
438D   11 09 00               LD   DE,9   
4390   B7                     OR   A   
4391   ED 52                  SBC   HL,DE   
4393   7D                     LD   A,L   
4394   B4                     OR   H   
4395   CA 04 44               JP   Z,expectM_0_2717S50   
4398   CD 8C 0B               CALL   printStr   
439B   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
43BD   CD 8C 0B               CALL   printStr   
43C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43CF   21 09 00               LD   hl,9   
43D2   E5                     PUSH   hl   
43D3   CD 53 0C               CALL   run   
43D6   2E 00                  .CSTR   "."   
43D8   CD 8C 0B               CALL   printStr   
43DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E8   E1                     POP   hl   
43E9   E5                     PUSH   hl   
43EA   E5                     PUSH   hl   
43EB   CD 53 0C               CALL   run   
43EE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4402   76                     HALT      
4403   00                     .CSTR      
4404                EXPECTM_0_2717S50:      
4404   E1                     POP   HL   
4405                          ;*Macro unroll:  test "#4321 /bh", 4
4405   31 80 46               LD   SP,STACK   
4408   CD 93 0B               CALL   init   
440B   CD 16 45               CALL   execStr   
440E   23 34 33 32 31 20 2F 62 68 00 .CSTR   "#4321 /bh"   
4418                          ;*Macro unroll:  expect "#4321 /bh",4
4418   E1                     POP   HL   
4419   E5                     PUSH   HL   
441A   11 04 00               LD   DE,4   
441D   B7                     OR   A   
441E   ED 52                  SBC   HL,DE   
4420   7D                     LD   A,L   
4421   B4                     OR   H   
4422   CA 7F 44               JP   Z,expectM_0_2718S50   
4425   CD 8C 0B               CALL   printStr   
4428   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 00 .CSTR   "Code: ","#4321 /bh"   
4438   CD 8C 0B               CALL   printStr   
443B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
444A   21 04 00               LD   hl,4   
444D   E5                     PUSH   hl   
444E   CD 53 0C               CALL   run   
4451   2E 00                  .CSTR   "."   
4453   CD 8C 0B               CALL   printStr   
4456   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4463   E1                     POP   hl   
4464   E5                     PUSH   hl   
4465   E5                     PUSH   hl   
4466   CD 53 0C               CALL   run   
4469   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
447D   76                     HALT      
447E   00                     .CSTR      
447F                EXPECTM_0_2718S50:      
447F   E1                     POP   HL   
4480                          ;*Macro unroll:  test "#4321 /bh/vB/c 0%", $34
4480   31 80 46               LD   SP,STACK   
4483   CD 93 0B               CALL   init   
4486   CD 16 45               CALL   execStr   
4489   23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "#4321 /bh/vB/c 0%"   
449B                          ;*Macro unroll:  expect "#4321 /bh/vB/c 0%",$34
449B   E1                     POP   HL   
449C   E5                     PUSH   HL   
449D   11 34 00               LD   DE,$34   
44A0   B7                     OR   A   
44A1   ED 52                  SBC   HL,DE   
44A3   7D                     LD   A,L   
44A4   B4                     OR   H   
44A5   CA 0A 45               JP   Z,expectM_0_2719S50   
44A8   CD 8C 0B               CALL   printStr   
44AB   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","#4321 /bh/vB/c 0%"   
44C3   CD 8C 0B               CALL   printStr   
44C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44D5   21 34 00               LD   hl,$34   
44D8   E5                     PUSH   hl   
44D9   CD 53 0C               CALL   run   
44DC   2E 00                  .CSTR   "."   
44DE   CD 8C 0B               CALL   printStr   
44E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44EE   E1                     POP   hl   
44EF   E5                     PUSH   hl   
44F0   E5                     PUSH   hl   
44F1   CD 53 0C               CALL   run   
44F4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4508   76                     HALT      
4509   00                     .CSTR      
450A                EXPECTM_0_2719S50:      
450A   E1                     POP   HL   
450B                             ; 
450B   CD 8C 0B               CALL   printStr   
450E   44 6F 6E 65 21 00      .CSTR   "Done!"   
4514   76                     HALT      
4515                          ALIGN   2   
4516                             ; printer:
4516                             ;     pop hl
4516                             ;     call prtdec
4516                             ;     jp (ix)
4516                             ; executes a null teminated string (null executes exit_)
4516                             ; the string should be immedaitely following the call
4516                EXECSTR:      ; create a root stack frame
4516   C1                     POP   bc   ; bc = code*
4517   0B                     DEC   bc   ; dec to prepare for next routine
4518   11 00 00               LD   de,0   
451B   D5                     PUSH   de   ; push fake IP
451C   D5                     PUSH   de   ; push null arg_list*
451D   D5                     PUSH   de   ; push null first_arg*
451E   D5                     PUSH   de   ; push fake BP
451F   DD E9                  JP   (ix)   
4521                          ALIGN   $100   
4600                          DS   STKSIZE   
4680                STACK:       
4680                          ALIGN   $100   
4700                VARS:        
4700                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
47D0                RESTARTS:      
47D0                RST08:    DS   2   
47D2                RST10:    DS   2   
47D4                RST18:    DS   2   
47D6                RST20:    DS   2   
47D8                RST28:    DS   2   
47DA                RST30:    DS   2   ; 
47DC                BAUD:     DS   2   ; 
47DE                INTVEC:   DS   2   ; 
47E0                NMIVEC:   DS   2   ; 
47E2                GETCVEC:   DS   2   ; 
47E4                PUTCVEC:   DS   2   ; 
47E6                SYSVARS:      
47E6                             ; initialised sys variables (preserved)
47E6                VDATAWIDTH:   DS   2   ; 
47E8                VTIBPTR:   DS   2   ; 
47EA                VBUFPTR:   DS   2   ; 
47EC                VNEXT:    DS   2   ; 
47EE                VHEAPPTR:   DS   2   ; 
47F0                             ; uninitialised sys variables (preserved)
47F0                VPOINTER:   DS   2   ; 
47F2                VREMAIN:   DS   2   ; 
47F4                VSAVEDIP:   DS   2   ; 
47F6                VSAVEDSP:   DS   2   ; 
47F8                VSAVEDBP:   DS   2   ; 
47FA                VCHECKSUM:   DS   2   ; 
47FC                             ; uninitialised sys variables (unpreserved)
47FC                VTEMP1:   DS   2   ; 
47FE                VTEMP2:   DS   2   ; 
4800                VLASTDEF:   DS   2   ; 
4802                VHASHSTR:   DS   2   ; 
4804                TBPTR:    DS   2   ; reserved for tests
4806                          ALIGN   $100   
4900                TIB:      DS   TIBSIZE   
4A00                BUF:      DS   BUFSIZE   
4B00                          ALIGN   $100   
4B00                PAD:      DS   $100   
4C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AFD DEFINED AT LINE 1711 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
STKSIZE:            0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 53 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
TRESERV:            0000 DEFINED AT LINE 32 IN MAIN.asm
TNUMBER:            0001 DEFINED AT LINE 33 IN MAIN.asm
TSTRING:            0002 DEFINED AT LINE 34 IN MAIN.asm
TPOINTER:           0003 DEFINED AT LINE 35 IN MAIN.asm
TARRAY:             0004 DEFINED AT LINE 36 IN MAIN.asm
                    > USED AT LINE 423 IN MAIN.asm
TBLOCK:             0005 DEFINED AT LINE 37 IN MAIN.asm
TFUNC:              0006 DEFINED AT LINE 38 IN MAIN.asm
TARGLST:            0007 DEFINED AT LINE 39 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 67 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 170 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 172 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 174 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 176 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 178 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 180 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 182 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 184 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 186 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 248 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 250 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 257 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 262 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 264 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 266 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
ADD:                038A DEFINED AT LINE 273 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
AT:                 039C DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADDR:               039C DEFINED AT LINE 298 IN MAIN.asm
AMPER:              03A6 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
AND:                03A6 DEFINED AT LINE 304 IN MAIN.asm
AND1:               03AD DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
PIPE:               03B1 DEFINED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03B1 DEFINED AT LINE 318 IN MAIN.asm
XOR:                03BA DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
XOR1:               03BB DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
INVERT:             03C5 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
DOLLAR:             03CA DEFINED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
ARG:                03CA DEFINED AT LINE 348 IN MAIN.asm
ARG0:               03E8 DEFINED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
ARG0A:              03F1 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
ARG1:               03F6 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
ARG1A:              03FE DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
LBRACK:             0401 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARRAYSTART:         0401 DEFINED AT LINE 392 IN MAIN.asm
RBRACK:             041D DEFINED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYEND:           041D DEFINED AT LINE 407 IN MAIN.asm
ARRAYEND1:          043B DEFINED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
ARRAYEND2:          044B DEFINED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRINDEX:           0470 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRINDEX0:          0478 DEFINED AT LINE 470 IN MAIN.asm
ARRINDEX1:          0479 DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
ARRINDEX2:          0485 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
ASSIGN:             0488 DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048A DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
ASSIGNX:            048B DEFINED AT LINE 491 IN MAIN.asm
ASSIGN1:            0497 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
COLON:              0499 DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            0499 DEFINED AT LINE 507 IN MAIN.asm
ARGLIST1:           04A3 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
ARGLIST1A:          04AB DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
ARGLIST2:           04B3 DEFINED AT LINE 525 IN MAIN.asm
ARGLIST3:           04BB DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST4:           04BE DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
ARGLIST5:           04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE:             04D0 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCK:              04D0 DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
BLOCK1:             04D4 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
BLOCK2:             0500 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
BLOCK3:             0503 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCK4:             050B DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
BLOCK5:             050E DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCK6:             0536 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
RBRACE:             0539 DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           0539 DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
BLOCKEND1:          056B DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCKEND2:          0577 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
BLOCKEND3:          0589 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
TICK:               0595 DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0595 DEFINED AT LINE 672 IN MAIN.asm
CHAR1:              0598 DEFINED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
CHAR2:              05A4 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR3:              05A7 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BACKSLASH:          05AA DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
COMMA:              05AC DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05AC DEFINED AT LINE 696 IN MAIN.asm
DISCARD1:           05B9 DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
SLASH:              05BB DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
DOT:                05D9 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DOTHEX:             05EE DEFINED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
DOTHEX_BLOCK:       05F7 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
DOTSTR:             0602 DEFINED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
DOTSTR_BLOCK:       060B DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
DOTCHAR:            0616 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
DOTCHAR_BLOCK:      061F DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
DOTDEC:             062A DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
DOTDEC_BLOCK:       0633 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
DIVIDE:             063E DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
DIVIDE1:            0643 DEFINED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
DIVIDE2:            0650 DEFINED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
DIVIDE3:            0651 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
EQUALS:             0657 DEFINED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         065F DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN:           0664 DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
LESSTHAN1:          0669 DEFINED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
TRUE1:              066C DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
NULL1:              0672 DEFINED AT LINE 821 IN MAIN.asm
FALSE1:             0672 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
LPAREN:             0678 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
CARET:              067B DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 067B DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
GO1:                067C DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
GO2:                0682 DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
GOBLOCK:            068E DEFINED AT LINE 849 IN MAIN.asm
GOBLOCK1:           068E DEFINED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
GOBLOCK2:           06B3 DEFINED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
GOFUNC:             06C1 DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
GOFUNC1:            06DC DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
GOFUNC2:            06E2 DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
GOFUNC3:            06ED DEFINED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
GOFUNC4:            0705 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
GOFUNC5:            0709 DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
GOFUNC6:            070C DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
GOFUNC7:            070F DEFINED AT LINE 938 IN MAIN.asm
GOFUNC8:            0714 DEFINED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
HASH:               071F DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             071F DEFINED AT LINE 954 IN MAIN.asm
HEXNUM1:            0722 DEFINED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
HEXNUM2:            072A DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
UPCASE:             073C DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0741 DEFINED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             0746 DEFINED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
QUESTION:           0753 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0753 DEFINED AT LINE 996 IN MAIN.asm
IFTE:               075F DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
IFTE1:              0760 DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
STAR:               076C DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                076C DEFINED AT LINE 1019 IN MAIN.asm
MUL2:               076E DEFINED AT LINE 1022 IN MAIN.asm
MUL3:               0776 DEFINED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
NUM:                0788 DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0791 DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
NUM1:               0792 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
NUM2:               07AA DEFINED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
NUM3:               07B5 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
UNDERSCORE:         07B8 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             07B8 DEFINED AT LINE 1079 IN MAIN.asm
RPAREN:             07BE DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
SEMICOLON:          07C6 DEFINED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07E2 DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
SHIFTLEFT1:         07EA DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
SHIFTLEFT2:         07EB DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
SHIFTRIGHT:         07F2 DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07FA DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
SHIFTRIGHT2:        07FE DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
DBLQUOTE:           0805 DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             0805 DEFINED AT LINE 1151 IN MAIN.asm
STRING1:            080E DEFINED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
STRING2:            0811 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
STRING3:            081A DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
MINUS:              082D DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0839 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
SUB1:               0843 DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
COMMAND:            084C DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
ERROR1:             0896 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
COMMENT:            089D DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
COMMAND_A:          08A6 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
ABSOLUTE:           08B5 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
ADDROF:             08C2 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
ADDROF1:            08D6 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
ADDROF2:            08E1 DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
COMMAND_B:          08E3 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
BUFFERCHAR:         0906 DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
BUFFERDEC:          0915 DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
BUFFERDEC0:         092D DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
BUFFERDEC1:         093D DEFINED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
BUFFERDEC2:         095D DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
BUFFERDEC3:         095F DEFINED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
BUFFERDEC4:         096F DEFINED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
BUFFERDEC5:         0970 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
BUFFERHEX:          0976 DEFINED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
BUFFERHEX1:         0991 DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
BUFFERHEX2:         099A DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
BREAK:              09A5 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
BREAK1:             09AC DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
BUFFERSTRING:       09BF DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERSTRING0:      09C6 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
BUFFERSTRING1:      09C9 DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
BUFFERXSPACES:      09DB DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
BUFFERXSPACES1:     09E2 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
BUFFERXSPACES2:     09E6 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
COMMAND_P:          09EF DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
PARTIAL:            0A08 DEFINED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
PRINTCHARS:         0A28 DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
PRINTCHARS1:        0A2E DEFINED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
PRINTCHARS2:        0A30 DEFINED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
PRINTSTACK:         0A3A DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
SIZE:               0A3C DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
PRINTX:             0A45 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
PRINTX_BLOCK:       0A4E DEFINED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
COMMAND_V:          0A70 DEFINED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
CONSTBUFSTART:      0A93 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
CONSTHEAPSTART:     0A98 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
CONSTTIBSTART:      0A9D DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
VARBUFPTR:          0AA2 DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
VARHEAPPTR:         0AAB DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
VARTIBPTR:          0AB4 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
VARIABLE:           0ABD DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
CONSTANT:           0AC0 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
COMMAND_I:          0AC3 DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
CHARS:              0AD2 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
CHARS1:             0AD5 DEFINED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
INPUT:              0ADA DEFINED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
KEY:                0AE5 DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
OUTPUT:             0AEE DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
NUMBERS:            0AF7 DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
FILTER:             0AFD DEFINED AT LINE 1709 IN MAIN.asm
MAP:                0AFD DEFINED AT LINE 1710 IN MAIN.asm
ZPRT:               0AFF DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
ZPRT_ARGS:          0B0A DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
ZPRT_BLOCK:         0B0C DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
ARGS0A1L_:          0B33 DEFINED AT LINE 1729 IN MAIN.asm
ARGS0A1L:           0B35 DEFINED AT LINE 1732 IN MAIN.asm
ARGS1A0L_:          0B36 DEFINED AT LINE 1735 IN MAIN.asm
ARGS1A0L:           0B38 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
ARGS1A1L_:          0B39 DEFINED AT LINE 1741 IN MAIN.asm
ARGS1A1L:           0B3B DEFINED AT LINE 1744 IN MAIN.asm
ARGS2A0L_:          0B3D DEFINED AT LINE 1747 IN MAIN.asm
ARGS2A0L:           0B3F DEFINED AT LINE 1750 IN MAIN.asm
PRTSTR0:            0B41 DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
PRTSTR:             0B45 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
NESTING:            0B4A DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
NESTING0:           0B54 DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
NESTING1A:          0B5B DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
NESTING1:           0B5E DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
NESTING2:           0B6D DEFINED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
NESTING3:           0B6F DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
NESTING4:           0B7A DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
PROMPT:             0B7C DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
CRLF:               0B85 DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
PRINTSTR:           0B8C DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 20
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 142
INIT:               0B93 DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
INIT0:              0BAC DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
START:              0BB1 DEFINED AT LINE 1848 IN MAIN.asm
INTERPRET:          0BC7 DEFINED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
INTERPRET2:         0BD3 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
INTERPRET3:         0BDB DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
INTERPRET4:         0BE1 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
INTERPRET5:         0BE6 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
INTERPRET5A:        0C09 DEFINED AT LINE 1916 IN MAIN.asm
INTERPRET6:         0C0B DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
INTERPRET7:         0C19 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
INTERPRET8:         0C2C DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
NEXT:               0C37 DEFINED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
NEXT1:              0C48 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
EXIT:               0C4F DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
RUN:                0C53 DEFINED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0C57 DEFINED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
BACKSPACE_:         0C6A DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
EDIT_:              0C7A DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
REEDIT_:            0C92 DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
PRINTSTACK_:        0C95 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2602S50:  0D8E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2608S50:  0E05 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2609S50:  0E72 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2610S50:  0EDD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2611S50:  0F48 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2612S50:  0FB3 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2613S50:  101E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2614S50:  108B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2615S50:  10FA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2616S50:  1167 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2617S50:  11D4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2618S50:  1243 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2619S50:  12B4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2620S50:  1323 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2621S50:  1392 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2622S50:  1407 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2623S50:  147C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2624S50:  14EF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2625S50:  1566 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2626S50:  15E1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2627S50:  165A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2628S50:  16CD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2629S50:  1748 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2630S50:  17BF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2631S50:  1832 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2632S50:  18A5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2633S50:  1920 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2634S50:  1993 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2635S50:  1A06 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2636S50:  1A7B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2637S50:  1B00 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2638S50:  1B73 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2639S50:  1BEE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2640S50:  1C61 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2641S50:  1CD8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2642S50:  1D4B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2643S50:  1DC0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2644S50:  1E35 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2645S50:  1EA8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2646S50:  1F1B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2647S50:  1F8E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2648S50:  2001 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2649S50:  2074 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2650S50:  20E7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2651S50:  215A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2652S50:  21CD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2653S50:  2242 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2654S50:  22B7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2655S50:  232C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2656S50:  23A3 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2657S50:  241A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2658S50:  248B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2659S50:  24FC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2660S50:  2573 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2661S50:  25F0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2662S50:  266D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2663S50:  26EE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2664S50:  2779 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2665S50:  2804 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2666S50:  2877 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2667S50:  28EC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2668S50:  2963 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2669S50:  29DC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2670S50:  2A53 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2671S50:  2AC8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2672S50:  2B3F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2673S50:  2BBC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2674S50:  2C3D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2675S50:  2CBA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2676S50:  2D41 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2677S50:  2DCA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2678S50:  2E59 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2679S50:  2EEC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2680S50:  2F71 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2681S50:  2FFC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2682S50:  3089 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2683S50:  3118 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2684S50:  31A5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2685S50:  3240 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2686S50:  32C9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2687S50:  335E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2688S50:  33F5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2689S50:  348E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2690S50:  3533 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2691S50:  35D8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2692S50:  365B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2693S50:  36E4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2694S50:  3767 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2695S50:  37F6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2696S50:  3885 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2697S50:  3924 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2698S50:  39CB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2699S50:  3A72 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2700S50:  3B01 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2701S50:  3B9C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2702S50:  3C33 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2703S50:  3CD0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2704S50:  3D83 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2705S50:  3E02 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2706S50:  3E81 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2707S50:  3F00 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2708S50:  3F7F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2709S50:  3FF6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2710S50:  406D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2711S50:  40E4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2712S50:  415B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2713S50:  41E0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2714S50:  4267 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2715S50:  42DE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2716S50:  4365 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2717S50:  4404 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2718S50:  447F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2719S50:  450A DEFINED AT LINE 41
                    > USED AT LINE 10
EXECSTR:            4516 DEFINED AT LINE 154
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
STACK:              4680 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
VARS:               4700 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           47D0 DEFINED AT LINE 10 IN ram.asm
RST08:              47D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              47D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              47D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              47D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              47D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              47DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               47DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             47DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             47E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            47E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            47E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            47E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1836 IN MAIN.asm
VDATAWIDTH:         47E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
VTIBPTR:            47E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
VBUFPTR:            47EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1347 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
VNEXT:              47EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1833 IN MAIN.asm
VHEAPPTR:           47EE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
VPOINTER:           47F0 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
VREMAIN:            47F2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
VSAVEDIP:           47F4 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           47F6 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           47F8 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          47FA DEFINED AT LINE 42 IN ram.asm
VTEMP1:             47FC DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
VTEMP2:             47FE DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
VLASTDEF:           4800 DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           4802 DEFINED AT LINE 49 IN ram.asm
TBPTR:              4804 DEFINED AT LINE 50 IN ram.asm
TIB:                4900 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
BUF:                4A00 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
PAD:                4B00 DEFINED AT LINE 57 IN ram.asm
HEAP:               4C00 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
