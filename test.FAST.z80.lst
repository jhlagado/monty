0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 52               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 52               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 52               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 52               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 52               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 52               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 52               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 52               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 52               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 52               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 50               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 52               LD   (RST08),HL   
0094   22 D2 52               LD   (RST10),HL   
0097   22 D4 52               LD   (RST18),HL   
009A   22 D6 52               LD   (RST20),HL   
009D   22 D8 52               LD   (RST28),HL   
00A0   22 DA 52               LD   (RST30),HL   
00A3   22 DE 52               LD   (INTVEC),HL   
00A6   22 E0 52               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 52               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 52               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 50                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 51                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   33 0E                  DW   next   ; nNext
01E8   20 53                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 50 08               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 50 08               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F6 52            LD   de,(vPointer)   
0238   21 F6 52               LD   hl,vPointer   
023B   C3 B2 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 50 08               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 EF 0A               JP   num   
026E                EQ_:         
026E   CD EA 0C               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 4E 08               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 37 0B               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 27 0B               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 1F 0B               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 74 0A               JP   dollar   
02C3                LBRACK_:      
02C3   C3 CA 07               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 E6 07               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 95 07               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 5F 08               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 64 08               JP   rbrace   
02D2                TICK_:       
02D2   C3 EB 08               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 81 07               JP   semicolon   
02D8                DOT_:        
02D8   C3 B8 04               JP   dot   
02DB                COLON_:      
02DB   C3 4A 07               JP   colon   
02DE                UPCASE_:      
02DE   C3 91 0A               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 96 0A               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 A8 0A               JP   question   
02E7                STAR_:       
02E7   C3 D3 0A               JP   star   
02EA                HASH_:       
02EA   C3 36 08               JP   hash   
02ED                CARET_:      
02ED   C3 D5 09               JP   caret   
02F0                COMMA_:      
02F0   C3 48 07               JP   comma   
02F3                DQUOTE_:      
02F3   C3 4A 0B               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 57 07               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 48 07               JP   underscore   
02FC                TILDE_:      
02FC   C3 48 07               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA FF 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD D6 0C               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   34                     DB   lsb(command_b_)   
030E   66                     DB   lsb(command_nop_)   
030F   68                     DB   lsb(decimal_)   
0310   66                     DB   lsb(command_nop_)   
0311   FD                     DB   lsb(command_f_)   
0312   66                     DB   lsb(command_nop_)   
0313   7A                     DB   lsb(hexadecimal_)   
0314   3F                     DB   lsb(command_i_)   
0315   66                     DB   lsb(command_nop_)   
0316   80                     DB   lsb(key_)   
0317   66                     DB   lsb(command_nop_)   
0318   48                     DB   lsb(command_m_)   
0319   66                     DB   lsb(command_nop_)   
031A   83                     DB   lsb(output_)   
031B   4B                     DB   lsb(command_p_)   
031C   54                     DB   lsb(command_q_)   
031D   5D                     DB   lsb(command_r_)   
031E   60                     DB   lsb(command_s_)   
031F   86                     DB   lsb(true_)   
0320   66                     DB   lsb(command_nop_)   
0321   63                     DB   lsb(command_v_)   
0322   89                     DB   lsb(words_)   
0323   8C                     DB   lsb(xor_)   
0324   66                     DB   lsb(command_nop_)   
0325   66                     DB   lsb(command_nop_)   
0326   70                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD EA 0C               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   97                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A4                     DB   lsb(addrOf_)   
032E   73                     DB   "s"   ; /as array size
032F   C5                     DB   lsb(arraySize_)   
0330   00                     DB   NUL   
0331   C3 74 03               JP   error1_   
0334                COMMAND_B_:      
0334   CD EA 0C               CALL   jumpTable   
0337   72                     DB   "r"   ; /br break
0338   CD                     DB   lsb(break_)   
0339   79                     DB   "y"   ; /by cold boot
033A   D0                     DB   lsb(coldStart_)   
033B   00                     DB   NUL   
033C   C3 D3 03               JP   bytes_   ; /b bytes
033F                COMMAND_I_:      
033F   CD EA 0C               CALL   jumpTable   
0342   6E                     DB   "n"   ; /in input
0343   DB                     DB   lsb(input_)   
0344   00                     DB   NUL   
0345   C3 74 03               JP   error1_   
0348                COMMAND_M_:      
0348   C3 46 04               JP   command_m   
034B                COMMAND_P_:      
034B   CD EA 0C               CALL   jumpTable   
034E   63                     DB   "c"   ; /pc print chars
034F   E6                     DB   lsb(printChars_)   
0350   00                     DB   NUL   
0351   C3 74 03               JP   error1_   
0354                COMMAND_Q_:      
0354   CD EA 0C               CALL   jumpTable   
0357   74                     DB   "t"   ; /qt quit
0358   ED                     DB   lsb(quit_)   
0359   00                     DB   NUL   
035A   C3 74 03               JP   error1_   
035D                COMMAND_R_:      
035D   C3 52 04               JP   command_r   
0360                COMMAND_S_:      
0360   C3 5F 04               JP   command_s   
0363                COMMAND_V_:      
0363   C3 75 04               JP   command_v   
0366                COMMAND_NOP_:      
0366   DD E9                  JP   (ix)   
0368                DECIMAL_:      
0368   21 0A 00               LD   hl,10   
036B                DECIMAL1:      
036B   22 E8 52               LD   (vNumBase),hl   
036E   DD E9                  JP   (ix)   
0370                DIV_:        
0370   00                     DB   NUL   
0371   C3 00 09               JP   div   
0374                ERROR1_:      
0374   21 01 00               LD   hl,1   ; error 1: unknown command
0377   C3 52 0E               JP   error   
037A                HEXADECIMAL_:      
037A   21 10 00               LD   hl,16   
037D   C3 6B 03               JP   decimal1   
0380                KEY_:        
0380   C3 80 03               JP   key_   
0383                OUTPUT_:      
0383   C3 CA 0A               JP   output   
0386                TRUE_:       
0386   C3 B1 02               JP   true1   
0389                WORDS_:      
0389   C3 F7 03               JP   words   
038C                XOR_:        
038C   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038D                XOR1:        
038D   E1                     POP   hl   
038E   7B                     LD   a,e   
038F   AD                     XOR   l   
0390   6F                     LD   l,a   
0391   7A                     LD   a,d   
0392   AC                     XOR   h   
0393   67                     LD   h,a   
0394   E5                     PUSH   hl   
0395   DD E9                  JP   (ix)   
0397                             ; /ab absolute
0397                             ; num -- num
0397                ABSOLUTE_:      
0397   E1                     POP   hl   
0398   CB 7C                  BIT   7,h   
039A   C8                     RET   z   
039B   AF                     XOR   a   
039C   95                     SUB   l   
039D   6F                     LD   l,a   
039E   9F                     SBC   a,a   
039F   94                     SUB   h   
03A0   67                     LD   h,a   
03A1   E5                     PUSH   hl   
03A2   DD E9                  JP   (ix)   
03A4                             ; /ad addrOf
03A4                             ; char -- addr
03A4                ADDROF_:      
03A4   E1                     POP   hl   ; a = char
03A5   7D                     LD   a,l   
03A6   FE 7B                  CP   "z"+1   ; if a > z then exit
03A8   30 19                  JR   nc,addrOf2   
03AA   D6 41                  SUB   "A"   ; a - 65
03AC   38 15                  JR   c,addrOf2   ; if < A then exit
03AE   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03B0   38 06                  JR   c,addrOf1   
03B2   D6 06                  SUB   "a"-("Z"+1)   
03B4   FE 1A                  CP   "Z"-"A"+1   
03B6   38 0B                  JR   c,addrOf2   ; if < a then exit
03B8                ADDROF1:      
03B8   87                     ADD   a,a   ; double a
03B9   21 00 52               LD   hl,VARS   ; hl = VARS + a
03BC   85                     ADD   a,l   
03BD   6F                     LD   l,a   
03BE   3E 00                  LD   a,0   
03C0   8C                     ADC   a,h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3                ADDROF2:      
03C3   DD E9                  JP   (ix)   
03C5                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C5                             ; array* -- num
03C5                ARRAYSIZE_:      
03C5   E1                     POP   hl   
03C6   2B                     DEC   hl   ; msb size
03C7   56                     LD   d,(hl)   
03C8   2B                     DEC   hl   ; lsb size
03C9   5E                     LD   e,(hl)   
03CA   D5                     PUSH   de   
03CB   DD E9                  JP   (ix)   
03CD                             ; /br
03CD                BREAK_:      
03CD   C3 D1 08               JP   break   
03D0                             ; /by
03D0                COLDSTART_:      
03D0   C3 9B 0D               JP   coldStart   
03D3                             ; /b
03D3                BYTES_:      
03D3   21 01 00               LD   hl,1   
03D6                BYTES1:      
03D6   22 E6 52               LD   (vDataWidth),hl   
03D9   DD E9                  JP   (ix)   
03DB                             ; Z80 port input
03DB                             ; port -- value
03DB                INPUT_:      
03DB   E1                     POP   hl   
03DC   59                     LD   e,c   ; save IP
03DD   4D                     LD   c,l   
03DE   ED 68                  IN   l,(c)   
03E0   26 00                  LD   h,0   
03E2   4B                     LD   c,e   ; restore IP
03E3   E5                     PUSH   hl   
03E4   DD E9                  JP   (ix)   
03E6                             ; /pc printChars
03E6                             ; char* len --
03E6                PRINTCHARS_:      
03E6   E1                     POP   hl   ; hl = count
03E7   D1                     POP   de   ; de = char*
03E8   CD 78 0B               CALL   printChars2   
03EB   DD E9                  JP   (ix)   
03ED                             ; /qt
03ED                             ; bool --
03ED                QUIT_:       
03ED   E1                     POP   hl   ; hl = condition, exit if true
03EE   7D                     LD   a,l   
03EF   B4                     OR   h   
03F0   20 02                  JR   nz,quit1   
03F2   DD E9                  JP   (ix)   
03F4                QUIT1:       
03F4   C3 64 08               JP   blockEnd   
03F7                             ; /w
03F7                WORDS:       
03F7   21 02 00               LD   hl,2   
03FA   C3 D6 03               JP   bytes1   
03FD                COMMAND_F_:      
03FD   18 09                  JR   command_f   
03FF                             ; //
03FF                COMMENT:      
03FF   03                     INC   bc   ; point to next char
0400   0A                     LD   a,(bc)   
0401   FE 20                  CP   " "   ; terminate on any char less than SP
0403   30 FA                  JR   nc,comment   
0405   0B                     DEC   bc   
0406   DD E9                  JP   (ix)   
0408                             ;********************** PAGE 3 END *********************************************
0408                             ;********************** PAGE 4 BEGIN *********************************************
0408                COMMAND_F:      
0408   CD EA 0C               CALL   jumpTable   
040B   64                     DB   "d"   ; /fd fold
040C   2E                     DB   lsb(fold_)   
040D   65                     DB   "e"   ; /fe forEach
040E   23                     DB   lsb(forEach_)   
040F   6C                     DB   "l"   ; /fl flush output buffer
0410   26                     DB   lsb(flush_)   
0411   73                     DB   "s"   ; /fs funcSrc
0412   31                     DB   lsb(funcSrc_)   
0413   74                     DB   "t"   ; /ft filter
0414   2B                     DB   lsb(filter_)   
0415   31                     DB   "1"   
0416   34                     DB   lsb(f1_)   
0417   32                     DB   "2"   
0418   37                     DB   lsb(f2_)   
0419   33                     DB   "3"   
041A   3A                     DB   lsb(f3_)   
041B   34                     DB   "4"   
041C   3D                     DB   lsb(f4_)   
041D   7A                     DB   "z"   
041E   40                     DB   lsb(fz_)   
041F   00                     DB   NUL   
0420   C3 43 04               JP   false_   
0423                FOREACH_:      
0423   C3 7B 06               JP   forEach   
0426                             ; /fl flush
0426                             ; --
0426                FLUSH_:      
0426   CD BF 0C               CALL   flushBuffer   
0429   DD E9                  JP   (ix)   
042B                FILTER_:      
042B   C3 CB 05               JP   filter   
042E                FOLD_:       
042E   C3 29 06               JP   fold   
0431                FUNCSRC_:      
0431   C3 C7 06               JP   funcSrc   
0434                F1_:         
0434   C3 9B 0E               JP   f1   
0437                F2_:         
0437   C3 A7 0E               JP   f2   
043A                F3_:         
043A   C3 B3 0E               JP   f3   
043D                F4_:         
043D   C3 BF 0E               JP   f4   
0440                FZ_:         
0440   C3 C8 09               JP   fz   
0443                FALSE_:      
0443   C3 B7 02               JP   false1   
0446                COMMAND_M:      
0446   CD EA 0C               CALL   jumpTable   
0449   70                     DB   "p"   ; /mp map
044A   4F                     DB   lsb(map_)   
044B   00                     DB   NUL   
044C   C3 74 03               JP   error1_   
044F                MAP_:        
044F   C3 89 05               JP   map   
0452                COMMAND_R:      
0452   CD EA 0C               CALL   jumpTable   
0455   63                     DB   "c"   ; /rc tail call optimisation
0456   66                     DB   lsb(recur_)   
0457   65                     DB   "e"   ; /re remainder
0458   6C                     DB   lsb(remain_)   
0459   67                     DB   "g"   ; /rg range src
045A   72                     DB   lsb(rangeSrc_)   
045B   00                     DB   NUL   
045C   C3 74 03               JP   error1_   
045F                COMMAND_S:      
045F   CD EA 0C               CALL   jumpTable   
0462   00                     DB   NUL   
0463   C3 74 03               JP   error1_   
0466                RECUR_:      
0466   E1                     POP   hl   
0467   22 F2 52               LD   (vRecur),hl   
046A   DD E9                  JP   (ix)   
046C                REMAIN_:      
046C   2A F8 52               LD   hl,(vRemain)   
046F   E5                     PUSH   hl   
0470   DD E9                  JP   (ix)   
0472                RANGESRC_:      
0472   C3 0D 05               JP   rangeSrc   
0475                COMMAND_V:      
0475   CD EA 0C               CALL   jumpTable   
0478   62                     DB   "b"   
0479   97                     DB   lsb(varBufPtr_)   
047A   68                     DB   "h"   
047B   A0                     DB   lsb(varHeapPtr_)   
047C   74                     DB   "t"   
047D   A9                     DB   lsb(varTIBPtr_)   
047E   42                     DB   "B"   
047F   88                     DB   lsb(constBufStart_)   
0480   48                     DB   "H"   
0481   8D                     DB   lsb(constHeapStart_)   
0482   54                     DB   "T"   
0483   92                     DB   lsb(constTIBStart_)   
0484   00                     DB   NUL   
0485   C3 74 03               JP   error1_   
0488                CONSTBUFSTART_:      
0488   11 00 51               LD   de,BUF   
048B   18 28                  JR   constant   
048D                CONSTHEAPSTART_:      
048D   11 20 53               LD   de,HEAP   
0490   18 23                  JR   constant   
0492                CONSTTIBSTART_:      
0492   11 00 50               LD   de,TIB   
0495   18 1E                  JR   constant   
0497                VARBUFPTR_:      
0497   ED 5B EC 52            LD   de,(vBufPtr)   
049B   21 EC 52               LD   hl,vBufPtr   
049E   18 12                  JR   variable   
04A0                VARHEAPPTR_:      
04A0   ED 5B F0 52            LD   de,(vHeapPtr)   
04A4   21 F0 52               LD   hl,vHeapPtr   
04A7   18 09                  JR   variable   
04A9                VARTIBPTR_:      
04A9   ED 5B EA 52            LD   de,(vTIBPtr)   
04AD   21 EA 52               LD   hl,vTIBPtr   
04B0   18 00                  JR   variable   
04B2                VARIABLE:      
04B2   22 F6 52               LD   (vPointer),hl   
04B5                CONSTANT:      
04B5   D5                     PUSH   de   
04B6   DD E9                  JP   (ix)   
04B8                DOT:         
04B8   CD EA 0C               CALL   jumpTable   
04BB   61                     DB   "a"   ; .a print array
04BC   00                     DB   lsb(dotArray)   
04BD   63                     DB   "c"   ; .c print char
04BE   EC                     DB   lsb(dotChar_)   
04BF   73                     DB   "s"   ; .s print string
04C0   D2                     DB   lsb(dotString_)   
04C1   78                     DB   "x"   ; .x print x chars
04C2   F1                     DB   lsb(dotXChars_)   
04C3   00                     DB   NUL   ; .  print number
04C4   C3 C7 04               JP   dotNumber_   
04C7                             ; /bd buffer decimal
04C7                             ; value --
04C7                DOTNUMBER_:      
04C7   3A E8 52               LD   a,(vNumBase)   
04CA   FE 10                  CP   16   
04CC   CA 77 09               JP   z,bufferHex   ; else falls through
04CF   C3 11 09               JP   bufferDec   
04D2                             ; /bs buffered string
04D2                             ; string* --
04D2                DOTSTRING_:      
04D2   E1                     POP   hl   ; hl = string*
04D3   ED 5B EC 52            LD   de,(vBufPtr)   ; de = buffer*
04D7   18 06                  JR   dotString1   
04D9                DOTSTRING0:      
04D9   12                     LD   (de),a   ; a -> buffer*
04DA   1C                     INC   e   ; buffer*++, wraparound
04DB   CC BF 0C               CALL   z,flushBuffer   
04DE   23                     INC   hl   
04DF                DOTSTRING1:      
04DF   7E                     LD   a,(hl)   ; a <- string*
04E0   B7                     OR   a   ; if NUL exit loop
04E1   20 F6                  JR   nz,dotString0   
04E3   2A EC 52               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04E6   ED 53 EC 52            LD   (vBufPtr),de   ; save buffer*' in pointer
04EA   DD E9                  JP   (ix)   
04EC                             ; /bc buffer char
04EC                             ; char --
04EC                DOTCHAR_:      
04EC   21 01 00               LD   hl,1   
04EF   18 01                  JR   dotXChars0   
04F1                             ; /bx buffered x chars
04F1                             ; char length --
04F1                DOTXCHARS_:      
04F1   E1                     POP   hl   ; hl = length
04F2                DOTXCHARS0:      
04F2   D1                     POP   de   ; a' = char
04F3   7B                     LD   a,e   
04F4   08                     EX   af,af'   
04F5   ED 5B EC 52            LD   de,(vBufPtr)   ; de = buffer*
04F9   18 08                  JR   dotXChars2   
04FB                DOTXCHARS1:      
04FB   08                     EX   af,af'   
04FC   12                     LD   (de),a   
04FD   08                     EX   af,af'   
04FE   1C                     INC   e   ; buffer*++, wraparound
04FF   CC BF 0C               CALL   z,flushBuffer   
0502   2B                     DEC   hl   
0503                DOTXCHARS2:      
0503   7D                     LD   a,l   
0504   B4                     OR   h   
0505   20 F4                  JR   nz,dotXChars1   
0507   ED 53 EC 52            LD   (vBufPtr),de   ; save buffer*'
050B   DD E9                  JP   (ix)   
050D                             ;********************** PAGE 4 END *********************************************
050D                             ;*******************************************************************
050D                             ; Monty implementations
050D                             ;*******************************************************************
050D                             ; /rg rangeSrc
050D                             ; begin end step -- src
050D                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
050D                RANGESRC:      ; range source: begin, end, step, local: L
050D   CD D5 09               CALL   go   
0510   00 00                  DW   NUL   
0512   1C 05                  DW   rangeSrcM_1350S884   
0514   16 05                  DW   $+2   
0516   01                     DB   1   
0517   04 62 65 73 4C         .PSTR   "besL"   
051C                RANGESRCM_1350S884:      
051C   7B                     DB   "{"   
051D   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0528   5C 6B 74 7B            DB   "\\kt{"   
052C   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0534   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
053A   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0542   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
054A   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0554   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
055C   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0563   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0577   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
057F   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0586   7D                     DB   "}"   
0587   7D                     DB   "}"   
0588   00                     DB   0   
0589                             ; /mp map
0589                             ; src func -- src1
0589                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0589                MAP:         ; map: source, function
0589   CD D5 09               CALL   go   
058C   00 00                  DW   NUL   
058E   96 05                  DW   mapM_1369S904   
0590   92 05                  DW   $+2   
0592   00                     DB   0   
0593   02 73 66               .PSTR   "sf"   
0596                MAPM_1369S904:      
0596   7B                     DB   "{"   
0597   5C 6B 74 7B            DB   "\\kt{"   
059B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
05A3   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
05A7   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05AC   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05B8   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05C1   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
05C8   7D                     DB   "}"   
05C9   7D                     DB   "}"   
05CA   00                     DB   0   
05CB                             ; /ft filter
05CB                             ; src pred -- src1
05CB                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
05CB                FILTER:      ; filter: source, predicate, local: T
05CB   CD D5 09               CALL   go   
05CE   00 00                  DW   NUL   
05D0   D9 05                  DW   filterM_1383S919   
05D2   D4 05                  DW   $+2   
05D4   01                     DB   1   
05D5   03 73 70 54            .PSTR   "spT"   
05D9                FILTERM_1383S919:      
05D9   7B                     DB   "{"   
05DA   5B 30 5D 25 54 3D      DB   "[0]%T="   
05E0   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
05E4   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
05E8   5B                     DB   "["   
05E9   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
05F6   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
05FE   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0602   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0607   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
061D   3F 3F                  DB   "??"   
061F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0626   7D                     DB   "}"   
0627   7D                     DB   "}"   
0628   00                     DB   0   
0629                             ; /fd fold
0629                             ; reducer is a function like: \\da00bbLi4u
0629                             ; src init reducer -- src1
0629                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0629                FOLD:        ; src, init, reducer
0629   CD D5 09               CALL   go   
062C   00 00                  DW   NUL   
062E   38 06                  DW   foldM_1402S939   
0630   32 06                  DW   $+2   
0632   01                     DB   1   
0633   04 73 69 72 41         .PSTR   "sirA"   
0638                FOLDM_1402S939:      
0638   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0639   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0640   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0644   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0648   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
064D   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0668   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0671   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0678   7D                     DB   "}"   
0679   7D                     DB   "}"   
067A   00                     DB   0   
067B                             ; /fe forEach
067B                             ; src proc --
067B                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
067B                FOREACH:      ; forEach: source, procedure, local: T
067B   CD D5 09               CALL   go   
067E   00 00                  DW   NUL   
0680   89 06                  DW   forEachM_1416S954   
0682   84 06                  DW   $+2   
0684   01                     DB   1   
0685   03 73 70 54            .PSTR   "spT"   
0689                FOREACHM_1416S954:      
0689   7B                     DB   "{"   
068A   5B 30 5D 25 54 3D      DB   "[0]%T="   
0690   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0694   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
069C   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
06A1   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
06B3   3F 3F                  DB   "??"   ; ifte:
06B5   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
06BE   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
06C5   7D                     DB   "}"   
06C6   00                     DB   0   
06C7                             ; ; /fs funcSrc
06C7                             ; ; func -- src
06C7                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
06C7                FUNCSRC:      ; :f func or block
06C7   CD D5 09               CALL   go   
06CA   00 00                  DW   NUL   
06CC   D3 06                  DW   funcSrcM_1430S969   
06CE   D0 06                  DW   $+2   
06D0   00                     DB   0   
06D1   01 66                  .PSTR   "f"   
06D3                FUNCSRCM_1430S969:      
06D3   7B                     DB   "{"   
06D4   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
06D8   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
06E0   5C 64 74 7B            DB   "\\dt{"   
06E4   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
06F6   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
06FD   7D                     DB   "}"   
06FE   7D                     DB   "}"   
06FF   00                     DB   0   
0700                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0700                DOTARRAY:      
0700   CD D5 09               CALL   go   
0703   00 00                  DW   NUL   
0705   0E 07                  DW   dotArrayM_1440S980   
0707   09 07                  DW   $+2   
0709   02                     DB   2   
070A   03 61 62 63            .PSTR   "abc"   
070E                DOTARRAYM_1440S980:      
070E   7B                     DB   "{"   
070F   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
0746   7D                     DB   "}"   
0747   00                     DB   0   
0748                             ;*******************************************************************
0748                             ; unused opcodes (reserved)
0748                             ;*******************************************************************
0748                UNDERSCORE:      
0748                TILDE:       
0748                COMMA:       
0748   DD E9                  JP   (ix)   
074A                             ;*******************************************************************
074A                             ; implementations
074A                             ;*******************************************************************
074A                             ; _ func
074A                             ; -- func*
074A                COLON:       
074A   03                     INC   bc   ; arg_list must ve immediately followed by {
074B   0A                     LD   a,(bc)   
074C   FE 3D                  CP   "="   ; := definition
074E   28 28                  JR   z,defineStart   
0750   0B                     DEC   bc   
0751   21 01 00               LD   hl,1   
0754   C3 52 0E               JP   error   
0757                BACKSLASH:      
0757                LAMBDA:      
0757   DD E5                  PUSH   ix   
0759   CD 7D 0B               CALL   parseArgs   
075C                LAMBDA1:      
075C   03                     INC   bc   ; arg_list must ve immediately followed by {
075D   0A                     LD   a,(bc)   
075E   FE 21                  CP   " "+1   ; skip white space
0760   38 FA                  JR   c,lambda1   
0762   FE 7B                  CP   "{"   
0764   28 06                  JR   z,lambda2   
0766   21 02 00               LD   hl,2   ; error 2: parse error
0769   C3 52 0E               JP   error   
076C                LAMBDA2:      
076C   CD B3 0B               CALL   parseBlock   
076F   CD 1D 0C               CALL   createFunc   
0772   E1                     POP   hl   
0773   DD E1                  POP   ix   
0775   E5                     PUSH   hl   
0776   DD E9                  JP   (ix)   
0778                DEFINESTART:      
0778   E1                     POP   hl   ; discard variable value
0779   2A F6 52               LD   hl,(vPointer)   ; vDefine = vPointer
077C   22 F4 52               LD   (vDefine),hl   
077F   DD E9                  JP   (ix)   
0781                SEMICOLON:      
0781                DEFINEEND:      
0781   2A F4 52               LD   hl,(vDefine)   ; hl = define*
0784   7D                     LD   a,l   
0785   B4                     OR   h   
0786   28 0B                  JR   z,defineEnd1   
0788   11 00 00               LD   de,NUL   ; set vDefine=NUL
078B   ED 53 F4 52            LD   (vDefine),de   
078F   D1                     POP   de   ; de = value
0790   C3 54 08               JP   assign1   
0793                DEFINEEND1:      
0793   DD E9                  JP   (ix)   
0795                             ; %a .. %z
0795                             ; -- value
0795                             ; returns value of arg
0795                PERCENT:      
0795                ARG:         
0795   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0798   FD 56 05               LD   d,(iy+5)   
079B   EB                     EX   de,hl   
079C   7D                     LD   a,l   ; arg_list* == null, skip
079D   B4                     OR   h   
079E   28 1A                  JR   z,arg0a   
07A0   23                     INC   hl   ; a = num_args, hl = arg_list*
07A1   7E                     LD   a,(hl)   
07A2   23                     INC   hl   
07A3   B7                     OR   a   
07A4   28 14                  JR   z,arg0a   ; num_args == 0, skip
07A6   5F                     LD   e,a   ; e = a = num_args
07A7   03                     INC   bc   ; a = next char = dollar_name
07A8   0A                     LD   a,(bc)   
07A9   C5                     PUSH   bc   ; save IP
07AA   43                     LD   b,e   ; b = e = num_args
07AB   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
07AE   FD 56 03               LD   d,(iy+3)   
07B1                ARG0:        
07B1   1B                     DEC   de   ; a = dollar_name, de = next arg*
07B2   1B                     DEC   de   
07B3   BE                     CP   (hl)   
07B4   28 09                  JR   z,arg1   
07B6   23                     INC   hl   ; hl = next arg_list*
07B7   10 F8                  DJNZ   arg0   
07B9   C1                     POP   bc   ; no match, restore IP
07BA                ARG0A:       
07BA   11 00 00               LD   de,0   ; return 0
07BD   18 08                  JR   arg1a   
07BF                ARG1:        
07BF   C1                     POP   bc   ; restore IP
07C0   EB                     EX   de,hl   ; hl = arg*
07C1   22 F6 52               LD   (vPointer),hl   ; store arg* in setter
07C4   5E                     LD   e,(hl)   
07C5   23                     INC   hl   
07C6   56                     LD   d,(hl)   ; de = arg
07C7                ARG1A:       
07C7   D5                     PUSH   de   ; push arg
07C8   DD E9                  JP   (ix)   
07CA                LBRACK:      
07CA                ARRAYSTART:      
07CA   11 00 00               LD   de,0   ; create stack frame
07CD   D5                     PUSH   de   ; push null for IP
07CE   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
07D1   FD 56 05               LD   d,(iy+5)   ; 
07D4   D5                     PUSH   de   ; 
07D5   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
07D8   FD 56 03               LD   d,(iy+3)   ; 
07DB   D5                     PUSH   de   ; 
07DC   FD E5                  PUSH   iy   ; push BP
07DE   FD 21 00 00            LD   iy,0   ; BP = SP
07E2   FD 39                  ADD   iy,sp   
07E4   DD E9                  JP   (ix)   
07E6                RBRACK:      
07E6                ARRAYEND:      
07E6   FD 54                  LD   d,iyh   ; de = BP
07E8   FD 5D                  LD   e,iyl   
07EA   ED 43 02 53            LD   (vTemp1),bc   ; save IP
07EE   62 6B                  LD   hl,de   ; hl = de = BP
07F0   B7                     OR   a   
07F1   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
07F3   CB 3C                  SRL   h   ; 
07F5   CB 1D                  RR   l   
07F7   44 4D                  LD   bc,hl   ; bc = count
07F9   2A F0 52               LD   hl,(vHeapPtr)   ; hl = array[-4]
07FC   71                     LD   (hl),c   ; write num items in length word
07FD   23                     INC   hl   
07FE   70                     LD   (hl),b   
07FF   23                     INC   hl   ; hl = array[0], bc = count
0800                             ; de = BP, hl = array[0], bc = count
0800   18 15                  JR   arrayEnd3   
0802                ARRAYEND1:      
0802   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0805   77                     LD   (hl),a   ; write lsb of array item
0806   23                     INC   hl   ; move to msb of array item
0807   3A E6 52               LD   a,(vDataWidth)   ; vDataWidth=1?
080A   3D                     DEC   a   
080B   28 05                  JR   z,arrayEnd2   
080D   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0810   77                     LD   (hl),a   ; write msb of array item
0811   23                     INC   hl   ; move to next word in array
0812                ARRAYEND2:      
0812   FD 2B                  DEC   iy   ; move to next word on stack
0814   FD 2B                  DEC   iy   
0816   0B                     DEC   bc   ; dec items count
0817                ARRAYEND3:      
0817   79                     LD   a,c   ; if not zero loop
0818   B0                     OR   b   
0819   20 E7                  JR   nz,arrayEnd1   
081B   EB                     EX   de,hl   ; de = end of array, hl = BP
081C   F9                     LD   sp,hl   ; sp = BP
081D   E1                     POP   hl   ; de = end of array, hl = old BP
081E   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
081F   FD 62                  LD   iyh,d   
0821   FD 6B                  LD   iyl,e   
0823   D1                     POP   de   ; pop arg_list (discard)
0824   D1                     POP   de   ; pop first_arg* (discard)
0825   D1                     POP   de   ; pop IP (discard)
0826   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = array[-2]
082A   13                     INC   de   
082B   13                     INC   de   
082C   D5                     PUSH   de   ; return array[0]
082D   22 F0 52               LD   (vHeapPtr),hl   ; move heap* to end of array
0830   ED 4B 02 53            LD   bc,(vTemp1)   ; restore IP
0834   DD E9                  JP   (ix)   
0836                             ; index of an array, based on vDataWidth
0836                             ; array* num -- value    ; also sets vPointer to address
0836                HASH:        
0836                ARRAYINDEX:      
0836   E1                     POP   hl   ; hl = index
0837   D1                     POP   de   ; de = array
0838   3A E6 52               LD   a,(vDataWidth)   ; a = data width
083B   3D                     DEC   a   
083C   28 01                  JR   z,arrayIndex1   
083E                ARRAYINDEX0:      
083E   29                     ADD   hl,hl   ; if data width = 2 then double
083F                ARRAYINDEX1:      
083F   19                     ADD   hl,de   ; add addr
0840   22 F6 52               LD   (vPointer),hl   ; store address in setter
0843   16 00                  LD   d,0   
0845   5E                     LD   e,(hl)   
0846   B7                     OR   a   ; check data width again
0847   28 02                  JR   z,arrayIndex2   
0849   23                     INC   hl   
084A   56                     LD   d,(hl)   
084B                ARRAYINDEX2:      
084B   D5                     PUSH   de   
084C   DD E9                  JP   (ix)   
084E                             ; value _oldValue --            ; uses address in vPointer
084E                ASSIGN:      
084E   E1                     POP   hl   ; discard last accessed value
084F   E1                     POP   hl   ; hl = new value
0850                ASSIGN0:      
0850   EB                     EX   de,hl   ; de = new value
0851   2A F6 52               LD   hl,(vPointer)   
0854                ASSIGN1:      ; entry point from defineEnd
0854   73                     LD   (hl),e   
0855   3A E6 52               LD   a,(vDataWidth)   
0858   3D                     DEC   a   ; is it byte?
0859   28 02                  JR   z,assign2   
085B   23                     INC   hl   
085C   72                     LD   (hl),d   
085D                ASSIGN2:      
085D   DD E9                  JP   (ix)   
085F                             ; { block start
085F                             ; -- block*
085F                LBRACE:      
085F   CD B3 0B               CALL   parseBlock   
0862   DD E9                  JP   (ix)   
0864                RBRACE:      
0864                BLOCKEND:      
0864   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0867   FD 56 01               LD   d,(iy+1)   
086A   ED 53 02 53            LD   (vTemp1),de   
086E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0871   FD 56 07               LD   d,(iy+7)   
0874   ED 53 04 53            LD   (vTemp2),de   
0878   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
087B   FD 56 03               LD   d,(iy+3)   
087E   EB                     EX   de,hl   
087F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0882   FD 56 01               LD   d,(iy+1)   
0885   13                     INC   de   ; for carry flag <=
0886   B7                     OR   a   
0887   ED 52                  SBC   hl,de   
0889   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
088B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
088D   FD 5D                  LD   e,iyl   
088F   21 08 00               LD   hl,8   
0892   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0893   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0894   18 0C                  JR   blockEnd2   
0896                BLOCKEND1:      ; same scope
0896   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0899   FD 56 03               LD   d,(iy+3)   
089C   EB                     EX   de,hl   
089D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
089F   FD 5D                  LD   e,iyl   
08A1   EB                     EX   de,hl   
08A2                BLOCKEND2:      
08A2   44 4D                  LD   bc,hl   ; bc = hl = BP
08A4   B7                     OR   a   ; hl = BP - SP = count
08A5   ED 72                  SBC   hl,sp   
08A7   7D                     LD   a,l   
08A8   B4                     OR   h   
08A9   28 09                  JR   z,blockEnd3   
08AB   C5                     PUSH   bc   ; bc = count, hl = BP
08AC   44 4D                  LD   bc,hl   
08AE   E1                     POP   hl   
08AF   2B                     DEC   hl   ; hl = BP-1
08B0   1B                     DEC   de   ; de = args*-1
08B1   ED B8                  LDDR      
08B3   13                     INC   de   
08B4                BLOCKEND3:      
08B4   EB                     EX   de,hl   ; sp = de = new tos*
08B5   F9                     LD   sp,hl   
08B6   ED 4B 04 53            LD   bc,(vTemp2)   
08BA   FD 2A 02 53            LD   iy,(vTemp1)   
08BE   ED 5B F2 52            LD   de,(vRecur)   ; de = recur vector
08C2   7B                     LD   a,e   ; check for NUL
08C3   B2                     OR   d   
08C4   20 02                  JR   nz,blockEnd4   
08C6   DD E9                  JP   (ix)   
08C8                BLOCKEND4:      
08C8   21 00 00               LD   hl,0   ; clear recur vector
08CB   22 F2 52               LD   (vRecur),hl   
08CE   C3 D6 09               JP   go1   ; execute de
08D1                             ; /br break from loop
08D1                             ; --
08D1                BREAK:       
08D1   E1                     POP   hl   ; hl = condition, break if false
08D2   7D                     LD   a,l   
08D3   B4                     OR   h   
08D4   28 02                  JR   z,break1   
08D6   DD E9                  JP   (ix)   
08D8                BREAK1:      
08D8   FD 5D                  LD   e,iyl   ; get block* just under stack frame
08DA   FD 54                  LD   d,iyh   
08DC   21 08 00               LD   hl,8   
08DF   19                     ADD   hl,de   
08E0   23                     INC   hl   
08E1   23                     INC   hl   
08E2   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
08E5   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08E8   C3 64 08               JP   blockEnd   
08EB                TICK:        
08EB                CHAR:        
08EB   21 00 00               LD   hl,0   ; if "" is empty or null
08EE                CHAR1:       
08EE   03                     INC   bc   ; point to next char
08EF   0A                     LD   a,(bc)   
08F0   FE 27                  CP   "'"   ; ' is the terminator
08F2   28 09                  JR   z,char3   
08F4   FE 5C                  CP   $5c   ; \ is the escape
08F6   20 02                  JR   nz,char2   
08F8   03                     INC   bc   
08F9   0A                     LD   a,(bc)   
08FA                CHAR2:       
08FA   6F                     LD   l,a   
08FB   18 F1                  JR   char1   
08FD                CHAR3:       
08FD   E5                     PUSH   hl   
08FE   DD E9                  JP   (ix)   
0900                DIV:         
0900   D1                     POP   de   
0901   E1                     POP   hl   
0902   C5                     PUSH   bc   ; preserve the IP
0903   44 4D                  LD   bc,hl   
0905   CD AF 09               CALL   divide   
0908   EB                     EX   de,hl   
0909   ED 53 F8 52            LD   (vRemain),de   
090D   C1                     POP   bc   
090E   C3 13 02               JP   add3   
0911                             ; /bd buffer decimal
0911                             ; value --
0911                BUFFERDEC:      
0911   ED 5B EC 52            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0915   D9                     EXX      
0916   E1                     POP   hl   ; hl = value
0917   CD 2B 09               CALL   bufferDec0   
091A   D9                     EXX      ; de = buffer*' bc = IP
091B   3E 20                  LD   a," "   ; append space to buffer
091D   12                     LD   (de),a   
091E   1C                     INC   e   ; buffer*++, wraparound
091F   CC BF 0C               CALL   z,flushBuffer   
0922   2A EC 52               LD   hl,(vBufPtr)   ; hl = buffer*
0925   ED 53 EC 52            LD   (vBufPtr),de   ; update buffer* with buffer*'
0929   DD E9                  JP   (ix)   
092B                             ; hl = value
092B                             ; de' = buffer*
092B                             ; a, bc, de, hl destroyed
092B                BUFFERDEC0:      
092B   CB 7C                  BIT   7,h   
092D   28 0C                  JR   z,bufferDec1   
092F   D9                     EXX      
0930   3E 2D                  LD   a,"-"   
0932   12                     LD   (de),a   
0933   13                     INC   de   
0934   D9                     EXX      
0935   AF                     XOR   a   
0936   95                     SUB   l   
0937   6F                     LD   l,a   
0938   9F                     SBC   a,a   
0939   94                     SUB   h   
093A   67                     LD   h,a   
093B                BUFFERDEC1:      
093B   0E 00                  LD   c,0   ; leading zeros flag = false
093D   11 F0 D8               LD   de,-10000   
0940   CD 5B 09               CALL   bufferDec2   
0943   11 18 FC               LD   de,-1000   
0946   CD 5B 09               CALL   bufferDec2   
0949   11 9C FF               LD   de,-100   
094C   CD 5B 09               CALL   bufferDec2   
094F   1E F6                  LD   e,-10   
0951   CD 5B 09               CALL   bufferDec2   
0954   0C                     INC   c   ; flag = true for at least digit
0955   1E FF                  LD   e,-1   
0957   CD 5B 09               CALL   bufferDec2   
095A   C9                     RET      
095B                BUFFERDEC2:      
095B   06 2F                  LD   b,"0"-1   
095D                BUFFERDEC3:      
095D   04                     INC   b   
095E   19                     ADD   hl,de   
095F   38 FC                  JR   c,bufferDec3   
0961   ED 52                  SBC   hl,de   
0963   3E 30                  LD   a,"0"   
0965   B8                     CP   b   
0966   20 05                  JR   nz,bufferDec4   
0968   AF                     XOR   a   
0969   B1                     OR   c   
096A   C8                     RET   z   
096B   18 01                  JR   bufferDec5   
096D                BUFFERDEC4:      
096D   0C                     INC   c   
096E                BUFFERDEC5:      
096E   78                     LD   a,b   
096F   D9                     EXX      
0970   12                     LD   (de),a   
0971   1C                     INC   e   
0972   CC BF 0C               CALL   z,flushBuffer   
0975   D9                     EXX      
0976   C9                     RET      
0977                             ; /bh buffer hex
0977                             ; value --
0977                BUFFERHEX:      
0977   E1                     POP   hl   ; hl = value
0978   ED 5B EC 52            LD   de,(vBufPtr)   
097C   3E 24                  LD   a,"$"   ; # prefix
097E   12                     LD   (de),a   
097F   1C                     INC   e   ; buffer*++, wraparound
0980   CC BF 0C               CALL   z,flushBuffer   
0983   7C                     LD   a,h   
0984   CD 98 09               CALL   bufferHex1   
0987   7D                     LD   a,l   
0988   CD 98 09               CALL   bufferHex1   
098B   3E 20                  LD   a," "   ; append space to buffer
098D   12                     LD   (de),a   
098E   1C                     INC   e   ; buffer*++, wraparound
098F   CC BF 0C               CALL   z,flushBuffer   
0992   ED 53 EC 52            LD   (vBufPtr),de   
0996   DD E9                  JP   (ix)   
0998                BUFFERHEX1:      
0998   F5                     PUSH   af   
0999   1F                     RRA      
099A   1F                     RRA      
099B   1F                     RRA      
099C   1F                     RRA      
099D   CD A1 09               CALL   bufferHex2   
09A0   F1                     POP   af   
09A1                BUFFERHEX2:      
09A1   E6 0F                  AND   0x0F   
09A3   C6 90                  ADD   a,0x90   
09A5   27                     DAA      
09A6   CE 40                  ADC   a,0x40   
09A8   27                     DAA      
09A9   12                     LD   (de),a   
09AA   1C                     INC   e   ; buffer*++, wraparound
09AB   CC BF 0C               CALL   z,flushBuffer   
09AE   C9                     RET      
09AF                             ; division subroutine.
09AF                             ; bc: divisor, de: dividend, hl: remainder
09AF                DIVIDE:      
09AF   21 00 00               LD   hl,0   ; zero the remainder
09B2   3E 10                  LD   a,16   ; loop counter
09B4                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
09B4   CB 21                  SLA   c   
09B6   CB 10                  RL   b   
09B8   ED 6A                  ADC   hl,hl   
09BA   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
09BC   38 03                  JR   c,divide2   
09BE   0C                     INC   c   
09BF   18 01                  JR   divide3   
09C1                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
09C1   19                     ADD   hl,de   
09C2                DIVIDE3:      
09C2   3D                     DEC   a   
09C3   20 EF                  JR   nz,divide1   
09C5   50 59                  LD   de,bc   ; result from bc to de
09C7   C9                     RET      
09C8                FZ:          
09C8   21 00 50               LD   hl,STACK   
09CB   ED 72                  SBC   hl,sp   
09CD   CB 3C                  SRL   h   
09CF   CB 1D                  RR   l   
09D1   E5                     PUSH   hl   
09D2   C3 C7 04               JP   dotNumber_   
09D5                             ; execute a block of code which ends with }
09D5                             ; creates a root scope if BP == stack
09D5                             ; else uses outer scope
09D5                CARET:       
09D5                GO:          
09D5   D1                     POP   de   ; de = block*
09D6                GO1:         
09D6   7B                     LD   a,e   ; if block* == null, exit
09D7   B2                     OR   d   
09D8   20 02                  JR   nz,go2   
09DA   DD E9                  JP   (ix)   
09DC                GO2:         
09DC   1A                     LD   a,(de)   
09DD   FE 7B                  CP   "{"   
09DF   28 06                  JR   z,goBlock   
09E1   FE 28                  CP   "("   
09E3   C2 1A 0A               JP   nz,goFunc   
09E6   D5                     PUSH   de   ; push de just before stack frame
09E7                GOBLOCK:      
09E7   ED 53 02 53            LD   (vTemp1),de   ; save de
09EB   21 00 50               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09EE   FD 54                  LD   d,iyh   
09F0   FD 5D                  LD   e,iyl   
09F2   B7                     OR   a   ; if stack* == BP then this is the root_scope
09F3   ED 52                  SBC   hl,de   
09F5   ED 5B 02 53            LD   de,(vTemp1)   ; restore de
09F9   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
09FA   B4                     OR   h   
09FB   3E 00                  LD   a,0   
09FD   28 6A                  JR   z,goFunc8   
09FF   C5                     PUSH   bc   ; push IP
0A00   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A03   FD 46 05               LD   b,(iy+5)   
0A06   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A09   FD 66 03               LD   h,(iy+3)   
0A0C                GOBLOCK2:      
0A0C   C5                     PUSH   bc   ; arg_list*
0A0D   E5                     PUSH   hl   ; first_arg*
0A0E   FD E5                  PUSH   iy   ; push BP
0A10   FD 21 00 00            LD   iy,0   ; BP = SP
0A14   FD 39                  ADD   iy,sp   
0A16                GOBLOCK3:      
0A16   42 4B                  LD   bc,de   ; bc = de = block*-1
0A18   DD E9                  JP   (ix)   
0A1A                GOFUNC:      ; execute func
0A1A   EB                     EX   de,hl   ; hl = func*
0A1B   5E                     LD   e,(hl)   ; de = partial_array*
0A1C   23                     INC   hl   
0A1D   56                     LD   d,(hl)   
0A1E   23                     INC   hl   
0A1F   7B                     LD   a,e   ; if partial_array* == null skip
0A20   B2                     OR   d   
0A21   28 21                  JR   z,goFunc3   
0A23   ED 43 02 53            LD   (vTemp1),bc   
0A27   22 04 53               LD   (vTemp2),hl   ; save bc,hl
0A2A   EB                     EX   de,hl   ; hl = partial_array*
0A2B   2B                     DEC   hl   ; bc = count
0A2C   46                     LD   b,(hl)   
0A2D   2B                     DEC   hl   
0A2E   4E                     LD   c,(hl)   
0A2F   23                     INC   hl   ; hl = array data*
0A30   23                     INC   hl   
0A31   18 06                  JR   goFunc2   ; push each item on stack
0A33                GOFUNC1:      
0A33   5E                     LD   e,(hl)   ; de = partial item
0A34   23                     INC   hl   
0A35   56                     LD   d,(hl)   
0A36   23                     INC   hl   
0A37   D5                     PUSH   de   ; push on stack
0A38   0B                     DEC   bc   
0A39                GOFUNC2:      
0A39   79                     LD   a,c   ; if count != 0 then loop
0A3A   B0                     OR   b   
0A3B   20 F6                  JR   nz,goFunc1   
0A3D   ED 4B 02 53            LD   bc,(vTemp1)   ; restore bc
0A41   2A 04 53               LD   hl,(vTemp2)   ; restore hl
0A44                GOFUNC3:      
0A44   5E                     LD   e,(hl)   ; de = block*
0A45   23                     INC   hl   
0A46   56                     LD   d,(hl)   
0A47   23                     INC   hl   
0A48   ED 53 02 53            LD   (vTemp1),de   ; save block*
0A4C   5E                     LD   e,(hl)   ; de = arg_list*
0A4D   23                     INC   hl   
0A4E   56                     LD   d,(hl)   
0A4F   23                     INC   hl   
0A50   EB                     EX   de,hl   ; hl = arg_list*
0A51   ED 5B 02 53            LD   de,(vTemp1)   ; restore de = block*
0A55   7D                     LD   a,l   ; if arg_list* == null a = 0
0A56   B4                     OR   h   
0A57   20 03                  JR   nz,goFunc4   
0A59   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A5A   18 0D                  JR   goFunc8   
0A5C                GOFUNC4:      ; allocate locals
0A5C   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A5D   18 03                  JR   goFunc6   
0A5F                GOFUNC5:      ; loop
0A5F   3B                     DEC   sp   
0A60   3B                     DEC   sp   
0A61   3D                     DEC   a   
0A62                GOFUNC6:      
0A62   B7                     OR   a   
0A63   20 FA                  JR   nz,goFunc5   ; end loop
0A65                GOFUNC7:      
0A65   23                     INC   hl   ; a = num_args* x 2
0A66   7E                     LD   a,(hl)   
0A67   2B                     DEC   hl   
0A68   87                     ADD   a,a   ; a *= 2
0A69                GOFUNC8:      
0A69   C5                     PUSH   bc   ; push IP
0A6A   44 4D                  LD   bc,hl   
0A6C   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A6F   85                     ADD   a,l   
0A70   6F                     LD   l,a   
0A71   39                     ADD   hl,sp   
0A72   18 98                  JR   goBlock2   
0A74                DOLLAR:      
0A74                HEXNUM:      
0A74   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A77                HEXNUM1:      
0A77   03                     INC   bc   
0A78   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A79   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A7B   28 02                  JR   z,hexnum2   ; no a decimal
0A7D   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A7F                HEXNUM2:      
0A7F   D6 30                  SUB   $30   ; form decimal digit
0A81   DA 11 0B               JP   c,num2   
0A84   FE 10                  CP   $0F+1   
0A86   D2 11 0B               JP   nc,num2   
0A89   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A8A   29                     ADD   hl,hl   ; 4X
0A8B   29                     ADD   hl,hl   ; 8X
0A8C   29                     ADD   hl,hl   ; 16X
0A8D   85                     ADD   a,l   ; add into bottom of hl
0A8E   6F                     LD   l,a   
0A8F   18 E6                  JR   hexnum1   
0A91                UPCASE:      
0A91   0A                     LD   a,(bc)   ; a = identifier char
0A92   D6 41                  SUB   "A"   ; "A" = 0
0A94   18 05                  JR   ident1   
0A96                LOWCASE:      
0A96   0A                     LD   a,(bc)   
0A97   D6 61                  SUB   "a"   
0A99   C6 1A                  ADD   a,26   
0A9B                IDENT1:      
0A9B   87                     ADD   a,a   ; l = a * 2
0A9C   6F                     LD   l,a   
0A9D   26 52                  LD   h,msb(vars)   
0A9F   22 F6 52               LD   (vPointer),hl   ; store address in setter
0AA2   5E                     LD   e,(hl)   
0AA3   23                     INC   hl   
0AA4   56                     LD   d,(hl)   
0AA5   D5                     PUSH   de   
0AA6   DD E9                  JP   (ix)   
0AA8                             ; if
0AA8                             ; condition then -- value
0AA8                QUESTION:      
0AA8                IF:          
0AA8   03                     INC   bc   
0AA9   0A                     LD   a,(bc)   
0AAA   FE 3F                  CP   "?"   
0AAC   28 06                  JR   z,ifte   
0AAE   0B                     DEC   bc   
0AAF   11 00 00               LD   de,NUL   ; NUL pointer for else
0AB2   18 01                  JR   ifte1   
0AB4                             ; ifte
0AB4                             ; condition then else -- value
0AB4                IFTE:        
0AB4   D1                     POP   de   ; de = else
0AB5                IFTE1:       
0AB5   E1                     POP   hl   ; hl = then
0AB6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AB7   7C                     LD   a,h   
0AB8   B5                     OR   l   
0AB9   E1                     POP   hl   ; hl = then
0ABA   CA D6 09               JP   z,go1   ; if z de = else
0ABD   EB                     EX   de,hl   ; condition = false, de = then
0ABE   C3 D6 09               JP   go1   
0AC1                KEY:         
0AC1   CD 81 00               CALL   getchar   
0AC4   26 00                  LD   h,0   
0AC6   6F                     LD   l,a   
0AC7   E5                     PUSH   hl   
0AC8   DD E9                  JP   (ix)   
0ACA                             ; Z80 port output
0ACA                             ; value port --
0ACA                OUTPUT:      
0ACA   E1                     POP   hl   
0ACB   59                     LD   e,c   ; save IP
0ACC   4D                     LD   c,l   
0ACD   E1                     POP   hl   
0ACE   ED 69                  OUT   (c),l   
0AD0   4B                     LD   c,e   ; restore IP
0AD1   DD E9                  JP   (ix)   
0AD3                STAR:        
0AD3                MUL:         
0AD3   D1                     POP   de   ; get first value
0AD4   E1                     POP   hl   
0AD5                MUL2:        
0AD5   C5                     PUSH   bc   ; Preserve the IP
0AD6   44 4D                  LD   bc,hl   ; bc = 2nd value
0AD8   21 00 00               LD   hl,0   
0ADB   3E 10                  LD   a,16   
0ADD                MUL3:        
0ADD   29                     ADD   hl,hl   
0ADE   CB 13                  RL   e   
0AE0   CB 12                  RL   d   
0AE2   30 04                  JR   nc,$+6   
0AE4   09                     ADD   hl,bc   
0AE5   30 01                  JR   nc,$+3   
0AE7   13                     INC   de   
0AE8   3D                     DEC   a   
0AE9   20 F2                  JR   nz,mul3   
0AEB   C1                     POP   bc   ; Restore the IP
0AEC   C3 13 02               JP   add3   
0AEF                NUM:         
0AEF   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0AF2   0A                     LD   a,(bc)   ; Get numeral or -
0AF3   FE 2D                  CP   "-"   
0AF5   20 01                  JR   nz,num0   
0AF7   03                     INC   bc   ; move to next char, no flags affected
0AF8                NUM0:        
0AF8   08                     EX   af,af'   ; save zero flag = 0 for later
0AF9                NUM1:        
0AF9   0A                     LD   a,(bc)   ; read digit
0AFA   D6 30                  SUB   "0"   ; less than 0?
0AFC   38 13                  JR   c,num2   ; not a digit, exit loop
0AFE   FE 0A                  CP   10   ; greater that 9?
0B00   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B02   03                     INC   bc   ; inc IP
0B03   54 5D                  LD   de,hl   ; multiply hl * 10
0B05   29                     ADD   hl,hl   
0B06   29                     ADD   hl,hl   
0B07   19                     ADD   hl,de   
0B08   29                     ADD   hl,hl   
0B09   85                     ADD   a,l   ; add digit in a to hl
0B0A   6F                     LD   l,a   
0B0B   3E 00                  LD   a,0   
0B0D   8C                     ADC   a,h   
0B0E   67                     LD   h,a   
0B0F   18 E8                  JR   num1   
0B11                NUM2:        
0B11   0B                     DEC   bc   
0B12   08                     EX   af,af'   ; restore zero flag
0B13   20 07                  JR   nz,num3   
0B15   EB                     EX   de,hl   ; negate the value of hl
0B16   21 00 00               LD   hl,0   
0B19   B7                     OR   a   ; jump to sub2
0B1A   ED 52                  SBC   hl,de   
0B1C                NUM3:        
0B1C   E5                     PUSH   hl   ; Put the number on the stack
0B1D   DD E9                  JP   (ix)   ; and process the next character
0B1F                RPAREN:      
0B1F   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B22   FD 46 09               LD   b,(iy+9)   
0B25   DD E9                  JP   (ix)   
0B27                             ; shiftLeft
0B27                             ; value count -- value2          shift left count places
0B27                SHIFTLEFT:      
0B27   50 59                  LD   de,bc   ; save IP
0B29   C1                     POP   bc   ; bc = count
0B2A   41                     LD   b,c   ; b = loop counter
0B2B   E1                     POP   hl   
0B2C   04                     INC   b   ; test for counter=0 case
0B2D   18 01                  JR   shiftLeft2   
0B2F                SHIFTLEFT1:      
0B2F   29                     ADD   hl,hl   ; left shift hl
0B30                SHIFTLEFT2:      
0B30   10 FD                  DJNZ   shiftLeft1   
0B32   E5                     PUSH   hl   
0B33   42 4B                  LD   bc,de   ; restore IP
0B35   DD E9                  JP   (ix)   
0B37                             ; shiftRight
0B37                             ; value count -- value2          shift left count places
0B37                SHIFTRIGHT:      
0B37   50 59                  LD   de,bc   ; save IP
0B39   C1                     POP   bc   ; bc = count
0B3A   41                     LD   b,c   ; b = loop counter
0B3B   E1                     POP   hl   
0B3C   04                     INC   b   ; test for counter=0 case
0B3D   18 04                  JR   shiftRight2   
0B3F                SHIFTRIGHT1:      
0B3F   CB 3C                  SRL   h   ; right shift hl
0B41   CB 1D                  RR   l   
0B43                SHIFTRIGHT2:      
0B43   10 FA                  DJNZ   shiftRight1   
0B45   E5                     PUSH   hl   
0B46   42 4B                  LD   bc,de   ; restore IP
0B48   DD E9                  JP   (ix)   
0B4A                             ; string
0B4A                             ; -- ptr                        ; points to start of string chars,
0B4A                             ; length is stored at start - 2 bytes
0B4A                DQUOTE:      
0B4A                STRING:      
0B4A   2A F0 52               LD   hl,(vHeapPtr)   ; hl = heap*
0B4D   23                     INC   hl   ; skip length field to start
0B4E   23                     INC   hl   
0B4F   E5                     PUSH   hl   ; save start of string
0B50   03                     INC   bc   ; point to next char
0B51   18 03                  JR   string2   
0B53                STRING1:      
0B53   77                     LD   (hl),a   
0B54   23                     INC   hl   ; increase count
0B55   03                     INC   bc   ; point to next char
0B56                STRING2:      
0B56   0A                     LD   a,(bc)   
0B57   FE 22                  CP   DQ   ; " is the string terminator
0B59   28 04                  JR   z,string3   
0B5B   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0B5D   20 F4                  JR   nz,string1   
0B5F                STRING3:      
0B5F   AF                     XOR   a   ; write NUL to terminate string
0B60   77                     LD   (hl),a   ; hl = end of string
0B61   23                     INC   hl   
0B62   22 F0 52               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B65   2B                     DEC   hl   ; hl = end of string without terminator
0B66   D1                     POP   de   ; de = start of string
0B67   D5                     PUSH   de   ; return start of string
0B68   B7                     OR   a   ; hl = length bytes, de = start of string
0B69   ED 52                  SBC   hl,de   
0B6B   EB                     EX   de,hl   
0B6C   2B                     DEC   hl   ; write length bytes to length field at start - 2
0B6D   72                     LD   (hl),d   
0B6E   2B                     DEC   hl   
0B6F   73                     LD   (hl),e   
0B70   DD E9                  JP   (ix)   
0B72                PRINTCHARS1:      
0B72   1A                     LD   a,(de)   ; print char at char*
0B73   CD 85 00               CALL   putchar   
0B76   13                     INC   de   ; char*++
0B77   2B                     DEC   hl   ; count--
0B78                PRINTCHARS2:      
0B78   7D                     LD   a,l   ; count == 0?
0B79   B4                     OR   h   
0B7A   C8                     RET   z   
0B7B   18 F5                  JR   printChars1   ; if not loop
0B7D                             ; 
0B7D                             ;*******************************************************************
0B7D                             ; general routines
0B7D                             ;*******************************************************************
0B7D                             ; arg_list - parses arg_list e.g. ab:c
0B7D                             ; -- arg_list*
0B7D                PARSEARGS:      
0B7D   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0B80   2A F0 52               LD   hl,(vHeapPtr)   ; hl = heap*
0B83   E5                     PUSH   hl   ; save start of arg_list
0B84   23                     INC   hl   ; skip length fields to start of string
0B85   23                     INC   hl   
0B86   03                     INC   bc   ; point to next char
0B87                PARSEARGS1:      
0B87   0A                     LD   a,(bc)   
0B88   FE 3A                  CP   ":"   ; ":" switches from args to locals
0B8A   20 03                  JR   nz,parseArgs1a   
0B8C   14                     INC   d   ; non zero value local count acts as flag
0B8D   18 10                  JR   parseArgs3   
0B8F                PARSEARGS1A:      
0B8F   FE 61                  CP   "a"   ; < "a" terminates arg_list
0B91   38 0F                  JR   c,parseArgs4   
0B93   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0B95   30 0B                  JR   nc,parseArgs4   
0B97                PARSEARGS2:      
0B97   77                     LD   (hl),a   
0B98   23                     INC   hl   
0B99   1C                     INC   e   ; increase arg count
0B9A   AF                     XOR   a   
0B9B   B2                     OR   d   
0B9C   28 01                  JR   z,parseArgs3   
0B9E   14                     INC   d   ; if d > 0 increase local count
0B9F                PARSEARGS3:      
0B9F   03                     INC   bc   ; point to next char
0BA0   18 E5                  JR   parseArgs1   
0BA2                PARSEARGS4:      
0BA2   0B                     DEC   bc   
0BA3   AF                     XOR   a   
0BA4   B2                     OR   d   
0BA5   28 01                  JR   z,parseArgs5   
0BA7   15                     DEC   d   ; remove initial inc
0BA8                PARSEARGS5:      
0BA8   23                     INC   hl   
0BA9   22 F0 52               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BAC   E1                     POP   hl   ; hl = start of arg_list
0BAD   72                     LD   (hl),d   ; write number of locals at start - 1
0BAE   23                     INC   hl   
0BAF   73                     LD   (hl),e   ; write number of args + locals at start - 2
0BB0   2B                     DEC   hl   
0BB1   E3                     EX   (sp),hl   
0BB2   E9                     JP   (hl)   
0BB3                             ; create block: parses block e.g. 00bbIC4uLi4g
0BB3                             ; -- block*
0BB3                PARSEBLOCK:      
0BB3   C5                     PUSH   bc   ; return pointer to first { of block
0BB4   03                     INC   bc   
0BB5   16 01                  LD   d,1   ; nesting: count first parenthesis
0BB7                PARSEBLOCK1:      ; Skip to end of definition
0BB7   0A                     LD   a,(bc)   ; Get the next character
0BB8   03                     INC   bc   ; Point to next character
0BB9   FE 21                  CP   " " + 1   ; ignore whitespace
0BBB   38 FA                  JR   c,parseBlock1   
0BBD   FE 29                  CP   ")"   
0BBF   28 2D                  JR   z,parseBlock4   
0BC1   FE 7D                  CP   "}"   
0BC3   28 29                  JR   z,parseBlock4   
0BC5   FE 5D                  CP   "]"   
0BC7   28 25                  JR   z,parseBlock4   
0BC9   FE 28                  CP   "("   
0BCB   28 16                  JR   z,parseBlock2   
0BCD   FE 7B                  CP   "{"   
0BCF   28 12                  JR   z,parseBlock2   
0BD1   FE 5B                  CP   "["   
0BD3   28 0E                  JR   z,parseBlock2   
0BD5   FE 27                  CP   "'"   
0BD7   28 0D                  JR   z,parseBlock3   
0BD9   FE 60                  CP   "`"   
0BDB   28 09                  JR   z,parseBlock3   
0BDD   FE 22                  CP   DQ   
0BDF   28 05                  JR   z,parseBlock3   
0BE1   18 D4                  JR   parseBlock1   
0BE3                PARSEBLOCK2:      
0BE3   14                     INC   d   
0BE4   18 D1                  JR   parseBlock1   
0BE6                PARSEBLOCK3:      
0BE6   3E 80                  LD   a,$80   
0BE8   AA                     XOR   d   
0BE9   57                     LD   d,a   
0BEA   20 CB                  JR   nz,parseBlock1   
0BEC   18 03                  JR   parseBlock5   
0BEE                PARSEBLOCK4:      
0BEE   15                     DEC   d   
0BEF   20 C6                  JR   nz,parseBlock1   ; get the next element
0BF1                PARSEBLOCK5:      
0BF1   60 69                  LD   hl,bc   ; hl = IP
0BF3   11 20 53               LD   de,HEAP   ; is IP pointing to object in heap
0BF6   B7                     OR   a   ; IP - HEAP
0BF7   ED 52                  SBC   hl,de   
0BF9   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0BFB   28 1C                  JR   z,parseBlock6   
0BFD   60 69                  LD   hl,bc   ; hl = IP
0BFF   D1                     POP   de   ; de = block*
0C00   ED 43 02 53            LD   (vTemp1),bc   ; save IP
0C04   B7                     OR   a   ; bc = size
0C05   ED 52                  SBC   hl,de   
0C07   44 4D                  LD   bc,hl   
0C09   EB                     EX   de,hl   ; hl = block* de = heap*
0C0A   ED 5B F0 52            LD   de,(vHeapPtr)   
0C0E   D5                     PUSH   de   ; return hblock*
0C0F   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0C11   ED 53 F0 52            LD   (vHeapPtr),de   ; heap* += size
0C15   ED 4B 02 53            LD   bc,(vTemp1)   ; restore IP
0C19                PARSEBLOCK6:      
0C19   0B                     DEC   bc   ; balanced, exit
0C1A   E1                     POP   hl   ; hl = block*
0C1B   E3                     EX   (sp),hl   ; return to caller
0C1C   E9                     JP   (hl)   
0C1D                             ; create function
0C1D                             ; arg_list* block* -- func*
0C1D                CREATEFUNC:      
0C1D   E1                     POP   hl   ; save retrn address
0C1E   22 06 53               LD   (vTemp3),hl   
0C21   ED 43 02 53            LD   (vTemp1),bc   ; save IP
0C25   E1                     POP   hl   ; hl = block*
0C26   22 04 53               LD   (vTemp2),hl   ; save block*
0C29   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0C2C   FD 56 05               LD   d,(iy+5)   
0C2F   7B                     LD   a,e   ; if arg_list == null then make a func
0C30   B2                     OR   d   
0C31   20 09                  JR   nz,createFunc0   
0C33   21 00 00               LD   hl,0   ; partial_array = null
0C36   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = compile*
0C3A   18 65                  JR   createFunc5   
0C3C                CREATEFUNC0:      
0C3C   E1                     POP   hl   ; hl = inner_arg_list*
0C3D   E5                     PUSH   hl   ; save inner_arg_list
0C3E   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = compile*
0C42   7E                     LD   a,(hl)   ; compile inner_num_locals
0C43   4F                     LD   c,a   ; b = inner_num_locals
0C44   12                     LD   (de),a   
0C45   23                     INC   hl   
0C46   13                     INC   de   
0C47   7E                     LD   a,(hl)   ; compile inner_length
0C48   12                     LD   (de),a   
0C49   91                     SUB   c   ; a = inner_num args
0C4A   23                     INC   hl   
0C4B   13                     INC   de   
0C4C   B7                     OR   a   ; compile args if inner_length > 0
0C4D   28 05                  JR   z,createFunc1   
0C4F   4F                     LD   c,a   ; bc = a
0C50   06 00                  LD   b,0   
0C52   ED B0                  LDIR      
0C54                CREATEFUNC1:      
0C54   EB                     EX   de,hl   ; hl = outer_arg_list
0C55   FD 5E 04               LD   e,(iy+4)   
0C58   FD 56 05               LD   d,(iy+5)   
0C5B   EB                     EX   de,hl   
0C5C   23                     INC   hl   ; a = outer_length
0C5D   7E                     LD   a,(hl)   
0C5E   23                     INC   hl   
0C5F   B7                     OR   a   
0C60   28 05                  JR   z,createFunc2   
0C62   4F                     LD   c,a   
0C63   06 00                  LD   b,0   
0C65   ED B0                  LDIR      ; append outer_args
0C67                CREATEFUNC2:      ; a = outer_length
0C67   47                     LD   b,a   ; b = a = outer_length
0C68   2A F0 52               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0C6B   23                     INC   hl   
0C6C   7E                     LD   a,(hl)   ; add outer_length to new length
0C6D   80                     ADD   a,b   
0C6E   77                     LD   (hl),a   
0C6F   2B                     DEC   hl   
0C70   78                     LD   a,b   ; save outer_length in a'
0C71   08                     EX   af,af'   
0C72   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0C73   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0C74   B7                     OR   a   
0C75   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0C77   4F                     LD   c,a   ; c = inner_num_locals
0C78   06 00                  LD   b,0   ; bc = inner_num_locals
0C7A   23                     INC   hl   ; a = inner_length
0C7B   7E                     LD   a,(hl)   
0C7C   91                     SUB   c   ; a = inner_num_args
0C7D   23                     INC   hl   ; hl = inner_arg_chars
0C7E   85                     ADD   a,l   ; hl += a
0C7F   6F                     LD   l,a   
0C80   3E 00                  LD   a,0   
0C82   84                     ADD   a,h   
0C83   67                     LD   h,a   
0C84   ED B0                  LDIR      ; append inner_locals
0C86                CREATEFUNC2A:      
0C86   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0C87   12                     LD   (de),a   ; compile partial_array length field
0C88   13                     INC   de   
0C89   AF                     XOR   a   
0C8A   12                     LD   (de),a   
0C8B   13                     INC   de   
0C8C   D5                     PUSH   de   ; push partial_array*
0C8D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0C8E   FD 5E 02               LD   e,(iy+2)   
0C91   FD 56 03               LD   d,(iy+3)   
0C94   EB                     EX   de,hl   
0C95                CREATEFUNC3:      
0C95   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0C96   4E                     LD   c,(hl)   
0C97   2B                     DEC   hl   
0C98   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0C99   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0C9A   13                     INC   de   
0C9B   79                     LD   a,c   
0C9C   12                     LD   (de),a   
0C9D   13                     INC   de   
0C9E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0CA0                CREATEFUNC4:      
0CA0   E1                     POP   hl   ; hl = partial_array*
0CA1                CREATEFUNC5:      
0CA1   C1                     POP   bc   ; bc = new_arg_list*
0CA2   D5                     PUSH   de   ; return new func*
0CA3   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0CA4   73                     LD   (hl),e   ; compile partial_array* to func
0CA5   23                     INC   hl   
0CA6   72                     LD   (hl),d   
0CA7   23                     INC   hl   
0CA8   ED 5B 04 53            LD   de,(vTemp2)   ; de = block*
0CAC   73                     LD   (hl),e   ; compile block* to func
0CAD   23                     INC   hl   
0CAE   72                     LD   (hl),d   
0CAF   23                     INC   hl   
0CB0   71                     LD   (hl),c   ; compile new_arg_list* to func
0CB1   23                     INC   hl   
0CB2   70                     LD   (hl),b   
0CB3   23                     INC   hl   
0CB4   22 F0 52               LD   (vHeapPtr),hl   ; bump heap ptr
0CB7   ED 4B 02 53            LD   bc,(vTemp1)   ; restore IP
0CBB   2A 06 53               LD   hl,(vTemp3)   ; jump to return address
0CBE   E9                     JP   (hl)   
0CBF                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0CBF                FLUSHBUFFER:      
0CBF   F5                     PUSH   af   
0CC0   D5                     PUSH   de   
0CC1   E5                     PUSH   hl   
0CC2   2A EC 52               LD   hl,(vBufPtr)   
0CC5   11 00 51               LD   de,BUF   
0CC8   ED 53 EC 52            LD   (vBufPtr),de   
0CCC   B7                     OR   a   
0CCD   ED 52                  SBC   hl,de   
0CCF   CD 78 0B               CALL   printChars2   
0CD2   E1                     POP   hl   
0CD3   D1                     POP   de   
0CD4   F1                     POP   af   
0CD5   C9                     RET      
0CD6                COMMANDTABLE:      
0CD6   03                     INC   bc   
0CD7   0A                     LD   a,(bc)   
0CD8   FE 7B                  CP   "z"+1   
0CDA   30 09                  JR   nc,commandTable2   
0CDC   D6 61                  SUB   "a"   
0CDE   38 05                  JR   c,commandTable2   
0CE0                COMMANDTABLE1:      
0CE0   E1                     POP   hl   
0CE1   85                     ADD   a,l   
0CE2   6F                     LD   l,a   
0CE3   6E                     LD   l,(hl)   ; must have the same msb as the table
0CE4   E9                     JP   (hl)   
0CE5                COMMANDTABLE2:      
0CE5   3E 1A                  LD   a,26   
0CE7   0B                     DEC   bc   
0CE8   18 F6                  JR   commandTable1   
0CEA                             ; followed by a table
0CEA                             ; db char
0CEA                             ; db lsb(addr)
0CEA                             ; the final item must have char == NUL
0CEA                JUMPTABLE:      
0CEA   E1                     POP   hl   
0CEB   03                     INC   bc   
0CEC                JUMPTABLE0:      
0CEC   AF                     XOR   a   
0CED   BE                     CP   (hl)   
0CEE   28 0B                  JR   z,jumpTable2   
0CF0   0A                     LD   a,(bc)   
0CF1   BE                     CP   (hl)   
0CF2   28 04                  JR   z,jumpTable1   
0CF4   23                     INC   hl   
0CF5   23                     INC   hl   
0CF6   18 F4                  JR   jumpTable0   
0CF8                JUMPTABLE1:      
0CF8   23                     INC   hl   
0CF9   6E                     LD   l,(hl)   ; must have the same msb as the table
0CFA   E9                     JP   (hl)   
0CFB                JUMPTABLE2:      
0CFB   0B                     DEC   bc   
0CFC   23                     INC   hl   
0CFD   E9                     JP   (hl)   
0CFE                PRTSTR0:      
0CFE   CD 85 00               CALL   putchar   
0D01   23                     INC   hl   
0D02                PRTSTR:      
0D02   7E                     LD   a,(hl)   
0D03   B7                     OR   a   
0D04   20 F8                  JR   nz,prtstr0   
0D06   C9                     RET      
0D07                             ; **************************************************************************
0D07                             ; calculate nesting value
0D07                             ; a is char to be tested,
0D07                             ; e is the nesting value (initially 0)
0D07                             ; e is increased by ( and [
0D07                             ; e is decreased by ) and ]
0D07                             ; e has its bit 7 toggled by `
0D07                             ; limited to 127 levels
0D07                             ; **************************************************************************
0D07                NESTING:      
0D07   FE 22                  CP   DQ   ; quote char
0D09   28 06                  JR   z,nesting0   
0D0B   FE 60                  CP   "`"   ; quote char
0D0D   28 02                  JR   z,nesting0   
0D0F   18 0A                  JR   nesting1   
0D11                NESTING0:      
0D11   CB 7B                  BIT   7,e   
0D13   28 03                  JR   z,nesting1a   
0D15   CB BB                  RES   7,e   
0D17   C9                     RET      
0D18                NESTING1A:      
0D18   CB FB                  SET   7,e   
0D1A   C9                     RET      
0D1B                NESTING1:      
0D1B   CB 7B                  BIT   7,e   
0D1D   C0                     RET   nz   
0D1E   FE 7B                  CP   "{"   
0D20   28 08                  JR   z,nesting2   
0D22   FE 5B                  CP   "["   
0D24   28 04                  JR   z,nesting2   
0D26   FE 28                  CP   "("   
0D28   20 02                  JR   nz,nesting3   
0D2A                NESTING2:      
0D2A   1C                     INC   e   
0D2B   C9                     RET      
0D2C                NESTING3:      
0D2C   FE 7D                  CP   "}"   
0D2E   28 07                  JR   z,nesting4   
0D30   FE 5D                  CP   "]"   
0D32   28 03                  JR   z,nesting4   
0D34   FE 29                  CP   ")"   
0D36   C0                     RET   nz   
0D37                NESTING4:      
0D37   1D                     DEC   e   
0D38   C9                     RET      
0D39                PROMPT:      
0D39   CD 49 0D               CALL   printStr   
0D3C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0D41   C9                     RET      
0D42                CRLF:        
0D42   CD 49 0D               CALL   printStr   
0D45   0D 0A 00               .CSTR   "\r\n"   
0D48   C9                     RET      
0D49                             ; prints a null teminated string
0D49                             ; the string should be immediately following the call
0D49                PRINTSTR:      
0D49   E3                     EX   (sp),hl   ; swap			
0D4A   CD 02 0D               CALL   prtstr   
0D4D   23                     INC   hl   ; inc past NUL
0D4E   E3                     EX   (sp),hl   ; put it back	
0D4F   C9                     RET      
0D50                INIT:        
0D50   21 F0 01               LD   hl,titleStr   
0D53   11 0C 53               LD   de,titleBuf   
0D56   06 14                  LD   b,20   
0D58                INIT1:       
0D58   1A                     LD   a,(de)   
0D59   BE                     CP   (hl)   
0D5A   20 17                  JR   nz,coldBoot0   
0D5C   13                     INC   de   
0D5D   23                     INC   hl   
0D5E   10 F8                  DJNZ   init1   
0D60                WARMINIT:      
0D60   ED 4B FA 52            LD   bc,(vSavedIP)   ; restore IP
0D64   ED 7B FC 52            LD   sp,(vSavedSP)   ; restore SP
0D68   DD 2A FE 52            LD   ix,(vSavedNext)   ; restore Next
0D6C   FD 2A 00 53            LD   iy,(vSavedBP)   ; restore BP
0D70   C3 AA 0D               JP   start1   
0D73                COLDBOOT0:      
0D73   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0D76   11 0C 53               LD   de,titleBuf   
0D79   06 14                  LD   b,20   
0D7B   ED B0                  LDIR      
0D7D                COLDINIT:      
0D7D   21 DE 01               LD   hl,isysVars   
0D80   11 E6 52               LD   de,sysVars   
0D83   01 10 00               LD   bc,8 * 2   
0D86   ED B0                  LDIR      
0D88   21 00 52               LD   hl,vars   ; 52 vars LO HI
0D8B   06 34                  LD   b,26*2   
0D8D   AF                     XOR   a   
0D8E                COLDBOOT1:      
0D8E   77                     LD   (hl),a   
0D8F   23                     INC   hl   
0D90   10 FC                  DJNZ   coldBoot1   
0D92   DD 2A EE 52            LD   ix,(vNext)   
0D96   FD 21 00 50            LD   iy,STACK   
0D9A   C9                     RET      
0D9B                COLDSTART:      
0D9B   31 00 50               LD   sp,STACK   
0D9E   CD 73 0D               CALL   coldBoot0   
0DA1   C3 AA 0D               JP   start1   
0DA4                START:       
0DA4   31 00 50               LD   sp,STACK   ; start Monty
0DA7   CD 50 0D               CALL   init   ; setups
0DAA                START1:      
0DAA   21 0C 53               LD   hl,titleBuf   
0DAD   CD 02 0D               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0DB0                INTERPRET:      
0DB0   CD BF 0C               CALL   flushBuffer   
0DB3   CD 39 0D               CALL   prompt   
0DB6   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0DB9   21 00 50               LD   hl,TIB   
0DBC   22 EA 52               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0DBF                INTERPRET2:      ; calculate nesting
0DBF   1E 00                  LD   e,0   ; initilize nesting value
0DC1   C5                     PUSH   bc   ; save offset into TIB,
0DC2                             ; bc is also the count of chars in TIB
0DC2   21 00 50               LD   hl,TIB   ; hl is start of TIB
0DC5   18 0B                  JR   interpret4   
0DC7                INTERPRET3:      
0DC7   3E 33                  LD   a,"3"   
0DC9   CD 85 00               CALL   putchar   
0DCC   7E                     LD   a,(hl)   ; a = char in TIB
0DCD   23                     INC   hl   ; inc pointer into TIB
0DCE   0B                     DEC   bc   ; dec count of chars in TIB
0DCF   CD 07 0D               CALL   nesting   ; update nesting value
0DD2                INTERPRET4:      
0DD2   79                     LD   a,c   ; is count zero?
0DD3   B0                     OR   b   
0DD4   20 F1                  JR   nz,interpret3   ; if not loop
0DD6   C1                     POP   bc   ; restore offset into TIB
0DD7                INTERPRET5:      
0DD7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0DDA   FE 20                  CP   $20   ; compare to space
0DDC   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DDE   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DE0                             ; ???? NEEDED?
0DE0   28 36                  JR   z,interpret8   
0DE2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DE4   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0DE6   FE 05                  CP   CTRL_E   
0DE8   CA 76 0E               JP   z,edit_   
0DEB   FE 08                  CP   CTRL_H   
0DED   CA 66 0E               JP   z,backSpace_   
0DF0   FE 0A                  CP   CTRL_J   
0DF2   CA 8E 0E               JP   z,reEdit_   
0DF5                             ; cp CTRL_S
0DF5                             ; jp z,printStack_
0DF5                             ; DB     lsb(edit_)       ; ENQ ^E  5
0DF5                             ; DB     lsb(reedit_)     ; LF  ^J 10
0DF5                             ; DB     lsb(list_)       ; FF  ^L 12
0DF5                             ; DB     lsb(printStack_) ; DLE ^P 16
0DF5                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0DF5                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0DF5                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0DF5                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0DF5                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0DF5                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0DF5                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0DF5                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0DF5                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0DF5                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0DF5                INTERPRET5A:      
0DF5                             ; ld (vTIBPtr),bc
0DF5                             ; ld bc,(vTIBPtr)
0DF5   18 C8                  JR   interpret2   
0DF7                INTERPRET6:      
0DF7   21 00 50               LD   hl,TIB   
0DFA   09                     ADD   hl,bc   
0DFB   77                     LD   (hl),a   ; store the character in textbuf
0DFC   03                     INC   bc   
0DFD   CD 85 00               CALL   putchar   ; echo character to screen
0E00   CD 07 0D               CALL   nesting   
0E03   18 D2                  JR   interpret5   ; wait for next character
0E05                INTERPRET7:      
0E05   21 00 50               LD   hl,TIB   
0E08   09                     ADD   hl,bc   
0E09   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0E0B   23                     INC   hl   
0E0C   36 0A                  LD   (hl),"\n"   
0E0E   23                     INC   hl   
0E0F   03                     INC   bc   
0E10   03                     INC   bc   
0E11   CD 42 0D               CALL   crlf   ; echo character to screen
0E14   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0E15   B7                     OR   a   
0E16   20 BF                  JR   nz,interpret5   
0E18                INTERPRET8:      
0E18   21 00 50               LD   hl,TIB   
0E1B   09                     ADD   hl,bc   
0E1C   22 EA 52               LD   (vTIBPtr),hl   
0E1F   01 00 50               LD   bc,TIB   
0E22   ED 43 FA 52            LD   (vSavedIP),bc   ; save IP
0E26   ED 73 FC 52            LD   (vSavedSP),sp   ; save SP
0E2A   DD 22 FE 52            LD   (vSavedNext),ix   ; save Next
0E2E   FD 22 00 53            LD   (vSavedBP),iy   ; save BP
0E32   0B                     DEC   bc   
0E33                NEXT:        
0E33   03                     INC   bc   ; Increment the IP
0E34   0A                     LD   a,(bc)   ; Get the next character and dispatch
0E35   FE 20                  CP   " "   ; whitespace?
0E37   28 FA                  JR   z,next   ; space? ignore
0E39   38 08                  JR   c,next1   
0E3B   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0E3D   6F                     LD   l,a   ; index into table
0E3E   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0E40   6E                     LD   l,(hl)   ; get low jump address
0E41   24                     INC   h   ; Load h with page after opcodes
0E42   E9                     JP   (hl)   ; Jump to routine
0E43                NEXT1:       
0E43   FE 00                  CP   NUL   ; end of input string?
0E45   28 03                  JR   z,exit   
0E47   C3 B0 0D               JP   interpret   ; no, other whitespace, macros?
0E4A                EXIT:        
0E4A   03                     INC   bc   
0E4B   60 69                  LD   hl,bc   
0E4D   E9                     JP   (hl)   
0E4E                RUN:         
0E4E   C1                     POP   bc   
0E4F   0B                     DEC   bc   
0E50   DD E9                  JP   (ix)   
0E52                ERROR:       
0E52   E5                     PUSH   hl   
0E53   CD 4E 0E               CALL   run   
0E56   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0E63   C3 B0 0D               JP   interpret   
0E66                BACKSPACE_:      
0E66   79                     LD   a,c   
0E67   B0                     OR   b   
0E68   CA BF 0D               JP   z,interpret2   
0E6B   0B                     DEC   bc   
0E6C   CD 49 0D               CALL   printStr   
0E6F   08 20 08 00            .CSTR   "\b \b"   
0E73   C3 BF 0D               JP   interpret2   
0E76                             ; edit
0E76                EDIT_:       
0E76   CD 4E 0E               CALL   run   
0E79   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0E8B   C3 B0 0D               JP   interpret   
0E8E                REEDIT_:      
0E8E   C3 B0 0D               JP   interpret   
0E91                PRINTSTACK_:      
0E91   CD 4E 0E               CALL   run   
0E94   2F 70 6B 00            .CSTR   "/pk"   
0E98   C3 B0 0D               JP   interpret   
0E9B                             ; editDef:
0E9B                             ;     pop hl                      ; pop ret address
0E9B                             ;     ex (sp),hl                  ; swap with TOS
0E9B                             ;     push hl                     ; dup TOS
0E9B                             ;     ld a,l                      ; a = ident
0E9B                             ;     ld de,TIB                   ; de = start of TIB
0E9B                             ;     ld (vTIBPtr),de             ; update TIB*
0E9B                             ;     push ix                     ; save NEXT
0E9B                             ;     ld ix,editDef0              ; NEXT = editDef0
0E9B                             ;     jp lookupRef                ; convert letter into address
0E9B                             ; editDef0:
0E9B                             ;     ld e,(hl)                   ; de = (hl++)
0E9B                             ;     inc hl
0E9B                             ;     ld d,(hl)
0E9B                             ;     ld a,d                      ; de == 0 ?
0E9B                             ;     or e
0E9B                             ;     jr z,editDef4
0E9B                             ;     ld ix,editDef3              ; NEXT = editDef3
0E9B                             ;     ex de,hl
0E9B                             ;     ld a,(hl)
0E9B                             ;     cp "{"
0E9B                             ;     jr nz,editDef1
0E9B                             ;     jp editBlock0               ; convert letter into address
0E9B                             ; editDef1:
0E9B                             ;     cp "("
0E9B                             ;     jr nz,editDef2
0E9B                             ;     jp editBlock0               ; convert letter into address
0E9B                             ; editDef2:
0E9B                             ;     jp editFunc
0E9B                             ; editDef3:
0E9B                             ;     ld a," "                    ; write assign
0E9B                             ;     call writeChar
0E9B                             ;     pop hl                      ; a = ident
0E9B                             ;     ld a,l
0E9B                             ;     call writeChar
0E9B                             ;     ld a,"="                    ; write assign
0E9B                             ;     call writeChar
0E9B                             ;     ld ix,editDef4              ; NEXT = editDef4
0E9B                             ;     jp printTIB
0E9B                             ; editDef4:
0E9B                             ;     pop ix                      ; restore NEXT
0E9B                             ;     jp (ix)
0E9B                             ; writeChar:
0E9B                             ;     ld de,(vTIBPtr)             ; de = TIB*
0E9B                             ;     ld (de),a                   ; write ident
0E9B                             ;     inc de
0E9B                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0E9B                             ;     ret
0E9B                             ; ; printTIB
0E9B                             ; printTIB:
0E9B                             ;     ld hl,(vTIBPtr)
0E9B                             ;     ld de,TIB
0E9B                             ;     or a
0E9B                             ;     sbc hl,de
0E9B                             ;     jp printTIB2
0E9B                             ; printTIB1:
0E9B                             ;     ld a,(de)
0E9B                             ;     call putchar
0E9B                             ; printTIB2:
0E9B                             ;     ld a,l
0E9B                             ;     or h
0E9B                             ;     jr nz,printTIB1
0E9B                             ;     jp (ix)
0E9B                             ; editBlock:
0E9B                             ;     pop hl                      ; hl = block*
0E9B                             ; editBlock0:
0E9B                             ;     push ix                     ; save next
0E9B                             ;     push hl                     ; push block*
0E9B                             ;     push hl                     ; push block*
0E9B                             ;     ld ix,(editBlock2)
0E9B                             ;     jp blockLength
0E9B                             ; editBlock1:
0E9B                             ;     pop hl                      ; bc = length, (sp) = IP
0E9B                             ;     pop de                      ; de = block*
0E9B                             ;     ld a,l
0E9B                             ;     or h
0E9B                             ;     jr z,editBlock2
0E9B                             ;     push bc
0E9B                             ;     ld bc,hl
0E9B                             ;     ex de,hl                    ; hl = block*
0E9B                             ;     ld de,(vTIBPtr)              ; de = TIB*
0E9B                             ;     ldir                        ; copy block to TIB
0E9B                             ;     ld (vTIBPtr),de              ; save TIB*
0E9B                             ;     pop bc
0E9B                             ; editBlock2:
0E9B                             ;     pop ix                      ; restore next
0E9B                             ;     jp (ix)
0E9B                             ; editFunc:
0E9B                             ;     jp (ix)
0E9B                             ; editArray:
0E9B                             ;     jp (ix)
0E9B                             ; editparseArgs:
0E9B                             ;     jp (ix)
0E9B                             ; ; blockLength
0E9B                             ; ; addr1 -- length
0E9B                             ; blockLength:
0E9B                             ;     pop hl                      ; block*
0E9B                             ;     push hl                     ; save block*
0E9B                             ;     inc hl                      ; skip first char
0E9B                             ;     ld d,1                      ; increase nesting
0E9B                             ; blockLength1:                   ; Skip to end of definition
0E9B                             ;     ld a,(hl)                   ; Get the next character
0E9B                             ;     inc hl                      ; Point to next character
0E9B                             ;     cp " " + 1                  ; ignore whitespace
0E9B                             ;     jr c,blockLength1
0E9B                             ;     cp ")"
0E9B                             ;     jr z,blockLength4
0E9B                             ;     cp "}"
0E9B                             ;     jr z,blockLength4
0E9B                             ;     cp "]"
0E9B                             ;     jr z,blockLength4
0E9B                             ;     cp "("
0E9B                             ;     jr z,blockLength2
0E9B                             ;     cp "{"
0E9B                             ;     jr z,blockLength2
0E9B                             ;     cp "["
0E9B                             ;     jr z,blockLength2
0E9B                             ;     cp "'"
0E9B                             ;     jr z,blockLength3
0E9B                             ;     cp "`"
0E9B                             ;     jr z,blockLength3
0E9B                             ;     cp DQ
0E9B                             ;     jr z,blockLength3
0E9B                             ;     jr blockLength1
0E9B                             ; blockLength2:
0E9B                             ;     inc d
0E9B                             ;     jr blockLength1
0E9B                             ; blockLength4:
0E9B                             ;     dec d
0E9B                             ;     jr nz, blockLength1         ; get the next element
0E9B                             ; blockLength3:
0E9B                             ;     ld a,$80
0E9B                             ;     xor d
0E9B                             ;     ld d,a
0E9B                             ;     jr nz, blockLength1
0E9B                             ;     pop hl                      ; hl = block*
0E9B                             ;     or a
0E9B                             ;     sbc hl,de
0E9B                             ;     push hl
0E9B                             ;     jp (ix)
0E9B                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0E9B                             ; \a start of stack \#3 depth \b base \$ prompt
0E9B                             ; DW dStack               ; a vS0 start of datastack			
0E9B                             ; DW FALSE                ; b vBase16
0E9B                             ; DW 0                    ; c vTIBPtr an offset to the tib
0E9B                             ; DW 0                    ; d
0E9B                             ; DW 65                   ; e vLastDef "A" last command u defined
0E9B                             ; DW 0                    ; f
0E9B                             ; DW page6                ; g 256 bytes limits
0E9B                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0E9B                          ;*Macro unroll: FUNC f1, 0, ""
0E9B                F1:          
0E9B   CD D5 09               CALL   go   
0E9E   00 00                  DW   NUL   
0EA0   A6 0E                  DW   f1M_2929S12   
0EA2   A4 0E                  DW   $+2   
0EA4   00                     DB   0   
0EA5   00                     .PSTR   ""   
0EA6                F1M_2929S12:      
0EA6   00                     DB   0   
0EA7                          ;*Macro unroll: FUNC f2, 0, ""
0EA7                F2:          
0EA7   CD D5 09               CALL   go   
0EAA   00 00                  DW   NUL   
0EAC   B2 0E                  DW   f2M_2931S15   
0EAE   B0 0E                  DW   $+2   
0EB0   00                     DB   0   
0EB1   00                     .PSTR   ""   
0EB2                F2M_2931S15:      
0EB2   00                     DB   0   
0EB3                          ;*Macro unroll: FUNC f3, 0, ""
0EB3                F3:          
0EB3   CD D5 09               CALL   go   
0EB6   00 00                  DW   NUL   
0EB8   BE 0E                  DW   f3M_2933S18   
0EBA   BC 0E                  DW   $+2   
0EBC   00                     DB   0   
0EBD   00                     .PSTR   ""   
0EBE                F3M_2933S18:      
0EBE   00                     DB   0   
0EBF                          ;*Macro unroll: FUNC f4, 0, ""
0EBF                F4:          
0EBF   CD D5 09               CALL   go   
0EC2   00 00                  DW   NUL   
0EC4   CA 0E                  DW   f4M_2935S21   
0EC6   C8 0E                  DW   $+2   
0EC8   00                     DB   0   
0EC9   00                     .PSTR   ""   
0ECA                F4M_2935S21:      
0ECA   00                     DB   0   
0ECB                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
0F00                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
0F00                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
0F00                             ; test "$1000 0 10 1 /rg \\a{%a.} /fe", $1000
0F00                             ; test "$1000 0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", $1000
0F00                          ;*Macro unroll:  test "$1000 0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", $1000
0F00   31 00 50               LD   SP,STACK   
0F03   CD 7D 0D               CALL   coldInit   
0F06   CD 60 4E               CALL   execStr   
0F09   24 31 30 30 30 20 30 20 31 30 20 31 20 2F 72 67 20 20 30 20 5C 64 61 7B 25 64 25 61 2B 7D 2F 66 64 20 5C 61 7B 25 61 20 32 34 3C 7D 2F 66 74 20 5C 61 7B 25 61 2E 7D 20 2F 66 65 00 DB   "$1000 0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe",0   
0F45   CD BF 0C               CALL   flushBuffer   
0F48   E1                     POP   HL   
0F49   E5                     PUSH   HL   
0F4A   11 00 10               LD   DE,$1000   
0F4D   B7                     OR   A   
0F4E   ED 52                  SBC   HL,DE   
0F50   7D                     LD   A,L   
0F51   B4                     OR   H   
0F52   CA E8 0F               JP   Z,expectM_2944S32   
0F55   CD 49 0D               CALL   printStr   
0F58   43 6F 64 65 3A 20 24 31 30 30 30 20 30 20 31 30 20 31 20 2F 72 67 20 20 30 20 5C 64 61 7B 25 64 25 61 2B 7D 2F 66 64 20 5C 61 7B 25 61 20 32 34 3C 7D 2F 66 74 20 5C 61 7B 25 61 2E 7D 20 2F 66 65 00 .CSTR   "Code: ","$1000 0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe"   
0F9A   CD 49 0D               CALL   printStr   
0F9D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FAC   21 00 10               LD   hl,$1000   
0FAF   E5                     PUSH   hl   
0FB0   E5                     PUSH   hl   
0FB1   CD 4E 0E               CALL   run   
0FB4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FBC   CD BF 0C               CALL   flushBuffer   
0FBF   CD 49 0D               CALL   printStr   
0FC2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FCF   E1                     POP   hl   
0FD0   E5                     PUSH   hl   
0FD1   E5                     PUSH   hl   
0FD2   CD 4E 0E               CALL   run   
0FD5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FE4   CD BF 0C               CALL   flushBuffer   
0FE7   76                     HALT      
0FE8                EXPECTM_2944S32:      
0FE8   E1                     POP   HL   
0FE9   CD 49 0D               CALL   printStr   
0FEC   44 6F 6E 65 21 00      .CSTR   "Done!"   
0FF2   76                     HALT      
0FF3                             ; 
0FF3                          ;*Macro unroll:  test "/f", false
0FF3   31 00 50               LD   SP,STACK   
0FF6   CD 7D 0D               CALL   coldInit   
0FF9   CD 60 4E               CALL   execStr   
0FFC   2F 66 00               DB   "/f",0   
0FFF   CD BF 0C               CALL   flushBuffer   
1002   E1                     POP   HL   
1003   E5                     PUSH   HL   
1004   11 00 00               LD   DE,false   
1007   B7                     OR   A   
1008   ED 52                  SBC   HL,DE   
100A   7D                     LD   A,L   
100B   B4                     OR   H   
100C   CA 69 10               JP   Z,expectM_2949S40   
100F   CD 49 0D               CALL   printStr   
1012   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
101B   CD 49 0D               CALL   printStr   
101E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
102D   21 00 00               LD   hl,false   
1030   E5                     PUSH   hl   
1031   E5                     PUSH   hl   
1032   CD 4E 0E               CALL   run   
1035   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
103D   CD BF 0C               CALL   flushBuffer   
1040   CD 49 0D               CALL   printStr   
1043   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1050   E1                     POP   hl   
1051   E5                     PUSH   hl   
1052   E5                     PUSH   hl   
1053   CD 4E 0E               CALL   run   
1056   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1065   CD BF 0C               CALL   flushBuffer   
1068   76                     HALT      
1069                EXPECTM_2949S40:      
1069   E1                     POP   HL   
106A                          ;*Macro unroll:  test "/t", true
106A   31 00 50               LD   SP,STACK   
106D   CD 7D 0D               CALL   coldInit   
1070   CD 60 4E               CALL   execStr   
1073   2F 74 00               DB   "/t",0   
1076   CD BF 0C               CALL   flushBuffer   
1079   E1                     POP   HL   
107A   E5                     PUSH   HL   
107B   11 FF FF               LD   DE,true   
107E   B7                     OR   A   
107F   ED 52                  SBC   HL,DE   
1081   7D                     LD   A,L   
1082   B4                     OR   H   
1083   CA E0 10               JP   Z,expectM_2950S41   
1086   CD 49 0D               CALL   printStr   
1089   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1092   CD 49 0D               CALL   printStr   
1095   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10A4   21 FF FF               LD   hl,true   
10A7   E5                     PUSH   hl   
10A8   E5                     PUSH   hl   
10A9   CD 4E 0E               CALL   run   
10AC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10B4   CD BF 0C               CALL   flushBuffer   
10B7   CD 49 0D               CALL   printStr   
10BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10C7   E1                     POP   hl   
10C8   E5                     PUSH   hl   
10C9   E5                     PUSH   hl   
10CA   CD 4E 0E               CALL   run   
10CD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10DC   CD BF 0C               CALL   flushBuffer   
10DF   76                     HALT      
10E0                EXPECTM_2950S41:      
10E0   E1                     POP   HL   
10E1                          ;*Macro unroll:  test "1", 1
10E1   31 00 50               LD   SP,STACK   
10E4   CD 7D 0D               CALL   coldInit   
10E7   CD 60 4E               CALL   execStr   
10EA   31 00                  DB   "1",0   
10EC   CD BF 0C               CALL   flushBuffer   
10EF   E1                     POP   HL   
10F0   E5                     PUSH   HL   
10F1   11 01 00               LD   DE,1   
10F4   B7                     OR   A   
10F5   ED 52                  SBC   HL,DE   
10F7   7D                     LD   A,L   
10F8   B4                     OR   H   
10F9   CA 55 11               JP   Z,expectM_2951S42   
10FC   CD 49 0D               CALL   printStr   
10FF   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1107   CD 49 0D               CALL   printStr   
110A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1119   21 01 00               LD   hl,1   
111C   E5                     PUSH   hl   
111D   E5                     PUSH   hl   
111E   CD 4E 0E               CALL   run   
1121   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1129   CD BF 0C               CALL   flushBuffer   
112C   CD 49 0D               CALL   printStr   
112F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
113C   E1                     POP   hl   
113D   E5                     PUSH   hl   
113E   E5                     PUSH   hl   
113F   CD 4E 0E               CALL   run   
1142   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1151   CD BF 0C               CALL   flushBuffer   
1154   76                     HALT      
1155                EXPECTM_2951S42:      
1155   E1                     POP   HL   
1156                          ;*Macro unroll:  test "2", 2
1156   31 00 50               LD   SP,STACK   
1159   CD 7D 0D               CALL   coldInit   
115C   CD 60 4E               CALL   execStr   
115F   32 00                  DB   "2",0   
1161   CD BF 0C               CALL   flushBuffer   
1164   E1                     POP   HL   
1165   E5                     PUSH   HL   
1166   11 02 00               LD   DE,2   
1169   B7                     OR   A   
116A   ED 52                  SBC   HL,DE   
116C   7D                     LD   A,L   
116D   B4                     OR   H   
116E   CA CA 11               JP   Z,expectM_2952S43   
1171   CD 49 0D               CALL   printStr   
1174   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
117C   CD 49 0D               CALL   printStr   
117F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
118E   21 02 00               LD   hl,2   
1191   E5                     PUSH   hl   
1192   E5                     PUSH   hl   
1193   CD 4E 0E               CALL   run   
1196   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
119E   CD BF 0C               CALL   flushBuffer   
11A1   CD 49 0D               CALL   printStr   
11A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11B1   E1                     POP   hl   
11B2   E5                     PUSH   hl   
11B3   E5                     PUSH   hl   
11B4   CD 4E 0E               CALL   run   
11B7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11C6   CD BF 0C               CALL   flushBuffer   
11C9   76                     HALT      
11CA                EXPECTM_2952S43:      
11CA   E1                     POP   HL   
11CB                          ;*Macro unroll:  test "1", 1
11CB   31 00 50               LD   SP,STACK   
11CE   CD 7D 0D               CALL   coldInit   
11D1   CD 60 4E               CALL   execStr   
11D4   31 00                  DB   "1",0   
11D6   CD BF 0C               CALL   flushBuffer   
11D9   E1                     POP   HL   
11DA   E5                     PUSH   HL   
11DB   11 01 00               LD   DE,1   
11DE   B7                     OR   A   
11DF   ED 52                  SBC   HL,DE   
11E1   7D                     LD   A,L   
11E2   B4                     OR   H   
11E3   CA 3F 12               JP   Z,expectM_2953S44   
11E6   CD 49 0D               CALL   printStr   
11E9   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11F1   CD 49 0D               CALL   printStr   
11F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1203   21 01 00               LD   hl,1   
1206   E5                     PUSH   hl   
1207   E5                     PUSH   hl   
1208   CD 4E 0E               CALL   run   
120B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1213   CD BF 0C               CALL   flushBuffer   
1216   CD 49 0D               CALL   printStr   
1219   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1226   E1                     POP   hl   
1227   E5                     PUSH   hl   
1228   E5                     PUSH   hl   
1229   CD 4E 0E               CALL   run   
122C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
123B   CD BF 0C               CALL   flushBuffer   
123E   76                     HALT      
123F                EXPECTM_2953S44:      
123F   E1                     POP   HL   
1240                          ;*Macro unroll:  test "0", 0
1240   31 00 50               LD   SP,STACK   
1243   CD 7D 0D               CALL   coldInit   
1246   CD 60 4E               CALL   execStr   
1249   30 00                  DB   "0",0   
124B   CD BF 0C               CALL   flushBuffer   
124E   E1                     POP   HL   
124F   E5                     PUSH   HL   
1250   11 00 00               LD   DE,0   
1253   B7                     OR   A   
1254   ED 52                  SBC   HL,DE   
1256   7D                     LD   A,L   
1257   B4                     OR   H   
1258   CA B4 12               JP   Z,expectM_2954S45   
125B   CD 49 0D               CALL   printStr   
125E   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1266   CD 49 0D               CALL   printStr   
1269   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1278   21 00 00               LD   hl,0   
127B   E5                     PUSH   hl   
127C   E5                     PUSH   hl   
127D   CD 4E 0E               CALL   run   
1280   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1288   CD BF 0C               CALL   flushBuffer   
128B   CD 49 0D               CALL   printStr   
128E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
129B   E1                     POP   hl   
129C   E5                     PUSH   hl   
129D   E5                     PUSH   hl   
129E   CD 4E 0E               CALL   run   
12A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12B0   CD BF 0C               CALL   flushBuffer   
12B3   76                     HALT      
12B4                EXPECTM_2954S45:      
12B4   E1                     POP   HL   
12B5                          ;*Macro unroll:  test "10", 10
12B5   31 00 50               LD   SP,STACK   
12B8   CD 7D 0D               CALL   coldInit   
12BB   CD 60 4E               CALL   execStr   
12BE   31 30 00               DB   "10",0   
12C1   CD BF 0C               CALL   flushBuffer   
12C4   E1                     POP   HL   
12C5   E5                     PUSH   HL   
12C6   11 0A 00               LD   DE,10   
12C9   B7                     OR   A   
12CA   ED 52                  SBC   HL,DE   
12CC   7D                     LD   A,L   
12CD   B4                     OR   H   
12CE   CA 2B 13               JP   Z,expectM_2955S46   
12D1   CD 49 0D               CALL   printStr   
12D4   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
12DD   CD 49 0D               CALL   printStr   
12E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12EF   21 0A 00               LD   hl,10   
12F2   E5                     PUSH   hl   
12F3   E5                     PUSH   hl   
12F4   CD 4E 0E               CALL   run   
12F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12FF   CD BF 0C               CALL   flushBuffer   
1302   CD 49 0D               CALL   printStr   
1305   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1312   E1                     POP   hl   
1313   E5                     PUSH   hl   
1314   E5                     PUSH   hl   
1315   CD 4E 0E               CALL   run   
1318   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1327   CD BF 0C               CALL   flushBuffer   
132A   76                     HALT      
132B                EXPECTM_2955S46:      
132B   E1                     POP   HL   
132C                          ;*Macro unroll:  test "123", 123
132C   31 00 50               LD   SP,STACK   
132F   CD 7D 0D               CALL   coldInit   
1332   CD 60 4E               CALL   execStr   
1335   31 32 33 00            DB   "123",0   
1339   CD BF 0C               CALL   flushBuffer   
133C   E1                     POP   HL   
133D   E5                     PUSH   HL   
133E   11 7B 00               LD   DE,123   
1341   B7                     OR   A   
1342   ED 52                  SBC   HL,DE   
1344   7D                     LD   A,L   
1345   B4                     OR   H   
1346   CA A4 13               JP   Z,expectM_2956S47   
1349   CD 49 0D               CALL   printStr   
134C   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1356   CD 49 0D               CALL   printStr   
1359   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1368   21 7B 00               LD   hl,123   
136B   E5                     PUSH   hl   
136C   E5                     PUSH   hl   
136D   CD 4E 0E               CALL   run   
1370   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1378   CD BF 0C               CALL   flushBuffer   
137B   CD 49 0D               CALL   printStr   
137E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
138B   E1                     POP   hl   
138C   E5                     PUSH   hl   
138D   E5                     PUSH   hl   
138E   CD 4E 0E               CALL   run   
1391   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13A0   CD BF 0C               CALL   flushBuffer   
13A3   76                     HALT      
13A4                EXPECTM_2956S47:      
13A4   E1                     POP   HL   
13A5                          ;*Macro unroll:  test "-1",-1
13A5   31 00 50               LD   SP,STACK   
13A8   CD 7D 0D               CALL   coldInit   
13AB   CD 60 4E               CALL   execStr   
13AE   2D 31 00               DB   "-1",0   
13B1   CD BF 0C               CALL   flushBuffer   
13B4   E1                     POP   HL   
13B5   E5                     PUSH   HL   
13B6   11 FF FF               LD   DE,-1   
13B9   B7                     OR   A   
13BA   ED 52                  SBC   HL,DE   
13BC   7D                     LD   A,L   
13BD   B4                     OR   H   
13BE   CA 1B 14               JP   Z,expectM_2957S48   
13C1   CD 49 0D               CALL   printStr   
13C4   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
13CD   CD 49 0D               CALL   printStr   
13D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13DF   21 FF FF               LD   hl,-1   
13E2   E5                     PUSH   hl   
13E3   E5                     PUSH   hl   
13E4   CD 4E 0E               CALL   run   
13E7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13EF   CD BF 0C               CALL   flushBuffer   
13F2   CD 49 0D               CALL   printStr   
13F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1402   E1                     POP   hl   
1403   E5                     PUSH   hl   
1404   E5                     PUSH   hl   
1405   CD 4E 0E               CALL   run   
1408   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1417   CD BF 0C               CALL   flushBuffer   
141A   76                     HALT      
141B                EXPECTM_2957S48:      
141B   E1                     POP   HL   
141C                          ;*Macro unroll:  test "''", 0
141C   31 00 50               LD   SP,STACK   
141F   CD 7D 0D               CALL   coldInit   
1422   CD 60 4E               CALL   execStr   
1425   27 27 00               DB   "''",0   
1428   CD BF 0C               CALL   flushBuffer   
142B   E1                     POP   HL   
142C   E5                     PUSH   HL   
142D   11 00 00               LD   DE,0   
1430   B7                     OR   A   
1431   ED 52                  SBC   HL,DE   
1433   7D                     LD   A,L   
1434   B4                     OR   H   
1435   CA 92 14               JP   Z,expectM_2958S49   
1438   CD 49 0D               CALL   printStr   
143B   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1444   CD 49 0D               CALL   printStr   
1447   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1456   21 00 00               LD   hl,0   
1459   E5                     PUSH   hl   
145A   E5                     PUSH   hl   
145B   CD 4E 0E               CALL   run   
145E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1466   CD BF 0C               CALL   flushBuffer   
1469   CD 49 0D               CALL   printStr   
146C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1479   E1                     POP   hl   
147A   E5                     PUSH   hl   
147B   E5                     PUSH   hl   
147C   CD 4E 0E               CALL   run   
147F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
148E   CD BF 0C               CALL   flushBuffer   
1491   76                     HALT      
1492                EXPECTM_2958S49:      
1492   E1                     POP   HL   
1493                          ;*Macro unroll:  test "'a'", $61
1493   31 00 50               LD   SP,STACK   
1496   CD 7D 0D               CALL   coldInit   
1499   CD 60 4E               CALL   execStr   
149C   27 61 27 00            DB   "'a'",0   
14A0   CD BF 0C               CALL   flushBuffer   
14A3   E1                     POP   HL   
14A4   E5                     PUSH   HL   
14A5   11 61 00               LD   DE,$61   
14A8   B7                     OR   A   
14A9   ED 52                  SBC   HL,DE   
14AB   7D                     LD   A,L   
14AC   B4                     OR   H   
14AD   CA 0B 15               JP   Z,expectM_2959S50   
14B0   CD 49 0D               CALL   printStr   
14B3   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
14BD   CD 49 0D               CALL   printStr   
14C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14CF   21 61 00               LD   hl,$61   
14D2   E5                     PUSH   hl   
14D3   E5                     PUSH   hl   
14D4   CD 4E 0E               CALL   run   
14D7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14DF   CD BF 0C               CALL   flushBuffer   
14E2   CD 49 0D               CALL   printStr   
14E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14F2   E1                     POP   hl   
14F3   E5                     PUSH   hl   
14F4   E5                     PUSH   hl   
14F5   CD 4E 0E               CALL   run   
14F8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1507   CD BF 0C               CALL   flushBuffer   
150A   76                     HALT      
150B                EXPECTM_2959S50:      
150B   E1                     POP   HL   
150C                          ;*Macro unroll:  test "'\\''", $27
150C   31 00 50               LD   SP,STACK   
150F   CD 7D 0D               CALL   coldInit   
1512   CD 60 4E               CALL   execStr   
1515   27 5C 27 27 00         DB   "'\\''",0   
151A   CD BF 0C               CALL   flushBuffer   
151D   E1                     POP   HL   
151E   E5                     PUSH   HL   
151F   11 27 00               LD   DE,$27   
1522   B7                     OR   A   
1523   ED 52                  SBC   HL,DE   
1525   7D                     LD   A,L   
1526   B4                     OR   H   
1527   CA 86 15               JP   Z,expectM_2960S51   
152A   CD 49 0D               CALL   printStr   
152D   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1538   CD 49 0D               CALL   printStr   
153B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
154A   21 27 00               LD   hl,$27   
154D   E5                     PUSH   hl   
154E   E5                     PUSH   hl   
154F   CD 4E 0E               CALL   run   
1552   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
155A   CD BF 0C               CALL   flushBuffer   
155D   CD 49 0D               CALL   printStr   
1560   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
156D   E1                     POP   hl   
156E   E5                     PUSH   hl   
156F   E5                     PUSH   hl   
1570   CD 4E 0E               CALL   run   
1573   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1582   CD BF 0C               CALL   flushBuffer   
1585   76                     HALT      
1586                EXPECTM_2960S51:      
1586   E1                     POP   HL   
1587                          ;*Macro unroll:  test "$10", $10
1587   31 00 50               LD   SP,STACK   
158A   CD 7D 0D               CALL   coldInit   
158D   CD 60 4E               CALL   execStr   
1590   24 31 30 00            DB   "$10",0   
1594   CD BF 0C               CALL   flushBuffer   
1597   E1                     POP   HL   
1598   E5                     PUSH   HL   
1599   11 10 00               LD   DE,$10   
159C   B7                     OR   A   
159D   ED 52                  SBC   HL,DE   
159F   7D                     LD   A,L   
15A0   B4                     OR   H   
15A1   CA FF 15               JP   Z,expectM_2961S52   
15A4   CD 49 0D               CALL   printStr   
15A7   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
15B1   CD 49 0D               CALL   printStr   
15B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15C3   21 10 00               LD   hl,$10   
15C6   E5                     PUSH   hl   
15C7   E5                     PUSH   hl   
15C8   CD 4E 0E               CALL   run   
15CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15D3   CD BF 0C               CALL   flushBuffer   
15D6   CD 49 0D               CALL   printStr   
15D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E6   E1                     POP   hl   
15E7   E5                     PUSH   hl   
15E8   E5                     PUSH   hl   
15E9   CD 4E 0E               CALL   run   
15EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15FB   CD BF 0C               CALL   flushBuffer   
15FE   76                     HALT      
15FF                EXPECTM_2961S52:      
15FF   E1                     POP   HL   
1600                          ;*Macro unroll:  test "$FF", $FF
1600   31 00 50               LD   SP,STACK   
1603   CD 7D 0D               CALL   coldInit   
1606   CD 60 4E               CALL   execStr   
1609   24 46 46 00            DB   "$FF",0   
160D   CD BF 0C               CALL   flushBuffer   
1610   E1                     POP   HL   
1611   E5                     PUSH   HL   
1612   11 FF 00               LD   DE,$FF   
1615   B7                     OR   A   
1616   ED 52                  SBC   HL,DE   
1618   7D                     LD   A,L   
1619   B4                     OR   H   
161A   CA 78 16               JP   Z,expectM_2962S53   
161D   CD 49 0D               CALL   printStr   
1620   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
162A   CD 49 0D               CALL   printStr   
162D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
163C   21 FF 00               LD   hl,$FF   
163F   E5                     PUSH   hl   
1640   E5                     PUSH   hl   
1641   CD 4E 0E               CALL   run   
1644   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
164C   CD BF 0C               CALL   flushBuffer   
164F   CD 49 0D               CALL   printStr   
1652   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
165F   E1                     POP   hl   
1660   E5                     PUSH   hl   
1661   E5                     PUSH   hl   
1662   CD 4E 0E               CALL   run   
1665   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1674   CD BF 0C               CALL   flushBuffer   
1677   76                     HALT      
1678                EXPECTM_2962S53:      
1678   E1                     POP   HL   
1679                          ;*Macro unroll:  test "-1 2 +",1
1679   31 00 50               LD   SP,STACK   
167C   CD 7D 0D               CALL   coldInit   
167F   CD 60 4E               CALL   execStr   
1682   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1689   CD BF 0C               CALL   flushBuffer   
168C   E1                     POP   HL   
168D   E5                     PUSH   HL   
168E   11 01 00               LD   DE,1   
1691   B7                     OR   A   
1692   ED 52                  SBC   HL,DE   
1694   7D                     LD   A,L   
1695   B4                     OR   H   
1696   CA F7 16               JP   Z,expectM_2963S54   
1699   CD 49 0D               CALL   printStr   
169C   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
16A9   CD 49 0D               CALL   printStr   
16AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16BB   21 01 00               LD   hl,1   
16BE   E5                     PUSH   hl   
16BF   E5                     PUSH   hl   
16C0   CD 4E 0E               CALL   run   
16C3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16CB   CD BF 0C               CALL   flushBuffer   
16CE   CD 49 0D               CALL   printStr   
16D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16DE   E1                     POP   hl   
16DF   E5                     PUSH   hl   
16E0   E5                     PUSH   hl   
16E1   CD 4E 0E               CALL   run   
16E4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16F3   CD BF 0C               CALL   flushBuffer   
16F6   76                     HALT      
16F7                EXPECTM_2963S54:      
16F7   E1                     POP   HL   
16F8                          ;*Macro unroll:  test "-1 1 +",0
16F8   31 00 50               LD   SP,STACK   
16FB   CD 7D 0D               CALL   coldInit   
16FE   CD 60 4E               CALL   execStr   
1701   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1708   CD BF 0C               CALL   flushBuffer   
170B   E1                     POP   HL   
170C   E5                     PUSH   HL   
170D   11 00 00               LD   DE,0   
1710   B7                     OR   A   
1711   ED 52                  SBC   HL,DE   
1713   7D                     LD   A,L   
1714   B4                     OR   H   
1715   CA 76 17               JP   Z,expectM_2964S55   
1718   CD 49 0D               CALL   printStr   
171B   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1728   CD 49 0D               CALL   printStr   
172B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
173A   21 00 00               LD   hl,0   
173D   E5                     PUSH   hl   
173E   E5                     PUSH   hl   
173F   CD 4E 0E               CALL   run   
1742   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
174A   CD BF 0C               CALL   flushBuffer   
174D   CD 49 0D               CALL   printStr   
1750   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
175D   E1                     POP   hl   
175E   E5                     PUSH   hl   
175F   E5                     PUSH   hl   
1760   CD 4E 0E               CALL   run   
1763   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1772   CD BF 0C               CALL   flushBuffer   
1775   76                     HALT      
1776                EXPECTM_2964S55:      
1776   E1                     POP   HL   
1777                          ;*Macro unroll:  test "1 2 +", 3
1777   31 00 50               LD   SP,STACK   
177A   CD 7D 0D               CALL   coldInit   
177D   CD 60 4E               CALL   execStr   
1780   31 20 32 20 2B 00      DB   "1 2 +",0   
1786   CD BF 0C               CALL   flushBuffer   
1789   E1                     POP   HL   
178A   E5                     PUSH   HL   
178B   11 03 00               LD   DE,3   
178E   B7                     OR   A   
178F   ED 52                  SBC   HL,DE   
1791   7D                     LD   A,L   
1792   B4                     OR   H   
1793   CA F3 17               JP   Z,expectM_2965S56   
1796   CD 49 0D               CALL   printStr   
1799   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17A5   CD 49 0D               CALL   printStr   
17A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17B7   21 03 00               LD   hl,3   
17BA   E5                     PUSH   hl   
17BB   E5                     PUSH   hl   
17BC   CD 4E 0E               CALL   run   
17BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17C7   CD BF 0C               CALL   flushBuffer   
17CA   CD 49 0D               CALL   printStr   
17CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17DA   E1                     POP   hl   
17DB   E5                     PUSH   hl   
17DC   E5                     PUSH   hl   
17DD   CD 4E 0E               CALL   run   
17E0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17EF   CD BF 0C               CALL   flushBuffer   
17F2   76                     HALT      
17F3                EXPECTM_2965S56:      
17F3   E1                     POP   HL   
17F4                          ;*Macro unroll:  test "4 1 2 +", 3
17F4   31 00 50               LD   SP,STACK   
17F7   CD 7D 0D               CALL   coldInit   
17FA   CD 60 4E               CALL   execStr   
17FD   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1805   CD BF 0C               CALL   flushBuffer   
1808   E1                     POP   HL   
1809   E5                     PUSH   HL   
180A   11 03 00               LD   DE,3   
180D   B7                     OR   A   
180E   ED 52                  SBC   HL,DE   
1810   7D                     LD   A,L   
1811   B4                     OR   H   
1812   CA 74 18               JP   Z,expectM_2966S57   
1815   CD 49 0D               CALL   printStr   
1818   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1826   CD 49 0D               CALL   printStr   
1829   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1838   21 03 00               LD   hl,3   
183B   E5                     PUSH   hl   
183C   E5                     PUSH   hl   
183D   CD 4E 0E               CALL   run   
1840   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1848   CD BF 0C               CALL   flushBuffer   
184B   CD 49 0D               CALL   printStr   
184E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
185B   E1                     POP   hl   
185C   E5                     PUSH   hl   
185D   E5                     PUSH   hl   
185E   CD 4E 0E               CALL   run   
1861   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1870   CD BF 0C               CALL   flushBuffer   
1873   76                     HALT      
1874                EXPECTM_2966S57:      
1874   E1                     POP   HL   
1875                          ;*Macro unroll:  test "123 456 +", 123+456
1875   31 00 50               LD   SP,STACK   
1878   CD 7D 0D               CALL   coldInit   
187B   CD 60 4E               CALL   execStr   
187E   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1888   CD BF 0C               CALL   flushBuffer   
188B   E1                     POP   HL   
188C   E5                     PUSH   HL   
188D   11 43 02               LD   DE,123+456   
1890   B7                     OR   A   
1891   ED 52                  SBC   HL,DE   
1893   7D                     LD   A,L   
1894   B4                     OR   H   
1895   CA F9 18               JP   Z,expectM_2967S58   
1898   CD 49 0D               CALL   printStr   
189B   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
18AB   CD 49 0D               CALL   printStr   
18AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18BD   21 43 02               LD   hl,123+456   
18C0   E5                     PUSH   hl   
18C1   E5                     PUSH   hl   
18C2   CD 4E 0E               CALL   run   
18C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18CD   CD BF 0C               CALL   flushBuffer   
18D0   CD 49 0D               CALL   printStr   
18D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18E0   E1                     POP   hl   
18E1   E5                     PUSH   hl   
18E2   E5                     PUSH   hl   
18E3   CD 4E 0E               CALL   run   
18E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18F5   CD BF 0C               CALL   flushBuffer   
18F8   76                     HALT      
18F9                EXPECTM_2967S58:      
18F9   E1                     POP   HL   
18FA                          ;*Macro unroll:  test "64 128 +", 64+128
18FA   31 00 50               LD   SP,STACK   
18FD   CD 7D 0D               CALL   coldInit   
1900   CD 60 4E               CALL   execStr   
1903   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
190C   CD BF 0C               CALL   flushBuffer   
190F   E1                     POP   HL   
1910   E5                     PUSH   HL   
1911   11 C0 00               LD   DE,64+128   
1914   B7                     OR   A   
1915   ED 52                  SBC   HL,DE   
1917   7D                     LD   A,L   
1918   B4                     OR   H   
1919   CA 7C 19               JP   Z,expectM_2968S59   
191C   CD 49 0D               CALL   printStr   
191F   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
192E   CD 49 0D               CALL   printStr   
1931   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1940   21 C0 00               LD   hl,64+128   
1943   E5                     PUSH   hl   
1944   E5                     PUSH   hl   
1945   CD 4E 0E               CALL   run   
1948   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1950   CD BF 0C               CALL   flushBuffer   
1953   CD 49 0D               CALL   printStr   
1956   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1963   E1                     POP   hl   
1964   E5                     PUSH   hl   
1965   E5                     PUSH   hl   
1966   CD 4E 0E               CALL   run   
1969   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1978   CD BF 0C               CALL   flushBuffer   
197B   76                     HALT      
197C                EXPECTM_2968S59:      
197C   E1                     POP   HL   
197D                          ;*Macro unroll:  test "1 2 +", 3
197D   31 00 50               LD   SP,STACK   
1980   CD 7D 0D               CALL   coldInit   
1983   CD 60 4E               CALL   execStr   
1986   31 20 32 20 2B 00      DB   "1 2 +",0   
198C   CD BF 0C               CALL   flushBuffer   
198F   E1                     POP   HL   
1990   E5                     PUSH   HL   
1991   11 03 00               LD   DE,3   
1994   B7                     OR   A   
1995   ED 52                  SBC   HL,DE   
1997   7D                     LD   A,L   
1998   B4                     OR   H   
1999   CA F9 19               JP   Z,expectM_2969S60   
199C   CD 49 0D               CALL   printStr   
199F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
19AB   CD 49 0D               CALL   printStr   
19AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19BD   21 03 00               LD   hl,3   
19C0   E5                     PUSH   hl   
19C1   E5                     PUSH   hl   
19C2   CD 4E 0E               CALL   run   
19C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19CD   CD BF 0C               CALL   flushBuffer   
19D0   CD 49 0D               CALL   printStr   
19D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19E0   E1                     POP   hl   
19E1   E5                     PUSH   hl   
19E2   E5                     PUSH   hl   
19E3   CD 4E 0E               CALL   run   
19E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19F5   CD BF 0C               CALL   flushBuffer   
19F8   76                     HALT      
19F9                EXPECTM_2969S60:      
19F9   E1                     POP   HL   
19FA                          ;*Macro unroll:  test "1a= a++ a",2
19FA   31 00 50               LD   SP,STACK   
19FD   CD 7D 0D               CALL   coldInit   
1A00   CD 60 4E               CALL   execStr   
1A03   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A0D   CD BF 0C               CALL   flushBuffer   
1A10   E1                     POP   HL   
1A11   E5                     PUSH   HL   
1A12   11 02 00               LD   DE,2   
1A15   B7                     OR   A   
1A16   ED 52                  SBC   HL,DE   
1A18   7D                     LD   A,L   
1A19   B4                     OR   H   
1A1A   CA 7E 1A               JP   Z,expectM_2970S61   
1A1D   CD 49 0D               CALL   printStr   
1A20   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1A30   CD 49 0D               CALL   printStr   
1A33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A42   21 02 00               LD   hl,2   
1A45   E5                     PUSH   hl   
1A46   E5                     PUSH   hl   
1A47   CD 4E 0E               CALL   run   
1A4A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A52   CD BF 0C               CALL   flushBuffer   
1A55   CD 49 0D               CALL   printStr   
1A58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A65   E1                     POP   hl   
1A66   E5                     PUSH   hl   
1A67   E5                     PUSH   hl   
1A68   CD 4E 0E               CALL   run   
1A6B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A7A   CD BF 0C               CALL   flushBuffer   
1A7D   76                     HALT      
1A7E                EXPECTM_2970S61:      
1A7E   E1                     POP   HL   
1A7F                          ;*Macro unroll:  test "-1 -1 -",0
1A7F   31 00 50               LD   SP,STACK   
1A82   CD 7D 0D               CALL   coldInit   
1A85   CD 60 4E               CALL   execStr   
1A88   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1A90   CD BF 0C               CALL   flushBuffer   
1A93   E1                     POP   HL   
1A94   E5                     PUSH   HL   
1A95   11 00 00               LD   DE,0   
1A98   B7                     OR   A   
1A99   ED 52                  SBC   HL,DE   
1A9B   7D                     LD   A,L   
1A9C   B4                     OR   H   
1A9D   CA FF 1A               JP   Z,expectM_2971S62   
1AA0   CD 49 0D               CALL   printStr   
1AA3   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1AB1   CD 49 0D               CALL   printStr   
1AB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC3   21 00 00               LD   hl,0   
1AC6   E5                     PUSH   hl   
1AC7   E5                     PUSH   hl   
1AC8   CD 4E 0E               CALL   run   
1ACB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AD3   CD BF 0C               CALL   flushBuffer   
1AD6   CD 49 0D               CALL   printStr   
1AD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AE6   E1                     POP   hl   
1AE7   E5                     PUSH   hl   
1AE8   E5                     PUSH   hl   
1AE9   CD 4E 0E               CALL   run   
1AEC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AFB   CD BF 0C               CALL   flushBuffer   
1AFE   76                     HALT      
1AFF                EXPECTM_2971S62:      
1AFF   E1                     POP   HL   
1B00                          ;*Macro unroll:  test "5 3 -", 2
1B00   31 00 50               LD   SP,STACK   
1B03   CD 7D 0D               CALL   coldInit   
1B06   CD 60 4E               CALL   execStr   
1B09   35 20 33 20 2D 00      DB   "5 3 -",0   
1B0F   CD BF 0C               CALL   flushBuffer   
1B12   E1                     POP   HL   
1B13   E5                     PUSH   HL   
1B14   11 02 00               LD   DE,2   
1B17   B7                     OR   A   
1B18   ED 52                  SBC   HL,DE   
1B1A   7D                     LD   A,L   
1B1B   B4                     OR   H   
1B1C   CA 7C 1B               JP   Z,expectM_2972S63   
1B1F   CD 49 0D               CALL   printStr   
1B22   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1B2E   CD 49 0D               CALL   printStr   
1B31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B40   21 02 00               LD   hl,2   
1B43   E5                     PUSH   hl   
1B44   E5                     PUSH   hl   
1B45   CD 4E 0E               CALL   run   
1B48   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B50   CD BF 0C               CALL   flushBuffer   
1B53   CD 49 0D               CALL   printStr   
1B56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B63   E1                     POP   hl   
1B64   E5                     PUSH   hl   
1B65   E5                     PUSH   hl   
1B66   CD 4E 0E               CALL   run   
1B69   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B78   CD BF 0C               CALL   flushBuffer   
1B7B   76                     HALT      
1B7C                EXPECTM_2972S63:      
1B7C   E1                     POP   HL   
1B7D                          ;*Macro unroll:  test "2 1 -",1
1B7D   31 00 50               LD   SP,STACK   
1B80   CD 7D 0D               CALL   coldInit   
1B83   CD 60 4E               CALL   execStr   
1B86   32 20 31 20 2D 00      DB   "2 1 -",0   
1B8C   CD BF 0C               CALL   flushBuffer   
1B8F   E1                     POP   HL   
1B90   E5                     PUSH   HL   
1B91   11 01 00               LD   DE,1   
1B94   B7                     OR   A   
1B95   ED 52                  SBC   HL,DE   
1B97   7D                     LD   A,L   
1B98   B4                     OR   H   
1B99   CA F9 1B               JP   Z,expectM_2973S64   
1B9C   CD 49 0D               CALL   printStr   
1B9F   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1BAB   CD 49 0D               CALL   printStr   
1BAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BBD   21 01 00               LD   hl,1   
1BC0   E5                     PUSH   hl   
1BC1   E5                     PUSH   hl   
1BC2   CD 4E 0E               CALL   run   
1BC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BCD   CD BF 0C               CALL   flushBuffer   
1BD0   CD 49 0D               CALL   printStr   
1BD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BE0   E1                     POP   hl   
1BE1   E5                     PUSH   hl   
1BE2   E5                     PUSH   hl   
1BE3   CD 4E 0E               CALL   run   
1BE6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BF5   CD BF 0C               CALL   flushBuffer   
1BF8   76                     HALT      
1BF9                EXPECTM_2973S64:      
1BF9   E1                     POP   HL   
1BFA                          ;*Macro unroll:  test "3a= a-- a",2
1BFA   31 00 50               LD   SP,STACK   
1BFD   CD 7D 0D               CALL   coldInit   
1C00   CD 60 4E               CALL   execStr   
1C03   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C0D   CD BF 0C               CALL   flushBuffer   
1C10   E1                     POP   HL   
1C11   E5                     PUSH   HL   
1C12   11 02 00               LD   DE,2   
1C15   B7                     OR   A   
1C16   ED 52                  SBC   HL,DE   
1C18   7D                     LD   A,L   
1C19   B4                     OR   H   
1C1A   CA 7E 1C               JP   Z,expectM_2974S65   
1C1D   CD 49 0D               CALL   printStr   
1C20   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C30   CD 49 0D               CALL   printStr   
1C33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C42   21 02 00               LD   hl,2   
1C45   E5                     PUSH   hl   
1C46   E5                     PUSH   hl   
1C47   CD 4E 0E               CALL   run   
1C4A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C52   CD BF 0C               CALL   flushBuffer   
1C55   CD 49 0D               CALL   printStr   
1C58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C65   E1                     POP   hl   
1C66   E5                     PUSH   hl   
1C67   E5                     PUSH   hl   
1C68   CD 4E 0E               CALL   run   
1C6B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C7A   CD BF 0C               CALL   flushBuffer   
1C7D   76                     HALT      
1C7E                EXPECTM_2974S65:      
1C7E   E1                     POP   HL   
1C7F                          ;*Macro unroll:  test "3 5 &", 1
1C7F   31 00 50               LD   SP,STACK   
1C82   CD 7D 0D               CALL   coldInit   
1C85   CD 60 4E               CALL   execStr   
1C88   33 20 35 20 26 00      DB   "3 5 &",0   
1C8E   CD BF 0C               CALL   flushBuffer   
1C91   E1                     POP   HL   
1C92   E5                     PUSH   HL   
1C93   11 01 00               LD   DE,1   
1C96   B7                     OR   A   
1C97   ED 52                  SBC   HL,DE   
1C99   7D                     LD   A,L   
1C9A   B4                     OR   H   
1C9B   CA FB 1C               JP   Z,expectM_2975S66   
1C9E   CD 49 0D               CALL   printStr   
1CA1   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1CAD   CD 49 0D               CALL   printStr   
1CB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CBF   21 01 00               LD   hl,1   
1CC2   E5                     PUSH   hl   
1CC3   E5                     PUSH   hl   
1CC4   CD 4E 0E               CALL   run   
1CC7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CCF   CD BF 0C               CALL   flushBuffer   
1CD2   CD 49 0D               CALL   printStr   
1CD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CE2   E1                     POP   hl   
1CE3   E5                     PUSH   hl   
1CE4   E5                     PUSH   hl   
1CE5   CD 4E 0E               CALL   run   
1CE8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CF7   CD BF 0C               CALL   flushBuffer   
1CFA   76                     HALT      
1CFB                EXPECTM_2975S66:      
1CFB   E1                     POP   HL   
1CFC                          ;*Macro unroll:  test "3 5 |", 7
1CFC   31 00 50               LD   SP,STACK   
1CFF   CD 7D 0D               CALL   coldInit   
1D02   CD 60 4E               CALL   execStr   
1D05   33 20 35 20 7C 00      DB   "3 5 |",0   
1D0B   CD BF 0C               CALL   flushBuffer   
1D0E   E1                     POP   HL   
1D0F   E5                     PUSH   HL   
1D10   11 07 00               LD   DE,7   
1D13   B7                     OR   A   
1D14   ED 52                  SBC   HL,DE   
1D16   7D                     LD   A,L   
1D17   B4                     OR   H   
1D18   CA 78 1D               JP   Z,expectM_2976S67   
1D1B   CD 49 0D               CALL   printStr   
1D1E   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D2A   CD 49 0D               CALL   printStr   
1D2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D3C   21 07 00               LD   hl,7   
1D3F   E5                     PUSH   hl   
1D40   E5                     PUSH   hl   
1D41   CD 4E 0E               CALL   run   
1D44   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D4C   CD BF 0C               CALL   flushBuffer   
1D4F   CD 49 0D               CALL   printStr   
1D52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D5F   E1                     POP   hl   
1D60   E5                     PUSH   hl   
1D61   E5                     PUSH   hl   
1D62   CD 4E 0E               CALL   run   
1D65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D74   CD BF 0C               CALL   flushBuffer   
1D77   76                     HALT      
1D78                EXPECTM_2976S67:      
1D78   E1                     POP   HL   
1D79                          ;*Macro unroll:  test "3 5 /x", 6
1D79   31 00 50               LD   SP,STACK   
1D7C   CD 7D 0D               CALL   coldInit   
1D7F   CD 60 4E               CALL   execStr   
1D82   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D89   CD BF 0C               CALL   flushBuffer   
1D8C   E1                     POP   HL   
1D8D   E5                     PUSH   HL   
1D8E   11 06 00               LD   DE,6   
1D91   B7                     OR   A   
1D92   ED 52                  SBC   HL,DE   
1D94   7D                     LD   A,L   
1D95   B4                     OR   H   
1D96   CA F7 1D               JP   Z,expectM_2977S68   
1D99   CD 49 0D               CALL   printStr   
1D9C   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1DA9   CD 49 0D               CALL   printStr   
1DAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DBB   21 06 00               LD   hl,6   
1DBE   E5                     PUSH   hl   
1DBF   E5                     PUSH   hl   
1DC0   CD 4E 0E               CALL   run   
1DC3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DCB   CD BF 0C               CALL   flushBuffer   
1DCE   CD 49 0D               CALL   printStr   
1DD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DDE   E1                     POP   hl   
1DDF   E5                     PUSH   hl   
1DE0   E5                     PUSH   hl   
1DE1   CD 4E 0E               CALL   run   
1DE4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DF3   CD BF 0C               CALL   flushBuffer   
1DF6   76                     HALT      
1DF7                EXPECTM_2977S68:      
1DF7   E1                     POP   HL   
1DF8                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1DF8   31 00 50               LD   SP,STACK   
1DFB   CD 7D 0D               CALL   coldInit   
1DFE   CD 60 4E               CALL   execStr   
1E01   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E10   CD BF 0C               CALL   flushBuffer   
1E13   E1                     POP   HL   
1E14   E5                     PUSH   HL   
1E15   11 06 00               LD   DE,6   
1E18   B7                     OR   A   
1E19   ED 52                  SBC   HL,DE   
1E1B   7D                     LD   A,L   
1E1C   B4                     OR   H   
1E1D   CA 86 1E               JP   Z,expectM_2978S69   
1E20   CD 49 0D               CALL   printStr   
1E23   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E38   CD 49 0D               CALL   printStr   
1E3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4A   21 06 00               LD   hl,6   
1E4D   E5                     PUSH   hl   
1E4E   E5                     PUSH   hl   
1E4F   CD 4E 0E               CALL   run   
1E52   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E5A   CD BF 0C               CALL   flushBuffer   
1E5D   CD 49 0D               CALL   printStr   
1E60   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E6D   E1                     POP   hl   
1E6E   E5                     PUSH   hl   
1E6F   E5                     PUSH   hl   
1E70   CD 4E 0E               CALL   run   
1E73   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E82   CD BF 0C               CALL   flushBuffer   
1E85   76                     HALT      
1E86                EXPECTM_2978S69:      
1E86   E1                     POP   HL   
1E87                          ;*Macro unroll:  test "2 3 *", 6
1E87   31 00 50               LD   SP,STACK   
1E8A   CD 7D 0D               CALL   coldInit   
1E8D   CD 60 4E               CALL   execStr   
1E90   32 20 33 20 2A 00      DB   "2 3 *",0   
1E96   CD BF 0C               CALL   flushBuffer   
1E99   E1                     POP   HL   
1E9A   E5                     PUSH   HL   
1E9B   11 06 00               LD   DE,6   
1E9E   B7                     OR   A   
1E9F   ED 52                  SBC   HL,DE   
1EA1   7D                     LD   A,L   
1EA2   B4                     OR   H   
1EA3   CA 03 1F               JP   Z,expectM_2979S70   
1EA6   CD 49 0D               CALL   printStr   
1EA9   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1EB5   CD 49 0D               CALL   printStr   
1EB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EC7   21 06 00               LD   hl,6   
1ECA   E5                     PUSH   hl   
1ECB   E5                     PUSH   hl   
1ECC   CD 4E 0E               CALL   run   
1ECF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1ED7   CD BF 0C               CALL   flushBuffer   
1EDA   CD 49 0D               CALL   printStr   
1EDD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EEA   E1                     POP   hl   
1EEB   E5                     PUSH   hl   
1EEC   E5                     PUSH   hl   
1EED   CD 4E 0E               CALL   run   
1EF0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EFF   CD BF 0C               CALL   flushBuffer   
1F02   76                     HALT      
1F03                EXPECTM_2979S70:      
1F03   E1                     POP   HL   
1F04                          ;*Macro unroll:  test "1 2 3 + *", 5
1F04   31 00 50               LD   SP,STACK   
1F07   CD 7D 0D               CALL   coldInit   
1F0A   CD 60 4E               CALL   execStr   
1F0D   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1F17   CD BF 0C               CALL   flushBuffer   
1F1A   E1                     POP   HL   
1F1B   E5                     PUSH   HL   
1F1C   11 05 00               LD   DE,5   
1F1F   B7                     OR   A   
1F20   ED 52                  SBC   HL,DE   
1F22   7D                     LD   A,L   
1F23   B4                     OR   H   
1F24   CA 88 1F               JP   Z,expectM_2980S71   
1F27   CD 49 0D               CALL   printStr   
1F2A   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1F3A   CD 49 0D               CALL   printStr   
1F3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F4C   21 05 00               LD   hl,5   
1F4F   E5                     PUSH   hl   
1F50   E5                     PUSH   hl   
1F51   CD 4E 0E               CALL   run   
1F54   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F5C   CD BF 0C               CALL   flushBuffer   
1F5F   CD 49 0D               CALL   printStr   
1F62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F6F   E1                     POP   hl   
1F70   E5                     PUSH   hl   
1F71   E5                     PUSH   hl   
1F72   CD 4E 0E               CALL   run   
1F75   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F84   CD BF 0C               CALL   flushBuffer   
1F87   76                     HALT      
1F88                EXPECTM_2980S71:      
1F88   E1                     POP   HL   
1F89                          ;*Macro unroll:  test "7 3 /", 2
1F89   31 00 50               LD   SP,STACK   
1F8C   CD 7D 0D               CALL   coldInit   
1F8F   CD 60 4E               CALL   execStr   
1F92   37 20 33 20 2F 00      DB   "7 3 /",0   
1F98   CD BF 0C               CALL   flushBuffer   
1F9B   E1                     POP   HL   
1F9C   E5                     PUSH   HL   
1F9D   11 02 00               LD   DE,2   
1FA0   B7                     OR   A   
1FA1   ED 52                  SBC   HL,DE   
1FA3   7D                     LD   A,L   
1FA4   B4                     OR   H   
1FA5   CA 05 20               JP   Z,expectM_2981S72   
1FA8   CD 49 0D               CALL   printStr   
1FAB   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1FB7   CD 49 0D               CALL   printStr   
1FBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FC9   21 02 00               LD   hl,2   
1FCC   E5                     PUSH   hl   
1FCD   E5                     PUSH   hl   
1FCE   CD 4E 0E               CALL   run   
1FD1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FD9   CD BF 0C               CALL   flushBuffer   
1FDC   CD 49 0D               CALL   printStr   
1FDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FEC   E1                     POP   hl   
1FED   E5                     PUSH   hl   
1FEE   E5                     PUSH   hl   
1FEF   CD 4E 0E               CALL   run   
1FF2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2001   CD BF 0C               CALL   flushBuffer   
2004   76                     HALT      
2005                EXPECTM_2981S72:      
2005   E1                     POP   HL   
2006                          ;*Macro unroll:  test "100a= 1a+= a", 101
2006   31 00 50               LD   SP,STACK   
2009   CD 7D 0D               CALL   coldInit   
200C   CD 60 4E               CALL   execStr   
200F   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
201C   CD BF 0C               CALL   flushBuffer   
201F   E1                     POP   HL   
2020   E5                     PUSH   HL   
2021   11 65 00               LD   DE,101   
2024   B7                     OR   A   
2025   ED 52                  SBC   HL,DE   
2027   7D                     LD   A,L   
2028   B4                     OR   H   
2029   CA 90 20               JP   Z,expectM_2982S73   
202C   CD 49 0D               CALL   printStr   
202F   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2042   CD 49 0D               CALL   printStr   
2045   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2054   21 65 00               LD   hl,101   
2057   E5                     PUSH   hl   
2058   E5                     PUSH   hl   
2059   CD 4E 0E               CALL   run   
205C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2064   CD BF 0C               CALL   flushBuffer   
2067   CD 49 0D               CALL   printStr   
206A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2077   E1                     POP   hl   
2078   E5                     PUSH   hl   
2079   E5                     PUSH   hl   
207A   CD 4E 0E               CALL   run   
207D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
208C   CD BF 0C               CALL   flushBuffer   
208F   76                     HALT      
2090                EXPECTM_2982S73:      
2090   E1                     POP   HL   
2091                          ;*Macro unroll:  test "100a= a1-= a", 99
2091   31 00 50               LD   SP,STACK   
2094   CD 7D 0D               CALL   coldInit   
2097   CD 60 4E               CALL   execStr   
209A   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
20A7   CD BF 0C               CALL   flushBuffer   
20AA   E1                     POP   HL   
20AB   E5                     PUSH   HL   
20AC   11 63 00               LD   DE,99   
20AF   B7                     OR   A   
20B0   ED 52                  SBC   HL,DE   
20B2   7D                     LD   A,L   
20B3   B4                     OR   H   
20B4   CA 1B 21               JP   Z,expectM_2983S74   
20B7   CD 49 0D               CALL   printStr   
20BA   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
20CD   CD 49 0D               CALL   printStr   
20D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20DF   21 63 00               LD   hl,99   
20E2   E5                     PUSH   hl   
20E3   E5                     PUSH   hl   
20E4   CD 4E 0E               CALL   run   
20E7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20EF   CD BF 0C               CALL   flushBuffer   
20F2   CD 49 0D               CALL   printStr   
20F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2102   E1                     POP   hl   
2103   E5                     PUSH   hl   
2104   E5                     PUSH   hl   
2105   CD 4E 0E               CALL   run   
2108   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2117   CD BF 0C               CALL   flushBuffer   
211A   76                     HALT      
211B                EXPECTM_2983S74:      
211B   E1                     POP   HL   
211C                          ;*Macro unroll:  test "100a= a2*= a", 200
211C   31 00 50               LD   SP,STACK   
211F   CD 7D 0D               CALL   coldInit   
2122   CD 60 4E               CALL   execStr   
2125   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2132   CD BF 0C               CALL   flushBuffer   
2135   E1                     POP   HL   
2136   E5                     PUSH   HL   
2137   11 C8 00               LD   DE,200   
213A   B7                     OR   A   
213B   ED 52                  SBC   HL,DE   
213D   7D                     LD   A,L   
213E   B4                     OR   H   
213F   CA A6 21               JP   Z,expectM_2984S75   
2142   CD 49 0D               CALL   printStr   
2145   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2158   CD 49 0D               CALL   printStr   
215B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
216A   21 C8 00               LD   hl,200   
216D   E5                     PUSH   hl   
216E   E5                     PUSH   hl   
216F   CD 4E 0E               CALL   run   
2172   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
217A   CD BF 0C               CALL   flushBuffer   
217D   CD 49 0D               CALL   printStr   
2180   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
218D   E1                     POP   hl   
218E   E5                     PUSH   hl   
218F   E5                     PUSH   hl   
2190   CD 4E 0E               CALL   run   
2193   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21A2   CD BF 0C               CALL   flushBuffer   
21A5   76                     HALT      
21A6                EXPECTM_2984S75:      
21A6   E1                     POP   HL   
21A7                          ;*Macro unroll:  test "100a= a2/= a", 50
21A7   31 00 50               LD   SP,STACK   
21AA   CD 7D 0D               CALL   coldInit   
21AD   CD 60 4E               CALL   execStr   
21B0   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
21BD   CD BF 0C               CALL   flushBuffer   
21C0   E1                     POP   HL   
21C1   E5                     PUSH   HL   
21C2   11 32 00               LD   DE,50   
21C5   B7                     OR   A   
21C6   ED 52                  SBC   HL,DE   
21C8   7D                     LD   A,L   
21C9   B4                     OR   H   
21CA   CA 31 22               JP   Z,expectM_2985S76   
21CD   CD 49 0D               CALL   printStr   
21D0   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
21E3   CD 49 0D               CALL   printStr   
21E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F5   21 32 00               LD   hl,50   
21F8   E5                     PUSH   hl   
21F9   E5                     PUSH   hl   
21FA   CD 4E 0E               CALL   run   
21FD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2205   CD BF 0C               CALL   flushBuffer   
2208   CD 49 0D               CALL   printStr   
220B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2218   E1                     POP   hl   
2219   E5                     PUSH   hl   
221A   E5                     PUSH   hl   
221B   CD 4E 0E               CALL   run   
221E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
222D   CD BF 0C               CALL   flushBuffer   
2230   76                     HALT      
2231                EXPECTM_2985S76:      
2231   E1                     POP   HL   
2232                          ;*Macro unroll:  test "7 3 / /re", 1
2232   31 00 50               LD   SP,STACK   
2235   CD 7D 0D               CALL   coldInit   
2238   CD 60 4E               CALL   execStr   
223B   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2245   CD BF 0C               CALL   flushBuffer   
2248   E1                     POP   HL   
2249   E5                     PUSH   HL   
224A   11 01 00               LD   DE,1   
224D   B7                     OR   A   
224E   ED 52                  SBC   HL,DE   
2250   7D                     LD   A,L   
2251   B4                     OR   H   
2252   CA B6 22               JP   Z,expectM_2986S77   
2255   CD 49 0D               CALL   printStr   
2258   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2268   CD 49 0D               CALL   printStr   
226B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
227A   21 01 00               LD   hl,1   
227D   E5                     PUSH   hl   
227E   E5                     PUSH   hl   
227F   CD 4E 0E               CALL   run   
2282   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
228A   CD BF 0C               CALL   flushBuffer   
228D   CD 49 0D               CALL   printStr   
2290   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
229D   E1                     POP   hl   
229E   E5                     PUSH   hl   
229F   E5                     PUSH   hl   
22A0   CD 4E 0E               CALL   run   
22A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22B2   CD BF 0C               CALL   flushBuffer   
22B5   76                     HALT      
22B6                EXPECTM_2986S77:      
22B6   E1                     POP   HL   
22B7                          ;*Macro unroll:  test "7 3 /", 2
22B7   31 00 50               LD   SP,STACK   
22BA   CD 7D 0D               CALL   coldInit   
22BD   CD 60 4E               CALL   execStr   
22C0   37 20 33 20 2F 00      DB   "7 3 /",0   
22C6   CD BF 0C               CALL   flushBuffer   
22C9   E1                     POP   HL   
22CA   E5                     PUSH   HL   
22CB   11 02 00               LD   DE,2   
22CE   B7                     OR   A   
22CF   ED 52                  SBC   HL,DE   
22D1   7D                     LD   A,L   
22D2   B4                     OR   H   
22D3   CA 33 23               JP   Z,expectM_2987S78   
22D6   CD 49 0D               CALL   printStr   
22D9   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22E5   CD 49 0D               CALL   printStr   
22E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F7   21 02 00               LD   hl,2   
22FA   E5                     PUSH   hl   
22FB   E5                     PUSH   hl   
22FC   CD 4E 0E               CALL   run   
22FF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2307   CD BF 0C               CALL   flushBuffer   
230A   CD 49 0D               CALL   printStr   
230D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
231A   E1                     POP   hl   
231B   E5                     PUSH   hl   
231C   E5                     PUSH   hl   
231D   CD 4E 0E               CALL   run   
2320   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
232F   CD BF 0C               CALL   flushBuffer   
2332   76                     HALT      
2333                EXPECTM_2987S78:      
2333   E1                     POP   HL   
2334                          ;*Macro unroll:  test "2 3 ==", FALSE
2334   31 00 50               LD   SP,STACK   
2337   CD 7D 0D               CALL   coldInit   
233A   CD 60 4E               CALL   execStr   
233D   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2344   CD BF 0C               CALL   flushBuffer   
2347   E1                     POP   HL   
2348   E5                     PUSH   HL   
2349   11 00 00               LD   DE,FALSE   
234C   B7                     OR   A   
234D   ED 52                  SBC   HL,DE   
234F   7D                     LD   A,L   
2350   B4                     OR   H   
2351   CA B2 23               JP   Z,expectM_2988S79   
2354   CD 49 0D               CALL   printStr   
2357   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2364   CD 49 0D               CALL   printStr   
2367   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2376   21 00 00               LD   hl,FALSE   
2379   E5                     PUSH   hl   
237A   E5                     PUSH   hl   
237B   CD 4E 0E               CALL   run   
237E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2386   CD BF 0C               CALL   flushBuffer   
2389   CD 49 0D               CALL   printStr   
238C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2399   E1                     POP   hl   
239A   E5                     PUSH   hl   
239B   E5                     PUSH   hl   
239C   CD 4E 0E               CALL   run   
239F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23AE   CD BF 0C               CALL   flushBuffer   
23B1   76                     HALT      
23B2                EXPECTM_2988S79:      
23B2   E1                     POP   HL   
23B3                          ;*Macro unroll:  test "3 3 ==", TRUE
23B3   31 00 50               LD   SP,STACK   
23B6   CD 7D 0D               CALL   coldInit   
23B9   CD 60 4E               CALL   execStr   
23BC   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
23C3   CD BF 0C               CALL   flushBuffer   
23C6   E1                     POP   HL   
23C7   E5                     PUSH   HL   
23C8   11 FF FF               LD   DE,TRUE   
23CB   B7                     OR   A   
23CC   ED 52                  SBC   HL,DE   
23CE   7D                     LD   A,L   
23CF   B4                     OR   H   
23D0   CA 31 24               JP   Z,expectM_2989S80   
23D3   CD 49 0D               CALL   printStr   
23D6   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
23E3   CD 49 0D               CALL   printStr   
23E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23F5   21 FF FF               LD   hl,TRUE   
23F8   E5                     PUSH   hl   
23F9   E5                     PUSH   hl   
23FA   CD 4E 0E               CALL   run   
23FD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2405   CD BF 0C               CALL   flushBuffer   
2408   CD 49 0D               CALL   printStr   
240B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2418   E1                     POP   hl   
2419   E5                     PUSH   hl   
241A   E5                     PUSH   hl   
241B   CD 4E 0E               CALL   run   
241E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
242D   CD BF 0C               CALL   flushBuffer   
2430   76                     HALT      
2431                EXPECTM_2989S80:      
2431   E1                     POP   HL   
2432                          ;*Macro unroll:  test "1 2 <", TRUE
2432   31 00 50               LD   SP,STACK   
2435   CD 7D 0D               CALL   coldInit   
2438   CD 60 4E               CALL   execStr   
243B   31 20 32 20 3C 00      DB   "1 2 <",0   
2441   CD BF 0C               CALL   flushBuffer   
2444   E1                     POP   HL   
2445   E5                     PUSH   HL   
2446   11 FF FF               LD   DE,TRUE   
2449   B7                     OR   A   
244A   ED 52                  SBC   HL,DE   
244C   7D                     LD   A,L   
244D   B4                     OR   H   
244E   CA AE 24               JP   Z,expectM_2990S81   
2451   CD 49 0D               CALL   printStr   
2454   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2460   CD 49 0D               CALL   printStr   
2463   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2472   21 FF FF               LD   hl,TRUE   
2475   E5                     PUSH   hl   
2476   E5                     PUSH   hl   
2477   CD 4E 0E               CALL   run   
247A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2482   CD BF 0C               CALL   flushBuffer   
2485   CD 49 0D               CALL   printStr   
2488   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2495   E1                     POP   hl   
2496   E5                     PUSH   hl   
2497   E5                     PUSH   hl   
2498   CD 4E 0E               CALL   run   
249B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24AA   CD BF 0C               CALL   flushBuffer   
24AD   76                     HALT      
24AE                EXPECTM_2990S81:      
24AE   E1                     POP   HL   
24AF                          ;*Macro unroll:  test "2 1 <", FALSE
24AF   31 00 50               LD   SP,STACK   
24B2   CD 7D 0D               CALL   coldInit   
24B5   CD 60 4E               CALL   execStr   
24B8   32 20 31 20 3C 00      DB   "2 1 <",0   
24BE   CD BF 0C               CALL   flushBuffer   
24C1   E1                     POP   HL   
24C2   E5                     PUSH   HL   
24C3   11 00 00               LD   DE,FALSE   
24C6   B7                     OR   A   
24C7   ED 52                  SBC   HL,DE   
24C9   7D                     LD   A,L   
24CA   B4                     OR   H   
24CB   CA 2B 25               JP   Z,expectM_2991S82   
24CE   CD 49 0D               CALL   printStr   
24D1   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
24DD   CD 49 0D               CALL   printStr   
24E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24EF   21 00 00               LD   hl,FALSE   
24F2   E5                     PUSH   hl   
24F3   E5                     PUSH   hl   
24F4   CD 4E 0E               CALL   run   
24F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24FF   CD BF 0C               CALL   flushBuffer   
2502   CD 49 0D               CALL   printStr   
2505   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2512   E1                     POP   hl   
2513   E5                     PUSH   hl   
2514   E5                     PUSH   hl   
2515   CD 4E 0E               CALL   run   
2518   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2527   CD BF 0C               CALL   flushBuffer   
252A   76                     HALT      
252B                EXPECTM_2991S82:      
252B   E1                     POP   HL   
252C                          ;*Macro unroll:  test "2 3 <", TRUE
252C   31 00 50               LD   SP,STACK   
252F   CD 7D 0D               CALL   coldInit   
2532   CD 60 4E               CALL   execStr   
2535   32 20 33 20 3C 00      DB   "2 3 <",0   
253B   CD BF 0C               CALL   flushBuffer   
253E   E1                     POP   HL   
253F   E5                     PUSH   HL   
2540   11 FF FF               LD   DE,TRUE   
2543   B7                     OR   A   
2544   ED 52                  SBC   HL,DE   
2546   7D                     LD   A,L   
2547   B4                     OR   H   
2548   CA A8 25               JP   Z,expectM_2992S83   
254B   CD 49 0D               CALL   printStr   
254E   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
255A   CD 49 0D               CALL   printStr   
255D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
256C   21 FF FF               LD   hl,TRUE   
256F   E5                     PUSH   hl   
2570   E5                     PUSH   hl   
2571   CD 4E 0E               CALL   run   
2574   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
257C   CD BF 0C               CALL   flushBuffer   
257F   CD 49 0D               CALL   printStr   
2582   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
258F   E1                     POP   hl   
2590   E5                     PUSH   hl   
2591   E5                     PUSH   hl   
2592   CD 4E 0E               CALL   run   
2595   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25A4   CD BF 0C               CALL   flushBuffer   
25A7   76                     HALT      
25A8                EXPECTM_2992S83:      
25A8   E1                     POP   HL   
25A9                          ;*Macro unroll:  test "3 3 <", FALSE
25A9   31 00 50               LD   SP,STACK   
25AC   CD 7D 0D               CALL   coldInit   
25AF   CD 60 4E               CALL   execStr   
25B2   33 20 33 20 3C 00      DB   "3 3 <",0   
25B8   CD BF 0C               CALL   flushBuffer   
25BB   E1                     POP   HL   
25BC   E5                     PUSH   HL   
25BD   11 00 00               LD   DE,FALSE   
25C0   B7                     OR   A   
25C1   ED 52                  SBC   HL,DE   
25C3   7D                     LD   A,L   
25C4   B4                     OR   H   
25C5   CA 25 26               JP   Z,expectM_2993S84   
25C8   CD 49 0D               CALL   printStr   
25CB   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
25D7   CD 49 0D               CALL   printStr   
25DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25E9   21 00 00               LD   hl,FALSE   
25EC   E5                     PUSH   hl   
25ED   E5                     PUSH   hl   
25EE   CD 4E 0E               CALL   run   
25F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25F9   CD BF 0C               CALL   flushBuffer   
25FC   CD 49 0D               CALL   printStr   
25FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
260C   E1                     POP   hl   
260D   E5                     PUSH   hl   
260E   E5                     PUSH   hl   
260F   CD 4E 0E               CALL   run   
2612   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2621   CD BF 0C               CALL   flushBuffer   
2624   76                     HALT      
2625                EXPECTM_2993S84:      
2625   E1                     POP   HL   
2626                          ;*Macro unroll:  test "1 2 >", FALSE
2626   31 00 50               LD   SP,STACK   
2629   CD 7D 0D               CALL   coldInit   
262C   CD 60 4E               CALL   execStr   
262F   31 20 32 20 3E 00      DB   "1 2 >",0   
2635   CD BF 0C               CALL   flushBuffer   
2638   E1                     POP   HL   
2639   E5                     PUSH   HL   
263A   11 00 00               LD   DE,FALSE   
263D   B7                     OR   A   
263E   ED 52                  SBC   HL,DE   
2640   7D                     LD   A,L   
2641   B4                     OR   H   
2642   CA A2 26               JP   Z,expectM_2994S85   
2645   CD 49 0D               CALL   printStr   
2648   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2654   CD 49 0D               CALL   printStr   
2657   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2666   21 00 00               LD   hl,FALSE   
2669   E5                     PUSH   hl   
266A   E5                     PUSH   hl   
266B   CD 4E 0E               CALL   run   
266E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2676   CD BF 0C               CALL   flushBuffer   
2679   CD 49 0D               CALL   printStr   
267C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2689   E1                     POP   hl   
268A   E5                     PUSH   hl   
268B   E5                     PUSH   hl   
268C   CD 4E 0E               CALL   run   
268F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
269E   CD BF 0C               CALL   flushBuffer   
26A1   76                     HALT      
26A2                EXPECTM_2994S85:      
26A2   E1                     POP   HL   
26A3                          ;*Macro unroll:  test "2 1 >", TRUE
26A3   31 00 50               LD   SP,STACK   
26A6   CD 7D 0D               CALL   coldInit   
26A9   CD 60 4E               CALL   execStr   
26AC   32 20 31 20 3E 00      DB   "2 1 >",0   
26B2   CD BF 0C               CALL   flushBuffer   
26B5   E1                     POP   HL   
26B6   E5                     PUSH   HL   
26B7   11 FF FF               LD   DE,TRUE   
26BA   B7                     OR   A   
26BB   ED 52                  SBC   HL,DE   
26BD   7D                     LD   A,L   
26BE   B4                     OR   H   
26BF   CA 1F 27               JP   Z,expectM_2995S86   
26C2   CD 49 0D               CALL   printStr   
26C5   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
26D1   CD 49 0D               CALL   printStr   
26D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E3   21 FF FF               LD   hl,TRUE   
26E6   E5                     PUSH   hl   
26E7   E5                     PUSH   hl   
26E8   CD 4E 0E               CALL   run   
26EB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26F3   CD BF 0C               CALL   flushBuffer   
26F6   CD 49 0D               CALL   printStr   
26F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2706   E1                     POP   hl   
2707   E5                     PUSH   hl   
2708   E5                     PUSH   hl   
2709   CD 4E 0E               CALL   run   
270C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
271B   CD BF 0C               CALL   flushBuffer   
271E   76                     HALT      
271F                EXPECTM_2995S86:      
271F   E1                     POP   HL   
2720                          ;*Macro unroll:  test "3 3 >", FALSE
2720   31 00 50               LD   SP,STACK   
2723   CD 7D 0D               CALL   coldInit   
2726   CD 60 4E               CALL   execStr   
2729   33 20 33 20 3E 00      DB   "3 3 >",0   
272F   CD BF 0C               CALL   flushBuffer   
2732   E1                     POP   HL   
2733   E5                     PUSH   HL   
2734   11 00 00               LD   DE,FALSE   
2737   B7                     OR   A   
2738   ED 52                  SBC   HL,DE   
273A   7D                     LD   A,L   
273B   B4                     OR   H   
273C   CA 9C 27               JP   Z,expectM_2996S87   
273F   CD 49 0D               CALL   printStr   
2742   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
274E   CD 49 0D               CALL   printStr   
2751   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2760   21 00 00               LD   hl,FALSE   
2763   E5                     PUSH   hl   
2764   E5                     PUSH   hl   
2765   CD 4E 0E               CALL   run   
2768   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2770   CD BF 0C               CALL   flushBuffer   
2773   CD 49 0D               CALL   printStr   
2776   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2783   E1                     POP   hl   
2784   E5                     PUSH   hl   
2785   E5                     PUSH   hl   
2786   CD 4E 0E               CALL   run   
2789   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2798   CD BF 0C               CALL   flushBuffer   
279B   76                     HALT      
279C                EXPECTM_2996S87:      
279C   E1                     POP   HL   
279D                          ;*Macro unroll:  test "4 3 >", TRUE
279D   31 00 50               LD   SP,STACK   
27A0   CD 7D 0D               CALL   coldInit   
27A3   CD 60 4E               CALL   execStr   
27A6   34 20 33 20 3E 00      DB   "4 3 >",0   
27AC   CD BF 0C               CALL   flushBuffer   
27AF   E1                     POP   HL   
27B0   E5                     PUSH   HL   
27B1   11 FF FF               LD   DE,TRUE   
27B4   B7                     OR   A   
27B5   ED 52                  SBC   HL,DE   
27B7   7D                     LD   A,L   
27B8   B4                     OR   H   
27B9   CA 19 28               JP   Z,expectM_2997S88   
27BC   CD 49 0D               CALL   printStr   
27BF   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
27CB   CD 49 0D               CALL   printStr   
27CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DD   21 FF FF               LD   hl,TRUE   
27E0   E5                     PUSH   hl   
27E1   E5                     PUSH   hl   
27E2   CD 4E 0E               CALL   run   
27E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27ED   CD BF 0C               CALL   flushBuffer   
27F0   CD 49 0D               CALL   printStr   
27F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2800   E1                     POP   hl   
2801   E5                     PUSH   hl   
2802   E5                     PUSH   hl   
2803   CD 4E 0E               CALL   run   
2806   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2815   CD BF 0C               CALL   flushBuffer   
2818   76                     HALT      
2819                EXPECTM_2997S88:      
2819   E1                     POP   HL   
281A                          ;*Macro unroll:  test "2 2 <=", TRUE
281A   31 00 50               LD   SP,STACK   
281D   CD 7D 0D               CALL   coldInit   
2820   CD 60 4E               CALL   execStr   
2823   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
282A   CD BF 0C               CALL   flushBuffer   
282D   E1                     POP   HL   
282E   E5                     PUSH   HL   
282F   11 FF FF               LD   DE,TRUE   
2832   B7                     OR   A   
2833   ED 52                  SBC   HL,DE   
2835   7D                     LD   A,L   
2836   B4                     OR   H   
2837   CA 98 28               JP   Z,expectM_2998S89   
283A   CD 49 0D               CALL   printStr   
283D   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
284A   CD 49 0D               CALL   printStr   
284D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285C   21 FF FF               LD   hl,TRUE   
285F   E5                     PUSH   hl   
2860   E5                     PUSH   hl   
2861   CD 4E 0E               CALL   run   
2864   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
286C   CD BF 0C               CALL   flushBuffer   
286F   CD 49 0D               CALL   printStr   
2872   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
287F   E1                     POP   hl   
2880   E5                     PUSH   hl   
2881   E5                     PUSH   hl   
2882   CD 4E 0E               CALL   run   
2885   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2894   CD BF 0C               CALL   flushBuffer   
2897   76                     HALT      
2898                EXPECTM_2998S89:      
2898   E1                     POP   HL   
2899                          ;*Macro unroll:  test "2 2 >=", TRUE
2899   31 00 50               LD   SP,STACK   
289C   CD 7D 0D               CALL   coldInit   
289F   CD 60 4E               CALL   execStr   
28A2   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
28A9   CD BF 0C               CALL   flushBuffer   
28AC   E1                     POP   HL   
28AD   E5                     PUSH   HL   
28AE   11 FF FF               LD   DE,TRUE   
28B1   B7                     OR   A   
28B2   ED 52                  SBC   HL,DE   
28B4   7D                     LD   A,L   
28B5   B4                     OR   H   
28B6   CA 17 29               JP   Z,expectM_2999S90   
28B9   CD 49 0D               CALL   printStr   
28BC   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
28C9   CD 49 0D               CALL   printStr   
28CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28DB   21 FF FF               LD   hl,TRUE   
28DE   E5                     PUSH   hl   
28DF   E5                     PUSH   hl   
28E0   CD 4E 0E               CALL   run   
28E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28EB   CD BF 0C               CALL   flushBuffer   
28EE   CD 49 0D               CALL   printStr   
28F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28FE   E1                     POP   hl   
28FF   E5                     PUSH   hl   
2900   E5                     PUSH   hl   
2901   CD 4E 0E               CALL   run   
2904   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2913   CD BF 0C               CALL   flushBuffer   
2916   76                     HALT      
2917                EXPECTM_2999S90:      
2917   E1                     POP   HL   
2918                          ;*Macro unroll:  test "3 1 <<", 6
2918   31 00 50               LD   SP,STACK   
291B   CD 7D 0D               CALL   coldInit   
291E   CD 60 4E               CALL   execStr   
2921   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2928   CD BF 0C               CALL   flushBuffer   
292B   E1                     POP   HL   
292C   E5                     PUSH   HL   
292D   11 06 00               LD   DE,6   
2930   B7                     OR   A   
2931   ED 52                  SBC   HL,DE   
2933   7D                     LD   A,L   
2934   B4                     OR   H   
2935   CA 96 29               JP   Z,expectM_3000S91   
2938   CD 49 0D               CALL   printStr   
293B   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2948   CD 49 0D               CALL   printStr   
294B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
295A   21 06 00               LD   hl,6   
295D   E5                     PUSH   hl   
295E   E5                     PUSH   hl   
295F   CD 4E 0E               CALL   run   
2962   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
296A   CD BF 0C               CALL   flushBuffer   
296D   CD 49 0D               CALL   printStr   
2970   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
297D   E1                     POP   hl   
297E   E5                     PUSH   hl   
297F   E5                     PUSH   hl   
2980   CD 4E 0E               CALL   run   
2983   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2992   CD BF 0C               CALL   flushBuffer   
2995   76                     HALT      
2996                EXPECTM_3000S91:      
2996   E1                     POP   HL   
2997                          ;*Macro unroll:  test "10 1 >>", 5
2997   31 00 50               LD   SP,STACK   
299A   CD 7D 0D               CALL   coldInit   
299D   CD 60 4E               CALL   execStr   
29A0   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
29A8   CD BF 0C               CALL   flushBuffer   
29AB   E1                     POP   HL   
29AC   E5                     PUSH   HL   
29AD   11 05 00               LD   DE,5   
29B0   B7                     OR   A   
29B1   ED 52                  SBC   HL,DE   
29B3   7D                     LD   A,L   
29B4   B4                     OR   H   
29B5   CA 17 2A               JP   Z,expectM_3001S92   
29B8   CD 49 0D               CALL   printStr   
29BB   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
29C9   CD 49 0D               CALL   printStr   
29CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29DB   21 05 00               LD   hl,5   
29DE   E5                     PUSH   hl   
29DF   E5                     PUSH   hl   
29E0   CD 4E 0E               CALL   run   
29E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29EB   CD BF 0C               CALL   flushBuffer   
29EE   CD 49 0D               CALL   printStr   
29F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29FE   E1                     POP   hl   
29FF   E5                     PUSH   hl   
2A00   E5                     PUSH   hl   
2A01   CD 4E 0E               CALL   run   
2A04   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A13   CD BF 0C               CALL   flushBuffer   
2A16   76                     HALT      
2A17                EXPECTM_3001S92:      
2A17   E1                     POP   HL   
2A18                          ;*Macro unroll:  test "1 x = x", 1
2A18   31 00 50               LD   SP,STACK   
2A1B   CD 7D 0D               CALL   coldInit   
2A1E   CD 60 4E               CALL   execStr   
2A21   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2A29   CD BF 0C               CALL   flushBuffer   
2A2C   E1                     POP   HL   
2A2D   E5                     PUSH   HL   
2A2E   11 01 00               LD   DE,1   
2A31   B7                     OR   A   
2A32   ED 52                  SBC   HL,DE   
2A34   7D                     LD   A,L   
2A35   B4                     OR   H   
2A36   CA 98 2A               JP   Z,expectM_3002S93   
2A39   CD 49 0D               CALL   printStr   
2A3C   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2A4A   CD 49 0D               CALL   printStr   
2A4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A5C   21 01 00               LD   hl,1   
2A5F   E5                     PUSH   hl   
2A60   E5                     PUSH   hl   
2A61   CD 4E 0E               CALL   run   
2A64   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A6C   CD BF 0C               CALL   flushBuffer   
2A6F   CD 49 0D               CALL   printStr   
2A72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A7F   E1                     POP   hl   
2A80   E5                     PUSH   hl   
2A81   E5                     PUSH   hl   
2A82   CD 4E 0E               CALL   run   
2A85   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A94   CD BF 0C               CALL   flushBuffer   
2A97   76                     HALT      
2A98                EXPECTM_3002S93:      
2A98   E1                     POP   HL   
2A99                          ;*Macro unroll:  test "1{}^", 1
2A99   31 00 50               LD   SP,STACK   
2A9C   CD 7D 0D               CALL   coldInit   
2A9F   CD 60 4E               CALL   execStr   
2AA2   31 7B 7D 5E 00         DB   "1{}^",0   
2AA7   CD BF 0C               CALL   flushBuffer   
2AAA   E1                     POP   HL   
2AAB   E5                     PUSH   HL   
2AAC   11 01 00               LD   DE,1   
2AAF   B7                     OR   A   
2AB0   ED 52                  SBC   HL,DE   
2AB2   7D                     LD   A,L   
2AB3   B4                     OR   H   
2AB4   CA 13 2B               JP   Z,expectM_3003S94   
2AB7   CD 49 0D               CALL   printStr   
2ABA   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2AC5   CD 49 0D               CALL   printStr   
2AC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AD7   21 01 00               LD   hl,1   
2ADA   E5                     PUSH   hl   
2ADB   E5                     PUSH   hl   
2ADC   CD 4E 0E               CALL   run   
2ADF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AE7   CD BF 0C               CALL   flushBuffer   
2AEA   CD 49 0D               CALL   printStr   
2AED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AFA   E1                     POP   hl   
2AFB   E5                     PUSH   hl   
2AFC   E5                     PUSH   hl   
2AFD   CD 4E 0E               CALL   run   
2B00   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B0F   CD BF 0C               CALL   flushBuffer   
2B12   76                     HALT      
2B13                EXPECTM_3003S94:      
2B13   E1                     POP   HL   
2B14                          ;*Macro unroll:  test "{1}^", 1
2B14   31 00 50               LD   SP,STACK   
2B17   CD 7D 0D               CALL   coldInit   
2B1A   CD 60 4E               CALL   execStr   
2B1D   7B 31 7D 5E 00         DB   "{1}^",0   
2B22   CD BF 0C               CALL   flushBuffer   
2B25   E1                     POP   HL   
2B26   E5                     PUSH   HL   
2B27   11 01 00               LD   DE,1   
2B2A   B7                     OR   A   
2B2B   ED 52                  SBC   HL,DE   
2B2D   7D                     LD   A,L   
2B2E   B4                     OR   H   
2B2F   CA 8E 2B               JP   Z,expectM_3004S95   
2B32   CD 49 0D               CALL   printStr   
2B35   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2B40   CD 49 0D               CALL   printStr   
2B43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B52   21 01 00               LD   hl,1   
2B55   E5                     PUSH   hl   
2B56   E5                     PUSH   hl   
2B57   CD 4E 0E               CALL   run   
2B5A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B62   CD BF 0C               CALL   flushBuffer   
2B65   CD 49 0D               CALL   printStr   
2B68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B75   E1                     POP   hl   
2B76   E5                     PUSH   hl   
2B77   E5                     PUSH   hl   
2B78   CD 4E 0E               CALL   run   
2B7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B8A   CD BF 0C               CALL   flushBuffer   
2B8D   76                     HALT      
2B8E                EXPECTM_3004S95:      
2B8E   E1                     POP   HL   
2B8F                          ;*Macro unroll:  test "{{1}^}^", 1
2B8F   31 00 50               LD   SP,STACK   
2B92   CD 7D 0D               CALL   coldInit   
2B95   CD 60 4E               CALL   execStr   
2B98   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2BA0   CD BF 0C               CALL   flushBuffer   
2BA3   E1                     POP   HL   
2BA4   E5                     PUSH   HL   
2BA5   11 01 00               LD   DE,1   
2BA8   B7                     OR   A   
2BA9   ED 52                  SBC   HL,DE   
2BAB   7D                     LD   A,L   
2BAC   B4                     OR   H   
2BAD   CA 0F 2C               JP   Z,expectM_3005S96   
2BB0   CD 49 0D               CALL   printStr   
2BB3   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2BC1   CD 49 0D               CALL   printStr   
2BC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BD3   21 01 00               LD   hl,1   
2BD6   E5                     PUSH   hl   
2BD7   E5                     PUSH   hl   
2BD8   CD 4E 0E               CALL   run   
2BDB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BE3   CD BF 0C               CALL   flushBuffer   
2BE6   CD 49 0D               CALL   printStr   
2BE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BF6   E1                     POP   hl   
2BF7   E5                     PUSH   hl   
2BF8   E5                     PUSH   hl   
2BF9   CD 4E 0E               CALL   run   
2BFC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C0B   CD BF 0C               CALL   flushBuffer   
2C0E   76                     HALT      
2C0F                EXPECTM_3005S96:      
2C0F   E1                     POP   HL   
2C10                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2C10   31 00 50               LD   SP,STACK   
2C13   CD 7D 0D               CALL   coldInit   
2C16   CD 60 4E               CALL   execStr   
2C19   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2C24   CD BF 0C               CALL   flushBuffer   
2C27   E1                     POP   HL   
2C28   E5                     PUSH   HL   
2C29   11 01 00               LD   DE,1   
2C2C   B7                     OR   A   
2C2D   ED 52                  SBC   HL,DE   
2C2F   7D                     LD   A,L   
2C30   B4                     OR   H   
2C31   CA 96 2C               JP   Z,expectM_3006S97   
2C34   CD 49 0D               CALL   printStr   
2C37   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2C48   CD 49 0D               CALL   printStr   
2C4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C5A   21 01 00               LD   hl,1   
2C5D   E5                     PUSH   hl   
2C5E   E5                     PUSH   hl   
2C5F   CD 4E 0E               CALL   run   
2C62   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C6A   CD BF 0C               CALL   flushBuffer   
2C6D   CD 49 0D               CALL   printStr   
2C70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C7D   E1                     POP   hl   
2C7E   E5                     PUSH   hl   
2C7F   E5                     PUSH   hl   
2C80   CD 4E 0E               CALL   run   
2C83   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C92   CD BF 0C               CALL   flushBuffer   
2C95   76                     HALT      
2C96                EXPECTM_3006S97:      
2C96   E1                     POP   HL   
2C97                          ;*Macro unroll:  test "5 /f{10} ?", 5
2C97   31 00 50               LD   SP,STACK   
2C9A   CD 7D 0D               CALL   coldInit   
2C9D   CD 60 4E               CALL   execStr   
2CA0   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2CAB   CD BF 0C               CALL   flushBuffer   
2CAE   E1                     POP   HL   
2CAF   E5                     PUSH   HL   
2CB0   11 05 00               LD   DE,5   
2CB3   B7                     OR   A   
2CB4   ED 52                  SBC   HL,DE   
2CB6   7D                     LD   A,L   
2CB7   B4                     OR   H   
2CB8   CA 1D 2D               JP   Z,expectM_3007S98   
2CBB   CD 49 0D               CALL   printStr   
2CBE   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2CCF   CD 49 0D               CALL   printStr   
2CD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CE1   21 05 00               LD   hl,5   
2CE4   E5                     PUSH   hl   
2CE5   E5                     PUSH   hl   
2CE6   CD 4E 0E               CALL   run   
2CE9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CF1   CD BF 0C               CALL   flushBuffer   
2CF4   CD 49 0D               CALL   printStr   
2CF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D04   E1                     POP   hl   
2D05   E5                     PUSH   hl   
2D06   E5                     PUSH   hl   
2D07   CD 4E 0E               CALL   run   
2D0A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D19   CD BF 0C               CALL   flushBuffer   
2D1C   76                     HALT      
2D1D                EXPECTM_3007S98:      
2D1D   E1                     POP   HL   
2D1E                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2D1E   31 00 50               LD   SP,STACK   
2D21   CD 7D 0D               CALL   coldInit   
2D24   CD 60 4E               CALL   execStr   
2D27   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2D34   CD BF 0C               CALL   flushBuffer   
2D37   E1                     POP   HL   
2D38   E5                     PUSH   HL   
2D39   11 0F 00               LD   DE,15   
2D3C   B7                     OR   A   
2D3D   ED 52                  SBC   HL,DE   
2D3F   7D                     LD   A,L   
2D40   B4                     OR   H   
2D41   CA A8 2D               JP   Z,expectM_3008S99   
2D44   CD 49 0D               CALL   printStr   
2D47   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2D5A   CD 49 0D               CALL   printStr   
2D5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D6C   21 0F 00               LD   hl,15   
2D6F   E5                     PUSH   hl   
2D70   E5                     PUSH   hl   
2D71   CD 4E 0E               CALL   run   
2D74   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D7C   CD BF 0C               CALL   flushBuffer   
2D7F   CD 49 0D               CALL   printStr   
2D82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D8F   E1                     POP   hl   
2D90   E5                     PUSH   hl   
2D91   E5                     PUSH   hl   
2D92   CD 4E 0E               CALL   run   
2D95   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DA4   CD BF 0C               CALL   flushBuffer   
2DA7   76                     HALT      
2DA8                EXPECTM_3008S99:      
2DA8   E1                     POP   HL   
2DA9                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2DA9   31 00 50               LD   SP,STACK   
2DAC   CD 7D 0D               CALL   coldInit   
2DAF   CD 60 4E               CALL   execStr   
2DB2   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2DC4   CD BF 0C               CALL   flushBuffer   
2DC7   E1                     POP   HL   
2DC8   E5                     PUSH   HL   
2DC9   11 15 00               LD   DE,21   
2DCC   B7                     OR   A   
2DCD   ED 52                  SBC   HL,DE   
2DCF   7D                     LD   A,L   
2DD0   B4                     OR   H   
2DD1   CA 3D 2E               JP   Z,expectM_3009S100   
2DD4   CD 49 0D               CALL   printStr   
2DD7   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2DEF   CD 49 0D               CALL   printStr   
2DF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E01   21 15 00               LD   hl,21   
2E04   E5                     PUSH   hl   
2E05   E5                     PUSH   hl   
2E06   CD 4E 0E               CALL   run   
2E09   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E11   CD BF 0C               CALL   flushBuffer   
2E14   CD 49 0D               CALL   printStr   
2E17   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E24   E1                     POP   hl   
2E25   E5                     PUSH   hl   
2E26   E5                     PUSH   hl   
2E27   CD 4E 0E               CALL   run   
2E2A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E39   CD BF 0C               CALL   flushBuffer   
2E3C   76                     HALT      
2E3D                EXPECTM_3009S100:      
2E3D   E1                     POP   HL   
2E3E                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2E3E   31 00 50               LD   SP,STACK   
2E41   CD 7D 0D               CALL   coldInit   
2E44   CD 60 4E               CALL   execStr   
2E47   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2E59   CD BF 0C               CALL   flushBuffer   
2E5C   E1                     POP   HL   
2E5D   E5                     PUSH   HL   
2E5E   11 0B 00               LD   DE,11   
2E61   B7                     OR   A   
2E62   ED 52                  SBC   HL,DE   
2E64   7D                     LD   A,L   
2E65   B4                     OR   H   
2E66   CA D2 2E               JP   Z,expectM_3010S101   
2E69   CD 49 0D               CALL   printStr   
2E6C   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2E84   CD 49 0D               CALL   printStr   
2E87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E96   21 0B 00               LD   hl,11   
2E99   E5                     PUSH   hl   
2E9A   E5                     PUSH   hl   
2E9B   CD 4E 0E               CALL   run   
2E9E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EA6   CD BF 0C               CALL   flushBuffer   
2EA9   CD 49 0D               CALL   printStr   
2EAC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EB9   E1                     POP   hl   
2EBA   E5                     PUSH   hl   
2EBB   E5                     PUSH   hl   
2EBC   CD 4E 0E               CALL   run   
2EBF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2ECE   CD BF 0C               CALL   flushBuffer   
2ED1   76                     HALT      
2ED2                EXPECTM_3010S101:      
2ED2   E1                     POP   HL   
2ED3                          ;*Macro unroll:  test "\\{2}^", 2
2ED3   31 00 50               LD   SP,STACK   
2ED6   CD 7D 0D               CALL   coldInit   
2ED9   CD 60 4E               CALL   execStr   
2EDC   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2EE2   CD BF 0C               CALL   flushBuffer   
2EE5   E1                     POP   HL   
2EE6   E5                     PUSH   HL   
2EE7   11 02 00               LD   DE,2   
2EEA   B7                     OR   A   
2EEB   ED 52                  SBC   HL,DE   
2EED   7D                     LD   A,L   
2EEE   B4                     OR   H   
2EEF   CA 4F 2F               JP   Z,expectM_3011S102   
2EF2   CD 49 0D               CALL   printStr   
2EF5   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2F01   CD 49 0D               CALL   printStr   
2F04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F13   21 02 00               LD   hl,2   
2F16   E5                     PUSH   hl   
2F17   E5                     PUSH   hl   
2F18   CD 4E 0E               CALL   run   
2F1B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F23   CD BF 0C               CALL   flushBuffer   
2F26   CD 49 0D               CALL   printStr   
2F29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F36   E1                     POP   hl   
2F37   E5                     PUSH   hl   
2F38   E5                     PUSH   hl   
2F39   CD 4E 0E               CALL   run   
2F3C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F4B   CD BF 0C               CALL   flushBuffer   
2F4E   76                     HALT      
2F4F                EXPECTM_3011S102:      
2F4F   E1                     POP   HL   
2F50                          ;*Macro unroll:  test "\\a{2}^", 2
2F50   31 00 50               LD   SP,STACK   
2F53   CD 7D 0D               CALL   coldInit   
2F56   CD 60 4E               CALL   execStr   
2F59   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2F60   CD BF 0C               CALL   flushBuffer   
2F63   E1                     POP   HL   
2F64   E5                     PUSH   HL   
2F65   11 02 00               LD   DE,2   
2F68   B7                     OR   A   
2F69   ED 52                  SBC   HL,DE   
2F6B   7D                     LD   A,L   
2F6C   B4                     OR   H   
2F6D   CA CE 2F               JP   Z,expectM_3012S103   
2F70   CD 49 0D               CALL   printStr   
2F73   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2F80   CD 49 0D               CALL   printStr   
2F83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F92   21 02 00               LD   hl,2   
2F95   E5                     PUSH   hl   
2F96   E5                     PUSH   hl   
2F97   CD 4E 0E               CALL   run   
2F9A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FA2   CD BF 0C               CALL   flushBuffer   
2FA5   CD 49 0D               CALL   printStr   
2FA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FB5   E1                     POP   hl   
2FB6   E5                     PUSH   hl   
2FB7   E5                     PUSH   hl   
2FB8   CD 4E 0E               CALL   run   
2FBB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FCA   CD BF 0C               CALL   flushBuffer   
2FCD   76                     HALT      
2FCE                EXPECTM_3012S103:      
2FCE   E1                     POP   HL   
2FCF                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2FCF   31 00 50               LD   SP,STACK   
2FD2   CD 7D 0D               CALL   coldInit   
2FD5   CD 60 4E               CALL   execStr   
2FD8   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2FE2   CD BF 0C               CALL   flushBuffer   
2FE5   E1                     POP   HL   
2FE6   E5                     PUSH   HL   
2FE7   11 05 00               LD   DE,5   
2FEA   B7                     OR   A   
2FEB   ED 52                  SBC   HL,DE   
2FED   7D                     LD   A,L   
2FEE   B4                     OR   H   
2FEF   CA 53 30               JP   Z,expectM_3013S104   
2FF2   CD 49 0D               CALL   printStr   
2FF5   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
3005   CD 49 0D               CALL   printStr   
3008   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3017   21 05 00               LD   hl,5   
301A   E5                     PUSH   hl   
301B   E5                     PUSH   hl   
301C   CD 4E 0E               CALL   run   
301F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3027   CD BF 0C               CALL   flushBuffer   
302A   CD 49 0D               CALL   printStr   
302D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
303A   E1                     POP   hl   
303B   E5                     PUSH   hl   
303C   E5                     PUSH   hl   
303D   CD 4E 0E               CALL   run   
3040   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
304F   CD BF 0C               CALL   flushBuffer   
3052   76                     HALT      
3053                EXPECTM_3013S104:      
3053   E1                     POP   HL   
3054                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3054   31 00 50               LD   SP,STACK   
3057   CD 7D 0D               CALL   coldInit   
305A   CD 60 4E               CALL   execStr   
305D   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
3069   CD BF 0C               CALL   flushBuffer   
306C   E1                     POP   HL   
306D   E5                     PUSH   HL   
306E   11 05 00               LD   DE,5   
3071   B7                     OR   A   
3072   ED 52                  SBC   HL,DE   
3074   7D                     LD   A,L   
3075   B4                     OR   H   
3076   CA DC 30               JP   Z,expectM_3014S105   
3079   CD 49 0D               CALL   printStr   
307C   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
308E   CD 49 0D               CALL   printStr   
3091   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30A0   21 05 00               LD   hl,5   
30A3   E5                     PUSH   hl   
30A4   E5                     PUSH   hl   
30A5   CD 4E 0E               CALL   run   
30A8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30B0   CD BF 0C               CALL   flushBuffer   
30B3   CD 49 0D               CALL   printStr   
30B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30C3   E1                     POP   hl   
30C4   E5                     PUSH   hl   
30C5   E5                     PUSH   hl   
30C6   CD 4E 0E               CALL   run   
30C9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30D8   CD BF 0C               CALL   flushBuffer   
30DB   76                     HALT      
30DC                EXPECTM_3014S105:      
30DC   E1                     POP   HL   
30DD                          ;*Macro unroll:  test "\\a{{2}^}^", 2
30DD   31 00 50               LD   SP,STACK   
30E0   CD 7D 0D               CALL   coldInit   
30E3   CD 60 4E               CALL   execStr   
30E6   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
30F0   CD BF 0C               CALL   flushBuffer   
30F3   E1                     POP   HL   
30F4   E5                     PUSH   HL   
30F5   11 02 00               LD   DE,2   
30F8   B7                     OR   A   
30F9   ED 52                  SBC   HL,DE   
30FB   7D                     LD   A,L   
30FC   B4                     OR   H   
30FD   CA 61 31               JP   Z,expectM_3015S106   
3100   CD 49 0D               CALL   printStr   
3103   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3113   CD 49 0D               CALL   printStr   
3116   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3125   21 02 00               LD   hl,2   
3128   E5                     PUSH   hl   
3129   E5                     PUSH   hl   
312A   CD 4E 0E               CALL   run   
312D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3135   CD BF 0C               CALL   flushBuffer   
3138   CD 49 0D               CALL   printStr   
313B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3148   E1                     POP   hl   
3149   E5                     PUSH   hl   
314A   E5                     PUSH   hl   
314B   CD 4E 0E               CALL   run   
314E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
315D   CD BF 0C               CALL   flushBuffer   
3160   76                     HALT      
3161                EXPECTM_3015S106:      
3161   E1                     POP   HL   
3162                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3162   31 00 50               LD   SP,STACK   
3165   CD 7D 0D               CALL   coldInit   
3168   CD 60 4E               CALL   execStr   
316B   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
317A   CD BF 0C               CALL   flushBuffer   
317D   E1                     POP   HL   
317E   E5                     PUSH   HL   
317F   11 05 00               LD   DE,5   
3182   B7                     OR   A   
3183   ED 52                  SBC   HL,DE   
3185   7D                     LD   A,L   
3186   B4                     OR   H   
3187   CA F0 31               JP   Z,expectM_3016S107   
318A   CD 49 0D               CALL   printStr   
318D   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
31A2   CD 49 0D               CALL   printStr   
31A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B4   21 05 00               LD   hl,5   
31B7   E5                     PUSH   hl   
31B8   E5                     PUSH   hl   
31B9   CD 4E 0E               CALL   run   
31BC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31C4   CD BF 0C               CALL   flushBuffer   
31C7   CD 49 0D               CALL   printStr   
31CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31D7   E1                     POP   hl   
31D8   E5                     PUSH   hl   
31D9   E5                     PUSH   hl   
31DA   CD 4E 0E               CALL   run   
31DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31EC   CD BF 0C               CALL   flushBuffer   
31EF   76                     HALT      
31F0                EXPECTM_3016S107:      
31F0   E1                     POP   HL   
31F1                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
31F1   31 00 50               LD   SP,STACK   
31F4   CD 7D 0D               CALL   coldInit   
31F7   CD 60 4E               CALL   execStr   
31FA   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
320A   CD BF 0C               CALL   flushBuffer   
320D   E1                     POP   HL   
320E   E5                     PUSH   HL   
320F   11 01 00               LD   DE,1   
3212   B7                     OR   A   
3213   ED 52                  SBC   HL,DE   
3215   7D                     LD   A,L   
3216   B4                     OR   H   
3217   CA 81 32               JP   Z,expectM_3017S108   
321A   CD 49 0D               CALL   printStr   
321D   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3233   CD 49 0D               CALL   printStr   
3236   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3245   21 01 00               LD   hl,1   
3248   E5                     PUSH   hl   
3249   E5                     PUSH   hl   
324A   CD 4E 0E               CALL   run   
324D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3255   CD BF 0C               CALL   flushBuffer   
3258   CD 49 0D               CALL   printStr   
325B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3268   E1                     POP   hl   
3269   E5                     PUSH   hl   
326A   E5                     PUSH   hl   
326B   CD 4E 0E               CALL   run   
326E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
327D   CD BF 0C               CALL   flushBuffer   
3280   76                     HALT      
3281                EXPECTM_3017S108:      
3281   E1                     POP   HL   
3282                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3282   31 00 50               LD   SP,STACK   
3285   CD 7D 0D               CALL   coldInit   
3288   CD 60 4E               CALL   execStr   
328B   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
329E   CD BF 0C               CALL   flushBuffer   
32A1   E1                     POP   HL   
32A2   E5                     PUSH   HL   
32A3   11 07 00               LD   DE,7   
32A6   B7                     OR   A   
32A7   ED 52                  SBC   HL,DE   
32A9   7D                     LD   A,L   
32AA   B4                     OR   H   
32AB   CA 18 33               JP   Z,expectM_3018S109   
32AE   CD 49 0D               CALL   printStr   
32B1   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
32CA   CD 49 0D               CALL   printStr   
32CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32DC   21 07 00               LD   hl,7   
32DF   E5                     PUSH   hl   
32E0   E5                     PUSH   hl   
32E1   CD 4E 0E               CALL   run   
32E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32EC   CD BF 0C               CALL   flushBuffer   
32EF   CD 49 0D               CALL   printStr   
32F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32FF   E1                     POP   hl   
3300   E5                     PUSH   hl   
3301   E5                     PUSH   hl   
3302   CD 4E 0E               CALL   run   
3305   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3314   CD BF 0C               CALL   flushBuffer   
3317   76                     HALT      
3318                EXPECTM_3018S109:      
3318   E1                     POP   HL   
3319                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3319   31 00 50               LD   SP,STACK   
331C   CD 7D 0D               CALL   coldInit   
331F   CD 60 4E               CALL   execStr   
3322   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3337   CD BF 0C               CALL   flushBuffer   
333A   E1                     POP   HL   
333B   E5                     PUSH   HL   
333C   11 06 00               LD   DE,6   
333F   B7                     OR   A   
3340   ED 52                  SBC   HL,DE   
3342   7D                     LD   A,L   
3343   B4                     OR   H   
3344   CA B3 33               JP   Z,expectM_3019S110   
3347   CD 49 0D               CALL   printStr   
334A   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3365   CD 49 0D               CALL   printStr   
3368   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3377   21 06 00               LD   hl,6   
337A   E5                     PUSH   hl   
337B   E5                     PUSH   hl   
337C   CD 4E 0E               CALL   run   
337F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3387   CD BF 0C               CALL   flushBuffer   
338A   CD 49 0D               CALL   printStr   
338D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
339A   E1                     POP   hl   
339B   E5                     PUSH   hl   
339C   E5                     PUSH   hl   
339D   CD 4E 0E               CALL   run   
33A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33AF   CD BF 0C               CALL   flushBuffer   
33B2   76                     HALT      
33B3                EXPECTM_3019S110:      
33B3   E1                     POP   HL   
33B4                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
33B4   31 00 50               LD   SP,STACK   
33B7   CD 7D 0D               CALL   coldInit   
33BA   CD 60 4E               CALL   execStr   
33BD   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
33CB   CD BF 0C               CALL   flushBuffer   
33CE   E1                     POP   HL   
33CF   E5                     PUSH   HL   
33D0   11 02 00               LD   DE,2   
33D3   B7                     OR   A   
33D4   ED 52                  SBC   HL,DE   
33D6   7D                     LD   A,L   
33D7   B4                     OR   H   
33D8   CA 40 34               JP   Z,expectM_3020S111   
33DB   CD 49 0D               CALL   printStr   
33DE   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
33F2   CD 49 0D               CALL   printStr   
33F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3404   21 02 00               LD   hl,2   
3407   E5                     PUSH   hl   
3408   E5                     PUSH   hl   
3409   CD 4E 0E               CALL   run   
340C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3414   CD BF 0C               CALL   flushBuffer   
3417   CD 49 0D               CALL   printStr   
341A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3427   E1                     POP   hl   
3428   E5                     PUSH   hl   
3429   E5                     PUSH   hl   
342A   CD 4E 0E               CALL   run   
342D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
343C   CD BF 0C               CALL   flushBuffer   
343F   76                     HALT      
3440                EXPECTM_3020S111:      
3440   E1                     POP   HL   
3441                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3441   31 00 50               LD   SP,STACK   
3444   CD 7D 0D               CALL   coldInit   
3447   CD 60 4E               CALL   execStr   
344A   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
345B   CD BF 0C               CALL   flushBuffer   
345E   E1                     POP   HL   
345F   E5                     PUSH   HL   
3460   11 01 00               LD   DE,1   
3463   B7                     OR   A   
3464   ED 52                  SBC   HL,DE   
3466   7D                     LD   A,L   
3467   B4                     OR   H   
3468   CA D3 34               JP   Z,expectM_3021S112   
346B   CD 49 0D               CALL   printStr   
346E   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3485   CD 49 0D               CALL   printStr   
3488   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3497   21 01 00               LD   hl,1   
349A   E5                     PUSH   hl   
349B   E5                     PUSH   hl   
349C   CD 4E 0E               CALL   run   
349F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34A7   CD BF 0C               CALL   flushBuffer   
34AA   CD 49 0D               CALL   printStr   
34AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34BA   E1                     POP   hl   
34BB   E5                     PUSH   hl   
34BC   E5                     PUSH   hl   
34BD   CD 4E 0E               CALL   run   
34C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34CF   CD BF 0C               CALL   flushBuffer   
34D2   76                     HALT      
34D3                EXPECTM_3021S112:      
34D3   E1                     POP   HL   
34D4                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
34D4   31 00 50               LD   SP,STACK   
34D7   CD 7D 0D               CALL   coldInit   
34DA   CD 60 4E               CALL   execStr   
34DD   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
34EF   CD BF 0C               CALL   flushBuffer   
34F2   E1                     POP   HL   
34F3   E5                     PUSH   HL   
34F4   11 02 00               LD   DE,2   
34F7   B7                     OR   A   
34F8   ED 52                  SBC   HL,DE   
34FA   7D                     LD   A,L   
34FB   B4                     OR   H   
34FC   CA 68 35               JP   Z,expectM_3022S113   
34FF   CD 49 0D               CALL   printStr   
3502   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
351A   CD 49 0D               CALL   printStr   
351D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
352C   21 02 00               LD   hl,2   
352F   E5                     PUSH   hl   
3530   E5                     PUSH   hl   
3531   CD 4E 0E               CALL   run   
3534   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
353C   CD BF 0C               CALL   flushBuffer   
353F   CD 49 0D               CALL   printStr   
3542   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
354F   E1                     POP   hl   
3550   E5                     PUSH   hl   
3551   E5                     PUSH   hl   
3552   CD 4E 0E               CALL   run   
3555   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3564   CD BF 0C               CALL   flushBuffer   
3567   76                     HALT      
3568                EXPECTM_3022S113:      
3568   E1                     POP   HL   
3569                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3569   31 00 50               LD   SP,STACK   
356C   CD 7D 0D               CALL   coldInit   
356F   CD 60 4E               CALL   execStr   
3572   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3585   CD BF 0C               CALL   flushBuffer   
3588   E1                     POP   HL   
3589   E5                     PUSH   HL   
358A   11 02 00               LD   DE,2   
358D   B7                     OR   A   
358E   ED 52                  SBC   HL,DE   
3590   7D                     LD   A,L   
3591   B4                     OR   H   
3592   CA FF 35               JP   Z,expectM_3023S114   
3595   CD 49 0D               CALL   printStr   
3598   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
35B1   CD 49 0D               CALL   printStr   
35B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35C3   21 02 00               LD   hl,2   
35C6   E5                     PUSH   hl   
35C7   E5                     PUSH   hl   
35C8   CD 4E 0E               CALL   run   
35CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35D3   CD BF 0C               CALL   flushBuffer   
35D6   CD 49 0D               CALL   printStr   
35D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35E6   E1                     POP   hl   
35E7   E5                     PUSH   hl   
35E8   E5                     PUSH   hl   
35E9   CD 4E 0E               CALL   run   
35EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35FB   CD BF 0C               CALL   flushBuffer   
35FE   76                     HALT      
35FF                EXPECTM_3023S114:      
35FF   E1                     POP   HL   
3600                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3600   31 00 50               LD   SP,STACK   
3603   CD 7D 0D               CALL   coldInit   
3606   CD 60 4E               CALL   execStr   
3609   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
361B   CD BF 0C               CALL   flushBuffer   
361E   E1                     POP   HL   
361F   E5                     PUSH   HL   
3620   11 02 00               LD   DE,2   
3623   B7                     OR   A   
3624   ED 52                  SBC   HL,DE   
3626   7D                     LD   A,L   
3627   B4                     OR   H   
3628   CA 94 36               JP   Z,expectM_3024S115   
362B   CD 49 0D               CALL   printStr   
362E   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3646   CD 49 0D               CALL   printStr   
3649   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3658   21 02 00               LD   hl,2   
365B   E5                     PUSH   hl   
365C   E5                     PUSH   hl   
365D   CD 4E 0E               CALL   run   
3660   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3668   CD BF 0C               CALL   flushBuffer   
366B   CD 49 0D               CALL   printStr   
366E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
367B   E1                     POP   hl   
367C   E5                     PUSH   hl   
367D   E5                     PUSH   hl   
367E   CD 4E 0E               CALL   run   
3681   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3690   CD BF 0C               CALL   flushBuffer   
3693   76                     HALT      
3694                EXPECTM_3024S115:      
3694   E1                     POP   HL   
3695                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3695   31 00 50               LD   SP,STACK   
3698   CD 7D 0D               CALL   coldInit   
369B   CD 60 4E               CALL   execStr   
369E   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
36B7   CD BF 0C               CALL   flushBuffer   
36BA   E1                     POP   HL   
36BB   E5                     PUSH   HL   
36BC   11 05 00               LD   DE,5   
36BF   B7                     OR   A   
36C0   ED 52                  SBC   HL,DE   
36C2   7D                     LD   A,L   
36C3   B4                     OR   H   
36C4   CA 37 37               JP   Z,expectM_3025S116   
36C7   CD 49 0D               CALL   printStr   
36CA   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
36E9   CD 49 0D               CALL   printStr   
36EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36FB   21 05 00               LD   hl,5   
36FE   E5                     PUSH   hl   
36FF   E5                     PUSH   hl   
3700   CD 4E 0E               CALL   run   
3703   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
370B   CD BF 0C               CALL   flushBuffer   
370E   CD 49 0D               CALL   printStr   
3711   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
371E   E1                     POP   hl   
371F   E5                     PUSH   hl   
3720   E5                     PUSH   hl   
3721   CD 4E 0E               CALL   run   
3724   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3733   CD BF 0C               CALL   flushBuffer   
3736   76                     HALT      
3737                EXPECTM_3025S116:      
3737   E1                     POP   HL   
3738                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3738   31 00 50               LD   SP,STACK   
373B   CD 7D 0D               CALL   coldInit   
373E   CD 60 4E               CALL   execStr   
3741   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3751   CD BF 0C               CALL   flushBuffer   
3754   E1                     POP   HL   
3755   E5                     PUSH   HL   
3756   11 02 00               LD   DE,2   
3759   B7                     OR   A   
375A   ED 52                  SBC   HL,DE   
375C   7D                     LD   A,L   
375D   B4                     OR   H   
375E   CA C8 37               JP   Z,expectM_3026S117   
3761   CD 49 0D               CALL   printStr   
3764   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
377A   CD 49 0D               CALL   printStr   
377D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
378C   21 02 00               LD   hl,2   
378F   E5                     PUSH   hl   
3790   E5                     PUSH   hl   
3791   CD 4E 0E               CALL   run   
3794   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
379C   CD BF 0C               CALL   flushBuffer   
379F   CD 49 0D               CALL   printStr   
37A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37AF   E1                     POP   hl   
37B0   E5                     PUSH   hl   
37B1   E5                     PUSH   hl   
37B2   CD 4E 0E               CALL   run   
37B5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37C4   CD BF 0C               CALL   flushBuffer   
37C7   76                     HALT      
37C8                EXPECTM_3026S117:      
37C8   E1                     POP   HL   
37C9                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
37C9   31 00 50               LD   SP,STACK   
37CC   CD 7D 0D               CALL   coldInit   
37CF   CD 60 4E               CALL   execStr   
37D2   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
37E9   CD BF 0C               CALL   flushBuffer   
37EC   E1                     POP   HL   
37ED   E5                     PUSH   HL   
37EE   11 64 00               LD   DE,100   
37F1   B7                     OR   A   
37F2   ED 52                  SBC   HL,DE   
37F4   7D                     LD   A,L   
37F5   B4                     OR   H   
37F6   CA 67 38               JP   Z,expectM_3027S118   
37F9   CD 49 0D               CALL   printStr   
37FC   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3819   CD 49 0D               CALL   printStr   
381C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
382B   21 64 00               LD   hl,100   
382E   E5                     PUSH   hl   
382F   E5                     PUSH   hl   
3830   CD 4E 0E               CALL   run   
3833   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
383B   CD BF 0C               CALL   flushBuffer   
383E   CD 49 0D               CALL   printStr   
3841   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
384E   E1                     POP   hl   
384F   E5                     PUSH   hl   
3850   E5                     PUSH   hl   
3851   CD 4E 0E               CALL   run   
3854   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3863   CD BF 0C               CALL   flushBuffer   
3866   76                     HALT      
3867                EXPECTM_3027S118:      
3867   E1                     POP   HL   
3868                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3868   31 00 50               LD   SP,STACK   
386B   CD 7D 0D               CALL   coldInit   
386E   CD 60 4E               CALL   execStr   
3871   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3889   CD BF 0C               CALL   flushBuffer   
388C   E1                     POP   HL   
388D   E5                     PUSH   HL   
388E   11 01 00               LD   DE,1   
3891   B7                     OR   A   
3892   ED 52                  SBC   HL,DE   
3894   7D                     LD   A,L   
3895   B4                     OR   H   
3896   CA 08 39               JP   Z,expectM_3028S119   
3899   CD 49 0D               CALL   printStr   
389C   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
38BA   CD 49 0D               CALL   printStr   
38BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38CC   21 01 00               LD   hl,1   
38CF   E5                     PUSH   hl   
38D0   E5                     PUSH   hl   
38D1   CD 4E 0E               CALL   run   
38D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38DC   CD BF 0C               CALL   flushBuffer   
38DF   CD 49 0D               CALL   printStr   
38E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38EF   E1                     POP   hl   
38F0   E5                     PUSH   hl   
38F1   E5                     PUSH   hl   
38F2   CD 4E 0E               CALL   run   
38F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3904   CD BF 0C               CALL   flushBuffer   
3907   76                     HALT      
3908                EXPECTM_3028S119:      
3908   E1                     POP   HL   
3909                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3909   31 00 50               LD   SP,STACK   
390C   CD 7D 0D               CALL   coldInit   
390F   CD 60 4E               CALL   execStr   
3912   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
392B   CD BF 0C               CALL   flushBuffer   
392E   E1                     POP   HL   
392F   E5                     PUSH   HL   
3930   11 02 00               LD   DE,2   
3933   B7                     OR   A   
3934   ED 52                  SBC   HL,DE   
3936   7D                     LD   A,L   
3937   B4                     OR   H   
3938   CA AB 39               JP   Z,expectM_3029S120   
393B   CD 49 0D               CALL   printStr   
393E   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
395D   CD 49 0D               CALL   printStr   
3960   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
396F   21 02 00               LD   hl,2   
3972   E5                     PUSH   hl   
3973   E5                     PUSH   hl   
3974   CD 4E 0E               CALL   run   
3977   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
397F   CD BF 0C               CALL   flushBuffer   
3982   CD 49 0D               CALL   printStr   
3985   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3992   E1                     POP   hl   
3993   E5                     PUSH   hl   
3994   E5                     PUSH   hl   
3995   CD 4E 0E               CALL   run   
3998   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39A7   CD BF 0C               CALL   flushBuffer   
39AA   76                     HALT      
39AB                EXPECTM_3029S120:      
39AB   E1                     POP   HL   
39AC                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
39AC   31 00 50               LD   SP,STACK   
39AF   CD 7D 0D               CALL   coldInit   
39B2   CD 60 4E               CALL   execStr   
39B5   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
39D3   CD BF 0C               CALL   flushBuffer   
39D6   E1                     POP   HL   
39D7   E5                     PUSH   HL   
39D8   11 0B 00               LD   DE,11   
39DB   B7                     OR   A   
39DC   ED 52                  SBC   HL,DE   
39DE   7D                     LD   A,L   
39DF   B4                     OR   H   
39E0   CA 58 3A               JP   Z,expectM_3030S121   
39E3   CD 49 0D               CALL   printStr   
39E6   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
3A0A   CD 49 0D               CALL   printStr   
3A0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A1C   21 0B 00               LD   hl,11   
3A1F   E5                     PUSH   hl   
3A20   E5                     PUSH   hl   
3A21   CD 4E 0E               CALL   run   
3A24   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A2C   CD BF 0C               CALL   flushBuffer   
3A2F   CD 49 0D               CALL   printStr   
3A32   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A3F   E1                     POP   hl   
3A40   E5                     PUSH   hl   
3A41   E5                     PUSH   hl   
3A42   CD 4E 0E               CALL   run   
3A45   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A54   CD BF 0C               CALL   flushBuffer   
3A57   76                     HALT      
3A58                EXPECTM_3030S121:      
3A58   E1                     POP   HL   
3A59                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3A59   31 00 50               LD   SP,STACK   
3A5C   CD 7D 0D               CALL   coldInit   
3A5F   CD 60 4E               CALL   execStr   
3A62   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3A80   CD BF 0C               CALL   flushBuffer   
3A83   E1                     POP   HL   
3A84   E5                     PUSH   HL   
3A85   11 15 00               LD   DE,21   
3A88   B7                     OR   A   
3A89   ED 52                  SBC   HL,DE   
3A8B   7D                     LD   A,L   
3A8C   B4                     OR   H   
3A8D   CA 05 3B               JP   Z,expectM_3031S122   
3A90   CD 49 0D               CALL   printStr   
3A93   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3AB7   CD 49 0D               CALL   printStr   
3ABA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AC9   21 15 00               LD   hl,21   
3ACC   E5                     PUSH   hl   
3ACD   E5                     PUSH   hl   
3ACE   CD 4E 0E               CALL   run   
3AD1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AD9   CD BF 0C               CALL   flushBuffer   
3ADC   CD 49 0D               CALL   printStr   
3ADF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AEC   E1                     POP   hl   
3AED   E5                     PUSH   hl   
3AEE   E5                     PUSH   hl   
3AEF   CD 4E 0E               CALL   run   
3AF2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B01   CD BF 0C               CALL   flushBuffer   
3B04   76                     HALT      
3B05                EXPECTM_3031S122:      
3B05   E1                     POP   HL   
3B06                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3B06   31 00 50               LD   SP,STACK   
3B09   CD 7D 0D               CALL   coldInit   
3B0C   CD 60 4E               CALL   execStr   
3B0F   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3B1D   CD BF 0C               CALL   flushBuffer   
3B20   E1                     POP   HL   
3B21   E5                     PUSH   HL   
3B22   11 14 00               LD   DE,20   
3B25   B7                     OR   A   
3B26   ED 52                  SBC   HL,DE   
3B28   7D                     LD   A,L   
3B29   B4                     OR   H   
3B2A   CA 92 3B               JP   Z,expectM_3032S123   
3B2D   CD 49 0D               CALL   printStr   
3B30   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3B44   CD 49 0D               CALL   printStr   
3B47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B56   21 14 00               LD   hl,20   
3B59   E5                     PUSH   hl   
3B5A   E5                     PUSH   hl   
3B5B   CD 4E 0E               CALL   run   
3B5E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B66   CD BF 0C               CALL   flushBuffer   
3B69   CD 49 0D               CALL   printStr   
3B6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B79   E1                     POP   hl   
3B7A   E5                     PUSH   hl   
3B7B   E5                     PUSH   hl   
3B7C   CD 4E 0E               CALL   run   
3B7F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B8E   CD BF 0C               CALL   flushBuffer   
3B91   76                     HALT      
3B92                EXPECTM_3032S123:      
3B92   E1                     POP   HL   
3B93                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
3B93   31 00 50               LD   SP,STACK   
3B96   CD 7D 0D               CALL   coldInit   
3B99   CD 60 4E               CALL   execStr   
3B9C   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3BAE   CD BF 0C               CALL   flushBuffer   
3BB1   E1                     POP   HL   
3BB2   E5                     PUSH   HL   
3BB3   11 04 00               LD   DE,4   
3BB6   B7                     OR   A   
3BB7   ED 52                  SBC   HL,DE   
3BB9   7D                     LD   A,L   
3BBA   B4                     OR   H   
3BBB   CA 27 3C               JP   Z,expectM_3033S124   
3BBE   CD 49 0D               CALL   printStr   
3BC1   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3BD9   CD 49 0D               CALL   printStr   
3BDC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BEB   21 04 00               LD   hl,4   
3BEE   E5                     PUSH   hl   
3BEF   E5                     PUSH   hl   
3BF0   CD 4E 0E               CALL   run   
3BF3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BFB   CD BF 0C               CALL   flushBuffer   
3BFE   CD 49 0D               CALL   printStr   
3C01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C0E   E1                     POP   hl   
3C0F   E5                     PUSH   hl   
3C10   E5                     PUSH   hl   
3C11   CD 4E 0E               CALL   run   
3C14   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C23   CD BF 0C               CALL   flushBuffer   
3C26   76                     HALT      
3C27                EXPECTM_3033S124:      
3C27   E1                     POP   HL   
3C28                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3C28   31 00 50               LD   SP,STACK   
3C2B   CD 7D 0D               CALL   coldInit   
3C2E   CD 60 4E               CALL   execStr   
3C31   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3C3F   CD BF 0C               CALL   flushBuffer   
3C42   E1                     POP   HL   
3C43   E5                     PUSH   HL   
3C44   11 02 00               LD   DE,2   
3C47   B7                     OR   A   
3C48   ED 52                  SBC   HL,DE   
3C4A   7D                     LD   A,L   
3C4B   B4                     OR   H   
3C4C   CA B4 3C               JP   Z,expectM_3034S125   
3C4F   CD 49 0D               CALL   printStr   
3C52   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3C66   CD 49 0D               CALL   printStr   
3C69   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C78   21 02 00               LD   hl,2   
3C7B   E5                     PUSH   hl   
3C7C   E5                     PUSH   hl   
3C7D   CD 4E 0E               CALL   run   
3C80   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C88   CD BF 0C               CALL   flushBuffer   
3C8B   CD 49 0D               CALL   printStr   
3C8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C9B   E1                     POP   hl   
3C9C   E5                     PUSH   hl   
3C9D   E5                     PUSH   hl   
3C9E   CD 4E 0E               CALL   run   
3CA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CB0   CD BF 0C               CALL   flushBuffer   
3CB3   76                     HALT      
3CB4                EXPECTM_3034S125:      
3CB4   E1                     POP   HL   
3CB5                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
3CB5   31 00 50               LD   SP,STACK   
3CB8   CD 7D 0D               CALL   coldInit   
3CBB   CD 60 4E               CALL   execStr   
3CBE   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
3CD2   CD BF 0C               CALL   flushBuffer   
3CD5   E1                     POP   HL   
3CD6   E5                     PUSH   HL   
3CD7   11 42 00               LD   DE,66   
3CDA   B7                     OR   A   
3CDB   ED 52                  SBC   HL,DE   
3CDD   7D                     LD   A,L   
3CDE   B4                     OR   H   
3CDF   CA 4D 3D               JP   Z,expectM_3035S126   
3CE2   CD 49 0D               CALL   printStr   
3CE5   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
3CFF   CD 49 0D               CALL   printStr   
3D02   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D11   21 42 00               LD   hl,66   
3D14   E5                     PUSH   hl   
3D15   E5                     PUSH   hl   
3D16   CD 4E 0E               CALL   run   
3D19   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D21   CD BF 0C               CALL   flushBuffer   
3D24   CD 49 0D               CALL   printStr   
3D27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D34   E1                     POP   hl   
3D35   E5                     PUSH   hl   
3D36   E5                     PUSH   hl   
3D37   CD 4E 0E               CALL   run   
3D3A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D49   CD BF 0C               CALL   flushBuffer   
3D4C   76                     HALT      
3D4D                EXPECTM_3035S126:      
3D4D   E1                     POP   HL   
3D4E                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3D4E   31 00 50               LD   SP,STACK   
3D51   CD 7D 0D               CALL   coldInit   
3D54   CD 60 4E               CALL   execStr   
3D57   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3D6B   CD BF 0C               CALL   flushBuffer   
3D6E   E1                     POP   HL   
3D6F   E5                     PUSH   HL   
3D70   11 0A 00               LD   DE,10   
3D73   B7                     OR   A   
3D74   ED 52                  SBC   HL,DE   
3D76   7D                     LD   A,L   
3D77   B4                     OR   H   
3D78   CA E6 3D               JP   Z,expectM_3036S127   
3D7B   CD 49 0D               CALL   printStr   
3D7E   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3D98   CD 49 0D               CALL   printStr   
3D9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DAA   21 0A 00               LD   hl,10   
3DAD   E5                     PUSH   hl   
3DAE   E5                     PUSH   hl   
3DAF   CD 4E 0E               CALL   run   
3DB2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DBA   CD BF 0C               CALL   flushBuffer   
3DBD   CD 49 0D               CALL   printStr   
3DC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DCD   E1                     POP   hl   
3DCE   E5                     PUSH   hl   
3DCF   E5                     PUSH   hl   
3DD0   CD 4E 0E               CALL   run   
3DD3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DE2   CD BF 0C               CALL   flushBuffer   
3DE5   76                     HALT      
3DE6                EXPECTM_3036S127:      
3DE6   E1                     POP   HL   
3DE7                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3DE7   31 00 50               LD   SP,STACK   
3DEA   CD 7D 0D               CALL   coldInit   
3DED   CD 60 4E               CALL   execStr   
3DF0   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3E0B   CD BF 0C               CALL   flushBuffer   
3E0E   E1                     POP   HL   
3E0F   E5                     PUSH   HL   
3E10   11 0A 00               LD   DE,10   
3E13   B7                     OR   A   
3E14   ED 52                  SBC   HL,DE   
3E16   7D                     LD   A,L   
3E17   B4                     OR   H   
3E18   CA 8D 3E               JP   Z,expectM_3037S128   
3E1B   CD 49 0D               CALL   printStr   
3E1E   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3E3F   CD 49 0D               CALL   printStr   
3E42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E51   21 0A 00               LD   hl,10   
3E54   E5                     PUSH   hl   
3E55   E5                     PUSH   hl   
3E56   CD 4E 0E               CALL   run   
3E59   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E61   CD BF 0C               CALL   flushBuffer   
3E64   CD 49 0D               CALL   printStr   
3E67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E74   E1                     POP   hl   
3E75   E5                     PUSH   hl   
3E76   E5                     PUSH   hl   
3E77   CD 4E 0E               CALL   run   
3E7A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E89   CD BF 0C               CALL   flushBuffer   
3E8C   76                     HALT      
3E8D                EXPECTM_3037S128:      
3E8D   E1                     POP   HL   
3E8E                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3E8E   31 00 50               LD   SP,STACK   
3E91   CD 7D 0D               CALL   coldInit   
3E94   CD 60 4E               CALL   execStr   
3E97   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3EB6   CD BF 0C               CALL   flushBuffer   
3EB9   E1                     POP   HL   
3EBA   E5                     PUSH   HL   
3EBB   11 0A 00               LD   DE,10   
3EBE   B7                     OR   A   
3EBF   ED 52                  SBC   HL,DE   
3EC1   7D                     LD   A,L   
3EC2   B4                     OR   H   
3EC3   CA 3C 3F               JP   Z,expectM_3038S129   
3EC6   CD 49 0D               CALL   printStr   
3EC9   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3EEE   CD 49 0D               CALL   printStr   
3EF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F00   21 0A 00               LD   hl,10   
3F03   E5                     PUSH   hl   
3F04   E5                     PUSH   hl   
3F05   CD 4E 0E               CALL   run   
3F08   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F10   CD BF 0C               CALL   flushBuffer   
3F13   CD 49 0D               CALL   printStr   
3F16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F23   E1                     POP   hl   
3F24   E5                     PUSH   hl   
3F25   E5                     PUSH   hl   
3F26   CD 4E 0E               CALL   run   
3F29   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F38   CD BF 0C               CALL   flushBuffer   
3F3B   76                     HALT      
3F3C                EXPECTM_3038S129:      
3F3C   E1                     POP   HL   
3F3D                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3F3D   31 00 50               LD   SP,STACK   
3F40   CD 7D 0D               CALL   coldInit   
3F43   CD 60 4E               CALL   execStr   
3F46   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3F65   CD BF 0C               CALL   flushBuffer   
3F68   E1                     POP   HL   
3F69   E5                     PUSH   HL   
3F6A   11 14 00               LD   DE,20   
3F6D   B7                     OR   A   
3F6E   ED 52                  SBC   HL,DE   
3F70   7D                     LD   A,L   
3F71   B4                     OR   H   
3F72   CA EB 3F               JP   Z,expectM_3039S130   
3F75   CD 49 0D               CALL   printStr   
3F78   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3F9D   CD 49 0D               CALL   printStr   
3FA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FAF   21 14 00               LD   hl,20   
3FB2   E5                     PUSH   hl   
3FB3   E5                     PUSH   hl   
3FB4   CD 4E 0E               CALL   run   
3FB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FBF   CD BF 0C               CALL   flushBuffer   
3FC2   CD 49 0D               CALL   printStr   
3FC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FD2   E1                     POP   hl   
3FD3   E5                     PUSH   hl   
3FD4   E5                     PUSH   hl   
3FD5   CD 4E 0E               CALL   run   
3FD8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FE7   CD BF 0C               CALL   flushBuffer   
3FEA   76                     HALT      
3FEB                EXPECTM_3039S130:      
3FEB   E1                     POP   HL   
3FEC                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3FEC   31 00 50               LD   SP,STACK   
3FEF   CD 7D 0D               CALL   coldInit   
3FF2   CD 60 4E               CALL   execStr   
3FF5   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
400D   CD BF 0C               CALL   flushBuffer   
4010   E1                     POP   HL   
4011   E5                     PUSH   HL   
4012   11 06 00               LD   DE,6   
4015   B7                     OR   A   
4016   ED 52                  SBC   HL,DE   
4018   7D                     LD   A,L   
4019   B4                     OR   H   
401A   CA 8C 40               JP   Z,expectM_3040S131   
401D   CD 49 0D               CALL   printStr   
4020   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
403E   CD 49 0D               CALL   printStr   
4041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4050   21 06 00               LD   hl,6   
4053   E5                     PUSH   hl   
4054   E5                     PUSH   hl   
4055   CD 4E 0E               CALL   run   
4058   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4060   CD BF 0C               CALL   flushBuffer   
4063   CD 49 0D               CALL   printStr   
4066   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4073   E1                     POP   hl   
4074   E5                     PUSH   hl   
4075   E5                     PUSH   hl   
4076   CD 4E 0E               CALL   run   
4079   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4088   CD BF 0C               CALL   flushBuffer   
408B   76                     HALT      
408C                EXPECTM_3040S131:      
408C   E1                     POP   HL   
408D                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
408D   31 00 50               LD   SP,STACK   
4090   CD 7D 0D               CALL   coldInit   
4093   CD 60 4E               CALL   execStr   
4096   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
40B1   CD BF 0C               CALL   flushBuffer   
40B4   E1                     POP   HL   
40B5   E5                     PUSH   HL   
40B6   11 02 00               LD   DE,2   
40B9   B7                     OR   A   
40BA   ED 52                  SBC   HL,DE   
40BC   7D                     LD   A,L   
40BD   B4                     OR   H   
40BE   CA 33 41               JP   Z,expectM_3041S132   
40C1   CD 49 0D               CALL   printStr   
40C4   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
40E5   CD 49 0D               CALL   printStr   
40E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40F7   21 02 00               LD   hl,2   
40FA   E5                     PUSH   hl   
40FB   E5                     PUSH   hl   
40FC   CD 4E 0E               CALL   run   
40FF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4107   CD BF 0C               CALL   flushBuffer   
410A   CD 49 0D               CALL   printStr   
410D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
411A   E1                     POP   hl   
411B   E5                     PUSH   hl   
411C   E5                     PUSH   hl   
411D   CD 4E 0E               CALL   run   
4120   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
412F   CD BF 0C               CALL   flushBuffer   
4132   76                     HALT      
4133                EXPECTM_3041S132:      
4133   E1                     POP   HL   
4134                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4134   31 00 50               LD   SP,STACK   
4137   CD 7D 0D               CALL   coldInit   
413A   CD 60 4E               CALL   execStr   
413D   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4163   CD BF 0C               CALL   flushBuffer   
4166   E1                     POP   HL   
4167   E5                     PUSH   HL   
4168   11 0A 00               LD   DE,10   
416B   B7                     OR   A   
416C   ED 52                  SBC   HL,DE   
416E   7D                     LD   A,L   
416F   B4                     OR   H   
4170   CA F0 41               JP   Z,expectM_3042S133   
4173   CD 49 0D               CALL   printStr   
4176   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
41A2   CD 49 0D               CALL   printStr   
41A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41B4   21 0A 00               LD   hl,10   
41B7   E5                     PUSH   hl   
41B8   E5                     PUSH   hl   
41B9   CD 4E 0E               CALL   run   
41BC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41C4   CD BF 0C               CALL   flushBuffer   
41C7   CD 49 0D               CALL   printStr   
41CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41D7   E1                     POP   hl   
41D8   E5                     PUSH   hl   
41D9   E5                     PUSH   hl   
41DA   CD 4E 0E               CALL   run   
41DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41EC   CD BF 0C               CALL   flushBuffer   
41EF   76                     HALT      
41F0                EXPECTM_3042S133:      
41F0   E1                     POP   HL   
41F1                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
41F1   31 00 50               LD   SP,STACK   
41F4   CD 7D 0D               CALL   coldInit   
41F7   CD 60 4E               CALL   execStr   
41FA   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4225   CD BF 0C               CALL   flushBuffer   
4228   E1                     POP   HL   
4229   E5                     PUSH   HL   
422A   11 06 00               LD   DE,6   
422D   B7                     OR   A   
422E   ED 52                  SBC   HL,DE   
4230   7D                     LD   A,L   
4231   B4                     OR   H   
4232   CA B7 42               JP   Z,expectM_3043S134   
4235   CD 49 0D               CALL   printStr   
4238   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4269   CD 49 0D               CALL   printStr   
426C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
427B   21 06 00               LD   hl,6   
427E   E5                     PUSH   hl   
427F   E5                     PUSH   hl   
4280   CD 4E 0E               CALL   run   
4283   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
428B   CD BF 0C               CALL   flushBuffer   
428E   CD 49 0D               CALL   printStr   
4291   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
429E   E1                     POP   hl   
429F   E5                     PUSH   hl   
42A0   E5                     PUSH   hl   
42A1   CD 4E 0E               CALL   run   
42A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42B3   CD BF 0C               CALL   flushBuffer   
42B6   76                     HALT      
42B7                EXPECTM_3043S134:      
42B7   E1                     POP   HL   
42B8                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
42B8   31 00 50               LD   SP,STACK   
42BB   CD 7D 0D               CALL   coldInit   
42BE   CD 60 4E               CALL   execStr   
42C1   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
42D5   CD BF 0C               CALL   flushBuffer   
42D8   E1                     POP   HL   
42D9   E5                     PUSH   HL   
42DA   11 03 00               LD   DE,3   
42DD   B7                     OR   A   
42DE   ED 52                  SBC   HL,DE   
42E0   7D                     LD   A,L   
42E1   B4                     OR   H   
42E2   CA 50 43               JP   Z,expectM_3044S135   
42E5   CD 49 0D               CALL   printStr   
42E8   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
4302   CD 49 0D               CALL   printStr   
4305   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4314   21 03 00               LD   hl,3   
4317   E5                     PUSH   hl   
4318   E5                     PUSH   hl   
4319   CD 4E 0E               CALL   run   
431C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4324   CD BF 0C               CALL   flushBuffer   
4327   CD 49 0D               CALL   printStr   
432A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4337   E1                     POP   hl   
4338   E5                     PUSH   hl   
4339   E5                     PUSH   hl   
433A   CD 4E 0E               CALL   run   
433D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
434C   CD BF 0C               CALL   flushBuffer   
434F   76                     HALT      
4350                EXPECTM_3044S135:      
4350   E1                     POP   HL   
4351                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4351   31 00 50               LD   SP,STACK   
4354   CD 7D 0D               CALL   coldInit   
4357   CD 60 4E               CALL   execStr   
435A   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
436E   CD BF 0C               CALL   flushBuffer   
4371   E1                     POP   HL   
4372   E5                     PUSH   HL   
4373   11 01 00               LD   DE,1   
4376   B7                     OR   A   
4377   ED 52                  SBC   HL,DE   
4379   7D                     LD   A,L   
437A   B4                     OR   H   
437B   CA E9 43               JP   Z,expectM_3045S136   
437E   CD 49 0D               CALL   printStr   
4381   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
439B   CD 49 0D               CALL   printStr   
439E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43AD   21 01 00               LD   hl,1   
43B0   E5                     PUSH   hl   
43B1   E5                     PUSH   hl   
43B2   CD 4E 0E               CALL   run   
43B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43BD   CD BF 0C               CALL   flushBuffer   
43C0   CD 49 0D               CALL   printStr   
43C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43D0   E1                     POP   hl   
43D1   E5                     PUSH   hl   
43D2   E5                     PUSH   hl   
43D3   CD 4E 0E               CALL   run   
43D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43E5   CD BF 0C               CALL   flushBuffer   
43E8   76                     HALT      
43E9                EXPECTM_3045S136:      
43E9   E1                     POP   HL   
43EA                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
43EA   31 00 50               LD   SP,STACK   
43ED   CD 7D 0D               CALL   coldInit   
43F0   CD 60 4E               CALL   execStr   
43F3   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
43FF   CD BF 0C               CALL   flushBuffer   
4402   E1                     POP   HL   
4403   E5                     PUSH   HL   
4404   11 00 00               LD   DE,NUL   
4407   B7                     OR   A   
4408   ED 52                  SBC   HL,DE   
440A   7D                     LD   A,L   
440B   B4                     OR   H   
440C   CA 72 44               JP   Z,expectM_3046S137   
440F   CD 49 0D               CALL   printStr   
4412   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4424   CD 49 0D               CALL   printStr   
4427   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4436   21 00 00               LD   hl,NUL   
4439   E5                     PUSH   hl   
443A   E5                     PUSH   hl   
443B   CD 4E 0E               CALL   run   
443E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4446   CD BF 0C               CALL   flushBuffer   
4449   CD 49 0D               CALL   printStr   
444C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4459   E1                     POP   hl   
445A   E5                     PUSH   hl   
445B   E5                     PUSH   hl   
445C   CD 4E 0E               CALL   run   
445F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
446E   CD BF 0C               CALL   flushBuffer   
4471   76                     HALT      
4472                EXPECTM_3046S137:      
4472   E1                     POP   HL   
4473                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4473   31 00 50               LD   SP,STACK   
4476   CD 7D 0D               CALL   coldInit   
4479   CD 60 4E               CALL   execStr   
447C   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4488   CD BF 0C               CALL   flushBuffer   
448B   E1                     POP   HL   
448C   E5                     PUSH   HL   
448D   11 00 00               LD   DE,NUL   
4490   B7                     OR   A   
4491   ED 52                  SBC   HL,DE   
4493   7D                     LD   A,L   
4494   B4                     OR   H   
4495   CA FB 44               JP   Z,expectM_3047S138   
4498   CD 49 0D               CALL   printStr   
449B   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
44AD   CD 49 0D               CALL   printStr   
44B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44BF   21 00 00               LD   hl,NUL   
44C2   E5                     PUSH   hl   
44C3   E5                     PUSH   hl   
44C4   CD 4E 0E               CALL   run   
44C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44CF   CD BF 0C               CALL   flushBuffer   
44D2   CD 49 0D               CALL   printStr   
44D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44E2   E1                     POP   hl   
44E3   E5                     PUSH   hl   
44E4   E5                     PUSH   hl   
44E5   CD 4E 0E               CALL   run   
44E8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44F7   CD BF 0C               CALL   flushBuffer   
44FA   76                     HALT      
44FB                EXPECTM_3047S138:      
44FB   E1                     POP   HL   
44FC                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
44FC   31 00 50               LD   SP,STACK   
44FF   CD 7D 0D               CALL   coldInit   
4502   CD 60 4E               CALL   execStr   
4505   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
4511   CD BF 0C               CALL   flushBuffer   
4514   E1                     POP   HL   
4515   E5                     PUSH   HL   
4516   11 00 00               LD   DE,NUL   
4519   B7                     OR   A   
451A   ED 52                  SBC   HL,DE   
451C   7D                     LD   A,L   
451D   B4                     OR   H   
451E   CA 84 45               JP   Z,expectM_3048S139   
4521   CD 49 0D               CALL   printStr   
4524   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4536   CD 49 0D               CALL   printStr   
4539   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4548   21 00 00               LD   hl,NUL   
454B   E5                     PUSH   hl   
454C   E5                     PUSH   hl   
454D   CD 4E 0E               CALL   run   
4550   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4558   CD BF 0C               CALL   flushBuffer   
455B   CD 49 0D               CALL   printStr   
455E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
456B   E1                     POP   hl   
456C   E5                     PUSH   hl   
456D   E5                     PUSH   hl   
456E   CD 4E 0E               CALL   run   
4571   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4580   CD BF 0C               CALL   flushBuffer   
4583   76                     HALT      
4584                EXPECTM_3048S139:      
4584   E1                     POP   HL   
4585                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4585   31 00 50               LD   SP,STACK   
4588   CD 7D 0D               CALL   coldInit   
458B   CD 60 4E               CALL   execStr   
458E   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
459A   CD BF 0C               CALL   flushBuffer   
459D   E1                     POP   HL   
459E   E5                     PUSH   HL   
459F   11 00 00               LD   DE,NUL   
45A2   B7                     OR   A   
45A3   ED 52                  SBC   HL,DE   
45A5   7D                     LD   A,L   
45A6   B4                     OR   H   
45A7   CA 0D 46               JP   Z,expectM_3049S140   
45AA   CD 49 0D               CALL   printStr   
45AD   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
45BF   CD 49 0D               CALL   printStr   
45C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45D1   21 00 00               LD   hl,NUL   
45D4   E5                     PUSH   hl   
45D5   E5                     PUSH   hl   
45D6   CD 4E 0E               CALL   run   
45D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45E1   CD BF 0C               CALL   flushBuffer   
45E4   CD 49 0D               CALL   printStr   
45E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45F4   E1                     POP   hl   
45F5   E5                     PUSH   hl   
45F6   E5                     PUSH   hl   
45F7   CD 4E 0E               CALL   run   
45FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4609   CD BF 0C               CALL   flushBuffer   
460C   76                     HALT      
460D                EXPECTM_3049S140:      
460D   E1                     POP   HL   
460E                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
460E   31 00 50               LD   SP,STACK   
4611   CD 7D 0D               CALL   coldInit   
4614   CD 60 4E               CALL   execStr   
4617   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
461F   CD BF 0C               CALL   flushBuffer   
4622   E1                     POP   HL   
4623   E5                     PUSH   HL   
4624   11 66 52               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4627   B7                     OR   A   
4628   ED 52                  SBC   HL,DE   
462A   7D                     LD   A,L   
462B   B4                     OR   H   
462C   CA 8E 46               JP   Z,expectM_3050S141   
462F   CD 49 0D               CALL   printStr   
4632   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4640   CD 49 0D               CALL   printStr   
4643   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4652   21 66 52               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4655   E5                     PUSH   hl   
4656   E5                     PUSH   hl   
4657   CD 4E 0E               CALL   run   
465A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4662   CD BF 0C               CALL   flushBuffer   
4665   CD 49 0D               CALL   printStr   
4668   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4675   E1                     POP   hl   
4676   E5                     PUSH   hl   
4677   E5                     PUSH   hl   
4678   CD 4E 0E               CALL   run   
467B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
468A   CD BF 0C               CALL   flushBuffer   
468D   76                     HALT      
468E                EXPECTM_3050S141:      
468E   E1                     POP   HL   
468F                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
468F   31 00 50               LD   SP,STACK   
4692   CD 7D 0D               CALL   coldInit   
4695   CD 60 4E               CALL   execStr   
4698   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
46A0   CD BF 0C               CALL   flushBuffer   
46A3   E1                     POP   HL   
46A4   E5                     PUSH   HL   
46A5   11 34 52               LD   DE,VARS + ("Z"-"A"+1)*2   
46A8   B7                     OR   A   
46A9   ED 52                  SBC   HL,DE   
46AB   7D                     LD   A,L   
46AC   B4                     OR   H   
46AD   CA 0F 47               JP   Z,expectM_3051S142   
46B0   CD 49 0D               CALL   printStr   
46B3   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
46C1   CD 49 0D               CALL   printStr   
46C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46D3   21 34 52               LD   hl,VARS + ("Z"-"A"+1)*2   
46D6   E5                     PUSH   hl   
46D7   E5                     PUSH   hl   
46D8   CD 4E 0E               CALL   run   
46DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46E3   CD BF 0C               CALL   flushBuffer   
46E6   CD 49 0D               CALL   printStr   
46E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46F6   E1                     POP   hl   
46F7   E5                     PUSH   hl   
46F8   E5                     PUSH   hl   
46F9   CD 4E 0E               CALL   run   
46FC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
470B   CD BF 0C               CALL   flushBuffer   
470E   76                     HALT      
470F                EXPECTM_3051S142:      
470F   E1                     POP   HL   
4710                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4710   31 00 50               LD   SP,STACK   
4713   CD 7D 0D               CALL   coldInit   
4716   CD 60 4E               CALL   execStr   
4719   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4721   CD BF 0C               CALL   flushBuffer   
4724   E1                     POP   HL   
4725   E5                     PUSH   HL   
4726   11 32 52               LD   DE,VARS + ("Z"-"A")*2   
4729   B7                     OR   A   
472A   ED 52                  SBC   HL,DE   
472C   7D                     LD   A,L   
472D   B4                     OR   H   
472E   CA 90 47               JP   Z,expectM_3052S143   
4731   CD 49 0D               CALL   printStr   
4734   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4742   CD 49 0D               CALL   printStr   
4745   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4754   21 32 52               LD   hl,VARS + ("Z"-"A")*2   
4757   E5                     PUSH   hl   
4758   E5                     PUSH   hl   
4759   CD 4E 0E               CALL   run   
475C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4764   CD BF 0C               CALL   flushBuffer   
4767   CD 49 0D               CALL   printStr   
476A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4777   E1                     POP   hl   
4778   E5                     PUSH   hl   
4779   E5                     PUSH   hl   
477A   CD 4E 0E               CALL   run   
477D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
478C   CD BF 0C               CALL   flushBuffer   
478F   76                     HALT      
4790                EXPECTM_3052S143:      
4790   E1                     POP   HL   
4791                          ;*Macro unroll:  test "'A' /ad", VARS
4791   31 00 50               LD   SP,STACK   
4794   CD 7D 0D               CALL   coldInit   
4797   CD 60 4E               CALL   execStr   
479A   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
47A2   CD BF 0C               CALL   flushBuffer   
47A5   E1                     POP   HL   
47A6   E5                     PUSH   HL   
47A7   11 00 52               LD   DE,VARS   
47AA   B7                     OR   A   
47AB   ED 52                  SBC   HL,DE   
47AD   7D                     LD   A,L   
47AE   B4                     OR   H   
47AF   CA 11 48               JP   Z,expectM_3053S144   
47B2   CD 49 0D               CALL   printStr   
47B5   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
47C3   CD 49 0D               CALL   printStr   
47C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47D5   21 00 52               LD   hl,VARS   
47D8   E5                     PUSH   hl   
47D9   E5                     PUSH   hl   
47DA   CD 4E 0E               CALL   run   
47DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47E5   CD BF 0C               CALL   flushBuffer   
47E8   CD 49 0D               CALL   printStr   
47EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47F8   E1                     POP   hl   
47F9   E5                     PUSH   hl   
47FA   E5                     PUSH   hl   
47FB   CD 4E 0E               CALL   run   
47FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
480D   CD BF 0C               CALL   flushBuffer   
4810   76                     HALT      
4811                EXPECTM_3053S144:      
4811   E1                     POP   HL   
4812                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
4812   31 00 50               LD   SP,STACK   
4815   CD 7D 0D               CALL   coldInit   
4818   CD 60 4E               CALL   execStr   
481B   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
4828   CD BF 0C               CALL   flushBuffer   
482B   E1                     POP   HL   
482C   E5                     PUSH   HL   
482D   11 2D 00               LD   DE,$2D   
4830   B7                     OR   A   
4831   ED 52                  SBC   HL,DE   
4833   7D                     LD   A,L   
4834   B4                     OR   H   
4835   CA 9C 48               JP   Z,expectM_3054S145   
4838   CD 49 0D               CALL   printStr   
483B   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
484E   CD 49 0D               CALL   printStr   
4851   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4860   21 2D 00               LD   hl,$2D   
4863   E5                     PUSH   hl   
4864   E5                     PUSH   hl   
4865   CD 4E 0E               CALL   run   
4868   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4870   CD BF 0C               CALL   flushBuffer   
4873   CD 49 0D               CALL   printStr   
4876   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4883   E1                     POP   hl   
4884   E5                     PUSH   hl   
4885   E5                     PUSH   hl   
4886   CD 4E 0E               CALL   run   
4889   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4898   CD BF 0C               CALL   flushBuffer   
489B   76                     HALT      
489C                EXPECTM_3054S145:      
489C   E1                     POP   HL   
489D                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
489D   31 00 50               LD   SP,STACK   
48A0   CD 7D 0D               CALL   coldInit   
48A3   CD 60 4E               CALL   execStr   
48A6   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
48B5   CD BF 0C               CALL   flushBuffer   
48B8   E1                     POP   HL   
48B9   E5                     PUSH   HL   
48BA   11 41 00               LD   DE,65   
48BD   B7                     OR   A   
48BE   ED 52                  SBC   HL,DE   
48C0   7D                     LD   A,L   
48C1   B4                     OR   H   
48C2   CA 2B 49               JP   Z,expectM_3055S146   
48C5   CD 49 0D               CALL   printStr   
48C8   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
48DD   CD 49 0D               CALL   printStr   
48E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48EF   21 41 00               LD   hl,65   
48F2   E5                     PUSH   hl   
48F3   E5                     PUSH   hl   
48F4   CD 4E 0E               CALL   run   
48F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48FF   CD BF 0C               CALL   flushBuffer   
4902   CD 49 0D               CALL   printStr   
4905   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4912   E1                     POP   hl   
4913   E5                     PUSH   hl   
4914   E5                     PUSH   hl   
4915   CD 4E 0E               CALL   run   
4918   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4927   CD BF 0C               CALL   flushBuffer   
492A   76                     HALT      
492B                EXPECTM_3055S146:      
492B   E1                     POP   HL   
492C                          ;*Macro unroll:  test "123. /b/vB 1#", $32
492C   31 00 50               LD   SP,STACK   
492F   CD 7D 0D               CALL   coldInit   
4932   CD 60 4E               CALL   execStr   
4935   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
4943   CD BF 0C               CALL   flushBuffer   
4946   E1                     POP   HL   
4947   E5                     PUSH   HL   
4948   11 32 00               LD   DE,$32   
494B   B7                     OR   A   
494C   ED 52                  SBC   HL,DE   
494E   7D                     LD   A,L   
494F   B4                     OR   H   
4950   CA B8 49               JP   Z,expectM_3056S147   
4953   CD 49 0D               CALL   printStr   
4956   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
496A   CD 49 0D               CALL   printStr   
496D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
497C   21 32 00               LD   hl,$32   
497F   E5                     PUSH   hl   
4980   E5                     PUSH   hl   
4981   CD 4E 0E               CALL   run   
4984   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
498C   CD BF 0C               CALL   flushBuffer   
498F   CD 49 0D               CALL   printStr   
4992   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
499F   E1                     POP   hl   
49A0   E5                     PUSH   hl   
49A1   E5                     PUSH   hl   
49A2   CD 4E 0E               CALL   run   
49A5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49B4   CD BF 0C               CALL   flushBuffer   
49B7   76                     HALT      
49B8                EXPECTM_3056S147:      
49B8   E1                     POP   HL   
49B9                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
49B9   31 00 50               LD   SP,STACK   
49BC   CD 7D 0D               CALL   coldInit   
49BF   CD 60 4E               CALL   execStr   
49C2   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
49CF   CD BF 0C               CALL   flushBuffer   
49D2   E1                     POP   HL   
49D3   E5                     PUSH   HL   
49D4   11 01 00               LD   DE,1   
49D7   B7                     OR   A   
49D8   ED 52                  SBC   HL,DE   
49DA   7D                     LD   A,L   
49DB   B4                     OR   H   
49DC   CA 43 4A               JP   Z,expectM_3057S148   
49DF   CD 49 0D               CALL   printStr   
49E2   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
49F5   CD 49 0D               CALL   printStr   
49F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A07   21 01 00               LD   hl,1   
4A0A   E5                     PUSH   hl   
4A0B   E5                     PUSH   hl   
4A0C   CD 4E 0E               CALL   run   
4A0F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A17   CD BF 0C               CALL   flushBuffer   
4A1A   CD 49 0D               CALL   printStr   
4A1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A2A   E1                     POP   hl   
4A2B   E5                     PUSH   hl   
4A2C   E5                     PUSH   hl   
4A2D   CD 4E 0E               CALL   run   
4A30   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A3F   CD BF 0C               CALL   flushBuffer   
4A42   76                     HALT      
4A43                EXPECTM_3057S148:      
4A43   E1                     POP   HL   
4A44                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4A44   31 00 50               LD   SP,STACK   
4A47   CD 7D 0D               CALL   coldInit   
4A4A   CD 60 4E               CALL   execStr   
4A4D   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4A61   CD BF 0C               CALL   flushBuffer   
4A64   E1                     POP   HL   
4A65   E5                     PUSH   HL   
4A66   11 03 00               LD   DE,3   
4A69   B7                     OR   A   
4A6A   ED 52                  SBC   HL,DE   
4A6C   7D                     LD   A,L   
4A6D   B4                     OR   H   
4A6E   CA DC 4A               JP   Z,expectM_3058S149   
4A71   CD 49 0D               CALL   printStr   
4A74   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4A8E   CD 49 0D               CALL   printStr   
4A91   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AA0   21 03 00               LD   hl,3   
4AA3   E5                     PUSH   hl   
4AA4   E5                     PUSH   hl   
4AA5   CD 4E 0E               CALL   run   
4AA8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AB0   CD BF 0C               CALL   flushBuffer   
4AB3   CD 49 0D               CALL   printStr   
4AB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AC3   E1                     POP   hl   
4AC4   E5                     PUSH   hl   
4AC5   E5                     PUSH   hl   
4AC6   CD 4E 0E               CALL   run   
4AC9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AD8   CD BF 0C               CALL   flushBuffer   
4ADB   76                     HALT      
4ADC                EXPECTM_3058S149:      
4ADC   E1                     POP   HL   
4ADD                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4ADD   31 00 50               LD   SP,STACK   
4AE0   CD 7D 0D               CALL   coldInit   
4AE3   CD 60 4E               CALL   execStr   
4AE6   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4AFD   CD BF 0C               CALL   flushBuffer   
4B00   E1                     POP   HL   
4B01   E5                     PUSH   HL   
4B02   11 02 00               LD   DE,2   
4B05   B7                     OR   A   
4B06   ED 52                  SBC   HL,DE   
4B08   7D                     LD   A,L   
4B09   B4                     OR   H   
4B0A   CA 7B 4B               JP   Z,expectM_3059S150   
4B0D   CD 49 0D               CALL   printStr   
4B10   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4B2D   CD 49 0D               CALL   printStr   
4B30   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B3F   21 02 00               LD   hl,2   
4B42   E5                     PUSH   hl   
4B43   E5                     PUSH   hl   
4B44   CD 4E 0E               CALL   run   
4B47   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B4F   CD BF 0C               CALL   flushBuffer   
4B52   CD 49 0D               CALL   printStr   
4B55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B62   E1                     POP   hl   
4B63   E5                     PUSH   hl   
4B64   E5                     PUSH   hl   
4B65   CD 4E 0E               CALL   run   
4B68   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B77   CD BF 0C               CALL   flushBuffer   
4B7A   76                     HALT      
4B7B                EXPECTM_3059S150:      
4B7B   E1                     POP   HL   
4B7C                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4B7C   31 00 50               LD   SP,STACK   
4B7F   CD 7D 0D               CALL   coldInit   
4B82   CD 60 4E               CALL   execStr   
4B85   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4BA8   CD BF 0C               CALL   flushBuffer   
4BAB   E1                     POP   HL   
4BAC   E5                     PUSH   HL   
4BAD   11 01 00               LD   DE,1   
4BB0   B7                     OR   A   
4BB1   ED 52                  SBC   HL,DE   
4BB3   7D                     LD   A,L   
4BB4   B4                     OR   H   
4BB5   CA 32 4C               JP   Z,expectM_3060S151   
4BB8   CD 49 0D               CALL   printStr   
4BBB   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4BE4   CD 49 0D               CALL   printStr   
4BE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BF6   21 01 00               LD   hl,1   
4BF9   E5                     PUSH   hl   
4BFA   E5                     PUSH   hl   
4BFB   CD 4E 0E               CALL   run   
4BFE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C06   CD BF 0C               CALL   flushBuffer   
4C09   CD 49 0D               CALL   printStr   
4C0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C19   E1                     POP   hl   
4C1A   E5                     PUSH   hl   
4C1B   E5                     PUSH   hl   
4C1C   CD 4E 0E               CALL   run   
4C1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C2E   CD BF 0C               CALL   flushBuffer   
4C31   76                     HALT      
4C32                EXPECTM_3060S151:      
4C32   E1                     POP   HL   
4C33                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4C33   31 00 50               LD   SP,STACK   
4C36   CD 7D 0D               CALL   coldInit   
4C39   CD 60 4E               CALL   execStr   
4C3C   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4C5F   CD BF 0C               CALL   flushBuffer   
4C62   E1                     POP   HL   
4C63   E5                     PUSH   HL   
4C64   11 01 00               LD   DE,1   
4C67   B7                     OR   A   
4C68   ED 52                  SBC   HL,DE   
4C6A   7D                     LD   A,L   
4C6B   B4                     OR   H   
4C6C   CA E9 4C               JP   Z,expectM_3061S152   
4C6F   CD 49 0D               CALL   printStr   
4C72   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4C9B   CD 49 0D               CALL   printStr   
4C9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CAD   21 01 00               LD   hl,1   
4CB0   E5                     PUSH   hl   
4CB1   E5                     PUSH   hl   
4CB2   CD 4E 0E               CALL   run   
4CB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4CBD   CD BF 0C               CALL   flushBuffer   
4CC0   CD 49 0D               CALL   printStr   
4CC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CD0   E1                     POP   hl   
4CD1   E5                     PUSH   hl   
4CD2   E5                     PUSH   hl   
4CD3   CD 4E 0E               CALL   run   
4CD6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CE5   CD BF 0C               CALL   flushBuffer   
4CE8   76                     HALT      
4CE9                EXPECTM_3061S152:      
4CE9   E1                     POP   HL   
4CEA                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4CEA   31 00 50               LD   SP,STACK   
4CED   CD 7D 0D               CALL   coldInit   
4CF0   CD 60 4E               CALL   execStr   
4CF3   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4D23   CD BF 0C               CALL   flushBuffer   
4D26   E1                     POP   HL   
4D27   E5                     PUSH   HL   
4D28   11 02 00               LD   DE,2   
4D2B   B7                     OR   A   
4D2C   ED 52                  SBC   HL,DE   
4D2E   7D                     LD   A,L   
4D2F   B4                     OR   H   
4D30   CA BA 4D               JP   Z,expectM_3062S153   
4D33   CD 49 0D               CALL   printStr   
4D36   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4D6C   CD 49 0D               CALL   printStr   
4D6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D7E   21 02 00               LD   hl,2   
4D81   E5                     PUSH   hl   
4D82   E5                     PUSH   hl   
4D83   CD 4E 0E               CALL   run   
4D86   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D8E   CD BF 0C               CALL   flushBuffer   
4D91   CD 49 0D               CALL   printStr   
4D94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DA1   E1                     POP   hl   
4DA2   E5                     PUSH   hl   
4DA3   E5                     PUSH   hl   
4DA4   CD 4E 0E               CALL   run   
4DA7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4DB6   CD BF 0C               CALL   flushBuffer   
4DB9   76                     HALT      
4DBA                EXPECTM_3062S153:      
4DBA   E1                     POP   HL   
4DBB                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4DBB   31 00 50               LD   SP,STACK   
4DBE   CD 7D 0D               CALL   coldInit   
4DC1   CD 60 4E               CALL   execStr   
4DC4   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4DD9   CD BF 0C               CALL   flushBuffer   
4DDC   E1                     POP   HL   
4DDD   E5                     PUSH   HL   
4DDE   11 02 00               LD   DE,2   
4DE1   B7                     OR   A   
4DE2   ED 52                  SBC   HL,DE   
4DE4   7D                     LD   A,L   
4DE5   B4                     OR   H   
4DE6   CA 55 4E               JP   Z,expectM_3063S154   
4DE9   CD 49 0D               CALL   printStr   
4DEC   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4E07   CD 49 0D               CALL   printStr   
4E0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E19   21 02 00               LD   hl,2   
4E1C   E5                     PUSH   hl   
4E1D   E5                     PUSH   hl   
4E1E   CD 4E 0E               CALL   run   
4E21   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E29   CD BF 0C               CALL   flushBuffer   
4E2C   CD 49 0D               CALL   printStr   
4E2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E3C   E1                     POP   hl   
4E3D   E5                     PUSH   hl   
4E3E   E5                     PUSH   hl   
4E3F   CD 4E 0E               CALL   run   
4E42   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E51   CD BF 0C               CALL   flushBuffer   
4E54   76                     HALT      
4E55                EXPECTM_3063S154:      
4E55   E1                     POP   HL   
4E56                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
4E56                             ; 
4E56   CD 49 0D               CALL   printStr   
4E59   44 6F 6E 65 21 00      .CSTR   "Done!"   
4E5F   76                     HALT      
4E60                             ; executes a null teminated string (null executes exit_)
4E60                             ; the string should be immedaitely following the call
4E60                EXECSTR:      ; create a root stack frame
4E60   C1                     POP   bc   ; bc = code*
4E61   0B                     DEC   bc   ; dec to prepare for next routine
4E62   11 00 00               LD   de,0   
4E65   D5                     PUSH   de   ; push fake IP
4E66   D5                     PUSH   de   ; push null arg_list*
4E67   D5                     PUSH   de   ; push null first_arg*
4E68   D5                     PUSH   de   ; push fake BP
4E69   DD E9                  JP   (ix)   
4E6B                STKSIZE:   EQU   $100   ; Stack size
4E6B                TIBSIZE:   EQU   $100   ; 256 bytes
4E6B                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4E6B                          ALIGN   $100   
4F00                          DS   STKSIZE   
5000                STACK:       
5000                          ALIGN   $100   
5000                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5100                          ALIGN   $100   
5100                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5200                          ALIGN   $100   
5200                VARS:        
5200                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
52D0                RESTARTS:      
52D0                RST08:    DS   2   
52D2                RST10:    DS   2   
52D4                RST18:    DS   2   
52D6                RST20:    DS   2   
52D8                RST28:    DS   2   
52DA                RST30:    DS   2   ; 
52DC                BAUD:     DS   2   ; 
52DE                INTVEC:   DS   2   ; 
52E0                NMIVEC:   DS   2   ; 
52E2                GETCVEC:   DS   2   ; 
52E4                PUTCVEC:   DS   2   ; 
52E6                SYSVARS:      
52E6                             ; initialised sys variables (preserved)
52E6                VDATAWIDTH:   DS   2   ; 
52E8                VNUMBASE:   DS   2   ; 
52EA                VTIBPTR:   DS   2   ; 
52EC                VBUFPTR:   DS   2   ; 
52EE                VNEXT:    DS   2   ; 
52F0                VHEAPPTR:   DS   2   ; 
52F2                VRECUR:   DS   2   ; 
52F4                VDEFINE:   DS   2   ; 
52F6                             ; uninitialised sys variables (preserved)
52F6                VPOINTER:   DS   2   ; 
52F8                VREMAIN:   DS   2   ; 
52FA                VSAVEDIP:   DS   2   ; 
52FC                VSAVEDSP:   DS   2   ; 
52FE                VSAVEDNEXT:   DS   2   ; 
5300                VSAVEDBP:   DS   2   ; 
5302                             ; uninitialised sys variables (unpreserved)
5302                VTEMP1:   DS   2   ; 
5304                VTEMP2:   DS   2   ; 
5306                VTEMP3:   DS   2   ; 
5308                VLASTDEF:   DS   2   ; 
530A                TBPTR:    DS   2   ; reserved for tests
530C                TITLEBUF:   DS   20   
5320                HEAP:        
5320                             ; FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
5320                             ; db "{"
5320                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5320                             ; db    "\\kt{"
5320                             ; db      "0%t!=/qt"                  ; break if type != 0
5320                             ; db      "\\dt:a{"                   ; return talkback to receive data
5320                             ; db        "%L1#!/qt"                ; if not active don't send
5320                             ; db        "%L0# %a="                ; store current index in A
5320                             ; db        "%s %L0# +="              ; inc value of index by step
5320                             ; db        "1%t!=/qt"                ; break if type != 0
5320                             ; db        "%a %e <"                 ; ifte: in range?
5320                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: 1: send index, 2: active = false, send quit
5320                             ; db          "?? %k/rc"              ; ifte: call sink note: /rc recur
5320                             ; db      "} 0 %k^"                   ; init sink
5320                             ; db    "}"
5320                             ; db "}"
5320                             ; db 0
5320                             ; FUNC map, 0, "sf"                   ; map
5320                             ; db "{"
5320                             ; db    "\\kt{"
5320                             ; db      "0%t!=/qt"                  ; break if type != 0
5320                             ; db      "\\dt{"                     ; call source with tb
5320                             ; db        "1%t=="                   ; ifte: type == 1 ?
5320                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5320                             ; db        "?? %t %k^"               ; ifte: send to sink
5320                             ; db      "} 0 %s^"
5320                             ; db    "}"
5320                             ; db "}"
5320                             ; db 0
5320                             ; ; /ft filter
5320                             ; ; src pred -- src1
5320                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5320                             ; db "{"
5320                             ; db    "[0]%T="
5320                             ; db    "\\kt{"                       ; return talkback to receive data
5320                             ; db      "\\dt{"                     ; call source with tb
5320                             ; db        "["
5320                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5320                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5320                             ; db          "{/t}"                  ; case 2: return true
5320                             ; db        "]%t#^"                   ; select on %t
5320                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5320                             ; db        "??"
5320                             ; db      "} 0 %s^"
5320                             ; db    "}"
5320                             ; db "}"
5320                             ; db 0
5320                             ; FUNC forEach, 1, "spT"
5320                             ; db "{"
5320                             ; db    "[0]%T="
5320                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5320                             ; db      "2%t==/qt"                    ; if type == 2 skip
5320                             ; db      "0%t=="                   ; ifte: type = 0 ?
5320                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5320                             ; db      "??"                      ; ifte:
5320                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5320                             ; db    "} 0 %s^"
5320                             ; db "}"
5320                             ; db 0
5320                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5320                             ; db "{"                                  ; reducer: \\da00bbLi4u
5320                             ; db    "[%i]%A="
5320                             ; db    "\\kt{"                         ; return talkback to receive data
5320                             ; db      "\\dt{"                         ; call source with tb
5320                             ; db        "1%t=="                       ; ifte: type == 1 ?
5320                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5320                             ; db        "?? %t %k^"                    ; ifte: send to sink
5320                             ; db      "} 0 %s^"
5320                             ; db    "}"
5320                             ; db "}"
5320                             ; db 0


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 173 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 174 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 187 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 198 IN MAIN.asm
AND:                0220 DEFINED AT LINE 199 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 212 IN MAIN.asm
OR:                 022B DEFINED AT LINE 213 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 226 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 227 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 232 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 245 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 271 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 278 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
GT_:                027B DEFINED AT LINE 284 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 292 IN MAIN.asm
LT1:                028F DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 340 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 344 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 346 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 348 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 350 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 352 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 354 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 356 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 357 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 359 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 361 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 363 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 365 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 367 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 369 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 371 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 373 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 375 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 377 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 379 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 381 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 383 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 385 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 387 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 389 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 391 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 400 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 435 IN MAIN.asm
COMMAND_B_:         0334 DEFINED AT LINE 446 IN MAIN.asm
COMMAND_I_:         033F DEFINED AT LINE 455 IN MAIN.asm
COMMAND_M_:         0348 DEFINED AT LINE 462 IN MAIN.asm
COMMAND_P_:         034B DEFINED AT LINE 465 IN MAIN.asm
COMMAND_Q_:         0354 DEFINED AT LINE 472 IN MAIN.asm
COMMAND_R_:         035D DEFINED AT LINE 479 IN MAIN.asm
COMMAND_S_:         0360 DEFINED AT LINE 482 IN MAIN.asm
COMMAND_V_:         0363 DEFINED AT LINE 485 IN MAIN.asm
COMMAND_NOP_:       0366 DEFINED AT LINE 488 IN MAIN.asm
DECIMAL_:           0368 DEFINED AT LINE 491 IN MAIN.asm
DECIMAL1:           036B DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
DIV_:               0370 DEFINED AT LINE 497 IN MAIN.asm
ERROR1_:            0374 DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
HEXADECIMAL_:       037A DEFINED AT LINE 505 IN MAIN.asm
KEY_:               0380 DEFINED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
OUTPUT_:            0383 DEFINED AT LINE 512 IN MAIN.asm
TRUE_:              0386 DEFINED AT LINE 515 IN MAIN.asm
WORDS_:             0389 DEFINED AT LINE 518 IN MAIN.asm
XOR_:               038C DEFINED AT LINE 521 IN MAIN.asm
XOR1:               038D DEFINED AT LINE 523 IN MAIN.asm
ABSOLUTE_:          0397 DEFINED AT LINE 536 IN MAIN.asm
ADDROF_:            03A4 DEFINED AT LINE 551 IN MAIN.asm
ADDROF1:            03B8 DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
ADDROF2:            03C3 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
ARRAYSIZE_:         03C5 DEFINED AT LINE 577 IN MAIN.asm
BREAK_:             03CD DEFINED AT LINE 587 IN MAIN.asm
COLDSTART_:         03D0 DEFINED AT LINE 591 IN MAIN.asm
BYTES_:             03D3 DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
BYTES1:             03D6 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
INPUT_:             03DB DEFINED AT LINE 603 IN MAIN.asm
PRINTCHARS_:        03E6 DEFINED AT LINE 616 IN MAIN.asm
QUIT_:              03ED DEFINED AT LINE 624 IN MAIN.asm
QUIT1:              03F4 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
WORDS:              03F7 DEFINED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
COMMAND_F_:         03FD DEFINED AT LINE 638 IN MAIN.asm
COMMENT:            03FF DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
COMMAND_F:          0408 DEFINED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
FOREACH_:           0423 DEFINED AT LINE 680 IN MAIN.asm
FLUSH_:             0426 DEFINED AT LINE 685 IN MAIN.asm
FILTER_:            042B DEFINED AT LINE 689 IN MAIN.asm
FOLD_:              042E DEFINED AT LINE 692 IN MAIN.asm
FUNCSRC_:           0431 DEFINED AT LINE 695 IN MAIN.asm
F1_:                0434 DEFINED AT LINE 698 IN MAIN.asm
F2_:                0437 DEFINED AT LINE 701 IN MAIN.asm
F3_:                043A DEFINED AT LINE 704 IN MAIN.asm
F4_:                043D DEFINED AT LINE 707 IN MAIN.asm
FZ_:                0440 DEFINED AT LINE 710 IN MAIN.asm
FALSE_:             0443 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
COMMAND_M:          0446 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
MAP_:               044F DEFINED AT LINE 723 IN MAIN.asm
COMMAND_R:          0452 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
COMMAND_S:          045F DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
RECUR_:             0466 DEFINED AT LINE 742 IN MAIN.asm
REMAIN_:            046C DEFINED AT LINE 747 IN MAIN.asm
RANGESRC_:          0472 DEFINED AT LINE 752 IN MAIN.asm
COMMAND_V:          0475 DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
CONSTBUFSTART_:     0488 DEFINED AT LINE 772 IN MAIN.asm
CONSTHEAPSTART_:    048D DEFINED AT LINE 776 IN MAIN.asm
CONSTTIBSTART_:     0492 DEFINED AT LINE 780 IN MAIN.asm
VARBUFPTR_:         0497 DEFINED AT LINE 784 IN MAIN.asm
VARHEAPPTR_:        04A0 DEFINED AT LINE 789 IN MAIN.asm
VARTIBPTR_:         04A9 DEFINED AT LINE 794 IN MAIN.asm
VARIABLE:           04B2 DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
CONSTANT:           04B5 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
DOT:                04B8 DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
DOTNUMBER_:         04C7 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
DOTSTRING_:         04D2 DEFINED AT LINE 829 IN MAIN.asm
DOTSTRING0:         04D9 DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
DOTSTRING1:         04DF DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
DOTCHAR_:           04EC DEFINED AT LINE 848 IN MAIN.asm
DOTXCHARS_:         04F1 DEFINED AT LINE 854 IN MAIN.asm
DOTXCHARS0:         04F2 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
DOTXCHARS1:         04FB DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
DOTXCHARS2:         0503 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
RANGESRC:           050D DEFINED AT LINE 32
                    > USED AT LINE 753 IN MAIN.asm
RANGESRCM_1350S884: 051C DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0589 DEFINED AT LINE 32
                    > USED AT LINE 724 IN MAIN.asm
MAPM_1369S904:      0596 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             05CB DEFINED AT LINE 32
                    > USED AT LINE 690 IN MAIN.asm
FILTERM_1383S919:   05D9 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0629 DEFINED AT LINE 32
                    > USED AT LINE 693 IN MAIN.asm
FOLDM_1402S939:     0638 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            067B DEFINED AT LINE 32
                    > USED AT LINE 681 IN MAIN.asm
FOREACHM_1416S954:  0689 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            06C7 DEFINED AT LINE 32
                    > USED AT LINE 696 IN MAIN.asm
FUNCSRCM_1430S969:  06D3 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0700 DEFINED AT LINE 32
DOTARRAYM_1440S980: 070E DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0748 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
TILDE:              0748 DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
COMMA:              0748 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
COLON:              074A DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
BACKSLASH:          0757 DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
LAMBDA:             0757 DEFINED AT LINE 1011 IN MAIN.asm
LAMBDA1:            075C DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
LAMBDA2:            076C DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
DEFINESTART:        0778 DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
SEMICOLON:          0781 DEFINED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
DEFINEEND:          0781 DEFINED AT LINE 1038 IN MAIN.asm
DEFINEEND1:         0793 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
PERCENT:            0795 DEFINED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 355 IN MAIN.asm
ARG:                0795 DEFINED AT LINE 1054 IN MAIN.asm
ARG0:               07B1 DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
ARG0A:              07BA DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
ARG1:               07BF DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
ARG1A:              07C7 DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
LBRACK:             07CA DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
ARRAYSTART:         07CA DEFINED AT LINE 1096 IN MAIN.asm
RBRACK:             07E6 DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
ARRAYEND:           07E6 DEFINED AT LINE 1111 IN MAIN.asm
ARRAYEND1:          0802 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
ARRAYEND2:          0812 DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
ARRAYEND3:          0817 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
HASH:               0836 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ARRAYINDEX:         0836 DEFINED AT LINE 1166 IN MAIN.asm
ARRAYINDEX0:        083E DEFINED AT LINE 1172 IN MAIN.asm
ARRAYINDEX1:        083F DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
ARRAYINDEX2:        084B DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
ASSIGN:             084E DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
ASSIGN0:            0850 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
ASSIGN1:            0854 DEFINED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
ASSIGN2:            085D DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
LBRACE:             085F DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
RBRACE:             0864 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
BLOCKEND:           0864 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
BLOCKEND1:          0896 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
BLOCKEND2:          08A2 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
BLOCKEND3:          08B4 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
BLOCKEND4:          08C8 DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BREAK:              08D1 DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
BREAK1:             08D8 DEFINED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
TICK:               08EB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
CHAR:               08EB DEFINED AT LINE 1289 IN MAIN.asm
CHAR1:              08EE DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
CHAR2:              08FA DEFINED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
CHAR3:              08FD DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
DIV:                0900 DEFINED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
BUFFERDEC:          0911 DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
BUFFERDEC0:         092B DEFINED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
BUFFERDEC1:         093B DEFINED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
BUFFERDEC2:         095B DEFINED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
BUFFERDEC3:         095D DEFINED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
BUFFERDEC4:         096D DEFINED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
BUFFERDEC5:         096E DEFINED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
BUFFERHEX:          0977 DEFINED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
BUFFERHEX1:         0998 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
BUFFERHEX2:         09A1 DEFINED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
DIVIDE:             09AF DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
DIVIDE1:            09B4 DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
DIVIDE2:            09C1 DEFINED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
DIVIDE3:            09C2 DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
FZ:                 09C8 DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
CARET:              09D5 DEFINED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
GO:                 09D5 DEFINED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09D6 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
GO2:                09DC DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
GOBLOCK:            09E7 DEFINED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
GOBLOCK2:           0A0C DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
GOBLOCK3:           0A16 DEFINED AT LINE 1502 IN MAIN.asm
GOFUNC:             0A1A DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
GOFUNC1:            0A33 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
GOFUNC2:            0A39 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
GOFUNC3:            0A44 DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
GOFUNC4:            0A5C DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
GOFUNC5:            0A5F DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
GOFUNC6:            0A62 DEFINED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
GOFUNC7:            0A65 DEFINED AT LINE 1565 IN MAIN.asm
GOFUNC8:            0A69 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
DOLLAR:             0A74 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
HEXNUM:             0A74 DEFINED AT LINE 1580 IN MAIN.asm
HEXNUM1:            0A77 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
HEXNUM2:            0A7F DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
UPCASE:             0A91 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LOWCASE:            0A96 DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
IDENT1:             0A9B DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
QUESTION:           0AA8 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
IF:                 0AA8 DEFINED AT LINE 1623 IN MAIN.asm
IFTE:               0AB4 DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
IFTE1:              0AB5 DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
KEY:                0AC1 DEFINED AT LINE 1645 IN MAIN.asm
OUTPUT:             0ACA DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
STAR:               0AD3 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
MUL:                0AD3 DEFINED AT LINE 1664 IN MAIN.asm
MUL2:               0AD5 DEFINED AT LINE 1667 IN MAIN.asm
MUL3:               0ADD DEFINED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
NUM:                0AEF DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
NUM0:               0AF8 DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
NUM1:               0AF9 DEFINED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
NUM2:               0B11 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
NUM3:               0B1C DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
RPAREN:             0B1F DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
SHIFTLEFT:          0B27 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
SHIFTLEFT1:         0B2F DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
SHIFTLEFT2:         0B30 DEFINED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
SHIFTRIGHT:         0B37 DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
SHIFTRIGHT1:        0B3F DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
SHIFTRIGHT2:        0B43 DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
DQUOTE:             0B4A DEFINED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
STRING:             0B4A DEFINED AT LINE 1767 IN MAIN.asm
STRING1:            0B53 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
STRING2:            0B56 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
STRING3:            0B5F DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
PRINTCHARS1:        0B72 DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
PRINTCHARS2:        0B78 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
PARSEARGS:          0B7D DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
PARSEARGS1:         0B87 DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
PARSEARGS1A:        0B8F DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
PARSEARGS2:         0B97 DEFINED AT LINE 1838 IN MAIN.asm
PARSEARGS3:         0B9F DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
PARSEARGS4:         0BA2 DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
PARSEARGS5:         0BA8 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
PARSEBLOCK:         0BB3 DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
PARSEBLOCK1:        0BB7 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
PARSEBLOCK2:        0BE3 DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
PARSEBLOCK3:        0BE6 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
PARSEBLOCK4:        0BEE DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
PARSEBLOCK5:        0BF1 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
PARSEBLOCK6:        0C19 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
CREATEFUNC:         0C1D DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
CREATEFUNC0:        0C3C DEFINED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
CREATEFUNC1:        0C54 DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
CREATEFUNC2:        0C67 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
CREATEFUNC2A:       0C86 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
CREATEFUNC3:        0C95 DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
CREATEFUNC4:        0CA0 DEFINED AT LINE 2033 IN MAIN.asm
CREATEFUNC5:        0CA1 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
FLUSHBUFFER:        0CBF DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
COMMANDTABLE:       0CD6 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
COMMANDTABLE1:      0CE0 DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
COMMANDTABLE2:      0CE5 DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
JUMPTABLE:          0CEA DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
JUMPTABLE0:         0CEC DEFINED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
JUMPTABLE1:         0CF8 DEFINED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
JUMPTABLE2:         0CFB DEFINED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
PRTSTR0:            0CFE DEFINED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
PRTSTR:             0D02 DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 2245 IN MAIN.asm
NESTING:            0D07 DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
NESTING0:           0D11 DEFINED AT LINE 2143 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
NESTING1A:          0D18 DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
NESTING1:           0D1B DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
NESTING2:           0D2A DEFINED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
NESTING3:           0D2C DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
NESTING4:           0D37 DEFINED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
PROMPT:             0D39 DEFINED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
CRLF:               0D42 DEFINED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
PRINTSTR:           0D49 DEFINED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 34
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 159
INIT:               0D50 DEFINED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
INIT1:              0D58 DEFINED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
WARMINIT:           0D60 DEFINED AT LINE 2205 IN MAIN.asm
COLDBOOT0:          0D73 DEFINED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
COLDINIT:           0D7D DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D8E DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
COLDSTART:          0D9B DEFINED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
START:              0DA4 DEFINED AT LINE 2240 IN MAIN.asm
START1:             0DAA DEFINED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
INTERPRET:          0DB0 DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
INTERPRET2:         0DBF DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
INTERPRET3:         0DC7 DEFINED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
INTERPRET4:         0DD2 DEFINED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
INTERPRET5:         0DD7 DEFINED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
INTERPRET5A:        0DF5 DEFINED AT LINE 2317 IN MAIN.asm
INTERPRET6:         0DF7 DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
INTERPRET7:         0E05 DEFINED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
INTERPRET8:         0E18 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
NEXT:               0E33 DEFINED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
NEXT1:              0E43 DEFINED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
EXIT:               0E4A DEFINED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
RUN:                0E4E DEFINED AT LINE 2381 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0E52 DEFINED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
BACKSPACE_:         0E66 DEFINED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
EDIT_:              0E76 DEFINED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
REEDIT_:            0E8E DEFINED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
PRINTSTACK_:        0E91 DEFINED AT LINE 2412 IN MAIN.asm
F1:                 0E9B DEFINED AT LINE 32
                    > USED AT LINE 699 IN MAIN.asm
F1M_2929S12:        0EA6 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0EA7 DEFINED AT LINE 32
                    > USED AT LINE 702 IN MAIN.asm
F2M_2931S15:        0EB2 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0EB3 DEFINED AT LINE 32
                    > USED AT LINE 705 IN MAIN.asm
F3M_2933S18:        0EBE DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0EBF DEFINED AT LINE 32
                    > USED AT LINE 708 IN MAIN.asm
F4M_2935S21:        0ECA DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0F00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2944S32:    0FE8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S40:    1069 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S41:    10E0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S42:    1155 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S43:    11CA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S44:    123F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S45:    12B4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S46:    132B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S47:    13A4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S48:    141B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S49:    1492 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S50:    150B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S51:    1586 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S52:    15FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S53:    1678 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S54:    16F7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S55:    1776 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S56:    17F3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S57:    1874 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S58:    18F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S59:    197C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S60:    19F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S61:    1A7E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S62:    1AFF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S63:    1B7C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S64:    1BF9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S65:    1C7E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S66:    1CFB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2976S67:    1D78 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2977S68:    1DF7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2978S69:    1E86 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2979S70:    1F03 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2980S71:    1F88 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2981S72:    2005 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2982S73:    2090 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2983S74:    211B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2984S75:    21A6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2985S76:    2231 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2986S77:    22B6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2987S78:    2333 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2988S79:    23B2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2989S80:    2431 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2990S81:    24AE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2991S82:    252B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2992S83:    25A8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2993S84:    2625 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2994S85:    26A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2995S86:    271F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2996S87:    279C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2997S88:    2819 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2998S89:    2898 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2999S90:    2917 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3000S91:    2996 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3001S92:    2A17 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3002S93:    2A98 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3003S94:    2B13 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3004S95:    2B8E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3005S96:    2C0F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3006S97:    2C96 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3007S98:    2D1D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3008S99:    2DA8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3009S100:   2E3D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3010S101:   2ED2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3011S102:   2F4F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3012S103:   2FCE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3013S104:   3053 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3014S105:   30DC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3015S106:   3161 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3016S107:   31F0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3017S108:   3281 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3018S109:   3318 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3019S110:   33B3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3020S111:   3440 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3021S112:   34D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3022S113:   3568 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3023S114:   35FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3024S115:   3694 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3025S116:   3737 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3026S117:   37C8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3027S118:   3867 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3028S119:   3908 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3029S120:   39AB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3030S121:   3A58 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3031S122:   3B05 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3032S123:   3B92 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3033S124:   3C27 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3034S125:   3CB4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3035S126:   3D4D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3036S127:   3DE6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3037S128:   3E8D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3038S129:   3F3C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3039S130:   3FEB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3040S131:   408C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3041S132:   4133 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3042S133:   41F0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3043S134:   42B7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3044S135:   4350 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3045S136:   43E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3046S137:   4472 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3047S138:   44FB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3048S139:   4584 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3049S140:   460D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3050S141:   468E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3051S142:   470F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3052S143:   4790 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3053S144:   4811 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3054S145:   489C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3055S146:   492B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3056S147:   49B8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3057S148:   4A43 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3058S149:   4ADC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3059S150:   4B7B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3060S151:   4C32 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3061S152:   4CE9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3062S153:   4DBA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3063S154:   4E55 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4E60 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5000 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5000 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2352 IN MAIN.asm
BUF:                5100 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
VARS:               5200 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           52D0 DEFINED AT LINE 18 IN ram.asm
RST08:              52D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              52D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              52D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              52D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              52D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              52DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               52DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             52DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             52E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            52E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            52E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            52E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2220 IN MAIN.asm
VDATAWIDTH:         52E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
VNUMBASE:           52E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
VTIBPTR:            52EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
VBUFPTR:            52EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
VNEXT:              52EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2232 IN MAIN.asm
VHEAPPTR:           52F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
VRECUR:             52F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
VDEFINE:            52F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
VPOINTER:           52F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 228 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
VREMAIN:            52F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
VSAVEDIP:           52FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
VSAVEDSP:           52FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
VSAVEDNEXT:         52FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
VSAVEDBP:           5300 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
VTEMP1:             5302 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
VTEMP2:             5304 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
VTEMP3:             5306 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
VLASTDEF:           5308 DEFINED AT LINE 60 IN ram.asm
TBPTR:              530A DEFINED AT LINE 61 IN ram.asm
TITLEBUF:           530C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
HEAP:               5320 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
