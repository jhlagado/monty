0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3D               LD   (RST08),HL   
0094   22 D2 3D               LD   (RST10),HL   
0097   22 D4 3D               LD   (RST18),HL   
009A   22 D6 3D               LD   (RST20),HL   
009D   22 D8 3D               LD   (RST28),HL   
00A0   22 DA 3D               LD   (RST30),HL   
00A3   22 DE 3D               LD   (INTVEC),HL   
00A6   22 E0 3D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3C               LD   SP,STACK   
00C6   CD 74 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   FF 09                  DW   next   ; g nNext
0186   00 40                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   88                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   88                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   24                     DB   lsb(discard_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   85                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   88                     DB   lsb(nop_)   ; ;
023C   73                     DB   lsb(lt_)   ; <
023D   59                     DB   lsb(eq_)   ; =
023E   68                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   88                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 8A 03               JP   add   
0303                ADDR_:       
0303   C3 A4 03               JP   addr   
0306                AND_:        
0306   C3 B0 03               JP   and   
0309                ARG_:        
0309   C3 CD 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 04 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 36 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 52 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 A0 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 C9 04               JP   block   
031B                BLOCKEND_:      
031B   C3 32 05               JP   blockend   
031E                CHAR_:       
031E   C3 87 05               JP   char   
0321                COMMAND_:      
0321   C3 B6 07               JP   command   
0324                DISCARD_:      
0324   E1                     POP   hl   
0325   DD E9                  JP   (ix)   
0327                DOT_:        
0327   C3 AD 05               JP   dot   
032A                REMAIN_:      
032A   C3 46 07               JP   remain   
032D                GO_:         
032D   C3 11 06               JP   go   
0330                IDENTU_:      
0330   C3 CA 06               JP   identU   
0333                IDENTL_:      
0333   C3 CF 06               JP   identL   
0336                IF_:         
0336   C3 E1 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C5 03               JP   xor1   
033F                MUL_:        
033F   C3 FA 06               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 1D                  JR   eq1   
0347                NUM_:        
0347   C3 16 07               JP   num   
034A                HEXNUM_:      
034A   C3 AD 06               JP   hexnum   
034D                OR_:         
034D   C3 BB 03               JP   or   
0350                XOR_:        
0350   C3 C4 03               JP   xor   
0353                STRING_:      
0353   C3 6F 07               JP   string   
0356                SUB_:        
0356   C3 97 07               JP   sub   
0359                EQ_:         
0359   03                     INC   bc   
035A   0A                     LD   a,(bc)   ; is it == ?
035B   FE 3D                  CP   "="   
035D   28 04                  JR   z,eq0   ; no its equality
035F   0B                     DEC   bc   
0360   C3 B8 04               JP   assign   ; no its assignment
0363                EQ0:         
0363   E1                     POP   hl   
0364                EQ1:         
0364   D1                     POP   de   
0365   C3 F0 05               JP   equals   
0368                GT_:         
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   CA 5C 07               JP   z,shiftRight   
036F   D1                     POP   de   
0370   E1                     POP   hl   
0371   18 09                  JR   lt1   
0373                LT_:         
0373   03                     INC   bc   
0374   0A                     LD   a,(bc)   
0375   FE 3C                  CP   "<"   
0377   CA 4C 07               JP   z,shiftLeft   
037A   E1                     POP   hl   
037B   D1                     POP   de   
037C                LT1:         
037C   FE 3D                  CP   "="   
037E   CA F8 05               JP   z,lessthaneq   
0381   0B                     DEC   bc   
0382   C3 FD 05               JP   lessthan   
0385                DIV_:        
0385   C3 9C 05               JP   div   
0388                NOP_:        
0388   DD E9                  JP   (ix)   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 BA 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA BA 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; -- ptr
03A4                ADDR:        
03A4   2A F0 3D               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 F0 3D               LD   hl,vPointer   
03AB   22 F0 3D               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   18 EA                  JR   and1   
03CD                             ; $a .. $z
03CD                             ; -- value
03CD                             ; returns value of arg
03CD                ARG:         
03CD   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D0   FD 56 05               LD   d,(iy+5)   
03D3   EB                     EX   de,hl   
03D4   7D                     LD   a,l   ; arg_list* == null, skip
03D5   B4                     OR   h   
03D6   28 1C                  JR   z,arg0a   
03D8   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D9   2B                     DEC   hl   
03DA   7E                     LD   a,(hl)   
03DB   23                     INC   hl   
03DC   23                     INC   hl   
03DD   B7                     OR   a   
03DE   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E0   5F                     LD   e,a   ; e = a = num_args
03E1   03                     INC   bc   ; a = next char = arg_name
03E2   0A                     LD   a,(bc)   
03E3   C5                     PUSH   bc   ; save IP
03E4   43                     LD   b,e   ; b = e = num_args
03E5   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E8   FD 56 03               LD   d,(iy+3)   
03EB                ARG0:        
03EB   1B                     DEC   de   ; a = arg_name, de = next arg*
03EC   1B                     DEC   de   
03ED   BE                     CP   (hl)   
03EE   28 09                  JR   z,arg1   
03F0   23                     INC   hl   ; hl = next arg_list*
03F1   10 F8                  DJNZ   arg0   
03F3   C1                     POP   bc   ; no match, restore IP
03F4                ARG0A:       
03F4   11 00 00               LD   de,0   ; return 0
03F7   18 08                  JR   arg1a   
03F9                ARG1:        
03F9   C1                     POP   bc   ; restore IP
03FA   EB                     EX   de,hl   ; hl = arg*
03FB   22 F0 3D               LD   (vPointer),hl   ; store arg* in setter
03FE   5E                     LD   e,(hl)   
03FF   23                     INC   hl   
0400   56                     LD   d,(hl)   ; de = arg
0401                ARG1A:       
0401   D5                     PUSH   de   ; push arg
0402   DD E9                  JP   (ix)   
0404                             ; arg_list - parses input (ab:c)
0404                             ; names after the : represent uninitialised locals
0404                             ; return values are the state of the stack after the block ends
0404                ARG_LIST:      
0404   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0407   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
040A   23                     INC   hl   ; skip length field to start
040B   23                     INC   hl   
040C   E5                     PUSH   hl   ; save start of arg_list
040D   03                     INC   bc   ; point to next char
040E                ARG_LIST1:      
040E   0A                     LD   a,(bc)   
040F   FE 29                  CP   ")"   ; ) is the arg_list terminator
0411   28 12                  JR   z,arg_list4   
0413   FE 3A                  CP   ":"   
0415   20 03                  JR   nz,arg_list2   
0417   14                     INC   d   ; non zero value local count acts as flag
0418   20 08                  JR   nz,arg_list3   
041A                ARG_LIST2:      
041A   77                     LD   (hl),a   
041B   23                     INC   hl   
041C   1C                     INC   e   ; increase arg count
041D   AF                     XOR   a   
041E   B2                     OR   d   
041F   28 01                  JR   z,arg_list3   
0421   14                     INC   d   ; if d > 0 increase local count
0422                ARG_LIST3:      
0422   03                     INC   bc   ; point to next char
0423   18 E9                  JR   arg_list1   
0425                ARG_LIST4:      
0425   AF                     XOR   a   
0426   B2                     OR   d   
0427   28 01                  JR   z,arg_list5   
0429   15                     DEC   d   ; remove initial inc
042A                ARG_LIST5:      
042A   23                     INC   hl   
042B   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
042E   E1                     POP   hl   ; hl = start of arg_list
042F   E5                     PUSH   hl   ; return start of string
0430   2B                     DEC   hl   ; write length bytes to length field at start - 2
0431   72                     LD   (hl),d   
0432   2B                     DEC   hl   
0433   73                     LD   (hl),e   
0434   DD E9                  JP   (ix)   
0436                ARRBEGIN:      
0436   11 00 00               LD   de,0   ; create stack frame
0439   D5                     PUSH   de   ; push null for IP
043A   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
043D   FD 56 05               LD   d,(iy+5)   ; 
0440   D5                     PUSH   de   ; 
0441   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0444   FD 56 03               LD   d,(iy+3)   ; 
0447   D5                     PUSH   de   ; 
0448   FD E5                  PUSH   iy   ; push BP
044A   FD 21 00 00            LD   iy,0   ; BP = SP
044E   FD 39                  ADD   iy,sp   
0450   DD E9                  JP   (ix)   
0452                ARREND:      
0452   FD 54                  LD   d,iyh   ; de = BP
0454   FD 5D                  LD   e,iyl   
0456   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
045A   62 6B                  LD   hl,de   ; hl = de = BP
045C   B7                     OR   a   
045D   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
045F   CB 3C                  SRL   h   ; 
0461   CB 1D                  RR   l   
0463   44 4D                  LD   bc,hl   ; bc = count
0465   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = array[-2]
0468   71                     LD   (hl),c   ; write num items in length word
0469   23                     INC   hl   
046A   70                     LD   (hl),b   
046B   23                     INC   hl   ; hl = array[0], bc = count
046C                             ; de = BP, hl = array[0], bc = count
046C                ARREND1:      
046C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
046F   77                     LD   (hl),a   ; write lsb of array item
0470   23                     INC   hl   ; move to msb of array item
0471   3A E6 3D               LD   a,(vDataWidth)   ; vDataWidth=1?
0474   3D                     DEC   a   
0475   28 05                  JR   z,arrEnd2   
0477   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047A   77                     LD   (hl),a   ; write msb of array item
047B   23                     INC   hl   ; move to next word in array
047C                ARREND2:      
047C   FD 2B                  DEC   iy   ; move to next word on stack
047E   FD 2B                  DEC   iy   
0480   0B                     DEC   bc   ; dec items count
0481   79                     LD   a,c   ; if not zero loop
0482   B0                     OR   b   
0483   20 E7                  JR   nz,arrEnd1   
0485   EB                     EX   de,hl   ; de = end of array, hl = BP
0486   F9                     LD   sp,hl   ; sp = BP
0487   E1                     POP   hl   ; de = end of array, hl = old BP
0488   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0489   FD 62                  LD   iyh,d   
048B   FD 6B                  LD   iyl,e   
048D   D1                     POP   de   ; pop arg_list (discard)
048E   D1                     POP   de   ; pop first_arg* (discard)
048F   D1                     POP   de   ; pop IP (discard)
0490   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = array[-2]
0494   22 EC 3D               LD   (vHeapPtr),hl   ; move heap* to end of array
0497   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
049B   13                     INC   de   ; de = array[0]
049C   13                     INC   de   
049D   D5                     PUSH   de   ; return array[0]
049E   DD E9                  JP   (ix)   
04A0                             ; index of an array, based on vDataWidth
04A0                             ; array num -- value    ; also sets vPointer to address
04A0                ARRINDEX:      
04A0   E1                     POP   hl   ; hl = index
04A1   D1                     POP   de   ; de = array
04A2   3A E6 3D               LD   a,(vDataWidth)   ; a = data width
04A5   3D                     DEC   a   
04A6   28 01                  JR   z,arrIndex1   
04A8                ARRINDEX0:      
04A8   29                     ADD   hl,hl   ; if data width = 2 then double
04A9                ARRINDEX1:      
04A9   19                     ADD   hl,de   ; add addr
04AA   22 F0 3D               LD   (vPointer),hl   ; store address in setter
04AD   16 00                  LD   d,0   
04AF   5E                     LD   e,(hl)   
04B0   B7                     OR   a   ; check data width again
04B1   28 02                  JR   z,arrIndex2   
04B3   23                     INC   hl   
04B4   56                     LD   d,(hl)   
04B5                ARRINDEX2:      
04B5   D5                     PUSH   de   
04B6   DD E9                  JP   (ix)   
04B8                             ; value _oldValue --            ; uses address in vPointer
04B8                ASSIGN:      
04B8   E1                     POP   hl   ; discard last accessed value
04B9   E1                     POP   hl   ; hl = new value
04BA                ASSIGN0:      
04BA   EB                     EX   de,hl   ; de = new value
04BB                ASSIGNX:      
04BB   2A F0 3D               LD   hl,(vPointer)   
04BE   73                     LD   (hl),e   
04BF   3A E6 3D               LD   a,(vDataWidth)   
04C2   3D                     DEC   a   ; is it byte?
04C3   28 02                  JR   z,assign1   
04C5   23                     INC   hl   
04C6   72                     LD   (hl),d   
04C7                ASSIGN1:      
04C7   DD E9                  JP   (ix)   
04C9                BLOCK:       
04C9   C5                     PUSH   bc   ; return pointer to first { of block
04CA   03                     INC   bc   
04CB   16 01                  LD   d,1   ; nesting: count first parenthesis
04CD                BLOCK1:      ; Skip to end of definition
04CD   0A                     LD   a,(bc)   ; Get the next character
04CE   03                     INC   bc   ; Point to next character
04CF   FE 21                  CP   " " + 1   ; ignore whitespace
04D1   38 FA                  JR   c,block1   
04D3   FE 29                  CP   ")"   
04D5   28 2D                  JR   z,block4   
04D7   FE 7D                  CP   "}"   
04D9   28 29                  JR   z,block4   
04DB   FE 5D                  CP   "]"   
04DD   28 25                  JR   z,block4   
04DF   FE 28                  CP   "("   
04E1   28 16                  JR   z,block2   
04E3   FE 7B                  CP   "{"   
04E5   28 12                  JR   z,block2   
04E7   FE 5B                  CP   "["   
04E9   28 0E                  JR   z,block2   
04EB   FE 27                  CP   "'"   
04ED   28 0D                  JR   z,block3   
04EF   FE 60                  CP   "`"   
04F1   28 09                  JR   z,block3   
04F3   FE 22                  CP   $22   
04F5   28 05                  JR   z,block3   
04F7   18 D4                  JR   block1   
04F9                BLOCK2:      
04F9   14                     INC   d   
04FA   18 D1                  JR   block1   
04FC                BLOCK3:      
04FC   3E 80                  LD   a,$80   
04FE   AA                     XOR   d   
04FF   47                     LD   b,a   
0500   20 CB                  JR   nz,block1   
0502   18 03                  JR   block5   
0504                BLOCK4:      
0504   15                     DEC   d   
0505   20 C6                  JR   nz,block1   ; get the next element
0507                BLOCK5:      
0507   60 69                  LD   hl,bc   ; hl = IP
0509   11 00 40               LD   de,HEAP   ; is IP pointing to object in heap
050C   B7                     OR   a   ; IP - HEAP
050D   ED 52                  SBC   hl,de   
050F   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0511   28 1C                  JR   z,block6   
0513   60 69                  LD   hl,bc   ; hl = IP
0515   D1                     POP   de   ; de = block*
0516   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
051A   B7                     OR   a   ; bc = size
051B   ED 52                  SBC   hl,de   
051D   44 4D                  LD   bc,hl   
051F   EB                     EX   de,hl   ; hl = block* de = heap*
0520   ED 5B EC 3D            LD   de,(vHeapPtr)   
0524   D5                     PUSH   de   ; return hblock*
0525   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0527   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += size
052B   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
052F                BLOCK6:      
052F   0B                     DEC   bc   ; balanced, exit
0530   DD E9                  JP   (ix)   
0532                BLOCKEND:      
0532   D9                     EXX      ; de" = oldBP bc" = oldIP
0533   FD 5E 00               LD   e,(iy+0)   
0536   FD 56 01               LD   d,(iy+1)   
0539   FD 4E 06               LD   c,(iy+6)   
053C   FD 46 07               LD   b,(iy+7)   
053F   D9                     EXX      
0540   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0543   FD 56 03               LD   d,(iy+3)   
0546   EB                     EX   de,hl   
0547   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054A   FD 56 01               LD   d,(iy+1)   
054D   13                     INC   de   ; for carry flag <=
054E   B7                     OR   a   
054F   ED 52                  SBC   hl,de   
0551   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0553   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0555   FD 5D                  LD   e,iyl   
0557   21 08 00               LD   hl,8   
055A   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055B   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055C   18 0C                  JR   blockend2   
055E                BLOCKEND1:      ; same scope
055E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0561   FD 56 03               LD   d,(iy+3)   
0564   EB                     EX   de,hl   
0565   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0567   FD 5D                  LD   e,iyl   
0569   EB                     EX   de,hl   
056A                BLOCKEND2:      
056A   44 4D                  LD   bc,hl   ; bc = hl = BP
056C   B7                     OR   a   ; hl = BP - SP = count
056D   ED 72                  SBC   hl,sp   
056F   7D                     LD   a,l   
0570   B4                     OR   h   
0571   28 09                  JR   z,blockend3   
0573   C5                     PUSH   bc   ; bc = count, hl = BP
0574   44 4D                  LD   bc,hl   
0576   E1                     POP   hl   
0577   2B                     DEC   hl   ; hl = BP-1
0578   1B                     DEC   de   ; de = args*-1
0579   ED B8                  LDDR      
057B   13                     INC   de   
057C                BLOCKEND3:      
057C   EB                     EX   de,hl   ; hl = new tos
057D   F9                     LD   sp,hl   ; sp = new tos
057E   D9                     EXX      ; bc = IP, iy = oldBP
057F   D5                     PUSH   de   
0580   C5                     PUSH   bc   
0581   D9                     EXX      
0582   C1                     POP   bc   
0583   FD E1                  POP   iy   
0585   DD E9                  JP   (ix)   
0587                CHAR:        
0587   21 00 00               LD   hl,0   ; if "" is empty or null
058A                CHAR1:       
058A   03                     INC   bc   ; point to next char
058B   0A                     LD   a,(bc)   
058C   FE 27                  CP   "'"   ; ' is the terminator
058E   28 09                  JR   z,char3   
0590   FE 5C                  CP   $5c   ; \ is the escape
0592   20 02                  JR   nz,char2   
0594   03                     INC   bc   
0595   0A                     LD   a,(bc)   
0596                CHAR2:       
0596   6F                     LD   l,a   
0597   18 F1                  JR   char1   
0599                CHAR3:       
0599   E5                     PUSH   hl   
059A   DD E9                  JP   (ix)   
059C                DIV:         
059C   D1                     POP   de   
059D   E1                     POP   hl   
059E   C5                     PUSH   bc   ; preserve the IP
059F   44 4D                  LD   bc,hl   
05A1   CD D7 05               CALL   divide   
05A4   EB                     EX   de,hl   
05A5   ED 53 F6 3D            LD   (vRemain),de   
05A9   C1                     POP   bc   
05AA   C3 99 03               JP   add3   
05AD                DOT:         
05AD   E1                     POP   hl   
05AE   03                     INC   bc   
05AF   0A                     LD   a,(bc)   
05B0   FE 68                  CP   "h"   
05B2   20 05                  JR   nz,dot1   
05B4   CD 03 09               CALL   prthex   
05B7   18 17                  JR   dot4   
05B9                DOT1:        
05B9   FE 73                  CP   "s"   
05BB   20 05                  JR   nz,dot2   
05BD   CD 26 09               CALL   prtstr   
05C0   18 0E                  JR   dot4   
05C2                DOT2:        
05C2   FE 63                  CP   "c"   
05C4   20 06                  JR   nz,dot3   
05C6   7D                     LD   a,l   
05C7   CD 85 00               CALL   putchar   
05CA   18 04                  JR   dot4   
05CC                DOT3:        
05CC   0B                     DEC   bc   
05CD   CD BB 08               CALL   prtdec   
05D0                DOT4:        
05D0   3E 20                  LD   a," "   
05D2   CD 85 00               CALL   putchar   
05D5   DD E9                  JP   (ix)   
05D7                             ; division subroutine.
05D7                             ; bc: divisor, de: dividend, hl: remainder
05D7                DIVIDE:      
05D7   21 00 00               LD   hl,0   ; zero the remainder
05DA   3E 10                  LD   a,16   ; loop counter
05DC                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05DC   CB 21                  SLA   c   
05DE   CB 10                  RL   b   
05E0   ED 6A                  ADC   hl,hl   
05E2   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E4   38 03                  JR   c,divide2   
05E6   0C                     INC   c   
05E7   18 01                  JR   divide3   
05E9                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E9   19                     ADD   hl,de   
05EA                DIVIDE3:      
05EA   3D                     DEC   a   
05EB   20 EF                  JR   nz,divide1   
05ED   50 59                  LD   de,bc   ; result from bc to de
05EF   C9                     RET      
05F0                             ; hl = value1, de = value2
05F0                             ; hl = result
05F0                EQUALS:      
05F0   B7                     OR   a   ; reset the carry flag
05F1   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05F3   28 10                  JR   z,true1   
05F5   C3 0B 06               JP   false1   
05F8                             ; hl = value1 de = value2
05F8                             ; hl = result
05F8                LESSTHANEQ:      
05F8   B7                     OR   a   
05F9   ED 52                  SBC   hl,de   
05FB   18 05                  JR   lessthan1   
05FD                             ; hl = value1 de = value2
05FD                             ; hl = result
05FD                LESSTHAN:      
05FD   B7                     OR   a   
05FE   ED 52                  SBC   hl,de   
0600   28 09                  JR   z,false1   
0602                LESSTHAN1:      
0602   FA 0B 06               JP   m,false1   
0605                TRUE1:       
0605   21 FF FF               LD   hl,TRUE   
0608   E5                     PUSH   hl   
0609   DD E9                  JP   (ix)   
060B                NULL1:       
060B                FALSE1:      
060B   21 00 00               LD   hl,FALSE   
060E   E5                     PUSH   hl   
060F   DD E9                  JP   (ix)   
0611                             ; execute a block of code which ends with }
0611                             ; creates a root scope if BP == stack
0611                             ; else uses outer scope
0611                GO:          
0611   D1                     POP   de   ; de = block*
0612                GO1:         
0612   7B                     LD   a,e   ; if block* == null, exit
0613   B2                     OR   d   
0614   20 02                  JR   nz,go2   
0616   DD E9                  JP   (ix)   
0618                GO2:         
0618   1A                     LD   a,(de)   
0619   FE 7B                  CP   "{"   
061B   C2 3F 06               JP   nz,go3   
061E   13                     INC   de   ; execute block of monty code
061F   C5                     PUSH   bc   ; push IP
0620   21 80 3C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0623   FD 44                  LD   b,iyh   
0625   FD 4D                  LD   c,iyl   
0627   B7                     OR   a   ; hl = stack - BP = root_scope
0628   ED 42                  SBC   hl,bc   
062A   7D                     LD   a,l   ; if root_scope, skip
062B   B4                     OR   h   
062C   28 6C                  JR   z,go10   
062E   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0631   FD 46 05               LD   b,(iy+5)   
0634   C5                     PUSH   bc   
0635   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0638   FD 46 03               LD   b,(iy+3)   
063B   60 69                  LD   hl,bc   
063D   18 60                  JR   go11   
063F                GO3:         ; execute function
063F   EB                     EX   de,hl   ; hl = func*
0640   5E                     LD   e,(hl)   ; de = closure*
0641   23                     INC   hl   
0642   56                     LD   d,(hl)   
0643   23                     INC   hl   
0644   7B                     LD   a,e   ; if closure* == null skip
0645   B2                     OR   d   
0646   28 21                  JR   z,go6   
0648   ED 43 F8 3D            LD   (vTemp1),bc   
064C   22 FA 3D               LD   (vTemp2),hl   ; save bc,hl
064F   EB                     EX   de,hl   ; hl = array*
0650   2B                     DEC   hl   ; bc = count
0651   46                     LD   b,(hl)   
0652   2B                     DEC   hl   
0653   4E                     LD   c,(hl)   
0654   23                     INC   hl   ; push each item on stack
0655   23                     INC   hl   
0656   18 06                  JR   go5   
0658                GO4:         
0658   5E                     LD   e,(hl)   ; de = closure item
0659   23                     INC   hl   
065A   56                     LD   d,(hl)   
065B   23                     INC   hl   
065C   D5                     PUSH   de   ; push on stack
065D   0B                     DEC   bc   
065E                GO5:         
065E   79                     LD   a,c   ; if count != 0 then loop
065F   B0                     OR   b   
0660   20 F6                  JR   nz,go4   
0662   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore bc
0666   2A FA 3D               LD   hl,(vTemp2)   ; restore hl
0669                GO6:         
0669   5E                     LD   e,(hl)   ; de = block*
066A   23                     INC   hl   
066B   56                     LD   d,(hl)   
066C   23                     INC   hl   
066D   ED 53 F8 3D            LD   (vTemp1),de   ; save block*
0671   5E                     LD   e,(hl)   ; de = arg_list*
0672   23                     INC   hl   
0673   56                     LD   d,(hl)   
0674   23                     INC   hl   
0675   EB                     EX   de,hl   ; hl = arg_list*
0676   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de = block*
067A   7D                     LD   a,l   ; if arg_list* != null skip
067B   B4                     OR   h   
067C   20 03                  JR   nz,go7   
067E   C5                     PUSH   bc   ; push IP
067F   18 19                  JR   go10   
0681                GO7:         
0681   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0682   7E                     LD   a,(hl)   
0683   23                     INC   hl   
0684   B7                     OR   a   
0685   28 05                  JR   z,go9   
0687                GO8:         
0687   3B                     DEC   sp   
0688   3B                     DEC   sp   
0689   3D                     DEC   a   
068A   20 FB                  JR   nz,go8   
068C                GO9:         
068C   C5                     PUSH   bc   ; push IP
068D   E5                     PUSH   hl   ; push arg_list*
068E   2B                     DEC   hl   ; hl = num_args*
068F   2B                     DEC   hl   
0690   7E                     LD   a,(hl)   ; hl = num_args * 2
0691   87                     ADD   a,a   
0692   C6 04                  ADD   a,4   ; offset for IP and arg_list
0694   6F                     LD   l,a   
0695   26 00                  LD   h,$0   
0697   39                     ADD   hl,sp   ; hl = first_arg*
0698   18 06                  JR   go12   
069A                GO10:        
069A   E5                     PUSH   hl   ; push arg_list (null)
069B   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
069E   39                     ADD   hl,sp   
069F                GO11:        
069F   1B                     DEC   de   
06A0                GO12:        
06A0   E5                     PUSH   hl   ; push first_arg
06A1   FD E5                  PUSH   iy   ; push BP
06A3   FD 21 00 00            LD   iy,0   ; BP = SP
06A7   FD 39                  ADD   iy,sp   
06A9   42 4B                  LD   bc,de   ; bc = de = block*-1
06AB   DD E9                  JP   (ix)   
06AD                HEXNUM:      
06AD   21 00 00               LD   hl,0   ; Clear hl to accept the number
06B0                HEXNUM1:      
06B0   03                     INC   bc   
06B1   0A                     LD   a,(bc)   ; Get the character which is a numeral
06B2   CB 77                  BIT   6,a   ; is it uppercase alpha?
06B4   28 02                  JR   z,hexnum2   ; no a decimal
06B6   D6 07                  SUB   7   ; sub 7  to make $a - $F
06B8                HEXNUM2:      
06B8   D6 30                  SUB   $30   ; form decimal digit
06BA   DA 38 07               JP   c,num2   
06BD   FE 10                  CP   $0F+1   
06BF   D2 38 07               JP   nc,num2   
06C2   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06C3   29                     ADD   hl,hl   ; 4X
06C4   29                     ADD   hl,hl   ; 8X
06C5   29                     ADD   hl,hl   ; 16X
06C6   85                     ADD   a,l   ; add into bottom of hl
06C7   6F                     LD   l,a   
06C8   18 E6                  JR   hexnum1   
06CA                IDENTU:      
06CA   0A                     LD   a,(bc)   ; a = identifier char
06CB   D6 41                  SUB   "A"   ; "A" = 0
06CD   18 05                  JR   ident1   
06CF                IDENTL:      
06CF   0A                     LD   a,(bc)   
06D0   D6 61                  SUB   "a"   
06D2   C6 1A                  ADD   a,26   
06D4                IDENT1:      
06D4   87                     ADD   a,a   ; l = a * 2
06D5   6F                     LD   l,a   
06D6   26 3D                  LD   h,msb(vars)   
06D8   22 F0 3D               LD   (vPointer),hl   ; store address in setter
06DB   5E                     LD   e,(hl)   
06DC   23                     INC   hl   
06DD   56                     LD   d,(hl)   
06DE   D5                     PUSH   de   
06DF   DD E9                  JP   (ix)   
06E1                             ; if
06E1                             ; condition then -- value
06E1                IF:          
06E1   03                     INC   bc   
06E2   0A                     LD   a,(bc)   
06E3   FE 3F                  CP   "?"   
06E5   28 06                  JR   z,ifte   
06E7   0B                     DEC   bc   
06E8   11 00 00               LD   de,0   ; NUL pointer for else
06EB   18 01                  JR   ifte1   
06ED                             ; ifte
06ED                             ; condition then else -- value
06ED                IFTE:        
06ED   D1                     POP   de   ; de = else
06EE                IFTE1:       
06EE   E1                     POP   hl   ; hl = then
06EF   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06F0   7C                     LD   a,h   
06F1   B5                     OR   l   
06F2   E1                     POP   hl   ; hl = then
06F3   CA 12 06               JP   z,go1   ; if z de = else
06F6   EB                     EX   de,hl   ; condition = false, de = then
06F7   C3 12 06               JP   go1   
06FA                MUL:         
06FA   D1                     POP   de   ; get first value
06FB   E1                     POP   hl   
06FC                MUL2:        
06FC   C5                     PUSH   bc   ; Preserve the IP
06FD   44 4D                  LD   bc,hl   ; bc = 2nd value
06FF   21 00 00               LD   hl,0   
0702   3E 10                  LD   a,16   
0704                MUL3:        
0704   29                     ADD   hl,hl   
0705   CB 13                  RL   e   
0707   CB 12                  RL   d   
0709   30 04                  JR   nc,$+6   
070B   09                     ADD   hl,bc   
070C   30 01                  JR   nc,$+3   
070E   13                     INC   de   
070F   3D                     DEC   a   
0710   20 F2                  JR   nz,mul3   
0712   C1                     POP   bc   ; Restore the IP
0713   C3 99 03               JP   add3   
0716                NUM:         
0716   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0719   0A                     LD   a,(bc)   ; Get numeral or -
071A   FE 2D                  CP   "-"   
071C   20 01                  JR   nz,num0   
071E   03                     INC   bc   ; move to next char, no flags affected
071F                NUM0:        
071F   08                     EX   af,af'   ; save zero flag = 0 for later
0720                NUM1:        
0720   0A                     LD   a,(bc)   ; read digit
0721   D6 30                  SUB   "0"   ; less than 0?
0723   38 13                  JR   c,num2   ; not a digit, exit loop
0725   FE 0A                  CP   10   ; greater that 9?
0727   30 0F                  JR   nc,num2   ; not a digit, exit loop
0729   03                     INC   bc   ; inc IP
072A   54 5D                  LD   de,hl   ; multiply hl * 10
072C   29                     ADD   hl,hl   
072D   29                     ADD   hl,hl   
072E   19                     ADD   hl,de   
072F   29                     ADD   hl,hl   
0730   85                     ADD   a,l   ; add digit in a to hl
0731   6F                     LD   l,a   
0732   3E 00                  LD   a,0   
0734   8C                     ADC   a,h   
0735   67                     LD   h,a   
0736   18 E8                  JR   num1   
0738                NUM2:        
0738   0B                     DEC   bc   
0739   08                     EX   af,af'   ; restore zero flag
073A   20 07                  JR   nz,num3   
073C   EB                     EX   de,hl   ; negate the value of hl
073D   21 00 00               LD   hl,0   
0740   B7                     OR   a   ; jump to sub2
0741   ED 52                  SBC   hl,de   
0743                NUM3:        
0743   E5                     PUSH   hl   ; Put the number on the stack
0744   DD E9                  JP   (ix)   ; and process the next character
0746                REMAIN:      
0746   2A F6 3D               LD   hl,(vRemain)   
0749   E5                     PUSH   hl   
074A   DD E9                  JP   (ix)   
074C                             ; shiftLeft
074C                             ; value count -- value2          shift left count places
074C                SHIFTLEFT:      
074C   50 59                  LD   de,bc   ; save IP
074E   C1                     POP   bc   ; bc = count
074F   41                     LD   b,c   ; b = loop counter
0750   E1                     POP   hl   
0751   04                     INC   b   ; test for counter=0 case
0752   18 01                  JR   shiftLeft2   
0754                SHIFTLEFT1:      
0754   29                     ADD   hl,hl   ; left shift hl
0755                SHIFTLEFT2:      
0755   10 FD                  DJNZ   shiftLeft1   
0757   E5                     PUSH   hl   
0758   42 4B                  LD   bc,de   ; restore IP
075A   DD E9                  JP   (ix)   
075C                             ; shiftRight
075C                             ; value count -- value2          shift left count places
075C                SHIFTRIGHT:      
075C   50 59                  LD   de,bc   ; save IP
075E   C1                     POP   bc   ; bc = count
075F   41                     LD   b,c   ; b = loop counter
0760   E1                     POP   hl   
0761   04                     INC   b   ; test for counter=0 case
0762   18 04                  JR   shiftRight2   
0764                SHIFTRIGHT1:      
0764   CB 3C                  SRL   h   ; right shift hl
0766   CB 1D                  RR   l   
0768                SHIFTRIGHT2:      
0768   10 FA                  DJNZ   shiftRight1   
076A   E5                     PUSH   hl   
076B   42 4B                  LD   bc,de   ; restore IP
076D   DD E9                  JP   (ix)   
076F                             ; string
076F                             ; -- ptr                        ; points to start of string chars,
076F                             ; length is stored at start - 2 bytes
076F                STRING:      
076F   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
0772   23                     INC   hl   ; skip length field to start
0773   23                     INC   hl   
0774   E5                     PUSH   hl   ; save start of string
0775   03                     INC   bc   ; point to next char
0776   18 03                  JR   string2   
0778                STRING1:      
0778   77                     LD   (hl),a   
0779   23                     INC   hl   ; increase count
077A   03                     INC   bc   ; point to next char
077B                STRING2:      
077B   0A                     LD   a,(bc)   
077C   FE 22                  CP   DQUOTE   ; " is the string terminator
077E   20 F8                  JR   nz,string1   
0780   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0782   20 F4                  JR   nz,string1   
0784   AF                     XOR   a   ; write NUL to terminate string
0785   77                     LD   (hl),a   ; hl = end of string
0786   23                     INC   hl   
0787   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
078A   2B                     DEC   hl   ; hl = end of string without terminator
078B   D1                     POP   de   ; de = start of string
078C   D5                     PUSH   de   ; return start of string
078D   B7                     OR   a   ; hl = length bytes, de = start of string
078E   ED 52                  SBC   hl,de   
0790   EB                     EX   de,hl   
0791   2B                     DEC   hl   ; write length bytes to length field at start - 2
0792   72                     LD   (hl),d   
0793   2B                     DEC   hl   
0794   73                     LD   (hl),e   
0795   DD E9                  JP   (ix)   
0797                SUB:         ; negative sign or subtract
0797   03                     INC   bc   ; check if sign of a number
0798   0A                     LD   a,(bc)   
0799   0B                     DEC   bc   
079A   FE 30                  CP   "0"   
079C   38 05                  JR   c,sub0   
079E   FE 3A                  CP   "9"+1   
07A0   DA 47 03               JP   c,num_   
07A3                SUB0:        ; Subtract the value 2nd on stack from top of stack
07A3   03                     INC   bc   
07A4   FE 2D                  CP   "-"   
07A6   20 05                  JR   nz,sub1   
07A8   E1                     POP   hl   
07A9   2B                     DEC   hl   
07AA   C3 BA 04               JP   assign0   
07AD                SUB1:        
07AD   0B                     DEC   bc   
07AE   D1                     POP   de   
07AF   E1                     POP   hl   
07B0   B7                     OR   a   
07B1   ED 52                  SBC   hl,de   
07B3   C3 99 03               JP   add3   
07B6                             ;*******************************************************************
07B6                             ; commands
07B6                             ;*******************************************************************
07B6                COMMAND:      
07B6   03                     INC   bc   
07B7   0A                     LD   a,(bc)   
07B8   FE 5C                  CP   $5C   ; \\ comment
07BA   CA 31 08               JP   z,comment   
07BD   FE 61                  CP   "a"   ; \a absolute
07BF   CA 04 08               JP   z,abs1   
07C2   FE 62                  CP   "b"   ; \b bytes
07C4   CA 68 08               JP   z,bytes   
07C7   FE 63                  CP   "c"   ; \c closure
07C9   CA 11 08               JP   z,closure   
07CC   FE 66                  CP   "f"   ; \f func
07CE   CA 70 08               JP   z,func   
07D1   FE 46                  CP   "F"   ; \F false
07D3   CA 0B 06               JP   z,false1   
07D6   FE 69                  CP   "i"   ; \i input
07D8   CA 8C 08               JP   z,input   
07DB   FE 6B                  CP   "k"   ; \k key
07DD   CA 97 08               JP   z,key   
07E0   FE 6F                  CP   "o"   ; \o output
07E2   CA A0 08               JP   z,output   
07E5   FE 72                  CP   "r"   ; \r repeat
07E7   CA 60 08               JP   z,repeat   
07EA   FE 73                  CP   "s"   ; \s select
07EC   CA A9 08               JP   z,select   
07EF   FE 54                  CP   "T"   ; \T true
07F1   CA 05 06               JP   z,true1   
07F4   FE 77                  CP   "w"   ; \w words
07F6   CA B3 08               JP   z,words   
07F9   FE 78                  CP   "x"   ; \x exit loop or block
07FB   CA 3A 08               JP   z,break   
07FE   21 01 00               LD   hl,1   ; error 1: unknown command
0801   C3 18 0A               JP   error   
0804                ABS1:        
0804   E1                     POP   hl   
0805   CB 7C                  BIT   7,h   
0807   C8                     RET   z   
0808   AF                     XOR   a   
0809   95                     SUB   l   
080A   6F                     LD   l,a   
080B   9F                     SBC   a,a   
080C   94                     SUB   h   
080D   67                     LD   h,a   
080E   E5                     PUSH   hl   
080F   DD E9                  JP   (ix)   
0811                             ; closure
0811                             ; array* func* -- func1*
0811                CLOSURE:      
0811   E1                     POP   hl   ; h1 = func*
0812   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = heap* = closure*
0816   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
081A   01 06 00               LD   bc,6   ; bc = count
081D   ED B0                  LDIR      ; clone func
081F   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
0823   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap* = closure*
0826   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += 6
082A   D1                     POP   de   ; de = array*
082B   E5                     PUSH   hl   ; return closure*
082C   73                     LD   (hl),e   ; compile array*
082D   23                     INC   hl   
082E   72                     LD   (hl),d   
082F   DD E9                  JP   (ix)   
0831                COMMENT:      
0831   03                     INC   bc   ; point to next char
0832   0A                     LD   a,(bc)   
0833   FE 20                  CP   " "   ; terminate on any char less than SP
0835   30 FA                  JR   nc,comment   
0837   0B                     DEC   bc   
0838   DD E9                  JP   (ix)   
083A                BREAK:       
083A   E1                     POP   hl   
083B   7D                     LD   a,l   
083C   B4                     OR   h   
083D   28 02                  JR   z,break1   
083F   DD E9                  JP   (ix)   
0841                BREAK1:      
0841   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
0844   FD 66 07               LD   h,(iy+7)   
0847   23                     INC   hl   ; forward IP on stack to after \r
0848   23                     INC   hl   
0849   FD 75 06               LD   (iy+6),l   
084C   FD 74 07               LD   (iy+7),h   
084F   FD 5E 02               LD   e,(iy+2)   ; dec first_arg*
0852   FD 56 03               LD   d,(iy+3)   
0855   13                     INC   de   
0856   13                     INC   de   
0857   FD 73 02               LD   (iy+2),e   
085A   FD 72 03               LD   (iy+3),d   
085D   C3 32 05               JP   blockEnd   
0860                             ; repeat
0860                             ; block* --
0860                REPEAT:      
0860   0B                     DEC   bc   ; rewind IP to before \r
0861   0B                     DEC   bc   
0862   E1                     POP   hl   
0863   E5                     PUSH   hl   
0864   E5                     PUSH   hl   
0865   C3 11 06               JP   go   
0868                BYTES:       
0868   21 01 00               LD   hl,1   
086B                BYTES1:      
086B   22 E6 3D               LD   (vDataWidth),hl   
086E   DD E9                  JP   (ix)   
0870                             ; arg_list* block* -- ptr
0870                FUNC:        
0870   D1                     POP   de   ; de = block* hl = heap*
0871   2A EC 3D               LD   hl,(vHeapPtr)   
0874   AF                     XOR   a   
0875   77                     LD   (hl),a   ; compile null closure*
0876   23                     INC   hl   
0877   77                     LD   (hl),a   
0878   23                     INC   hl   
0879   73                     LD   (hl),e   ; compile block*
087A   23                     INC   hl   
087B   72                     LD   (hl),d   
087C   23                     INC   hl   
087D   D1                     POP   de   ; de = block*
087E   73                     LD   (hl),e   ; compile arg_list*
087F   23                     INC   hl   
0880   72                     LD   (hl),d   
0881   23                     INC   hl   
0882   ED 5B EC 3D            LD   de,(vHeapPtr)   ; return func*
0886   D5                     PUSH   de   
0887   22 EC 3D               LD   (vHeapPtr),hl   ; heap* += 4
088A   DD E9                  JP   (ix)   
088C                             ; Z80 port input
088C                             ; port -- value
088C                INPUT:       
088C   E1                     POP   hl   
088D   59                     LD   e,c   ; save IP
088E   4D                     LD   c,l   
088F   ED 68                  IN   l,(c)   
0891   26 00                  LD   h,0   
0893   4B                     LD   c,e   ; restore IP
0894   E5                     PUSH   hl   
0895   DD E9                  JP   (ix)   
0897                KEY:         
0897   CD 81 00               CALL   getchar   
089A   26 00                  LD   h,0   
089C   6F                     LD   l,a   
089D   E5                     PUSH   hl   
089E   DD E9                  JP   (ix)   
08A0                             ; Z80 port output
08A0                             ; value port --
08A0                OUTPUT:      
08A0   E1                     POP   hl   
08A1   59                     LD   e,c   ; save IP
08A2   4D                     LD   c,l   
08A3   E1                     POP   hl   
08A4   ED 69                  OUT   (c),l   
08A6   4B                     LD   c,e   ; restore IP
08A7   DD E9                  JP   (ix)   
08A9                             ; select
08A9                             ; index array -- value
08A9                SELECT:      
08A9   D1                     POP   de   ; de = array
08AA   E1                     POP   hl   ; hl = index
08AB   29                     ADD   hl,hl   ; if data width = 2 then double
08AC   19                     ADD   hl,de   ; add addr
08AD   5E                     LD   e,(hl)   
08AE   23                     INC   hl   
08AF   56                     LD   d,(hl)   
08B0   C3 12 06               JP   go1   
08B3                WORDS:       
08B3   21 02 00               LD   hl,2   
08B6   C3 6B 08               JP   bytes1   
08B9                             ; 
08B9                             ; 
08B9                             ; 
08B9                             ; 
08B9                FILTER:      
08B9                MAP:         
08B9                SCAN:        
08B9   DD E9                  JP   (ix)   
08BB                             ; print decimal
08BB                             ; hl = value
08BB                PRTDEC:      
08BB   CB 7C                  BIT   7,h   
08BD   28 0B                  JR   z,prtdec0   
08BF   3E 2D                  LD   a,"-"   
08C1   CD 85 00               CALL   putchar   
08C4   AF                     XOR   a   
08C5   95                     SUB   l   
08C6   6F                     LD   l,a   
08C7   9F                     SBC   a,a   
08C8   94                     SUB   h   
08C9   67                     LD   h,a   
08CA                PRTDEC0:      
08CA   C5                     PUSH   bc   
08CB   0E 00                  LD   c,0   ; leading zeros flag = false
08CD   11 F0 D8               LD   de,-10000   
08D0   CD EC 08               CALL   prtdec1   
08D3   11 18 FC               LD   de,-1000   
08D6   CD EC 08               CALL   prtdec1   
08D9   11 9C FF               LD   de,-100   
08DC   CD EC 08               CALL   prtdec1   
08DF   1E F6                  LD   e,-10   
08E1   CD EC 08               CALL   prtdec1   
08E4   0C                     INC   c   ; flag = true for at least digit
08E5   1E FF                  LD   e,-1   
08E7   CD EC 08               CALL   prtdec1   
08EA   C1                     POP   bc   
08EB   C9                     RET      
08EC                PRTDEC1:      
08EC   06 2F                  LD   b,"0"-1   
08EE                PRTDEC2:      
08EE   04                     INC   b   
08EF   19                     ADD   hl,de   
08F0   38 FC                  JR   c,prtdec2   
08F2   ED 52                  SBC   hl,de   
08F4   3E 30                  LD   a,"0"   
08F6   B8                     CP   b   
08F7   20 05                  JR   nz,prtdec3   
08F9   AF                     XOR   a   
08FA   B1                     OR   c   
08FB   C8                     RET   z   
08FC   18 01                  JR   prtdec4   
08FE                PRTDEC3:      
08FE   0C                     INC   c   
08FF                PRTDEC4:      
08FF   78                     LD   a,b   
0900   C3 85 00               JP   putchar   
0903                PRTHEX:      ; display hl as a 16-bit number in hex.
0903   C5                     PUSH   bc   ; preserve the IP
0904   7C                     LD   a,h   
0905   CD 0E 09               CALL   prthex2   
0908   7D                     LD   a,l   
0909   CD 0E 09               CALL   prthex2   
090C   C1                     POP   bc   
090D   C9                     RET      
090E                PRTHEX2:      
090E   4F                     LD   c,a   
090F   1F                     RRA      
0910   1F                     RRA      
0911   1F                     RRA      
0912   1F                     RRA      
0913   CD 17 09               CALL   prthex3   
0916   79                     LD   a,c   
0917                PRTHEX3:      
0917   E6 0F                  AND   0x0F   
0919   C6 90                  ADD   a,0x90   
091B   27                     DAA      
091C   CE 40                  ADC   a,0x40   
091E   27                     DAA      
091F   C3 85 00               JP   putchar   
0922                PRTSTR0:      
0922   CD 85 00               CALL   putchar   
0925   23                     INC   hl   
0926                PRTSTR:      
0926   7E                     LD   a,(hl)   
0927   B7                     OR   a   
0928   20 F8                  JR   nz,prtstr0   
092A   C9                     RET      
092B                             ; **************************************************************************
092B                             ; calculate nesting value
092B                             ; a is char to be tested,
092B                             ; e is the nesting value (initially 0)
092B                             ; e is increased by ( and [
092B                             ; e is decreased by ) and ]
092B                             ; e has its bit 7 toggled by `
092B                             ; limited to 127 levels
092B                             ; **************************************************************************
092B                NESTING:      
092B   FE 22                  CP   DQUOTE   ; quote char
092D   28 06                  JR   z,nesting0   
092F   FE 60                  CP   "`"   ; quote char
0931   28 02                  JR   z,nesting0   
0933   18 0A                  JR   nesting1   
0935                NESTING0:      
0935   CB 7B                  BIT   7,e   
0937   28 03                  JR   z,nesting1a   
0939   CB BB                  RES   7,e   
093B   C9                     RET      
093C                NESTING1A:      
093C   CB FB                  SET   7,e   
093E   C9                     RET      
093F                NESTING1:      
093F   CB 7B                  BIT   7,e   
0941   C0                     RET   nz   
0942   FE 7B                  CP   "{"   
0944   28 08                  JR   z,nesting2   
0946   FE 5B                  CP   "["   
0948   28 04                  JR   z,nesting2   
094A   FE 28                  CP   "("   
094C   20 02                  JR   nz,nesting3   
094E                NESTING2:      
094E   1C                     INC   e   
094F   C9                     RET      
0950                NESTING3:      
0950   FE 7D                  CP   "}"   
0952   28 07                  JR   z,nesting4   
0954   FE 5D                  CP   "]"   
0956   28 03                  JR   z,nesting4   
0958   FE 29                  CP   ")"   
095A   C0                     RET   nz   
095B                NESTING4:      
095B   1D                     DEC   e   
095C   C9                     RET      
095D                PROMPT:      
095D   CD 6D 09               CALL   printStr   
0960   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0965   C9                     RET      
0966                CRLF:        
0966   CD 6D 09               CALL   printStr   
0969   0D 0A 00               .CSTR   "\r\n"   
096C   C9                     RET      
096D                             ; prints a null teminated string
096D                             ; the string should be immedaitely following the call
096D                PRINTSTR:      
096D   E3                     EX   (sp),hl   ; swap			
096E   CD 26 09               CALL   prtstr   
0971   23                     INC   hl   ; inc past NUL
0972   E3                     EX   (sp),hl   ; put it back	
0973   C9                     RET      
0974                INIT:        
0974   DD 2A EA 3D            LD   ix,(vNext)   
0978   FD 21 80 3C            LD   iy,STACK   
097C   21 80 01               LD   hl,isysVars   
097F   11 E6 3D               LD   de,sysVars   
0982   01 10 00               LD   bc,8 * 2   
0985   ED B0                  LDIR      
0987   21 00 3D               LD   hl,vars   ; 52 vars LO HI
098A   06 34                  LD   b,26*2   
098C   AF                     XOR   a   
098D                INIT0:       
098D   77                     LD   (hl),a   
098E   23                     INC   hl   
098F   10 FC                  DJNZ   init0   
0991   C9                     RET      
0992                START:       
0992   31 80 3C               LD   sp,STACK   ; start of monty
0995   CD 74 09               CALL   init   ; setups
0998   CD 6D 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
099B   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09A8                INTERPRET:      
09A8   CD 5D 09               CALL   prompt   
09AB   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09AE   ED 43 E8 3D            LD   (vTIBPtr),bc   
09B2                INTERPRET2:      ; calc nesting (a macro might have changed it)
09B2   1E 00                  LD   e,0   ; initilize nesting value
09B4   C5                     PUSH   bc   ; save offset into TIB,
09B5                             ; bc is also the count of chars in TIB
09B5   21 00 3E               LD   hl,TIB   ; hl is start of TIB
09B8   18 06                  JR   interpret4   
09BA                INTERPRET3:      
09BA   7E                     LD   a,(hl)   ; a = char in TIB
09BB   23                     INC   hl   ; inc pointer into TIB
09BC   0B                     DEC   bc   ; dec count of chars in TIB
09BD   CD 2B 09               CALL   nesting   ; update nesting value
09C0                INTERPRET4:      
09C0   79                     LD   a,c   ; is count zero?
09C1   B0                     OR   b   
09C2   20 F6                  JR   nz,interpret3   ; if not loop
09C4   C1                     POP   bc   ; restore offset into TIB
09C5                INTERPRET5:      
09C5   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09C8   FE 20                  CP   $20   ; compare to space
09CA   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09CC   FE 00                  CP   $0   ; is it end of string? NUL end of string
09CE                             ; ???? NEEDED?
09CE   28 27                  JR   z,interpret8   
09D0   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09D2   28 10                  JR   z,interpret7   ; if anything else its macro/control
09D4                             ; macro
09D4                             ;  ld (vTIBPtr),bc
09D4                             ;  ld hl,ctrlCodes
09D4                             ;  add a,l			            ; look up key of macros
09D4                             ;  ld l,a
09D4                             ;  ld e,(hl)
09D4                             ;  ld a,e
09D4                             ;  or a
09D4                             ;  jr z,macro1
09D4                             ;  ld d,msb(macros)
09D4                             ;  push de
09D4                             ;  call call		            ; monty exec_ operation and jump to it
09D4                             ;  db DC1,0
09D4                             ; macro1:
09D4                             ;  ld bc,(vTIBPtr)
09D4   18 DC                  JR   interpret2   
09D6                INTERPRET6:      
09D6   21 00 3E               LD   hl,TIB   
09D9   09                     ADD   hl,bc   
09DA   77                     LD   (hl),a   ; store the character in textbuf
09DB   03                     INC   bc   
09DC   CD 85 00               CALL   putchar   ; echo character to screen
09DF   CD 2B 09               CALL   nesting   
09E2   18 E1                  JR   interpret5   ; wait for next character
09E4                INTERPRET7:      
09E4   21 00 3E               LD   hl,TIB   
09E7   09                     ADD   hl,bc   
09E8   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09EA   23                     INC   hl   
09EB   36 0A                  LD   (hl),"\n"   
09ED   23                     INC   hl   
09EE   03                     INC   bc   
09EF   03                     INC   bc   
09F0   CD 66 09               CALL   crlf   ; echo character to screen
09F3   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09F4   B7                     OR   a   
09F5   20 CE                  JR   nz,interpret5   
09F7                INTERPRET8:      
09F7   ED 43 E8 3D            LD   (vTIBPtr),bc   
09FB   01 00 3E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09FE                             ; we pressed enter
09FE   0B                     DEC   bc   
09FF                NEXT:        
09FF   03                     INC   bc   ; Increment the IP
0A00   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A01   FE 20                  CP   " "   ; whitespace?
0A03   28 FA                  JR   z,next   ; space? ignore
0A05   38 07                  JR   c,next1   
0A07   6F                     LD   l,a   ; index into table
0A08   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A0A   6E                     LD   l,(hl)   ; get low jump address
0A0B   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A0D   E9                     JP   (hl)   ; Jump to routine
0A0E                NEXT1:       
0A0E   FE 00                  CP   NUL   ; end of input string?
0A10   28 03                  JR   z,exit_   
0A12   C3 A8 09               JP   interpret   ; no, other whitespace, macros?
0A15                EXIT_:       
0A15   60 69                  LD   hl,bc   
0A17   E9                     JP   (hl)   
0A18                ERROR:       
0A18   CD 6D 09               CALL   printStr   
0A1B   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A22   CD BB 08               CALL   prtdec   
0A25   C3 A8 09               JP   interpret   
0A28                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                          ;*Macro unroll:  test "1 x= { x \\x x-- } \\r + ", $4002
0B00   31 80 3C               LD   SP,STACK   
0B03   CD 74 09               CALL   init   
0B06   CD 26 3B               CALL   execStr   
0B09   31 20 78 3D 20 7B 20 78 20 5C 78 20 78 2D 2D 20 7D 20 5C 72 20 2B 20 00 .CSTR   "1 x= { x \\x x-- } \\r + "   
0B21                          ;*Macro unroll:  expect "1 x= { x \\x x-- } \\r + ",$4002
0B21   E1                     POP   HL   
0B22   E5                     PUSH   HL   
0B23   11 02 40               LD   DE,$4002   
0B26   B7                     OR   A   
0B27   ED 52                  SBC   HL,DE   
0B29   7D                     LD   A,L   
0B2A   B4                     OR   H   
0B2B   28 62                  JR   Z,expectM_0_2099S43   
0B2D   CD 6D 09               CALL   printStr   
0B30   43 6F 64 65 3A 20 31 20 78 3D 20 7B 20 78 20 5C 78 20 78 2D 2D 20 7D 20 5C 72 20 2B 20 00 .CSTR   "Code: ","1 x= { x \\x x-- } \\r + "   
0B4E   CD 6D 09               CALL   printStr   
0B51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B60   21 02 40               LD   HL,$4002   
0B63   CD BB 08               CALL   prtdec   
0B66   CD 6D 09               CALL   printStr   
0B69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B76   E1                     POP   hl   
0B77   E5                     PUSH   hl   
0B78   CD BB 08               CALL   prtdec   
0B7B   E1                     POP   hl   
0B7C   CD 6D 09               CALL   printStr   
0B7F   20 28 23 00            .CSTR   " (#"   
0B83   CD 03 09               CALL   prthex   
0B86   CD 6D 09               CALL   printStr   
0B89   29 0D 0A 00            .CSTR   ")\r\n"   
0B8D   76                     HALT      
0B8E   00                     .CSTR      
0B8F                EXPECTM_0_2099S43:      
0B8F   E1                     POP   HL   
0B90                             ; test "1 i= { i i \\x i-- } \\r", $4002
0B90                             ; call printStr
0B90                             ; .cstr "Done!"
0B90                             ; HALT
0B90                             ; 
0B90                          ;*Macro unroll:  test "\\F", false
0B90   31 80 3C               LD   SP,STACK   
0B93   CD 74 09               CALL   init   
0B96   CD 26 3B               CALL   execStr   
0B99   5C 46 00               .CSTR   "\\F"   
0B9C                          ;*Macro unroll:  expect "\\F",false
0B9C   E1                     POP   HL   
0B9D   E5                     PUSH   HL   
0B9E   11 00 00               LD   DE,false   
0BA1   B7                     OR   A   
0BA2   ED 52                  SBC   HL,DE   
0BA4   7D                     LD   A,L   
0BA5   B4                     OR   H   
0BA6   28 4D                  JR   Z,expectM_0_2105S43   
0BA8   CD 6D 09               CALL   printStr   
0BAB   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0BB4   CD 6D 09               CALL   printStr   
0BB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BC6   21 00 00               LD   HL,false   
0BC9   CD BB 08               CALL   prtdec   
0BCC   CD 6D 09               CALL   printStr   
0BCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BDC   E1                     POP   hl   
0BDD   E5                     PUSH   hl   
0BDE   CD BB 08               CALL   prtdec   
0BE1   E1                     POP   hl   
0BE2   CD 6D 09               CALL   printStr   
0BE5   20 28 23 00            .CSTR   " (#"   
0BE9   CD 03 09               CALL   prthex   
0BEC   CD 6D 09               CALL   printStr   
0BEF   29 0D 0A 00            .CSTR   ")\r\n"   
0BF3   76                     HALT      
0BF4   00                     .CSTR      
0BF5                EXPECTM_0_2105S43:      
0BF5   E1                     POP   HL   
0BF6                          ;*Macro unroll:  test "\\T", true
0BF6   31 80 3C               LD   SP,STACK   
0BF9   CD 74 09               CALL   init   
0BFC   CD 26 3B               CALL   execStr   
0BFF   5C 54 00               .CSTR   "\\T"   
0C02                          ;*Macro unroll:  expect "\\T",true
0C02   E1                     POP   HL   
0C03   E5                     PUSH   HL   
0C04   11 FF FF               LD   DE,true   
0C07   B7                     OR   A   
0C08   ED 52                  SBC   HL,DE   
0C0A   7D                     LD   A,L   
0C0B   B4                     OR   H   
0C0C   28 4D                  JR   Z,expectM_0_2106S43   
0C0E   CD 6D 09               CALL   printStr   
0C11   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0C1A   CD 6D 09               CALL   printStr   
0C1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C2C   21 FF FF               LD   HL,true   
0C2F   CD BB 08               CALL   prtdec   
0C32   CD 6D 09               CALL   printStr   
0C35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C42   E1                     POP   hl   
0C43   E5                     PUSH   hl   
0C44   CD BB 08               CALL   prtdec   
0C47   E1                     POP   hl   
0C48   CD 6D 09               CALL   printStr   
0C4B   20 28 23 00            .CSTR   " (#"   
0C4F   CD 03 09               CALL   prthex   
0C52   CD 6D 09               CALL   printStr   
0C55   29 0D 0A 00            .CSTR   ")\r\n"   
0C59   76                     HALT      
0C5A   00                     .CSTR      
0C5B                EXPECTM_0_2106S43:      
0C5B   E1                     POP   HL   
0C5C                          ;*Macro unroll:  test "1", 1
0C5C   31 80 3C               LD   SP,STACK   
0C5F   CD 74 09               CALL   init   
0C62   CD 26 3B               CALL   execStr   
0C65   31 00                  .CSTR   "1"   
0C67                          ;*Macro unroll:  expect "1",1
0C67   E1                     POP   HL   
0C68   E5                     PUSH   HL   
0C69   11 01 00               LD   DE,1   
0C6C   B7                     OR   A   
0C6D   ED 52                  SBC   HL,DE   
0C6F   7D                     LD   A,L   
0C70   B4                     OR   H   
0C71   28 4C                  JR   Z,expectM_0_2107S43   
0C73   CD 6D 09               CALL   printStr   
0C76   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0C7E   CD 6D 09               CALL   printStr   
0C81   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C90   21 01 00               LD   HL,1   
0C93   CD BB 08               CALL   prtdec   
0C96   CD 6D 09               CALL   printStr   
0C99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CA6   E1                     POP   hl   
0CA7   E5                     PUSH   hl   
0CA8   CD BB 08               CALL   prtdec   
0CAB   E1                     POP   hl   
0CAC   CD 6D 09               CALL   printStr   
0CAF   20 28 23 00            .CSTR   " (#"   
0CB3   CD 03 09               CALL   prthex   
0CB6   CD 6D 09               CALL   printStr   
0CB9   29 0D 0A 00            .CSTR   ")\r\n"   
0CBD   76                     HALT      
0CBE   00                     .CSTR      
0CBF                EXPECTM_0_2107S43:      
0CBF   E1                     POP   HL   
0CC0                          ;*Macro unroll:  test "2", 2
0CC0   31 80 3C               LD   SP,STACK   
0CC3   CD 74 09               CALL   init   
0CC6   CD 26 3B               CALL   execStr   
0CC9   32 00                  .CSTR   "2"   
0CCB                          ;*Macro unroll:  expect "2",2
0CCB   E1                     POP   HL   
0CCC   E5                     PUSH   HL   
0CCD   11 02 00               LD   DE,2   
0CD0   B7                     OR   A   
0CD1   ED 52                  SBC   HL,DE   
0CD3   7D                     LD   A,L   
0CD4   B4                     OR   H   
0CD5   28 4C                  JR   Z,expectM_0_2108S43   
0CD7   CD 6D 09               CALL   printStr   
0CDA   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0CE2   CD 6D 09               CALL   printStr   
0CE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CF4   21 02 00               LD   HL,2   
0CF7   CD BB 08               CALL   prtdec   
0CFA   CD 6D 09               CALL   printStr   
0CFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D0A   E1                     POP   hl   
0D0B   E5                     PUSH   hl   
0D0C   CD BB 08               CALL   prtdec   
0D0F   E1                     POP   hl   
0D10   CD 6D 09               CALL   printStr   
0D13   20 28 23 00            .CSTR   " (#"   
0D17   CD 03 09               CALL   prthex   
0D1A   CD 6D 09               CALL   printStr   
0D1D   29 0D 0A 00            .CSTR   ")\r\n"   
0D21   76                     HALT      
0D22   00                     .CSTR      
0D23                EXPECTM_0_2108S43:      
0D23   E1                     POP   HL   
0D24                          ;*Macro unroll:  test "1", 1
0D24   31 80 3C               LD   SP,STACK   
0D27   CD 74 09               CALL   init   
0D2A   CD 26 3B               CALL   execStr   
0D2D   31 00                  .CSTR   "1"   
0D2F                          ;*Macro unroll:  expect "1",1
0D2F   E1                     POP   HL   
0D30   E5                     PUSH   HL   
0D31   11 01 00               LD   DE,1   
0D34   B7                     OR   A   
0D35   ED 52                  SBC   HL,DE   
0D37   7D                     LD   A,L   
0D38   B4                     OR   H   
0D39   28 4C                  JR   Z,expectM_0_2109S43   
0D3B   CD 6D 09               CALL   printStr   
0D3E   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0D46   CD 6D 09               CALL   printStr   
0D49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D58   21 01 00               LD   HL,1   
0D5B   CD BB 08               CALL   prtdec   
0D5E   CD 6D 09               CALL   printStr   
0D61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D6E   E1                     POP   hl   
0D6F   E5                     PUSH   hl   
0D70   CD BB 08               CALL   prtdec   
0D73   E1                     POP   hl   
0D74   CD 6D 09               CALL   printStr   
0D77   20 28 23 00            .CSTR   " (#"   
0D7B   CD 03 09               CALL   prthex   
0D7E   CD 6D 09               CALL   printStr   
0D81   29 0D 0A 00            .CSTR   ")\r\n"   
0D85   76                     HALT      
0D86   00                     .CSTR      
0D87                EXPECTM_0_2109S43:      
0D87   E1                     POP   HL   
0D88                          ;*Macro unroll:  test "0", 0
0D88   31 80 3C               LD   SP,STACK   
0D8B   CD 74 09               CALL   init   
0D8E   CD 26 3B               CALL   execStr   
0D91   30 00                  .CSTR   "0"   
0D93                          ;*Macro unroll:  expect "0",0
0D93   E1                     POP   HL   
0D94   E5                     PUSH   HL   
0D95   11 00 00               LD   DE,0   
0D98   B7                     OR   A   
0D99   ED 52                  SBC   HL,DE   
0D9B   7D                     LD   A,L   
0D9C   B4                     OR   H   
0D9D   28 4C                  JR   Z,expectM_0_2110S43   
0D9F   CD 6D 09               CALL   printStr   
0DA2   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0DAA   CD 6D 09               CALL   printStr   
0DAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DBC   21 00 00               LD   HL,0   
0DBF   CD BB 08               CALL   prtdec   
0DC2   CD 6D 09               CALL   printStr   
0DC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DD2   E1                     POP   hl   
0DD3   E5                     PUSH   hl   
0DD4   CD BB 08               CALL   prtdec   
0DD7   E1                     POP   hl   
0DD8   CD 6D 09               CALL   printStr   
0DDB   20 28 23 00            .CSTR   " (#"   
0DDF   CD 03 09               CALL   prthex   
0DE2   CD 6D 09               CALL   printStr   
0DE5   29 0D 0A 00            .CSTR   ")\r\n"   
0DE9   76                     HALT      
0DEA   00                     .CSTR      
0DEB                EXPECTM_0_2110S43:      
0DEB   E1                     POP   HL   
0DEC                          ;*Macro unroll:  test "10", 10
0DEC   31 80 3C               LD   SP,STACK   
0DEF   CD 74 09               CALL   init   
0DF2   CD 26 3B               CALL   execStr   
0DF5   31 30 00               .CSTR   "10"   
0DF8                          ;*Macro unroll:  expect "10",10
0DF8   E1                     POP   HL   
0DF9   E5                     PUSH   HL   
0DFA   11 0A 00               LD   DE,10   
0DFD   B7                     OR   A   
0DFE   ED 52                  SBC   HL,DE   
0E00   7D                     LD   A,L   
0E01   B4                     OR   H   
0E02   28 4D                  JR   Z,expectM_0_2111S43   
0E04   CD 6D 09               CALL   printStr   
0E07   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0E10   CD 6D 09               CALL   printStr   
0E13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E22   21 0A 00               LD   HL,10   
0E25   CD BB 08               CALL   prtdec   
0E28   CD 6D 09               CALL   printStr   
0E2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E38   E1                     POP   hl   
0E39   E5                     PUSH   hl   
0E3A   CD BB 08               CALL   prtdec   
0E3D   E1                     POP   hl   
0E3E   CD 6D 09               CALL   printStr   
0E41   20 28 23 00            .CSTR   " (#"   
0E45   CD 03 09               CALL   prthex   
0E48   CD 6D 09               CALL   printStr   
0E4B   29 0D 0A 00            .CSTR   ")\r\n"   
0E4F   76                     HALT      
0E50   00                     .CSTR      
0E51                EXPECTM_0_2111S43:      
0E51   E1                     POP   HL   
0E52                          ;*Macro unroll:  test "123", 123
0E52   31 80 3C               LD   SP,STACK   
0E55   CD 74 09               CALL   init   
0E58   CD 26 3B               CALL   execStr   
0E5B   31 32 33 00            .CSTR   "123"   
0E5F                          ;*Macro unroll:  expect "123",123
0E5F   E1                     POP   HL   
0E60   E5                     PUSH   HL   
0E61   11 7B 00               LD   DE,123   
0E64   B7                     OR   A   
0E65   ED 52                  SBC   HL,DE   
0E67   7D                     LD   A,L   
0E68   B4                     OR   H   
0E69   28 4E                  JR   Z,expectM_0_2112S43   
0E6B   CD 6D 09               CALL   printStr   
0E6E   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0E78   CD 6D 09               CALL   printStr   
0E7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E8A   21 7B 00               LD   HL,123   
0E8D   CD BB 08               CALL   prtdec   
0E90   CD 6D 09               CALL   printStr   
0E93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EA0   E1                     POP   hl   
0EA1   E5                     PUSH   hl   
0EA2   CD BB 08               CALL   prtdec   
0EA5   E1                     POP   hl   
0EA6   CD 6D 09               CALL   printStr   
0EA9   20 28 23 00            .CSTR   " (#"   
0EAD   CD 03 09               CALL   prthex   
0EB0   CD 6D 09               CALL   printStr   
0EB3   29 0D 0A 00            .CSTR   ")\r\n"   
0EB7   76                     HALT      
0EB8   00                     .CSTR      
0EB9                EXPECTM_0_2112S43:      
0EB9   E1                     POP   HL   
0EBA                          ;*Macro unroll:  test "-1",-1
0EBA   31 80 3C               LD   SP,STACK   
0EBD   CD 74 09               CALL   init   
0EC0   CD 26 3B               CALL   execStr   
0EC3   2D 31 00               .CSTR   "-1"   
0EC6                          ;*Macro unroll:  expect "-1",-1
0EC6   E1                     POP   HL   
0EC7   E5                     PUSH   HL   
0EC8   11 FF FF               LD   DE,-1   
0ECB   B7                     OR   A   
0ECC   ED 52                  SBC   HL,DE   
0ECE   7D                     LD   A,L   
0ECF   B4                     OR   H   
0ED0   28 4D                  JR   Z,expectM_0_2113S43   
0ED2   CD 6D 09               CALL   printStr   
0ED5   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0EDE   CD 6D 09               CALL   printStr   
0EE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EF0   21 FF FF               LD   HL,-1   
0EF3   CD BB 08               CALL   prtdec   
0EF6   CD 6D 09               CALL   printStr   
0EF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F06   E1                     POP   hl   
0F07   E5                     PUSH   hl   
0F08   CD BB 08               CALL   prtdec   
0F0B   E1                     POP   hl   
0F0C   CD 6D 09               CALL   printStr   
0F0F   20 28 23 00            .CSTR   " (#"   
0F13   CD 03 09               CALL   prthex   
0F16   CD 6D 09               CALL   printStr   
0F19   29 0D 0A 00            .CSTR   ")\r\n"   
0F1D   76                     HALT      
0F1E   00                     .CSTR      
0F1F                EXPECTM_0_2113S43:      
0F1F   E1                     POP   HL   
0F20                          ;*Macro unroll:  test "''", 0
0F20   31 80 3C               LD   SP,STACK   
0F23   CD 74 09               CALL   init   
0F26   CD 26 3B               CALL   execStr   
0F29   27 27 00               .CSTR   "''"   
0F2C                          ;*Macro unroll:  expect "''",0
0F2C   E1                     POP   HL   
0F2D   E5                     PUSH   HL   
0F2E   11 00 00               LD   DE,0   
0F31   B7                     OR   A   
0F32   ED 52                  SBC   HL,DE   
0F34   7D                     LD   A,L   
0F35   B4                     OR   H   
0F36   28 4D                  JR   Z,expectM_0_2114S43   
0F38   CD 6D 09               CALL   printStr   
0F3B   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0F44   CD 6D 09               CALL   printStr   
0F47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F56   21 00 00               LD   HL,0   
0F59   CD BB 08               CALL   prtdec   
0F5C   CD 6D 09               CALL   printStr   
0F5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F6C   E1                     POP   hl   
0F6D   E5                     PUSH   hl   
0F6E   CD BB 08               CALL   prtdec   
0F71   E1                     POP   hl   
0F72   CD 6D 09               CALL   printStr   
0F75   20 28 23 00            .CSTR   " (#"   
0F79   CD 03 09               CALL   prthex   
0F7C   CD 6D 09               CALL   printStr   
0F7F   29 0D 0A 00            .CSTR   ")\r\n"   
0F83   76                     HALT      
0F84   00                     .CSTR      
0F85                EXPECTM_0_2114S43:      
0F85   E1                     POP   HL   
0F86                          ;*Macro unroll:  test "'a'", $61
0F86   31 80 3C               LD   SP,STACK   
0F89   CD 74 09               CALL   init   
0F8C   CD 26 3B               CALL   execStr   
0F8F   27 61 27 00            .CSTR   "'a'"   
0F93                          ;*Macro unroll:  expect "'a'",$61
0F93   E1                     POP   HL   
0F94   E5                     PUSH   HL   
0F95   11 61 00               LD   DE,$61   
0F98   B7                     OR   A   
0F99   ED 52                  SBC   HL,DE   
0F9B   7D                     LD   A,L   
0F9C   B4                     OR   H   
0F9D   28 4E                  JR   Z,expectM_0_2115S43   
0F9F   CD 6D 09               CALL   printStr   
0FA2   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0FAC   CD 6D 09               CALL   printStr   
0FAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FBE   21 61 00               LD   HL,$61   
0FC1   CD BB 08               CALL   prtdec   
0FC4   CD 6D 09               CALL   printStr   
0FC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FD4   E1                     POP   hl   
0FD5   E5                     PUSH   hl   
0FD6   CD BB 08               CALL   prtdec   
0FD9   E1                     POP   hl   
0FDA   CD 6D 09               CALL   printStr   
0FDD   20 28 23 00            .CSTR   " (#"   
0FE1   CD 03 09               CALL   prthex   
0FE4   CD 6D 09               CALL   printStr   
0FE7   29 0D 0A 00            .CSTR   ")\r\n"   
0FEB   76                     HALT      
0FEC   00                     .CSTR      
0FED                EXPECTM_0_2115S43:      
0FED   E1                     POP   HL   
0FEE                          ;*Macro unroll:  test "'\\''", $27
0FEE   31 80 3C               LD   SP,STACK   
0FF1   CD 74 09               CALL   init   
0FF4   CD 26 3B               CALL   execStr   
0FF7   27 5C 27 27 00         .CSTR   "'\\''"   
0FFC                          ;*Macro unroll:  expect "'\\''",$27
0FFC   E1                     POP   HL   
0FFD   E5                     PUSH   HL   
0FFE   11 27 00               LD   DE,$27   
1001   B7                     OR   A   
1002   ED 52                  SBC   HL,DE   
1004   7D                     LD   A,L   
1005   B4                     OR   H   
1006   28 4F                  JR   Z,expectM_0_2116S43   
1008   CD 6D 09               CALL   printStr   
100B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1016   CD 6D 09               CALL   printStr   
1019   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1028   21 27 00               LD   HL,$27   
102B   CD BB 08               CALL   prtdec   
102E   CD 6D 09               CALL   printStr   
1031   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
103E   E1                     POP   hl   
103F   E5                     PUSH   hl   
1040   CD BB 08               CALL   prtdec   
1043   E1                     POP   hl   
1044   CD 6D 09               CALL   printStr   
1047   20 28 23 00            .CSTR   " (#"   
104B   CD 03 09               CALL   prthex   
104E   CD 6D 09               CALL   printStr   
1051   29 0D 0A 00            .CSTR   ")\r\n"   
1055   76                     HALT      
1056   00                     .CSTR      
1057                EXPECTM_0_2116S43:      
1057   E1                     POP   HL   
1058                          ;*Macro unroll:  test "#10", $10
1058   31 80 3C               LD   SP,STACK   
105B   CD 74 09               CALL   init   
105E   CD 26 3B               CALL   execStr   
1061   23 31 30 00            .CSTR   "#10"   
1065                          ;*Macro unroll:  expect "#10",$10
1065   E1                     POP   HL   
1066   E5                     PUSH   HL   
1067   11 10 00               LD   DE,$10   
106A   B7                     OR   A   
106B   ED 52                  SBC   HL,DE   
106D   7D                     LD   A,L   
106E   B4                     OR   H   
106F   28 4E                  JR   Z,expectM_0_2117S43   
1071   CD 6D 09               CALL   printStr   
1074   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
107E   CD 6D 09               CALL   printStr   
1081   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1090   21 10 00               LD   HL,$10   
1093   CD BB 08               CALL   prtdec   
1096   CD 6D 09               CALL   printStr   
1099   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A6   E1                     POP   hl   
10A7   E5                     PUSH   hl   
10A8   CD BB 08               CALL   prtdec   
10AB   E1                     POP   hl   
10AC   CD 6D 09               CALL   printStr   
10AF   20 28 23 00            .CSTR   " (#"   
10B3   CD 03 09               CALL   prthex   
10B6   CD 6D 09               CALL   printStr   
10B9   29 0D 0A 00            .CSTR   ")\r\n"   
10BD   76                     HALT      
10BE   00                     .CSTR      
10BF                EXPECTM_0_2117S43:      
10BF   E1                     POP   HL   
10C0                          ;*Macro unroll:  test "#FF", $FF
10C0   31 80 3C               LD   SP,STACK   
10C3   CD 74 09               CALL   init   
10C6   CD 26 3B               CALL   execStr   
10C9   23 46 46 00            .CSTR   "#FF"   
10CD                          ;*Macro unroll:  expect "#FF",$FF
10CD   E1                     POP   HL   
10CE   E5                     PUSH   HL   
10CF   11 FF 00               LD   DE,$FF   
10D2   B7                     OR   A   
10D3   ED 52                  SBC   HL,DE   
10D5   7D                     LD   A,L   
10D6   B4                     OR   H   
10D7   28 4E                  JR   Z,expectM_0_2118S43   
10D9   CD 6D 09               CALL   printStr   
10DC   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
10E6   CD 6D 09               CALL   printStr   
10E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10F8   21 FF 00               LD   HL,$FF   
10FB   CD BB 08               CALL   prtdec   
10FE   CD 6D 09               CALL   printStr   
1101   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
110E   E1                     POP   hl   
110F   E5                     PUSH   hl   
1110   CD BB 08               CALL   prtdec   
1113   E1                     POP   hl   
1114   CD 6D 09               CALL   printStr   
1117   20 28 23 00            .CSTR   " (#"   
111B   CD 03 09               CALL   prthex   
111E   CD 6D 09               CALL   printStr   
1121   29 0D 0A 00            .CSTR   ")\r\n"   
1125   76                     HALT      
1126   00                     .CSTR      
1127                EXPECTM_0_2118S43:      
1127   E1                     POP   HL   
1128                          ;*Macro unroll:  test "-1 2 +",1
1128   31 80 3C               LD   SP,STACK   
112B   CD 74 09               CALL   init   
112E   CD 26 3B               CALL   execStr   
1131   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1138                          ;*Macro unroll:  expect "-1 2 +",1
1138   E1                     POP   HL   
1139   E5                     PUSH   HL   
113A   11 01 00               LD   DE,1   
113D   B7                     OR   A   
113E   ED 52                  SBC   HL,DE   
1140   7D                     LD   A,L   
1141   B4                     OR   H   
1142   28 51                  JR   Z,expectM_0_2119S43   
1144   CD 6D 09               CALL   printStr   
1147   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1154   CD 6D 09               CALL   printStr   
1157   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1166   21 01 00               LD   HL,1   
1169   CD BB 08               CALL   prtdec   
116C   CD 6D 09               CALL   printStr   
116F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
117C   E1                     POP   hl   
117D   E5                     PUSH   hl   
117E   CD BB 08               CALL   prtdec   
1181   E1                     POP   hl   
1182   CD 6D 09               CALL   printStr   
1185   20 28 23 00            .CSTR   " (#"   
1189   CD 03 09               CALL   prthex   
118C   CD 6D 09               CALL   printStr   
118F   29 0D 0A 00            .CSTR   ")\r\n"   
1193   76                     HALT      
1194   00                     .CSTR      
1195                EXPECTM_0_2119S43:      
1195   E1                     POP   HL   
1196                          ;*Macro unroll:  test "-1 1 +",0
1196   31 80 3C               LD   SP,STACK   
1199   CD 74 09               CALL   init   
119C   CD 26 3B               CALL   execStr   
119F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
11A6                          ;*Macro unroll:  expect "-1 1 +",0
11A6   E1                     POP   HL   
11A7   E5                     PUSH   HL   
11A8   11 00 00               LD   DE,0   
11AB   B7                     OR   A   
11AC   ED 52                  SBC   HL,DE   
11AE   7D                     LD   A,L   
11AF   B4                     OR   H   
11B0   28 51                  JR   Z,expectM_0_2120S43   
11B2   CD 6D 09               CALL   printStr   
11B5   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
11C2   CD 6D 09               CALL   printStr   
11C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11D4   21 00 00               LD   HL,0   
11D7   CD BB 08               CALL   prtdec   
11DA   CD 6D 09               CALL   printStr   
11DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11EA   E1                     POP   hl   
11EB   E5                     PUSH   hl   
11EC   CD BB 08               CALL   prtdec   
11EF   E1                     POP   hl   
11F0   CD 6D 09               CALL   printStr   
11F3   20 28 23 00            .CSTR   " (#"   
11F7   CD 03 09               CALL   prthex   
11FA   CD 6D 09               CALL   printStr   
11FD   29 0D 0A 00            .CSTR   ")\r\n"   
1201   76                     HALT      
1202   00                     .CSTR      
1203                EXPECTM_0_2120S43:      
1203   E1                     POP   HL   
1204                          ;*Macro unroll:  test "1 2 +", 3
1204   31 80 3C               LD   SP,STACK   
1207   CD 74 09               CALL   init   
120A   CD 26 3B               CALL   execStr   
120D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1213                          ;*Macro unroll:  expect "1 2 +",3
1213   E1                     POP   HL   
1214   E5                     PUSH   HL   
1215   11 03 00               LD   DE,3   
1218   B7                     OR   A   
1219   ED 52                  SBC   HL,DE   
121B   7D                     LD   A,L   
121C   B4                     OR   H   
121D   28 50                  JR   Z,expectM_0_2121S43   
121F   CD 6D 09               CALL   printStr   
1222   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
122E   CD 6D 09               CALL   printStr   
1231   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1240   21 03 00               LD   HL,3   
1243   CD BB 08               CALL   prtdec   
1246   CD 6D 09               CALL   printStr   
1249   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1256   E1                     POP   hl   
1257   E5                     PUSH   hl   
1258   CD BB 08               CALL   prtdec   
125B   E1                     POP   hl   
125C   CD 6D 09               CALL   printStr   
125F   20 28 23 00            .CSTR   " (#"   
1263   CD 03 09               CALL   prthex   
1266   CD 6D 09               CALL   printStr   
1269   29 0D 0A 00            .CSTR   ")\r\n"   
126D   76                     HALT      
126E   00                     .CSTR      
126F                EXPECTM_0_2121S43:      
126F   E1                     POP   HL   
1270                          ;*Macro unroll:  test "4 1 2 +", 3
1270   31 80 3C               LD   SP,STACK   
1273   CD 74 09               CALL   init   
1276   CD 26 3B               CALL   execStr   
1279   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1281                          ;*Macro unroll:  expect "4 1 2 +",3
1281   E1                     POP   HL   
1282   E5                     PUSH   HL   
1283   11 03 00               LD   DE,3   
1286   B7                     OR   A   
1287   ED 52                  SBC   HL,DE   
1289   7D                     LD   A,L   
128A   B4                     OR   H   
128B   28 52                  JR   Z,expectM_0_2122S43   
128D   CD 6D 09               CALL   printStr   
1290   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
129E   CD 6D 09               CALL   printStr   
12A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12B0   21 03 00               LD   HL,3   
12B3   CD BB 08               CALL   prtdec   
12B6   CD 6D 09               CALL   printStr   
12B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C6   E1                     POP   hl   
12C7   E5                     PUSH   hl   
12C8   CD BB 08               CALL   prtdec   
12CB   E1                     POP   hl   
12CC   CD 6D 09               CALL   printStr   
12CF   20 28 23 00            .CSTR   " (#"   
12D3   CD 03 09               CALL   prthex   
12D6   CD 6D 09               CALL   printStr   
12D9   29 0D 0A 00            .CSTR   ")\r\n"   
12DD   76                     HALT      
12DE   00                     .CSTR      
12DF                EXPECTM_0_2122S43:      
12DF   E1                     POP   HL   
12E0                          ;*Macro unroll:  test "123 456 +", 123+456
12E0   31 80 3C               LD   SP,STACK   
12E3   CD 74 09               CALL   init   
12E6   CD 26 3B               CALL   execStr   
12E9   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
12F3                          ;*Macro unroll:  expect "123 456 +",123+456
12F3   E1                     POP   HL   
12F4   E5                     PUSH   HL   
12F5   11 43 02               LD   DE,123+456   
12F8   B7                     OR   A   
12F9   ED 52                  SBC   HL,DE   
12FB   7D                     LD   A,L   
12FC   B4                     OR   H   
12FD   28 54                  JR   Z,expectM_0_2123S43   
12FF   CD 6D 09               CALL   printStr   
1302   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1312   CD 6D 09               CALL   printStr   
1315   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1324   21 43 02               LD   HL,123+456   
1327   CD BB 08               CALL   prtdec   
132A   CD 6D 09               CALL   printStr   
132D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
133A   E1                     POP   hl   
133B   E5                     PUSH   hl   
133C   CD BB 08               CALL   prtdec   
133F   E1                     POP   hl   
1340   CD 6D 09               CALL   printStr   
1343   20 28 23 00            .CSTR   " (#"   
1347   CD 03 09               CALL   prthex   
134A   CD 6D 09               CALL   printStr   
134D   29 0D 0A 00            .CSTR   ")\r\n"   
1351   76                     HALT      
1352   00                     .CSTR      
1353                EXPECTM_0_2123S43:      
1353   E1                     POP   HL   
1354                          ;*Macro unroll:  test "64 128 +", 64+128
1354   31 80 3C               LD   SP,STACK   
1357   CD 74 09               CALL   init   
135A   CD 26 3B               CALL   execStr   
135D   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1366                          ;*Macro unroll:  expect "64 128 +",64+128
1366   E1                     POP   HL   
1367   E5                     PUSH   HL   
1368   11 C0 00               LD   DE,64+128   
136B   B7                     OR   A   
136C   ED 52                  SBC   HL,DE   
136E   7D                     LD   A,L   
136F   B4                     OR   H   
1370   28 53                  JR   Z,expectM_0_2124S43   
1372   CD 6D 09               CALL   printStr   
1375   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1384   CD 6D 09               CALL   printStr   
1387   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1396   21 C0 00               LD   HL,64+128   
1399   CD BB 08               CALL   prtdec   
139C   CD 6D 09               CALL   printStr   
139F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13AC   E1                     POP   hl   
13AD   E5                     PUSH   hl   
13AE   CD BB 08               CALL   prtdec   
13B1   E1                     POP   hl   
13B2   CD 6D 09               CALL   printStr   
13B5   20 28 23 00            .CSTR   " (#"   
13B9   CD 03 09               CALL   prthex   
13BC   CD 6D 09               CALL   printStr   
13BF   29 0D 0A 00            .CSTR   ")\r\n"   
13C3   76                     HALT      
13C4   00                     .CSTR      
13C5                EXPECTM_0_2124S43:      
13C5   E1                     POP   HL   
13C6                          ;*Macro unroll:  test "1 2 +", 3
13C6   31 80 3C               LD   SP,STACK   
13C9   CD 74 09               CALL   init   
13CC   CD 26 3B               CALL   execStr   
13CF   31 20 32 20 2B 00      .CSTR   "1 2 +"   
13D5                          ;*Macro unroll:  expect "1 2 +",3
13D5   E1                     POP   HL   
13D6   E5                     PUSH   HL   
13D7   11 03 00               LD   DE,3   
13DA   B7                     OR   A   
13DB   ED 52                  SBC   HL,DE   
13DD   7D                     LD   A,L   
13DE   B4                     OR   H   
13DF   28 50                  JR   Z,expectM_0_2125S43   
13E1   CD 6D 09               CALL   printStr   
13E4   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
13F0   CD 6D 09               CALL   printStr   
13F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1402   21 03 00               LD   HL,3   
1405   CD BB 08               CALL   prtdec   
1408   CD 6D 09               CALL   printStr   
140B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1418   E1                     POP   hl   
1419   E5                     PUSH   hl   
141A   CD BB 08               CALL   prtdec   
141D   E1                     POP   hl   
141E   CD 6D 09               CALL   printStr   
1421   20 28 23 00            .CSTR   " (#"   
1425   CD 03 09               CALL   prthex   
1428   CD 6D 09               CALL   printStr   
142B   29 0D 0A 00            .CSTR   ")\r\n"   
142F   76                     HALT      
1430   00                     .CSTR      
1431                EXPECTM_0_2125S43:      
1431   E1                     POP   HL   
1432                          ;*Macro unroll:  test "1 a= a++ a",2
1432   31 80 3C               LD   SP,STACK   
1435   CD 74 09               CALL   init   
1438   CD 26 3B               CALL   execStr   
143B   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
1446                          ;*Macro unroll:  expect "1 a= a++ a",2
1446   E1                     POP   HL   
1447   E5                     PUSH   HL   
1448   11 02 00               LD   DE,2   
144B   B7                     OR   A   
144C   ED 52                  SBC   HL,DE   
144E   7D                     LD   A,L   
144F   B4                     OR   H   
1450   28 55                  JR   Z,expectM_0_2126S43   
1452   CD 6D 09               CALL   printStr   
1455   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
1466   CD 6D 09               CALL   printStr   
1469   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1478   21 02 00               LD   HL,2   
147B   CD BB 08               CALL   prtdec   
147E   CD 6D 09               CALL   printStr   
1481   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
148E   E1                     POP   hl   
148F   E5                     PUSH   hl   
1490   CD BB 08               CALL   prtdec   
1493   E1                     POP   hl   
1494   CD 6D 09               CALL   printStr   
1497   20 28 23 00            .CSTR   " (#"   
149B   CD 03 09               CALL   prthex   
149E   CD 6D 09               CALL   printStr   
14A1   29 0D 0A 00            .CSTR   ")\r\n"   
14A5   76                     HALT      
14A6   00                     .CSTR      
14A7                EXPECTM_0_2126S43:      
14A7   E1                     POP   HL   
14A8                          ;*Macro unroll:  test "1 a= 2 a += a",3
14A8   31 80 3C               LD   SP,STACK   
14AB   CD 74 09               CALL   init   
14AE   CD 26 3B               CALL   execStr   
14B1   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
14BF                          ;*Macro unroll:  expect "1 a= 2 a += a",3
14BF   E1                     POP   HL   
14C0   E5                     PUSH   HL   
14C1   11 03 00               LD   DE,3   
14C4   B7                     OR   A   
14C5   ED 52                  SBC   HL,DE   
14C7   7D                     LD   A,L   
14C8   B4                     OR   H   
14C9   28 58                  JR   Z,expectM_0_2127S43   
14CB   CD 6D 09               CALL   printStr   
14CE   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
14E2   CD 6D 09               CALL   printStr   
14E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14F4   21 03 00               LD   HL,3   
14F7   CD BB 08               CALL   prtdec   
14FA   CD 6D 09               CALL   printStr   
14FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
150A   E1                     POP   hl   
150B   E5                     PUSH   hl   
150C   CD BB 08               CALL   prtdec   
150F   E1                     POP   hl   
1510   CD 6D 09               CALL   printStr   
1513   20 28 23 00            .CSTR   " (#"   
1517   CD 03 09               CALL   prthex   
151A   CD 6D 09               CALL   printStr   
151D   29 0D 0A 00            .CSTR   ")\r\n"   
1521   76                     HALT      
1522   00                     .CSTR      
1523                EXPECTM_0_2127S43:      
1523   E1                     POP   HL   
1524                          ;*Macro unroll:  test "-1 -1 -",0
1524   31 80 3C               LD   SP,STACK   
1527   CD 74 09               CALL   init   
152A   CD 26 3B               CALL   execStr   
152D   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1535                          ;*Macro unroll:  expect "-1 -1 -",0
1535   E1                     POP   HL   
1536   E5                     PUSH   HL   
1537   11 00 00               LD   DE,0   
153A   B7                     OR   A   
153B   ED 52                  SBC   HL,DE   
153D   7D                     LD   A,L   
153E   B4                     OR   H   
153F   28 52                  JR   Z,expectM_0_2128S43   
1541   CD 6D 09               CALL   printStr   
1544   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1552   CD 6D 09               CALL   printStr   
1555   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1564   21 00 00               LD   HL,0   
1567   CD BB 08               CALL   prtdec   
156A   CD 6D 09               CALL   printStr   
156D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
157A   E1                     POP   hl   
157B   E5                     PUSH   hl   
157C   CD BB 08               CALL   prtdec   
157F   E1                     POP   hl   
1580   CD 6D 09               CALL   printStr   
1583   20 28 23 00            .CSTR   " (#"   
1587   CD 03 09               CALL   prthex   
158A   CD 6D 09               CALL   printStr   
158D   29 0D 0A 00            .CSTR   ")\r\n"   
1591   76                     HALT      
1592   00                     .CSTR      
1593                EXPECTM_0_2128S43:      
1593   E1                     POP   HL   
1594                          ;*Macro unroll:  test "5 3 -", 2
1594   31 80 3C               LD   SP,STACK   
1597   CD 74 09               CALL   init   
159A   CD 26 3B               CALL   execStr   
159D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
15A3                          ;*Macro unroll:  expect "5 3 -",2
15A3   E1                     POP   HL   
15A4   E5                     PUSH   HL   
15A5   11 02 00               LD   DE,2   
15A8   B7                     OR   A   
15A9   ED 52                  SBC   HL,DE   
15AB   7D                     LD   A,L   
15AC   B4                     OR   H   
15AD   28 50                  JR   Z,expectM_0_2129S43   
15AF   CD 6D 09               CALL   printStr   
15B2   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
15BE   CD 6D 09               CALL   printStr   
15C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15D0   21 02 00               LD   HL,2   
15D3   CD BB 08               CALL   prtdec   
15D6   CD 6D 09               CALL   printStr   
15D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E6   E1                     POP   hl   
15E7   E5                     PUSH   hl   
15E8   CD BB 08               CALL   prtdec   
15EB   E1                     POP   hl   
15EC   CD 6D 09               CALL   printStr   
15EF   20 28 23 00            .CSTR   " (#"   
15F3   CD 03 09               CALL   prthex   
15F6   CD 6D 09               CALL   printStr   
15F9   29 0D 0A 00            .CSTR   ")\r\n"   
15FD   76                     HALT      
15FE   00                     .CSTR      
15FF                EXPECTM_0_2129S43:      
15FF   E1                     POP   HL   
1600                          ;*Macro unroll:  test "2 1 -",1
1600   31 80 3C               LD   SP,STACK   
1603   CD 74 09               CALL   init   
1606   CD 26 3B               CALL   execStr   
1609   32 20 31 20 2D 00      .CSTR   "2 1 -"   
160F                          ;*Macro unroll:  expect "2 1 -",1
160F   E1                     POP   HL   
1610   E5                     PUSH   HL   
1611   11 01 00               LD   DE,1   
1614   B7                     OR   A   
1615   ED 52                  SBC   HL,DE   
1617   7D                     LD   A,L   
1618   B4                     OR   H   
1619   28 50                  JR   Z,expectM_0_2130S43   
161B   CD 6D 09               CALL   printStr   
161E   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
162A   CD 6D 09               CALL   printStr   
162D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
163C   21 01 00               LD   HL,1   
163F   CD BB 08               CALL   prtdec   
1642   CD 6D 09               CALL   printStr   
1645   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1652   E1                     POP   hl   
1653   E5                     PUSH   hl   
1654   CD BB 08               CALL   prtdec   
1657   E1                     POP   hl   
1658   CD 6D 09               CALL   printStr   
165B   20 28 23 00            .CSTR   " (#"   
165F   CD 03 09               CALL   prthex   
1662   CD 6D 09               CALL   printStr   
1665   29 0D 0A 00            .CSTR   ")\r\n"   
1669   76                     HALT      
166A   00                     .CSTR      
166B                EXPECTM_0_2130S43:      
166B   E1                     POP   HL   
166C                          ;*Macro unroll:  test "3 a= a-- a",2
166C   31 80 3C               LD   SP,STACK   
166F   CD 74 09               CALL   init   
1672   CD 26 3B               CALL   execStr   
1675   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
1680                          ;*Macro unroll:  expect "3 a= a-- a",2
1680   E1                     POP   HL   
1681   E5                     PUSH   HL   
1682   11 02 00               LD   DE,2   
1685   B7                     OR   A   
1686   ED 52                  SBC   HL,DE   
1688   7D                     LD   A,L   
1689   B4                     OR   H   
168A   28 55                  JR   Z,expectM_0_2131S43   
168C   CD 6D 09               CALL   printStr   
168F   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
16A0   CD 6D 09               CALL   printStr   
16A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16B2   21 02 00               LD   HL,2   
16B5   CD BB 08               CALL   prtdec   
16B8   CD 6D 09               CALL   printStr   
16BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C8   E1                     POP   hl   
16C9   E5                     PUSH   hl   
16CA   CD BB 08               CALL   prtdec   
16CD   E1                     POP   hl   
16CE   CD 6D 09               CALL   printStr   
16D1   20 28 23 00            .CSTR   " (#"   
16D5   CD 03 09               CALL   prthex   
16D8   CD 6D 09               CALL   printStr   
16DB   29 0D 0A 00            .CSTR   ")\r\n"   
16DF   76                     HALT      
16E0   00                     .CSTR      
16E1                EXPECTM_0_2131S43:      
16E1   E1                     POP   HL   
16E2                          ;*Macro unroll:  test "4 a= a 2 -= a",2
16E2   31 80 3C               LD   SP,STACK   
16E5   CD 74 09               CALL   init   
16E8   CD 26 3B               CALL   execStr   
16EB   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
16F9                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
16F9   E1                     POP   HL   
16FA   E5                     PUSH   HL   
16FB   11 02 00               LD   DE,2   
16FE   B7                     OR   A   
16FF   ED 52                  SBC   HL,DE   
1701   7D                     LD   A,L   
1702   B4                     OR   H   
1703   28 58                  JR   Z,expectM_0_2132S43   
1705   CD 6D 09               CALL   printStr   
1708   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
171C   CD 6D 09               CALL   printStr   
171F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
172E   21 02 00               LD   HL,2   
1731   CD BB 08               CALL   prtdec   
1734   CD 6D 09               CALL   printStr   
1737   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1744   E1                     POP   hl   
1745   E5                     PUSH   hl   
1746   CD BB 08               CALL   prtdec   
1749   E1                     POP   hl   
174A   CD 6D 09               CALL   printStr   
174D   20 28 23 00            .CSTR   " (#"   
1751   CD 03 09               CALL   prthex   
1754   CD 6D 09               CALL   printStr   
1757   29 0D 0A 00            .CSTR   ")\r\n"   
175B   76                     HALT      
175C   00                     .CSTR      
175D                EXPECTM_0_2132S43:      
175D   E1                     POP   HL   
175E                          ;*Macro unroll:  test "3 5 &", 1
175E   31 80 3C               LD   SP,STACK   
1761   CD 74 09               CALL   init   
1764   CD 26 3B               CALL   execStr   
1767   33 20 35 20 26 00      .CSTR   "3 5 &"   
176D                          ;*Macro unroll:  expect "3 5 &",1
176D   E1                     POP   HL   
176E   E5                     PUSH   HL   
176F   11 01 00               LD   DE,1   
1772   B7                     OR   A   
1773   ED 52                  SBC   HL,DE   
1775   7D                     LD   A,L   
1776   B4                     OR   H   
1777   28 50                  JR   Z,expectM_0_2133S43   
1779   CD 6D 09               CALL   printStr   
177C   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1788   CD 6D 09               CALL   printStr   
178B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
179A   21 01 00               LD   HL,1   
179D   CD BB 08               CALL   prtdec   
17A0   CD 6D 09               CALL   printStr   
17A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17B0   E1                     POP   hl   
17B1   E5                     PUSH   hl   
17B2   CD BB 08               CALL   prtdec   
17B5   E1                     POP   hl   
17B6   CD 6D 09               CALL   printStr   
17B9   20 28 23 00            .CSTR   " (#"   
17BD   CD 03 09               CALL   prthex   
17C0   CD 6D 09               CALL   printStr   
17C3   29 0D 0A 00            .CSTR   ")\r\n"   
17C7   76                     HALT      
17C8   00                     .CSTR      
17C9                EXPECTM_0_2133S43:      
17C9   E1                     POP   HL   
17CA                          ;*Macro unroll:  test "3 a= 5 a &= a",1
17CA   31 80 3C               LD   SP,STACK   
17CD   CD 74 09               CALL   init   
17D0   CD 26 3B               CALL   execStr   
17D3   33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3 a= 5 a &= a"   
17E1                          ;*Macro unroll:  expect "3 a= 5 a &= a",1
17E1   E1                     POP   HL   
17E2   E5                     PUSH   HL   
17E3   11 01 00               LD   DE,1   
17E6   B7                     OR   A   
17E7   ED 52                  SBC   HL,DE   
17E9   7D                     LD   A,L   
17EA   B4                     OR   H   
17EB   28 58                  JR   Z,expectM_0_2134S43   
17ED   CD 6D 09               CALL   printStr   
17F0   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a &= a"   
1804   CD 6D 09               CALL   printStr   
1807   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1816   21 01 00               LD   HL,1   
1819   CD BB 08               CALL   prtdec   
181C   CD 6D 09               CALL   printStr   
181F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
182C   E1                     POP   hl   
182D   E5                     PUSH   hl   
182E   CD BB 08               CALL   prtdec   
1831   E1                     POP   hl   
1832   CD 6D 09               CALL   printStr   
1835   20 28 23 00            .CSTR   " (#"   
1839   CD 03 09               CALL   prthex   
183C   CD 6D 09               CALL   printStr   
183F   29 0D 0A 00            .CSTR   ")\r\n"   
1843   76                     HALT      
1844   00                     .CSTR      
1845                EXPECTM_0_2134S43:      
1845   E1                     POP   HL   
1846                          ;*Macro unroll:  test "3 5 |", 7
1846   31 80 3C               LD   SP,STACK   
1849   CD 74 09               CALL   init   
184C   CD 26 3B               CALL   execStr   
184F   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1855                          ;*Macro unroll:  expect "3 5 |",7
1855   E1                     POP   HL   
1856   E5                     PUSH   HL   
1857   11 07 00               LD   DE,7   
185A   B7                     OR   A   
185B   ED 52                  SBC   HL,DE   
185D   7D                     LD   A,L   
185E   B4                     OR   H   
185F   28 50                  JR   Z,expectM_0_2135S43   
1861   CD 6D 09               CALL   printStr   
1864   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1870   CD 6D 09               CALL   printStr   
1873   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1882   21 07 00               LD   HL,7   
1885   CD BB 08               CALL   prtdec   
1888   CD 6D 09               CALL   printStr   
188B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1898   E1                     POP   hl   
1899   E5                     PUSH   hl   
189A   CD BB 08               CALL   prtdec   
189D   E1                     POP   hl   
189E   CD 6D 09               CALL   printStr   
18A1   20 28 23 00            .CSTR   " (#"   
18A5   CD 03 09               CALL   prthex   
18A8   CD 6D 09               CALL   printStr   
18AB   29 0D 0A 00            .CSTR   ")\r\n"   
18AF   76                     HALT      
18B0   00                     .CSTR      
18B1                EXPECTM_0_2135S43:      
18B1   E1                     POP   HL   
18B2                          ;*Macro unroll:  test "3 a= 5 a |= a",7
18B2   31 80 3C               LD   SP,STACK   
18B5   CD 74 09               CALL   init   
18B8   CD 26 3B               CALL   execStr   
18BB   33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3 a= 5 a |= a"   
18C9                          ;*Macro unroll:  expect "3 a= 5 a |= a",7
18C9   E1                     POP   HL   
18CA   E5                     PUSH   HL   
18CB   11 07 00               LD   DE,7   
18CE   B7                     OR   A   
18CF   ED 52                  SBC   HL,DE   
18D1   7D                     LD   A,L   
18D2   B4                     OR   H   
18D3   28 58                  JR   Z,expectM_0_2136S43   
18D5   CD 6D 09               CALL   printStr   
18D8   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a |= a"   
18EC   CD 6D 09               CALL   printStr   
18EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18FE   21 07 00               LD   HL,7   
1901   CD BB 08               CALL   prtdec   
1904   CD 6D 09               CALL   printStr   
1907   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1914   E1                     POP   hl   
1915   E5                     PUSH   hl   
1916   CD BB 08               CALL   prtdec   
1919   E1                     POP   hl   
191A   CD 6D 09               CALL   printStr   
191D   20 28 23 00            .CSTR   " (#"   
1921   CD 03 09               CALL   prthex   
1924   CD 6D 09               CALL   printStr   
1927   29 0D 0A 00            .CSTR   ")\r\n"   
192B   76                     HALT      
192C   00                     .CSTR      
192D                EXPECTM_0_2136S43:      
192D   E1                     POP   HL   
192E                          ;*Macro unroll:  test "3 5 ^", 6
192E   31 80 3C               LD   SP,STACK   
1931   CD 74 09               CALL   init   
1934   CD 26 3B               CALL   execStr   
1937   33 20 35 20 5E 00      .CSTR   "3 5 ^"   
193D                          ;*Macro unroll:  expect "3 5 ^",6
193D   E1                     POP   HL   
193E   E5                     PUSH   HL   
193F   11 06 00               LD   DE,6   
1942   B7                     OR   A   
1943   ED 52                  SBC   HL,DE   
1945   7D                     LD   A,L   
1946   B4                     OR   H   
1947   28 50                  JR   Z,expectM_0_2137S43   
1949   CD 6D 09               CALL   printStr   
194C   43 6F 64 65 3A 20 33 20 35 20 5E 00 .CSTR   "Code: ","3 5 ^"   
1958   CD 6D 09               CALL   printStr   
195B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
196A   21 06 00               LD   HL,6   
196D   CD BB 08               CALL   prtdec   
1970   CD 6D 09               CALL   printStr   
1973   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1980   E1                     POP   hl   
1981   E5                     PUSH   hl   
1982   CD BB 08               CALL   prtdec   
1985   E1                     POP   hl   
1986   CD 6D 09               CALL   printStr   
1989   20 28 23 00            .CSTR   " (#"   
198D   CD 03 09               CALL   prthex   
1990   CD 6D 09               CALL   printStr   
1993   29 0D 0A 00            .CSTR   ")\r\n"   
1997   76                     HALT      
1998   00                     .CSTR      
1999                EXPECTM_0_2137S43:      
1999   E1                     POP   HL   
199A                          ;*Macro unroll:  test "3 a= 5 a ^= a",6
199A   31 80 3C               LD   SP,STACK   
199D   CD 74 09               CALL   init   
19A0   CD 26 3B               CALL   execStr   
19A3   33 20 61 3D 20 35 20 61 20 5E 3D 20 61 00 .CSTR   "3 a= 5 a ^= a"   
19B1                          ;*Macro unroll:  expect "3 a= 5 a ^= a",6
19B1   E1                     POP   HL   
19B2   E5                     PUSH   HL   
19B3   11 06 00               LD   DE,6   
19B6   B7                     OR   A   
19B7   ED 52                  SBC   HL,DE   
19B9   7D                     LD   A,L   
19BA   B4                     OR   H   
19BB   28 58                  JR   Z,expectM_0_2138S43   
19BD   CD 6D 09               CALL   printStr   
19C0   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 5E 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a ^= a"   
19D4   CD 6D 09               CALL   printStr   
19D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19E6   21 06 00               LD   HL,6   
19E9   CD BB 08               CALL   prtdec   
19EC   CD 6D 09               CALL   printStr   
19EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19FC   E1                     POP   hl   
19FD   E5                     PUSH   hl   
19FE   CD BB 08               CALL   prtdec   
1A01   E1                     POP   hl   
1A02   CD 6D 09               CALL   printStr   
1A05   20 28 23 00            .CSTR   " (#"   
1A09   CD 03 09               CALL   prthex   
1A0C   CD 6D 09               CALL   printStr   
1A0F   29 0D 0A 00            .CSTR   ")\r\n"   
1A13   76                     HALT      
1A14   00                     .CSTR      
1A15                EXPECTM_0_2138S43:      
1A15   E1                     POP   HL   
1A16                          ;*Macro unroll:  test "2 3 *", 6
1A16   31 80 3C               LD   SP,STACK   
1A19   CD 74 09               CALL   init   
1A1C   CD 26 3B               CALL   execStr   
1A1F   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1A25                          ;*Macro unroll:  expect "2 3 *",6
1A25   E1                     POP   HL   
1A26   E5                     PUSH   HL   
1A27   11 06 00               LD   DE,6   
1A2A   B7                     OR   A   
1A2B   ED 52                  SBC   HL,DE   
1A2D   7D                     LD   A,L   
1A2E   B4                     OR   H   
1A2F   28 50                  JR   Z,expectM_0_2139S43   
1A31   CD 6D 09               CALL   printStr   
1A34   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1A40   CD 6D 09               CALL   printStr   
1A43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A52   21 06 00               LD   HL,6   
1A55   CD BB 08               CALL   prtdec   
1A58   CD 6D 09               CALL   printStr   
1A5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A68   E1                     POP   hl   
1A69   E5                     PUSH   hl   
1A6A   CD BB 08               CALL   prtdec   
1A6D   E1                     POP   hl   
1A6E   CD 6D 09               CALL   printStr   
1A71   20 28 23 00            .CSTR   " (#"   
1A75   CD 03 09               CALL   prthex   
1A78   CD 6D 09               CALL   printStr   
1A7B   29 0D 0A 00            .CSTR   ")\r\n"   
1A7F   76                     HALT      
1A80   00                     .CSTR      
1A81                EXPECTM_0_2139S43:      
1A81   E1                     POP   HL   
1A82                          ;*Macro unroll:  test "3 x= 2 x *= x",6
1A82   31 80 3C               LD   SP,STACK   
1A85   CD 74 09               CALL   init   
1A88   CD 26 3B               CALL   execStr   
1A8B   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1A99                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1A99   E1                     POP   HL   
1A9A   E5                     PUSH   HL   
1A9B   11 06 00               LD   DE,6   
1A9E   B7                     OR   A   
1A9F   ED 52                  SBC   HL,DE   
1AA1   7D                     LD   A,L   
1AA2   B4                     OR   H   
1AA3   28 58                  JR   Z,expectM_0_2140S43   
1AA5   CD 6D 09               CALL   printStr   
1AA8   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1ABC   CD 6D 09               CALL   printStr   
1ABF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ACE   21 06 00               LD   HL,6   
1AD1   CD BB 08               CALL   prtdec   
1AD4   CD 6D 09               CALL   printStr   
1AD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AE4   E1                     POP   hl   
1AE5   E5                     PUSH   hl   
1AE6   CD BB 08               CALL   prtdec   
1AE9   E1                     POP   hl   
1AEA   CD 6D 09               CALL   printStr   
1AED   20 28 23 00            .CSTR   " (#"   
1AF1   CD 03 09               CALL   prthex   
1AF4   CD 6D 09               CALL   printStr   
1AF7   29 0D 0A 00            .CSTR   ")\r\n"   
1AFB   76                     HALT      
1AFC   00                     .CSTR      
1AFD                EXPECTM_0_2140S43:      
1AFD   E1                     POP   HL   
1AFE                          ;*Macro unroll:  test "1 2 3 + *", 5
1AFE   31 80 3C               LD   SP,STACK   
1B01   CD 74 09               CALL   init   
1B04   CD 26 3B               CALL   execStr   
1B07   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1B11                          ;*Macro unroll:  expect "1 2 3 + *",5
1B11   E1                     POP   HL   
1B12   E5                     PUSH   HL   
1B13   11 05 00               LD   DE,5   
1B16   B7                     OR   A   
1B17   ED 52                  SBC   HL,DE   
1B19   7D                     LD   A,L   
1B1A   B4                     OR   H   
1B1B   28 54                  JR   Z,expectM_0_2141S43   
1B1D   CD 6D 09               CALL   printStr   
1B20   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1B30   CD 6D 09               CALL   printStr   
1B33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B42   21 05 00               LD   HL,5   
1B45   CD BB 08               CALL   prtdec   
1B48   CD 6D 09               CALL   printStr   
1B4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B58   E1                     POP   hl   
1B59   E5                     PUSH   hl   
1B5A   CD BB 08               CALL   prtdec   
1B5D   E1                     POP   hl   
1B5E   CD 6D 09               CALL   printStr   
1B61   20 28 23 00            .CSTR   " (#"   
1B65   CD 03 09               CALL   prthex   
1B68   CD 6D 09               CALL   printStr   
1B6B   29 0D 0A 00            .CSTR   ")\r\n"   
1B6F   76                     HALT      
1B70   00                     .CSTR      
1B71                EXPECTM_0_2141S43:      
1B71   E1                     POP   HL   
1B72                          ;*Macro unroll:  test "7 3 /", 2
1B72   31 80 3C               LD   SP,STACK   
1B75   CD 74 09               CALL   init   
1B78   CD 26 3B               CALL   execStr   
1B7B   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1B81                          ;*Macro unroll:  expect "7 3 /",2
1B81   E1                     POP   HL   
1B82   E5                     PUSH   HL   
1B83   11 02 00               LD   DE,2   
1B86   B7                     OR   A   
1B87   ED 52                  SBC   HL,DE   
1B89   7D                     LD   A,L   
1B8A   B4                     OR   H   
1B8B   28 50                  JR   Z,expectM_0_2142S43   
1B8D   CD 6D 09               CALL   printStr   
1B90   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B9C   CD 6D 09               CALL   printStr   
1B9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BAE   21 02 00               LD   HL,2   
1BB1   CD BB 08               CALL   prtdec   
1BB4   CD 6D 09               CALL   printStr   
1BB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BC4   E1                     POP   hl   
1BC5   E5                     PUSH   hl   
1BC6   CD BB 08               CALL   prtdec   
1BC9   E1                     POP   hl   
1BCA   CD 6D 09               CALL   printStr   
1BCD   20 28 23 00            .CSTR   " (#"   
1BD1   CD 03 09               CALL   prthex   
1BD4   CD 6D 09               CALL   printStr   
1BD7   29 0D 0A 00            .CSTR   ")\r\n"   
1BDB   76                     HALT      
1BDC   00                     .CSTR      
1BDD                EXPECTM_0_2142S43:      
1BDD   E1                     POP   HL   
1BDE                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1BDE   31 80 3C               LD   SP,STACK   
1BE1   CD 74 09               CALL   init   
1BE4   CD 26 3B               CALL   execStr   
1BE7   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1BF5                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1BF5   E1                     POP   HL   
1BF6   E5                     PUSH   HL   
1BF7   11 02 00               LD   DE,2   
1BFA   B7                     OR   A   
1BFB   ED 52                  SBC   HL,DE   
1BFD   7D                     LD   A,L   
1BFE   B4                     OR   H   
1BFF   28 58                  JR   Z,expectM_0_2143S43   
1C01   CD 6D 09               CALL   printStr   
1C04   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1C18   CD 6D 09               CALL   printStr   
1C1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C2A   21 02 00               LD   HL,2   
1C2D   CD BB 08               CALL   prtdec   
1C30   CD 6D 09               CALL   printStr   
1C33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C40   E1                     POP   hl   
1C41   E5                     PUSH   hl   
1C42   CD BB 08               CALL   prtdec   
1C45   E1                     POP   hl   
1C46   CD 6D 09               CALL   printStr   
1C49   20 28 23 00            .CSTR   " (#"   
1C4D   CD 03 09               CALL   prthex   
1C50   CD 6D 09               CALL   printStr   
1C53   29 0D 0A 00            .CSTR   ")\r\n"   
1C57   76                     HALT      
1C58   00                     .CSTR      
1C59                EXPECTM_0_2143S43:      
1C59   E1                     POP   HL   
1C5A                          ;*Macro unroll:  test "7 3 / _", 1
1C5A   31 80 3C               LD   SP,STACK   
1C5D   CD 74 09               CALL   init   
1C60   CD 26 3B               CALL   execStr   
1C63   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1C6B                          ;*Macro unroll:  expect "7 3 / _",1
1C6B   E1                     POP   HL   
1C6C   E5                     PUSH   HL   
1C6D   11 01 00               LD   DE,1   
1C70   B7                     OR   A   
1C71   ED 52                  SBC   HL,DE   
1C73   7D                     LD   A,L   
1C74   B4                     OR   H   
1C75   28 52                  JR   Z,expectM_0_2144S43   
1C77   CD 6D 09               CALL   printStr   
1C7A   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1C88   CD 6D 09               CALL   printStr   
1C8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C9A   21 01 00               LD   HL,1   
1C9D   CD BB 08               CALL   prtdec   
1CA0   CD 6D 09               CALL   printStr   
1CA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CB0   E1                     POP   hl   
1CB1   E5                     PUSH   hl   
1CB2   CD BB 08               CALL   prtdec   
1CB5   E1                     POP   hl   
1CB6   CD 6D 09               CALL   printStr   
1CB9   20 28 23 00            .CSTR   " (#"   
1CBD   CD 03 09               CALL   prthex   
1CC0   CD 6D 09               CALL   printStr   
1CC3   29 0D 0A 00            .CSTR   ")\r\n"   
1CC7   76                     HALT      
1CC8   00                     .CSTR      
1CC9                EXPECTM_0_2144S43:      
1CC9   E1                     POP   HL   
1CCA                          ;*Macro unroll:  test "7 3 /", 2
1CCA   31 80 3C               LD   SP,STACK   
1CCD   CD 74 09               CALL   init   
1CD0   CD 26 3B               CALL   execStr   
1CD3   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CD9                          ;*Macro unroll:  expect "7 3 /",2
1CD9   E1                     POP   HL   
1CDA   E5                     PUSH   HL   
1CDB   11 02 00               LD   DE,2   
1CDE   B7                     OR   A   
1CDF   ED 52                  SBC   HL,DE   
1CE1   7D                     LD   A,L   
1CE2   B4                     OR   H   
1CE3   28 50                  JR   Z,expectM_0_2145S43   
1CE5   CD 6D 09               CALL   printStr   
1CE8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CF4   CD 6D 09               CALL   printStr   
1CF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D06   21 02 00               LD   HL,2   
1D09   CD BB 08               CALL   prtdec   
1D0C   CD 6D 09               CALL   printStr   
1D0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D1C   E1                     POP   hl   
1D1D   E5                     PUSH   hl   
1D1E   CD BB 08               CALL   prtdec   
1D21   E1                     POP   hl   
1D22   CD 6D 09               CALL   printStr   
1D25   20 28 23 00            .CSTR   " (#"   
1D29   CD 03 09               CALL   prthex   
1D2C   CD 6D 09               CALL   printStr   
1D2F   29 0D 0A 00            .CSTR   ")\r\n"   
1D33   76                     HALT      
1D34   00                     .CSTR      
1D35                EXPECTM_0_2145S43:      
1D35   E1                     POP   HL   
1D36                          ;*Macro unroll:  test "2 3 ==", FALSE
1D36   31 80 3C               LD   SP,STACK   
1D39   CD 74 09               CALL   init   
1D3C   CD 26 3B               CALL   execStr   
1D3F   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1D46                          ;*Macro unroll:  expect "2 3 ==",FALSE
1D46   E1                     POP   HL   
1D47   E5                     PUSH   HL   
1D48   11 00 00               LD   DE,FALSE   
1D4B   B7                     OR   A   
1D4C   ED 52                  SBC   HL,DE   
1D4E   7D                     LD   A,L   
1D4F   B4                     OR   H   
1D50   28 51                  JR   Z,expectM_0_2146S43   
1D52   CD 6D 09               CALL   printStr   
1D55   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1D62   CD 6D 09               CALL   printStr   
1D65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D74   21 00 00               LD   HL,FALSE   
1D77   CD BB 08               CALL   prtdec   
1D7A   CD 6D 09               CALL   printStr   
1D7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D8A   E1                     POP   hl   
1D8B   E5                     PUSH   hl   
1D8C   CD BB 08               CALL   prtdec   
1D8F   E1                     POP   hl   
1D90   CD 6D 09               CALL   printStr   
1D93   20 28 23 00            .CSTR   " (#"   
1D97   CD 03 09               CALL   prthex   
1D9A   CD 6D 09               CALL   printStr   
1D9D   29 0D 0A 00            .CSTR   ")\r\n"   
1DA1   76                     HALT      
1DA2   00                     .CSTR      
1DA3                EXPECTM_0_2146S43:      
1DA3   E1                     POP   HL   
1DA4                          ;*Macro unroll:  test "3 3 ==", TRUE
1DA4   31 80 3C               LD   SP,STACK   
1DA7   CD 74 09               CALL   init   
1DAA   CD 26 3B               CALL   execStr   
1DAD   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1DB4                          ;*Macro unroll:  expect "3 3 ==",TRUE
1DB4   E1                     POP   HL   
1DB5   E5                     PUSH   HL   
1DB6   11 FF FF               LD   DE,TRUE   
1DB9   B7                     OR   A   
1DBA   ED 52                  SBC   HL,DE   
1DBC   7D                     LD   A,L   
1DBD   B4                     OR   H   
1DBE   28 51                  JR   Z,expectM_0_2147S43   
1DC0   CD 6D 09               CALL   printStr   
1DC3   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1DD0   CD 6D 09               CALL   printStr   
1DD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DE2   21 FF FF               LD   HL,TRUE   
1DE5   CD BB 08               CALL   prtdec   
1DE8   CD 6D 09               CALL   printStr   
1DEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF8   E1                     POP   hl   
1DF9   E5                     PUSH   hl   
1DFA   CD BB 08               CALL   prtdec   
1DFD   E1                     POP   hl   
1DFE   CD 6D 09               CALL   printStr   
1E01   20 28 23 00            .CSTR   " (#"   
1E05   CD 03 09               CALL   prthex   
1E08   CD 6D 09               CALL   printStr   
1E0B   29 0D 0A 00            .CSTR   ")\r\n"   
1E0F   76                     HALT      
1E10   00                     .CSTR      
1E11                EXPECTM_0_2147S43:      
1E11   E1                     POP   HL   
1E12                          ;*Macro unroll:  test "1 2 <", TRUE
1E12   31 80 3C               LD   SP,STACK   
1E15   CD 74 09               CALL   init   
1E18   CD 26 3B               CALL   execStr   
1E1B   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1E21                          ;*Macro unroll:  expect "1 2 <",TRUE
1E21   E1                     POP   HL   
1E22   E5                     PUSH   HL   
1E23   11 FF FF               LD   DE,TRUE   
1E26   B7                     OR   A   
1E27   ED 52                  SBC   HL,DE   
1E29   7D                     LD   A,L   
1E2A   B4                     OR   H   
1E2B   28 50                  JR   Z,expectM_0_2148S43   
1E2D   CD 6D 09               CALL   printStr   
1E30   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1E3C   CD 6D 09               CALL   printStr   
1E3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4E   21 FF FF               LD   HL,TRUE   
1E51   CD BB 08               CALL   prtdec   
1E54   CD 6D 09               CALL   printStr   
1E57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E64   E1                     POP   hl   
1E65   E5                     PUSH   hl   
1E66   CD BB 08               CALL   prtdec   
1E69   E1                     POP   hl   
1E6A   CD 6D 09               CALL   printStr   
1E6D   20 28 23 00            .CSTR   " (#"   
1E71   CD 03 09               CALL   prthex   
1E74   CD 6D 09               CALL   printStr   
1E77   29 0D 0A 00            .CSTR   ")\r\n"   
1E7B   76                     HALT      
1E7C   00                     .CSTR      
1E7D                EXPECTM_0_2148S43:      
1E7D   E1                     POP   HL   
1E7E                          ;*Macro unroll:  test "2 1 <", FALSE
1E7E   31 80 3C               LD   SP,STACK   
1E81   CD 74 09               CALL   init   
1E84   CD 26 3B               CALL   execStr   
1E87   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E8D                          ;*Macro unroll:  expect "2 1 <",FALSE
1E8D   E1                     POP   HL   
1E8E   E5                     PUSH   HL   
1E8F   11 00 00               LD   DE,FALSE   
1E92   B7                     OR   A   
1E93   ED 52                  SBC   HL,DE   
1E95   7D                     LD   A,L   
1E96   B4                     OR   H   
1E97   28 50                  JR   Z,expectM_0_2149S43   
1E99   CD 6D 09               CALL   printStr   
1E9C   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1EA8   CD 6D 09               CALL   printStr   
1EAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EBA   21 00 00               LD   HL,FALSE   
1EBD   CD BB 08               CALL   prtdec   
1EC0   CD 6D 09               CALL   printStr   
1EC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED0   E1                     POP   hl   
1ED1   E5                     PUSH   hl   
1ED2   CD BB 08               CALL   prtdec   
1ED5   E1                     POP   hl   
1ED6   CD 6D 09               CALL   printStr   
1ED9   20 28 23 00            .CSTR   " (#"   
1EDD   CD 03 09               CALL   prthex   
1EE0   CD 6D 09               CALL   printStr   
1EE3   29 0D 0A 00            .CSTR   ")\r\n"   
1EE7   76                     HALT      
1EE8   00                     .CSTR      
1EE9                EXPECTM_0_2149S43:      
1EE9   E1                     POP   HL   
1EEA                          ;*Macro unroll:  test "2 3 <", TRUE
1EEA   31 80 3C               LD   SP,STACK   
1EED   CD 74 09               CALL   init   
1EF0   CD 26 3B               CALL   execStr   
1EF3   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1EF9                          ;*Macro unroll:  expect "2 3 <",TRUE
1EF9   E1                     POP   HL   
1EFA   E5                     PUSH   HL   
1EFB   11 FF FF               LD   DE,TRUE   
1EFE   B7                     OR   A   
1EFF   ED 52                  SBC   HL,DE   
1F01   7D                     LD   A,L   
1F02   B4                     OR   H   
1F03   28 50                  JR   Z,expectM_0_2150S43   
1F05   CD 6D 09               CALL   printStr   
1F08   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1F14   CD 6D 09               CALL   printStr   
1F17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F26   21 FF FF               LD   HL,TRUE   
1F29   CD BB 08               CALL   prtdec   
1F2C   CD 6D 09               CALL   printStr   
1F2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F3C   E1                     POP   hl   
1F3D   E5                     PUSH   hl   
1F3E   CD BB 08               CALL   prtdec   
1F41   E1                     POP   hl   
1F42   CD 6D 09               CALL   printStr   
1F45   20 28 23 00            .CSTR   " (#"   
1F49   CD 03 09               CALL   prthex   
1F4C   CD 6D 09               CALL   printStr   
1F4F   29 0D 0A 00            .CSTR   ")\r\n"   
1F53   76                     HALT      
1F54   00                     .CSTR      
1F55                EXPECTM_0_2150S43:      
1F55   E1                     POP   HL   
1F56                          ;*Macro unroll:  test "3 3 <", FALSE
1F56   31 80 3C               LD   SP,STACK   
1F59   CD 74 09               CALL   init   
1F5C   CD 26 3B               CALL   execStr   
1F5F   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1F65                          ;*Macro unroll:  expect "3 3 <",FALSE
1F65   E1                     POP   HL   
1F66   E5                     PUSH   HL   
1F67   11 00 00               LD   DE,FALSE   
1F6A   B7                     OR   A   
1F6B   ED 52                  SBC   HL,DE   
1F6D   7D                     LD   A,L   
1F6E   B4                     OR   H   
1F6F   28 50                  JR   Z,expectM_0_2151S43   
1F71   CD 6D 09               CALL   printStr   
1F74   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1F80   CD 6D 09               CALL   printStr   
1F83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F92   21 00 00               LD   HL,FALSE   
1F95   CD BB 08               CALL   prtdec   
1F98   CD 6D 09               CALL   printStr   
1F9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA8   E1                     POP   hl   
1FA9   E5                     PUSH   hl   
1FAA   CD BB 08               CALL   prtdec   
1FAD   E1                     POP   hl   
1FAE   CD 6D 09               CALL   printStr   
1FB1   20 28 23 00            .CSTR   " (#"   
1FB5   CD 03 09               CALL   prthex   
1FB8   CD 6D 09               CALL   printStr   
1FBB   29 0D 0A 00            .CSTR   ")\r\n"   
1FBF   76                     HALT      
1FC0   00                     .CSTR      
1FC1                EXPECTM_0_2151S43:      
1FC1   E1                     POP   HL   
1FC2                          ;*Macro unroll:  test "1 2 >", FALSE
1FC2   31 80 3C               LD   SP,STACK   
1FC5   CD 74 09               CALL   init   
1FC8   CD 26 3B               CALL   execStr   
1FCB   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1FD1                          ;*Macro unroll:  expect "1 2 >",FALSE
1FD1   E1                     POP   HL   
1FD2   E5                     PUSH   HL   
1FD3   11 00 00               LD   DE,FALSE   
1FD6   B7                     OR   A   
1FD7   ED 52                  SBC   HL,DE   
1FD9   7D                     LD   A,L   
1FDA   B4                     OR   H   
1FDB   28 50                  JR   Z,expectM_0_2152S43   
1FDD   CD 6D 09               CALL   printStr   
1FE0   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1FEC   CD 6D 09               CALL   printStr   
1FEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FFE   21 00 00               LD   HL,FALSE   
2001   CD BB 08               CALL   prtdec   
2004   CD 6D 09               CALL   printStr   
2007   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2014   E1                     POP   hl   
2015   E5                     PUSH   hl   
2016   CD BB 08               CALL   prtdec   
2019   E1                     POP   hl   
201A   CD 6D 09               CALL   printStr   
201D   20 28 23 00            .CSTR   " (#"   
2021   CD 03 09               CALL   prthex   
2024   CD 6D 09               CALL   printStr   
2027   29 0D 0A 00            .CSTR   ")\r\n"   
202B   76                     HALT      
202C   00                     .CSTR      
202D                EXPECTM_0_2152S43:      
202D   E1                     POP   HL   
202E                          ;*Macro unroll:  test "2 1 >", TRUE
202E   31 80 3C               LD   SP,STACK   
2031   CD 74 09               CALL   init   
2034   CD 26 3B               CALL   execStr   
2037   32 20 31 20 3E 00      .CSTR   "2 1 >"   
203D                          ;*Macro unroll:  expect "2 1 >",TRUE
203D   E1                     POP   HL   
203E   E5                     PUSH   HL   
203F   11 FF FF               LD   DE,TRUE   
2042   B7                     OR   A   
2043   ED 52                  SBC   HL,DE   
2045   7D                     LD   A,L   
2046   B4                     OR   H   
2047   28 50                  JR   Z,expectM_0_2153S43   
2049   CD 6D 09               CALL   printStr   
204C   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2058   CD 6D 09               CALL   printStr   
205B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
206A   21 FF FF               LD   HL,TRUE   
206D   CD BB 08               CALL   prtdec   
2070   CD 6D 09               CALL   printStr   
2073   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2080   E1                     POP   hl   
2081   E5                     PUSH   hl   
2082   CD BB 08               CALL   prtdec   
2085   E1                     POP   hl   
2086   CD 6D 09               CALL   printStr   
2089   20 28 23 00            .CSTR   " (#"   
208D   CD 03 09               CALL   prthex   
2090   CD 6D 09               CALL   printStr   
2093   29 0D 0A 00            .CSTR   ")\r\n"   
2097   76                     HALT      
2098   00                     .CSTR      
2099                EXPECTM_0_2153S43:      
2099   E1                     POP   HL   
209A                          ;*Macro unroll:  test "3 3 >", FALSE
209A   31 80 3C               LD   SP,STACK   
209D   CD 74 09               CALL   init   
20A0   CD 26 3B               CALL   execStr   
20A3   33 20 33 20 3E 00      .CSTR   "3 3 >"   
20A9                          ;*Macro unroll:  expect "3 3 >",FALSE
20A9   E1                     POP   HL   
20AA   E5                     PUSH   HL   
20AB   11 00 00               LD   DE,FALSE   
20AE   B7                     OR   A   
20AF   ED 52                  SBC   HL,DE   
20B1   7D                     LD   A,L   
20B2   B4                     OR   H   
20B3   28 50                  JR   Z,expectM_0_2154S43   
20B5   CD 6D 09               CALL   printStr   
20B8   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
20C4   CD 6D 09               CALL   printStr   
20C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D6   21 00 00               LD   HL,FALSE   
20D9   CD BB 08               CALL   prtdec   
20DC   CD 6D 09               CALL   printStr   
20DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20EC   E1                     POP   hl   
20ED   E5                     PUSH   hl   
20EE   CD BB 08               CALL   prtdec   
20F1   E1                     POP   hl   
20F2   CD 6D 09               CALL   printStr   
20F5   20 28 23 00            .CSTR   " (#"   
20F9   CD 03 09               CALL   prthex   
20FC   CD 6D 09               CALL   printStr   
20FF   29 0D 0A 00            .CSTR   ")\r\n"   
2103   76                     HALT      
2104   00                     .CSTR      
2105                EXPECTM_0_2154S43:      
2105   E1                     POP   HL   
2106                          ;*Macro unroll:  test "4 3 >", TRUE
2106   31 80 3C               LD   SP,STACK   
2109   CD 74 09               CALL   init   
210C   CD 26 3B               CALL   execStr   
210F   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2115                          ;*Macro unroll:  expect "4 3 >",TRUE
2115   E1                     POP   HL   
2116   E5                     PUSH   HL   
2117   11 FF FF               LD   DE,TRUE   
211A   B7                     OR   A   
211B   ED 52                  SBC   HL,DE   
211D   7D                     LD   A,L   
211E   B4                     OR   H   
211F   28 50                  JR   Z,expectM_0_2155S43   
2121   CD 6D 09               CALL   printStr   
2124   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2130   CD 6D 09               CALL   printStr   
2133   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2142   21 FF FF               LD   HL,TRUE   
2145   CD BB 08               CALL   prtdec   
2148   CD 6D 09               CALL   printStr   
214B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2158   E1                     POP   hl   
2159   E5                     PUSH   hl   
215A   CD BB 08               CALL   prtdec   
215D   E1                     POP   hl   
215E   CD 6D 09               CALL   printStr   
2161   20 28 23 00            .CSTR   " (#"   
2165   CD 03 09               CALL   prthex   
2168   CD 6D 09               CALL   printStr   
216B   29 0D 0A 00            .CSTR   ")\r\n"   
216F   76                     HALT      
2170   00                     .CSTR      
2171                EXPECTM_0_2155S43:      
2171   E1                     POP   HL   
2172                          ;*Macro unroll:  test "2 2 <=", TRUE
2172   31 80 3C               LD   SP,STACK   
2175   CD 74 09               CALL   init   
2178   CD 26 3B               CALL   execStr   
217B   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
2182                          ;*Macro unroll:  expect "2 2 <=",TRUE
2182   E1                     POP   HL   
2183   E5                     PUSH   HL   
2184   11 FF FF               LD   DE,TRUE   
2187   B7                     OR   A   
2188   ED 52                  SBC   HL,DE   
218A   7D                     LD   A,L   
218B   B4                     OR   H   
218C   28 51                  JR   Z,expectM_0_2156S43   
218E   CD 6D 09               CALL   printStr   
2191   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
219E   CD 6D 09               CALL   printStr   
21A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21B0   21 FF FF               LD   HL,TRUE   
21B3   CD BB 08               CALL   prtdec   
21B6   CD 6D 09               CALL   printStr   
21B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21C6   E1                     POP   hl   
21C7   E5                     PUSH   hl   
21C8   CD BB 08               CALL   prtdec   
21CB   E1                     POP   hl   
21CC   CD 6D 09               CALL   printStr   
21CF   20 28 23 00            .CSTR   " (#"   
21D3   CD 03 09               CALL   prthex   
21D6   CD 6D 09               CALL   printStr   
21D9   29 0D 0A 00            .CSTR   ")\r\n"   
21DD   76                     HALT      
21DE   00                     .CSTR      
21DF                EXPECTM_0_2156S43:      
21DF   E1                     POP   HL   
21E0                          ;*Macro unroll:  test "2 2 >=", TRUE
21E0   31 80 3C               LD   SP,STACK   
21E3   CD 74 09               CALL   init   
21E6   CD 26 3B               CALL   execStr   
21E9   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
21F0                          ;*Macro unroll:  expect "2 2 >=",TRUE
21F0   E1                     POP   HL   
21F1   E5                     PUSH   HL   
21F2   11 FF FF               LD   DE,TRUE   
21F5   B7                     OR   A   
21F6   ED 52                  SBC   HL,DE   
21F8   7D                     LD   A,L   
21F9   B4                     OR   H   
21FA   28 51                  JR   Z,expectM_0_2157S43   
21FC   CD 6D 09               CALL   printStr   
21FF   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
220C   CD 6D 09               CALL   printStr   
220F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
221E   21 FF FF               LD   HL,TRUE   
2221   CD BB 08               CALL   prtdec   
2224   CD 6D 09               CALL   printStr   
2227   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2234   E1                     POP   hl   
2235   E5                     PUSH   hl   
2236   CD BB 08               CALL   prtdec   
2239   E1                     POP   hl   
223A   CD 6D 09               CALL   printStr   
223D   20 28 23 00            .CSTR   " (#"   
2241   CD 03 09               CALL   prthex   
2244   CD 6D 09               CALL   printStr   
2247   29 0D 0A 00            .CSTR   ")\r\n"   
224B   76                     HALT      
224C   00                     .CSTR      
224D                EXPECTM_0_2157S43:      
224D   E1                     POP   HL   
224E                          ;*Macro unroll:  test "3 1 <<", 6
224E   31 80 3C               LD   SP,STACK   
2251   CD 74 09               CALL   init   
2254   CD 26 3B               CALL   execStr   
2257   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
225E                          ;*Macro unroll:  expect "3 1 <<",6
225E   E1                     POP   HL   
225F   E5                     PUSH   HL   
2260   11 06 00               LD   DE,6   
2263   B7                     OR   A   
2264   ED 52                  SBC   HL,DE   
2266   7D                     LD   A,L   
2267   B4                     OR   H   
2268   28 51                  JR   Z,expectM_0_2158S43   
226A   CD 6D 09               CALL   printStr   
226D   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
227A   CD 6D 09               CALL   printStr   
227D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
228C   21 06 00               LD   HL,6   
228F   CD BB 08               CALL   prtdec   
2292   CD 6D 09               CALL   printStr   
2295   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22A2   E1                     POP   hl   
22A3   E5                     PUSH   hl   
22A4   CD BB 08               CALL   prtdec   
22A7   E1                     POP   hl   
22A8   CD 6D 09               CALL   printStr   
22AB   20 28 23 00            .CSTR   " (#"   
22AF   CD 03 09               CALL   prthex   
22B2   CD 6D 09               CALL   printStr   
22B5   29 0D 0A 00            .CSTR   ")\r\n"   
22B9   76                     HALT      
22BA   00                     .CSTR      
22BB                EXPECTM_0_2158S43:      
22BB   E1                     POP   HL   
22BC                          ;*Macro unroll:  test "10 1 >>", 5
22BC   31 80 3C               LD   SP,STACK   
22BF   CD 74 09               CALL   init   
22C2   CD 26 3B               CALL   execStr   
22C5   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
22CD                          ;*Macro unroll:  expect "10 1 >>",5
22CD   E1                     POP   HL   
22CE   E5                     PUSH   HL   
22CF   11 05 00               LD   DE,5   
22D2   B7                     OR   A   
22D3   ED 52                  SBC   HL,DE   
22D5   7D                     LD   A,L   
22D6   B4                     OR   H   
22D7   28 52                  JR   Z,expectM_0_2159S43   
22D9   CD 6D 09               CALL   printStr   
22DC   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
22EA   CD 6D 09               CALL   printStr   
22ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22FC   21 05 00               LD   HL,5   
22FF   CD BB 08               CALL   prtdec   
2302   CD 6D 09               CALL   printStr   
2305   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2312   E1                     POP   hl   
2313   E5                     PUSH   hl   
2314   CD BB 08               CALL   prtdec   
2317   E1                     POP   hl   
2318   CD 6D 09               CALL   printStr   
231B   20 28 23 00            .CSTR   " (#"   
231F   CD 03 09               CALL   prthex   
2322   CD 6D 09               CALL   printStr   
2325   29 0D 0A 00            .CSTR   ")\r\n"   
2329   76                     HALT      
232A   00                     .CSTR      
232B                EXPECTM_0_2159S43:      
232B   E1                     POP   HL   
232C                          ;*Macro unroll:  test "1 x = x", 1
232C   31 80 3C               LD   SP,STACK   
232F   CD 74 09               CALL   init   
2332   CD 26 3B               CALL   execStr   
2335   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
233D                          ;*Macro unroll:  expect "1 x = x",1
233D   E1                     POP   HL   
233E   E5                     PUSH   HL   
233F   11 01 00               LD   DE,1   
2342   B7                     OR   A   
2343   ED 52                  SBC   HL,DE   
2345   7D                     LD   A,L   
2346   B4                     OR   H   
2347   28 52                  JR   Z,expectM_0_2160S43   
2349   CD 6D 09               CALL   printStr   
234C   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
235A   CD 6D 09               CALL   printStr   
235D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
236C   21 01 00               LD   HL,1   
236F   CD BB 08               CALL   prtdec   
2372   CD 6D 09               CALL   printStr   
2375   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2382   E1                     POP   hl   
2383   E5                     PUSH   hl   
2384   CD BB 08               CALL   prtdec   
2387   E1                     POP   hl   
2388   CD 6D 09               CALL   printStr   
238B   20 28 23 00            .CSTR   " (#"   
238F   CD 03 09               CALL   prthex   
2392   CD 6D 09               CALL   printStr   
2395   29 0D 0A 00            .CSTR   ")\r\n"   
2399   76                     HALT      
239A   00                     .CSTR      
239B                EXPECTM_0_2160S43:      
239B   E1                     POP   HL   
239C                          ;*Macro unroll:  test "1{}:", 1
239C   31 80 3C               LD   SP,STACK   
239F   CD 74 09               CALL   init   
23A2   CD 26 3B               CALL   execStr   
23A5   31 7B 7D 3A 00         .CSTR   "1{}:"   
23AA                          ;*Macro unroll:  expect "1{}:",1
23AA   E1                     POP   HL   
23AB   E5                     PUSH   HL   
23AC   11 01 00               LD   DE,1   
23AF   B7                     OR   A   
23B0   ED 52                  SBC   HL,DE   
23B2   7D                     LD   A,L   
23B3   B4                     OR   H   
23B4   28 4F                  JR   Z,expectM_0_2161S43   
23B6   CD 6D 09               CALL   printStr   
23B9   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
23C4   CD 6D 09               CALL   printStr   
23C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D6   21 01 00               LD   HL,1   
23D9   CD BB 08               CALL   prtdec   
23DC   CD 6D 09               CALL   printStr   
23DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23EC   E1                     POP   hl   
23ED   E5                     PUSH   hl   
23EE   CD BB 08               CALL   prtdec   
23F1   E1                     POP   hl   
23F2   CD 6D 09               CALL   printStr   
23F5   20 28 23 00            .CSTR   " (#"   
23F9   CD 03 09               CALL   prthex   
23FC   CD 6D 09               CALL   printStr   
23FF   29 0D 0A 00            .CSTR   ")\r\n"   
2403   76                     HALT      
2404   00                     .CSTR      
2405                EXPECTM_0_2161S43:      
2405   E1                     POP   HL   
2406                          ;*Macro unroll:  test "{1}:", 1
2406   31 80 3C               LD   SP,STACK   
2409   CD 74 09               CALL   init   
240C   CD 26 3B               CALL   execStr   
240F   7B 31 7D 3A 00         .CSTR   "{1}:"   
2414                          ;*Macro unroll:  expect "{1}:",1
2414   E1                     POP   HL   
2415   E5                     PUSH   HL   
2416   11 01 00               LD   DE,1   
2419   B7                     OR   A   
241A   ED 52                  SBC   HL,DE   
241C   7D                     LD   A,L   
241D   B4                     OR   H   
241E   28 4F                  JR   Z,expectM_0_2162S43   
2420   CD 6D 09               CALL   printStr   
2423   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
242E   CD 6D 09               CALL   printStr   
2431   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2440   21 01 00               LD   HL,1   
2443   CD BB 08               CALL   prtdec   
2446   CD 6D 09               CALL   printStr   
2449   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2456   E1                     POP   hl   
2457   E5                     PUSH   hl   
2458   CD BB 08               CALL   prtdec   
245B   E1                     POP   hl   
245C   CD 6D 09               CALL   printStr   
245F   20 28 23 00            .CSTR   " (#"   
2463   CD 03 09               CALL   prthex   
2466   CD 6D 09               CALL   printStr   
2469   29 0D 0A 00            .CSTR   ")\r\n"   
246D   76                     HALT      
246E   00                     .CSTR      
246F                EXPECTM_0_2162S43:      
246F   E1                     POP   HL   
2470                          ;*Macro unroll:  test "{{1}:}:", 1
2470   31 80 3C               LD   SP,STACK   
2473   CD 74 09               CALL   init   
2476   CD 26 3B               CALL   execStr   
2479   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
2481                          ;*Macro unroll:  expect "{{1}:}:",1
2481   E1                     POP   HL   
2482   E5                     PUSH   HL   
2483   11 01 00               LD   DE,1   
2486   B7                     OR   A   
2487   ED 52                  SBC   HL,DE   
2489   7D                     LD   A,L   
248A   B4                     OR   H   
248B   28 52                  JR   Z,expectM_0_2163S43   
248D   CD 6D 09               CALL   printStr   
2490   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
249E   CD 6D 09               CALL   printStr   
24A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24B0   21 01 00               LD   HL,1   
24B3   CD BB 08               CALL   prtdec   
24B6   CD 6D 09               CALL   printStr   
24B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24C6   E1                     POP   hl   
24C7   E5                     PUSH   hl   
24C8   CD BB 08               CALL   prtdec   
24CB   E1                     POP   hl   
24CC   CD 6D 09               CALL   printStr   
24CF   20 28 23 00            .CSTR   " (#"   
24D3   CD 03 09               CALL   prthex   
24D6   CD 6D 09               CALL   printStr   
24D9   29 0D 0A 00            .CSTR   ")\r\n"   
24DD   76                     HALT      
24DE   00                     .CSTR      
24DF                EXPECTM_0_2163S43:      
24DF   E1                     POP   HL   
24E0                          ;*Macro unroll:  test "{{{1}:}:}:", 1
24E0   31 80 3C               LD   SP,STACK   
24E3   CD 74 09               CALL   init   
24E6   CD 26 3B               CALL   execStr   
24E9   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
24F4                          ;*Macro unroll:  expect "{{{1}:}:}:",1
24F4   E1                     POP   HL   
24F5   E5                     PUSH   HL   
24F6   11 01 00               LD   DE,1   
24F9   B7                     OR   A   
24FA   ED 52                  SBC   HL,DE   
24FC   7D                     LD   A,L   
24FD   B4                     OR   H   
24FE   28 55                  JR   Z,expectM_0_2164S43   
2500   CD 6D 09               CALL   printStr   
2503   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
2514   CD 6D 09               CALL   printStr   
2517   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2526   21 01 00               LD   HL,1   
2529   CD BB 08               CALL   prtdec   
252C   CD 6D 09               CALL   printStr   
252F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
253C   E1                     POP   hl   
253D   E5                     PUSH   hl   
253E   CD BB 08               CALL   prtdec   
2541   E1                     POP   hl   
2542   CD 6D 09               CALL   printStr   
2545   20 28 23 00            .CSTR   " (#"   
2549   CD 03 09               CALL   prthex   
254C   CD 6D 09               CALL   printStr   
254F   29 0D 0A 00            .CSTR   ")\r\n"   
2553   76                     HALT      
2554   00                     .CSTR      
2555                EXPECTM_0_2164S43:      
2555   E1                     POP   HL   
2556                          ;*Macro unroll:  test "5 \\F {10} ?", 5
2556   31 80 3C               LD   SP,STACK   
2559   CD 74 09               CALL   init   
255C   CD 26 3B               CALL   execStr   
255F   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
256B                          ;*Macro unroll:  expect "5 \\F {10} ?",5
256B   E1                     POP   HL   
256C   E5                     PUSH   HL   
256D   11 05 00               LD   DE,5   
2570   B7                     OR   A   
2571   ED 52                  SBC   HL,DE   
2573   7D                     LD   A,L   
2574   B4                     OR   H   
2575   28 56                  JR   Z,expectM_0_2165S43   
2577   CD 6D 09               CALL   printStr   
257A   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
258C   CD 6D 09               CALL   printStr   
258F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
259E   21 05 00               LD   HL,5   
25A1   CD BB 08               CALL   prtdec   
25A4   CD 6D 09               CALL   printStr   
25A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25B4   E1                     POP   hl   
25B5   E5                     PUSH   hl   
25B6   CD BB 08               CALL   prtdec   
25B9   E1                     POP   hl   
25BA   CD 6D 09               CALL   printStr   
25BD   20 28 23 00            .CSTR   " (#"   
25C1   CD 03 09               CALL   prthex   
25C4   CD 6D 09               CALL   printStr   
25C7   29 0D 0A 00            .CSTR   ")\r\n"   
25CB   76                     HALT      
25CC   00                     .CSTR      
25CD                EXPECTM_0_2165S43:      
25CD   E1                     POP   HL   
25CE                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
25CE   31 80 3C               LD   SP,STACK   
25D1   CD 74 09               CALL   init   
25D4   CD 26 3B               CALL   execStr   
25D7   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
25E5                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
25E5   E1                     POP   HL   
25E6   E5                     PUSH   HL   
25E7   11 0F 00               LD   DE,15   
25EA   B7                     OR   A   
25EB   ED 52                  SBC   HL,DE   
25ED   7D                     LD   A,L   
25EE   B4                     OR   H   
25EF   28 58                  JR   Z,expectM_0_2166S43   
25F1   CD 6D 09               CALL   printStr   
25F4   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
2608   CD 6D 09               CALL   printStr   
260B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
261A   21 0F 00               LD   HL,15   
261D   CD BB 08               CALL   prtdec   
2620   CD 6D 09               CALL   printStr   
2623   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2630   E1                     POP   hl   
2631   E5                     PUSH   hl   
2632   CD BB 08               CALL   prtdec   
2635   E1                     POP   hl   
2636   CD 6D 09               CALL   printStr   
2639   20 28 23 00            .CSTR   " (#"   
263D   CD 03 09               CALL   prthex   
2640   CD 6D 09               CALL   printStr   
2643   29 0D 0A 00            .CSTR   ")\r\n"   
2647   76                     HALT      
2648   00                     .CSTR      
2649                EXPECTM_0_2166S43:      
2649   E1                     POP   HL   
264A                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
264A   31 80 3C               LD   SP,STACK   
264D   CD 74 09               CALL   init   
2650   CD 26 3B               CALL   execStr   
2653   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
2667                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
2667   E1                     POP   HL   
2668   E5                     PUSH   HL   
2669   11 15 00               LD   DE,21   
266C   B7                     OR   A   
266D   ED 52                  SBC   HL,DE   
266F   7D                     LD   A,L   
2670   B4                     OR   H   
2671   28 5E                  JR   Z,expectM_0_2167S43   
2673   CD 6D 09               CALL   printStr   
2676   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
2690   CD 6D 09               CALL   printStr   
2693   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26A2   21 15 00               LD   HL,21   
26A5   CD BB 08               CALL   prtdec   
26A8   CD 6D 09               CALL   printStr   
26AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B8   E1                     POP   hl   
26B9   E5                     PUSH   hl   
26BA   CD BB 08               CALL   prtdec   
26BD   E1                     POP   hl   
26BE   CD 6D 09               CALL   printStr   
26C1   20 28 23 00            .CSTR   " (#"   
26C5   CD 03 09               CALL   prthex   
26C8   CD 6D 09               CALL   printStr   
26CB   29 0D 0A 00            .CSTR   ")\r\n"   
26CF   76                     HALT      
26D0   00                     .CSTR      
26D1                EXPECTM_0_2167S43:      
26D1   E1                     POP   HL   
26D2                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
26D2   31 80 3C               LD   SP,STACK   
26D5   CD 74 09               CALL   init   
26D8   CD 26 3B               CALL   execStr   
26DB   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
26EF                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
26EF   E1                     POP   HL   
26F0   E5                     PUSH   HL   
26F1   11 0B 00               LD   DE,11   
26F4   B7                     OR   A   
26F5   ED 52                  SBC   HL,DE   
26F7   7D                     LD   A,L   
26F8   B4                     OR   H   
26F9   28 5E                  JR   Z,expectM_0_2168S43   
26FB   CD 6D 09               CALL   printStr   
26FE   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
2718   CD 6D 09               CALL   printStr   
271B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
272A   21 0B 00               LD   HL,11   
272D   CD BB 08               CALL   prtdec   
2730   CD 6D 09               CALL   printStr   
2733   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2740   E1                     POP   hl   
2741   E5                     PUSH   hl   
2742   CD BB 08               CALL   prtdec   
2745   E1                     POP   hl   
2746   CD 6D 09               CALL   printStr   
2749   20 28 23 00            .CSTR   " (#"   
274D   CD 03 09               CALL   prthex   
2750   CD 6D 09               CALL   printStr   
2753   29 0D 0A 00            .CSTR   ")\r\n"   
2757   76                     HALT      
2758   00                     .CSTR      
2759                EXPECTM_0_2168S43:      
2759   E1                     POP   HL   
275A                          ;*Macro unroll:  test "() -2%", $0000
275A   31 80 3C               LD   SP,STACK   
275D   CD 74 09               CALL   init   
2760   CD 26 3B               CALL   execStr   
2763   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
276A                          ;*Macro unroll:  expect "() -2%",$0000
276A   E1                     POP   HL   
276B   E5                     PUSH   HL   
276C   11 00 00               LD   DE,$0000   
276F   B7                     OR   A   
2770   ED 52                  SBC   HL,DE   
2772   7D                     LD   A,L   
2773   B4                     OR   H   
2774   28 51                  JR   Z,expectM_0_2169S43   
2776   CD 6D 09               CALL   printStr   
2779   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
2786   CD 6D 09               CALL   printStr   
2789   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2798   21 00 00               LD   HL,$0000   
279B   CD BB 08               CALL   prtdec   
279E   CD 6D 09               CALL   printStr   
27A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27AE   E1                     POP   hl   
27AF   E5                     PUSH   hl   
27B0   CD BB 08               CALL   prtdec   
27B3   E1                     POP   hl   
27B4   CD 6D 09               CALL   printStr   
27B7   20 28 23 00            .CSTR   " (#"   
27BB   CD 03 09               CALL   prthex   
27BE   CD 6D 09               CALL   printStr   
27C1   29 0D 0A 00            .CSTR   ")\r\n"   
27C5   76                     HALT      
27C6   00                     .CSTR      
27C7                EXPECTM_0_2169S43:      
27C7   E1                     POP   HL   
27C8                          ;*Macro unroll:  test "(a) -1%", $0001
27C8   31 80 3C               LD   SP,STACK   
27CB   CD 74 09               CALL   init   
27CE   CD 26 3B               CALL   execStr   
27D1   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
27D9                          ;*Macro unroll:  expect "(a) -1%",$0001
27D9   E1                     POP   HL   
27DA   E5                     PUSH   HL   
27DB   11 01 00               LD   DE,$0001   
27DE   B7                     OR   A   
27DF   ED 52                  SBC   HL,DE   
27E1   7D                     LD   A,L   
27E2   B4                     OR   H   
27E3   28 52                  JR   Z,expectM_0_2170S43   
27E5   CD 6D 09               CALL   printStr   
27E8   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
27F6   CD 6D 09               CALL   printStr   
27F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2808   21 01 00               LD   HL,$0001   
280B   CD BB 08               CALL   prtdec   
280E   CD 6D 09               CALL   printStr   
2811   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
281E   E1                     POP   hl   
281F   E5                     PUSH   hl   
2820   CD BB 08               CALL   prtdec   
2823   E1                     POP   hl   
2824   CD 6D 09               CALL   printStr   
2827   20 28 23 00            .CSTR   " (#"   
282B   CD 03 09               CALL   prthex   
282E   CD 6D 09               CALL   printStr   
2831   29 0D 0A 00            .CSTR   ")\r\n"   
2835   76                     HALT      
2836   00                     .CSTR      
2837                EXPECTM_0_2170S43:      
2837   E1                     POP   HL   
2838                          ;*Macro unroll:  test "(a:) -1%", $0001
2838   31 80 3C               LD   SP,STACK   
283B   CD 74 09               CALL   init   
283E   CD 26 3B               CALL   execStr   
2841   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
284A                          ;*Macro unroll:  expect "(a:) -1%",$0001
284A   E1                     POP   HL   
284B   E5                     PUSH   HL   
284C   11 01 00               LD   DE,$0001   
284F   B7                     OR   A   
2850   ED 52                  SBC   HL,DE   
2852   7D                     LD   A,L   
2853   B4                     OR   H   
2854   28 53                  JR   Z,expectM_0_2171S43   
2856   CD 6D 09               CALL   printStr   
2859   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
2868   CD 6D 09               CALL   printStr   
286B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
287A   21 01 00               LD   HL,$0001   
287D   CD BB 08               CALL   prtdec   
2880   CD 6D 09               CALL   printStr   
2883   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2890   E1                     POP   hl   
2891   E5                     PUSH   hl   
2892   CD BB 08               CALL   prtdec   
2895   E1                     POP   hl   
2896   CD 6D 09               CALL   printStr   
2899   20 28 23 00            .CSTR   " (#"   
289D   CD 03 09               CALL   prthex   
28A0   CD 6D 09               CALL   printStr   
28A3   29 0D 0A 00            .CSTR   ")\r\n"   
28A7   76                     HALT      
28A8   00                     .CSTR      
28A9                EXPECTM_0_2171S43:      
28A9   E1                     POP   HL   
28AA                          ;*Macro unroll:  test "(a:b) -1%", $0102
28AA   31 80 3C               LD   SP,STACK   
28AD   CD 74 09               CALL   init   
28B0   CD 26 3B               CALL   execStr   
28B3   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
28BD                          ;*Macro unroll:  expect "(a:b) -1%",$0102
28BD   E1                     POP   HL   
28BE   E5                     PUSH   HL   
28BF   11 02 01               LD   DE,$0102   
28C2   B7                     OR   A   
28C3   ED 52                  SBC   HL,DE   
28C5   7D                     LD   A,L   
28C6   B4                     OR   H   
28C7   28 54                  JR   Z,expectM_0_2172S43   
28C9   CD 6D 09               CALL   printStr   
28CC   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
28DC   CD 6D 09               CALL   printStr   
28DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28EE   21 02 01               LD   HL,$0102   
28F1   CD BB 08               CALL   prtdec   
28F4   CD 6D 09               CALL   printStr   
28F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2904   E1                     POP   hl   
2905   E5                     PUSH   hl   
2906   CD BB 08               CALL   prtdec   
2909   E1                     POP   hl   
290A   CD 6D 09               CALL   printStr   
290D   20 28 23 00            .CSTR   " (#"   
2911   CD 03 09               CALL   prthex   
2914   CD 6D 09               CALL   printStr   
2917   29 0D 0A 00            .CSTR   ")\r\n"   
291B   76                     HALT      
291C   00                     .CSTR      
291D                EXPECTM_0_2172S43:      
291D   E1                     POP   HL   
291E                          ;*Macro unroll:  test "(:b) -1%", $0101
291E   31 80 3C               LD   SP,STACK   
2921   CD 74 09               CALL   init   
2924   CD 26 3B               CALL   execStr   
2927   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
2930                          ;*Macro unroll:  expect "(:b) -1%",$0101
2930   E1                     POP   HL   
2931   E5                     PUSH   HL   
2932   11 01 01               LD   DE,$0101   
2935   B7                     OR   A   
2936   ED 52                  SBC   HL,DE   
2938   7D                     LD   A,L   
2939   B4                     OR   H   
293A   28 53                  JR   Z,expectM_0_2173S43   
293C   CD 6D 09               CALL   printStr   
293F   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
294E   CD 6D 09               CALL   printStr   
2951   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2960   21 01 01               LD   HL,$0101   
2963   CD BB 08               CALL   prtdec   
2966   CD 6D 09               CALL   printStr   
2969   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2976   E1                     POP   hl   
2977   E5                     PUSH   hl   
2978   CD BB 08               CALL   prtdec   
297B   E1                     POP   hl   
297C   CD 6D 09               CALL   printStr   
297F   20 28 23 00            .CSTR   " (#"   
2983   CD 03 09               CALL   prthex   
2986   CD 6D 09               CALL   printStr   
2989   29 0D 0A 00            .CSTR   ")\r\n"   
298D   76                     HALT      
298E   00                     .CSTR      
298F                EXPECTM_0_2173S43:      
298F   E1                     POP   HL   
2990                          ;*Macro unroll:  test "() {2} \\f:", 2
2990   31 80 3C               LD   SP,STACK   
2993   CD 74 09               CALL   init   
2996   CD 26 3B               CALL   execStr   
2999   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
29A4                          ;*Macro unroll:  expect "() {2} \\f:",2
29A4   E1                     POP   HL   
29A5   E5                     PUSH   HL   
29A6   11 02 00               LD   DE,2   
29A9   B7                     OR   A   
29AA   ED 52                  SBC   HL,DE   
29AC   7D                     LD   A,L   
29AD   B4                     OR   H   
29AE   28 55                  JR   Z,expectM_0_2174S43   
29B0   CD 6D 09               CALL   printStr   
29B3   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
29C4   CD 6D 09               CALL   printStr   
29C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29D6   21 02 00               LD   HL,2   
29D9   CD BB 08               CALL   prtdec   
29DC   CD 6D 09               CALL   printStr   
29DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29EC   E1                     POP   hl   
29ED   E5                     PUSH   hl   
29EE   CD BB 08               CALL   prtdec   
29F1   E1                     POP   hl   
29F2   CD 6D 09               CALL   printStr   
29F5   20 28 23 00            .CSTR   " (#"   
29F9   CD 03 09               CALL   prthex   
29FC   CD 6D 09               CALL   printStr   
29FF   29 0D 0A 00            .CSTR   ")\r\n"   
2A03   76                     HALT      
2A04   00                     .CSTR      
2A05                EXPECTM_0_2174S43:      
2A05   E1                     POP   HL   
2A06                          ;*Macro unroll:  test "(a) {2} \\f:", 2
2A06   31 80 3C               LD   SP,STACK   
2A09   CD 74 09               CALL   init   
2A0C   CD 26 3B               CALL   execStr   
2A0F   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
2A1B                          ;*Macro unroll:  expect "(a) {2} \\f:",2
2A1B   E1                     POP   HL   
2A1C   E5                     PUSH   HL   
2A1D   11 02 00               LD   DE,2   
2A20   B7                     OR   A   
2A21   ED 52                  SBC   HL,DE   
2A23   7D                     LD   A,L   
2A24   B4                     OR   H   
2A25   28 56                  JR   Z,expectM_0_2175S43   
2A27   CD 6D 09               CALL   printStr   
2A2A   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
2A3C   CD 6D 09               CALL   printStr   
2A3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A4E   21 02 00               LD   HL,2   
2A51   CD BB 08               CALL   prtdec   
2A54   CD 6D 09               CALL   printStr   
2A57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A64   E1                     POP   hl   
2A65   E5                     PUSH   hl   
2A66   CD BB 08               CALL   prtdec   
2A69   E1                     POP   hl   
2A6A   CD 6D 09               CALL   printStr   
2A6D   20 28 23 00            .CSTR   " (#"   
2A71   CD 03 09               CALL   prthex   
2A74   CD 6D 09               CALL   printStr   
2A77   29 0D 0A 00            .CSTR   ")\r\n"   
2A7B   76                     HALT      
2A7C   00                     .CSTR      
2A7D                EXPECTM_0_2175S43:      
2A7D   E1                     POP   HL   
2A7E                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
2A7E   31 80 3C               LD   SP,STACK   
2A81   CD 74 09               CALL   init   
2A84   CD 26 3B               CALL   execStr   
2A87   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2A96                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2A96   E1                     POP   HL   
2A97   E5                     PUSH   HL   
2A98   11 05 00               LD   DE,5   
2A9B   B7                     OR   A   
2A9C   ED 52                  SBC   HL,DE   
2A9E   7D                     LD   A,L   
2A9F   B4                     OR   H   
2AA0   28 59                  JR   Z,expectM_0_2176S43   
2AA2   CD 6D 09               CALL   printStr   
2AA5   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
2ABA   CD 6D 09               CALL   printStr   
2ABD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ACC   21 05 00               LD   HL,5   
2ACF   CD BB 08               CALL   prtdec   
2AD2   CD 6D 09               CALL   printStr   
2AD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AE2   E1                     POP   hl   
2AE3   E5                     PUSH   hl   
2AE4   CD BB 08               CALL   prtdec   
2AE7   E1                     POP   hl   
2AE8   CD 6D 09               CALL   printStr   
2AEB   20 28 23 00            .CSTR   " (#"   
2AEF   CD 03 09               CALL   prthex   
2AF2   CD 6D 09               CALL   printStr   
2AF5   29 0D 0A 00            .CSTR   ")\r\n"   
2AF9   76                     HALT      
2AFA   00                     .CSTR      
2AFB                EXPECTM_0_2176S43:      
2AFB   E1                     POP   HL   
2AFC                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
2AFC   31 80 3C               LD   SP,STACK   
2AFF   CD 74 09               CALL   init   
2B02   CD 26 3B               CALL   execStr   
2B05   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
2B16                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
2B16   E1                     POP   HL   
2B17   E5                     PUSH   HL   
2B18   11 05 00               LD   DE,5   
2B1B   B7                     OR   A   
2B1C   ED 52                  SBC   HL,DE   
2B1E   7D                     LD   A,L   
2B1F   B4                     OR   H   
2B20   28 5B                  JR   Z,expectM_0_2177S43   
2B22   CD 6D 09               CALL   printStr   
2B25   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
2B3C   CD 6D 09               CALL   printStr   
2B3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B4E   21 05 00               LD   HL,5   
2B51   CD BB 08               CALL   prtdec   
2B54   CD 6D 09               CALL   printStr   
2B57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B64   E1                     POP   hl   
2B65   E5                     PUSH   hl   
2B66   CD BB 08               CALL   prtdec   
2B69   E1                     POP   hl   
2B6A   CD 6D 09               CALL   printStr   
2B6D   20 28 23 00            .CSTR   " (#"   
2B71   CD 03 09               CALL   prthex   
2B74   CD 6D 09               CALL   printStr   
2B77   29 0D 0A 00            .CSTR   ")\r\n"   
2B7B   76                     HALT      
2B7C   00                     .CSTR      
2B7D                EXPECTM_0_2177S43:      
2B7D   E1                     POP   HL   
2B7E                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
2B7E   31 80 3C               LD   SP,STACK   
2B81   CD 74 09               CALL   init   
2B84   CD 26 3B               CALL   execStr   
2B87   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2B96                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2B96   E1                     POP   HL   
2B97   E5                     PUSH   HL   
2B98   11 02 00               LD   DE,2   
2B9B   B7                     OR   A   
2B9C   ED 52                  SBC   HL,DE   
2B9E   7D                     LD   A,L   
2B9F   B4                     OR   H   
2BA0   28 59                  JR   Z,expectM_0_2178S43   
2BA2   CD 6D 09               CALL   printStr   
2BA5   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
2BBA   CD 6D 09               CALL   printStr   
2BBD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BCC   21 02 00               LD   HL,2   
2BCF   CD BB 08               CALL   prtdec   
2BD2   CD 6D 09               CALL   printStr   
2BD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BE2   E1                     POP   hl   
2BE3   E5                     PUSH   hl   
2BE4   CD BB 08               CALL   prtdec   
2BE7   E1                     POP   hl   
2BE8   CD 6D 09               CALL   printStr   
2BEB   20 28 23 00            .CSTR   " (#"   
2BEF   CD 03 09               CALL   prthex   
2BF2   CD 6D 09               CALL   printStr   
2BF5   29 0D 0A 00            .CSTR   ")\r\n"   
2BF9   76                     HALT      
2BFA   00                     .CSTR      
2BFB                EXPECTM_0_2178S43:      
2BFB   E1                     POP   HL   
2BFC                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
2BFC   31 80 3C               LD   SP,STACK   
2BFF   CD 74 09               CALL   init   
2C02   CD 26 3B               CALL   execStr   
2C05   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
2C19                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
2C19   E1                     POP   HL   
2C1A   E5                     PUSH   HL   
2C1B   11 05 00               LD   DE,5   
2C1E   B7                     OR   A   
2C1F   ED 52                  SBC   HL,DE   
2C21   7D                     LD   A,L   
2C22   B4                     OR   H   
2C23   28 5E                  JR   Z,expectM_0_2179S43   
2C25   CD 6D 09               CALL   printStr   
2C28   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
2C42   CD 6D 09               CALL   printStr   
2C45   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C54   21 05 00               LD   HL,5   
2C57   CD BB 08               CALL   prtdec   
2C5A   CD 6D 09               CALL   printStr   
2C5D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C6A   E1                     POP   hl   
2C6B   E5                     PUSH   hl   
2C6C   CD BB 08               CALL   prtdec   
2C6F   E1                     POP   hl   
2C70   CD 6D 09               CALL   printStr   
2C73   20 28 23 00            .CSTR   " (#"   
2C77   CD 03 09               CALL   prthex   
2C7A   CD 6D 09               CALL   printStr   
2C7D   29 0D 0A 00            .CSTR   ")\r\n"   
2C81   76                     HALT      
2C82   00                     .CSTR      
2C83                EXPECTM_0_2179S43:      
2C83   E1                     POP   HL   
2C84                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
2C84   31 80 3C               LD   SP,STACK   
2C87   CD 74 09               CALL   init   
2C8A   CD 26 3B               CALL   execStr   
2C8D   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2CA2                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2CA2   E1                     POP   HL   
2CA3   E5                     PUSH   HL   
2CA4   11 01 00               LD   DE,1   
2CA7   B7                     OR   A   
2CA8   ED 52                  SBC   HL,DE   
2CAA   7D                     LD   A,L   
2CAB   B4                     OR   H   
2CAC   28 5F                  JR   Z,expectM_0_2180S43   
2CAE   CD 6D 09               CALL   printStr   
2CB1   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
2CCC   CD 6D 09               CALL   printStr   
2CCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CDE   21 01 00               LD   HL,1   
2CE1   CD BB 08               CALL   prtdec   
2CE4   CD 6D 09               CALL   printStr   
2CE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CF4   E1                     POP   hl   
2CF5   E5                     PUSH   hl   
2CF6   CD BB 08               CALL   prtdec   
2CF9   E1                     POP   hl   
2CFA   CD 6D 09               CALL   printStr   
2CFD   20 28 23 00            .CSTR   " (#"   
2D01   CD 03 09               CALL   prthex   
2D04   CD 6D 09               CALL   printStr   
2D07   29 0D 0A 00            .CSTR   ")\r\n"   
2D0B   76                     HALT      
2D0C   00                     .CSTR      
2D0D                EXPECTM_0_2180S43:      
2D0D   E1                     POP   HL   
2D0E                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
2D0E   31 80 3C               LD   SP,STACK   
2D11   CD 74 09               CALL   init   
2D14   CD 26 3B               CALL   execStr   
2D17   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
2D2F                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
2D2F   E1                     POP   HL   
2D30   E5                     PUSH   HL   
2D31   11 07 00               LD   DE,7   
2D34   B7                     OR   A   
2D35   ED 52                  SBC   HL,DE   
2D37   7D                     LD   A,L   
2D38   B4                     OR   H   
2D39   28 62                  JR   Z,expectM_0_2181S43   
2D3B   CD 6D 09               CALL   printStr   
2D3E   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
2D5C   CD 6D 09               CALL   printStr   
2D5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D6E   21 07 00               LD   HL,7   
2D71   CD BB 08               CALL   prtdec   
2D74   CD 6D 09               CALL   printStr   
2D77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D84   E1                     POP   hl   
2D85   E5                     PUSH   hl   
2D86   CD BB 08               CALL   prtdec   
2D89   E1                     POP   hl   
2D8A   CD 6D 09               CALL   printStr   
2D8D   20 28 23 00            .CSTR   " (#"   
2D91   CD 03 09               CALL   prthex   
2D94   CD 6D 09               CALL   printStr   
2D97   29 0D 0A 00            .CSTR   ")\r\n"   
2D9B   76                     HALT      
2D9C   00                     .CSTR      
2D9D                EXPECTM_0_2181S43:      
2D9D   E1                     POP   HL   
2D9E                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
2D9E   31 80 3C               LD   SP,STACK   
2DA1   CD 74 09               CALL   init   
2DA4   CD 26 3B               CALL   execStr   
2DA7   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2DC1                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2DC1   E1                     POP   HL   
2DC2   E5                     PUSH   HL   
2DC3   11 06 00               LD   DE,6   
2DC6   B7                     OR   A   
2DC7   ED 52                  SBC   HL,DE   
2DC9   7D                     LD   A,L   
2DCA   B4                     OR   H   
2DCB   28 64                  JR   Z,expectM_0_2182S43   
2DCD   CD 6D 09               CALL   printStr   
2DD0   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2DF0   CD 6D 09               CALL   printStr   
2DF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E02   21 06 00               LD   HL,6   
2E05   CD BB 08               CALL   prtdec   
2E08   CD 6D 09               CALL   printStr   
2E0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E18   E1                     POP   hl   
2E19   E5                     PUSH   hl   
2E1A   CD BB 08               CALL   prtdec   
2E1D   E1                     POP   hl   
2E1E   CD 6D 09               CALL   printStr   
2E21   20 28 23 00            .CSTR   " (#"   
2E25   CD 03 09               CALL   prthex   
2E28   CD 6D 09               CALL   printStr   
2E2B   29 0D 0A 00            .CSTR   ")\r\n"   
2E2F   76                     HALT      
2E30   00                     .CSTR      
2E31                EXPECTM_0_2182S43:      
2E31   E1                     POP   HL   
2E32                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
2E32   31 80 3C               LD   SP,STACK   
2E35   CD 74 09               CALL   init   
2E38   CD 26 3B               CALL   execStr   
2E3B   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
2E4E                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
2E4E   E1                     POP   HL   
2E4F   E5                     PUSH   HL   
2E50   11 02 00               LD   DE,2   
2E53   B7                     OR   A   
2E54   ED 52                  SBC   HL,DE   
2E56   7D                     LD   A,L   
2E57   B4                     OR   H   
2E58   28 5D                  JR   Z,expectM_0_2183S43   
2E5A   CD 6D 09               CALL   printStr   
2E5D   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
2E76   CD 6D 09               CALL   printStr   
2E79   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E88   21 02 00               LD   HL,2   
2E8B   CD BB 08               CALL   prtdec   
2E8E   CD 6D 09               CALL   printStr   
2E91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E9E   E1                     POP   hl   
2E9F   E5                     PUSH   hl   
2EA0   CD BB 08               CALL   prtdec   
2EA3   E1                     POP   hl   
2EA4   CD 6D 09               CALL   printStr   
2EA7   20 28 23 00            .CSTR   " (#"   
2EAB   CD 03 09               CALL   prthex   
2EAE   CD 6D 09               CALL   printStr   
2EB1   29 0D 0A 00            .CSTR   ")\r\n"   
2EB5   76                     HALT      
2EB6   00                     .CSTR      
2EB7                EXPECTM_0_2183S43:      
2EB7   E1                     POP   HL   
2EB8                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2EB8   31 80 3C               LD   SP,STACK   
2EBB   CD 74 09               CALL   init   
2EBE   CD 26 3B               CALL   execStr   
2EC1   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2ED7                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2ED7   E1                     POP   HL   
2ED8   E5                     PUSH   HL   
2ED9   11 01 00               LD   DE,1   
2EDC   B7                     OR   A   
2EDD   ED 52                  SBC   HL,DE   
2EDF   7D                     LD   A,L   
2EE0   B4                     OR   H   
2EE1   28 60                  JR   Z,expectM_0_2184S43   
2EE3   CD 6D 09               CALL   printStr   
2EE6   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2F02   CD 6D 09               CALL   printStr   
2F05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F14   21 01 00               LD   HL,1   
2F17   CD BB 08               CALL   prtdec   
2F1A   CD 6D 09               CALL   printStr   
2F1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F2A   E1                     POP   hl   
2F2B   E5                     PUSH   hl   
2F2C   CD BB 08               CALL   prtdec   
2F2F   E1                     POP   hl   
2F30   CD 6D 09               CALL   printStr   
2F33   20 28 23 00            .CSTR   " (#"   
2F37   CD 03 09               CALL   prthex   
2F3A   CD 6D 09               CALL   printStr   
2F3D   29 0D 0A 00            .CSTR   ")\r\n"   
2F41   76                     HALT      
2F42   00                     .CSTR      
2F43                EXPECTM_0_2184S43:      
2F43   E1                     POP   HL   
2F44                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2F44   31 80 3C               LD   SP,STACK   
2F47   CD 74 09               CALL   init   
2F4A   CD 26 3B               CALL   execStr   
2F4D   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2F64                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2F64   E1                     POP   HL   
2F65   E5                     PUSH   HL   
2F66   11 02 00               LD   DE,2   
2F69   B7                     OR   A   
2F6A   ED 52                  SBC   HL,DE   
2F6C   7D                     LD   A,L   
2F6D   B4                     OR   H   
2F6E   28 61                  JR   Z,expectM_0_2185S43   
2F70   CD 6D 09               CALL   printStr   
2F73   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2F90   CD 6D 09               CALL   printStr   
2F93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA2   21 02 00               LD   HL,2   
2FA5   CD BB 08               CALL   prtdec   
2FA8   CD 6D 09               CALL   printStr   
2FAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FB8   E1                     POP   hl   
2FB9   E5                     PUSH   hl   
2FBA   CD BB 08               CALL   prtdec   
2FBD   E1                     POP   hl   
2FBE   CD 6D 09               CALL   printStr   
2FC1   20 28 23 00            .CSTR   " (#"   
2FC5   CD 03 09               CALL   prthex   
2FC8   CD 6D 09               CALL   printStr   
2FCB   29 0D 0A 00            .CSTR   ")\r\n"   
2FCF   76                     HALT      
2FD0   00                     .CSTR      
2FD1                EXPECTM_0_2185S43:      
2FD1   E1                     POP   HL   
2FD2                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2FD2   31 80 3C               LD   SP,STACK   
2FD5   CD 74 09               CALL   init   
2FD8   CD 26 3B               CALL   execStr   
2FDB   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2FF3                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2FF3   E1                     POP   HL   
2FF4   E5                     PUSH   HL   
2FF5   11 02 00               LD   DE,2   
2FF8   B7                     OR   A   
2FF9   ED 52                  SBC   HL,DE   
2FFB   7D                     LD   A,L   
2FFC   B4                     OR   H   
2FFD   28 62                  JR   Z,expectM_0_2186S43   
2FFF   CD 6D 09               CALL   printStr   
3002   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
3020   CD 6D 09               CALL   printStr   
3023   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3032   21 02 00               LD   HL,2   
3035   CD BB 08               CALL   prtdec   
3038   CD 6D 09               CALL   printStr   
303B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3048   E1                     POP   hl   
3049   E5                     PUSH   hl   
304A   CD BB 08               CALL   prtdec   
304D   E1                     POP   hl   
304E   CD 6D 09               CALL   printStr   
3051   20 28 23 00            .CSTR   " (#"   
3055   CD 03 09               CALL   prthex   
3058   CD 6D 09               CALL   printStr   
305B   29 0D 0A 00            .CSTR   ")\r\n"   
305F   76                     HALT      
3060   00                     .CSTR      
3061                EXPECTM_0_2186S43:      
3061   E1                     POP   HL   
3062                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
3062   31 80 3C               LD   SP,STACK   
3065   CD 74 09               CALL   init   
3068   CD 26 3B               CALL   execStr   
306B   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
3082                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
3082   E1                     POP   HL   
3083   E5                     PUSH   HL   
3084   11 02 00               LD   DE,2   
3087   B7                     OR   A   
3088   ED 52                  SBC   HL,DE   
308A   7D                     LD   A,L   
308B   B4                     OR   H   
308C   28 61                  JR   Z,expectM_0_2187S43   
308E   CD 6D 09               CALL   printStr   
3091   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
30AE   CD 6D 09               CALL   printStr   
30B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30C0   21 02 00               LD   HL,2   
30C3   CD BB 08               CALL   prtdec   
30C6   CD 6D 09               CALL   printStr   
30C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30D6   E1                     POP   hl   
30D7   E5                     PUSH   hl   
30D8   CD BB 08               CALL   prtdec   
30DB   E1                     POP   hl   
30DC   CD 6D 09               CALL   printStr   
30DF   20 28 23 00            .CSTR   " (#"   
30E3   CD 03 09               CALL   prthex   
30E6   CD 6D 09               CALL   printStr   
30E9   29 0D 0A 00            .CSTR   ")\r\n"   
30ED   76                     HALT      
30EE   00                     .CSTR      
30EF                EXPECTM_0_2187S43:      
30EF   E1                     POP   HL   
30F0                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
30F0   31 80 3C               LD   SP,STACK   
30F3   CD 74 09               CALL   init   
30F6   CD 26 3B               CALL   execStr   
30F9   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
3117                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
3117   E1                     POP   HL   
3118   E5                     PUSH   HL   
3119   11 05 00               LD   DE,5   
311C   B7                     OR   A   
311D   ED 52                  SBC   HL,DE   
311F   7D                     LD   A,L   
3120   B4                     OR   H   
3121   28 68                  JR   Z,expectM_0_2188S43   
3123   CD 6D 09               CALL   printStr   
3126   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
314A   CD 6D 09               CALL   printStr   
314D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
315C   21 05 00               LD   HL,5   
315F   CD BB 08               CALL   prtdec   
3162   CD 6D 09               CALL   printStr   
3165   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3172   E1                     POP   hl   
3173   E5                     PUSH   hl   
3174   CD BB 08               CALL   prtdec   
3177   E1                     POP   hl   
3178   CD 6D 09               CALL   printStr   
317B   20 28 23 00            .CSTR   " (#"   
317F   CD 03 09               CALL   prthex   
3182   CD 6D 09               CALL   printStr   
3185   29 0D 0A 00            .CSTR   ")\r\n"   
3189   76                     HALT      
318A   00                     .CSTR      
318B                EXPECTM_0_2188S43:      
318B   E1                     POP   HL   
318C                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
318C   31 80 3C               LD   SP,STACK   
318F   CD 74 09               CALL   init   
3192   CD 26 3B               CALL   execStr   
3195   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
31AA                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
31AA   E1                     POP   HL   
31AB   E5                     PUSH   HL   
31AC   11 02 00               LD   DE,2   
31AF   B7                     OR   A   
31B0   ED 52                  SBC   HL,DE   
31B2   7D                     LD   A,L   
31B3   B4                     OR   H   
31B4   28 5F                  JR   Z,expectM_0_2189S43   
31B6   CD 6D 09               CALL   printStr   
31B9   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
31D4   CD 6D 09               CALL   printStr   
31D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E6   21 02 00               LD   HL,2   
31E9   CD BB 08               CALL   prtdec   
31EC   CD 6D 09               CALL   printStr   
31EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31FC   E1                     POP   hl   
31FD   E5                     PUSH   hl   
31FE   CD BB 08               CALL   prtdec   
3201   E1                     POP   hl   
3202   CD 6D 09               CALL   printStr   
3205   20 28 23 00            .CSTR   " (#"   
3209   CD 03 09               CALL   prthex   
320C   CD 6D 09               CALL   printStr   
320F   29 0D 0A 00            .CSTR   ")\r\n"   
3213   76                     HALT      
3214   00                     .CSTR      
3215                EXPECTM_0_2189S43:      
3215   E1                     POP   HL   
3216                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
3216   31 80 3C               LD   SP,STACK   
3219   CD 74 09               CALL   init   
321C   CD 26 3B               CALL   execStr   
321F   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
323A                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
323A   E1                     POP   HL   
323B   E5                     PUSH   HL   
323C   11 64 00               LD   DE,100   
323F   B7                     OR   A   
3240   ED 52                  SBC   HL,DE   
3242   7D                     LD   A,L   
3243   B4                     OR   H   
3244   28 65                  JR   Z,expectM_0_2190S43   
3246   CD 6D 09               CALL   printStr   
3249   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
326A   CD 6D 09               CALL   printStr   
326D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
327C   21 64 00               LD   HL,100   
327F   CD BB 08               CALL   prtdec   
3282   CD 6D 09               CALL   printStr   
3285   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3292   E1                     POP   hl   
3293   E5                     PUSH   hl   
3294   CD BB 08               CALL   prtdec   
3297   E1                     POP   hl   
3298   CD 6D 09               CALL   printStr   
329B   20 28 23 00            .CSTR   " (#"   
329F   CD 03 09               CALL   prthex   
32A2   CD 6D 09               CALL   printStr   
32A5   29 0D 0A 00            .CSTR   ")\r\n"   
32A9   76                     HALT      
32AA   00                     .CSTR      
32AB                EXPECTM_0_2190S43:      
32AB   E1                     POP   HL   
32AC                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
32AC   31 80 3C               LD   SP,STACK   
32AF   CD 74 09               CALL   init   
32B2   CD 26 3B               CALL   execStr   
32B5   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
32D1                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
32D1   E1                     POP   HL   
32D2   E5                     PUSH   HL   
32D3   11 01 00               LD   DE,1   
32D6   B7                     OR   A   
32D7   ED 52                  SBC   HL,DE   
32D9   7D                     LD   A,L   
32DA   B4                     OR   H   
32DB   28 66                  JR   Z,expectM_0_2191S43   
32DD   CD 6D 09               CALL   printStr   
32E0   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
3302   CD 6D 09               CALL   printStr   
3305   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3314   21 01 00               LD   HL,1   
3317   CD BB 08               CALL   prtdec   
331A   CD 6D 09               CALL   printStr   
331D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
332A   E1                     POP   hl   
332B   E5                     PUSH   hl   
332C   CD BB 08               CALL   prtdec   
332F   E1                     POP   hl   
3330   CD 6D 09               CALL   printStr   
3333   20 28 23 00            .CSTR   " (#"   
3337   CD 03 09               CALL   prthex   
333A   CD 6D 09               CALL   printStr   
333D   29 0D 0A 00            .CSTR   ")\r\n"   
3341   76                     HALT      
3342   00                     .CSTR      
3343                EXPECTM_0_2191S43:      
3343   E1                     POP   HL   
3344                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
3344   31 80 3C               LD   SP,STACK   
3347   CD 74 09               CALL   init   
334A   CD 26 3B               CALL   execStr   
334D   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
336A                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
336A   E1                     POP   HL   
336B   E5                     PUSH   HL   
336C   11 02 00               LD   DE,2   
336F   B7                     OR   A   
3370   ED 52                  SBC   HL,DE   
3372   7D                     LD   A,L   
3373   B4                     OR   H   
3374   28 67                  JR   Z,expectM_0_2192S43   
3376   CD 6D 09               CALL   printStr   
3379   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
339C   CD 6D 09               CALL   printStr   
339F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33AE   21 02 00               LD   HL,2   
33B1   CD BB 08               CALL   prtdec   
33B4   CD 6D 09               CALL   printStr   
33B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33C4   E1                     POP   hl   
33C5   E5                     PUSH   hl   
33C6   CD BB 08               CALL   prtdec   
33C9   E1                     POP   hl   
33CA   CD 6D 09               CALL   printStr   
33CD   20 28 23 00            .CSTR   " (#"   
33D1   CD 03 09               CALL   prthex   
33D4   CD 6D 09               CALL   printStr   
33D7   29 0D 0A 00            .CSTR   ")\r\n"   
33DB   76                     HALT      
33DC   00                     .CSTR      
33DD                EXPECTM_0_2192S43:      
33DD   E1                     POP   HL   
33DE                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
33DE   31 80 3C               LD   SP,STACK   
33E1   CD 74 09               CALL   init   
33E4   CD 26 3B               CALL   execStr   
33E7   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
340C                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
340C   E1                     POP   HL   
340D   E5                     PUSH   HL   
340E   11 0B 00               LD   DE,11   
3411   B7                     OR   A   
3412   ED 52                  SBC   HL,DE   
3414   7D                     LD   A,L   
3415   B4                     OR   H   
3416   28 6F                  JR   Z,expectM_0_2193S43   
3418   CD 6D 09               CALL   printStr   
341B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
3446   CD 6D 09               CALL   printStr   
3449   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3458   21 0B 00               LD   HL,11   
345B   CD BB 08               CALL   prtdec   
345E   CD 6D 09               CALL   printStr   
3461   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
346E   E1                     POP   hl   
346F   E5                     PUSH   hl   
3470   CD BB 08               CALL   prtdec   
3473   E1                     POP   hl   
3474   CD 6D 09               CALL   printStr   
3477   20 28 23 00            .CSTR   " (#"   
347B   CD 03 09               CALL   prthex   
347E   CD 6D 09               CALL   printStr   
3481   29 0D 0A 00            .CSTR   ")\r\n"   
3485   76                     HALT      
3486   00                     .CSTR      
3487                EXPECTM_0_2193S43:      
3487   E1                     POP   HL   
3488                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
3488   31 80 3C               LD   SP,STACK   
348B   CD 74 09               CALL   init   
348E   CD 26 3B               CALL   execStr   
3491   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
34B6                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
34B6   E1                     POP   HL   
34B7   E5                     PUSH   HL   
34B8   11 15 00               LD   DE,21   
34BB   B7                     OR   A   
34BC   ED 52                  SBC   HL,DE   
34BE   7D                     LD   A,L   
34BF   B4                     OR   H   
34C0   28 6F                  JR   Z,expectM_0_2194S43   
34C2   CD 6D 09               CALL   printStr   
34C5   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
34F0   CD 6D 09               CALL   printStr   
34F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3502   21 15 00               LD   HL,21   
3505   CD BB 08               CALL   prtdec   
3508   CD 6D 09               CALL   printStr   
350B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3518   E1                     POP   hl   
3519   E5                     PUSH   hl   
351A   CD BB 08               CALL   prtdec   
351D   E1                     POP   hl   
351E   CD 6D 09               CALL   printStr   
3521   20 28 23 00            .CSTR   " (#"   
3525   CD 03 09               CALL   prthex   
3528   CD 6D 09               CALL   printStr   
352B   29 0D 0A 00            .CSTR   ")\r\n"   
352F   76                     HALT      
3530   00                     .CSTR      
3531                EXPECTM_0_2194S43:      
3531   E1                     POP   HL   
3532                          ;*Macro unroll:  test "[10 20 30] 1%", 20
3532   31 80 3C               LD   SP,STACK   
3535   CD 74 09               CALL   init   
3538   CD 26 3B               CALL   execStr   
353B   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3549                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3549   E1                     POP   HL   
354A   E5                     PUSH   HL   
354B   11 14 00               LD   DE,20   
354E   B7                     OR   A   
354F   ED 52                  SBC   HL,DE   
3551   7D                     LD   A,L   
3552   B4                     OR   H   
3553   28 58                  JR   Z,expectM_0_2195S43   
3555   CD 6D 09               CALL   printStr   
3558   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
356C   CD 6D 09               CALL   printStr   
356F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
357E   21 14 00               LD   HL,20   
3581   CD BB 08               CALL   prtdec   
3584   CD 6D 09               CALL   printStr   
3587   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3594   E1                     POP   hl   
3595   E5                     PUSH   hl   
3596   CD BB 08               CALL   prtdec   
3599   E1                     POP   hl   
359A   CD 6D 09               CALL   printStr   
359D   20 28 23 00            .CSTR   " (#"   
35A1   CD 03 09               CALL   prthex   
35A4   CD 6D 09               CALL   printStr   
35A7   29 0D 0A 00            .CSTR   ")\r\n"   
35AB   76                     HALT      
35AC   00                     .CSTR      
35AD                EXPECTM_0_2195S43:      
35AD   E1                     POP   HL   
35AE                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
35AE   31 80 3C               LD   SP,STACK   
35B1   CD 74 09               CALL   init   
35B4   CD 26 3B               CALL   execStr   
35B7   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
35C5                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
35C5   E1                     POP   HL   
35C6   E5                     PUSH   HL   
35C7   11 02 00               LD   DE,2   
35CA   B7                     OR   A   
35CB   ED 52                  SBC   HL,DE   
35CD   7D                     LD   A,L   
35CE   B4                     OR   H   
35CF   28 58                  JR   Z,expectM_0_2196S43   
35D1   CD 6D 09               CALL   printStr   
35D4   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
35E8   CD 6D 09               CALL   printStr   
35EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35FA   21 02 00               LD   HL,2   
35FD   CD BB 08               CALL   prtdec   
3600   CD 6D 09               CALL   printStr   
3603   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3610   E1                     POP   hl   
3611   E5                     PUSH   hl   
3612   CD BB 08               CALL   prtdec   
3615   E1                     POP   hl   
3616   CD 6D 09               CALL   printStr   
3619   20 28 23 00            .CSTR   " (#"   
361D   CD 03 09               CALL   prthex   
3620   CD 6D 09               CALL   printStr   
3623   29 0D 0A 00            .CSTR   ")\r\n"   
3627   76                     HALT      
3628   00                     .CSTR      
3629                EXPECTM_0_2196S43:      
3629   E1                     POP   HL   
362A                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
362A   31 80 3C               LD   SP,STACK   
362D   CD 74 09               CALL   init   
3630   CD 26 3B               CALL   execStr   
3633   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
3647                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
3647   E1                     POP   HL   
3648   E5                     PUSH   HL   
3649   11 42 00               LD   DE,66   
364C   B7                     OR   A   
364D   ED 52                  SBC   HL,DE   
364F   7D                     LD   A,L   
3650   B4                     OR   H   
3651   28 5E                  JR   Z,expectM_0_2197S43   
3653   CD 6D 09               CALL   printStr   
3656   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
3670   CD 6D 09               CALL   printStr   
3673   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3682   21 42 00               LD   HL,66   
3685   CD BB 08               CALL   prtdec   
3688   CD 6D 09               CALL   printStr   
368B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3698   E1                     POP   hl   
3699   E5                     PUSH   hl   
369A   CD BB 08               CALL   prtdec   
369D   E1                     POP   hl   
369E   CD 6D 09               CALL   printStr   
36A1   20 28 23 00            .CSTR   " (#"   
36A5   CD 03 09               CALL   prthex   
36A8   CD 6D 09               CALL   printStr   
36AB   29 0D 0A 00            .CSTR   ")\r\n"   
36AF   76                     HALT      
36B0   00                     .CSTR      
36B1                EXPECTM_0_2197S43:      
36B1   E1                     POP   HL   
36B2                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
36B2   31 80 3C               LD   SP,STACK   
36B5   CD 74 09               CALL   init   
36B8   CD 26 3B               CALL   execStr   
36BB   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
36D1                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
36D1   E1                     POP   HL   
36D2   E5                     PUSH   HL   
36D3   11 0A 00               LD   DE,10   
36D6   B7                     OR   A   
36D7   ED 52                  SBC   HL,DE   
36D9   7D                     LD   A,L   
36DA   B4                     OR   H   
36DB   28 60                  JR   Z,expectM_0_2198S43   
36DD   CD 6D 09               CALL   printStr   
36E0   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
36FC   CD 6D 09               CALL   printStr   
36FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
370E   21 0A 00               LD   HL,10   
3711   CD BB 08               CALL   prtdec   
3714   CD 6D 09               CALL   printStr   
3717   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3724   E1                     POP   hl   
3725   E5                     PUSH   hl   
3726   CD BB 08               CALL   prtdec   
3729   E1                     POP   hl   
372A   CD 6D 09               CALL   printStr   
372D   20 28 23 00            .CSTR   " (#"   
3731   CD 03 09               CALL   prthex   
3734   CD 6D 09               CALL   printStr   
3737   29 0D 0A 00            .CSTR   ")\r\n"   
373B   76                     HALT      
373C   00                     .CSTR      
373D                EXPECTM_0_2198S43:      
373D   E1                     POP   HL   
373E                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
373E   31 80 3C               LD   SP,STACK   
3741   CD 74 09               CALL   init   
3744   CD 26 3B               CALL   execStr   
3747   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
376B                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
376B   E1                     POP   HL   
376C   E5                     PUSH   HL   
376D   11 0A 00               LD   DE,10   
3770   B7                     OR   A   
3771   ED 52                  SBC   HL,DE   
3773   7D                     LD   A,L   
3774   B4                     OR   H   
3775   28 6E                  JR   Z,expectM_0_2199S43   
3777   CD 6D 09               CALL   printStr   
377A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
37A4   CD 6D 09               CALL   printStr   
37A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37B6   21 0A 00               LD   HL,10   
37B9   CD BB 08               CALL   prtdec   
37BC   CD 6D 09               CALL   printStr   
37BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37CC   E1                     POP   hl   
37CD   E5                     PUSH   hl   
37CE   CD BB 08               CALL   prtdec   
37D1   E1                     POP   hl   
37D2   CD 6D 09               CALL   printStr   
37D5   20 28 23 00            .CSTR   " (#"   
37D9   CD 03 09               CALL   prthex   
37DC   CD 6D 09               CALL   printStr   
37DF   29 0D 0A 00            .CSTR   ")\r\n"   
37E3   76                     HALT      
37E4   00                     .CSTR      
37E5                EXPECTM_0_2199S43:      
37E5   E1                     POP   HL   
37E6                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
37E6   31 80 3C               LD   SP,STACK   
37E9   CD 74 09               CALL   init   
37EC   CD 26 3B               CALL   execStr   
37EF   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3815                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
3815   E1                     POP   HL   
3816   E5                     PUSH   HL   
3817   11 0A 00               LD   DE,10   
381A   B7                     OR   A   
381B   ED 52                  SBC   HL,DE   
381D   7D                     LD   A,L   
381E   B4                     OR   H   
381F   28 70                  JR   Z,expectM_0_2200S43   
3821   CD 6D 09               CALL   printStr   
3824   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3850   CD 6D 09               CALL   printStr   
3853   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3862   21 0A 00               LD   HL,10   
3865   CD BB 08               CALL   prtdec   
3868   CD 6D 09               CALL   printStr   
386B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3878   E1                     POP   hl   
3879   E5                     PUSH   hl   
387A   CD BB 08               CALL   prtdec   
387D   E1                     POP   hl   
387E   CD 6D 09               CALL   printStr   
3881   20 28 23 00            .CSTR   " (#"   
3885   CD 03 09               CALL   prthex   
3888   CD 6D 09               CALL   printStr   
388B   29 0D 0A 00            .CSTR   ")\r\n"   
388F   76                     HALT      
3890   00                     .CSTR      
3891                EXPECTM_0_2200S43:      
3891   E1                     POP   HL   
3892                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
3892   31 80 3C               LD   SP,STACK   
3895   CD 74 09               CALL   init   
3898   CD 26 3B               CALL   execStr   
389B   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
38C1                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
38C1   E1                     POP   HL   
38C2   E5                     PUSH   HL   
38C3   11 14 00               LD   DE,20   
38C6   B7                     OR   A   
38C7   ED 52                  SBC   HL,DE   
38C9   7D                     LD   A,L   
38CA   B4                     OR   H   
38CB   28 70                  JR   Z,expectM_0_2201S43   
38CD   CD 6D 09               CALL   printStr   
38D0   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
38FC   CD 6D 09               CALL   printStr   
38FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
390E   21 14 00               LD   HL,20   
3911   CD BB 08               CALL   prtdec   
3914   CD 6D 09               CALL   printStr   
3917   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3924   E1                     POP   hl   
3925   E5                     PUSH   hl   
3926   CD BB 08               CALL   prtdec   
3929   E1                     POP   hl   
392A   CD 6D 09               CALL   printStr   
392D   20 28 23 00            .CSTR   " (#"   
3931   CD 03 09               CALL   prthex   
3934   CD 6D 09               CALL   printStr   
3937   29 0D 0A 00            .CSTR   ")\r\n"   
393B   76                     HALT      
393C   00                     .CSTR      
393D                EXPECTM_0_2201S43:      
393D   E1                     POP   HL   
393E                          ;*Macro unroll:  test "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ", 10
393E   31 80 3C               LD   SP,STACK   
3941   CD 74 09               CALL   init   
3944   CD 26 3B               CALL   execStr   
3947   30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
396F                          ;*Macro unroll:  expect "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ",10
396F   E1                     POP   HL   
3970   E5                     PUSH   HL   
3971   11 0A 00               LD   DE,10   
3974   B7                     OR   A   
3975   ED 52                  SBC   HL,DE   
3977   7D                     LD   A,L   
3978   B4                     OR   H   
3979   28 72                  JR   Z,expectM_0_2202S43   
397B   CD 6D 09               CALL   printStr   
397E   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
39AC   CD 6D 09               CALL   printStr   
39AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39BE   21 0A 00               LD   HL,10   
39C1   CD BB 08               CALL   prtdec   
39C4   CD 6D 09               CALL   printStr   
39C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39D4   E1                     POP   hl   
39D5   E5                     PUSH   hl   
39D6   CD BB 08               CALL   prtdec   
39D9   E1                     POP   hl   
39DA   CD 6D 09               CALL   printStr   
39DD   20 28 23 00            .CSTR   " (#"   
39E1   CD 03 09               CALL   prthex   
39E4   CD 6D 09               CALL   printStr   
39E7   29 0D 0A 00            .CSTR   ")\r\n"   
39EB   76                     HALT      
39EC   00                     .CSTR      
39ED                EXPECTM_0_2202S43:      
39ED   E1                     POP   HL   
39EE                          ;*Macro unroll:  test "5 [4] (a) {$a} \\f \\c :", 4
39EE   31 80 3C               LD   SP,STACK   
39F1   CD 74 09               CALL   init   
39F4   CD 26 3B               CALL   execStr   
39F7   35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "5 [4] (a) {$a} \\f \\c :"   
3A0E                          ;*Macro unroll:  expect "5 [4] (a) {$a} \\f \\c :",4
3A0E   E1                     POP   HL   
3A0F   E5                     PUSH   HL   
3A10   11 04 00               LD   DE,4   
3A13   B7                     OR   A   
3A14   ED 52                  SBC   HL,DE   
3A16   7D                     LD   A,L   
3A17   B4                     OR   H   
3A18   28 61                  JR   Z,expectM_0_2203S43   
3A1A   CD 6D 09               CALL   printStr   
3A1D   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "Code: ","5 [4] (a) {$a} \\f \\c :"   
3A3A   CD 6D 09               CALL   printStr   
3A3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A4C   21 04 00               LD   HL,4   
3A4F   CD BB 08               CALL   prtdec   
3A52   CD 6D 09               CALL   printStr   
3A55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A62   E1                     POP   hl   
3A63   E5                     PUSH   hl   
3A64   CD BB 08               CALL   prtdec   
3A67   E1                     POP   hl   
3A68   CD 6D 09               CALL   printStr   
3A6B   20 28 23 00            .CSTR   " (#"   
3A6F   CD 03 09               CALL   prthex   
3A72   CD 6D 09               CALL   printStr   
3A75   29 0D 0A 00            .CSTR   ")\r\n"   
3A79   76                     HALT      
3A7A   00                     .CSTR      
3A7B                EXPECTM_0_2203S43:      
3A7B   E1                     POP   HL   
3A7C                          ;*Macro unroll:  test "5 [4] (ab) {$a $b +} \\f \\c :", 9
3A7C   31 80 3C               LD   SP,STACK   
3A7F   CD 74 09               CALL   init   
3A82   CD 26 3B               CALL   execStr   
3A85   35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "5 [4] (ab) {$a $b +} \\f \\c :"   
3AA2                          ;*Macro unroll:  expect "5 [4] (ab) {$a $b +} \\f \\c :",9
3AA2   E1                     POP   HL   
3AA3   E5                     PUSH   HL   
3AA4   11 09 00               LD   DE,9   
3AA7   B7                     OR   A   
3AA8   ED 52                  SBC   HL,DE   
3AAA   7D                     LD   A,L   
3AAB   B4                     OR   H   
3AAC   28 67                  JR   Z,expectM_0_2204S43   
3AAE   CD 6D 09               CALL   printStr   
3AB1   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "Code: ","5 [4] (ab) {$a $b +} \\f \\c :"   
3AD4   CD 6D 09               CALL   printStr   
3AD7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AE6   21 09 00               LD   HL,9   
3AE9   CD BB 08               CALL   prtdec   
3AEC   CD 6D 09               CALL   printStr   
3AEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AFC   E1                     POP   hl   
3AFD   E5                     PUSH   hl   
3AFE   CD BB 08               CALL   prtdec   
3B01   E1                     POP   hl   
3B02   CD 6D 09               CALL   printStr   
3B05   20 28 23 00            .CSTR   " (#"   
3B09   CD 03 09               CALL   prthex   
3B0C   CD 6D 09               CALL   printStr   
3B0F   29 0D 0A 00            .CSTR   ")\r\n"   
3B13   76                     HALT      
3B14   00                     .CSTR      
3B15                EXPECTM_0_2204S43:      
3B15   E1                     POP   HL   
3B16                             ; 
3B16                             ; 
3B16                             ; 
3B16                             ; 
3B16                             ; 
3B16                             ; 
3B16                             ; 
3B16   CD 6D 09               CALL   printStr   
3B19   44 6F 6E 65 21 00      .CSTR   "Done!"   
3B1F   76                     HALT      
3B20                          ALIGN   2   
3B20                PRINTER:      
3B20   E1                     POP   hl   
3B21   CD BB 08               CALL   prtdec   
3B24   DD E9                  JP   (ix)   
3B26                             ; executes a null teminated string (null executes exit_)
3B26                             ; the string should be immedaitely following the call
3B26                EXECSTR:      ; create a root stack frame
3B26   C1                     POP   bc   ; bc = code*
3B27   0B                     DEC   bc   ; dec to prepare for next routine
3B28   11 00 00               LD   de,0   
3B2B   D5                     PUSH   de   ; push fake IP
3B2C   D5                     PUSH   de   ; push null arg_list*
3B2D   D5                     PUSH   de   ; push null first_arg*
3B2E   D5                     PUSH   de   ; push fake BP
3B2F   DD E9                  JP   (ix)   
3B31                          ALIGN   $100   
3C00                             ; .org RAMSTART
3C00                          DS   DSIZE   
3C80                STACK:       
3C80                          ALIGN   $100   
3D00                VARS:        
3D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3DD0                RESTARTS:      
3DD0                RST08:    DS   2   
3DD2                RST10:    DS   2   
3DD4                RST18:    DS   2   
3DD6                RST20:    DS   2   
3DD8                RST28:    DS   2   
3DDA                RST30:    DS   2   ; 
3DDC                BAUD:     DS   2   ; 
3DDE                INTVEC:   DS   2   ; 
3DE0                NMIVEC:   DS   2   ; 
3DE2                GETCVEC:   DS   2   ; 
3DE4                PUTCVEC:   DS   2   ; 
3DE6                SYSVARS:      
3DE6                             ; initialised sys variables
3DE6                VDATAWIDTH:   DS   2   ; 
3DE8                VTIBPTR:   DS   2   ; 
3DEA                VNEXT:    DS   2   ; 
3DEC                VHEAPPTR:   DS   2   ; 
3DEE                             ; uninitialised sys variables
3DEE                VBLOCKEND:   DS   2   ; 
3DF0                VPOINTER:   DS   2   ; 
3DF2                VHASHSTR:   DS   2   ; 
3DF4                VLASTDEF:   DS   2   ; 
3DF6                VREMAIN:   DS   2   ; 
3DF8                VTEMP1:   DS   2   ; 
3DFA                VTEMP2:   DS   2   ; 
3DFC                TBPTR:    DS   2   ; reserved for tests
3DFE                          ALIGN   $100   
3E00                TIB:      DS   TIBSIZE   
3F00                          ALIGN   $100   
3F00                PAD:      DS   $100   
4000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08B9 DEFINED AT LINE 1338 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1298 IN monty.asm
                    > USED AT LINE 1539 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 743 IN monty.asm
                    > USED AT LINE 750 IN monty.asm
                    > USED AT LINE 1349 IN monty.asm
                    > USED AT LINE 1390 IN monty.asm
                    > USED AT LINE 1414 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 801 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 806 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1105 IN monty.asm
                    > USED AT LINE 1436 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1494 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DISCARD_:           0324 DEFINED AT LINE 239 IN monty.asm
DOT_:               0327 DEFINED AT LINE 242 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 244 IN monty.asm
GO_:                032D DEFINED AT LINE 246 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 248 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 250 IN monty.asm
IF_:                0336 DEFINED AT LINE 252 IN monty.asm
INV_:               0339 DEFINED AT LINE 254 IN monty.asm
MUL_:               033F DEFINED AT LINE 257 IN monty.asm
NOT_:               0342 DEFINED AT LINE 259 IN monty.asm
NUM_:               0347 DEFINED AT LINE 262 IN monty.asm
                    > USED AT LINE 1132 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 264 IN monty.asm
OR_:                034D DEFINED AT LINE 266 IN monty.asm
XOR_:               0350 DEFINED AT LINE 268 IN monty.asm
STRING_:            0353 DEFINED AT LINE 270 IN monty.asm
SUB_:               0356 DEFINED AT LINE 272 IN monty.asm
EQ_:                0359 DEFINED AT LINE 274 IN monty.asm
EQ0:                0363 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
EQ1:                0364 DEFINED AT LINE 283 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
GT_:                0368 DEFINED AT LINE 287 IN monty.asm
LT_:                0373 DEFINED AT LINE 296 IN monty.asm
LT1:                037C DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
DIV_:               0385 DEFINED AT LINE 309 IN monty.asm
NOP_:               0388 DEFINED AT LINE 311 IN monty.asm
ADD:                038A DEFINED AT LINE 318 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0395 DEFINED AT LINE 326 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               0399 DEFINED AT LINE 331 IN monty.asm
                    > USED AT LINE 357 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
                    > USED AT LINE 1009 IN monty.asm
                    > USED AT LINE 1146 IN monty.asm
ADDR:               03A4 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03B0 DEFINED AT LINE 347 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B7 DEFINED AT LINE 355 IN monty.asm
                    > USED AT LINE 367 IN monty.asm
                    > USED AT LINE 377 IN monty.asm
OR:                 03BB DEFINED AT LINE 359 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
XOR:                03C4 DEFINED AT LINE 368 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
XOR1:               03C5 DEFINED AT LINE 370 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
ARG:                03CD DEFINED AT LINE 382 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03EB DEFINED AT LINE 403 IN monty.asm
                    > USED AT LINE 409 IN monty.asm
ARG0A:              03F4 DEFINED AT LINE 411 IN monty.asm
                    > USED AT LINE 388 IN monty.asm
                    > USED AT LINE 395 IN monty.asm
ARG1:               03F9 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 407 IN monty.asm
ARG1A:              0401 DEFINED AT LINE 421 IN monty.asm
                    > USED AT LINE 413 IN monty.asm
ARG_LIST:           0404 DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          040E DEFINED AT LINE 437 IN monty.asm
                    > USED AT LINE 455 IN monty.asm
ARG_LIST2:          041A DEFINED AT LINE 445 IN monty.asm
                    > USED AT LINE 442 IN monty.asm
ARG_LIST3:          0422 DEFINED AT LINE 453 IN monty.asm
                    > USED AT LINE 444 IN monty.asm
                    > USED AT LINE 451 IN monty.asm
ARG_LIST4:          0425 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 440 IN monty.asm
ARG_LIST5:          042A DEFINED AT LINE 461 IN monty.asm
                    > USED AT LINE 459 IN monty.asm
ARRBEGIN:           0436 DEFINED AT LINE 472 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0452 DEFINED AT LINE 486 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            046C DEFINED AT LINE 502 IN monty.asm
                    > USED AT LINE 518 IN monty.asm
ARREND2:            047C DEFINED AT LINE 512 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
ARRINDEX:           04A0 DEFINED AT LINE 539 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04A8 DEFINED AT LINE 545 IN monty.asm
ARRINDEX1:          04A9 DEFINED AT LINE 547 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
ARRINDEX2:          04B5 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 553 IN monty.asm
ASSIGN:             04B8 DEFINED AT LINE 561 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
ASSIGN0:            04BA DEFINED AT LINE 564 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
                    > USED AT LINE 335 IN monty.asm
                    > USED AT LINE 1139 IN monty.asm
ASSIGNX:            04BB DEFINED AT LINE 566 IN monty.asm
ASSIGN1:            04C7 DEFINED AT LINE 574 IN monty.asm
                    > USED AT LINE 571 IN monty.asm
BLOCK:              04C9 DEFINED AT LINE 577 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04CD DEFINED AT LINE 581 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
BLOCK2:             04F9 DEFINED AT LINE 608 IN monty.asm
                    > USED AT LINE 595 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
BLOCK3:             04FC DEFINED AT LINE 611 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
BLOCK4:             0504 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
BLOCK5:             0507 DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
BLOCK6:             052F DEFINED AT LINE 639 IN monty.asm
                    > USED AT LINE 626 IN monty.asm
BLOCKEND:           0532 DEFINED AT LINE 643 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1244 IN monty.asm
BLOCKEND1:          055E DEFINED AT LINE 665 IN monty.asm
                    > USED AT LINE 658 IN monty.asm
BLOCKEND2:          056A DEFINED AT LINE 672 IN monty.asm
                    > USED AT LINE 664 IN monty.asm
BLOCKEND3:          057C DEFINED AT LINE 686 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
CHAR:               0587 DEFINED AT LINE 697 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              058A DEFINED AT LINE 699 IN monty.asm
                    > USED AT LINE 710 IN monty.asm
CHAR2:              0596 DEFINED AT LINE 708 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
CHAR3:              0599 DEFINED AT LINE 711 IN monty.asm
                    > USED AT LINE 703 IN monty.asm
DIV:                059C DEFINED AT LINE 715 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DOT:                05AD DEFINED AT LINE 726 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
DOT1:               05B9 DEFINED AT LINE 734 IN monty.asm
                    > USED AT LINE 731 IN monty.asm
DOT2:               05C2 DEFINED AT LINE 739 IN monty.asm
                    > USED AT LINE 736 IN monty.asm
DOT3:               05CC DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DOT4:               05D0 DEFINED AT LINE 748 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
DIVIDE:             05D7 DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 720 IN monty.asm
DIVIDE1:            05DC DEFINED AT LINE 759 IN monty.asm
                    > USED AT LINE 771 IN monty.asm
DIVIDE2:            05E9 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
DIVIDE3:            05EA DEFINED AT LINE 769 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
EQUALS:             05F0 DEFINED AT LINE 777 IN monty.asm
                    > USED AT LINE 285 IN monty.asm
LESSTHANEQ:         05F8 DEFINED AT LINE 785 IN monty.asm
                    > USED AT LINE 305 IN monty.asm
LESSTHAN:           05FD DEFINED AT LINE 792 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
LESSTHAN1:          0602 DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
TRUE1:              0605 DEFINED AT LINE 800 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
NULL1:              060B DEFINED AT LINE 804 IN monty.asm
FALSE1:             060B DEFINED AT LINE 805 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 798 IN monty.asm
                    > USED AT LINE 1165 IN monty.asm
GO:                 0611 DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
                    > USED AT LINE 1254 IN monty.asm
GO1:                0612 DEFINED AT LINE 815 IN monty.asm
                    > USED AT LINE 986 IN monty.asm
                    > USED AT LINE 988 IN monty.asm
                    > USED AT LINE 1325 IN monty.asm
GO2:                0618 DEFINED AT LINE 820 IN monty.asm
                    > USED AT LINE 818 IN monty.asm
GO3:                063F DEFINED AT LINE 841 IN monty.asm
                    > USED AT LINE 823 IN monty.asm
GO4:                0658 DEFINED AT LINE 860 IN monty.asm
                    > USED AT LINE 870 IN monty.asm
GO5:                065E DEFINED AT LINE 867 IN monty.asm
                    > USED AT LINE 859 IN monty.asm
GO6:                0669 DEFINED AT LINE 873 IN monty.asm
                    > USED AT LINE 849 IN monty.asm
GO7:                0681 DEFINED AT LINE 890 IN monty.asm
                    > USED AT LINE 887 IN monty.asm
GO8:                0687 DEFINED AT LINE 896 IN monty.asm
                    > USED AT LINE 900 IN monty.asm
GO9:                068C DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 895 IN monty.asm
GO10:               069A DEFINED AT LINE 913 IN monty.asm
                    > USED AT LINE 833 IN monty.asm
                    > USED AT LINE 889 IN monty.asm
GO11:               069F DEFINED AT LINE 917 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
GO12:               06A0 DEFINED AT LINE 919 IN monty.asm
                    > USED AT LINE 912 IN monty.asm
HEXNUM:             06AD DEFINED AT LINE 927 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
HEXNUM1:            06B0 DEFINED AT LINE 929 IN monty.asm
                    > USED AT LINE 946 IN monty.asm
HEXNUM2:            06B8 DEFINED AT LINE 935 IN monty.asm
                    > USED AT LINE 933 IN monty.asm
IDENTU:             06CA DEFINED AT LINE 947 IN monty.asm
                    > USED AT LINE 249 IN monty.asm
IDENTL:             06CF DEFINED AT LINE 951 IN monty.asm
                    > USED AT LINE 251 IN monty.asm
IDENT1:             06D4 DEFINED AT LINE 955 IN monty.asm
                    > USED AT LINE 950 IN monty.asm
IF:                 06E1 DEFINED AT LINE 968 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
IFTE:               06ED DEFINED AT LINE 978 IN monty.asm
                    > USED AT LINE 972 IN monty.asm
IFTE1:              06EE DEFINED AT LINE 980 IN monty.asm
                    > USED AT LINE 975 IN monty.asm
MUL:                06FA DEFINED AT LINE 990 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
MUL2:               06FC DEFINED AT LINE 993 IN monty.asm
MUL3:               0704 DEFINED AT LINE 998 IN monty.asm
                    > USED AT LINE 1007 IN monty.asm
NUM:                0716 DEFINED AT LINE 1011 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
NUM0:               071F DEFINED AT LINE 1017 IN monty.asm
                    > USED AT LINE 1015 IN monty.asm
NUM1:               0720 DEFINED AT LINE 1019 IN monty.asm
                    > USED AT LINE 1036 IN monty.asm
NUM2:               0738 DEFINED AT LINE 1037 IN monty.asm
                    > USED AT LINE 937 IN monty.asm
                    > USED AT LINE 939 IN monty.asm
                    > USED AT LINE 1022 IN monty.asm
                    > USED AT LINE 1024 IN monty.asm
NUM3:               0743 DEFINED AT LINE 1045 IN monty.asm
                    > USED AT LINE 1040 IN monty.asm
REMAIN:             0746 DEFINED AT LINE 1049 IN monty.asm
                    > USED AT LINE 245 IN monty.asm
SHIFTLEFT:          074C DEFINED AT LINE 1056 IN monty.asm
                    > USED AT LINE 300 IN monty.asm
SHIFTLEFT1:         0754 DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1066 IN monty.asm
SHIFTLEFT2:         0755 DEFINED AT LINE 1065 IN monty.asm
                    > USED AT LINE 1062 IN monty.asm
SHIFTRIGHT:         075C DEFINED AT LINE 1073 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
SHIFTRIGHT1:        0764 DEFINED AT LINE 1080 IN monty.asm
                    > USED AT LINE 1084 IN monty.asm
SHIFTRIGHT2:        0768 DEFINED AT LINE 1083 IN monty.asm
                    > USED AT LINE 1079 IN monty.asm
STRING:             076F DEFINED AT LINE 1092 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
STRING1:            0778 DEFINED AT LINE 1099 IN monty.asm
                    > USED AT LINE 1106 IN monty.asm
                    > USED AT LINE 1108 IN monty.asm
STRING2:            077B DEFINED AT LINE 1103 IN monty.asm
                    > USED AT LINE 1098 IN monty.asm
SUB:                0797 DEFINED AT LINE 1125 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
SUB0:               07A3 DEFINED AT LINE 1133 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
SUB1:               07AD DEFINED AT LINE 1140 IN monty.asm
                    > USED AT LINE 1136 IN monty.asm
COMMAND:            07B6 DEFINED AT LINE 1151 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               0804 DEFINED AT LINE 1186 IN monty.asm
                    > USED AT LINE 1157 IN monty.asm
CLOSURE:            0811 DEFINED AT LINE 1201 IN monty.asm
                    > USED AT LINE 1161 IN monty.asm
COMMENT:            0831 DEFINED AT LINE 1217 IN monty.asm
                    > USED AT LINE 1155 IN monty.asm
                    > USED AT LINE 1221 IN monty.asm
BREAK:              083A DEFINED AT LINE 1225 IN monty.asm
                    > USED AT LINE 1181 IN monty.asm
BREAK1:             0841 DEFINED AT LINE 1231 IN monty.asm
                    > USED AT LINE 1229 IN monty.asm
REPEAT:             0860 DEFINED AT LINE 1248 IN monty.asm
                    > USED AT LINE 1173 IN monty.asm
BYTES:              0868 DEFINED AT LINE 1256 IN monty.asm
                    > USED AT LINE 1159 IN monty.asm
BYTES1:             086B DEFINED AT LINE 1258 IN monty.asm
                    > USED AT LINE 1329 IN monty.asm
FUNC:               0870 DEFINED AT LINE 1263 IN monty.asm
                    > USED AT LINE 1163 IN monty.asm
INPUT:              088C DEFINED AT LINE 1287 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
KEY:                0897 DEFINED AT LINE 1297 IN monty.asm
                    > USED AT LINE 1169 IN monty.asm
OUTPUT:             08A0 DEFINED AT LINE 1306 IN monty.asm
                    > USED AT LINE 1171 IN monty.asm
SELECT:             08A9 DEFINED AT LINE 1317 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
WORDS:              08B3 DEFINED AT LINE 1327 IN monty.asm
                    > USED AT LINE 1179 IN monty.asm
FILTER:             08B9 DEFINED AT LINE 1336 IN monty.asm
MAP:                08B9 DEFINED AT LINE 1337 IN monty.asm
PRTDEC:             08BB DEFINED AT LINE 1345 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 142
PRTDEC0:            08CA DEFINED AT LINE 1356 IN monty.asm
                    > USED AT LINE 1347 IN monty.asm
PRTDEC1:            08EC DEFINED AT LINE 1372 IN monty.asm
                    > USED AT LINE 1360 IN monty.asm
                    > USED AT LINE 1362 IN monty.asm
                    > USED AT LINE 1364 IN monty.asm
                    > USED AT LINE 1366 IN monty.asm
                    > USED AT LINE 1369 IN monty.asm
PRTDEC2:            08EE DEFINED AT LINE 1374 IN monty.asm
                    > USED AT LINE 1377 IN monty.asm
PRTDEC3:            08FE DEFINED AT LINE 1386 IN monty.asm
                    > USED AT LINE 1381 IN monty.asm
PRTDEC4:            08FF DEFINED AT LINE 1388 IN monty.asm
                    > USED AT LINE 1385 IN monty.asm
PRTHEX:             0903 DEFINED AT LINE 1392 IN monty.asm
                    > USED AT LINE 732 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            090E DEFINED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1395 IN monty.asm
                    > USED AT LINE 1397 IN monty.asm
PRTHEX3:            0917 DEFINED AT LINE 1408 IN monty.asm
                    > USED AT LINE 1406 IN monty.asm
PRTSTR0:            0922 DEFINED AT LINE 1416 IN monty.asm
                    > USED AT LINE 1422 IN monty.asm
PRTSTR:             0926 DEFINED AT LINE 1419 IN monty.asm
                    > USED AT LINE 737 IN monty.asm
                    > USED AT LINE 1486 IN monty.asm
NESTING:            092B DEFINED AT LINE 1435 IN monty.asm
                    > USED AT LINE 1530 IN monty.asm
                    > USED AT LINE 1571 IN monty.asm
NESTING0:           0935 DEFINED AT LINE 1441 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
                    > USED AT LINE 1439 IN monty.asm
NESTING1A:          093C DEFINED AT LINE 1446 IN monty.asm
                    > USED AT LINE 1443 IN monty.asm
NESTING1:           093F DEFINED AT LINE 1449 IN monty.asm
                    > USED AT LINE 1440 IN monty.asm
NESTING2:           094E DEFINED AT LINE 1458 IN monty.asm
                    > USED AT LINE 1453 IN monty.asm
                    > USED AT LINE 1455 IN monty.asm
NESTING3:           0950 DEFINED AT LINE 1461 IN monty.asm
                    > USED AT LINE 1457 IN monty.asm
NESTING4:           095B DEFINED AT LINE 1468 IN monty.asm
                    > USED AT LINE 1463 IN monty.asm
                    > USED AT LINE 1465 IN monty.asm
PROMPT:             095D DEFINED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1514 IN monty.asm
CRLF:               0966 DEFINED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1583 IN monty.asm
PRINTSTR:           096D DEFINED AT LINE 1484 IN monty.asm
                    > USED AT LINE 1473 IN monty.asm
                    > USED AT LINE 1478 IN monty.asm
                    > USED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 135
INIT:               0974 DEFINED AT LINE 1491 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1509 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              098D DEFINED AT LINE 1501 IN monty.asm
                    > USED AT LINE 1504 IN monty.asm
START:              0992 DEFINED AT LINE 1507 IN monty.asm
INTERPRET:          09A8 DEFINED AT LINE 1513 IN monty.asm
                    > USED AT LINE 1608 IN monty.asm
                    > USED AT LINE 1617 IN monty.asm
INTERPRET2:         09B2 DEFINED AT LINE 1519 IN monty.asm
                    > USED AT LINE 1563 IN monty.asm
INTERPRET3:         09BA DEFINED AT LINE 1526 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
INTERPRET4:         09C0 DEFINED AT LINE 1532 IN monty.asm
                    > USED AT LINE 1524 IN monty.asm
INTERPRET5:         09C5 DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1572 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
INTERPRET6:         09D6 DEFINED AT LINE 1565 IN monty.asm
                    > USED AT LINE 1541 IN monty.asm
INTERPRET7:         09E4 DEFINED AT LINE 1574 IN monty.asm
                    > USED AT LINE 1546 IN monty.asm
INTERPRET8:         09F7 DEFINED AT LINE 1588 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
NEXT:               09FF DEFINED AT LINE 1594 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
NEXT1:              0A0E DEFINED AT LINE 1605 IN monty.asm
                    > USED AT LINE 1599 IN monty.asm
EXIT_:              0A15 DEFINED AT LINE 1609 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
ERROR:              0A18 DEFINED AT LINE 1613 IN monty.asm
                    > USED AT LINE 1184 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2099S43:  0B8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2105S43:  0BF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2106S43:  0C5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2107S43:  0CBF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2108S43:  0D23 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2109S43:  0D87 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2110S43:  0DEB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2111S43:  0E51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2112S43:  0EB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2113S43:  0F1F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2114S43:  0F85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2115S43:  0FED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2116S43:  1057 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2117S43:  10BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2118S43:  1127 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2119S43:  1195 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2120S43:  1203 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2121S43:  126F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2122S43:  12DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2123S43:  1353 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2124S43:  13C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2125S43:  1431 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2126S43:  14A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2127S43:  1523 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2128S43:  1593 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2129S43:  15FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2130S43:  166B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2131S43:  16E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2132S43:  175D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2133S43:  17C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2134S43:  1845 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  18B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  192D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  1999 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  1A15 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  1A81 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  1AFD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  1B71 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  1BDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  1C59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  1CC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  1D35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  1DA3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  1E11 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  1E7D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  1EE9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  1F55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  1FC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  202D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  2099 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  2105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  2171 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  21DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  224D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  22BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  232B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  239B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  2405 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  246F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  24DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  2555 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  25CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  2649 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  26D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  2759 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  27C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  2837 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  28A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  291D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  298F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  2A05 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  2A7D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  2AFB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  2B7D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  2BFB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  2C83 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  2D0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  2D9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  2E31 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  2EB7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  2F43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  2FD1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  3061 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  30EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  318B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  3215 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  32AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  3343 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  33DD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  3487 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  3531 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  35AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  3629 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  36B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  373D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  37E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  3891 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  393D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  39ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  3A7B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  3B15 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3B20 DEFINED AT LINE 140
EXECSTR:            3B26 DEFINED AT LINE 147
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
                    > USED AT LINE 1508 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1498 IN monty.asm
RESTARTS:           3DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1495 IN monty.asm
VDATAWIDTH:         3DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 506 IN monty.asm
                    > USED AT LINE 542 IN monty.asm
                    > USED AT LINE 569 IN monty.asm
                    > USED AT LINE 1259 IN monty.asm
VTIBPTR:            3DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1517 IN monty.asm
                    > USED AT LINE 1589 IN monty.asm
VNEXT:              3DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1492 IN monty.asm
VHEAPPTR:           3DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 432 IN monty.asm
                    > USED AT LINE 463 IN monty.asm
                    > USED AT LINE 496 IN monty.asm
                    > USED AT LINE 528 IN monty.asm
                    > USED AT LINE 529 IN monty.asm
                    > USED AT LINE 634 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 1093 IN monty.asm
                    > USED AT LINE 1112 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
                    > USED AT LINE 1208 IN monty.asm
                    > USED AT LINE 1209 IN monty.asm
                    > USED AT LINE 1265 IN monty.asm
                    > USED AT LINE 1280 IN monty.asm
                    > USED AT LINE 1282 IN monty.asm
VBLOCKEND:          3DEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           3DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 342 IN monty.asm
                    > USED AT LINE 344 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 417 IN monty.asm
                    > USED AT LINE 549 IN monty.asm
                    > USED AT LINE 567 IN monty.asm
                    > USED AT LINE 959 IN monty.asm
VHASHSTR:           3DF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           3DF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            3DF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 722 IN monty.asm
                    > USED AT LINE 1050 IN monty.asm
VTEMP1:             3DF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 489 IN monty.asm
                    > USED AT LINE 530 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 850 IN monty.asm
                    > USED AT LINE 871 IN monty.asm
                    > USED AT LINE 878 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
                    > USED AT LINE 1204 IN monty.asm
                    > USED AT LINE 1207 IN monty.asm
VTEMP2:             3DFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 851 IN monty.asm
                    > USED AT LINE 872 IN monty.asm
TBPTR:              3DFC DEFINED AT LINE 43 IN ram.asm
TIB:                3E00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1523 IN monty.asm
                    > USED AT LINE 1566 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
                    > USED AT LINE 1590 IN monty.asm
PAD:                3F00 DEFINED AT LINE 49 IN ram.asm
HEAP:               4000 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 622 IN monty.asm
