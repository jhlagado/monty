0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD AC 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                DC3:      EQU   19   ; enter code (anonymous)
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   8D 0A                  DW   next   ; g nNext
018E   00 1E                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available @ " % , ; DEL
0220   CA                     DB   lsb(nop_)   ; SP
0221   97                     DB   lsb(not_)   ; !
0222   CA                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CA                     DB   lsb(nop_)   ; %
0226   51                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   CA                     DB   lsb(nop_)   ; )
022A   80                     DB   lsb(mul_)   ; *
022B   73                     DB   lsb(add_)   ; +
022C   CA                     DB   lsb(nop_)   ; ,
022D   83                     DB   lsb(sub_)   ; -
022E   0F                     DB   lsb(dot_)   ; .
022F   B2                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   4E                     DB   lsb(symbol_)   ; :
023B   CA                     DB   lsb(nop_)   ; ;
023C   A5                     DB   lsb(lt_)   ; <
023D   9C                     DB   lsb(eq_)   ; =
023E   A1                     DB   lsb(gt_)   ; >
023F   39                     DB   lsb(index_)   ; ?
0240   CA                     DB   lsb(nop_)   ; @
0241   4B                     DB   lsb(ident_)   ; A
0242   4B                     DB   lsb(ident_)   ; B
0243   4B                     DB   lsb(ident_)   ; C
0244   4B                     DB   lsb(ident_)   ; D
0245   4B                     DB   lsb(ident_)   ; E
0246   4B                     DB   lsb(ident_)   ; F
0247   4B                     DB   lsb(ident_)   ; G
0248   4B                     DB   lsb(ident_)   ; h
0249   4B                     DB   lsb(ident_)   ; I
024A   4B                     DB   lsb(ident_)   ; J
024B   4B                     DB   lsb(ident_)   ; K
024C   4B                     DB   lsb(ident_)   ; L
024D   4B                     DB   lsb(ident_)   ; M
024E   4B                     DB   lsb(ident_)   ; N
024F   4B                     DB   lsb(ident_)   ; O
0250   4B                     DB   lsb(ident_)   ; p
0251   4B                     DB   lsb(ident_)   ; Q
0252   4B                     DB   lsb(ident_)   ; R
0253   4B                     DB   lsb(ident_)   ; S
0254   4B                     DB   lsb(ident_)   ; T
0255   4B                     DB   lsb(ident_)   ; U
0256   4B                     DB   lsb(ident_)   ; V
0257   4B                     DB   lsb(ident_)   ; W
0258   4B                     DB   lsb(ident_)   ; X
0259   4B                     DB   lsb(ident_)   ; Y
025A   4B                     DB   lsb(ident_)   ; Z
025B   45                     DB   lsb(array_)   ; [
025C   C1                     DB   lsb(comment_)   ; \
025D   48                     DB   lsb(arrayEnd_)   ; ]
025E   65                     DB   lsb(xor_)   ; ^
025F   4B                     DB   lsb(ident_)   ; _
0260   42                     DB   lsb(char_)   ; `    	
0261   4B                     DB   lsb(ident_)   ; a
0262   4B                     DB   lsb(ident_)   ; b
0263   4B                     DB   lsb(ident_)   ; c
0264   4B                     DB   lsb(ident_)   ; d
0265   4B                     DB   lsb(ident_)   ; e
0266   4B                     DB   lsb(ident_)   ; f
0267   4B                     DB   lsb(ident_)   ; g
0268   4B                     DB   lsb(ident_)   ; h
0269   4B                     DB   lsb(ident_)   ; i
026A   4B                     DB   lsb(ident_)   ; j
026B   4B                     DB   lsb(ident_)   ; k
026C   4B                     DB   lsb(ident_)   ; l
026D   4B                     DB   lsb(ident_)   ; m
026E   4B                     DB   lsb(ident_)   ; n
026F   4B                     DB   lsb(ident_)   ; o
0270   4B                     DB   lsb(ident_)   ; p
0271   4B                     DB   lsb(ident_)   ; q
0272   4B                     DB   lsb(ident_)   ; r
0273   4B                     DB   lsb(ident_)   ; s
0274   4B                     DB   lsb(ident_)   ; t
0275   4B                     DB   lsb(ident_)   ; u
0276   4B                     DB   lsb(ident_)   ; v
0277   4B                     DB   lsb(ident_)   ; w
0278   4B                     DB   lsb(ident_)   ; x
0279   4B                     DB   lsb(ident_)   ; y
027A   4B                     DB   lsb(ident_)   ; z
027B   3C                     DB   lsb(block_)   ; {
027C   5C                     DB   lsb(or_)   ; |
027D   3F                     DB   lsb(blockEnd_)   ; }
027E   6E                     DB   lsb(inv_)   ; ~
027F   CA                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0B 04               JP   num   
0303                HEXNUM_:      
0303   C3 3B 04               JP   hexnum   
0306                ARG_:        
0306   C3 90 0B               JP   arg   
0309                STRING_:      
0309   C3 58 04               JP   string   
030C                ARG_LIST_:      
030C   C3 7C 04               JP   arg_list   
030F                DOT_:        
030F   E1                     POP   hl   
0310   03                     INC   bc   
0311   0A                     LD   a,(bc)   
0312   FE 68                  CP   "h"   
0314   20 05                  JR   nz,dot1   
0316   CD 25 08               CALL   prthex   
0319   18 17                  JR   dot4   
031B                DOT1:        
031B   FE 73                  CP   "s"   
031D   20 05                  JR   nz,dot2   
031F   CD 48 08               CALL   prtstr   
0322   18 0E                  JR   dot4   
0324                DOT2:        
0324   FE 63                  CP   "c"   
0326   20 06                  JR   nz,dot3   
0328   7D                     LD   a,l   
0329   CD 85 00               CALL   putchar   
032C   18 04                  JR   dot4   
032E                DOT3:        
032E   0B                     DEC   bc   
032F   CD DD 07               CALL   prtdec   
0332                DOT4:        
0332   3E 20                  LD   a," "   
0334   CD 85 00               CALL   putchar   
0337   DD E9                  JP   (ix)   
0339                             ; addr index -- addr2
0339                INDEX_:      
0339   C3 6D 05               JP   index   
033C                BLOCK_:      
033C   C3 C3 04               JP   block   
033F                BLOCKEND_:      
033F   C3 00 05               JP   blockend   
0342                CHAR_:       
0342   C3 AE 04               JP   char   
0345                ARRAY_:      
0345   C3 A4 05               JP   array   
0348                ARRAYEND_:      
0348   C3 C0 05               JP   arrayEnd   
034B                IDENT_:      
034B   C3 BA 06               JP   ident   
034E                SYMBOL_:      
034E   C3 92 06               JP   symbol   
0351                AND_:        
0351   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0352   E1                     POP   hl   
0353   7B                     LD   a,e   
0354   A5                     AND   l   
0355   6F                     LD   l,a   
0356   7A                     LD   a,d   
0357   A4                     AND   h   
0358                AND1:        
0358   67                     LD   h,a   
0359   E5                     PUSH   hl   
035A   DD E9                  JP   (ix)   
035C                OR_:         
035C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
035D   E1                     POP   hl   
035E   7B                     LD   a,e   
035F   B5                     OR   l   
0360   6F                     LD   l,a   
0361   7A                     LD   a,d   
0362   B4                     OR   h   
0363   18 F3                  JR   and1   
0365                XOR_:        
0365   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0366                XOR1:        
0366   E1                     POP   hl   
0367   7B                     LD   a,e   
0368   AD                     XOR   l   
0369   6F                     LD   l,a   
036A   7A                     LD   a,d   
036B   AC                     XOR   h   
036C   18 EA                  JR   and1   
036E                INV_:        ; Bitwise INVert the top member of the stack
036E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0371   18 F3                  JR   xor1   
0373                ADD_:        ; add the top 2 members of the stack
0373   D1                     POP   de   
0374   E1                     POP   hl   
0375   19                     ADD   hl,de   
0376   E5                     PUSH   hl   
0377   DD E9                  JP   (ix)   
0379                HDOT_:       ; print hexadecimal
0379   E1                     POP   hl   
037A   CD 25 08               CALL   prthex   
037D   C3 2E 03               JP   dot3   
0380                MUL_:        
0380   C3 EF 03               JP   mul   
0383                SUB_:        ; negative sign or subtract
0383   03                     INC   bc   ; check if sign of a number
0384   0A                     LD   a,(bc)   
0385   0B                     DEC   bc   
0386   FE 30                  CP   "0"   
0388   38 05                  JR   c,sub1   
038A   FE 3A                  CP   "9"+1   
038C   DA 00 03               JP   c,num_   
038F                SUB1:        ; Subtract the value 2nd on stack from top of stack
038F   D1                     POP   de   
0390   E1                     POP   hl   ; Entry point for INVert
0391                SUB2:        
0391   B7                     OR   a   ; Entry point for NEGate
0392   ED 52                  SBC   hl,de   
0394   E5                     PUSH   hl   
0395   DD E9                  JP   (ix)   
0397                NOT_:        ; logical invert, any non zero value
0397   21 00 00               LD   hl,0   ; is considered true
039A   18 01                  JR   eq1   
039C                EQ_:         
039C   E1                     POP   hl   
039D                EQ1:         
039D   D1                     POP   de   
039E   C3 EC 06               JP   equals   
03A1                GT_:         
03A1   D1                     POP   de   
03A2   E1                     POP   hl   
03A3   18 02                  JR   lt1   
03A5                LT_:         
03A5   E1                     POP   hl   
03A6   D1                     POP   de   
03A7                LT1:         
03A7   03                     INC   bc   
03A8   0A                     LD   a,(bc)   
03A9   FE 3D                  CP   "="   
03AB   CA F4 06               JP   z,lessthaneq   
03AE   0B                     DEC   bc   
03AF   C3 F9 06               JP   lessthan   
03B2                DIV_:        
03B2   D1                     POP   de   ; get first value
03B3   E1                     POP   hl   ; get 2nd value
03B4   C5                     PUSH   bc   ; preserve the IP
03B5   44 4D                  LD   bc,hl   
03B7   CD 9A 07               CALL   divide   
03BA   22 98 18               LD   (vFrac),hl   
03BD   C1                     POP   bc   
03BE   D5                     PUSH   de   ; push result
03BF   DD E9                  JP   (ix)   
03C1                COMMENT_:      
03C1   03                     INC   bc   ; point to next char
03C2   0A                     LD   a,(bc)   
03C3   FE 20                  CP   " "   ; terminate on any char less than SP
03C5   30 FA                  JR   nc,comment_   
03C7   0B                     DEC   bc   
03C8   DD E9                  JP   (ix)   
03CA                NOP_:        
03CA   DD E9                  JP   (ix)   
03CC                             ;*******************************************************************
03CC                             ; word operators
03CC                             ;*******************************************************************
03CC                             ; shl
03CC                             ; value count -- value2          shift left count places
03CC                SHL:         
03CC   50 59                  LD   de,bc   ; save IP
03CE   C1                     POP   bc   ; bc = count
03CF   41                     LD   b,c   ; b = loop counter
03D0   E1                     POP   hl   
03D1   04                     INC   b   ; test for counter=0 case
03D2   18 01                  JR   shl2   
03D4                SHL1:        
03D4   29                     ADD   hl,hl   ; left shift hl
03D5                SHL2:        
03D5   10 FD                  DJNZ   shl1   
03D7   E5                     PUSH   hl   
03D8   42 4B                  LD   bc,de   ; restore IP
03DA   DD E9                  JP   (ix)   
03DC                             ; shr
03DC                             ; value count -- value2          shift left count places
03DC                SHR:         
03DC   50 59                  LD   de,bc   ; save IP
03DE   C1                     POP   bc   ; bc = count
03DF   41                     LD   b,c   ; b = loop counter
03E0   E1                     POP   hl   
03E1   04                     INC   b   ; test for counter=0 case
03E2   18 04                  JR   shr2   
03E4                SHR1:        
03E4   CB 3C                  SRL   h   ; right shift hl
03E6   CB 1D                  RR   l   
03E8                SHR2:        
03E8   10 FA                  DJNZ   shr1   
03EA   E5                     PUSH   hl   
03EB   42 4B                  LD   bc,de   ; restore IP
03ED   DD E9                  JP   (ix)   
03EF                MUL:         ;=19
03EF   D1                     POP   de   ; get first value
03F0   E1                     POP   hl   
03F1   C5                     PUSH   bc   ; Preserve the IP
03F2   44                     LD   b,h   ; bc = 2nd value
03F3   4D                     LD   c,l   
03F4   21 00 00               LD   hl,0   
03F7   3E 10                  LD   a,16   
03F9                MUL2:        
03F9   29                     ADD   hl,hl   
03FA   CB 13                  RL   e   
03FC   CB 12                  RL   d   
03FE   30 04                  JR   nc,$+6   
0400   09                     ADD   hl,bc   
0401   30 01                  JR   nc,$+3   
0403   13                     INC   de   
0404   3D                     DEC   a   
0405   20 F2                  JR   nz,mul2   
0407   C1                     POP   bc   ; Restore the IP
0408   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0409   DD E9                  JP   (ix)   
040B                NUM:         
040B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
040E   0A                     LD   a,(bc)   ; Get numeral or -
040F   FE 2D                  CP   "-"   
0411   20 01                  JR   nz,num0   
0413   03                     INC   bc   ; move to next char, no flags affected
0414                NUM0:        
0414   08                     EX   af,af'   ; save zero flag = 0 for later
0415                NUM1:        
0415   0A                     LD   a,(bc)   ; read digit
0416   D6 30                  SUB   "0"   ; less than 0?
0418   38 13                  JR   c,num2   ; not a digit, exit loop
041A   FE 0A                  CP   10   ; greater that 9?
041C   30 0F                  JR   nc,num2   ; not a digit, exit loop
041E   03                     INC   bc   ; inc IP
041F   54 5D                  LD   de,hl   ; multiply hl * 10
0421   29                     ADD   hl,hl   
0422   29                     ADD   hl,hl   
0423   19                     ADD   hl,de   
0424   29                     ADD   hl,hl   
0425   85                     ADD   a,l   ; add digit in a to hl
0426   6F                     LD   l,a   
0427   3E 00                  LD   a,0   
0429   8C                     ADC   a,h   
042A   67                     LD   h,a   
042B   18 E8                  JR   num1   
042D                NUM2:        
042D   0B                     DEC   bc   
042E   08                     EX   af,af'   ; restore zero flag
042F   20 07                  JR   nz,num3   
0431   EB                     EX   de,hl   ; negate the value of hl
0432   21 00 00               LD   hl,0   
0435   B7                     OR   a   ; jump to sub2
0436   ED 52                  SBC   hl,de   
0438                NUM3:        
0438   E5                     PUSH   hl   ; Put the number on the stack
0439   DD E9                  JP   (ix)   ; and process the next character
043B                HEXNUM:      
043B   21 00 00               LD   hl,0   ; Clear hl to accept the number
043E                HEXNUM1:      
043E   03                     INC   bc   
043F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0440   CB 77                  BIT   6,a   ; is it uppercase alpha?
0442   28 02                  JR   z,hexnum2   ; no a decimal
0444   D6 07                  SUB   7   ; sub 7  to make $a - $F
0446                HEXNUM2:      
0446   D6 30                  SUB   $30   ; Form decimal digit
0448   DA 2D 04               JP   c,num2   
044B   FE 10                  CP   $0F+1   
044D   D2 2D 04               JP   nc,num2   
0450   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0451   29                     ADD   hl,hl   ; 4X
0452   29                     ADD   hl,hl   ; 8X
0453   29                     ADD   hl,hl   ; 16X
0454   85                     ADD   a,l   ; add into bottom of hl
0455   6F                     LD   l,a   ; 
0456   18 E6                  JR   hexnum1   
0458                             ; string
0458                             ; -- ptr                        ; points to start of string chars,
0458                             ; length is stored at start - 2 bytes
0458                STRING:      
0458   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045B   23                     INC   hl   ; skip length field to start
045C   23                     INC   hl   
045D   E5                     PUSH   hl   ; save start of string
045E   03                     INC   bc   ; point to next char
045F   18 03                  JR   string2   
0461                STRING1:      
0461   77                     LD   (hl),a   
0462   23                     INC   hl   ; increase count
0463   03                     INC   bc   ; point to next char
0464                STRING2:      
0464   0A                     LD   a,(bc)   
0465   FE 27                  CP   "'"   ; ' is the string terminator
0467   20 F8                  JR   nz,string1   
0469   AF                     XOR   a   ; write NUL to terminate string
046A   77                     LD   (hl),a   ; hl = end of string
046B   23                     INC   hl   
046C   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
046F   2B                     DEC   hl   ; hl = end of string without terminator
0470   D1                     POP   de   ; de = start of string
0471   D5                     PUSH   de   ; return start of string
0472   B7                     OR   a   ; hl = length bytes, de = start of string
0473   ED 52                  SBC   hl,de   
0475   EB                     EX   de,hl   
0476   2B                     DEC   hl   ; write length bytes to length field at start - 2
0477   72                     LD   (hl),d   
0478   2B                     DEC   hl   
0479   73                     LD   (hl),e   
047A   DD E9                  JP   (ix)   
047C                             ; arg_list - parses input (ab:c)
047C                             ; names after the : represent uninitialised locals
047C                             ; return values are the state of the stack after the block ends
047C                ARG_LIST:      
047C   11 00 00               LD   de,0   ; d = count locals, e = count args ()
047F   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0482   23                     INC   hl   ; skip length field to start
0483   23                     INC   hl   
0484   E5                     PUSH   hl   ; save start of arg_list
0485   03                     INC   bc   ; point to next char
0486                ARG_LIST1:      
0486   0A                     LD   a,(bc)   
0487   FE 29                  CP   ")"   ; ) is the arg_list terminator
0489   28 12                  JR   z,arg_list4   
048B   FE 3A                  CP   ":"   
048D   20 03                  JR   nz,arg_list2   
048F   14                     INC   d   ; non zero value local count acts as flag
0490   20 08                  JR   nz,arg_list3   
0492                ARG_LIST2:      
0492   77                     LD   (hl),a   
0493   23                     INC   hl   
0494   1C                     INC   e   ; increase arg count
0495   AF                     XOR   a   
0496   B2                     OR   d   
0497   28 01                  JR   z,arg_list3   
0499   14                     INC   d   ; if d > 0 increase local count
049A                ARG_LIST3:      
049A   03                     INC   bc   ; point to next char
049B   18 E9                  JR   arg_list1   
049D                ARG_LIST4:      
049D   AF                     XOR   a   
049E   B2                     OR   d   
049F   28 01                  JR   z,arg_list5   
04A1   15                     DEC   d   ; remove initial inc
04A2                ARG_LIST5:      
04A2   23                     INC   hl   
04A3   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A6   E1                     POP   hl   ; hl = start of arg_list
04A7   E5                     PUSH   hl   ; return start of string
04A8   2B                     DEC   hl   ; write length bytes to length field at start - 2
04A9   72                     LD   (hl),d   
04AA   2B                     DEC   hl   
04AB   73                     LD   (hl),e   
04AC   DD E9                  JP   (ix)   
04AE                CHAR:        
04AE   21 00 00               LD   hl,0   ; if `` is empty
04B1                CHAR1:       
04B1   03                     INC   bc   ; point to next char
04B2   0A                     LD   a,(bc)   
04B3   FE 60                  CP   "`"   ; ` is the string terminator
04B5   28 09                  JR   z,char3   
04B7   FE 5C                  CP   $5c   ; \ is the escape
04B9   20 02                  JR   nz,char2   
04BB   03                     INC   bc   
04BC   0A                     LD   a,(bc)   
04BD                CHAR2:       
04BD   6F                     LD   l,a   
04BE   18 F1                  JR   char1   
04C0                CHAR3:       
04C0   E5                     PUSH   hl   
04C1   DD E9                  JP   (ix)   
04C3                BLOCK:       
04C3   03                     INC   bc   
04C4   C5                     PUSH   bc   ; return first opcode of block
04C5   16 01                  LD   d,1   ; nesting: count first parenthesis
04C7                BLOCK1:      ; Skip to end of definition
04C7   0A                     LD   a,(bc)   ; Get the next character
04C8   03                     INC   bc   ; Point to next character
04C9   FE 21                  CP   " " + 1   ; ignore whitespace
04CB   38 FA                  JR   c,block1   
04CD   FE 29                  CP   ")"   
04CF   28 29                  JR   z,block4   
04D1   FE 7D                  CP   "}"   
04D3   28 25                  JR   z,block4   
04D5   FE 5D                  CP   "]"   
04D7   28 21                  JR   z,block4   
04D9   FE 28                  CP   "("   
04DB   28 12                  JR   z,block2   
04DD   FE 7B                  CP   "{"   
04DF   28 0E                  JR   z,block2   
04E1   FE 5B                  CP   "["   
04E3   28 0A                  JR   z,block2   
04E5   FE 27                  CP   "'"   
04E7   28 09                  JR   z,block3   
04E9   FE 60                  CP   "`"   
04EB   28 05                  JR   z,block3   
04ED   18 D8                  JR   block1   
04EF                BLOCK2:      
04EF   14                     INC   d   
04F0   18 D5                  JR   block1   
04F2                BLOCK3:      
04F2   3E 80                  LD   a,$80   
04F4   AA                     XOR   d   
04F5   47                     LD   b,a   
04F6   20 CF                  JR   nz,block1   
04F8   18 03                  JR   block5   
04FA                BLOCK4:      
04FA   15                     DEC   d   
04FB   20 CA                  JR   nz,block1   ; get the next element
04FD                BLOCK5:      
04FD   0B                     DEC   bc   ; balanced, exit
04FE   DD E9                  JP   (ix)   
0500                BLOCKEND:      
0500   D9                     EXX      
0501   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0504   FD 56 01               LD   d,(iy+1)   
0507   FD 4E 06               LD   c,(iy+6)   ; bc = IP
050A   FD 46 07               LD   b,(iy+7)   
050D   D9                     EXX      
050E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0511   FD 56 03               LD   d,(iy+3)   
0514   EB                     EX   de,hl   
0515   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0518   FD 56 01               LD   d,(iy+1)   
051B                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
051B   13                     INC   de   ; for carry flag <=
051C   B7                     OR   a   
051D   ED 52                  SBC   hl,de   
051F   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0521   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0523   FD 5D                  LD   e,iyl   
0525   21 08 00               LD   hl,8   
0528   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0529   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
052A   18 0C                  JR   blockend2   
052C                BLOCKEND1:      ; same scope
052C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
052F   FD 56 03               LD   d,(iy+3)   
0532   EB                     EX   de,hl   
0533   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0535   FD 5D                  LD   e,iyl   
0537   EB                     EX   de,hl   
0538                BLOCKEND2:      
0538   44 4D                  LD   bc,hl   ; bc = hl = BP
053A   B7                     OR   a   ; hl = BP - SP = count
053B   ED 72                  SBC   hl,sp   
053D   C5                     PUSH   bc   ; bc = count, hl = BP
053E   44 4D                  LD   bc,hl   
0540   E1                     POP   hl   
0541   2B                     DEC   hl   ; hl = BP-1
0542   1B                     DEC   de   ; de = args*-1
0543   ED B8                  LDDR      
0545   13                     INC   de   ; hl = new tos
0546   EB                     EX   de,hl   
0547   F9                     LD   sp,hl   ; sp = new tos
0548   D9                     EXX      ; bc = IP, iy = oldBP
0549   D5                     PUSH   de   
054A   C5                     PUSH   bc   
054B   D9                     EXX      
054C   C1                     POP   bc   
054D   FD E1                  POP   iy   
054F   DD E9                  JP   (ix)   
0551                             ; if
0551                             ; condition then -- value
0551                IF:          
0551   11 00 00               LD   de,0   ; NUL pointer for else
0554   18 01                  JR   ifte1   
0556                             ; ifte
0556                             ; condition then else -- value
0556                IFTE:        
0556   D1                     POP   de   ; de = else
0557                IFTE1:       
0557   E1                     POP   hl   ; hl = then
0558   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0559   7C                     LD   a,h   
055A   B5                     OR   l   
055B   E1                     POP   hl   ; hl = then
055C   CA D0 0A               JP   z,exec0   ; if z de = else
055F   EB                     EX   de,hl   ; condition = false, hl = else
0560   C3 D0 0A               JP   exec0   
0563                             ; switch
0563                             ; index array -- value
0563                SWITCH:      
0563   D1                     POP   de   ; de = array
0564   E1                     POP   hl   ; hl = index
0565   29                     ADD   hl,hl   ; if data width = 2 then double
0566   19                     ADD   hl,de   ; add addr
0567   5E                     LD   e,(hl)   
0568   23                     INC   hl   
0569   56                     LD   d,(hl)   
056A   C3 D0 0A               JP   exec0   
056D                             ; index of an array, based on vDataWidth
056D                             ; array num -- value    ; also sets vPointer to address
056D                INDEX:       
056D   E1                     POP   hl   ; hl = index
056E   D1                     POP   de   ; de = array
056F   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
0572   3D                     DEC   a   
0573   28 01                  JR   z,index1   
0575                INDEX0:      
0575   29                     ADD   hl,hl   ; if data width = 2 then double
0576                INDEX1:      
0576   19                     ADD   hl,de   ; add addr
0577   22 9E 18               LD   (vPointer),hl   ; store address in setter
057A   16 00                  LD   d,0   
057C   5E                     LD   e,(hl)   
057D   B7                     OR   a   ; check data width again
057E   28 02                  JR   z,index2   
0580   23                     INC   hl   
0581   56                     LD   d,(hl)   
0582                INDEX2:      
0582   D5                     PUSH   de   
0583   DD E9                  JP   (ix)   
0585                             ; newvalue --
0585                SET:         
0585   E1                     POP   hl   ; discard last accessed value
0586   D1                     POP   de   ; new value
0587   2A 9E 18               LD   hl,(vPointer)   
058A   73                     LD   (hl),e   
058B   3A 9A 18               LD   a,(vDataWidth)   
058E   3D                     DEC   a   
058F   28 02                  JR   z,set1   
0591   23                     INC   hl   
0592   72                     LD   (hl),d   
0593                SET1:        
0593   DD E9                  JP   (ix)   
0595                             ; c b --
0595                             ; loops until c = 0
0595                LOOP:        
0595   DD E9                  JP   (ix)   
0597                             ;     pop de                      ; de = block                    c
0597                             ;     pop hl                      ; hl = condition
0597                             ;     push de
0597                             ;     push bc                     ; push IP
0597                             ;     ld bc,de                    ; bc = block
0597                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
0597                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0597                             ;     push de                     ; push ScopeBP
0597                             ;     push iy                     ; push BP
0597                             ;     ld iy,0                     ; iy = sp
0597                             ;     add iy,sp
0597                             ; loop1:
0597                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0597                             ;     or h
0597                             ;     jr z,loop3
0597                             ;     ld de,loop2-1               ; IP return address
0597                             ;     push de
0597                             ;     ld e,(iy+2)                 ; push parent ScopeBP
0597                             ;     ld d,(iy+3)
0597                             ;     push de                     ;
0597                             ;     push iy                     ; push BP
0597                             ;     ld iy,0                     ; iy = sp
0597                             ;     add iy,sp
0597                             ;     push hl                     ; push condition
0597                             ;     dec bc
0597                             ;     jp (ix)
0597                             ; loop2:
0597                             ;     db ESC                      ; escape from interpreter
0597                             ;     ld c,(iy+6)                 ; bc = block
0597                             ;     ld b,(iy+7)
0597                             ;     pop hl                      ; hl = condition
0597                             ;     jr loop1
0597                             ; loop3:
0597                             ;     ld d,iyh                    ; de = BP
0597                             ;     ld e,iyl
0597                             ;     ex de,hl                    ; hl = BP, de = result
0597                             ;     ld sp,hl                    ; sp = BP
0597                             ;     pop hl                      ; hl = old BP
0597                             ;     pop bc                      ; pop ScopeBP (discard)
0597                             ;     pop bc                      ; bc = IP
0597                             ;     ld sp,hl                    ; sp = old BP
0597                             ;     ld iy,0                     ; iy = sp
0597                             ;     add iy,sp
0597                             ;     ld ix,(vNext)                  ; needed?
0597                             ;     jp (ix)
0597                WORDS:       
0597   21 02 00               LD   hl,2   
059A   18 03                  JR   bytes1   
059C                BYTES:       
059C   21 01 00               LD   hl,1   
059F                BYTES1:      
059F   22 9A 18               LD   (vDataWidth),hl   
05A2   DD E9                  JP   (ix)   
05A4                ARRAY:       
05A4   11 00 00               LD   de,0   ; create stack frame
05A7   D5                     PUSH   de   ; push null for IP
05A8   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05AB   FD 56 05               LD   d,(iy+5)   ; 
05AE   D5                     PUSH   de   ; 
05AF   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05B2   FD 56 03               LD   d,(iy+3)   ; 
05B5   D5                     PUSH   de   ; 
05B6   FD E5                  PUSH   iy   ; push BP
05B8   FD 21 00 00            LD   iy,0   ; BP = SP
05BC   FD 39                  ADD   iy,sp   
05BE   DD E9                  JP   (ix)   
05C0                ARRAYEND:      
05C0   FD 54                  LD   d,iyh   ; de = BP
05C2   FD 5D                  LD   e,iyl   
05C4   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
05C8   62 6B                  LD   hl,de   ; hl = de = BP
05CA   B7                     OR   a   
05CB   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05CD   CB 3C                  SRL   h   ; 
05CF   CB 1D                  RR   l   
05D1   44 4D                  LD   bc,hl   ; bc = count
05D3   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05D6   71                     LD   (hl),c   ; write num items in length word
05D7   23                     INC   hl   
05D8   70                     LD   (hl),b   
05D9   23                     INC   hl   ; hl = array[0], bc = count
05DA                             ; de = BP, hl = array[0], bc = count
05DA   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05DD   FE 01                  CP   1   
05DF   20 10                  JR   nz,arrayEnd2   
05E1                ARRAYEND1:      ; byte
05E1   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05E4   77                     LD   (hl),a   ; write a to array item
05E5   23                     INC   hl   ; move to next byte in array
05E6   FD 2B                  DEC   iy   ; move tho next word on stack
05E8   FD 2B                  DEC   iy   
05EA   0B                     DEC   bc   ; dec items count
05EB   79                     LD   a,c   ; if not zero loop
05EC   B0                     OR   b   
05ED   20 F2                  JR   nz,arrayEnd1   
05EF   18 13                  JR   arrayEnd3   
05F1                ARRAYEND2:      ; word
05F1   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05F4   77                     LD   (hl),a   ; write lsb of array item
05F5   23                     INC   hl   ; move to msb of array item
05F6   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
05F9   77                     LD   (hl),a   ; write msb of array item
05FA   23                     INC   hl   ; move to next word in array
05FB   FD 2B                  DEC   iy   ; move to next word on stack
05FD   FD 2B                  DEC   iy   
05FF   0B                     DEC   bc   ; dec items count
0600   79                     LD   a,c   ; if not zero loop
0601   B0                     OR   b   
0602   20 ED                  JR   nz,arrayEnd2   
0604                ARRAYEND3:      
0604   EB                     EX   de,hl   ; de = end of array, hl = BP
0605   F9                     LD   sp,hl   ; sp = BP
0606   E1                     POP   hl   ; de = end of array, hl = old BP
0607   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0608   FD 62                  LD   iyh,d   
060A   FD 6B                  LD   iyl,e   
060C   D1                     POP   de   ; pop arg_list (discard)
060D   D1                     POP   de   ; pop ScopeBP (discard)
060E   D1                     POP   de   ; pop IP (discard)
060F   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
0613   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0616   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
061A   13                     INC   de   ; de = array[0]
061B   13                     INC   de   
061C   D5                     PUSH   de   ; return array[0]
061D   DD E9                  JP   (ix)   
061F                             ; str -- num
061F                HASH:        
061F   E1                     POP   hl   
0620   C5                     PUSH   bc   
0621   44 4D                  LD   bc,hl   
0623   CD 33 07               CALL   hashStr   
0626   C1                     POP   bc   
0627   E5                     PUSH   hl   
0628   DD E9                  JP   (ix)   
062A                             ; symbol func --
062A                DEF:         
062A   DD 21 31 06            LD   ix,def1   
062E   C3 38 0B               JP   func   
0631                DEF1:        
0631   DD 2A A4 18            LD   ix,(vNext)   
0635   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0636   60 69                  LD   hl,bc   
0638   18 24                  JR   let1   
063A                             ; symbol value --
063A                LET:         
063A   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
063C   E3                     EX   (sp),hl   
063D   EB                     EX   de,hl   
063E   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0641   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0643   23                     INC   hl   
0644   36 69                  LD   (hl),lsb(dolet)   
0646   23                     INC   hl   
0647   36 06                  LD   (hl),msb(dolet)   
0649   23                     INC   hl   
064A   73                     LD   (hl),e   
064B   23                     INC   hl   
064C   72                     LD   (hl),d   
064D   ED 5B A2 18            LD   de,(vHashStr)   
0651   23                     INC   hl   
0652   73                     LD   (hl),e   
0653   23                     INC   hl   
0654   72                     LD   (hl),d   
0655   2B                     DEC   hl   
0656   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
065A   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
065D   E1                     POP   hl   ; de = addr, hl = IP
065E                LET1:        
065E   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
065F   44 4D                  LD   bc,hl   ; bc = symbol
0661   CD 50 07               CALL   defineEntry   
0664   38 00                  JR   c,let2   
0666                             ; call error
0666                             ; .cstr "Let Collision"
0666                LET2:        
0666   C1                     POP   bc   
0667   DD E9                  JP   (ix)   
0669                             ; addr -- value
0669                DOLET:       
0669   E1                     POP   hl   
066A   22 9E 18               LD   (vPointer),hl   ; store address in setter
066D                DOLET2:      
066D   5E                     LD   e,(hl)   
066E   23                     INC   hl   
066F   56                     LD   d,(hl)   
0670   23                     INC   hl   
0671                DOLET3:      
0671   D5                     PUSH   de   
0672   5E                     LD   e,(hl)   
0673   23                     INC   hl   
0674   56                     LD   d,(hl)   
0675   ED 53 A2 18            LD   (vHashStr),de   
0679   DD E9                  JP   (ix)   
067B                             ; symbol -- ptr
067B                ADDR:        
067B   E1                     POP   hl   ; hl = hash
067C   C5                     PUSH   bc   
067D   44 4D                  LD   bc,hl   
067F   CD 76 07               CALL   lookupEntry   
0682   38 03                  JR   c,addr1   
0684   21 00 00               LD   hl,0   
0687                             ; call printStr		
0687                             ; .cstr "Undefined"
0687                             ; jp interpret
0687                ADDR1:       
0687   C1                     POP   bc   
0688   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
068B   19                     ADD   hl,de   
068C   22 9E 18               LD   (vPointer),hl   
068F   E5                     PUSH   hl   
0690   DD E9                  JP   (ix)   
0692                SYMBOL:      
0692   03                     INC   bc   
0693   11 00 1B               LD   de,PAD   
0696   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0698   18 02                  JR   symbol1   
069A                SYMBOL0:      ; copy to PAD area
069A   03                     INC   bc   ; characters that are part of the identifier
069B   13                     INC   de   
069C                SYMBOL1:      ; 0-9 A-Z a-z _
069C   0A                     LD   a,(bc)   
069D   12                     LD   (de),a   
069E   FE 21                  CP   " "+1   
06A0   38 0A                  JR   c,symbol2   
06A2   6F                     LD   l,a   
06A3   7E                     LD   a,(hl)   
06A4   FE 4B                  CP   lsb(ident_)   
06A6   28 F2                  JR   z,symbol0   
06A8   FE 00                  CP   lsb(num_)   
06AA   28 EE                  JR   z,symbol0   
06AC                SYMBOL2:      
06AC   0B                     DEC   bc   
06AD   AF                     XOR   a   
06AE   12                     LD   (de),a   ; terminate string with NUL
06AF   C5                     PUSH   bc   
06B0   01 00 1B               LD   bc,PAD   
06B3   CD 33 07               CALL   hashStr   ; hl = hash
06B6   C1                     POP   bc   
06B7   E5                     PUSH   hl   
06B8   DD E9                  JP   (ix)   
06BA                IDENT:       
06BA   0A                     LD   a,(bc)   
06BB   87                     ADD   a,a   
06BC   6F                     LD   l,a   
06BD   26 18                  LD   h,msb(vars)   
06BF   E9                     JP   (hl)   
06C0                FRAC:        
06C0   2A 98 18               LD   hl,(vFrac)   
06C3   E5                     PUSH   hl   
06C4   DD E9                  JP   (ix)   
06C6                          ALIGN   2   
06C6                SQRT1:       
06C6   E1                     POP   hl   
06C7   C5                     PUSH   bc   
06C8   CD B3 07               CALL   squareRoot   
06CB   ED 43 98 18            LD   (vFrac),bc   
06CF   C1                     POP   bc   
06D0   D5                     PUSH   de   
06D1   DD E9                  JP   (ix)   
06D3                ABS1:        
06D3   E1                     POP   hl   
06D4   CB 7C                  BIT   7,h   
06D6   C8                     RET   z   
06D7   AF                     XOR   a   
06D8   95                     SUB   l   
06D9   6F                     LD   l,a   
06DA   9F                     SBC   a,a   
06DB   94                     SUB   h   
06DC   67                     LD   h,a   
06DD   E5                     PUSH   hl   
06DE   DD E9                  JP   (ix)   
06E0                MOD:         
06E0   D1                     POP   de   ; get first value
06E1   E1                     POP   hl   ; get 2nd value
06E2   C5                     PUSH   bc   ; preserve the IP
06E3   44 4D                  LD   bc,hl   
06E5   CD 9A 07               CALL   divide   
06E8   C1                     POP   bc   
06E9   E5                     PUSH   hl   ; push remainder
06EA   DD E9                  JP   (ix)   
06EC                             ; hl = value1, de = value2
06EC                             ; hl = result
06EC                EQUALS:      
06EC   B7                     OR   a   ; reset the carry flag
06ED   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06EF   28 10                  JR   z,true1   
06F1   C3 07 07               JP   false1   
06F4                             ; hl = value1 de = value2
06F4                             ; hl = result
06F4                LESSTHANEQ:      
06F4   B7                     OR   a   
06F5   ED 52                  SBC   hl,de   
06F7   18 05                  JR   lessthan1   
06F9                             ; hl = value1 de = value2
06F9                             ; hl = result
06F9                LESSTHAN:      
06F9   B7                     OR   a   
06FA   ED 52                  SBC   hl,de   
06FC   28 09                  JR   z,false1   
06FE                LESSTHAN1:      
06FE   FA 07 07               JP   m,false1   
0701                TRUE1:       
0701   21 FF FF               LD   hl,TRUE   
0704   E5                     PUSH   hl   
0705   DD E9                  JP   (ix)   
0707                NULL1:       
0707                FALSE1:      
0707   21 00 00               LD   hl,FALSE   
070A   E5                     PUSH   hl   
070B   DD E9                  JP   (ix)   
070D                             ; Z80 port input
070D                             ; port -- value
070D                INPUT:       
070D   E1                     POP   hl   
070E   59                     LD   e,c   ; save IP
070F   4D                     LD   c,l   
0710   ED 68                  IN   l,(c)   
0712   26 00                  LD   h,0   
0714   4B                     LD   c,e   ; restore IP
0715   E5                     PUSH   hl   
0716   DD E9                  JP   (ix)   
0718                             ; Z80 port output
0718                             ; value port --
0718                OUTPUT:      
0718   E1                     POP   hl   
0719   59                     LD   e,c   ; save IP
071A   4D                     LD   c,l   
071B   E1                     POP   hl   
071C   ED 69                  OUT   (c),l   
071E   4B                     LD   c,e   ; restore IP
071F   DD E9                  JP   (ix)   
0721                KEY:         
0721   CD 81 00               CALL   getchar   
0724   26 00                  LD   h,0   
0726   6F                     LD   l,a   
0727   E5                     PUSH   hl   
0728   DD E9                  JP   (ix)   
072A                NEG:         
072A   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
072D   D1                     POP   de   
072E   C3 91 03               JP   sub2   ; use the SUBtract routine
0731                FILTER:      
0731                MAP:         
0731                SCAN:        
0731   DD E9                  JP   (ix)   
0733                             ; -------------------------------------------------------------------------------
0733                             ; hash C-string
0733                             ; BC = str
0733                             ; HL = hash
0733                HASHSTR:      
0733   ED 43 A2 18            LD   (vHashStr),bc   ; store source string
0737   21 00 00               LD   hl,0   
073A                HASHSTR1:      
073A   0A                     LD   a,(bc)   ; load next char
073B   03                     INC   bc   
073C   FE 00                  CP   0   ; NUL?
073E   C8                     RET   z   
073F                HASHSTR2:      
073F   16 00                  LD   d,0   
0741   5F                     LD   e,a   
0742   19                     ADD   hl,de   
0743   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0745   29                     ADD   hl,hl   ; shift left
0746   19                     ADD   hl,de   ; add
0747   29                     ADD   hl,hl   ; shift left
0748   29                     ADD   hl,hl   ; shift left
0749   29                     ADD   hl,hl   ; shift left
074A   29                     ADD   hl,hl   ; shift left
074B   29                     ADD   hl,hl   ; shift left
074C   29                     ADD   hl,hl   ; shift left
074D   19                     ADD   hl,de   ; add
074E   18 EA                  JR   hashStr1   
0750                             ; add entry to hash slots and hash pointers
0750                             ; bc = hash (b = hi, c = lo), de = addr
0750                             ; sets carry if successful
0750                DEFINEENTRY:      
0750   CB 21                  SLA   c   ; lo = lo * 2
0752   69                     LD   l,c   ; lo1 = lo
0753   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0755                DEFINEENTRY0:      
0755   7E                     LD   a,(hl)   ; a = (lo1)
0756   FE FF                  CP   UNUSED   ; is it unused?
0758   28 12                  JR   z,defineEntry3   ; yes, add entry
075A   79                     LD   a,c   ; a = lo
075B   BE                     CP   (hl)   ; compare (lo1) with lo
075C   20 06                  JR   nz,defineEntry1   ; no match loop around
075E   2C                     INC   l   
075F   78                     LD   a,b   ; a = hi
0760   BE                     CP   (hl)   ; compare (lo1+1) with hi
0761   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0763   2D                     DEC   l   ; restore l
0764                DEFINEENTRY1:      
0764   2C                     INC   l   ; try next entry
0765   2C                     INC   l   
0766   79                     LD   a,c   ; compare lo and lo1
0767   BD                     CP   l   ; if equal then there's no space left, reject
0768   20 EB                  JR   nz,defineEntry0   
076A                DEFINEENTRY2:      
076A   B7                     OR   a   ; clear carry flag, failure
076B   C9                     RET      
076C                DEFINEENTRY3:      ; new entry
076C   71                     LD   (hl),c   ; (lo1) = hash lo
076D   23                     INC   hl   
076E   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
076F   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0771   72                     LD   (hl),d   
0772   2B                     DEC   hl   
0773   73                     LD   (hl),e   ; (slot + 2) = address
0774   37                     SCF      ; set carry flag, success
0775   C9                     RET      
0776                             ; looks up hash and returns address
0776                             ; bc = hash
0776                             ; returns addr in hl, sets carry if successful
0776                LOOKUPENTRY:      
0776   CB 21                  SLA   c   ; lo = lo * 2
0778   69                     LD   l,c   ; lo1 = lo
0779   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
077B                LOOKUPENTRY0:      
077B   7E                     LD   a,(hl)   ; a = (hl), slot
077C   FE FF                  CP   UNUSED   ; is it unused?
077E   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0780   79                     LD   a,c   ; a = lo
0781   BE                     CP   (hl)   ; compare (lo1) with lo
0782   20 06                  JR   nz,lookupEntry1   ; no match loop around
0784   2C                     INC   l   
0785   78                     LD   a,b   ; a = hi
0786   BE                     CP   (hl)   ; compare (lo1+1) with hi
0787   28 09                  JR   z,lookupEntry3   
0789   2D                     DEC   l   
078A                LOOKUPENTRY1:      
078A   2C                     INC   l   
078B   2C                     INC   l   
078C   79                     LD   a,c   
078D   BD                     CP   l   ; no space left, reject
078E   20 EB                  JR   nz,lookupEntry0   
0790                LOOKUPENTRY2:      
0790   B7                     OR   a   ; clear carry flag, failure
0791   C9                     RET      
0792                LOOKUPENTRY3:      
0792   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0794   56                     LD   d,(hl)   
0795   2D                     DEC   l   ; restore l
0796   5E                     LD   e,(hl)   ; (slot + 2) = address
0797   EB                     EX   de,hl   
0798   37                     SCF      
0799   C9                     RET      
079A                             ; division subroutine.
079A                             ; bc: divisor, de: dividend, hl: remainder
079A                DIVIDE:      
079A   21 00 00               LD   hl,0   ; zero the remainder
079D   3E 10                  LD   a,16   ; loop counter
079F                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
079F   CB 21                  SLA   c   
07A1   CB 10                  RL   b   
07A3   ED 6A                  ADC   hl,hl   
07A5   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07A7   38 03                  JR   c,divide2   
07A9   0C                     INC   c   
07AA   18 01                  JR   divide3   
07AC                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07AC   19                     ADD   hl,de   
07AD                DIVIDE3:      
07AD   3D                     DEC   a   
07AE   20 EF                  JR   nz,divide1   
07B0   50 59                  LD   de,bc   ; result from bc to de
07B2   C9                     RET      
07B3                             ; squareroot
07B3                             ; Input: HL = value
07B3                             ; Result: DE = square root BC = remainder
07B3                SQUAREROOT:      
07B3   01 00 08               LD   bc,0800h   
07B6   59                     LD   e,c   
07B7   AF                     XOR   a   
07B8                SQUAREROOT1:      
07B8   29                     ADD   hl,hl   
07B9   CB 11                  RL   c   
07BB   ED 6A                  ADC   hl,hl   
07BD   CB 11                  RL   c   
07BF   30 02                  JR   nc,$+4   
07C1   CB C5                  SET   0,l   
07C3   7B                     LD   a,e   
07C4   87                     ADD   a,a   
07C5   5F                     LD   e,a   
07C6   87                     ADD   a,a   
07C7   CB 45                  BIT   0,l   
07C9   20 03                  JR   nz,$+5   
07CB   91                     SUB   c   
07CC   30 05                  JR   nc,squareRoot4   
07CE   79                     LD   a,c   
07CF   93                     SUB   e   
07D0   1C                     INC   e   
07D1   93                     SUB   e   
07D2   4F                     LD   c,a   
07D3                SQUAREROOT4:      
07D3   10 E3                  DJNZ   squareRoot1   
07D5   CB 45                  BIT   0,l   
07D7   28 01                  JR   z,squareRoot5   
07D9   04                     INC   b   
07DA                SQUAREROOT5:      
07DA   16 00                  LD   d,0   
07DC   C9                     RET      
07DD                             ; print decimal
07DD                             ; hl = value
07DD                PRTDEC:      
07DD   CB 7C                  BIT   7,h   
07DF   28 0B                  JR   z,prtdec0   
07E1   3E 2D                  LD   a,"-"   
07E3   CD 85 00               CALL   putchar   
07E6   AF                     XOR   a   
07E7   95                     SUB   l   
07E8   6F                     LD   l,a   
07E9   9F                     SBC   a,a   
07EA   94                     SUB   h   
07EB   67                     LD   h,a   
07EC                PRTDEC0:      
07EC   C5                     PUSH   bc   
07ED   0E 00                  LD   c,0   ; leading zeros flag = false
07EF   11 F0 D8               LD   de,-10000   
07F2   CD 0E 08               CALL   prtdec1   
07F5   11 18 FC               LD   de,-1000   
07F8   CD 0E 08               CALL   prtdec1   
07FB   11 9C FF               LD   de,-100   
07FE   CD 0E 08               CALL   prtdec1   
0801   1E F6                  LD   e,-10   
0803   CD 0E 08               CALL   prtdec1   
0806   0C                     INC   c   ; flag = true for at least digit
0807   1E FF                  LD   e,-1   
0809   CD 0E 08               CALL   prtdec1   
080C   C1                     POP   bc   
080D   C9                     RET      
080E                PRTDEC1:      
080E   06 2F                  LD   b,"0"-1   
0810                PRTDEC2:      
0810   04                     INC   b   
0811   19                     ADD   hl,de   
0812   38 FC                  JR   c,prtdec2   
0814   ED 52                  SBC   hl,de   
0816   3E 30                  LD   a,"0"   
0818   B8                     CP   b   
0819   20 05                  JR   nz,prtdec3   
081B   AF                     XOR   a   
081C   B1                     OR   c   
081D   C8                     RET   z   
081E   18 01                  JR   prtdec4   
0820                PRTDEC3:      
0820   0C                     INC   c   
0821                PRTDEC4:      
0821   78                     LD   a,b   
0822   C3 85 00               JP   putchar   
0825                PRTHEX:      ; display hl as a 16-bit number in hex.
0825   C5                     PUSH   bc   ; preserve the IP
0826   7C                     LD   a,h   
0827   CD 30 08               CALL   prthex2   
082A   7D                     LD   a,l   
082B   CD 30 08               CALL   prthex2   
082E   C1                     POP   bc   
082F   C9                     RET      
0830                PRTHEX2:      
0830   4F                     LD   c,a   
0831   1F                     RRA      
0832   1F                     RRA      
0833   1F                     RRA      
0834   1F                     RRA      
0835   CD 39 08               CALL   prthex3   
0838   79                     LD   a,c   
0839                PRTHEX3:      
0839   E6 0F                  AND   0x0F   
083B   C6 90                  ADD   a,0x90   
083D   27                     DAA      
083E   CE 40                  ADC   a,0x40   
0840   27                     DAA      
0841   C3 85 00               JP   putchar   
0844                PRTSTR0:      
0844   CD 85 00               CALL   putchar   
0847   23                     INC   hl   
0848                PRTSTR:      
0848   7E                     LD   a,(hl)   
0849   B7                     OR   a   
084A   20 F8                  JR   nz,prtstr0   
084C   C9                     RET      
084D                             ; **************************************************************************
084D                             ; calculate nesting value
084D                             ; a is char to be tested,
084D                             ; e is the nesting value (initially 0)
084D                             ; e is increased by ( and [
084D                             ; e is decreased by ) and ]
084D                             ; e has its bit 7 toggled by `
084D                             ; limited to 127 levels
084D                             ; **************************************************************************
084D                NESTING:      
084D   FE 22                  CP   $22   ; quote char
084F   20 0A                  JR   nz,nesting1   
0851   CB 7B                  BIT   7,e   
0853   28 03                  JR   z,nesting1a   
0855   CB BB                  RES   7,e   
0857   C9                     RET      
0858                NESTING1A:      
0858   CB FB                  SET   7,e   
085A   C9                     RET      
085B                NESTING1:      
085B   CB 7B                  BIT   7,e   
085D   C0                     RET   nz   
085E   FE 7B                  CP   "{"   
0860   28 08                  JR   z,nesting2   
0862   FE 5B                  CP   "["   
0864   28 04                  JR   z,nesting2   
0866   FE 28                  CP   "("   
0868   20 02                  JR   nz,nesting3   
086A                NESTING2:      
086A   1C                     INC   e   
086B   C9                     RET      
086C                NESTING3:      
086C   FE 7D                  CP   "}"   
086E   28 07                  JR   z,nesting4   
0870   FE 5D                  CP   "]"   
0872   28 03                  JR   z,nesting4   
0874   FE 29                  CP   ")"   
0876   C0                     RET   nz   
0877                NESTING4:      
0877   1D                     DEC   e   
0878   C9                     RET      
0879                PROMPT:      
0879   CD 89 08               CALL   printStr   
087C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0881   C9                     RET      
0882                CRLF:        
0882   CD 89 08               CALL   printStr   
0885   0D 0A 00               .CSTR   "\r\n"   
0888   C9                     RET      
0889                             ; prints a null teminated string
0889                             ; the string should be immedaitely following the call
0889                PRINTSTR:      
0889   E3                     EX   (sp),hl   ; swap			
088A   CD 48 08               CALL   prtstr   
088D   23                     INC   hl   ; inc past NUL
088E   E3                     EX   (sp),hl   ; put it back	
088F   C9                     RET      
0890                             ; executes a null teminated string (null executes exit_)
0890                             ; the string should be immedaitely following the call
0890                EXECSTR:      ; create a root stack frame
0890                             ; pop bc                      ; bc = code*
0890                             ; dec bc                      ; dec to prepare for next routine
0890                             ; ld de,0
0890                             ; push de                     ; push fake IP
0890                             ; push de                     ; push null arglist*
0890                             ; push de                     ; push null first_arg*
0890                             ; push de                     ; push fake BP
0890                             ; jp (ix)
0890                BRANCH:      ; executes the address on the stack
0890   C1                     POP   bc   ; bc = code*
0891   0B                     DEC   bc   ; dec to prepare for next routine
0892   DD E9                  JP   (ix)   
0894                DEFINE:      
0894   E1                     POP   hl   
0895   7E                     LD   a,(hl)   
0896   23                     INC   hl   
0897   44 4D                  LD   bc,hl   
0899   5F                     LD   e,a   
089A   16 00                  LD   d,0   
089C   19                     ADD   hl,de   
089D   5E                     LD   e,(hl)   
089E   23                     INC   hl   
089F   56                     LD   d,(hl)   
08A0   23                     INC   hl   
08A1   E5                     PUSH   hl   ; bc = str
08A2   D5                     PUSH   de   
08A3   CD 33 07               CALL   hashStr   ; hl = hash
08A6   D1                     POP   de   
08A7   44 4D                  LD   bc,hl   
08A9   C3 50 07               JP   defineEntry   
08AC                INIT:        
08AC   DD 2A A4 18            LD   ix,(vNext)   
08B0   FD 21 80 18            LD   iy,STACK   
08B4   21 80 01               LD   hl,isysVars   
08B7   11 98 18               LD   de,sysVars   
08BA   01 10 00               LD   bc,8 * 2   
08BD   ED B0                  LDIR      
08BF   3E FF                  LD   a,UNUSED   
08C1   06 00                  LD   b,0   
08C3   21 00 1C               LD   hl,hashSlots   
08C6                INIT1:       
08C6   77                     LD   (hl),a   
08C7   23                     INC   hl   
08C8   10 FC                  DJNZ   init1   
08CA   CD 94 08               CALL   define   
08CD   04 61 62 73 00         .PSTR   "abs",0   
08D2   D3 06                  DW   abs1   
08D4   CD 94 08               CALL   define   
08D7   05 61 64 64 72 00      .PSTR   "addr",0   
08DD   7B 06                  DW   addr   
08DF   CD 94 08               CALL   define   
08E2   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08E9   9C 05                  DW   bytes   
08EB   CD 94 08               CALL   define   
08EE   05 63 61 6C 6C 00      .PSTR   "call",0   
08F4   CD 0A                  DW   call   
08F6   CD 94 08               CALL   define   
08F9   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
0902   C7 0B                  DW   closure   
0904   CD 94 08               CALL   define   
0907   04 64 65 66 00         .PSTR   "def",0   
090C   2A 06                  DW   def   
090E   CD 94 08               CALL   define   
0911   05 65 78 65 63 00      .PSTR   "exec",0   
0917   CF 0A                  DW   exec   
0919   CD 94 08               CALL   define   
091C   06 66 61 6C 73 65 00   .PSTR   "false",0   
0923   07 07                  DW   false1   
0925   CD 94 08               CALL   define   
0928   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0930   31 07                  DW   filter   
0932   CD 94 08               CALL   define   
0935   05 66 72 61 63 00      .PSTR   "frac",0   
093B   C0 06                  DW   frac   
093D   CD 94 08               CALL   define   
0940   05 66 75 6E 63 00      .PSTR   "func",0   
0946   38 0B                  DW   func   
0948   CD 94 08               CALL   define   
094B   05 68 61 73 68 00      .PSTR   "hash",0   
0951   1F 06                  DW   hash   
0953   CD 94 08               CALL   define   
0956   06 69 6E 70 75 74 00   .PSTR   "input",0   
095D   0D 07                  DW   input   
095F   CD 94 08               CALL   define   
0962   03 69 66 00            .PSTR   "if",0   
0966   51 05                  DW   if   
0968   CD 94 08               CALL   define   
096B   05 69 66 74 65 00      .PSTR   "ifte",0   
0971   56 05                  DW   ifte   
0973   CD 94 08               CALL   define   
0976   04 6B 65 79 00         .PSTR   "key",0   
097B   21 07                  DW   key   
097D   CD 94 08               CALL   define   
0980   04 6C 65 74 00         .PSTR   "let",0   
0985   3A 06                  DW   let   
0987   CD 94 08               CALL   define   
098A   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0990   95 05                  DW   loop   
0992   CD 94 08               CALL   define   
0995   04 6D 61 70 00         .PSTR   "map",0   
099A   31 07                  DW   map   
099C   CD 94 08               CALL   define   
099F   04 6D 6F 64 00         .PSTR   "mod",0   
09A4   E0 06                  DW   mod   
09A6   CD 94 08               CALL   define   
09A9   04 6E 65 67 00         .PSTR   "neg",0   
09AE   2A 07                  DW   neg   
09B0   CD 94 08               CALL   define   
09B3   04 6E 69 6C 00         .PSTR   "nil",0   
09B8   07 07                  DW   null1   
09BA   CD 94 08               CALL   define   
09BD   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09C5   18 07                  DW   output   
09C7   CD 94 08               CALL   define   
09CA   05 73 63 61 6E 00      .PSTR   "scan",0   
09D0   01 00                  DW   scan   
09D2   CD 94 08               CALL   define   
09D5   04 73 65 74 00         .PSTR   "set",0   
09DA   85 05                  DW   set   
09DC   CD 94 08               CALL   define   
09DF   04 73 68 6C 00         .PSTR   "shl",0   
09E4   CC 03                  DW   shl   
09E6   CD 94 08               CALL   define   
09E9   04 73 68 72 00         .PSTR   "shr",0   
09EE   DC 03                  DW   shr   
09F0   CD 94 08               CALL   define   
09F3   05 73 71 72 74 00      .PSTR   "sqrt",0   
09F9   C6 06                  DW   sqrt1   
09FB   CD 94 08               CALL   define   
09FE   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A06   63 05                  DW   switch   
0A08   CD 94 08               CALL   define   
0A0B   05 74 72 75 65 00      .PSTR   "true",0   
0A11   01 07                  DW   true1   
0A13   CD 94 08               CALL   define   
0A16   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A1D   97 05                  DW   words   
0A1F   C9                     RET      
0A20                START:       
0A20   31 80 18               LD   sp,STACK   ; start of monty
0A23   CD AC 08               CALL   init   ; setups
0A26   CD 89 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A29   6D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "monty V0.0\r\n"   
0A36                INTERPRET:      
0A36   CD 79 08               CALL   prompt   
0A39   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A3C   ED 43 9C 18            LD   (vTIBPtr),bc   
0A40                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A40   1E 00                  LD   e,0   ; initilize nesting value
0A42   C5                     PUSH   bc   ; save offset into TIB,
0A43                             ; bc is also the count of chars in TIB
0A43   21 00 1A               LD   hl,TIB   ; hl is start of TIB
0A46   18 06                  JR   interpret4   
0A48                INTERPRET3:      
0A48   7E                     LD   a,(hl)   ; a = char in TIB
0A49   23                     INC   hl   ; inc pointer into TIB
0A4A   0B                     DEC   bc   ; dec count of chars in TIB
0A4B   CD 4D 08               CALL   nesting   ; update nesting value
0A4E                INTERPRET4:      
0A4E   79                     LD   a,c   ; is count zero?
0A4F   B0                     OR   b   
0A50   20 F6                  JR   nz,interpret3   ; if not loop
0A52   C1                     POP   bc   ; restore offset into TIB
0A53                WAITCHAR:      
0A53   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A56   FE 20                  CP   $20   ; compare to space
0A58   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A5A   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A5C                             ; ???? NEEDED?
0A5C   28 27                  JR   z,waitchar4   
0A5E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A60   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A62                MACRO:       
0A62                             ;  ld (vTIBPtr),bc
0A62                             ;  ld hl,ctrlCodes
0A62                             ;  add a,l			            ; look up key of macros
0A62                             ;  ld l,a
0A62                             ;  ld e,(hl)
0A62                             ;  ld a,e
0A62                             ;  or a
0A62                             ;  jr z,macro1
0A62                             ;  ld d,msb(macros)
0A62                             ;  push de
0A62                             ;  call call		            ; monty exec_ operation and jump to it
0A62                             ;  db DC1,0
0A62                             ; macro1:
0A62                             ;  ld bc,(vTIBPtr)
0A62   18 DC                  JR   interpret2   
0A64                WAITCHAR1:      
0A64   21 00 1A               LD   hl,TIB   
0A67   09                     ADD   hl,bc   
0A68   77                     LD   (hl),a   ; store the character in textbuf
0A69   03                     INC   bc   
0A6A   CD 85 00               CALL   putchar   ; echo character to screen
0A6D   CD 4D 08               CALL   nesting   
0A70   18 E1                  JR   waitchar   ; wait for next character
0A72                WAITCHAR3:      
0A72   21 00 1A               LD   hl,TIB   
0A75   09                     ADD   hl,bc   
0A76   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A78   23                     INC   hl   
0A79   36 0A                  LD   (hl),"\n"   
0A7B   23                     INC   hl   
0A7C   03                     INC   bc   
0A7D   03                     INC   bc   
0A7E   CD 82 08               CALL   crlf   ; echo character to screen
0A81   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A82   B7                     OR   a   
0A83   20 CE                  JR   nz,waitchar   
0A85                WAITCHAR4:      
0A85   ED 43 9C 18            LD   (vTIBPtr),bc   
0A89   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A8C                             ; we pressed enter
0A8C   0B                     DEC   bc   
0A8D                NEXT:        
0A8D   03                     INC   bc   ; Increment the IP
0A8E   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A8F   FE 20                  CP   " "   ; whitespace?
0A91   28 FA                  JR   z,next   ; space? ignore
0A93   38 0B                  JR   c,next1   
0A95   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
0A97   30 1A                  JR   nc,next2   
0A99   6F                     LD   l,a   ; index into table
0A9A   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A9C   6E                     LD   l,(hl)   ; get low jump address
0A9D   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A9F   E9                     JP   (hl)   ; Jump to routine
0AA0                NEXT1:       
0AA0   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0AA2   28 15                  JR   z,escape_   
0AA4   FE 00                  CP   NUL   ; end of input string?
0AA6   28 12                  JR   z,exit_   
0AA8   FE 11                  CP   DC1   ; literal number
0AAA   28 11                  JR   z,literal_   
0AAC   FE 12                  CP   DC2   ; enter routine
0AAE   28 16                  JR   z,enter_   
0AB0   C3 36 0A               JP   interpret   ; no, other whitespace, macros?
0AB3                NEXT2:       
0AB3   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
0AB4   03                     INC   bc   
0AB5   0A                     LD   a,(bc)   
0AB6   6F                     LD   l,a   
0AB7   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
0AB8   E9                     JP   (hl)   
0AB9                ESCAPE_:      
0AB9   03                     INC   bc   ; falls through
0ABA                EXIT_:       
0ABA   60 69                  LD   hl,bc   
0ABC   E9                     JP   (hl)   
0ABD                LITERAL_:      
0ABD   03                     INC   bc   
0ABE   0A                     LD   a,(bc)   
0ABF   6F                     LD   l,a   
0AC0   03                     INC   bc   
0AC1   0A                     LD   a,(bc)   
0AC2   67                     LD   h,a   
0AC3   E5                     PUSH   hl   
0AC4   DD E9                  JP   (ix)   
0AC6                ENTER_:      
0AC6   03                     INC   bc   
0AC7   0A                     LD   a,(bc)   
0AC8   6F                     LD   l,a   
0AC9   03                     INC   bc   
0ACA   0A                     LD   a,(bc)   
0ACB   67                     LD   h,a   
0ACC   E9                     JP   (hl)   
0ACD                             ; arg1 .. argn func -- ?
0ACD                CALL:        
0ACD   E1                     POP   hl   
0ACE   E9                     JP   (hl)   
0ACF                             ; execute a block of code which ends with }
0ACF                             ; creates a root scope if BP == stack
0ACF                             ; else uses outer scope
0ACF                EXEC:        
0ACF   D1                     POP   de   ; de = block*
0AD0                EXEC0:       
0AD0   7B                     LD   a,e   ; if block* == null, exit
0AD1   B2                     OR   d   
0AD2   20 02                  JR   nz,exec1   
0AD4   DD E9                  JP   (ix)   
0AD6                EXEC1:       
0AD6   C5                     PUSH   bc   ; push IP
0AD7   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0ADA   FD 44                  LD   b,iyh   
0ADC   FD 4D                  LD   c,iyl   
0ADE   B7                     OR   a   ; hl = stack - BP = root_scope
0ADF   ED 42                  SBC   hl,bc   
0AE1   7D                     LD   a,l   ; if root_scope, skip
0AE2   B4                     OR   h   
0AE3   28 11                  JR   z,exec2   
0AE5   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0AE8   FD 46 05               LD   b,(iy+5)   
0AEB   C5                     PUSH   bc   
0AEC   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0AEF   FD 46 03               LD   b,(iy+3)   
0AF2   60 69                  LD   hl,bc   
0AF4   18 34                  JR   doCall4   
0AF6                EXEC2:       
0AF6   E5                     PUSH   hl   ; push arg_list (null)
0AF7   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0AFA   39                     ADD   hl,sp   
0AFB   18 2D                  JR   doCall4   ; 
0AFD                             ; call with args
0AFD                             ; creates a scope
0AFD                             ; code* -- ?
0AFD                DOCALL:      ; execute code at pointer
0AFD   E1                     POP   hl   ; hl = code*
0AFE   7D                     LD   a,l   ; if code* == null, skip
0AFF   B4                     OR   h   
0B00   28 34                  JR   z,doCall5   
0B02   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0B03   23                     INC   hl   
0B04   56                     LD   d,(hl)   
0B05   23                     INC   hl   
0B06   EB                     EX   de,hl   
0B07   7D                     LD   a,l   ; if arg_list* != null skip
0B08   B4                     OR   h   
0B09   20 08                  JR   nz,doCall1   
0B0B   C5                     PUSH   bc   ; push IP
0B0C   E5                     PUSH   hl   ; push arg_list (null)
0B0D   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0B10   39                     ADD   hl,sp   
0B11   18 17                  JR   doCall4   
0B13                DOCALL1:      
0B13   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0B14   7E                     LD   a,(hl)   
0B15   23                     INC   hl   
0B16   B7                     OR   a   
0B17   28 05                  JR   z,doCall3   
0B19                DOCALL2:      
0B19   3B                     DEC   sp   
0B1A   3B                     DEC   sp   
0B1B   3D                     DEC   a   
0B1C   20 FB                  JR   nz,doCall2   
0B1E                DOCALL3:      
0B1E   C5                     PUSH   bc   ; push IP
0B1F   E5                     PUSH   hl   ; push arg_list*
0B20   2B                     DEC   hl   ; hl = num_args*
0B21   2B                     DEC   hl   
0B22   7E                     LD   a,(hl)   ; hl = num_args * 2
0B23   87                     ADD   a,a   
0B24   C6 04                  ADD   a,4   ; offset for IP and arg_list
0B26   6F                     LD   l,a   
0B27   26 00                  LD   h,$0   
0B29   39                     ADD   hl,sp   ; hl = first_arg*
0B2A                DOCALL4:      
0B2A   E5                     PUSH   hl   ; push first_arg
0B2B   FD E5                  PUSH   iy   ; push BP
0B2D   FD 21 00 00            LD   iy,0   ; BP = SP
0B31   FD 39                  ADD   iy,sp   
0B33   42 4B                  LD   bc,de   ; bc = de = block*-1
0B35   0B                     DEC   bc   
0B36                DOCALL5:      
0B36   DD E9                  JP   (ix)   
0B38                             ; arg_list* block* -- ptr
0B38                FUNC:        
0B38   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0B3B   36 CD                  LD   (hl),$cd   ; compile "call doCall"
0B3D   23                     INC   hl   
0B3E   36 FD                  LD   (hl),lsb(doCall)   
0B40   23                     INC   hl   
0B41   36 0A                  LD   (hl),msb(doCall)   
0B43   23                     INC   hl   
0B44   D1                     POP   de   ; hl = heapPtr, de = block
0B45   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
0B46   E3                     EX   (sp),hl   
0B47   EB                     EX   de,hl   
0B48   73                     LD   (hl),e   ; compile arg_list*
0B49   23                     INC   hl   
0B4A   72                     LD   (hl),d   
0B4B   23                     INC   hl   
0B4C   D1                     POP   de   ; de = block*
0B4D   C5                     PUSH   bc   ; (sp) = IP
0B4E   06 01                  LD   b,1   ; b = nesting
0B50                FUNC1:       
0B50   1A                     LD   a,(de)   
0B51   13                     INC   de   
0B52   77                     LD   (hl),a   
0B53   23                     INC   hl   
0B54   FE 29                  CP   ")"   
0B56   28 29                  JR   z,func4   
0B58   FE 7D                  CP   "}"   
0B5A   28 25                  JR   z,func4   
0B5C   FE 5D                  CP   "]"   
0B5E   28 21                  JR   z,func4   
0B60   FE 28                  CP   "("   
0B62   28 12                  JR   z,func2   
0B64   FE 7B                  CP   "{"   
0B66   28 0E                  JR   z,func2   
0B68   FE 5B                  CP   "["   
0B6A   28 0A                  JR   z,func2   
0B6C   FE 27                  CP   "'"   
0B6E   28 09                  JR   z,func3   
0B70   FE 60                  CP   "`"   
0B72   28 05                  JR   z,func3   
0B74   18 DA                  JR   func1   
0B76                FUNC2:       
0B76   04                     INC   b   
0B77   18 D7                  JR   func1   
0B79                FUNC3:       
0B79   3E 80                  LD   a,$80   
0B7B   A8                     XOR   b   
0B7C   47                     LD   b,a   
0B7D   20 D1                  JR   nz,func1   
0B7F   18 03                  JR   func4a   
0B81                FUNC4:       
0B81   05                     DEC   b   
0B82   20 CC                  JR   nz,func1   ; get the next element
0B84                FUNC4A:      
0B84   23                     INC   hl   
0B85   C1                     POP   bc   ; de = defstart, hl = IP
0B86   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0B8A   D5                     PUSH   de   
0B8B   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0B8E   DD E9                  JP   (ix)   
0B90                             ; $a .. $z
0B90                             ; -- value
0B90                             ; returns value of arg
0B90                ARG:         
0B90   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B93   FD 56 05               LD   d,(iy+5)   
0B96   EB                     EX   de,hl   
0B97   7D                     LD   a,l   ; arg_list* == null, skip
0B98   B4                     OR   h   
0B99   28 1C                  JR   z,arg0a   
0B9B   2B                     DEC   hl   ; a = num_args, hl = arg_list*
0B9C   2B                     DEC   hl   
0B9D   7E                     LD   a,(hl)   
0B9E   23                     INC   hl   
0B9F   23                     INC   hl   
0BA0   B7                     OR   a   
0BA1   28 14                  JR   z,arg0a   ; num_args == 0, skip
0BA3   5F                     LD   e,a   ; e = a = num_args
0BA4   03                     INC   bc   ; a = next char = arg_name
0BA5   0A                     LD   a,(bc)   
0BA6   C5                     PUSH   bc   ; save IP
0BA7   43                     LD   b,e   ; b = e = num_args
0BA8   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0BAB   FD 56 03               LD   d,(iy+3)   
0BAE                ARG0:        
0BAE   1B                     DEC   de   ; a = arg_name, de = next arg*
0BAF   1B                     DEC   de   
0BB0   BE                     CP   (hl)   
0BB1   28 09                  JR   z,arg1   
0BB3   23                     INC   hl   ; hl = next arg_list*
0BB4   10 F8                  DJNZ   arg0   
0BB6   C1                     POP   bc   ; no match, restore IP
0BB7                ARG0A:       
0BB7   11 00 00               LD   de,0   ; return 0
0BBA   18 08                  JR   arg1a   
0BBC                ARG1:        
0BBC   C1                     POP   bc   ; restore IP
0BBD   EB                     EX   de,hl   ; hl = arg*
0BBE   22 9E 18               LD   (vPointer),hl   ; store arg* in setter
0BC1   5E                     LD   e,(hl)   
0BC2   23                     INC   hl   
0BC3   56                     LD   d,(hl)   ; de = arg
0BC4                ARG1A:       
0BC4   D5                     PUSH   de   ; push arg
0BC5   DD E9                  JP   (ix)   
0BC7                             ; closure:
0BC7                             ; array -- addr
0BC7                CLOSURE:      
0BC7   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap_ptr
0BCA   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0BCC   23                     INC   hl   
0BCD   36 E1                  LD   (hl),lsb(doClosure)   
0BCF   23                     INC   hl   
0BD0   36 0B                  LD   (hl),msb(doClosure)   
0BD2   D1                     POP   de   
0BD3   23                     INC   hl   
0BD4   73                     LD   (hl),e   
0BD5   23                     INC   hl   
0BD6   72                     LD   (hl),d   
0BD7   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = closure start
0BDB   D5                     PUSH   de   
0BDC   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of closure
0BDF   DD E9                  JP   (ix)   
0BE1                             ; code* -- arr1 arr2 .. arrn func
0BE1                DOCLOSURE:      
0BE1   E1                     POP   hl   ; hl = code*
0BE2   5E                     LD   e,(hl)   ; de = array
0BE3   23                     INC   hl   
0BE4   56                     LD   d,(hl)   
0BE5   23                     INC   hl   
0BE6   7B                     LD   a,e   ; de == null, skip
0BE7   B2                     OR   d   
0BE8   28 17                  JR   z,doClosure3   
0BEA   EB                     EX   de,hl   ; hl = array
0BEB   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
0BEF   2B                     DEC   hl   ; bc = count
0BF0   46                     LD   b,(hl)   
0BF1   2B                     DEC   hl   
0BF2   4E                     LD   c,(hl)   
0BF3   23                     INC   hl   ; push each item on stack
0BF4   23                     INC   hl   
0BF5   18 06                  JR   doClosure2   
0BF7                DOCLOSURE1:      
0BF7   5E                     LD   e,(hl)   
0BF8   23                     INC   hl   
0BF9   56                     LD   d,(hl)   
0BFA   23                     INC   hl   
0BFB   D5                     PUSH   de   
0BFC   0B                     DEC   bc   
0BFD                DOCLOSURE2:      
0BFD   79                     LD   a,c   
0BFE   B0                     OR   b   
0BFF   20 F6                  JR   nz,doClosure1   
0C01                DOCLOSURE3:      
0C01   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
0C05   DD E9                  JP   (ix)   
0C07                             ; readIdent
0C07                             ; reads identifier from input stream into buffer
0C07                             ; input: bc = IP, de = buffer
0C07                READIDENT:      
0C07   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0C09   18 02                  JR   readIdent1   
0C0B                READIDENT0:      ; copy to PAD area
0C0B   03                     INC   bc   ; characters that are part of the identifier
0C0C   13                     INC   de   
0C0D                READIDENT1:      ; 0-9 A-Z a-z
0C0D   0A                     LD   a,(bc)   
0C0E   12                     LD   (de),a   
0C0F   FE 21                  CP   " "+1   
0C11   38 0A                  JR   c,readIdent2   
0C13   6F                     LD   l,a   
0C14   7E                     LD   a,(hl)   
0C15   FE 4B                  CP   lsb(ident_)   
0C17   28 F2                  JR   z,readIdent0   
0C19   FE 00                  CP   lsb(num_)   
0C1B   28 EE                  JR   z,readIdent0   
0C1D                READIDENT2:      
0C1D   0B                     DEC   bc   
0C1E   AF                     XOR   a   
0C1F   12                     LD   (de),a   ; terminate string with NUL
0C20   C9                     RET      
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; initialised sys variables
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                VHASHSTR:   DS   2   ; 
18A4                VNEXT:    DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                VTEMP1:   DS   2   ; uninitialised sys variables
18AA                VARS:        
18AA                          DS   26 * 2 * 2   
1912                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "1", 1
4000   31 80 18               LD   SP,STACK   
4003   CD AC 08               CALL   init   
4006   CD 90 08               CALL   execStr   
4009   31 00                  .CSTR   "1"   
400B                          ;*Macro unroll:  expect "1",1
400B   E1                     POP   HL   
400C   E5                     PUSH   HL   
400D   11 01 00               LD   DE,1   
4010   B7                     OR   A   
4011   ED 52                  SBC   HL,DE   
4013   7D                     LD   A,L   
4014   B4                     OR   H   
4015   28 4C                  JR   Z,expectM_0_2508S43   
4017   CD 89 08               CALL   printStr   
401A   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4022   CD 89 08               CALL   printStr   
4025   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4034   21 01 00               LD   HL,1   
4037   CD DD 07               CALL   prtdec   
403A   CD 89 08               CALL   printStr   
403D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404A   E1                     POP   hl   
404B   E5                     PUSH   hl   
404C   CD DD 07               CALL   prtdec   
404F   E1                     POP   hl   
4050   CD 89 08               CALL   printStr   
4053   20 28 23 00            .CSTR   " (#"   
4057   CD 25 08               CALL   prthex   
405A   CD 89 08               CALL   printStr   
405D   29 0D 0A 00            .CSTR   ")\r\n"   
4061   76                     HALT      
4062   00                     .CSTR      
4063                EXPECTM_0_2508S43:      
4063   E1                     POP   HL   
4064                          ;*Macro unroll:  test "2", 2
4064   31 80 18               LD   SP,STACK   
4067   CD AC 08               CALL   init   
406A   CD 90 08               CALL   execStr   
406D   32 00                  .CSTR   "2"   
406F                          ;*Macro unroll:  expect "2",2
406F   E1                     POP   HL   
4070   E5                     PUSH   HL   
4071   11 02 00               LD   DE,2   
4074   B7                     OR   A   
4075   ED 52                  SBC   HL,DE   
4077   7D                     LD   A,L   
4078   B4                     OR   H   
4079   28 4C                  JR   Z,expectM_0_2509S43   
407B   CD 89 08               CALL   printStr   
407E   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
4086   CD 89 08               CALL   printStr   
4089   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4098   21 02 00               LD   HL,2   
409B   CD DD 07               CALL   prtdec   
409E   CD 89 08               CALL   printStr   
40A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AE   E1                     POP   hl   
40AF   E5                     PUSH   hl   
40B0   CD DD 07               CALL   prtdec   
40B3   E1                     POP   hl   
40B4   CD 89 08               CALL   printStr   
40B7   20 28 23 00            .CSTR   " (#"   
40BB   CD 25 08               CALL   prthex   
40BE   CD 89 08               CALL   printStr   
40C1   29 0D 0A 00            .CSTR   ")\r\n"   
40C5   76                     HALT      
40C6   00                     .CSTR      
40C7                EXPECTM_0_2509S43:      
40C7   E1                     POP   HL   
40C8                          ;*Macro unroll:  test "1", 1
40C8   31 80 18               LD   SP,STACK   
40CB   CD AC 08               CALL   init   
40CE   CD 90 08               CALL   execStr   
40D1   31 00                  .CSTR   "1"   
40D3                          ;*Macro unroll:  expect "1",1
40D3   E1                     POP   HL   
40D4   E5                     PUSH   HL   
40D5   11 01 00               LD   DE,1   
40D8   B7                     OR   A   
40D9   ED 52                  SBC   HL,DE   
40DB   7D                     LD   A,L   
40DC   B4                     OR   H   
40DD   28 4C                  JR   Z,expectM_0_2510S43   
40DF   CD 89 08               CALL   printStr   
40E2   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
40EA   CD 89 08               CALL   printStr   
40ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40FC   21 01 00               LD   HL,1   
40FF   CD DD 07               CALL   prtdec   
4102   CD 89 08               CALL   printStr   
4105   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4112   E1                     POP   hl   
4113   E5                     PUSH   hl   
4114   CD DD 07               CALL   prtdec   
4117   E1                     POP   hl   
4118   CD 89 08               CALL   printStr   
411B   20 28 23 00            .CSTR   " (#"   
411F   CD 25 08               CALL   prthex   
4122   CD 89 08               CALL   printStr   
4125   29 0D 0A 00            .CSTR   ")\r\n"   
4129   76                     HALT      
412A   00                     .CSTR      
412B                EXPECTM_0_2510S43:      
412B   E1                     POP   HL   
412C                          ;*Macro unroll:  test "0", 0
412C   31 80 18               LD   SP,STACK   
412F   CD AC 08               CALL   init   
4132   CD 90 08               CALL   execStr   
4135   30 00                  .CSTR   "0"   
4137                          ;*Macro unroll:  expect "0",0
4137   E1                     POP   HL   
4138   E5                     PUSH   HL   
4139   11 00 00               LD   DE,0   
413C   B7                     OR   A   
413D   ED 52                  SBC   HL,DE   
413F   7D                     LD   A,L   
4140   B4                     OR   H   
4141   28 4C                  JR   Z,expectM_0_2511S43   
4143   CD 89 08               CALL   printStr   
4146   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
414E   CD 89 08               CALL   printStr   
4151   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4160   21 00 00               LD   HL,0   
4163   CD DD 07               CALL   prtdec   
4166   CD 89 08               CALL   printStr   
4169   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4176   E1                     POP   hl   
4177   E5                     PUSH   hl   
4178   CD DD 07               CALL   prtdec   
417B   E1                     POP   hl   
417C   CD 89 08               CALL   printStr   
417F   20 28 23 00            .CSTR   " (#"   
4183   CD 25 08               CALL   prthex   
4186   CD 89 08               CALL   printStr   
4189   29 0D 0A 00            .CSTR   ")\r\n"   
418D   76                     HALT      
418E   00                     .CSTR      
418F                EXPECTM_0_2511S43:      
418F   E1                     POP   HL   
4190                          ;*Macro unroll:  test "10", 10
4190   31 80 18               LD   SP,STACK   
4193   CD AC 08               CALL   init   
4196   CD 90 08               CALL   execStr   
4199   31 30 00               .CSTR   "10"   
419C                          ;*Macro unroll:  expect "10",10
419C   E1                     POP   HL   
419D   E5                     PUSH   HL   
419E   11 0A 00               LD   DE,10   
41A1   B7                     OR   A   
41A2   ED 52                  SBC   HL,DE   
41A4   7D                     LD   A,L   
41A5   B4                     OR   H   
41A6   28 4D                  JR   Z,expectM_0_2512S43   
41A8   CD 89 08               CALL   printStr   
41AB   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
41B4   CD 89 08               CALL   printStr   
41B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C6   21 0A 00               LD   HL,10   
41C9   CD DD 07               CALL   prtdec   
41CC   CD 89 08               CALL   printStr   
41CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DC   E1                     POP   hl   
41DD   E5                     PUSH   hl   
41DE   CD DD 07               CALL   prtdec   
41E1   E1                     POP   hl   
41E2   CD 89 08               CALL   printStr   
41E5   20 28 23 00            .CSTR   " (#"   
41E9   CD 25 08               CALL   prthex   
41EC   CD 89 08               CALL   printStr   
41EF   29 0D 0A 00            .CSTR   ")\r\n"   
41F3   76                     HALT      
41F4   00                     .CSTR      
41F5                EXPECTM_0_2512S43:      
41F5   E1                     POP   HL   
41F6                          ;*Macro unroll:  test "123", 123
41F6   31 80 18               LD   SP,STACK   
41F9   CD AC 08               CALL   init   
41FC   CD 90 08               CALL   execStr   
41FF   31 32 33 00            .CSTR   "123"   
4203                          ;*Macro unroll:  expect "123",123
4203   E1                     POP   HL   
4204   E5                     PUSH   HL   
4205   11 7B 00               LD   DE,123   
4208   B7                     OR   A   
4209   ED 52                  SBC   HL,DE   
420B   7D                     LD   A,L   
420C   B4                     OR   H   
420D   28 4E                  JR   Z,expectM_0_2513S43   
420F   CD 89 08               CALL   printStr   
4212   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
421C   CD 89 08               CALL   printStr   
421F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
422E   21 7B 00               LD   HL,123   
4231   CD DD 07               CALL   prtdec   
4234   CD 89 08               CALL   printStr   
4237   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4244   E1                     POP   hl   
4245   E5                     PUSH   hl   
4246   CD DD 07               CALL   prtdec   
4249   E1                     POP   hl   
424A   CD 89 08               CALL   printStr   
424D   20 28 23 00            .CSTR   " (#"   
4251   CD 25 08               CALL   prthex   
4254   CD 89 08               CALL   printStr   
4257   29 0D 0A 00            .CSTR   ")\r\n"   
425B   76                     HALT      
425C   00                     .CSTR      
425D                EXPECTM_0_2513S43:      
425D   E1                     POP   HL   
425E                          ;*Macro unroll:  test "-1",-1
425E   31 80 18               LD   SP,STACK   
4261   CD AC 08               CALL   init   
4264   CD 90 08               CALL   execStr   
4267   2D 31 00               .CSTR   "-1"   
426A                          ;*Macro unroll:  expect "-1",-1
426A   E1                     POP   HL   
426B   E5                     PUSH   HL   
426C   11 FF FF               LD   DE,-1   
426F   B7                     OR   A   
4270   ED 52                  SBC   HL,DE   
4272   7D                     LD   A,L   
4273   B4                     OR   H   
4274   28 4D                  JR   Z,expectM_0_2514S43   
4276   CD 89 08               CALL   printStr   
4279   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
4282   CD 89 08               CALL   printStr   
4285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4294   21 FF FF               LD   HL,-1   
4297   CD DD 07               CALL   prtdec   
429A   CD 89 08               CALL   printStr   
429D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42AA   E1                     POP   hl   
42AB   E5                     PUSH   hl   
42AC   CD DD 07               CALL   prtdec   
42AF   E1                     POP   hl   
42B0   CD 89 08               CALL   printStr   
42B3   20 28 23 00            .CSTR   " (#"   
42B7   CD 25 08               CALL   prthex   
42BA   CD 89 08               CALL   printStr   
42BD   29 0D 0A 00            .CSTR   ")\r\n"   
42C1   76                     HALT      
42C2   00                     .CSTR      
42C3                EXPECTM_0_2514S43:      
42C3   E1                     POP   HL   
42C4                          ;*Macro unroll:  test "``", 0
42C4   31 80 18               LD   SP,STACK   
42C7   CD AC 08               CALL   init   
42CA   CD 90 08               CALL   execStr   
42CD   60 60 00               .CSTR   "``"   
42D0                          ;*Macro unroll:  expect "``",0
42D0   E1                     POP   HL   
42D1   E5                     PUSH   HL   
42D2   11 00 00               LD   DE,0   
42D5   B7                     OR   A   
42D6   ED 52                  SBC   HL,DE   
42D8   7D                     LD   A,L   
42D9   B4                     OR   H   
42DA   28 4D                  JR   Z,expectM_0_2515S43   
42DC   CD 89 08               CALL   printStr   
42DF   43 6F 64 65 3A 20 60 60 00 .CSTR   "Code: ","``"   
42E8   CD 89 08               CALL   printStr   
42EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42FA   21 00 00               LD   HL,0   
42FD   CD DD 07               CALL   prtdec   
4300   CD 89 08               CALL   printStr   
4303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4310   E1                     POP   hl   
4311   E5                     PUSH   hl   
4312   CD DD 07               CALL   prtdec   
4315   E1                     POP   hl   
4316   CD 89 08               CALL   printStr   
4319   20 28 23 00            .CSTR   " (#"   
431D   CD 25 08               CALL   prthex   
4320   CD 89 08               CALL   printStr   
4323   29 0D 0A 00            .CSTR   ")\r\n"   
4327   76                     HALT      
4328   00                     .CSTR      
4329                EXPECTM_0_2515S43:      
4329   E1                     POP   HL   
432A                          ;*Macro unroll:  test "`a`", $61
432A   31 80 18               LD   SP,STACK   
432D   CD AC 08               CALL   init   
4330   CD 90 08               CALL   execStr   
4333   60 61 60 00            .CSTR   "`a`"   
4337                          ;*Macro unroll:  expect "`a`",$61
4337   E1                     POP   HL   
4338   E5                     PUSH   HL   
4339   11 61 00               LD   DE,$61   
433C   B7                     OR   A   
433D   ED 52                  SBC   HL,DE   
433F   7D                     LD   A,L   
4340   B4                     OR   H   
4341   28 4E                  JR   Z,expectM_0_2516S43   
4343   CD 89 08               CALL   printStr   
4346   43 6F 64 65 3A 20 60 61 60 00 .CSTR   "Code: ","`a`"   
4350   CD 89 08               CALL   printStr   
4353   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4362   21 61 00               LD   HL,$61   
4365   CD DD 07               CALL   prtdec   
4368   CD 89 08               CALL   printStr   
436B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4378   E1                     POP   hl   
4379   E5                     PUSH   hl   
437A   CD DD 07               CALL   prtdec   
437D   E1                     POP   hl   
437E   CD 89 08               CALL   printStr   
4381   20 28 23 00            .CSTR   " (#"   
4385   CD 25 08               CALL   prthex   
4388   CD 89 08               CALL   printStr   
438B   29 0D 0A 00            .CSTR   ")\r\n"   
438F   76                     HALT      
4390   00                     .CSTR      
4391                EXPECTM_0_2516S43:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "`\\``", $60
4392   31 80 18               LD   SP,STACK   
4395   CD AC 08               CALL   init   
4398   CD 90 08               CALL   execStr   
439B   60 5C 60 60 00         .CSTR   "`\\``"   
43A0                          ;*Macro unroll:  expect "`\\``",$60
43A0   E1                     POP   HL   
43A1   E5                     PUSH   HL   
43A2   11 60 00               LD   DE,$60   
43A5   B7                     OR   A   
43A6   ED 52                  SBC   HL,DE   
43A8   7D                     LD   A,L   
43A9   B4                     OR   H   
43AA   28 4F                  JR   Z,expectM_0_2517S43   
43AC   CD 89 08               CALL   printStr   
43AF   43 6F 64 65 3A 20 60 5C 60 60 00 .CSTR   "Code: ","`\\``"   
43BA   CD 89 08               CALL   printStr   
43BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43CC   21 60 00               LD   HL,$60   
43CF   CD DD 07               CALL   prtdec   
43D2   CD 89 08               CALL   printStr   
43D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E2   E1                     POP   hl   
43E3   E5                     PUSH   hl   
43E4   CD DD 07               CALL   prtdec   
43E7   E1                     POP   hl   
43E8   CD 89 08               CALL   printStr   
43EB   20 28 23 00            .CSTR   " (#"   
43EF   CD 25 08               CALL   prthex   
43F2   CD 89 08               CALL   printStr   
43F5   29 0D 0A 00            .CSTR   ")\r\n"   
43F9   76                     HALT      
43FA   00                     .CSTR      
43FB                EXPECTM_0_2517S43:      
43FB   E1                     POP   HL   
43FC                          ;*Macro unroll:  test "#10", $10
43FC   31 80 18               LD   SP,STACK   
43FF   CD AC 08               CALL   init   
4402   CD 90 08               CALL   execStr   
4405   23 31 30 00            .CSTR   "#10"   
4409                          ;*Macro unroll:  expect "#10",$10
4409   E1                     POP   HL   
440A   E5                     PUSH   HL   
440B   11 10 00               LD   DE,$10   
440E   B7                     OR   A   
440F   ED 52                  SBC   HL,DE   
4411   7D                     LD   A,L   
4412   B4                     OR   H   
4413   28 4E                  JR   Z,expectM_0_2518S43   
4415   CD 89 08               CALL   printStr   
4418   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
4422   CD 89 08               CALL   printStr   
4425   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4434   21 10 00               LD   HL,$10   
4437   CD DD 07               CALL   prtdec   
443A   CD 89 08               CALL   printStr   
443D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
444A   E1                     POP   hl   
444B   E5                     PUSH   hl   
444C   CD DD 07               CALL   prtdec   
444F   E1                     POP   hl   
4450   CD 89 08               CALL   printStr   
4453   20 28 23 00            .CSTR   " (#"   
4457   CD 25 08               CALL   prthex   
445A   CD 89 08               CALL   printStr   
445D   29 0D 0A 00            .CSTR   ")\r\n"   
4461   76                     HALT      
4462   00                     .CSTR      
4463                EXPECTM_0_2518S43:      
4463   E1                     POP   HL   
4464                          ;*Macro unroll:  test "#FF", $FF
4464   31 80 18               LD   SP,STACK   
4467   CD AC 08               CALL   init   
446A   CD 90 08               CALL   execStr   
446D   23 46 46 00            .CSTR   "#FF"   
4471                          ;*Macro unroll:  expect "#FF",$FF
4471   E1                     POP   HL   
4472   E5                     PUSH   HL   
4473   11 FF 00               LD   DE,$FF   
4476   B7                     OR   A   
4477   ED 52                  SBC   HL,DE   
4479   7D                     LD   A,L   
447A   B4                     OR   H   
447B   28 4E                  JR   Z,expectM_0_2519S43   
447D   CD 89 08               CALL   printStr   
4480   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
448A   CD 89 08               CALL   printStr   
448D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
449C   21 FF 00               LD   HL,$FF   
449F   CD DD 07               CALL   prtdec   
44A2   CD 89 08               CALL   printStr   
44A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44B2   E1                     POP   hl   
44B3   E5                     PUSH   hl   
44B4   CD DD 07               CALL   prtdec   
44B7   E1                     POP   hl   
44B8   CD 89 08               CALL   printStr   
44BB   20 28 23 00            .CSTR   " (#"   
44BF   CD 25 08               CALL   prthex   
44C2   CD 89 08               CALL   printStr   
44C5   29 0D 0A 00            .CSTR   ")\r\n"   
44C9   76                     HALT      
44CA   00                     .CSTR      
44CB                EXPECTM_0_2519S43:      
44CB   E1                     POP   HL   
44CC                             ; test "-1 2 +",1
44CC                             ; test "-1 1 +",0
44CC                             ; test "1 2 +", 3
44CC                             ; test "4 1 2 +", 3
44CC                             ; test "1 2 +", 3
44CC                             ; test "123 456 +", 123+456
44CC                             ; test "64 128 +", 64+128
44CC                             ; test "-1 -1 -",0
44CC                             ; test "5 3 -", 2
44CC                             ; test "3 5 &", 1
44CC                             ; test "3 5 |", 7
44CC                             ; test "2 3 *", 6
44CC                             ; test "1 2 3 + *", 5
44CC                             ; test "7 3 /", 2
44CC                             ; test "7 3 / frac", 1
44CC                             ; test "10 sqrt", 3
44CC                             ; test "10 sqrt frac", 1
44CC                             ; test "2 3 =", FALSE
44CC                             ; test "3 3 =", TRUE
44CC                             ; test "1 2 <", TRUE
44CC                             ; test "2 1 <", FALSE
44CC                             ; test "2 3 <", TRUE
44CC                             ; test "3 3 <", FALSE
44CC                             ; test "1 2 >", FALSE
44CC                             ; test "2 1 >", TRUE
44CC                             ; test "3 3 >", FALSE
44CC                             ; test "4 3 >", TRUE
44CC                             ; test "2 2 <=", TRUE
44CC                             ; test "2 2 >=", TRUE
44CC                             ; test "() -2?", $0000
44CC                             ; test "(a) -1?", $0001
44CC                             ; test "(a:) -1?", $0001
44CC                             ; test "(a:b) -1?", $0102
44CC                             ; test "(:b) -1?", $0101
44CC                             ; test ":x 20 let 100 x set x", 100
44CC                             ; test "[10 20 30] 1?", 20
44CC                             ; test ":x [10 20 30] let 50 x 1? set x 1?", 50
44CC                             ; test "bytes [1 2 3] 1?", 2
44CC                             ; test "bytes :x [1 2 3] let x 1?", 2
44CC                             ; test "bytes [`A` `B` `C`] 1?", 66
44CC                             ; test "{1} exec", 1
44CC                             ; test "{{1} exec} exec", 1
44CC                             ; test "{{{1} exec} exec} exec", 1
44CC                             ; test "1 5 (a) {2} func call", 2
44CC                             ; test "1 5 (a) {$a} func call", 5
44CC                             ; test "1 5 (a:b) {$a} func call ", 5
44CC                             ; test "1 5 (a) {{2} exec} func call", 2
44CC                             ; test "1 5 (a) {{$a} exec} func call", 5
44CC                             ; test "1 5 (a) {{$a 1 +} exec} func call", 6
44CC                             ; test "1 10 20 (ab) {-1 {$a} {$b} ifte} func call", 10
44CC                             ; test "1 10 20 (ab) {0 {$a} {$b} ifte} func call", 20
44CC                             ; test ":x (a) {2} def 1 x", 2
44CC                             ; test ":x (a) {$a} def 0 1 x", 1
44CC                             ; test ":x (a) {$a} def 1 2 x", 2
44CC                             ; test ":x (a:b) {$a} def 1 2 x", 2
44CC                             ; test ":x (ab) {$b} def 1 2 x", 2
44CC                             ; test ":x (ab) {$b $a} def 10 15 x -", 5
44CC                             ; test ":x (a:b) {2} def 1 x", 2
44CC                             ; test ":x (:b) {100 $b set $b} def x", 100
44CC                             ; test ":x (a:b) {1 $b set $b} def 2 x", 1
44CC                             ; test ":x (a:b) {$a $b set $b} def 2 x", 2
44CC                             ; test "0 [{10} {20} {30}] switch", 10
44CC                             ; test "1 10 20 (ab) {0 [{$a} {$b}] switch} func call", 10
44CC                             ; test "0 10 20 (iab) {$i [{$a} {$b}] switch} func call", 10
44CC                             ; test "1 10 20 (iab) {$i [{$a} {$b}] switch} func call", 20
44CC                             ; test "false", false
44CC                             ; test "true", true
44CC                             ; test "1 5 false {10} if", 5
44CC                             ; test "1 5 true {10} if", 10
44CC                             ; test "1 false {10} {20} ifte", 20
44CC                             ; test "1 true {10} {20} ifte", 10
44CC                             ; test "[ 1 ] closure call", 1
44CC                             ; test "[ [ 2 ] ] closure call 0?", 2
44CC                             ; call execStr
44CC                             ; db "9"
44CC                             ; kall sqrt1
44CC                             ; db 0
44CC                             ; expect "9 sqrt",3
44CC                             ; 
44CC                             ; 
44CC                             ; 
44CC                             ; 
44CC                             ; 
44CC                             ; 
44CC                             ; 
44CC   CD 89 08               CALL   printStr   
44CF   44 6F 6E 65 21 00      .CSTR   "Done!"   
44D5   76                     HALT      
44D6                          ALIGN   2   
44D6                PRINTER:      
44D6   E1                     POP   hl   
44D7   CD DD 07               CALL   prtdec   
44DA   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 54 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0731 DEFINED AT LINE 1159 IN monty.asm
                    > USED AT LINE 1618 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
                    > USED AT LINE 1751 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1146 IN monty.asm
                    > USED AT LINE 1682 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 249 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
                    > USED AT LINE 1334 IN monty.asm
                    > USED AT LINE 1375 IN monty.asm
                    > USED AT LINE 1399 IN monty.asm
                    > USED AT LINE 1402 IN monty.asm
                    > USED AT LINE 1713 IN monty.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 37 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 1113 IN monty.asm
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 1118 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
                    > USED AT LINE 1202 IN monty.asm
                    > USED AT LINE 1241 IN monty.asm
                    > USED AT LINE 1516 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1753 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
                    > USED AT LINE 1755 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
                    > USED AT LINE 1757 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
MACROS:             0180 DEFINED AT LINE 59 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 64 IN monty.asm
                    > USED AT LINE 1511 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 76 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 78 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 112 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 215 IN monty.asm
NUM_:               0300 DEFINED AT LINE 217 IN monty.asm
                    > USED AT LINE 337 IN monty.asm
HEXNUM_:            0303 DEFINED AT LINE 220 IN monty.asm
ARG_:               0306 DEFINED AT LINE 223 IN monty.asm
STRING_:            0309 DEFINED AT LINE 226 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 229 IN monty.asm
DOT_:               030F DEFINED AT LINE 232 IN monty.asm
DOT1:               031B DEFINED AT LINE 240 IN monty.asm
                    > USED AT LINE 237 IN monty.asm
DOT2:               0324 DEFINED AT LINE 245 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
DOT3:               032E DEFINED AT LINE 251 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
DOT4:               0332 DEFINED AT LINE 254 IN monty.asm
                    > USED AT LINE 239 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
INDEX_:             0339 DEFINED AT LINE 260 IN monty.asm
BLOCK_:             033C DEFINED AT LINE 263 IN monty.asm
BLOCKEND_:          033F DEFINED AT LINE 265 IN monty.asm
CHAR_:              0342 DEFINED AT LINE 267 IN monty.asm
ARRAY_:             0345 DEFINED AT LINE 269 IN monty.asm
ARRAYEND_:          0348 DEFINED AT LINE 271 IN monty.asm
IDENT_:             034B DEFINED AT LINE 273 IN monty.asm
SYMBOL_:            034E DEFINED AT LINE 275 IN monty.asm
AND_:               0351 DEFINED AT LINE 277 IN monty.asm
AND1:               0358 DEFINED AT LINE 285 IN monty.asm
                    > USED AT LINE 298 IN monty.asm
                    > USED AT LINE 309 IN monty.asm
OR_:                035C DEFINED AT LINE 290 IN monty.asm
XOR_:               0365 DEFINED AT LINE 300 IN monty.asm
XOR1:               0366 DEFINED AT LINE 302 IN monty.asm
                    > USED AT LINE 313 IN monty.asm
INV_:               036E DEFINED AT LINE 311 IN monty.asm
ADD_:               0373 DEFINED AT LINE 315 IN monty.asm
HDOT_:              0379 DEFINED AT LINE 322 IN monty.asm
MUL_:               0380 DEFINED AT LINE 327 IN monty.asm
SUB_:               0383 DEFINED AT LINE 330 IN monty.asm
SUB1:               038F DEFINED AT LINE 338 IN monty.asm
                    > USED AT LINE 335 IN monty.asm
SUB2:               0391 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 1155 IN monty.asm
NOT_:               0397 DEFINED AT LINE 347 IN monty.asm
EQ_:                039C DEFINED AT LINE 351 IN monty.asm
EQ1:                039D DEFINED AT LINE 353 IN monty.asm
                    > USED AT LINE 349 IN monty.asm
GT_:                03A1 DEFINED AT LINE 357 IN monty.asm
LT_:                03A5 DEFINED AT LINE 362 IN monty.asm
LT1:                03A7 DEFINED AT LINE 365 IN monty.asm
                    > USED AT LINE 360 IN monty.asm
DIV_:               03B2 DEFINED AT LINE 373 IN monty.asm
COMMENT_:           03C1 DEFINED AT LINE 384 IN monty.asm
                    > USED AT LINE 388 IN monty.asm
NOP_:               03CA DEFINED AT LINE 392 IN monty.asm
SHL:                03CC DEFINED AT LINE 402 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
SHL1:               03D4 DEFINED AT LINE 409 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
SHL2:               03D5 DEFINED AT LINE 411 IN monty.asm
                    > USED AT LINE 408 IN monty.asm
SHR:                03DC DEFINED AT LINE 419 IN monty.asm
                    > USED AT LINE 1630 IN monty.asm
SHR1:               03E4 DEFINED AT LINE 426 IN monty.asm
                    > USED AT LINE 430 IN monty.asm
SHR2:               03E8 DEFINED AT LINE 429 IN monty.asm
                    > USED AT LINE 425 IN monty.asm
MUL:                03EF DEFINED AT LINE 435 IN monty.asm
                    > USED AT LINE 328 IN monty.asm
MUL2:               03F9 DEFINED AT LINE 444 IN monty.asm
                    > USED AT LINE 453 IN monty.asm
NUM:                040B DEFINED AT LINE 458 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
NUM0:               0414 DEFINED AT LINE 464 IN monty.asm
                    > USED AT LINE 462 IN monty.asm
NUM1:               0415 DEFINED AT LINE 466 IN monty.asm
                    > USED AT LINE 483 IN monty.asm
NUM2:               042D DEFINED AT LINE 484 IN monty.asm
                    > USED AT LINE 469 IN monty.asm
                    > USED AT LINE 471 IN monty.asm
                    > USED AT LINE 506 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
NUM3:               0438 DEFINED AT LINE 492 IN monty.asm
                    > USED AT LINE 487 IN monty.asm
HEXNUM:             043B DEFINED AT LINE 496 IN monty.asm
                    > USED AT LINE 221 IN monty.asm
HEXNUM1:            043E DEFINED AT LINE 498 IN monty.asm
                    > USED AT LINE 515 IN monty.asm
HEXNUM2:            0446 DEFINED AT LINE 504 IN monty.asm
                    > USED AT LINE 502 IN monty.asm
STRING:             0458 DEFINED AT LINE 520 IN monty.asm
                    > USED AT LINE 227 IN monty.asm
STRING1:            0461 DEFINED AT LINE 527 IN monty.asm
                    > USED AT LINE 534 IN monty.asm
STRING2:            0464 DEFINED AT LINE 531 IN monty.asm
                    > USED AT LINE 526 IN monty.asm
ARG_LIST:           047C DEFINED AT LINE 555 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARG_LIST1:          0486 DEFINED AT LINE 562 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
ARG_LIST2:          0492 DEFINED AT LINE 570 IN monty.asm
                    > USED AT LINE 567 IN monty.asm
ARG_LIST3:          049A DEFINED AT LINE 578 IN monty.asm
                    > USED AT LINE 569 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
ARG_LIST4:          049D DEFINED AT LINE 581 IN monty.asm
                    > USED AT LINE 565 IN monty.asm
ARG_LIST5:          04A2 DEFINED AT LINE 586 IN monty.asm
                    > USED AT LINE 584 IN monty.asm
CHAR:               04AE DEFINED AT LINE 597 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
CHAR1:              04B1 DEFINED AT LINE 599 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
CHAR2:              04BD DEFINED AT LINE 608 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
CHAR3:              04C0 DEFINED AT LINE 611 IN monty.asm
                    > USED AT LINE 603 IN monty.asm
BLOCK:              04C3 DEFINED AT LINE 615 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
BLOCK1:             04C7 DEFINED AT LINE 619 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
                    > USED AT LINE 643 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
                    > USED AT LINE 651 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
BLOCK2:             04EF DEFINED AT LINE 644 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
BLOCK3:             04F2 DEFINED AT LINE 647 IN monty.asm
                    > USED AT LINE 640 IN monty.asm
                    > USED AT LINE 642 IN monty.asm
BLOCK4:             04FA DEFINED AT LINE 653 IN monty.asm
                    > USED AT LINE 626 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
BLOCK5:             04FD DEFINED AT LINE 656 IN monty.asm
                    > USED AT LINE 652 IN monty.asm
BLOCKEND:           0500 DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
BLOCKEND1:          052C DEFINED AT LINE 683 IN monty.asm
                    > USED AT LINE 676 IN monty.asm
BLOCKEND2:          0538 DEFINED AT LINE 690 IN monty.asm
                    > USED AT LINE 682 IN monty.asm
IF:                 0551 DEFINED AT LINE 713 IN monty.asm
                    > USED AT LINE 1578 IN monty.asm
IFTE:               0556 DEFINED AT LINE 719 IN monty.asm
                    > USED AT LINE 1582 IN monty.asm
IFTE1:              0557 DEFINED AT LINE 721 IN monty.asm
                    > USED AT LINE 715 IN monty.asm
SWITCH:             0563 DEFINED AT LINE 733 IN monty.asm
                    > USED AT LINE 1638 IN monty.asm
INDEX:              056D DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
INDEX0:             0575 DEFINED AT LINE 751 IN monty.asm
INDEX1:             0576 DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 750 IN monty.asm
INDEX2:             0582 DEFINED AT LINE 762 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
SET:                0585 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 1622 IN monty.asm
SET1:               0593 DEFINED AT LINE 777 IN monty.asm
                    > USED AT LINE 774 IN monty.asm
LOOP:               0595 DEFINED AT LINE 782 IN monty.asm
                    > USED AT LINE 1594 IN monty.asm
WORDS:              0597 DEFINED AT LINE 832 IN monty.asm
                    > USED AT LINE 1646 IN monty.asm
BYTES:              059C DEFINED AT LINE 835 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
BYTES1:             059F DEFINED AT LINE 837 IN monty.asm
                    > USED AT LINE 834 IN monty.asm
ARRAY:              05A4 DEFINED AT LINE 841 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
ARRAYEND:           05C0 DEFINED AT LINE 855 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
ARRAYEND1:          05E1 DEFINED AT LINE 875 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
ARRAYEND2:          05F1 DEFINED AT LINE 887 IN monty.asm
                    > USED AT LINE 873 IN monty.asm
                    > USED AT LINE 899 IN monty.asm
ARRAYEND3:          0604 DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 885 IN monty.asm
HASH:               061F DEFINED AT LINE 920 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
DEF:                062A DEFINED AT LINE 930 IN monty.asm
                    > USED AT LINE 1546 IN monty.asm
DEF1:               0631 DEFINED AT LINE 933 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
LET:                063A DEFINED AT LINE 940 IN monty.asm
                    > USED AT LINE 1590 IN monty.asm
LET1:               065E DEFINED AT LINE 965 IN monty.asm
                    > USED AT LINE 937 IN monty.asm
LET2:               0666 DEFINED AT LINE 972 IN monty.asm
                    > USED AT LINE 969 IN monty.asm
DOLET:              0669 DEFINED AT LINE 977 IN monty.asm
DOLET2:             066D DEFINED AT LINE 980 IN monty.asm
DOLET3:             0671 DEFINED AT LINE 985 IN monty.asm
ADDR:               067B DEFINED AT LINE 994 IN monty.asm
                    > USED AT LINE 1530 IN monty.asm
ADDR1:              0687 DEFINED AT LINE 1004 IN monty.asm
                    > USED AT LINE 999 IN monty.asm
SYMBOL:             0692 DEFINED AT LINE 1012 IN monty.asm
                    > USED AT LINE 276 IN monty.asm
SYMBOL0:            069A DEFINED AT LINE 1017 IN monty.asm
                    > USED AT LINE 1028 IN monty.asm
                    > USED AT LINE 1030 IN monty.asm
SYMBOL1:            069C DEFINED AT LINE 1020 IN monty.asm
                    > USED AT LINE 1016 IN monty.asm
SYMBOL2:            06AC DEFINED AT LINE 1031 IN monty.asm
                    > USED AT LINE 1024 IN monty.asm
IDENT:              06BA DEFINED AT LINE 1042 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
FRAC:               06C0 DEFINED AT LINE 1049 IN monty.asm
                    > USED AT LINE 1562 IN monty.asm
SQRT1:              06C6 DEFINED AT LINE 1055 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
ABS1:               06D3 DEFINED AT LINE 1064 IN monty.asm
                    > USED AT LINE 1526 IN monty.asm
MOD:                06E0 DEFINED AT LINE 1077 IN monty.asm
                    > USED AT LINE 1602 IN monty.asm
EQUALS:             06EC DEFINED AT LINE 1089 IN monty.asm
                    > USED AT LINE 355 IN monty.asm
LESSTHANEQ:         06F4 DEFINED AT LINE 1097 IN monty.asm
                    > USED AT LINE 369 IN monty.asm
LESSTHAN:           06F9 DEFINED AT LINE 1104 IN monty.asm
                    > USED AT LINE 371 IN monty.asm
LESSTHAN1:          06FE DEFINED AT LINE 1109 IN monty.asm
                    > USED AT LINE 1100 IN monty.asm
TRUE1:              0701 DEFINED AT LINE 1112 IN monty.asm
                    > USED AT LINE 1092 IN monty.asm
                    > USED AT LINE 1642 IN monty.asm
NULL1:              0707 DEFINED AT LINE 1116 IN monty.asm
                    > USED AT LINE 1610 IN monty.asm
FALSE1:             0707 DEFINED AT LINE 1117 IN monty.asm
                    > USED AT LINE 1093 IN monty.asm
                    > USED AT LINE 1107 IN monty.asm
                    > USED AT LINE 1110 IN monty.asm
                    > USED AT LINE 1554 IN monty.asm
INPUT:              070D DEFINED AT LINE 1124 IN monty.asm
                    > USED AT LINE 1574 IN monty.asm
OUTPUT:             0718 DEFINED AT LINE 1136 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
KEY:                0721 DEFINED AT LINE 1145 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
NEG:                072A DEFINED AT LINE 1152 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
FILTER:             0731 DEFINED AT LINE 1157 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
MAP:                0731 DEFINED AT LINE 1158 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
HASHSTR:            0733 DEFINED AT LINE 1169 IN monty.asm
                    > USED AT LINE 924 IN monty.asm
                    > USED AT LINE 1037 IN monty.asm
                    > USED AT LINE 1503 IN monty.asm
HASHSTR1:           073A DEFINED AT LINE 1172 IN monty.asm
                    > USED AT LINE 1191 IN monty.asm
HASHSTR2:           073F DEFINED AT LINE 1177 IN monty.asm
DEFINEENTRY:        0750 DEFINED AT LINE 1196 IN monty.asm
                    > USED AT LINE 968 IN monty.asm
                    > USED AT LINE 1506 IN monty.asm
DEFINEENTRY0:       0755 DEFINED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1217 IN monty.asm
DEFINEENTRY1:       0764 DEFINED AT LINE 1212 IN monty.asm
                    > USED AT LINE 1206 IN monty.asm
DEFINEENTRY2:       076A DEFINED AT LINE 1218 IN monty.asm
                    > USED AT LINE 1210 IN monty.asm
                    > USED AT LINE 1242 IN monty.asm
DEFINEENTRY3:       076C DEFINED AT LINE 1221 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
LOOKUPENTRY:        0776 DEFINED AT LINE 1235 IN monty.asm
                    > USED AT LINE 998 IN monty.asm
LOOKUPENTRY0:       077B DEFINED AT LINE 1239 IN monty.asm
                    > USED AT LINE 1256 IN monty.asm
LOOKUPENTRY1:       078A DEFINED AT LINE 1251 IN monty.asm
                    > USED AT LINE 1245 IN monty.asm
LOOKUPENTRY2:       0790 DEFINED AT LINE 1257 IN monty.asm
LOOKUPENTRY3:       0792 DEFINED AT LINE 1260 IN monty.asm
                    > USED AT LINE 1249 IN monty.asm
DIVIDE:             079A DEFINED AT LINE 1272 IN monty.asm
                    > USED AT LINE 378 IN monty.asm
                    > USED AT LINE 1082 IN monty.asm
DIVIDE1:            079F DEFINED AT LINE 1275 IN monty.asm
                    > USED AT LINE 1287 IN monty.asm
DIVIDE2:            07AC DEFINED AT LINE 1283 IN monty.asm
                    > USED AT LINE 1280 IN monty.asm
DIVIDE3:            07AD DEFINED AT LINE 1285 IN monty.asm
                    > USED AT LINE 1282 IN monty.asm
SQUAREROOT:         07B3 DEFINED AT LINE 1295 IN monty.asm
                    > USED AT LINE 1058 IN monty.asm
SQUAREROOT1:        07B8 DEFINED AT LINE 1299 IN monty.asm
                    > USED AT LINE 1320 IN monty.asm
SQUAREROOT4:        07D3 DEFINED AT LINE 1319 IN monty.asm
                    > USED AT LINE 1313 IN monty.asm
SQUAREROOT5:        07DA DEFINED AT LINE 1324 IN monty.asm
                    > USED AT LINE 1322 IN monty.asm
PRTDEC:             07DD DEFINED AT LINE 1330 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 137
PRTDEC0:            07EC DEFINED AT LINE 1341 IN monty.asm
                    > USED AT LINE 1332 IN monty.asm
PRTDEC1:            080E DEFINED AT LINE 1357 IN monty.asm
                    > USED AT LINE 1345 IN monty.asm
                    > USED AT LINE 1347 IN monty.asm
                    > USED AT LINE 1349 IN monty.asm
                    > USED AT LINE 1351 IN monty.asm
                    > USED AT LINE 1354 IN monty.asm
PRTDEC2:            0810 DEFINED AT LINE 1359 IN monty.asm
                    > USED AT LINE 1362 IN monty.asm
PRTDEC3:            0820 DEFINED AT LINE 1371 IN monty.asm
                    > USED AT LINE 1366 IN monty.asm
PRTDEC4:            0821 DEFINED AT LINE 1373 IN monty.asm
                    > USED AT LINE 1370 IN monty.asm
PRTHEX:             0825 DEFINED AT LINE 1377 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
                    > USED AT LINE 324 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0830 DEFINED AT LINE 1385 IN monty.asm
                    > USED AT LINE 1380 IN monty.asm
                    > USED AT LINE 1382 IN monty.asm
PRTHEX3:            0839 DEFINED AT LINE 1393 IN monty.asm
                    > USED AT LINE 1391 IN monty.asm
PRTSTR0:            0844 DEFINED AT LINE 1401 IN monty.asm
                    > USED AT LINE 1407 IN monty.asm
PRTSTR:             0848 DEFINED AT LINE 1404 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
                    > USED AT LINE 1467 IN monty.asm
NESTING:            084D DEFINED AT LINE 1420 IN monty.asm
                    > USED AT LINE 1673 IN monty.asm
                    > USED AT LINE 1714 IN monty.asm
NESTING1A:          0858 DEFINED AT LINE 1427 IN monty.asm
                    > USED AT LINE 1424 IN monty.asm
NESTING1:           085B DEFINED AT LINE 1430 IN monty.asm
                    > USED AT LINE 1422 IN monty.asm
NESTING2:           086A DEFINED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1434 IN monty.asm
                    > USED AT LINE 1436 IN monty.asm
NESTING3:           086C DEFINED AT LINE 1442 IN monty.asm
                    > USED AT LINE 1438 IN monty.asm
NESTING4:           0877 DEFINED AT LINE 1449 IN monty.asm
                    > USED AT LINE 1444 IN monty.asm
                    > USED AT LINE 1446 IN monty.asm
PROMPT:             0879 DEFINED AT LINE 1453 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
CRLF:               0882 DEFINED AT LINE 1458 IN monty.asm
                    > USED AT LINE 1726 IN monty.asm
PRINTSTR:           0889 DEFINED AT LINE 1465 IN monty.asm
                    > USED AT LINE 1454 IN monty.asm
                    > USED AT LINE 1459 IN monty.asm
                    > USED AT LINE 1653 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 130
EXECSTR:            0890 DEFINED AT LINE 1474 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
BRANCH:             0890 DEFINED AT LINE 1484 IN monty.asm
DEFINE:             0894 DEFINED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1528 IN monty.asm
                    > USED AT LINE 1532 IN monty.asm
                    > USED AT LINE 1536 IN monty.asm
                    > USED AT LINE 1540 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
                    > USED AT LINE 1548 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
                    > USED AT LINE 1556 IN monty.asm
                    > USED AT LINE 1560 IN monty.asm
                    > USED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1568 IN monty.asm
                    > USED AT LINE 1572 IN monty.asm
                    > USED AT LINE 1576 IN monty.asm
                    > USED AT LINE 1580 IN monty.asm
                    > USED AT LINE 1584 IN monty.asm
                    > USED AT LINE 1588 IN monty.asm
                    > USED AT LINE 1592 IN monty.asm
                    > USED AT LINE 1596 IN monty.asm
                    > USED AT LINE 1600 IN monty.asm
                    > USED AT LINE 1604 IN monty.asm
                    > USED AT LINE 1608 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1620 IN monty.asm
                    > USED AT LINE 1624 IN monty.asm
                    > USED AT LINE 1628 IN monty.asm
                    > USED AT LINE 1632 IN monty.asm
                    > USED AT LINE 1636 IN monty.asm
                    > USED AT LINE 1640 IN monty.asm
                    > USED AT LINE 1644 IN monty.asm
INIT:               08AC DEFINED AT LINE 1508 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1652 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              08C6 DEFINED AT LINE 1519 IN monty.asm
                    > USED AT LINE 1522 IN monty.asm
START:              0A20 DEFINED AT LINE 1650 IN monty.asm
INTERPRET:          0A36 DEFINED AT LINE 1656 IN monty.asm
                    > USED AT LINE 1759 IN monty.asm
INTERPRET2:         0A40 DEFINED AT LINE 1662 IN monty.asm
                    > USED AT LINE 1706 IN monty.asm
INTERPRET3:         0A48 DEFINED AT LINE 1669 IN monty.asm
                    > USED AT LINE 1678 IN monty.asm
INTERPRET4:         0A4E DEFINED AT LINE 1675 IN monty.asm
                    > USED AT LINE 1667 IN monty.asm
WAITCHAR:           0A53 DEFINED AT LINE 1681 IN monty.asm
                    > USED AT LINE 1715 IN monty.asm
                    > USED AT LINE 1729 IN monty.asm
MACRO:              0A62 DEFINED AT LINE 1691 IN monty.asm
WAITCHAR1:          0A64 DEFINED AT LINE 1708 IN monty.asm
                    > USED AT LINE 1684 IN monty.asm
WAITCHAR3:          0A72 DEFINED AT LINE 1717 IN monty.asm
                    > USED AT LINE 1689 IN monty.asm
WAITCHAR4:          0A85 DEFINED AT LINE 1731 IN monty.asm
                    > USED AT LINE 1687 IN monty.asm
NEXT:               0A8D DEFINED AT LINE 1737 IN monty.asm
                    > USED AT LINE 71 IN monty.asm
                    > USED AT LINE 1741 IN monty.asm
NEXT1:              0AA0 DEFINED AT LINE 1750 IN monty.asm
                    > USED AT LINE 1742 IN monty.asm
NEXT2:              0AB3 DEFINED AT LINE 1760 IN monty.asm
                    > USED AT LINE 1744 IN monty.asm
ESCAPE_:            0AB9 DEFINED AT LINE 1768 IN monty.asm
                    > USED AT LINE 1752 IN monty.asm
EXIT_:              0ABA DEFINED AT LINE 1770 IN monty.asm
                    > USED AT LINE 1754 IN monty.asm
LITERAL_:           0ABD DEFINED AT LINE 1774 IN monty.asm
                    > USED AT LINE 1756 IN monty.asm
ENTER_:             0AC6 DEFINED AT LINE 1784 IN monty.asm
                    > USED AT LINE 1758 IN monty.asm
CALL:               0ACD DEFINED AT LINE 1794 IN monty.asm
                    > USED AT LINE 1538 IN monty.asm
EXEC:               0ACF DEFINED AT LINE 1801 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
EXEC0:              0AD0 DEFINED AT LINE 1803 IN monty.asm
                    > USED AT LINE 727 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
EXEC1:              0AD6 DEFINED AT LINE 1808 IN monty.asm
                    > USED AT LINE 1806 IN monty.asm
EXEC2:              0AF6 DEFINED AT LINE 1825 IN monty.asm
                    > USED AT LINE 1817 IN monty.asm
DOCALL:             0AFD DEFINED AT LINE 1834 IN monty.asm
DOCALL1:            0B13 DEFINED AT LINE 1852 IN monty.asm
                    > USED AT LINE 1846 IN monty.asm
DOCALL2:            0B19 DEFINED AT LINE 1858 IN monty.asm
                    > USED AT LINE 1862 IN monty.asm
DOCALL3:            0B1E DEFINED AT LINE 1863 IN monty.asm
                    > USED AT LINE 1857 IN monty.asm
DOCALL4:            0B2A DEFINED AT LINE 1874 IN monty.asm
                    > USED AT LINE 1824 IN monty.asm
                    > USED AT LINE 1829 IN monty.asm
                    > USED AT LINE 1851 IN monty.asm
DOCALL5:            0B36 DEFINED AT LINE 1881 IN monty.asm
                    > USED AT LINE 1838 IN monty.asm
FUNC:               0B38 DEFINED AT LINE 1885 IN monty.asm
                    > USED AT LINE 932 IN monty.asm
                    > USED AT LINE 1566 IN monty.asm
FUNC1:              0B50 DEFINED AT LINE 1906 IN monty.asm
                    > USED AT LINE 1930 IN monty.asm
                    > USED AT LINE 1933 IN monty.asm
                    > USED AT LINE 1938 IN monty.asm
                    > USED AT LINE 1942 IN monty.asm
FUNC2:              0B76 DEFINED AT LINE 1931 IN monty.asm
                    > USED AT LINE 1920 IN monty.asm
                    > USED AT LINE 1922 IN monty.asm
                    > USED AT LINE 1924 IN monty.asm
FUNC3:              0B79 DEFINED AT LINE 1934 IN monty.asm
                    > USED AT LINE 1927 IN monty.asm
                    > USED AT LINE 1929 IN monty.asm
FUNC4:              0B81 DEFINED AT LINE 1940 IN monty.asm
                    > USED AT LINE 1913 IN monty.asm
                    > USED AT LINE 1915 IN monty.asm
                    > USED AT LINE 1917 IN monty.asm
FUNC4A:             0B84 DEFINED AT LINE 1943 IN monty.asm
                    > USED AT LINE 1939 IN monty.asm
ARG:                0B90 DEFINED AT LINE 1954 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG0:               0BAE DEFINED AT LINE 1975 IN monty.asm
                    > USED AT LINE 1981 IN monty.asm
ARG0A:              0BB7 DEFINED AT LINE 1983 IN monty.asm
                    > USED AT LINE 1960 IN monty.asm
                    > USED AT LINE 1967 IN monty.asm
ARG1:               0BBC DEFINED AT LINE 1986 IN monty.asm
                    > USED AT LINE 1979 IN monty.asm
ARG1A:              0BC4 DEFINED AT LINE 1993 IN monty.asm
                    > USED AT LINE 1985 IN monty.asm
CLOSURE:            0BC7 DEFINED AT LINE 1999 IN monty.asm
                    > USED AT LINE 1542 IN monty.asm
DOCLOSURE:          0BE1 DEFINED AT LINE 2017 IN monty.asm
DOCLOSURE1:         0BF7 DEFINED AT LINE 2035 IN monty.asm
                    > USED AT LINE 2045 IN monty.asm
DOCLOSURE2:         0BFD DEFINED AT LINE 2042 IN monty.asm
                    > USED AT LINE 2034 IN monty.asm
DOCLOSURE3:         0C01 DEFINED AT LINE 2046 IN monty.asm
                    > USED AT LINE 2025 IN monty.asm
READIDENT:          0C07 DEFINED AT LINE 2054 IN monty.asm
READIDENT0:         0C0B DEFINED AT LINE 2057 IN monty.asm
                    > USED AT LINE 2068 IN monty.asm
                    > USED AT LINE 2070 IN monty.asm
READIDENT1:         0C0D DEFINED AT LINE 2060 IN monty.asm
                    > USED AT LINE 2056 IN monty.asm
READIDENT2:         0C1D DEFINED AT LINE 2071 IN monty.asm
                    > USED AT LINE 2064 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1651 IN monty.asm
                    > USED AT LINE 1810 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1512 IN monty.asm
VFRAC:              1898 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 379 IN monty.asm
                    > USED AT LINE 1050 IN monty.asm
                    > USED AT LINE 1059 IN monty.asm
VDATAWIDTH:         189A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 748 IN monty.asm
                    > USED AT LINE 772 IN monty.asm
                    > USED AT LINE 838 IN monty.asm
                    > USED AT LINE 871 IN monty.asm
VTIBPTR:            189C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1660 IN monty.asm
                    > USED AT LINE 1732 IN monty.asm
VPOINTER:           189E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 755 IN monty.asm
                    > USED AT LINE 770 IN monty.asm
                    > USED AT LINE 979 IN monty.asm
                    > USED AT LINE 1008 IN monty.asm
                    > USED AT LINE 1989 IN monty.asm
VLASTDEF:           18A0 DEFINED AT LINE 26 IN ram.asm
VHASHSTR:           18A2 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 955 IN monty.asm
                    > USED AT LINE 990 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
VNEXT:              18A4 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 934 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
VHEAPPTR:           18A6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 521 IN monty.asm
                    > USED AT LINE 538 IN monty.asm
                    > USED AT LINE 557 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
                    > USED AT LINE 865 IN monty.asm
                    > USED AT LINE 911 IN monty.asm
                    > USED AT LINE 912 IN monty.asm
                    > USED AT LINE 944 IN monty.asm
                    > USED AT LINE 962 IN monty.asm
                    > USED AT LINE 963 IN monty.asm
                    > USED AT LINE 1886 IN monty.asm
                    > USED AT LINE 1946 IN monty.asm
                    > USED AT LINE 1948 IN monty.asm
                    > USED AT LINE 2000 IN monty.asm
                    > USED AT LINE 2011 IN monty.asm
                    > USED AT LINE 2013 IN monty.asm
VTEMP1:             18A8 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 858 IN monty.asm
                    > USED AT LINE 913 IN monty.asm
                    > USED AT LINE 2027 IN monty.asm
                    > USED AT LINE 2047 IN monty.asm
VARS:               18AA DEFINED AT LINE 33 IN ram.asm
TIB:                1A00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1666 IN monty.asm
                    > USED AT LINE 1709 IN monty.asm
                    > USED AT LINE 1718 IN monty.asm
                    > USED AT LINE 1733 IN monty.asm
PAD:                1B00 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1014 IN monty.asm
                    > USED AT LINE 1036 IN monty.asm
HASHSLOTS:          1C00 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1518 IN monty.asm
HASHWORDS:          1D00 DEFINED AT LINE 46 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 72 IN monty.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2508S43:  4063 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2509S43:  40C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2510S43:  412B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2511S43:  418F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2512S43:  41F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2513S43:  425D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2514S43:  42C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2515S43:  4329 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2516S43:  4391 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2517S43:  43FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2518S43:  4463 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2519S43:  44CB DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            44D6 DEFINED AT LINE 135
