0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 19               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 19               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 19               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 19               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 19               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 19               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 19               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 19               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 19               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 19               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 19               LD   (RST08),HL   
0094   22 D2 19               LD   (RST10),HL   
0097   22 D4 19               LD   (RST18),HL   
009A   22 D6 19               LD   (RST20),HL   
009D   22 D8 19               LD   (RST28),HL   
00A0   22 DA 19               LD   (RST30),HL   
00A3   22 DE 19               LD   (INTVEC),HL   
00A6   22 E0 19               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 19               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 19               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD A4 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_arg
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   2F 09                  DW   next   ; g nNext
018E   00 1C                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available _ @ " % , ; DEL
0220   9F                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(not_)   ; !
0222   4A                     DB   lsb(string_)   ; "
0223   41                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   9F                     DB   lsb(nop_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   9F                     DB   lsb(nop_)   ; )
022A   36                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   9F                     DB   lsb(nop_)   ; , compile
022D   4D                     DB   lsb(sub_)   ; -
022E   21                     DB   lsb(dot_)   ; .
022F   8D                     DB   lsb(div_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   24                     DB   lsb(go_)   ; :
023B   9F                     DB   lsb(nop_)   ; ;
023C   7B                     DB   lsb(lt_)   ; <
023D   61                     DB   lsb(eq_)   ; =
023E   70                     DB   lsb(gt_)   ; >
023F   2D                     DB   lsb(index_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   27                     DB   lsb(identU_)   ; A
0242   27                     DB   lsb(identU_)   ; B
0243   27                     DB   lsb(identU_)   ; C
0244   27                     DB   lsb(identU_)   ; D
0245   27                     DB   lsb(identU_)   ; E
0246   27                     DB   lsb(identU_)   ; F
0247   27                     DB   lsb(identU_)   ; G
0248   27                     DB   lsb(identU_)   ; h
0249   27                     DB   lsb(identU_)   ; I
024A   27                     DB   lsb(identU_)   ; J
024B   27                     DB   lsb(identU_)   ; K
024C   27                     DB   lsb(identU_)   ; L
024D   27                     DB   lsb(identU_)   ; M
024E   27                     DB   lsb(identU_)   ; N
024F   27                     DB   lsb(identU_)   ; O
0250   27                     DB   lsb(identU_)   ; p
0251   27                     DB   lsb(identU_)   ; Q
0252   27                     DB   lsb(identU_)   ; R
0253   27                     DB   lsb(identU_)   ; S
0254   27                     DB   lsb(identU_)   ; T
0255   27                     DB   lsb(identU_)   ; U
0256   27                     DB   lsb(identU_)   ; V
0257   27                     DB   lsb(identU_)   ; W
0258   27                     DB   lsb(identU_)   ; X
0259   27                     DB   lsb(identU_)   ; Y
025A   27                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(array_)   ; [
025C   9C                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrayEnd_)   ; ]
025E   47                     DB   lsb(xor_)   ; ^
025F   9F                     DB   lsb(nop_)   ; _
0260   4A                     DB   lsb(string_)   ; `     used for testing string   	
0261   2A                     DB   lsb(identL_)   ; a
0262   2A                     DB   lsb(identL_)   ; b
0263   2A                     DB   lsb(identL_)   ; c
0264   2A                     DB   lsb(identL_)   ; d
0265   2A                     DB   lsb(identL_)   ; e
0266   2A                     DB   lsb(identL_)   ; f
0267   2A                     DB   lsb(identL_)   ; g
0268   2A                     DB   lsb(identL_)   ; h
0269   2A                     DB   lsb(identL_)   ; i
026A   2A                     DB   lsb(identL_)   ; j
026B   2A                     DB   lsb(identL_)   ; k
026C   2A                     DB   lsb(identL_)   ; l
026D   2A                     DB   lsb(identL_)   ; m
026E   2A                     DB   lsb(identL_)   ; n
026F   2A                     DB   lsb(identL_)   ; o
0270   2A                     DB   lsb(identL_)   ; p
0271   2A                     DB   lsb(identL_)   ; q
0272   2A                     DB   lsb(identL_)   ; r
0273   2A                     DB   lsb(identL_)   ; s
0274   2A                     DB   lsb(identL_)   ; t
0275   2A                     DB   lsb(identL_)   ; u
0276   2A                     DB   lsb(identL_)   ; v
0277   2A                     DB   lsb(identL_)   ; w
0278   2A                     DB   lsb(identL_)   ; x
0279   2A                     DB   lsb(identL_)   ; y
027A   2A                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   44                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   30                     DB   lsb(inv_)   ; ~
027F   9F                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 A1 03               JP   addr   
0309                AND_:        
0309   C3 AD 03               JP   and   
030C                ARG_:        
030C   C3 6D 08               JP   arg   
030F                ARG_LIST_:      
030F   C3 FE 04               JP   arg_list   
0312                ARRAY_:      
0312   C3 05 06               JP   array   
0315                ARRAYEND_:      
0315   C3 21 06               JP   arrayEnd   
0318                BLOCK_:      
0318   C3 30 05               JP   block   
031B                BLOCKEND_:      
031B   C3 71 05               JP   blockend   
031E                CHAR_:       
031E   C3 C2 04               JP   char   
0321                DOT_:        
0321   C3 D2 03               JP   dot   
0324                GO_:         
0324   C3 B2 07               JP   go   
0327                IDENTU_:      
0327   C3 D7 04               JP   identU   
032A                IDENTL_:      
032A   C3 DC 04               JP   identL   
032D                             ; addr index -- addr2
032D                INDEX_:      
032D   C3 DE 05               JP   index   
0330                INV_:        ; Bitwise INVert the top member of the stack
0330   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0333   C3 06 04               JP   xor1   
0336                MUL_:        
0336   C3 31 04               JP   mul   
0339                NOT_:        ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 2E                  JR   eq1   
033E                NUM_:        
033E   C3 4D 04               JP   num   
0341                HEXNUM_:      
0341   C3 7D 04               JP   hexnum   
0344                OR_:         
0344   C3 FC 03               JP   or   
0347                XOR_:        
0347   C3 05 04               JP   xor   
034A                STRING_:      
034A   C3 9A 04               JP   string   
034D                SUB_:        ; negative sign or subtract
034D   03                     INC   bc   ; check if sign of a number
034E   0A                     LD   a,(bc)   
034F   0B                     DEC   bc   
0350   FE 30                  CP   "0"   
0352   38 05                  JR   c,sub1   
0354   FE 3A                  CP   "9"+1   
0356   DA 3E 03               JP   c,num_   
0359                SUB1:        ; Subtract the value 2nd on stack from top of stack
0359   D1                     POP   de   
035A   E1                     POP   hl   ; Entry point for INVert
035B                SUB2:        
035B   B7                     OR   a   ; Entry point for NEGate
035C   ED 52                  SBC   hl,de   
035E   E5                     PUSH   hl   
035F   DD E9                  JP   (ix)   
0361                EQ_:         
0361   03                     INC   bc   
0362   0A                     LD   a,(bc)   ; is it == ?
0363   FE 3D                  CP   "="   
0365   28 04                  JR   z,eq0   ; no its equality
0367   0B                     DEC   bc   
0368   C3 EE 04               JP   assign   ; no its assignment
036B                EQ0:         
036B   E1                     POP   hl   
036C                EQ1:         
036C   D1                     POP   de   
036D   C3 93 06               JP   equals   
0370                GT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3E                  CP   ">"   
0374   CA 1E 04               JP   z,shiftRight   
0377   D1                     POP   de   
0378   E1                     POP   hl   
0379   18 09                  JR   lt1   
037B                LT_:         
037B   03                     INC   bc   
037C   0A                     LD   a,(bc)   
037D   FE 3C                  CP   "<"   
037F   CA 0E 04               JP   z,shiftLeft   
0382   E1                     POP   hl   
0383   D1                     POP   de   
0384                LT1:         
0384   FE 3D                  CP   "="   
0386   CA 9B 06               JP   z,lessthaneq   
0389   0B                     DEC   bc   
038A   C3 A0 06               JP   lessthan   
038D                DIV_:        
038D   D1                     POP   de   ; get first value
038E   E1                     POP   hl   ; get 2nd value
038F   C5                     PUSH   bc   ; preserve the IP
0390   44 4D                  LD   bc,hl   
0392   CD D3 06               CALL   divide   
0395   22 E6 19               LD   (vFrac),hl   
0398   C1                     POP   bc   
0399   D5                     PUSH   de   ; push result
039A   DD E9                  JP   (ix)   
039C                COMMAND_:      
039C   C3 B8 03               JP   command   
039F                NOP_:        
039F   DD E9                  JP   (ix)   
03A1                             ;*******************************************************************
03A1                             ; word operators
03A1                             ;*******************************************************************
03A1                             ; -- ptr
03A1                ADDR:        
03A1   2A EC 19               LD   hl,(vPointer)   
03A4   E5                     PUSH   hl   
03A5   21 EC 19               LD   hl,vPointer   
03A8   22 EC 19               LD   (vPointer),hl   
03AB   DD E9                  JP   (ix)   
03AD                AND:         
03AD   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03AE   E1                     POP   hl   
03AF   7B                     LD   a,e   
03B0   A5                     AND   l   
03B1   6F                     LD   l,a   
03B2   7A                     LD   a,d   
03B3   A4                     AND   h   
03B4                AND1:        
03B4   67                     LD   h,a   
03B5   E5                     PUSH   hl   
03B6   DD E9                  JP   (ix)   
03B8                COMMAND:      
03B8   03                     INC   bc   
03B9   0A                     LD   a,(bc)   
03BA   FE 5C                  CP   $5C   ; \\ comment
03BC   28 0B                  JR   z,comment   
03BE   FE 66                  CP   "f"   ; func
03C0   CA 19 08               JP   z,func   
03C3   21 01 00               LD   hl,1   ; error 1: unknown command
03C6   C3 52 09               JP   error   
03C9                COMMENT:      
03C9   03                     INC   bc   ; point to next char
03CA   0A                     LD   a,(bc)   
03CB   FE 20                  CP   " "   ; terminate on any char less than SP
03CD   30 FA                  JR   nc,comment   
03CF   0B                     DEC   bc   
03D0   DD E9                  JP   (ix)   
03D2                DOT:         
03D2   E1                     POP   hl   
03D3   03                     INC   bc   
03D4   0A                     LD   a,(bc)   
03D5   FE 68                  CP   "h"   
03D7   20 05                  JR   nz,dot1   
03D9   CD 34 07               CALL   prthex   
03DC   18 17                  JR   dot4   
03DE                DOT1:        
03DE   FE 73                  CP   "s"   
03E0   20 05                  JR   nz,dot2   
03E2   CD 57 07               CALL   prtstr   
03E5   18 0E                  JR   dot4   
03E7                DOT2:        
03E7   FE 63                  CP   "c"   
03E9   20 06                  JR   nz,dot3   
03EB   7D                     LD   a,l   
03EC   CD 85 00               CALL   putchar   
03EF   18 04                  JR   dot4   
03F1                DOT3:        
03F1   0B                     DEC   bc   
03F2   CD EC 06               CALL   prtdec   
03F5                DOT4:        
03F5   3E 20                  LD   a," "   
03F7   CD 85 00               CALL   putchar   
03FA   DD E9                  JP   (ix)   
03FC                OR:          
03FC   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03FD   E1                     POP   hl   
03FE   7B                     LD   a,e   
03FF   B5                     OR   l   
0400   6F                     LD   l,a   
0401   7A                     LD   a,d   
0402   B4                     OR   h   
0403   18 AF                  JR   and1   
0405                XOR:         
0405   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0406                XOR1:        
0406   E1                     POP   hl   
0407   7B                     LD   a,e   
0408   AD                     XOR   l   
0409   6F                     LD   l,a   
040A   7A                     LD   a,d   
040B   AC                     XOR   h   
040C   18 A6                  JR   and1   
040E                             ; shiftLeft
040E                             ; value count -- value2          shift left count places
040E                SHIFTLEFT:      
040E   50 59                  LD   de,bc   ; save IP
0410   C1                     POP   bc   ; bc = count
0411   41                     LD   b,c   ; b = loop counter
0412   E1                     POP   hl   
0413   04                     INC   b   ; test for counter=0 case
0414   18 01                  JR   shiftLeft2   
0416                SHIFTLEFT1:      
0416   29                     ADD   hl,hl   ; left shift hl
0417                SHIFTLEFT2:      
0417   10 FD                  DJNZ   shiftLeft1   
0419   E5                     PUSH   hl   
041A   42 4B                  LD   bc,de   ; restore IP
041C   DD E9                  JP   (ix)   
041E                             ; shiftRight
041E                             ; value count -- value2          shift left count places
041E                SHIFTRIGHT:      
041E   50 59                  LD   de,bc   ; save IP
0420   C1                     POP   bc   ; bc = count
0421   41                     LD   b,c   ; b = loop counter
0422   E1                     POP   hl   
0423   04                     INC   b   ; test for counter=0 case
0424   18 04                  JR   shiftRight2   
0426                SHIFTRIGHT1:      
0426   CB 3C                  SRL   h   ; right shift hl
0428   CB 1D                  RR   l   
042A                SHIFTRIGHT2:      
042A   10 FA                  DJNZ   shiftRight1   
042C   E5                     PUSH   hl   
042D   42 4B                  LD   bc,de   ; restore IP
042F   DD E9                  JP   (ix)   
0431                MUL:         ;=19
0431   D1                     POP   de   ; get first value
0432   E1                     POP   hl   
0433   C5                     PUSH   bc   ; Preserve the IP
0434   44                     LD   b,h   ; bc = 2nd value
0435   4D                     LD   c,l   
0436   21 00 00               LD   hl,0   
0439   3E 10                  LD   a,16   
043B                MUL2:        
043B   29                     ADD   hl,hl   
043C   CB 13                  RL   e   
043E   CB 12                  RL   d   
0440   30 04                  JR   nc,$+6   
0442   09                     ADD   hl,bc   
0443   30 01                  JR   nc,$+3   
0445   13                     INC   de   
0446   3D                     DEC   a   
0447   20 F2                  JR   nz,mul2   
0449   C1                     POP   bc   ; Restore the IP
044A   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
044B   DD E9                  JP   (ix)   
044D                NUM:         
044D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0450   0A                     LD   a,(bc)   ; Get numeral or -
0451   FE 2D                  CP   "-"   
0453   20 01                  JR   nz,num0   
0455   03                     INC   bc   ; move to next char, no flags affected
0456                NUM0:        
0456   08                     EX   af,af'   ; save zero flag = 0 for later
0457                NUM1:        
0457   0A                     LD   a,(bc)   ; read digit
0458   D6 30                  SUB   "0"   ; less than 0?
045A   38 13                  JR   c,num2   ; not a digit, exit loop
045C   FE 0A                  CP   10   ; greater that 9?
045E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0460   03                     INC   bc   ; inc IP
0461   54 5D                  LD   de,hl   ; multiply hl * 10
0463   29                     ADD   hl,hl   
0464   29                     ADD   hl,hl   
0465   19                     ADD   hl,de   
0466   29                     ADD   hl,hl   
0467   85                     ADD   a,l   ; add digit in a to hl
0468   6F                     LD   l,a   
0469   3E 00                  LD   a,0   
046B   8C                     ADC   a,h   
046C   67                     LD   h,a   
046D   18 E8                  JR   num1   
046F                NUM2:        
046F   0B                     DEC   bc   
0470   08                     EX   af,af'   ; restore zero flag
0471   20 07                  JR   nz,num3   
0473   EB                     EX   de,hl   ; negate the value of hl
0474   21 00 00               LD   hl,0   
0477   B7                     OR   a   ; jump to sub2
0478   ED 52                  SBC   hl,de   
047A                NUM3:        
047A   E5                     PUSH   hl   ; Put the number on the stack
047B   DD E9                  JP   (ix)   ; and process the next character
047D                HEXNUM:      
047D   21 00 00               LD   hl,0   ; Clear hl to accept the number
0480                HEXNUM1:      
0480   03                     INC   bc   
0481   0A                     LD   a,(bc)   ; Get the character which is a numeral
0482   CB 77                  BIT   6,a   ; is it uppercase alpha?
0484   28 02                  JR   z,hexnum2   ; no a decimal
0486   D6 07                  SUB   7   ; sub 7  to make $a - $F
0488                HEXNUM2:      
0488   D6 30                  SUB   $30   ; form decimal digit
048A   DA 6F 04               JP   c,num2   
048D   FE 10                  CP   $0F+1   
048F   D2 6F 04               JP   nc,num2   
0492   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0493   29                     ADD   hl,hl   ; 4X
0494   29                     ADD   hl,hl   ; 8X
0495   29                     ADD   hl,hl   ; 16X
0496   85                     ADD   a,l   ; add into bottom of hl
0497   6F                     LD   l,a   
0498   18 E6                  JR   hexnum1   
049A                             ; string
049A                             ; -- ptr                        ; points to start of string chars,
049A                             ; length is stored at start - 2 bytes
049A                STRING:      
049A   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
049D   23                     INC   hl   ; skip length field to start
049E   23                     INC   hl   
049F   E5                     PUSH   hl   ; save start of string
04A0   03                     INC   bc   ; point to next char
04A1   18 03                  JR   string2   
04A3                STRING1:      
04A3   77                     LD   (hl),a   
04A4   23                     INC   hl   ; increase count
04A5   03                     INC   bc   ; point to next char
04A6                STRING2:      
04A6   0A                     LD   a,(bc)   
04A7   FE 22                  CP   DQUOTE   ; " is the string terminator
04A9   20 F8                  JR   nz,string1   
04AB   FE 60                  CP   "`"   ; ` is the string terminator used in testing
04AD   20 F4                  JR   nz,string1   
04AF   AF                     XOR   a   ; write NUL to terminate string
04B0   77                     LD   (hl),a   ; hl = end of string
04B1   23                     INC   hl   
04B2   22 F4 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04B5   2B                     DEC   hl   ; hl = end of string without terminator
04B6   D1                     POP   de   ; de = start of string
04B7   D5                     PUSH   de   ; return start of string
04B8   B7                     OR   a   ; hl = length bytes, de = start of string
04B9   ED 52                  SBC   hl,de   
04BB   EB                     EX   de,hl   
04BC   2B                     DEC   hl   ; write length bytes to length field at start - 2
04BD   72                     LD   (hl),d   
04BE   2B                     DEC   hl   
04BF   73                     LD   (hl),e   
04C0   DD E9                  JP   (ix)   
04C2                CHAR:        
04C2   21 00 00               LD   hl,0   ; if "" is empty or null
04C5                CHAR1:       
04C5   03                     INC   bc   ; point to next char
04C6   0A                     LD   a,(bc)   
04C7   FE 27                  CP   "'"   ; ' is the terminator
04C9   28 09                  JR   z,char3   
04CB   FE 5C                  CP   $5c   ; \ is the escape
04CD   20 02                  JR   nz,char2   
04CF   03                     INC   bc   
04D0   0A                     LD   a,(bc)   
04D1                CHAR2:       
04D1   6F                     LD   l,a   
04D2   18 F1                  JR   char1   
04D4                CHAR3:       
04D4   E5                     PUSH   hl   
04D5   DD E9                  JP   (ix)   
04D7                IDENTU:      
04D7   0A                     LD   a,(bc)   ; a = identifier char
04D8   D6 41                  SUB   "A"   ; "A" = 0
04DA   18 05                  JR   ident1   
04DC                IDENTL:      
04DC   0A                     LD   a,(bc)   
04DD   D6 61                  SUB   "a"   
04DF   C6 1A                  ADD   a,26   
04E1                IDENT1:      
04E1   87                     ADD   a,a   ; l = a * 2
04E2   6F                     LD   l,a   
04E3   26 19                  LD   h,msb(vars)   
04E5   22 EC 19               LD   (vPointer),hl   ; store address in setter
04E8   5E                     LD   e,(hl)   
04E9   23                     INC   hl   
04EA   56                     LD   d,(hl)   
04EB   D5                     PUSH   de   
04EC   DD E9                  JP   (ix)   
04EE                             ; value _oldValue --            ; uses address in vPointer
04EE                ASSIGN:      
04EE   E1                     POP   hl   ; discard last accessed value
04EF   D1                     POP   de   ; new value
04F0   2A EC 19               LD   hl,(vPointer)   
04F3   73                     LD   (hl),e   
04F4   3A E8 19               LD   a,(vDataWidth)   
04F7   3D                     DEC   a   ; is it byte?
04F8   28 02                  JR   z,assign1   
04FA   23                     INC   hl   
04FB   72                     LD   (hl),d   
04FC                ASSIGN1:      
04FC   DD E9                  JP   (ix)   
04FE                             ; 
04FE                             ; 
04FE                             ; 
04FE                             ; 
04FE                             ; 
04FE                             ; arg_list - parses input (ab:c)
04FE                             ; names after the : represent uninitialised locals
04FE                             ; return values are the state of the stack after the block ends
04FE                ARG_LIST:      
04FE   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0501   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
0504   23                     INC   hl   ; skip length field to start
0505   23                     INC   hl   
0506   E5                     PUSH   hl   ; save start of arg_list
0507   03                     INC   bc   ; point to next char
0508                ARG_LIST1:      
0508   0A                     LD   a,(bc)   
0509   FE 29                  CP   ")"   ; ) is the arg_list terminator
050B   28 12                  JR   z,arg_list4   
050D   FE 3A                  CP   ":"   
050F   20 03                  JR   nz,arg_list2   
0511   14                     INC   d   ; non zero value local count acts as flag
0512   20 08                  JR   nz,arg_list3   
0514                ARG_LIST2:      
0514   77                     LD   (hl),a   
0515   23                     INC   hl   
0516   1C                     INC   e   ; increase arg count
0517   AF                     XOR   a   
0518   B2                     OR   d   
0519   28 01                  JR   z,arg_list3   
051B   14                     INC   d   ; if d > 0 increase local count
051C                ARG_LIST3:      
051C   03                     INC   bc   ; point to next char
051D   18 E9                  JR   arg_list1   
051F                ARG_LIST4:      
051F   AF                     XOR   a   
0520   B2                     OR   d   
0521   28 01                  JR   z,arg_list5   
0523   15                     DEC   d   ; remove initial inc
0524                ARG_LIST5:      
0524   23                     INC   hl   
0525   22 F4 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0528   E1                     POP   hl   ; hl = start of arg_list
0529   E5                     PUSH   hl   ; return start of string
052A   2B                     DEC   hl   ; write length bytes to length field at start - 2
052B   72                     LD   (hl),d   
052C   2B                     DEC   hl   
052D   73                     LD   (hl),e   
052E   DD E9                  JP   (ix)   
0530                BLOCK:       
0530   C5                     PUSH   bc   ; return pointer to first { of block
0531   03                     INC   bc   
0532   16 01                  LD   d,1   ; nesting: count first parenthesis
0534                BLOCK1:      ; Skip to end of definition
0534   0A                     LD   a,(bc)   ; Get the next character
0535   03                     INC   bc   ; Point to next character
0536   FE 21                  CP   " " + 1   ; ignore whitespace
0538   38 FA                  JR   c,block1   
053A   FE 29                  CP   ")"   
053C   28 2D                  JR   z,block4   
053E   FE 7D                  CP   "}"   
0540   28 29                  JR   z,block4   
0542   FE 5D                  CP   "]"   
0544   28 25                  JR   z,block4   
0546   FE 28                  CP   "("   
0548   28 16                  JR   z,block2   
054A   FE 7B                  CP   "{"   
054C   28 12                  JR   z,block2   
054E   FE 5B                  CP   "["   
0550   28 0E                  JR   z,block2   
0552   FE 27                  CP   "'"   
0554   28 0D                  JR   z,block3   
0556   FE 60                  CP   "`"   
0558   28 09                  JR   z,block3   
055A   FE 22                  CP   $22   
055C   28 05                  JR   z,block3   
055E   18 D4                  JR   block1   
0560                BLOCK2:      
0560   14                     INC   d   
0561   18 D1                  JR   block1   
0563                BLOCK3:      
0563   3E 80                  LD   a,$80   
0565   AA                     XOR   d   
0566   47                     LD   b,a   
0567   20 CB                  JR   nz,block1   
0569   18 03                  JR   block5   
056B                BLOCK4:      
056B   15                     DEC   d   
056C   20 C6                  JR   nz,block1   ; get the next element
056E                BLOCK5:      
056E   0B                     DEC   bc   ; balanced, exit
056F   DD E9                  JP   (ix)   
0571                BLOCKEND:      
0571   D9                     EXX      
0572   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0575   FD 56 01               LD   d,(iy+1)   
0578   FD 4E 06               LD   c,(iy+6)   ; bc = IP
057B   FD 46 07               LD   b,(iy+7)   
057E   D9                     EXX      
057F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0582   FD 56 03               LD   d,(iy+3)   
0585   EB                     EX   de,hl   
0586   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0589   FD 56 01               LD   d,(iy+1)   
058C                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
058C   13                     INC   de   ; for carry flag <=
058D   B7                     OR   a   
058E   ED 52                  SBC   hl,de   
0590   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0592   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0594   FD 5D                  LD   e,iyl   
0596   21 08 00               LD   hl,8   
0599   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
059A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
059B   18 0C                  JR   blockend2   
059D                BLOCKEND1:      ; same scope
059D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05A0   FD 56 03               LD   d,(iy+3)   
05A3   EB                     EX   de,hl   
05A4   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05A6   FD 5D                  LD   e,iyl   
05A8   EB                     EX   de,hl   
05A9                BLOCKEND2:      
05A9   44 4D                  LD   bc,hl   ; bc = hl = BP
05AB   B7                     OR   a   ; hl = BP - SP = count
05AC   ED 72                  SBC   hl,sp   
05AE   C5                     PUSH   bc   ; bc = count, hl = BP
05AF   44 4D                  LD   bc,hl   
05B1   E1                     POP   hl   
05B2   2B                     DEC   hl   ; hl = BP-1
05B3   1B                     DEC   de   ; de = args*-1
05B4   ED B8                  LDDR      
05B6   13                     INC   de   ; hl = new tos
05B7   EB                     EX   de,hl   
05B8   F9                     LD   sp,hl   ; sp = new tos
05B9   D9                     EXX      ; bc = IP, iy = oldBP
05BA   D5                     PUSH   de   
05BB   C5                     PUSH   bc   
05BC   D9                     EXX      
05BD   C1                     POP   bc   
05BE   FD E1                  POP   iy   
05C0   DD E9                  JP   (ix)   
05C2                             ; if
05C2                             ; condition then -- value
05C2                IF:          
05C2   11 00 00               LD   de,0   ; NUL pointer for else
05C5   18 01                  JR   ifte1   
05C7                             ; ifte
05C7                             ; condition then else -- value
05C7                IFTE:        
05C7   D1                     POP   de   ; de = else
05C8                IFTE1:       
05C8   E1                     POP   hl   ; hl = then
05C9   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
05CA   7C                     LD   a,h   
05CB   B5                     OR   l   
05CC   E1                     POP   hl   ; hl = then
05CD   CA B2 07               JP   z,go   ; if z de = else
05D0   EB                     EX   de,hl   ; condition = false, hl = else
05D1   C3 B2 07               JP   go   
05D4                             ; switch
05D4                             ; index array -- value
05D4                SWITCH:      
05D4   D1                     POP   de   ; de = array
05D5   E1                     POP   hl   ; hl = index
05D6   29                     ADD   hl,hl   ; if data width = 2 then double
05D7   19                     ADD   hl,de   ; add addr
05D8   5E                     LD   e,(hl)   
05D9   23                     INC   hl   
05DA   56                     LD   d,(hl)   
05DB   C3 B2 07               JP   go   
05DE                             ; index of an array, based on vDataWidth
05DE                             ; array num -- value    ; also sets vPointer to address
05DE                INDEX:       
05DE   E1                     POP   hl   ; hl = index
05DF   D1                     POP   de   ; de = array
05E0   3A E8 19               LD   a,(vDataWidth)   ; a = data width
05E3   3D                     DEC   a   
05E4   28 01                  JR   z,index1   
05E6                INDEX0:      
05E6   29                     ADD   hl,hl   ; if data width = 2 then double
05E7                INDEX1:      
05E7   19                     ADD   hl,de   ; add addr
05E8   22 EC 19               LD   (vPointer),hl   ; store address in setter
05EB   16 00                  LD   d,0   
05ED   5E                     LD   e,(hl)   
05EE   B7                     OR   a   ; check data width again
05EF   28 02                  JR   z,index2   
05F1   23                     INC   hl   
05F2   56                     LD   d,(hl)   
05F3                INDEX2:      
05F3   D5                     PUSH   de   
05F4   DD E9                  JP   (ix)   
05F6                             ; c b --
05F6                             ; loops until c = 0
05F6                LOOP:        
05F6   DD E9                  JP   (ix)   
05F8                             ;     pop de                      ; de = block                    c
05F8                             ;     pop hl                      ; hl = condition
05F8                             ;     push de
05F8                             ;     push bc                     ; push IP
05F8                             ;     ld bc,de                    ; bc = block
05F8                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05F8                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05F8                             ;     push de                     ; push ScopeBP
05F8                             ;     push iy                     ; push BP
05F8                             ;     ld iy,0                     ; iy = sp
05F8                             ;     add iy,sp
05F8                             ; loop1:
05F8                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05F8                             ;     or h
05F8                             ;     jr z,loop3
05F8                             ;     ld de,loop2-1               ; IP return address
05F8                             ;     push de
05F8                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05F8                             ;     ld d,(iy+3)
05F8                             ;     push de                     ;
05F8                             ;     push iy                     ; push BP
05F8                             ;     ld iy,0                     ; iy = sp
05F8                             ;     add iy,sp
05F8                             ;     push hl                     ; push condition
05F8                             ;     dec bc
05F8                             ;     jp (ix)
05F8                             ; loop2:
05F8                             ;     db ESC                      ; escape from interpreter
05F8                             ;     ld c,(iy+6)                 ; bc = block
05F8                             ;     ld b,(iy+7)
05F8                             ;     pop hl                      ; hl = condition
05F8                             ;     jr loop1
05F8                             ; loop3:
05F8                             ;     ld d,iyh                    ; de = BP
05F8                             ;     ld e,iyl
05F8                             ;     ex de,hl                    ; hl = BP, de = result
05F8                             ;     ld sp,hl                    ; sp = BP
05F8                             ;     pop hl                      ; hl = old BP
05F8                             ;     pop bc                      ; pop ScopeBP (discard)
05F8                             ;     pop bc                      ; bc = IP
05F8                             ;     ld sp,hl                    ; sp = old BP
05F8                             ;     ld iy,0                     ; iy = sp
05F8                             ;     add iy,sp
05F8                             ;     ld ix,(vNext)                  ; needed?
05F8                             ;     jp (ix)
05F8                WORDS:       
05F8   21 02 00               LD   hl,2   
05FB   18 03                  JR   bytes1   
05FD                BYTES:       
05FD   21 01 00               LD   hl,1   
0600                BYTES1:      
0600   22 E8 19               LD   (vDataWidth),hl   
0603   DD E9                  JP   (ix)   
0605                ARRAY:       
0605   11 00 00               LD   de,0   ; create stack frame
0608   D5                     PUSH   de   ; push null for IP
0609   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
060C   FD 56 05               LD   d,(iy+5)   ; 
060F   D5                     PUSH   de   ; 
0610   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
0613   FD 56 03               LD   d,(iy+3)   ; 
0616   D5                     PUSH   de   ; 
0617   FD E5                  PUSH   iy   ; push BP
0619   FD 21 00 00            LD   iy,0   ; BP = SP
061D   FD 39                  ADD   iy,sp   
061F   DD E9                  JP   (ix)   
0621                ARRAYEND:      
0621   FD 54                  LD   d,iyh   ; de = BP
0623   FD 5D                  LD   e,iyl   
0625   ED 43 F6 19            LD   (vTemp1),bc   ; save IP
0629   62 6B                  LD   hl,de   ; hl = de = BP
062B   B7                     OR   a   
062C   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
062E   CB 3C                  SRL   h   ; 
0630   CB 1D                  RR   l   
0632   44 4D                  LD   bc,hl   ; bc = count
0634   2A F4 19               LD   hl,(vHeapPtr)   ; hl = array[-2]
0637   71                     LD   (hl),c   ; write num items in length word
0638   23                     INC   hl   
0639   70                     LD   (hl),b   
063A   23                     INC   hl   ; hl = array[0], bc = count
063B                             ; de = BP, hl = array[0], bc = count
063B   3A E8 19               LD   a,(vDataWidth)   ; vDataWidth=1?
063E   FE 01                  CP   1   
0640   20 10                  JR   nz,arrayEnd2   
0642                ARRAYEND1:      ; byte
0642   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0645   77                     LD   (hl),a   ; write a to array item
0646   23                     INC   hl   ; move to next byte in array
0647   FD 2B                  DEC   iy   ; move tho next word on stack
0649   FD 2B                  DEC   iy   
064B   0B                     DEC   bc   ; dec items count
064C   79                     LD   a,c   ; if not zero loop
064D   B0                     OR   b   
064E   20 F2                  JR   nz,arrayEnd1   
0650   18 13                  JR   arrayEnd3   
0652                ARRAYEND2:      ; word
0652   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0655   77                     LD   (hl),a   ; write lsb of array item
0656   23                     INC   hl   ; move to msb of array item
0657   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
065A   77                     LD   (hl),a   ; write msb of array item
065B   23                     INC   hl   ; move to next word in array
065C   FD 2B                  DEC   iy   ; move to next word on stack
065E   FD 2B                  DEC   iy   
0660   0B                     DEC   bc   ; dec items count
0661   79                     LD   a,c   ; if not zero loop
0662   B0                     OR   b   
0663   20 ED                  JR   nz,arrayEnd2   
0665                ARRAYEND3:      
0665   EB                     EX   de,hl   ; de = end of array, hl = BP
0666   F9                     LD   sp,hl   ; sp = BP
0667   E1                     POP   hl   ; de = end of array, hl = old BP
0668   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0669   FD 62                  LD   iyh,d   
066B   FD 6B                  LD   iyl,e   
066D   D1                     POP   de   ; pop arg_list (discard)
066E   D1                     POP   de   ; pop ScopeBP (discard)
066F   D1                     POP   de   ; pop IP (discard)
0670   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = array[-2]
0674   22 F4 19               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0677   ED 4B F6 19            LD   bc,(vTemp1)   ; restore IP
067B   13                     INC   de   ; de = array[0]
067C   13                     INC   de   
067D   D5                     PUSH   de   ; return array[0]
067E   DD E9                  JP   (ix)   
0680                             ; str -- num
0680                             ; hash:
0680                             ; pop hl
0680                             ; push bc
0680                             ; ld bc,hl
0680                             ; call hashStr
0680                             ; pop bc
0680                             ; push hl
0680                             ; jp (ix)
0680                FRAC:        
0680   2A E6 19               LD   hl,(vFrac)   
0683   E5                     PUSH   hl   
0684   DD E9                  JP   (ix)   
0686                             ; sqrt1:
0686                             ;     pop hl
0686                             ;     push bc
0686                             ;     call squareRoot
0686                             ;     ld (vFrac),bc
0686                             ;     pop bc
0686                             ;     push de
0686                             ;     jp (ix)
0686                ABS1:        
0686   E1                     POP   hl   
0687   CB 7C                  BIT   7,h   
0689   C8                     RET   z   
068A   AF                     XOR   a   
068B   95                     SUB   l   
068C   6F                     LD   l,a   
068D   9F                     SBC   a,a   
068E   94                     SUB   h   
068F   67                     LD   h,a   
0690   E5                     PUSH   hl   
0691   DD E9                  JP   (ix)   
0693                             ; hl = value1, de = value2
0693                             ; hl = result
0693                EQUALS:      
0693   B7                     OR   a   ; reset the carry flag
0694   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0696   28 10                  JR   z,true1   
0698   C3 AE 06               JP   false1   
069B                             ; hl = value1 de = value2
069B                             ; hl = result
069B                LESSTHANEQ:      
069B   B7                     OR   a   
069C   ED 52                  SBC   hl,de   
069E   18 05                  JR   lessthan1   
06A0                             ; hl = value1 de = value2
06A0                             ; hl = result
06A0                LESSTHAN:      
06A0   B7                     OR   a   
06A1   ED 52                  SBC   hl,de   
06A3   28 09                  JR   z,false1   
06A5                LESSTHAN1:      
06A5   FA AE 06               JP   m,false1   
06A8                TRUE1:       
06A8   21 FF FF               LD   hl,TRUE   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                NULL1:       
06AE                FALSE1:      
06AE   21 00 00               LD   hl,FALSE   
06B1   E5                     PUSH   hl   
06B2   DD E9                  JP   (ix)   
06B4                             ; Z80 port input
06B4                             ; port -- value
06B4                INPUT:       
06B4   E1                     POP   hl   
06B5   59                     LD   e,c   ; save IP
06B6   4D                     LD   c,l   
06B7   ED 68                  IN   l,(c)   
06B9   26 00                  LD   h,0   
06BB   4B                     LD   c,e   ; restore IP
06BC   E5                     PUSH   hl   
06BD   DD E9                  JP   (ix)   
06BF                             ; Z80 port output
06BF                             ; value port --
06BF                OUTPUT:      
06BF   E1                     POP   hl   
06C0   59                     LD   e,c   ; save IP
06C1   4D                     LD   c,l   
06C2   E1                     POP   hl   
06C3   ED 69                  OUT   (c),l   
06C5   4B                     LD   c,e   ; restore IP
06C6   DD E9                  JP   (ix)   
06C8                KEY:         
06C8   CD 81 00               CALL   getchar   
06CB   26 00                  LD   h,0   
06CD   6F                     LD   l,a   
06CE   E5                     PUSH   hl   
06CF   DD E9                  JP   (ix)   
06D1                FILTER:      
06D1                MAP:         
06D1                SCAN:        
06D1   DD E9                  JP   (ix)   
06D3                             ; -------------------------------------------------------------------------------
06D3                             ; ; hash C-string
06D3                             ; ; BC = str
06D3                             ; ; HL = hash
06D3                             ; hashStr:
06D3                             ;     ld (vHashStr),bc                    ; store source string
06D3                             ;     ld hl,0
06D3                             ; hashStr1:
06D3                             ;     ld a,(bc)                           ; load next char
06D3                             ;     inc bc
06D3                             ;     cp 0                                ; NUL?
06D3                             ;     ret z
06D3                             ; hashStr2:
06D3                             ;     ld d,0
06D3                             ;     ld e,a
06D3                             ;     add hl,de
06D3                             ;     ld de,hl                            ; hl *= 193 (11000001)
06D3                             ;     add hl,hl                           ; shift left
06D3                             ;     add hl,de                           ; add
06D3                             ;     add hl,hl                           ; shift left
06D3                             ;     add hl,hl                           ; shift left
06D3                             ;     add hl,hl                           ; shift left
06D3                             ;     add hl,hl                           ; shift left
06D3                             ;     add hl,hl                           ; shift left
06D3                             ;     add hl,hl                           ; shift left
06D3                             ;     add hl,de                           ; add
06D3                             ;     jr hashStr1
06D3                             ; division subroutine.
06D3                             ; bc: divisor, de: dividend, hl: remainder
06D3                DIVIDE:      
06D3   21 00 00               LD   hl,0   ; zero the remainder
06D6   3E 10                  LD   a,16   ; loop counter
06D8                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
06D8   CB 21                  SLA   c   
06DA   CB 10                  RL   b   
06DC   ED 6A                  ADC   hl,hl   
06DE   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
06E0   38 03                  JR   c,divide2   
06E2   0C                     INC   c   
06E3   18 01                  JR   divide3   
06E5                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
06E5   19                     ADD   hl,de   
06E6                DIVIDE3:      
06E6   3D                     DEC   a   
06E7   20 EF                  JR   nz,divide1   
06E9   50 59                  LD   de,bc   ; result from bc to de
06EB   C9                     RET      
06EC                             ; ; squareroot
06EC                             ; ; Input: HL = value
06EC                             ; ; Result: DE = square root BC = remainder
06EC                             ; squareRoot:
06EC                             ;     ld bc,0800h
06EC                             ;     ld e,c
06EC                             ;     xor a
06EC                             ; squareRoot1:
06EC                             ;     add hl,hl
06EC                             ;     rl c
06EC                             ;     adc hl,hl
06EC                             ;     rl c
06EC                             ;     jr nc,$+4
06EC                             ;     set 0,l
06EC                             ;     ld a,e
06EC                             ;     add a,a
06EC                             ;     ld e,a
06EC                             ;     add a,a
06EC                             ;     bit 0,l
06EC                             ;     jr nz,$+5
06EC                             ;     sub c
06EC                             ;     jr nc,squareRoot4
06EC                             ;     ld a,c
06EC                             ;     sub e
06EC                             ;     inc e
06EC                             ;     sub e
06EC                             ;     ld c,a
06EC                             ; squareRoot4:
06EC                             ;     djnz squareRoot1
06EC                             ;     bit 0,l
06EC                             ;     jr z,squareRoot5
06EC                             ;     inc b
06EC                             ; squareRoot5:
06EC                             ;     ld d,0
06EC                             ;     ret
06EC                             ; print decimal
06EC                             ; hl = value
06EC                PRTDEC:      
06EC   CB 7C                  BIT   7,h   
06EE   28 0B                  JR   z,prtdec0   
06F0   3E 2D                  LD   a,"-"   
06F2   CD 85 00               CALL   putchar   
06F5   AF                     XOR   a   
06F6   95                     SUB   l   
06F7   6F                     LD   l,a   
06F8   9F                     SBC   a,a   
06F9   94                     SUB   h   
06FA   67                     LD   h,a   
06FB                PRTDEC0:      
06FB   C5                     PUSH   bc   
06FC   0E 00                  LD   c,0   ; leading zeros flag = false
06FE   11 F0 D8               LD   de,-10000   
0701   CD 1D 07               CALL   prtdec1   
0704   11 18 FC               LD   de,-1000   
0707   CD 1D 07               CALL   prtdec1   
070A   11 9C FF               LD   de,-100   
070D   CD 1D 07               CALL   prtdec1   
0710   1E F6                  LD   e,-10   
0712   CD 1D 07               CALL   prtdec1   
0715   0C                     INC   c   ; flag = true for at least digit
0716   1E FF                  LD   e,-1   
0718   CD 1D 07               CALL   prtdec1   
071B   C1                     POP   bc   
071C   C9                     RET      
071D                PRTDEC1:      
071D   06 2F                  LD   b,"0"-1   
071F                PRTDEC2:      
071F   04                     INC   b   
0720   19                     ADD   hl,de   
0721   38 FC                  JR   c,prtdec2   
0723   ED 52                  SBC   hl,de   
0725   3E 30                  LD   a,"0"   
0727   B8                     CP   b   
0728   20 05                  JR   nz,prtdec3   
072A   AF                     XOR   a   
072B   B1                     OR   c   
072C   C8                     RET   z   
072D   18 01                  JR   prtdec4   
072F                PRTDEC3:      
072F   0C                     INC   c   
0730                PRTDEC4:      
0730   78                     LD   a,b   
0731   C3 85 00               JP   putchar   
0734                PRTHEX:      ; display hl as a 16-bit number in hex.
0734   C5                     PUSH   bc   ; preserve the IP
0735   7C                     LD   a,h   
0736   CD 3F 07               CALL   prthex2   
0739   7D                     LD   a,l   
073A   CD 3F 07               CALL   prthex2   
073D   C1                     POP   bc   
073E   C9                     RET      
073F                PRTHEX2:      
073F   4F                     LD   c,a   
0740   1F                     RRA      
0741   1F                     RRA      
0742   1F                     RRA      
0743   1F                     RRA      
0744   CD 48 07               CALL   prthex3   
0747   79                     LD   a,c   
0748                PRTHEX3:      
0748   E6 0F                  AND   0x0F   
074A   C6 90                  ADD   a,0x90   
074C   27                     DAA      
074D   CE 40                  ADC   a,0x40   
074F   27                     DAA      
0750   C3 85 00               JP   putchar   
0753                PRTSTR0:      
0753   CD 85 00               CALL   putchar   
0756   23                     INC   hl   
0757                PRTSTR:      
0757   7E                     LD   a,(hl)   
0758   B7                     OR   a   
0759   20 F8                  JR   nz,prtstr0   
075B   C9                     RET      
075C                             ; **************************************************************************
075C                             ; calculate nesting value
075C                             ; a is char to be tested,
075C                             ; e is the nesting value (initially 0)
075C                             ; e is increased by ( and [
075C                             ; e is decreased by ) and ]
075C                             ; e has its bit 7 toggled by `
075C                             ; limited to 127 levels
075C                             ; **************************************************************************
075C                NESTING:      
075C   FE 22                  CP   DQUOTE   ; quote char
075E   28 06                  JR   z,nesting0   
0760   FE 60                  CP   "`"   ; quote char
0762   28 02                  JR   z,nesting0   
0764   18 0A                  JR   nesting1   
0766                NESTING0:      
0766   CB 7B                  BIT   7,e   
0768   28 03                  JR   z,nesting1a   
076A   CB BB                  RES   7,e   
076C   C9                     RET      
076D                NESTING1A:      
076D   CB FB                  SET   7,e   
076F   C9                     RET      
0770                NESTING1:      
0770   CB 7B                  BIT   7,e   
0772   C0                     RET   nz   
0773   FE 7B                  CP   "{"   
0775   28 08                  JR   z,nesting2   
0777   FE 5B                  CP   "["   
0779   28 04                  JR   z,nesting2   
077B   FE 28                  CP   "("   
077D   20 02                  JR   nz,nesting3   
077F                NESTING2:      
077F   1C                     INC   e   
0780   C9                     RET      
0781                NESTING3:      
0781   FE 7D                  CP   "}"   
0783   28 07                  JR   z,nesting4   
0785   FE 5D                  CP   "]"   
0787   28 03                  JR   z,nesting4   
0789   FE 29                  CP   ")"   
078B   C0                     RET   nz   
078C                NESTING4:      
078C   1D                     DEC   e   
078D   C9                     RET      
078E                PROMPT:      
078E   CD 9E 07               CALL   printStr   
0791   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0796   C9                     RET      
0797                CRLF:        
0797   CD 9E 07               CALL   printStr   
079A   0D 0A 00               .CSTR   "\r\n"   
079D   C9                     RET      
079E                             ; prints a null teminated string
079E                             ; the string should be immedaitely following the call
079E                PRINTSTR:      
079E   E3                     EX   (sp),hl   ; swap			
079F   CD 57 07               CALL   prtstr   
07A2   23                     INC   hl   ; inc past NUL
07A3   E3                     EX   (sp),hl   ; put it back	
07A4   C9                     RET      
07A5                             ; executes a null teminated string (null executes exit_)
07A5                             ; the string should be immedaitely following the call
07A5                EXECSTR:      ; create a root stack frame
07A5   C1                     POP   bc   ; bc = code*
07A6   0B                     DEC   bc   ; dec to prepare for next routine
07A7   11 00 00               LD   de,0   
07AA   D5                     PUSH   de   ; push fake IP
07AB   D5                     PUSH   de   ; push null arg_list*
07AC   D5                     PUSH   de   ; push null first_arg*
07AD   D5                     PUSH   de   ; push fake BP
07AE   DD E9                  JP   (ix)   
07B0                             ; arg1 .. argn func -- ?
07B0                CALL:        
07B0   E1                     POP   hl   
07B1   E9                     JP   (hl)   
07B2                             ; execute a block of code which ends with }
07B2                             ; creates a root scope if BP == stack
07B2                             ; else uses outer scope
07B2                GO:          
07B2   D1                     POP   de   ; de = block*
07B3   7B                     LD   a,e   ; if block* == null, exit
07B4   B2                     OR   d   
07B5   20 02                  JR   nz,go1   
07B7   DD E9                  JP   (ix)   
07B9                GO1:         
07B9   1A                     LD   a,(de)   
07BA   FE 7B                  CP   "{"   
07BC   C2 F3 07               JP   nz,go10   
07BF   13                     INC   de   
07C0   C5                     PUSH   bc   ; push IP
07C1   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
07C4   FD 44                  LD   b,iyh   
07C6   FD 4D                  LD   c,iyl   
07C8   B7                     OR   a   ; hl = stack - BP = root_scope
07C9   ED 42                  SBC   hl,bc   
07CB   7D                     LD   a,l   ; if root_scope, skip
07CC   B4                     OR   h   
07CD   28 11                  JR   z,go2   
07CF   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
07D2   FD 46 05               LD   b,(iy+5)   
07D5   C5                     PUSH   bc   
07D6   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
07D9   FD 46 03               LD   b,(iy+3)   
07DC   60 69                  LD   hl,bc   
07DE   18 05                  JR   go3   
07E0                GO2:         
07E0   E5                     PUSH   hl   ; push arg_list (null)
07E1   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
07E4   39                     ADD   hl,sp   
07E5                GO3:         
07E5   E5                     PUSH   hl   ; push first_arg
07E6   FD E5                  PUSH   iy   ; push BP
07E8   FD 21 00 00            LD   iy,0   ; BP = SP
07EC   FD 39                  ADD   iy,sp   
07EE   42 4B                  LD   bc,de   ; bc = de = block*-1
07F0   0B                     DEC   bc   
07F1   DD E9                  JP   (ix)   
07F3                GO10:        ; execute code at pointer
07F3   EB                     EX   de,hl   ; hl = code*
07F4   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
07F5   23                     INC   hl   
07F6   56                     LD   d,(hl)   
07F7   23                     INC   hl   
07F8   EB                     EX   de,hl   
07F9   7D                     LD   a,l   ; if arg_list* != null skip
07FA   B4                     OR   h   
07FB   20 03                  JR   nz,go11   
07FD   C5                     PUSH   bc   ; push IP
07FE   18 E0                  JR   go2   
0800                GO11:        
0800   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0801   7E                     LD   a,(hl)   
0802   23                     INC   hl   
0803   B7                     OR   a   
0804   28 05                  JR   z,go13   
0806                GO12:        
0806   3B                     DEC   sp   
0807   3B                     DEC   sp   
0808   3D                     DEC   a   
0809   20 FB                  JR   nz,go12   
080B                GO13:        
080B   C5                     PUSH   bc   ; push IP
080C   E5                     PUSH   hl   ; push arg_list*
080D   2B                     DEC   hl   ; hl = num_args*
080E   2B                     DEC   hl   
080F   7E                     LD   a,(hl)   ; hl = num_args * 2
0810   87                     ADD   a,a   
0811   C6 04                  ADD   a,4   ; offset for IP and arg_list
0813   6F                     LD   l,a   
0814   26 00                  LD   h,$0   
0816   39                     ADD   hl,sp   ; hl = first_arg*
0817   18 CC                  JR   go3   
0819                             ; arg_list* block* -- ptr
0819                FUNC:        
0819   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heapptr
081C   D1                     POP   de   ; hl = heapPtr, de = block
081D   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
081E   E3                     EX   (sp),hl   
081F   EB                     EX   de,hl   
0820   73                     LD   (hl),e   ; compile arg_list*
0821   23                     INC   hl   
0822   72                     LD   (hl),d   
0823   23                     INC   hl   
0824   D1                     POP   de   ; de = block*
0825   13                     INC   de   
0826   C5                     PUSH   bc   ; (sp) = IP
0827   06 01                  LD   b,1   ; b = nesting
0829                FUNC1:       
0829   1A                     LD   a,(de)   
082A   13                     INC   de   
082B   77                     LD   (hl),a   
082C   23                     INC   hl   
082D   FE 29                  CP   ")"   
082F   28 2D                  JR   z,func4   
0831   FE 7D                  CP   "}"   
0833   28 29                  JR   z,func4   
0835   FE 5D                  CP   "]"   
0837   28 25                  JR   z,func4   
0839   FE 28                  CP   "("   
083B   28 16                  JR   z,func2   
083D   FE 7B                  CP   "{"   
083F   28 12                  JR   z,func2   
0841   FE 5B                  CP   "["   
0843   28 0E                  JR   z,func2   
0845   FE 22                  CP   DQUOTE   
0847   28 0D                  JR   z,func3   
0849   FE 27                  CP   "'"   
084B   28 09                  JR   z,func3   
084D   FE 60                  CP   "`"   
084F   28 05                  JR   z,func3   
0851   18 D6                  JR   func1   
0853                FUNC2:       
0853   04                     INC   b   
0854   18 D3                  JR   func1   
0856                FUNC3:       
0856   3E 80                  LD   a,$80   
0858   A8                     XOR   b   
0859   47                     LD   b,a   
085A   20 CD                  JR   nz,func1   
085C   18 03                  JR   func4a   
085E                FUNC4:       
085E   05                     DEC   b   
085F   20 C8                  JR   nz,func1   ; get the next element
0861                FUNC4A:      
0861   23                     INC   hl   
0862   C1                     POP   bc   ; de = defstart, hl = IP
0863   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = defstart
0867   D5                     PUSH   de   
0868   22 F4 19               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
086B   DD E9                  JP   (ix)   
086D                             ; $a .. $z
086D                             ; -- value
086D                             ; returns value of arg
086D                ARG:         
086D   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0870   FD 56 05               LD   d,(iy+5)   
0873   EB                     EX   de,hl   
0874   7D                     LD   a,l   ; arg_list* == null, skip
0875   B4                     OR   h   
0876   28 1C                  JR   z,arg0a   
0878   2B                     DEC   hl   ; a = num_args, hl = arg_list*
0879   2B                     DEC   hl   
087A   7E                     LD   a,(hl)   
087B   23                     INC   hl   
087C   23                     INC   hl   
087D   B7                     OR   a   
087E   28 14                  JR   z,arg0a   ; num_args == 0, skip
0880   5F                     LD   e,a   ; e = a = num_args
0881   03                     INC   bc   ; a = next char = arg_name
0882   0A                     LD   a,(bc)   
0883   C5                     PUSH   bc   ; save IP
0884   43                     LD   b,e   ; b = e = num_args
0885   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0888   FD 56 03               LD   d,(iy+3)   
088B                ARG0:        
088B   1B                     DEC   de   ; a = arg_name, de = next arg*
088C   1B                     DEC   de   
088D   BE                     CP   (hl)   
088E   28 09                  JR   z,arg1   
0890   23                     INC   hl   ; hl = next arg_list*
0891   10 F8                  DJNZ   arg0   
0893   C1                     POP   bc   ; no match, restore IP
0894                ARG0A:       
0894   11 00 00               LD   de,0   ; return 0
0897   18 08                  JR   arg1a   
0899                ARG1:        
0899   C1                     POP   bc   ; restore IP
089A   EB                     EX   de,hl   ; hl = arg*
089B   22 EC 19               LD   (vPointer),hl   ; store arg* in setter
089E   5E                     LD   e,(hl)   
089F   23                     INC   hl   
08A0   56                     LD   d,(hl)   ; de = arg
08A1                ARG1A:       
08A1   D5                     PUSH   de   ; push arg
08A2   DD E9                  JP   (ix)   
08A4                INIT:        
08A4   DD 2A F2 19            LD   ix,(vNext)   
08A8   FD 21 80 18            LD   iy,STACK   
08AC   21 80 01               LD   hl,isysVars   
08AF   11 E6 19               LD   de,sysVars   
08B2   01 10 00               LD   bc,8 * 2   
08B5   ED B0                  LDIR      
08B7   21 00 19               LD   hl,vars   ; 52 vars LO HI
08BA   06 34                  LD   b,26*2   
08BC   AF                     XOR   a   
08BD                INIT0:       
08BD   77                     LD   (hl),a   
08BE   23                     INC   hl   
08BF   10 FC                  DJNZ   init0   
08C1   C9                     RET      
08C2                START:       
08C2   31 80 18               LD   sp,STACK   ; start of monty
08C5   CD A4 08               CALL   init   ; setups
08C8   CD 9E 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
08CB   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
08D8                INTERPRET:      
08D8   CD 8E 07               CALL   prompt   
08DB   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
08DE   ED 43 EA 19            LD   (vTIBPtr),bc   
08E2                INTERPRET2:      ; calc nesting (a macro might have changed it)
08E2   1E 00                  LD   e,0   ; initilize nesting value
08E4   C5                     PUSH   bc   ; save offset into TIB,
08E5                             ; bc is also the count of chars in TIB
08E5   21 00 1A               LD   hl,TIB   ; hl is start of TIB
08E8   18 06                  JR   interpret4   
08EA                INTERPRET3:      
08EA   7E                     LD   a,(hl)   ; a = char in TIB
08EB   23                     INC   hl   ; inc pointer into TIB
08EC   0B                     DEC   bc   ; dec count of chars in TIB
08ED   CD 5C 07               CALL   nesting   ; update nesting value
08F0                INTERPRET4:      
08F0   79                     LD   a,c   ; is count zero?
08F1   B0                     OR   b   
08F2   20 F6                  JR   nz,interpret3   ; if not loop
08F4   C1                     POP   bc   ; restore offset into TIB
08F5                INTERPRET5:      
08F5   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
08F8   FE 20                  CP   $20   ; compare to space
08FA   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
08FC   FE 00                  CP   $0   ; is it end of string? NUL end of string
08FE                             ; ???? NEEDED?
08FE   28 27                  JR   z,interpret8   
0900   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0902   28 10                  JR   z,interpret7   ; if anything else its macro/control
0904                             ; macro
0904                             ;  ld (vTIBPtr),bc
0904                             ;  ld hl,ctrlCodes
0904                             ;  add a,l			            ; look up key of macros
0904                             ;  ld l,a
0904                             ;  ld e,(hl)
0904                             ;  ld a,e
0904                             ;  or a
0904                             ;  jr z,macro1
0904                             ;  ld d,msb(macros)
0904                             ;  push de
0904                             ;  call call		            ; monty exec_ operation and jump to it
0904                             ;  db DC1,0
0904                             ; macro1:
0904                             ;  ld bc,(vTIBPtr)
0904   18 DC                  JR   interpret2   
0906                INTERPRET6:      
0906   21 00 1A               LD   hl,TIB   
0909   09                     ADD   hl,bc   
090A   77                     LD   (hl),a   ; store the character in textbuf
090B   03                     INC   bc   
090C   CD 85 00               CALL   putchar   ; echo character to screen
090F   CD 5C 07               CALL   nesting   
0912   18 E1                  JR   interpret5   ; wait for next character
0914                INTERPRET7:      
0914   21 00 1A               LD   hl,TIB   
0917   09                     ADD   hl,bc   
0918   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
091A   23                     INC   hl   
091B   36 0A                  LD   (hl),"\n"   
091D   23                     INC   hl   
091E   03                     INC   bc   
091F   03                     INC   bc   
0920   CD 97 07               CALL   crlf   ; echo character to screen
0923   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0924   B7                     OR   a   
0925   20 CE                  JR   nz,interpret5   
0927                INTERPRET8:      
0927   ED 43 EA 19            LD   (vTIBPtr),bc   
092B   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
092E                             ; we pressed enter
092E   0B                     DEC   bc   
092F                NEXT:        
092F   03                     INC   bc   ; Increment the IP
0930   0A                     LD   a,(bc)   ; Get the next character and dispatch
0931   FE 20                  CP   " "   ; whitespace?
0933   28 FA                  JR   z,next   ; space? ignore
0935   38 0B                  JR   c,next1   
0937   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
0939   30 0E                  JR   nc,next2   
093B   6F                     LD   l,a   ; index into table
093C   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
093E   6E                     LD   l,(hl)   ; get low jump address
093F   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0941   E9                     JP   (hl)   ; Jump to routine
0942                NEXT1:       
0942   FE 00                  CP   NUL   ; end of input string?
0944   28 09                  JR   z,exit_   
0946   C3 D8 08               JP   interpret   ; no, other whitespace, macros?
0949                NEXT2:       
0949   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
094A   03                     INC   bc   
094B   0A                     LD   a,(bc)   
094C   6F                     LD   l,a   
094D   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
094E   E9                     JP   (hl)   
094F                EXIT_:       
094F   60 69                  LD   hl,bc   
0951   E9                     JP   (hl)   
0952                ERROR:       
0952   CD 9E 07               CALL   printStr   
0955   45 72 72 6F 72 00      .CSTR   "Error"   
095B   CD EC 06               CALL   prtdec   
095E   C3 D8 08               JP   interpret   
0961                             ; call define
0961                             ; .pstr "abs",0
0961                             ; dw abs1 \a
0961                             ; call define
0961                             ; .pstr "addr",0
0961                             ; dw addr @
0961                             ; call define
0961                             ; .pstr "bytes",0
0961                             ; dw bytes \b
0961                             ; call define
0961                             ; .pstr "call",0
0961                             ; dw call :
0961                             ; call define
0961                             ; .pstr "exec",0
0961                             ; dw exec
0961                             ; call define
0961                             ; .pstr "false",0
0961                             ; dw false1 \f
0961                             ; call define
0961                             ; .pstr "filter",0
0961                             ; dw filter \f ?
0961                             ; call define
0961                             ; .pstr "frac",0
0961                             ; dw frac %
0961                             ; call define
0961                             ; .pstr "func",0
0961                             ; dw func
0961                             ; call define
0961                             ; .pstr "hash",0
0961                             ; dw hash \h
0961                             ; call define
0961                             ; .pstr "input",0
0961                             ; dw input \in ?
0961                             ; call define
0961                             ; .pstr "if",0
0961                             ; dw if \if
0961                             ; call define
0961                             ; .pstr "ifte",0
0961                             ; dw ifte \ife
0961                             ; call define
0961                             ; .pstr "key",0
0961                             ; dw key \k
0961                             ; call define
0961                             ; .pstr "let",0
0961                             ; dw let =
0961                             ; call define
0961                             ; .pstr "loop",0
0961                             ; dw loop \rpt
0961                             ; call define
0961                             ; .pstr "map",0
0961                             ; dw map \m ?
0961                             ; call define
0961                             ; .pstr "nil",0
0961                             ; dw null1. \0 ?
0961                             ; call define
0961                             ; .pstr "output",0
0961                             ; dw output \out ?
0961                             ; call define
0961                             ; .pstr "scan",0
0961                             ; dw scan.  \fold ?
0961                             ; call define
0961                             ; .pstr "set",0
0961                             ; dw set. ?
0961                             ; call define
0961                             ; .pstr "shiftLeft",0
0961                             ; dw shiftLeft <<
0961                             ; call define
0961                             ; .pstr "shiftRight",0
0961                             ; dw shiftRight >>
0961                             ; call define
0961                             ; .pstr "sqrt",0
0961                             ; dw sqrt1 \sqt
0961                             ; call define
0961                             ; .pstr "switch",0
0961                             ; dw switch. \sw
0961                             ; call define
0961                             ; .pstr "true",0
0961                             ; dw true1.   \t
0961                             ; call define
0961                             ; .pstr "words",0
0961                             ; dw words.  \w
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                          ALIGN   $100   
1900                VARS:        
1900                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
19D0                RESTARTS:      
19D0                RST08:    DS   2   
19D2                RST10:    DS   2   
19D4                RST18:    DS   2   
19D6                RST20:    DS   2   
19D8                RST28:    DS   2   
19DA                RST30:    DS   2   ; 
19DC                BAUD:     DS   2   ; 
19DE                INTVEC:   DS   2   ; 
19E0                NMIVEC:   DS   2   ; 
19E2                GETCVEC:   DS   2   ; 
19E4                PUTCVEC:   DS   2   ; 
19E6                SYSVARS:      
19E6                VFRAC:    DS   2   ; initialised sys variables
19E8                VDATAWIDTH:   DS   2   ; 
19EA                VTIBPTR:   DS   2   ; 
19EC                VPOINTER:   DS   2   ; 
19EE                VLASTDEF:   DS   2   ; 
19F0                VHASHSTR:   DS   2   ; 
19F2                VNEXT:    DS   2   ; 
19F4                VHEAPPTR:   DS   2   ; 
19F6                VTEMP1:   DS   2   ; uninitialised sys variables
19F8                VTEMP2:   DS   2   ; 
19FA                TBPTR:    DS   2   ; reserved for tests
19FC                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test "() {2} \\f :", 2
4000                             ; test "1 5 (a) {2} \\f :", 2
4000                             ; test "1 5 (a) {$a} func call", 5
4000                             ; test "1 5 (a:b) {$a} func call ", 5
4000                             ; 
4000                          ;*Macro unroll:  test "{1}:", 1
4000   31 80 18               LD   SP,STACK   
4003   CD A4 08               CALL   init   
4006   CD A5 07               CALL   execStr   
4009   7B 31 7D 3A 00         .CSTR   "{1}:"   
400E                          ;*Macro unroll:  expect "{1}:",1
400E   E1                     POP   HL   
400F   E5                     PUSH   HL   
4010   11 01 00               LD   DE,1   
4013   B7                     OR   A   
4014   ED 52                  SBC   HL,DE   
4016   7D                     LD   A,L   
4017   B4                     OR   H   
4018   28 4F                  JR   Z,expectM_0_2251S43   
401A   CD 9E 07               CALL   printStr   
401D   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
4028   CD 9E 07               CALL   printStr   
402B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403A   21 01 00               LD   HL,1   
403D   CD EC 06               CALL   prtdec   
4040   CD 9E 07               CALL   printStr   
4043   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4050   E1                     POP   hl   
4051   E5                     PUSH   hl   
4052   CD EC 06               CALL   prtdec   
4055   E1                     POP   hl   
4056   CD 9E 07               CALL   printStr   
4059   20 28 23 00            .CSTR   " (#"   
405D   CD 34 07               CALL   prthex   
4060   CD 9E 07               CALL   printStr   
4063   29 0D 0A 00            .CSTR   ")\r\n"   
4067   76                     HALT      
4068   00                     .CSTR      
4069                EXPECTM_0_2251S43:      
4069   E1                     POP   HL   
406A                          ;*Macro unroll:  test "{{1}:}:", 1
406A   31 80 18               LD   SP,STACK   
406D   CD A4 08               CALL   init   
4070   CD A5 07               CALL   execStr   
4073   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
407B                          ;*Macro unroll:  expect "{{1}:}:",1
407B   E1                     POP   HL   
407C   E5                     PUSH   HL   
407D   11 01 00               LD   DE,1   
4080   B7                     OR   A   
4081   ED 52                  SBC   HL,DE   
4083   7D                     LD   A,L   
4084   B4                     OR   H   
4085   28 52                  JR   Z,expectM_0_2252S43   
4087   CD 9E 07               CALL   printStr   
408A   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
4098   CD 9E 07               CALL   printStr   
409B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40AA   21 01 00               LD   HL,1   
40AD   CD EC 06               CALL   prtdec   
40B0   CD 9E 07               CALL   printStr   
40B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40C0   E1                     POP   hl   
40C1   E5                     PUSH   hl   
40C2   CD EC 06               CALL   prtdec   
40C5   E1                     POP   hl   
40C6   CD 9E 07               CALL   printStr   
40C9   20 28 23 00            .CSTR   " (#"   
40CD   CD 34 07               CALL   prthex   
40D0   CD 9E 07               CALL   printStr   
40D3   29 0D 0A 00            .CSTR   ")\r\n"   
40D7   76                     HALT      
40D8   00                     .CSTR      
40D9                EXPECTM_0_2252S43:      
40D9   E1                     POP   HL   
40DA                          ;*Macro unroll:  test "{{{1}:}:}:", 1
40DA   31 80 18               LD   SP,STACK   
40DD   CD A4 08               CALL   init   
40E0   CD A5 07               CALL   execStr   
40E3   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
40EE                          ;*Macro unroll:  expect "{{{1}:}:}:",1
40EE   E1                     POP   HL   
40EF   E5                     PUSH   HL   
40F0   11 01 00               LD   DE,1   
40F3   B7                     OR   A   
40F4   ED 52                  SBC   HL,DE   
40F6   7D                     LD   A,L   
40F7   B4                     OR   H   
40F8   28 55                  JR   Z,expectM_0_2253S43   
40FA   CD 9E 07               CALL   printStr   
40FD   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
410E   CD 9E 07               CALL   printStr   
4111   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4120   21 01 00               LD   HL,1   
4123   CD EC 06               CALL   prtdec   
4126   CD 9E 07               CALL   printStr   
4129   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4136   E1                     POP   hl   
4137   E5                     PUSH   hl   
4138   CD EC 06               CALL   prtdec   
413B   E1                     POP   hl   
413C   CD 9E 07               CALL   printStr   
413F   20 28 23 00            .CSTR   " (#"   
4143   CD 34 07               CALL   prthex   
4146   CD 9E 07               CALL   printStr   
4149   29 0D 0A 00            .CSTR   ")\r\n"   
414D   76                     HALT      
414E   00                     .CSTR      
414F                EXPECTM_0_2253S43:      
414F   E1                     POP   HL   
4150                          ;*Macro unroll:  test "1", 1
4150   31 80 18               LD   SP,STACK   
4153   CD A4 08               CALL   init   
4156   CD A5 07               CALL   execStr   
4159   31 00                  .CSTR   "1"   
415B                          ;*Macro unroll:  expect "1",1
415B   E1                     POP   HL   
415C   E5                     PUSH   HL   
415D   11 01 00               LD   DE,1   
4160   B7                     OR   A   
4161   ED 52                  SBC   HL,DE   
4163   7D                     LD   A,L   
4164   B4                     OR   H   
4165   28 4C                  JR   Z,expectM_0_2254S43   
4167   CD 9E 07               CALL   printStr   
416A   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4172   CD 9E 07               CALL   printStr   
4175   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4184   21 01 00               LD   HL,1   
4187   CD EC 06               CALL   prtdec   
418A   CD 9E 07               CALL   printStr   
418D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
419A   E1                     POP   hl   
419B   E5                     PUSH   hl   
419C   CD EC 06               CALL   prtdec   
419F   E1                     POP   hl   
41A0   CD 9E 07               CALL   printStr   
41A3   20 28 23 00            .CSTR   " (#"   
41A7   CD 34 07               CALL   prthex   
41AA   CD 9E 07               CALL   printStr   
41AD   29 0D 0A 00            .CSTR   ")\r\n"   
41B1   76                     HALT      
41B2   00                     .CSTR      
41B3                EXPECTM_0_2254S43:      
41B3   E1                     POP   HL   
41B4                          ;*Macro unroll:  test "2", 2
41B4   31 80 18               LD   SP,STACK   
41B7   CD A4 08               CALL   init   
41BA   CD A5 07               CALL   execStr   
41BD   32 00                  .CSTR   "2"   
41BF                          ;*Macro unroll:  expect "2",2
41BF   E1                     POP   HL   
41C0   E5                     PUSH   HL   
41C1   11 02 00               LD   DE,2   
41C4   B7                     OR   A   
41C5   ED 52                  SBC   HL,DE   
41C7   7D                     LD   A,L   
41C8   B4                     OR   H   
41C9   28 4C                  JR   Z,expectM_0_2255S43   
41CB   CD 9E 07               CALL   printStr   
41CE   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
41D6   CD 9E 07               CALL   printStr   
41D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41E8   21 02 00               LD   HL,2   
41EB   CD EC 06               CALL   prtdec   
41EE   CD 9E 07               CALL   printStr   
41F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41FE   E1                     POP   hl   
41FF   E5                     PUSH   hl   
4200   CD EC 06               CALL   prtdec   
4203   E1                     POP   hl   
4204   CD 9E 07               CALL   printStr   
4207   20 28 23 00            .CSTR   " (#"   
420B   CD 34 07               CALL   prthex   
420E   CD 9E 07               CALL   printStr   
4211   29 0D 0A 00            .CSTR   ")\r\n"   
4215   76                     HALT      
4216   00                     .CSTR      
4217                EXPECTM_0_2255S43:      
4217   E1                     POP   HL   
4218                          ;*Macro unroll:  test "1", 1
4218   31 80 18               LD   SP,STACK   
421B   CD A4 08               CALL   init   
421E   CD A5 07               CALL   execStr   
4221   31 00                  .CSTR   "1"   
4223                          ;*Macro unroll:  expect "1",1
4223   E1                     POP   HL   
4224   E5                     PUSH   HL   
4225   11 01 00               LD   DE,1   
4228   B7                     OR   A   
4229   ED 52                  SBC   HL,DE   
422B   7D                     LD   A,L   
422C   B4                     OR   H   
422D   28 4C                  JR   Z,expectM_0_2256S43   
422F   CD 9E 07               CALL   printStr   
4232   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
423A   CD 9E 07               CALL   printStr   
423D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
424C   21 01 00               LD   HL,1   
424F   CD EC 06               CALL   prtdec   
4252   CD 9E 07               CALL   printStr   
4255   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4262   E1                     POP   hl   
4263   E5                     PUSH   hl   
4264   CD EC 06               CALL   prtdec   
4267   E1                     POP   hl   
4268   CD 9E 07               CALL   printStr   
426B   20 28 23 00            .CSTR   " (#"   
426F   CD 34 07               CALL   prthex   
4272   CD 9E 07               CALL   printStr   
4275   29 0D 0A 00            .CSTR   ")\r\n"   
4279   76                     HALT      
427A   00                     .CSTR      
427B                EXPECTM_0_2256S43:      
427B   E1                     POP   HL   
427C                          ;*Macro unroll:  test "0", 0
427C   31 80 18               LD   SP,STACK   
427F   CD A4 08               CALL   init   
4282   CD A5 07               CALL   execStr   
4285   30 00                  .CSTR   "0"   
4287                          ;*Macro unroll:  expect "0",0
4287   E1                     POP   HL   
4288   E5                     PUSH   HL   
4289   11 00 00               LD   DE,0   
428C   B7                     OR   A   
428D   ED 52                  SBC   HL,DE   
428F   7D                     LD   A,L   
4290   B4                     OR   H   
4291   28 4C                  JR   Z,expectM_0_2257S43   
4293   CD 9E 07               CALL   printStr   
4296   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
429E   CD 9E 07               CALL   printStr   
42A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42B0   21 00 00               LD   HL,0   
42B3   CD EC 06               CALL   prtdec   
42B6   CD 9E 07               CALL   printStr   
42B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42C6   E1                     POP   hl   
42C7   E5                     PUSH   hl   
42C8   CD EC 06               CALL   prtdec   
42CB   E1                     POP   hl   
42CC   CD 9E 07               CALL   printStr   
42CF   20 28 23 00            .CSTR   " (#"   
42D3   CD 34 07               CALL   prthex   
42D6   CD 9E 07               CALL   printStr   
42D9   29 0D 0A 00            .CSTR   ")\r\n"   
42DD   76                     HALT      
42DE   00                     .CSTR      
42DF                EXPECTM_0_2257S43:      
42DF   E1                     POP   HL   
42E0                          ;*Macro unroll:  test "10", 10
42E0   31 80 18               LD   SP,STACK   
42E3   CD A4 08               CALL   init   
42E6   CD A5 07               CALL   execStr   
42E9   31 30 00               .CSTR   "10"   
42EC                          ;*Macro unroll:  expect "10",10
42EC   E1                     POP   HL   
42ED   E5                     PUSH   HL   
42EE   11 0A 00               LD   DE,10   
42F1   B7                     OR   A   
42F2   ED 52                  SBC   HL,DE   
42F4   7D                     LD   A,L   
42F5   B4                     OR   H   
42F6   28 4D                  JR   Z,expectM_0_2258S43   
42F8   CD 9E 07               CALL   printStr   
42FB   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
4304   CD 9E 07               CALL   printStr   
4307   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4316   21 0A 00               LD   HL,10   
4319   CD EC 06               CALL   prtdec   
431C   CD 9E 07               CALL   printStr   
431F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
432C   E1                     POP   hl   
432D   E5                     PUSH   hl   
432E   CD EC 06               CALL   prtdec   
4331   E1                     POP   hl   
4332   CD 9E 07               CALL   printStr   
4335   20 28 23 00            .CSTR   " (#"   
4339   CD 34 07               CALL   prthex   
433C   CD 9E 07               CALL   printStr   
433F   29 0D 0A 00            .CSTR   ")\r\n"   
4343   76                     HALT      
4344   00                     .CSTR      
4345                EXPECTM_0_2258S43:      
4345   E1                     POP   HL   
4346                          ;*Macro unroll:  test "123", 123
4346   31 80 18               LD   SP,STACK   
4349   CD A4 08               CALL   init   
434C   CD A5 07               CALL   execStr   
434F   31 32 33 00            .CSTR   "123"   
4353                          ;*Macro unroll:  expect "123",123
4353   E1                     POP   HL   
4354   E5                     PUSH   HL   
4355   11 7B 00               LD   DE,123   
4358   B7                     OR   A   
4359   ED 52                  SBC   HL,DE   
435B   7D                     LD   A,L   
435C   B4                     OR   H   
435D   28 4E                  JR   Z,expectM_0_2259S43   
435F   CD 9E 07               CALL   printStr   
4362   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
436C   CD 9E 07               CALL   printStr   
436F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
437E   21 7B 00               LD   HL,123   
4381   CD EC 06               CALL   prtdec   
4384   CD 9E 07               CALL   printStr   
4387   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4394   E1                     POP   hl   
4395   E5                     PUSH   hl   
4396   CD EC 06               CALL   prtdec   
4399   E1                     POP   hl   
439A   CD 9E 07               CALL   printStr   
439D   20 28 23 00            .CSTR   " (#"   
43A1   CD 34 07               CALL   prthex   
43A4   CD 9E 07               CALL   printStr   
43A7   29 0D 0A 00            .CSTR   ")\r\n"   
43AB   76                     HALT      
43AC   00                     .CSTR      
43AD                EXPECTM_0_2259S43:      
43AD   E1                     POP   HL   
43AE                          ;*Macro unroll:  test "-1",-1
43AE   31 80 18               LD   SP,STACK   
43B1   CD A4 08               CALL   init   
43B4   CD A5 07               CALL   execStr   
43B7   2D 31 00               .CSTR   "-1"   
43BA                          ;*Macro unroll:  expect "-1",-1
43BA   E1                     POP   HL   
43BB   E5                     PUSH   HL   
43BC   11 FF FF               LD   DE,-1   
43BF   B7                     OR   A   
43C0   ED 52                  SBC   HL,DE   
43C2   7D                     LD   A,L   
43C3   B4                     OR   H   
43C4   28 4D                  JR   Z,expectM_0_2260S43   
43C6   CD 9E 07               CALL   printStr   
43C9   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
43D2   CD 9E 07               CALL   printStr   
43D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43E4   21 FF FF               LD   HL,-1   
43E7   CD EC 06               CALL   prtdec   
43EA   CD 9E 07               CALL   printStr   
43ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43FA   E1                     POP   hl   
43FB   E5                     PUSH   hl   
43FC   CD EC 06               CALL   prtdec   
43FF   E1                     POP   hl   
4400   CD 9E 07               CALL   printStr   
4403   20 28 23 00            .CSTR   " (#"   
4407   CD 34 07               CALL   prthex   
440A   CD 9E 07               CALL   printStr   
440D   29 0D 0A 00            .CSTR   ")\r\n"   
4411   76                     HALT      
4412   00                     .CSTR      
4413                EXPECTM_0_2260S43:      
4413   E1                     POP   HL   
4414                          ;*Macro unroll:  test "''", 0
4414   31 80 18               LD   SP,STACK   
4417   CD A4 08               CALL   init   
441A   CD A5 07               CALL   execStr   
441D   27 27 00               .CSTR   "''"   
4420                          ;*Macro unroll:  expect "''",0
4420   E1                     POP   HL   
4421   E5                     PUSH   HL   
4422   11 00 00               LD   DE,0   
4425   B7                     OR   A   
4426   ED 52                  SBC   HL,DE   
4428   7D                     LD   A,L   
4429   B4                     OR   H   
442A   28 4D                  JR   Z,expectM_0_2261S43   
442C   CD 9E 07               CALL   printStr   
442F   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
4438   CD 9E 07               CALL   printStr   
443B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
444A   21 00 00               LD   HL,0   
444D   CD EC 06               CALL   prtdec   
4450   CD 9E 07               CALL   printStr   
4453   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4460   E1                     POP   hl   
4461   E5                     PUSH   hl   
4462   CD EC 06               CALL   prtdec   
4465   E1                     POP   hl   
4466   CD 9E 07               CALL   printStr   
4469   20 28 23 00            .CSTR   " (#"   
446D   CD 34 07               CALL   prthex   
4470   CD 9E 07               CALL   printStr   
4473   29 0D 0A 00            .CSTR   ")\r\n"   
4477   76                     HALT      
4478   00                     .CSTR      
4479                EXPECTM_0_2261S43:      
4479   E1                     POP   HL   
447A                          ;*Macro unroll:  test "'a'", $61
447A   31 80 18               LD   SP,STACK   
447D   CD A4 08               CALL   init   
4480   CD A5 07               CALL   execStr   
4483   27 61 27 00            .CSTR   "'a'"   
4487                          ;*Macro unroll:  expect "'a'",$61
4487   E1                     POP   HL   
4488   E5                     PUSH   HL   
4489   11 61 00               LD   DE,$61   
448C   B7                     OR   A   
448D   ED 52                  SBC   HL,DE   
448F   7D                     LD   A,L   
4490   B4                     OR   H   
4491   28 4E                  JR   Z,expectM_0_2262S43   
4493   CD 9E 07               CALL   printStr   
4496   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
44A0   CD 9E 07               CALL   printStr   
44A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44B2   21 61 00               LD   HL,$61   
44B5   CD EC 06               CALL   prtdec   
44B8   CD 9E 07               CALL   printStr   
44BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44C8   E1                     POP   hl   
44C9   E5                     PUSH   hl   
44CA   CD EC 06               CALL   prtdec   
44CD   E1                     POP   hl   
44CE   CD 9E 07               CALL   printStr   
44D1   20 28 23 00            .CSTR   " (#"   
44D5   CD 34 07               CALL   prthex   
44D8   CD 9E 07               CALL   printStr   
44DB   29 0D 0A 00            .CSTR   ")\r\n"   
44DF   76                     HALT      
44E0   00                     .CSTR      
44E1                EXPECTM_0_2262S43:      
44E1   E1                     POP   HL   
44E2                          ;*Macro unroll:  test "'\\''", $27
44E2   31 80 18               LD   SP,STACK   
44E5   CD A4 08               CALL   init   
44E8   CD A5 07               CALL   execStr   
44EB   27 5C 27 27 00         .CSTR   "'\\''"   
44F0                          ;*Macro unroll:  expect "'\\''",$27
44F0   E1                     POP   HL   
44F1   E5                     PUSH   HL   
44F2   11 27 00               LD   DE,$27   
44F5   B7                     OR   A   
44F6   ED 52                  SBC   HL,DE   
44F8   7D                     LD   A,L   
44F9   B4                     OR   H   
44FA   28 4F                  JR   Z,expectM_0_2263S43   
44FC   CD 9E 07               CALL   printStr   
44FF   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
450A   CD 9E 07               CALL   printStr   
450D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
451C   21 27 00               LD   HL,$27   
451F   CD EC 06               CALL   prtdec   
4522   CD 9E 07               CALL   printStr   
4525   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4532   E1                     POP   hl   
4533   E5                     PUSH   hl   
4534   CD EC 06               CALL   prtdec   
4537   E1                     POP   hl   
4538   CD 9E 07               CALL   printStr   
453B   20 28 23 00            .CSTR   " (#"   
453F   CD 34 07               CALL   prthex   
4542   CD 9E 07               CALL   printStr   
4545   29 0D 0A 00            .CSTR   ")\r\n"   
4549   76                     HALT      
454A   00                     .CSTR      
454B                EXPECTM_0_2263S43:      
454B   E1                     POP   HL   
454C                          ;*Macro unroll:  test "#10", $10
454C   31 80 18               LD   SP,STACK   
454F   CD A4 08               CALL   init   
4552   CD A5 07               CALL   execStr   
4555   23 31 30 00            .CSTR   "#10"   
4559                          ;*Macro unroll:  expect "#10",$10
4559   E1                     POP   HL   
455A   E5                     PUSH   HL   
455B   11 10 00               LD   DE,$10   
455E   B7                     OR   A   
455F   ED 52                  SBC   HL,DE   
4561   7D                     LD   A,L   
4562   B4                     OR   H   
4563   28 4E                  JR   Z,expectM_0_2264S43   
4565   CD 9E 07               CALL   printStr   
4568   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
4572   CD 9E 07               CALL   printStr   
4575   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4584   21 10 00               LD   HL,$10   
4587   CD EC 06               CALL   prtdec   
458A   CD 9E 07               CALL   printStr   
458D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
459A   E1                     POP   hl   
459B   E5                     PUSH   hl   
459C   CD EC 06               CALL   prtdec   
459F   E1                     POP   hl   
45A0   CD 9E 07               CALL   printStr   
45A3   20 28 23 00            .CSTR   " (#"   
45A7   CD 34 07               CALL   prthex   
45AA   CD 9E 07               CALL   printStr   
45AD   29 0D 0A 00            .CSTR   ")\r\n"   
45B1   76                     HALT      
45B2   00                     .CSTR      
45B3                EXPECTM_0_2264S43:      
45B3   E1                     POP   HL   
45B4                          ;*Macro unroll:  test "#FF", $FF
45B4   31 80 18               LD   SP,STACK   
45B7   CD A4 08               CALL   init   
45BA   CD A5 07               CALL   execStr   
45BD   23 46 46 00            .CSTR   "#FF"   
45C1                          ;*Macro unroll:  expect "#FF",$FF
45C1   E1                     POP   HL   
45C2   E5                     PUSH   HL   
45C3   11 FF 00               LD   DE,$FF   
45C6   B7                     OR   A   
45C7   ED 52                  SBC   HL,DE   
45C9   7D                     LD   A,L   
45CA   B4                     OR   H   
45CB   28 4E                  JR   Z,expectM_0_2265S43   
45CD   CD 9E 07               CALL   printStr   
45D0   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
45DA   CD 9E 07               CALL   printStr   
45DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45EC   21 FF 00               LD   HL,$FF   
45EF   CD EC 06               CALL   prtdec   
45F2   CD 9E 07               CALL   printStr   
45F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4602   E1                     POP   hl   
4603   E5                     PUSH   hl   
4604   CD EC 06               CALL   prtdec   
4607   E1                     POP   hl   
4608   CD 9E 07               CALL   printStr   
460B   20 28 23 00            .CSTR   " (#"   
460F   CD 34 07               CALL   prthex   
4612   CD 9E 07               CALL   printStr   
4615   29 0D 0A 00            .CSTR   ")\r\n"   
4619   76                     HALT      
461A   00                     .CSTR      
461B                EXPECTM_0_2265S43:      
461B   E1                     POP   HL   
461C                          ;*Macro unroll:  test "-1 2 +",1
461C   31 80 18               LD   SP,STACK   
461F   CD A4 08               CALL   init   
4622   CD A5 07               CALL   execStr   
4625   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
462C                          ;*Macro unroll:  expect "-1 2 +",1
462C   E1                     POP   HL   
462D   E5                     PUSH   HL   
462E   11 01 00               LD   DE,1   
4631   B7                     OR   A   
4632   ED 52                  SBC   HL,DE   
4634   7D                     LD   A,L   
4635   B4                     OR   H   
4636   28 51                  JR   Z,expectM_0_2266S43   
4638   CD 9E 07               CALL   printStr   
463B   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
4648   CD 9E 07               CALL   printStr   
464B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
465A   21 01 00               LD   HL,1   
465D   CD EC 06               CALL   prtdec   
4660   CD 9E 07               CALL   printStr   
4663   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4670   E1                     POP   hl   
4671   E5                     PUSH   hl   
4672   CD EC 06               CALL   prtdec   
4675   E1                     POP   hl   
4676   CD 9E 07               CALL   printStr   
4679   20 28 23 00            .CSTR   " (#"   
467D   CD 34 07               CALL   prthex   
4680   CD 9E 07               CALL   printStr   
4683   29 0D 0A 00            .CSTR   ")\r\n"   
4687   76                     HALT      
4688   00                     .CSTR      
4689                EXPECTM_0_2266S43:      
4689   E1                     POP   HL   
468A                          ;*Macro unroll:  test "-1 1 +",0
468A   31 80 18               LD   SP,STACK   
468D   CD A4 08               CALL   init   
4690   CD A5 07               CALL   execStr   
4693   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
469A                          ;*Macro unroll:  expect "-1 1 +",0
469A   E1                     POP   HL   
469B   E5                     PUSH   HL   
469C   11 00 00               LD   DE,0   
469F   B7                     OR   A   
46A0   ED 52                  SBC   HL,DE   
46A2   7D                     LD   A,L   
46A3   B4                     OR   H   
46A4   28 51                  JR   Z,expectM_0_2267S43   
46A6   CD 9E 07               CALL   printStr   
46A9   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
46B6   CD 9E 07               CALL   printStr   
46B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46C8   21 00 00               LD   HL,0   
46CB   CD EC 06               CALL   prtdec   
46CE   CD 9E 07               CALL   printStr   
46D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46DE   E1                     POP   hl   
46DF   E5                     PUSH   hl   
46E0   CD EC 06               CALL   prtdec   
46E3   E1                     POP   hl   
46E4   CD 9E 07               CALL   printStr   
46E7   20 28 23 00            .CSTR   " (#"   
46EB   CD 34 07               CALL   prthex   
46EE   CD 9E 07               CALL   printStr   
46F1   29 0D 0A 00            .CSTR   ")\r\n"   
46F5   76                     HALT      
46F6   00                     .CSTR      
46F7                EXPECTM_0_2267S43:      
46F7   E1                     POP   HL   
46F8                          ;*Macro unroll:  test "1 2 +", 3
46F8   31 80 18               LD   SP,STACK   
46FB   CD A4 08               CALL   init   
46FE   CD A5 07               CALL   execStr   
4701   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4707                          ;*Macro unroll:  expect "1 2 +",3
4707   E1                     POP   HL   
4708   E5                     PUSH   HL   
4709   11 03 00               LD   DE,3   
470C   B7                     OR   A   
470D   ED 52                  SBC   HL,DE   
470F   7D                     LD   A,L   
4710   B4                     OR   H   
4711   28 50                  JR   Z,expectM_0_2268S43   
4713   CD 9E 07               CALL   printStr   
4716   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
4722   CD 9E 07               CALL   printStr   
4725   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4734   21 03 00               LD   HL,3   
4737   CD EC 06               CALL   prtdec   
473A   CD 9E 07               CALL   printStr   
473D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
474A   E1                     POP   hl   
474B   E5                     PUSH   hl   
474C   CD EC 06               CALL   prtdec   
474F   E1                     POP   hl   
4750   CD 9E 07               CALL   printStr   
4753   20 28 23 00            .CSTR   " (#"   
4757   CD 34 07               CALL   prthex   
475A   CD 9E 07               CALL   printStr   
475D   29 0D 0A 00            .CSTR   ")\r\n"   
4761   76                     HALT      
4762   00                     .CSTR      
4763                EXPECTM_0_2268S43:      
4763   E1                     POP   HL   
4764                          ;*Macro unroll:  test "4 1 2 +", 3
4764   31 80 18               LD   SP,STACK   
4767   CD A4 08               CALL   init   
476A   CD A5 07               CALL   execStr   
476D   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
4775                          ;*Macro unroll:  expect "4 1 2 +",3
4775   E1                     POP   HL   
4776   E5                     PUSH   HL   
4777   11 03 00               LD   DE,3   
477A   B7                     OR   A   
477B   ED 52                  SBC   HL,DE   
477D   7D                     LD   A,L   
477E   B4                     OR   H   
477F   28 52                  JR   Z,expectM_0_2269S43   
4781   CD 9E 07               CALL   printStr   
4784   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
4792   CD 9E 07               CALL   printStr   
4795   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A4   21 03 00               LD   HL,3   
47A7   CD EC 06               CALL   prtdec   
47AA   CD 9E 07               CALL   printStr   
47AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47BA   E1                     POP   hl   
47BB   E5                     PUSH   hl   
47BC   CD EC 06               CALL   prtdec   
47BF   E1                     POP   hl   
47C0   CD 9E 07               CALL   printStr   
47C3   20 28 23 00            .CSTR   " (#"   
47C7   CD 34 07               CALL   prthex   
47CA   CD 9E 07               CALL   printStr   
47CD   29 0D 0A 00            .CSTR   ")\r\n"   
47D1   76                     HALT      
47D2   00                     .CSTR      
47D3                EXPECTM_0_2269S43:      
47D3   E1                     POP   HL   
47D4                          ;*Macro unroll:  test "1 2 +", 3
47D4   31 80 18               LD   SP,STACK   
47D7   CD A4 08               CALL   init   
47DA   CD A5 07               CALL   execStr   
47DD   31 20 32 20 2B 00      .CSTR   "1 2 +"   
47E3                          ;*Macro unroll:  expect "1 2 +",3
47E3   E1                     POP   HL   
47E4   E5                     PUSH   HL   
47E5   11 03 00               LD   DE,3   
47E8   B7                     OR   A   
47E9   ED 52                  SBC   HL,DE   
47EB   7D                     LD   A,L   
47EC   B4                     OR   H   
47ED   28 50                  JR   Z,expectM_0_2270S43   
47EF   CD 9E 07               CALL   printStr   
47F2   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
47FE   CD 9E 07               CALL   printStr   
4801   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4810   21 03 00               LD   HL,3   
4813   CD EC 06               CALL   prtdec   
4816   CD 9E 07               CALL   printStr   
4819   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4826   E1                     POP   hl   
4827   E5                     PUSH   hl   
4828   CD EC 06               CALL   prtdec   
482B   E1                     POP   hl   
482C   CD 9E 07               CALL   printStr   
482F   20 28 23 00            .CSTR   " (#"   
4833   CD 34 07               CALL   prthex   
4836   CD 9E 07               CALL   printStr   
4839   29 0D 0A 00            .CSTR   ")\r\n"   
483D   76                     HALT      
483E   00                     .CSTR      
483F                EXPECTM_0_2270S43:      
483F   E1                     POP   HL   
4840                          ;*Macro unroll:  test "123 456 +", 123+456
4840   31 80 18               LD   SP,STACK   
4843   CD A4 08               CALL   init   
4846   CD A5 07               CALL   execStr   
4849   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
4853                          ;*Macro unroll:  expect "123 456 +",123+456
4853   E1                     POP   HL   
4854   E5                     PUSH   HL   
4855   11 43 02               LD   DE,123+456   
4858   B7                     OR   A   
4859   ED 52                  SBC   HL,DE   
485B   7D                     LD   A,L   
485C   B4                     OR   H   
485D   28 54                  JR   Z,expectM_0_2271S43   
485F   CD 9E 07               CALL   printStr   
4862   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
4872   CD 9E 07               CALL   printStr   
4875   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4884   21 43 02               LD   HL,123+456   
4887   CD EC 06               CALL   prtdec   
488A   CD 9E 07               CALL   printStr   
488D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
489A   E1                     POP   hl   
489B   E5                     PUSH   hl   
489C   CD EC 06               CALL   prtdec   
489F   E1                     POP   hl   
48A0   CD 9E 07               CALL   printStr   
48A3   20 28 23 00            .CSTR   " (#"   
48A7   CD 34 07               CALL   prthex   
48AA   CD 9E 07               CALL   printStr   
48AD   29 0D 0A 00            .CSTR   ")\r\n"   
48B1   76                     HALT      
48B2   00                     .CSTR      
48B3                EXPECTM_0_2271S43:      
48B3   E1                     POP   HL   
48B4                          ;*Macro unroll:  test "64 128 +", 64+128
48B4   31 80 18               LD   SP,STACK   
48B7   CD A4 08               CALL   init   
48BA   CD A5 07               CALL   execStr   
48BD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
48C6                          ;*Macro unroll:  expect "64 128 +",64+128
48C6   E1                     POP   HL   
48C7   E5                     PUSH   HL   
48C8   11 C0 00               LD   DE,64+128   
48CB   B7                     OR   A   
48CC   ED 52                  SBC   HL,DE   
48CE   7D                     LD   A,L   
48CF   B4                     OR   H   
48D0   28 53                  JR   Z,expectM_0_2272S43   
48D2   CD 9E 07               CALL   printStr   
48D5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
48E4   CD 9E 07               CALL   printStr   
48E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48F6   21 C0 00               LD   HL,64+128   
48F9   CD EC 06               CALL   prtdec   
48FC   CD 9E 07               CALL   printStr   
48FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
490C   E1                     POP   hl   
490D   E5                     PUSH   hl   
490E   CD EC 06               CALL   prtdec   
4911   E1                     POP   hl   
4912   CD 9E 07               CALL   printStr   
4915   20 28 23 00            .CSTR   " (#"   
4919   CD 34 07               CALL   prthex   
491C   CD 9E 07               CALL   printStr   
491F   29 0D 0A 00            .CSTR   ")\r\n"   
4923   76                     HALT      
4924   00                     .CSTR      
4925                EXPECTM_0_2272S43:      
4925   E1                     POP   HL   
4926                          ;*Macro unroll:  test "-1 -1 -",0
4926   31 80 18               LD   SP,STACK   
4929   CD A4 08               CALL   init   
492C   CD A5 07               CALL   execStr   
492F   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
4937                          ;*Macro unroll:  expect "-1 -1 -",0
4937   E1                     POP   HL   
4938   E5                     PUSH   HL   
4939   11 00 00               LD   DE,0   
493C   B7                     OR   A   
493D   ED 52                  SBC   HL,DE   
493F   7D                     LD   A,L   
4940   B4                     OR   H   
4941   28 52                  JR   Z,expectM_0_2273S43   
4943   CD 9E 07               CALL   printStr   
4946   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
4954   CD 9E 07               CALL   printStr   
4957   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4966   21 00 00               LD   HL,0   
4969   CD EC 06               CALL   prtdec   
496C   CD 9E 07               CALL   printStr   
496F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
497C   E1                     POP   hl   
497D   E5                     PUSH   hl   
497E   CD EC 06               CALL   prtdec   
4981   E1                     POP   hl   
4982   CD 9E 07               CALL   printStr   
4985   20 28 23 00            .CSTR   " (#"   
4989   CD 34 07               CALL   prthex   
498C   CD 9E 07               CALL   printStr   
498F   29 0D 0A 00            .CSTR   ")\r\n"   
4993   76                     HALT      
4994   00                     .CSTR      
4995                EXPECTM_0_2273S43:      
4995   E1                     POP   HL   
4996                          ;*Macro unroll:  test "5 3 -", 2
4996   31 80 18               LD   SP,STACK   
4999   CD A4 08               CALL   init   
499C   CD A5 07               CALL   execStr   
499F   35 20 33 20 2D 00      .CSTR   "5 3 -"   
49A5                          ;*Macro unroll:  expect "5 3 -",2
49A5   E1                     POP   HL   
49A6   E5                     PUSH   HL   
49A7   11 02 00               LD   DE,2   
49AA   B7                     OR   A   
49AB   ED 52                  SBC   HL,DE   
49AD   7D                     LD   A,L   
49AE   B4                     OR   H   
49AF   28 50                  JR   Z,expectM_0_2274S43   
49B1   CD 9E 07               CALL   printStr   
49B4   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
49C0   CD 9E 07               CALL   printStr   
49C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49D2   21 02 00               LD   HL,2   
49D5   CD EC 06               CALL   prtdec   
49D8   CD 9E 07               CALL   printStr   
49DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49E8   E1                     POP   hl   
49E9   E5                     PUSH   hl   
49EA   CD EC 06               CALL   prtdec   
49ED   E1                     POP   hl   
49EE   CD 9E 07               CALL   printStr   
49F1   20 28 23 00            .CSTR   " (#"   
49F5   CD 34 07               CALL   prthex   
49F8   CD 9E 07               CALL   printStr   
49FB   29 0D 0A 00            .CSTR   ")\r\n"   
49FF   76                     HALT      
4A00   00                     .CSTR      
4A01                EXPECTM_0_2274S43:      
4A01   E1                     POP   HL   
4A02                          ;*Macro unroll:  test "3 5 &", 1
4A02   31 80 18               LD   SP,STACK   
4A05   CD A4 08               CALL   init   
4A08   CD A5 07               CALL   execStr   
4A0B   33 20 35 20 26 00      .CSTR   "3 5 &"   
4A11                          ;*Macro unroll:  expect "3 5 &",1
4A11   E1                     POP   HL   
4A12   E5                     PUSH   HL   
4A13   11 01 00               LD   DE,1   
4A16   B7                     OR   A   
4A17   ED 52                  SBC   HL,DE   
4A19   7D                     LD   A,L   
4A1A   B4                     OR   H   
4A1B   28 50                  JR   Z,expectM_0_2275S43   
4A1D   CD 9E 07               CALL   printStr   
4A20   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
4A2C   CD 9E 07               CALL   printStr   
4A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A3E   21 01 00               LD   HL,1   
4A41   CD EC 06               CALL   prtdec   
4A44   CD 9E 07               CALL   printStr   
4A47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A54   E1                     POP   hl   
4A55   E5                     PUSH   hl   
4A56   CD EC 06               CALL   prtdec   
4A59   E1                     POP   hl   
4A5A   CD 9E 07               CALL   printStr   
4A5D   20 28 23 00            .CSTR   " (#"   
4A61   CD 34 07               CALL   prthex   
4A64   CD 9E 07               CALL   printStr   
4A67   29 0D 0A 00            .CSTR   ")\r\n"   
4A6B   76                     HALT      
4A6C   00                     .CSTR      
4A6D                EXPECTM_0_2275S43:      
4A6D   E1                     POP   HL   
4A6E                          ;*Macro unroll:  test "3 5 |", 7
4A6E   31 80 18               LD   SP,STACK   
4A71   CD A4 08               CALL   init   
4A74   CD A5 07               CALL   execStr   
4A77   33 20 35 20 7C 00      .CSTR   "3 5 |"   
4A7D                          ;*Macro unroll:  expect "3 5 |",7
4A7D   E1                     POP   HL   
4A7E   E5                     PUSH   HL   
4A7F   11 07 00               LD   DE,7   
4A82   B7                     OR   A   
4A83   ED 52                  SBC   HL,DE   
4A85   7D                     LD   A,L   
4A86   B4                     OR   H   
4A87   28 50                  JR   Z,expectM_0_2276S43   
4A89   CD 9E 07               CALL   printStr   
4A8C   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4A98   CD 9E 07               CALL   printStr   
4A9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AAA   21 07 00               LD   HL,7   
4AAD   CD EC 06               CALL   prtdec   
4AB0   CD 9E 07               CALL   printStr   
4AB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AC0   E1                     POP   hl   
4AC1   E5                     PUSH   hl   
4AC2   CD EC 06               CALL   prtdec   
4AC5   E1                     POP   hl   
4AC6   CD 9E 07               CALL   printStr   
4AC9   20 28 23 00            .CSTR   " (#"   
4ACD   CD 34 07               CALL   prthex   
4AD0   CD 9E 07               CALL   printStr   
4AD3   29 0D 0A 00            .CSTR   ")\r\n"   
4AD7   76                     HALT      
4AD8   00                     .CSTR      
4AD9                EXPECTM_0_2276S43:      
4AD9   E1                     POP   HL   
4ADA                          ;*Macro unroll:  test "2 3 *", 6
4ADA   31 80 18               LD   SP,STACK   
4ADD   CD A4 08               CALL   init   
4AE0   CD A5 07               CALL   execStr   
4AE3   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4AE9                          ;*Macro unroll:  expect "2 3 *",6
4AE9   E1                     POP   HL   
4AEA   E5                     PUSH   HL   
4AEB   11 06 00               LD   DE,6   
4AEE   B7                     OR   A   
4AEF   ED 52                  SBC   HL,DE   
4AF1   7D                     LD   A,L   
4AF2   B4                     OR   H   
4AF3   28 50                  JR   Z,expectM_0_2277S43   
4AF5   CD 9E 07               CALL   printStr   
4AF8   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
4B04   CD 9E 07               CALL   printStr   
4B07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B16   21 06 00               LD   HL,6   
4B19   CD EC 06               CALL   prtdec   
4B1C   CD 9E 07               CALL   printStr   
4B1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B2C   E1                     POP   hl   
4B2D   E5                     PUSH   hl   
4B2E   CD EC 06               CALL   prtdec   
4B31   E1                     POP   hl   
4B32   CD 9E 07               CALL   printStr   
4B35   20 28 23 00            .CSTR   " (#"   
4B39   CD 34 07               CALL   prthex   
4B3C   CD 9E 07               CALL   printStr   
4B3F   29 0D 0A 00            .CSTR   ")\r\n"   
4B43   76                     HALT      
4B44   00                     .CSTR      
4B45                EXPECTM_0_2277S43:      
4B45   E1                     POP   HL   
4B46                          ;*Macro unroll:  test "1 2 3 + *", 5
4B46   31 80 18               LD   SP,STACK   
4B49   CD A4 08               CALL   init   
4B4C   CD A5 07               CALL   execStr   
4B4F   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4B59                          ;*Macro unroll:  expect "1 2 3 + *",5
4B59   E1                     POP   HL   
4B5A   E5                     PUSH   HL   
4B5B   11 05 00               LD   DE,5   
4B5E   B7                     OR   A   
4B5F   ED 52                  SBC   HL,DE   
4B61   7D                     LD   A,L   
4B62   B4                     OR   H   
4B63   28 54                  JR   Z,expectM_0_2278S43   
4B65   CD 9E 07               CALL   printStr   
4B68   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4B78   CD 9E 07               CALL   printStr   
4B7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B8A   21 05 00               LD   HL,5   
4B8D   CD EC 06               CALL   prtdec   
4B90   CD 9E 07               CALL   printStr   
4B93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BA0   E1                     POP   hl   
4BA1   E5                     PUSH   hl   
4BA2   CD EC 06               CALL   prtdec   
4BA5   E1                     POP   hl   
4BA6   CD 9E 07               CALL   printStr   
4BA9   20 28 23 00            .CSTR   " (#"   
4BAD   CD 34 07               CALL   prthex   
4BB0   CD 9E 07               CALL   printStr   
4BB3   29 0D 0A 00            .CSTR   ")\r\n"   
4BB7   76                     HALT      
4BB8   00                     .CSTR      
4BB9                EXPECTM_0_2278S43:      
4BB9   E1                     POP   HL   
4BBA                          ;*Macro unroll:  test "7 3 /", 2
4BBA   31 80 18               LD   SP,STACK   
4BBD   CD A4 08               CALL   init   
4BC0   CD A5 07               CALL   execStr   
4BC3   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4BC9                          ;*Macro unroll:  expect "7 3 /",2
4BC9   E1                     POP   HL   
4BCA   E5                     PUSH   HL   
4BCB   11 02 00               LD   DE,2   
4BCE   B7                     OR   A   
4BCF   ED 52                  SBC   HL,DE   
4BD1   7D                     LD   A,L   
4BD2   B4                     OR   H   
4BD3   28 50                  JR   Z,expectM_0_2279S43   
4BD5   CD 9E 07               CALL   printStr   
4BD8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4BE4   CD 9E 07               CALL   printStr   
4BE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BF6   21 02 00               LD   HL,2   
4BF9   CD EC 06               CALL   prtdec   
4BFC   CD 9E 07               CALL   printStr   
4BFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C0C   E1                     POP   hl   
4C0D   E5                     PUSH   hl   
4C0E   CD EC 06               CALL   prtdec   
4C11   E1                     POP   hl   
4C12   CD 9E 07               CALL   printStr   
4C15   20 28 23 00            .CSTR   " (#"   
4C19   CD 34 07               CALL   prthex   
4C1C   CD 9E 07               CALL   printStr   
4C1F   29 0D 0A 00            .CSTR   ")\r\n"   
4C23   76                     HALT      
4C24   00                     .CSTR      
4C25                EXPECTM_0_2279S43:      
4C25   E1                     POP   HL   
4C26                          ;*Macro unroll:  test "2 3 ==", FALSE
4C26   31 80 18               LD   SP,STACK   
4C29   CD A4 08               CALL   init   
4C2C   CD A5 07               CALL   execStr   
4C2F   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
4C36                          ;*Macro unroll:  expect "2 3 ==",FALSE
4C36   E1                     POP   HL   
4C37   E5                     PUSH   HL   
4C38   11 00 00               LD   DE,FALSE   
4C3B   B7                     OR   A   
4C3C   ED 52                  SBC   HL,DE   
4C3E   7D                     LD   A,L   
4C3F   B4                     OR   H   
4C40   28 51                  JR   Z,expectM_0_2280S43   
4C42   CD 9E 07               CALL   printStr   
4C45   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
4C52   CD 9E 07               CALL   printStr   
4C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C64   21 00 00               LD   HL,FALSE   
4C67   CD EC 06               CALL   prtdec   
4C6A   CD 9E 07               CALL   printStr   
4C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C7A   E1                     POP   hl   
4C7B   E5                     PUSH   hl   
4C7C   CD EC 06               CALL   prtdec   
4C7F   E1                     POP   hl   
4C80   CD 9E 07               CALL   printStr   
4C83   20 28 23 00            .CSTR   " (#"   
4C87   CD 34 07               CALL   prthex   
4C8A   CD 9E 07               CALL   printStr   
4C8D   29 0D 0A 00            .CSTR   ")\r\n"   
4C91   76                     HALT      
4C92   00                     .CSTR      
4C93                EXPECTM_0_2280S43:      
4C93   E1                     POP   HL   
4C94                          ;*Macro unroll:  test "3 3 ==", TRUE
4C94   31 80 18               LD   SP,STACK   
4C97   CD A4 08               CALL   init   
4C9A   CD A5 07               CALL   execStr   
4C9D   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
4CA4                          ;*Macro unroll:  expect "3 3 ==",TRUE
4CA4   E1                     POP   HL   
4CA5   E5                     PUSH   HL   
4CA6   11 FF FF               LD   DE,TRUE   
4CA9   B7                     OR   A   
4CAA   ED 52                  SBC   HL,DE   
4CAC   7D                     LD   A,L   
4CAD   B4                     OR   H   
4CAE   28 51                  JR   Z,expectM_0_2281S43   
4CB0   CD 9E 07               CALL   printStr   
4CB3   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
4CC0   CD 9E 07               CALL   printStr   
4CC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CD2   21 FF FF               LD   HL,TRUE   
4CD5   CD EC 06               CALL   prtdec   
4CD8   CD 9E 07               CALL   printStr   
4CDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CE8   E1                     POP   hl   
4CE9   E5                     PUSH   hl   
4CEA   CD EC 06               CALL   prtdec   
4CED   E1                     POP   hl   
4CEE   CD 9E 07               CALL   printStr   
4CF1   20 28 23 00            .CSTR   " (#"   
4CF5   CD 34 07               CALL   prthex   
4CF8   CD 9E 07               CALL   printStr   
4CFB   29 0D 0A 00            .CSTR   ")\r\n"   
4CFF   76                     HALT      
4D00   00                     .CSTR      
4D01                EXPECTM_0_2281S43:      
4D01   E1                     POP   HL   
4D02                          ;*Macro unroll:  test "1 2 <", TRUE
4D02   31 80 18               LD   SP,STACK   
4D05   CD A4 08               CALL   init   
4D08   CD A5 07               CALL   execStr   
4D0B   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4D11                          ;*Macro unroll:  expect "1 2 <",TRUE
4D11   E1                     POP   HL   
4D12   E5                     PUSH   HL   
4D13   11 FF FF               LD   DE,TRUE   
4D16   B7                     OR   A   
4D17   ED 52                  SBC   HL,DE   
4D19   7D                     LD   A,L   
4D1A   B4                     OR   H   
4D1B   28 50                  JR   Z,expectM_0_2282S43   
4D1D   CD 9E 07               CALL   printStr   
4D20   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4D2C   CD 9E 07               CALL   printStr   
4D2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D3E   21 FF FF               LD   HL,TRUE   
4D41   CD EC 06               CALL   prtdec   
4D44   CD 9E 07               CALL   printStr   
4D47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D54   E1                     POP   hl   
4D55   E5                     PUSH   hl   
4D56   CD EC 06               CALL   prtdec   
4D59   E1                     POP   hl   
4D5A   CD 9E 07               CALL   printStr   
4D5D   20 28 23 00            .CSTR   " (#"   
4D61   CD 34 07               CALL   prthex   
4D64   CD 9E 07               CALL   printStr   
4D67   29 0D 0A 00            .CSTR   ")\r\n"   
4D6B   76                     HALT      
4D6C   00                     .CSTR      
4D6D                EXPECTM_0_2282S43:      
4D6D   E1                     POP   HL   
4D6E                          ;*Macro unroll:  test "2 1 <", FALSE
4D6E   31 80 18               LD   SP,STACK   
4D71   CD A4 08               CALL   init   
4D74   CD A5 07               CALL   execStr   
4D77   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4D7D                          ;*Macro unroll:  expect "2 1 <",FALSE
4D7D   E1                     POP   HL   
4D7E   E5                     PUSH   HL   
4D7F   11 00 00               LD   DE,FALSE   
4D82   B7                     OR   A   
4D83   ED 52                  SBC   HL,DE   
4D85   7D                     LD   A,L   
4D86   B4                     OR   H   
4D87   28 50                  JR   Z,expectM_0_2283S43   
4D89   CD 9E 07               CALL   printStr   
4D8C   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4D98   CD 9E 07               CALL   printStr   
4D9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DAA   21 00 00               LD   HL,FALSE   
4DAD   CD EC 06               CALL   prtdec   
4DB0   CD 9E 07               CALL   printStr   
4DB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DC0   E1                     POP   hl   
4DC1   E5                     PUSH   hl   
4DC2   CD EC 06               CALL   prtdec   
4DC5   E1                     POP   hl   
4DC6   CD 9E 07               CALL   printStr   
4DC9   20 28 23 00            .CSTR   " (#"   
4DCD   CD 34 07               CALL   prthex   
4DD0   CD 9E 07               CALL   printStr   
4DD3   29 0D 0A 00            .CSTR   ")\r\n"   
4DD7   76                     HALT      
4DD8   00                     .CSTR      
4DD9                EXPECTM_0_2283S43:      
4DD9   E1                     POP   HL   
4DDA                          ;*Macro unroll:  test "2 3 <", TRUE
4DDA   31 80 18               LD   SP,STACK   
4DDD   CD A4 08               CALL   init   
4DE0   CD A5 07               CALL   execStr   
4DE3   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4DE9                          ;*Macro unroll:  expect "2 3 <",TRUE
4DE9   E1                     POP   HL   
4DEA   E5                     PUSH   HL   
4DEB   11 FF FF               LD   DE,TRUE   
4DEE   B7                     OR   A   
4DEF   ED 52                  SBC   HL,DE   
4DF1   7D                     LD   A,L   
4DF2   B4                     OR   H   
4DF3   28 50                  JR   Z,expectM_0_2284S43   
4DF5   CD 9E 07               CALL   printStr   
4DF8   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4E04   CD 9E 07               CALL   printStr   
4E07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E16   21 FF FF               LD   HL,TRUE   
4E19   CD EC 06               CALL   prtdec   
4E1C   CD 9E 07               CALL   printStr   
4E1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E2C   E1                     POP   hl   
4E2D   E5                     PUSH   hl   
4E2E   CD EC 06               CALL   prtdec   
4E31   E1                     POP   hl   
4E32   CD 9E 07               CALL   printStr   
4E35   20 28 23 00            .CSTR   " (#"   
4E39   CD 34 07               CALL   prthex   
4E3C   CD 9E 07               CALL   printStr   
4E3F   29 0D 0A 00            .CSTR   ")\r\n"   
4E43   76                     HALT      
4E44   00                     .CSTR      
4E45                EXPECTM_0_2284S43:      
4E45   E1                     POP   HL   
4E46                          ;*Macro unroll:  test "3 3 <", FALSE
4E46   31 80 18               LD   SP,STACK   
4E49   CD A4 08               CALL   init   
4E4C   CD A5 07               CALL   execStr   
4E4F   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4E55                          ;*Macro unroll:  expect "3 3 <",FALSE
4E55   E1                     POP   HL   
4E56   E5                     PUSH   HL   
4E57   11 00 00               LD   DE,FALSE   
4E5A   B7                     OR   A   
4E5B   ED 52                  SBC   HL,DE   
4E5D   7D                     LD   A,L   
4E5E   B4                     OR   H   
4E5F   28 50                  JR   Z,expectM_0_2285S43   
4E61   CD 9E 07               CALL   printStr   
4E64   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4E70   CD 9E 07               CALL   printStr   
4E73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E82   21 00 00               LD   HL,FALSE   
4E85   CD EC 06               CALL   prtdec   
4E88   CD 9E 07               CALL   printStr   
4E8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E98   E1                     POP   hl   
4E99   E5                     PUSH   hl   
4E9A   CD EC 06               CALL   prtdec   
4E9D   E1                     POP   hl   
4E9E   CD 9E 07               CALL   printStr   
4EA1   20 28 23 00            .CSTR   " (#"   
4EA5   CD 34 07               CALL   prthex   
4EA8   CD 9E 07               CALL   printStr   
4EAB   29 0D 0A 00            .CSTR   ")\r\n"   
4EAF   76                     HALT      
4EB0   00                     .CSTR      
4EB1                EXPECTM_0_2285S43:      
4EB1   E1                     POP   HL   
4EB2                          ;*Macro unroll:  test "1 2 >", FALSE
4EB2   31 80 18               LD   SP,STACK   
4EB5   CD A4 08               CALL   init   
4EB8   CD A5 07               CALL   execStr   
4EBB   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4EC1                          ;*Macro unroll:  expect "1 2 >",FALSE
4EC1   E1                     POP   HL   
4EC2   E5                     PUSH   HL   
4EC3   11 00 00               LD   DE,FALSE   
4EC6   B7                     OR   A   
4EC7   ED 52                  SBC   HL,DE   
4EC9   7D                     LD   A,L   
4ECA   B4                     OR   H   
4ECB   28 50                  JR   Z,expectM_0_2286S43   
4ECD   CD 9E 07               CALL   printStr   
4ED0   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4EDC   CD 9E 07               CALL   printStr   
4EDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EEE   21 00 00               LD   HL,FALSE   
4EF1   CD EC 06               CALL   prtdec   
4EF4   CD 9E 07               CALL   printStr   
4EF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F04   E1                     POP   hl   
4F05   E5                     PUSH   hl   
4F06   CD EC 06               CALL   prtdec   
4F09   E1                     POP   hl   
4F0A   CD 9E 07               CALL   printStr   
4F0D   20 28 23 00            .CSTR   " (#"   
4F11   CD 34 07               CALL   prthex   
4F14   CD 9E 07               CALL   printStr   
4F17   29 0D 0A 00            .CSTR   ")\r\n"   
4F1B   76                     HALT      
4F1C   00                     .CSTR      
4F1D                EXPECTM_0_2286S43:      
4F1D   E1                     POP   HL   
4F1E                          ;*Macro unroll:  test "2 1 >", TRUE
4F1E   31 80 18               LD   SP,STACK   
4F21   CD A4 08               CALL   init   
4F24   CD A5 07               CALL   execStr   
4F27   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4F2D                          ;*Macro unroll:  expect "2 1 >",TRUE
4F2D   E1                     POP   HL   
4F2E   E5                     PUSH   HL   
4F2F   11 FF FF               LD   DE,TRUE   
4F32   B7                     OR   A   
4F33   ED 52                  SBC   HL,DE   
4F35   7D                     LD   A,L   
4F36   B4                     OR   H   
4F37   28 50                  JR   Z,expectM_0_2287S43   
4F39   CD 9E 07               CALL   printStr   
4F3C   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4F48   CD 9E 07               CALL   printStr   
4F4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F5A   21 FF FF               LD   HL,TRUE   
4F5D   CD EC 06               CALL   prtdec   
4F60   CD 9E 07               CALL   printStr   
4F63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F70   E1                     POP   hl   
4F71   E5                     PUSH   hl   
4F72   CD EC 06               CALL   prtdec   
4F75   E1                     POP   hl   
4F76   CD 9E 07               CALL   printStr   
4F79   20 28 23 00            .CSTR   " (#"   
4F7D   CD 34 07               CALL   prthex   
4F80   CD 9E 07               CALL   printStr   
4F83   29 0D 0A 00            .CSTR   ")\r\n"   
4F87   76                     HALT      
4F88   00                     .CSTR      
4F89                EXPECTM_0_2287S43:      
4F89   E1                     POP   HL   
4F8A                          ;*Macro unroll:  test "3 3 >", FALSE
4F8A   31 80 18               LD   SP,STACK   
4F8D   CD A4 08               CALL   init   
4F90   CD A5 07               CALL   execStr   
4F93   33 20 33 20 3E 00      .CSTR   "3 3 >"   
4F99                          ;*Macro unroll:  expect "3 3 >",FALSE
4F99   E1                     POP   HL   
4F9A   E5                     PUSH   HL   
4F9B   11 00 00               LD   DE,FALSE   
4F9E   B7                     OR   A   
4F9F   ED 52                  SBC   HL,DE   
4FA1   7D                     LD   A,L   
4FA2   B4                     OR   H   
4FA3   28 50                  JR   Z,expectM_0_2288S43   
4FA5   CD 9E 07               CALL   printStr   
4FA8   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
4FB4   CD 9E 07               CALL   printStr   
4FB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FC6   21 00 00               LD   HL,FALSE   
4FC9   CD EC 06               CALL   prtdec   
4FCC   CD 9E 07               CALL   printStr   
4FCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FDC   E1                     POP   hl   
4FDD   E5                     PUSH   hl   
4FDE   CD EC 06               CALL   prtdec   
4FE1   E1                     POP   hl   
4FE2   CD 9E 07               CALL   printStr   
4FE5   20 28 23 00            .CSTR   " (#"   
4FE9   CD 34 07               CALL   prthex   
4FEC   CD 9E 07               CALL   printStr   
4FEF   29 0D 0A 00            .CSTR   ")\r\n"   
4FF3   76                     HALT      
4FF4   00                     .CSTR      
4FF5                EXPECTM_0_2288S43:      
4FF5   E1                     POP   HL   
4FF6                          ;*Macro unroll:  test "4 3 >", TRUE
4FF6   31 80 18               LD   SP,STACK   
4FF9   CD A4 08               CALL   init   
4FFC   CD A5 07               CALL   execStr   
4FFF   34 20 33 20 3E 00      .CSTR   "4 3 >"   
5005                          ;*Macro unroll:  expect "4 3 >",TRUE
5005   E1                     POP   HL   
5006   E5                     PUSH   HL   
5007   11 FF FF               LD   DE,TRUE   
500A   B7                     OR   A   
500B   ED 52                  SBC   HL,DE   
500D   7D                     LD   A,L   
500E   B4                     OR   H   
500F   28 50                  JR   Z,expectM_0_2289S43   
5011   CD 9E 07               CALL   printStr   
5014   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
5020   CD 9E 07               CALL   printStr   
5023   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5032   21 FF FF               LD   HL,TRUE   
5035   CD EC 06               CALL   prtdec   
5038   CD 9E 07               CALL   printStr   
503B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5048   E1                     POP   hl   
5049   E5                     PUSH   hl   
504A   CD EC 06               CALL   prtdec   
504D   E1                     POP   hl   
504E   CD 9E 07               CALL   printStr   
5051   20 28 23 00            .CSTR   " (#"   
5055   CD 34 07               CALL   prthex   
5058   CD 9E 07               CALL   printStr   
505B   29 0D 0A 00            .CSTR   ")\r\n"   
505F   76                     HALT      
5060   00                     .CSTR      
5061                EXPECTM_0_2289S43:      
5061   E1                     POP   HL   
5062                          ;*Macro unroll:  test "2 2 <=", TRUE
5062   31 80 18               LD   SP,STACK   
5065   CD A4 08               CALL   init   
5068   CD A5 07               CALL   execStr   
506B   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
5072                          ;*Macro unroll:  expect "2 2 <=",TRUE
5072   E1                     POP   HL   
5073   E5                     PUSH   HL   
5074   11 FF FF               LD   DE,TRUE   
5077   B7                     OR   A   
5078   ED 52                  SBC   HL,DE   
507A   7D                     LD   A,L   
507B   B4                     OR   H   
507C   28 51                  JR   Z,expectM_0_2290S43   
507E   CD 9E 07               CALL   printStr   
5081   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
508E   CD 9E 07               CALL   printStr   
5091   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50A0   21 FF FF               LD   HL,TRUE   
50A3   CD EC 06               CALL   prtdec   
50A6   CD 9E 07               CALL   printStr   
50A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50B6   E1                     POP   hl   
50B7   E5                     PUSH   hl   
50B8   CD EC 06               CALL   prtdec   
50BB   E1                     POP   hl   
50BC   CD 9E 07               CALL   printStr   
50BF   20 28 23 00            .CSTR   " (#"   
50C3   CD 34 07               CALL   prthex   
50C6   CD 9E 07               CALL   printStr   
50C9   29 0D 0A 00            .CSTR   ")\r\n"   
50CD   76                     HALT      
50CE   00                     .CSTR      
50CF                EXPECTM_0_2290S43:      
50CF   E1                     POP   HL   
50D0                          ;*Macro unroll:  test "2 2 >=", TRUE
50D0   31 80 18               LD   SP,STACK   
50D3   CD A4 08               CALL   init   
50D6   CD A5 07               CALL   execStr   
50D9   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
50E0                          ;*Macro unroll:  expect "2 2 >=",TRUE
50E0   E1                     POP   HL   
50E1   E5                     PUSH   HL   
50E2   11 FF FF               LD   DE,TRUE   
50E5   B7                     OR   A   
50E6   ED 52                  SBC   HL,DE   
50E8   7D                     LD   A,L   
50E9   B4                     OR   H   
50EA   28 51                  JR   Z,expectM_0_2291S43   
50EC   CD 9E 07               CALL   printStr   
50EF   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
50FC   CD 9E 07               CALL   printStr   
50FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
510E   21 FF FF               LD   HL,TRUE   
5111   CD EC 06               CALL   prtdec   
5114   CD 9E 07               CALL   printStr   
5117   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5124   E1                     POP   hl   
5125   E5                     PUSH   hl   
5126   CD EC 06               CALL   prtdec   
5129   E1                     POP   hl   
512A   CD 9E 07               CALL   printStr   
512D   20 28 23 00            .CSTR   " (#"   
5131   CD 34 07               CALL   prthex   
5134   CD 9E 07               CALL   printStr   
5137   29 0D 0A 00            .CSTR   ")\r\n"   
513B   76                     HALT      
513C   00                     .CSTR      
513D                EXPECTM_0_2291S43:      
513D   E1                     POP   HL   
513E                          ;*Macro unroll:  test "3 1 <<", 6
513E   31 80 18               LD   SP,STACK   
5141   CD A4 08               CALL   init   
5144   CD A5 07               CALL   execStr   
5147   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
514E                          ;*Macro unroll:  expect "3 1 <<",6
514E   E1                     POP   HL   
514F   E5                     PUSH   HL   
5150   11 06 00               LD   DE,6   
5153   B7                     OR   A   
5154   ED 52                  SBC   HL,DE   
5156   7D                     LD   A,L   
5157   B4                     OR   H   
5158   28 51                  JR   Z,expectM_0_2292S43   
515A   CD 9E 07               CALL   printStr   
515D   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
516A   CD 9E 07               CALL   printStr   
516D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
517C   21 06 00               LD   HL,6   
517F   CD EC 06               CALL   prtdec   
5182   CD 9E 07               CALL   printStr   
5185   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5192   E1                     POP   hl   
5193   E5                     PUSH   hl   
5194   CD EC 06               CALL   prtdec   
5197   E1                     POP   hl   
5198   CD 9E 07               CALL   printStr   
519B   20 28 23 00            .CSTR   " (#"   
519F   CD 34 07               CALL   prthex   
51A2   CD 9E 07               CALL   printStr   
51A5   29 0D 0A 00            .CSTR   ")\r\n"   
51A9   76                     HALT      
51AA   00                     .CSTR      
51AB                EXPECTM_0_2292S43:      
51AB   E1                     POP   HL   
51AC                          ;*Macro unroll:  test "10 1 >>", 5
51AC   31 80 18               LD   SP,STACK   
51AF   CD A4 08               CALL   init   
51B2   CD A5 07               CALL   execStr   
51B5   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
51BD                          ;*Macro unroll:  expect "10 1 >>",5
51BD   E1                     POP   HL   
51BE   E5                     PUSH   HL   
51BF   11 05 00               LD   DE,5   
51C2   B7                     OR   A   
51C3   ED 52                  SBC   HL,DE   
51C5   7D                     LD   A,L   
51C6   B4                     OR   H   
51C7   28 52                  JR   Z,expectM_0_2293S43   
51C9   CD 9E 07               CALL   printStr   
51CC   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
51DA   CD 9E 07               CALL   printStr   
51DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51EC   21 05 00               LD   HL,5   
51EF   CD EC 06               CALL   prtdec   
51F2   CD 9E 07               CALL   printStr   
51F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5202   E1                     POP   hl   
5203   E5                     PUSH   hl   
5204   CD EC 06               CALL   prtdec   
5207   E1                     POP   hl   
5208   CD 9E 07               CALL   printStr   
520B   20 28 23 00            .CSTR   " (#"   
520F   CD 34 07               CALL   prthex   
5212   CD 9E 07               CALL   printStr   
5215   29 0D 0A 00            .CSTR   ")\r\n"   
5219   76                     HALT      
521A   00                     .CSTR      
521B                EXPECTM_0_2293S43:      
521B   E1                     POP   HL   
521C                          ;*Macro unroll:  test "x", 0
521C   31 80 18               LD   SP,STACK   
521F   CD A4 08               CALL   init   
5222   CD A5 07               CALL   execStr   
5225   78 00                  .CSTR   "x"   
5227                          ;*Macro unroll:  expect "x",0
5227   E1                     POP   HL   
5228   E5                     PUSH   HL   
5229   11 00 00               LD   DE,0   
522C   B7                     OR   A   
522D   ED 52                  SBC   HL,DE   
522F   7D                     LD   A,L   
5230   B4                     OR   H   
5231   28 4C                  JR   Z,expectM_0_2294S43   
5233   CD 9E 07               CALL   printStr   
5236   43 6F 64 65 3A 20 78 00 .CSTR   "Code: ","x"   
523E   CD 9E 07               CALL   printStr   
5241   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5250   21 00 00               LD   HL,0   
5253   CD EC 06               CALL   prtdec   
5256   CD 9E 07               CALL   printStr   
5259   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5266   E1                     POP   hl   
5267   E5                     PUSH   hl   
5268   CD EC 06               CALL   prtdec   
526B   E1                     POP   hl   
526C   CD 9E 07               CALL   printStr   
526F   20 28 23 00            .CSTR   " (#"   
5273   CD 34 07               CALL   prthex   
5276   CD 9E 07               CALL   printStr   
5279   29 0D 0A 00            .CSTR   ")\r\n"   
527D   76                     HALT      
527E   00                     .CSTR      
527F                EXPECTM_0_2294S43:      
527F   E1                     POP   HL   
5280                          ;*Macro unroll:  test "1 x = x", 1
5280   31 80 18               LD   SP,STACK   
5283   CD A4 08               CALL   init   
5286   CD A5 07               CALL   execStr   
5289   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
5291                          ;*Macro unroll:  expect "1 x = x",1
5291   E1                     POP   HL   
5292   E5                     PUSH   HL   
5293   11 01 00               LD   DE,1   
5296   B7                     OR   A   
5297   ED 52                  SBC   HL,DE   
5299   7D                     LD   A,L   
529A   B4                     OR   H   
529B   28 52                  JR   Z,expectM_0_2295S43   
529D   CD 9E 07               CALL   printStr   
52A0   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
52AE   CD 9E 07               CALL   printStr   
52B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52C0   21 01 00               LD   HL,1   
52C3   CD EC 06               CALL   prtdec   
52C6   CD 9E 07               CALL   printStr   
52C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52D6   E1                     POP   hl   
52D7   E5                     PUSH   hl   
52D8   CD EC 06               CALL   prtdec   
52DB   E1                     POP   hl   
52DC   CD 9E 07               CALL   printStr   
52DF   20 28 23 00            .CSTR   " (#"   
52E3   CD 34 07               CALL   prthex   
52E6   CD 9E 07               CALL   printStr   
52E9   29 0D 0A 00            .CSTR   ")\r\n"   
52ED   76                     HALT      
52EE   00                     .CSTR      
52EF                EXPECTM_0_2295S43:      
52EF   E1                     POP   HL   
52F0                          ;*Macro unroll:  test "() -2?", $0000
52F0   31 80 18               LD   SP,STACK   
52F3   CD A4 08               CALL   init   
52F6   CD A5 07               CALL   execStr   
52F9   28 29 20 2D 32 3F 00   .CSTR   "() -2?"   
5300                          ;*Macro unroll:  expect "() -2?",$0000
5300   E1                     POP   HL   
5301   E5                     PUSH   HL   
5302   11 00 00               LD   DE,$0000   
5305   B7                     OR   A   
5306   ED 52                  SBC   HL,DE   
5308   7D                     LD   A,L   
5309   B4                     OR   H   
530A   28 51                  JR   Z,expectM_0_2296S43   
530C   CD 9E 07               CALL   printStr   
530F   43 6F 64 65 3A 20 28 29 20 2D 32 3F 00 .CSTR   "Code: ","() -2?"   
531C   CD 9E 07               CALL   printStr   
531F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
532E   21 00 00               LD   HL,$0000   
5331   CD EC 06               CALL   prtdec   
5334   CD 9E 07               CALL   printStr   
5337   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5344   E1                     POP   hl   
5345   E5                     PUSH   hl   
5346   CD EC 06               CALL   prtdec   
5349   E1                     POP   hl   
534A   CD 9E 07               CALL   printStr   
534D   20 28 23 00            .CSTR   " (#"   
5351   CD 34 07               CALL   prthex   
5354   CD 9E 07               CALL   printStr   
5357   29 0D 0A 00            .CSTR   ")\r\n"   
535B   76                     HALT      
535C   00                     .CSTR      
535D                EXPECTM_0_2296S43:      
535D   E1                     POP   HL   
535E                          ;*Macro unroll:  test "(a) -1?", $0001
535E   31 80 18               LD   SP,STACK   
5361   CD A4 08               CALL   init   
5364   CD A5 07               CALL   execStr   
5367   28 61 29 20 2D 31 3F 00 .CSTR   "(a) -1?"   
536F                          ;*Macro unroll:  expect "(a) -1?",$0001
536F   E1                     POP   HL   
5370   E5                     PUSH   HL   
5371   11 01 00               LD   DE,$0001   
5374   B7                     OR   A   
5375   ED 52                  SBC   HL,DE   
5377   7D                     LD   A,L   
5378   B4                     OR   H   
5379   28 52                  JR   Z,expectM_0_2297S43   
537B   CD 9E 07               CALL   printStr   
537E   43 6F 64 65 3A 20 28 61 29 20 2D 31 3F 00 .CSTR   "Code: ","(a) -1?"   
538C   CD 9E 07               CALL   printStr   
538F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
539E   21 01 00               LD   HL,$0001   
53A1   CD EC 06               CALL   prtdec   
53A4   CD 9E 07               CALL   printStr   
53A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53B4   E1                     POP   hl   
53B5   E5                     PUSH   hl   
53B6   CD EC 06               CALL   prtdec   
53B9   E1                     POP   hl   
53BA   CD 9E 07               CALL   printStr   
53BD   20 28 23 00            .CSTR   " (#"   
53C1   CD 34 07               CALL   prthex   
53C4   CD 9E 07               CALL   printStr   
53C7   29 0D 0A 00            .CSTR   ")\r\n"   
53CB   76                     HALT      
53CC   00                     .CSTR      
53CD                EXPECTM_0_2297S43:      
53CD   E1                     POP   HL   
53CE                          ;*Macro unroll:  test "(a:) -1?", $0001
53CE   31 80 18               LD   SP,STACK   
53D1   CD A4 08               CALL   init   
53D4   CD A5 07               CALL   execStr   
53D7   28 61 3A 29 20 2D 31 3F 00 .CSTR   "(a:) -1?"   
53E0                          ;*Macro unroll:  expect "(a:) -1?",$0001
53E0   E1                     POP   HL   
53E1   E5                     PUSH   HL   
53E2   11 01 00               LD   DE,$0001   
53E5   B7                     OR   A   
53E6   ED 52                  SBC   HL,DE   
53E8   7D                     LD   A,L   
53E9   B4                     OR   H   
53EA   28 53                  JR   Z,expectM_0_2298S43   
53EC   CD 9E 07               CALL   printStr   
53EF   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:) -1?"   
53FE   CD 9E 07               CALL   printStr   
5401   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5410   21 01 00               LD   HL,$0001   
5413   CD EC 06               CALL   prtdec   
5416   CD 9E 07               CALL   printStr   
5419   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5426   E1                     POP   hl   
5427   E5                     PUSH   hl   
5428   CD EC 06               CALL   prtdec   
542B   E1                     POP   hl   
542C   CD 9E 07               CALL   printStr   
542F   20 28 23 00            .CSTR   " (#"   
5433   CD 34 07               CALL   prthex   
5436   CD 9E 07               CALL   printStr   
5439   29 0D 0A 00            .CSTR   ")\r\n"   
543D   76                     HALT      
543E   00                     .CSTR      
543F                EXPECTM_0_2298S43:      
543F   E1                     POP   HL   
5440                          ;*Macro unroll:  test "(a:b) -1?", $0102
5440   31 80 18               LD   SP,STACK   
5443   CD A4 08               CALL   init   
5446   CD A5 07               CALL   execStr   
5449   28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "(a:b) -1?"   
5453                          ;*Macro unroll:  expect "(a:b) -1?",$0102
5453   E1                     POP   HL   
5454   E5                     PUSH   HL   
5455   11 02 01               LD   DE,$0102   
5458   B7                     OR   A   
5459   ED 52                  SBC   HL,DE   
545B   7D                     LD   A,L   
545C   B4                     OR   H   
545D   28 54                  JR   Z,expectM_0_2299S43   
545F   CD 9E 07               CALL   printStr   
5462   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:b) -1?"   
5472   CD 9E 07               CALL   printStr   
5475   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5484   21 02 01               LD   HL,$0102   
5487   CD EC 06               CALL   prtdec   
548A   CD 9E 07               CALL   printStr   
548D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
549A   E1                     POP   hl   
549B   E5                     PUSH   hl   
549C   CD EC 06               CALL   prtdec   
549F   E1                     POP   hl   
54A0   CD 9E 07               CALL   printStr   
54A3   20 28 23 00            .CSTR   " (#"   
54A7   CD 34 07               CALL   prthex   
54AA   CD 9E 07               CALL   printStr   
54AD   29 0D 0A 00            .CSTR   ")\r\n"   
54B1   76                     HALT      
54B2   00                     .CSTR      
54B3                EXPECTM_0_2299S43:      
54B3   E1                     POP   HL   
54B4                          ;*Macro unroll:  test "(:b) -1?", $0101
54B4   31 80 18               LD   SP,STACK   
54B7   CD A4 08               CALL   init   
54BA   CD A5 07               CALL   execStr   
54BD   28 3A 62 29 20 2D 31 3F 00 .CSTR   "(:b) -1?"   
54C6                          ;*Macro unroll:  expect "(:b) -1?",$0101
54C6   E1                     POP   HL   
54C7   E5                     PUSH   HL   
54C8   11 01 01               LD   DE,$0101   
54CB   B7                     OR   A   
54CC   ED 52                  SBC   HL,DE   
54CE   7D                     LD   A,L   
54CF   B4                     OR   H   
54D0   28 53                  JR   Z,expectM_0_2300S43   
54D2   CD 9E 07               CALL   printStr   
54D5   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(:b) -1?"   
54E4   CD 9E 07               CALL   printStr   
54E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54F6   21 01 01               LD   HL,$0101   
54F9   CD EC 06               CALL   prtdec   
54FC   CD 9E 07               CALL   printStr   
54FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
550C   E1                     POP   hl   
550D   E5                     PUSH   hl   
550E   CD EC 06               CALL   prtdec   
5511   E1                     POP   hl   
5512   CD 9E 07               CALL   printStr   
5515   20 28 23 00            .CSTR   " (#"   
5519   CD 34 07               CALL   prthex   
551C   CD 9E 07               CALL   printStr   
551F   29 0D 0A 00            .CSTR   ")\r\n"   
5523   76                     HALT      
5524   00                     .CSTR      
5525                EXPECTM_0_2300S43:      
5525   E1                     POP   HL   
5526                             ; 
5526                             ; 
5526                             ; 
5526                             ; 
5526                             ; 
5526                             ; 
5526                             ; 
5526                             ; test "7 3 / frac", 1
5526                             ; test "10 sqrt", 3
5526                             ; test "10 sqrt frac", 1
5526                             ; test ":x 20 let 100 x set x", 100
5526                             ; test "[10 20 30] 1?", 20
5526                             ; test ":x [10 20 30] let 50 x 1? set x 1?", 50
5526                             ; test "bytes [1 2 3] 1?", 2
5526                             ; test "bytes :x [1 2 3] let x 1?", 2
5526                             ; test "bytes ['A' 'B' 'C'] 1?", 66
5526                             ; test "1 5 (a) {{2} exec} func call", 2
5526                             ; test "1 5 (a) {{$a} exec} func call", 5
5526                             ; test "1 5 (a) {{$a 1 +} exec} func call", 6
5526                             ; test "1 10 20 (ab) {-1 {$a} {$b} ifte} func call", 10
5526                             ; test "1 10 20 (ab) {0 {$a} {$b} ifte} func call", 20
5526                             ; test ":x (a) {2} def 1 x", 2
5526                             ; test ":x (a) {$a} def 0 1 x", 1
5526                             ; test ":x (a) {$a} def 1 2 x", 2
5526                             ; test ":x (a:b) {$a} def 1 2 x", 2
5526                             ; test ":x (ab) {$b} def 1 2 x", 2
5526                             ; test ":x (ab) {$b $a} def 10 15 x -", 5
5526                             ; test ":x (a:b) {2} def 1 x", 2
5526                             ; test ":x (:b) {100 $b set $b} def x", 100
5526                             ; test ":x (a:b) {1 $b set $b} def 2 x", 1
5526                             ; test ":x (a:b) {$a $b set $b} def 2 x", 2
5526                             ; test "0 [{10} {20} {30}] switch", 10
5526                             ; test "1 10 20 (ab) {0 [{$a} {$b}] switch} func call", 10
5526                             ; test "0 10 20 (iab) {$i [{$a} {$b}] switch} func call", 10
5526                             ; test "1 10 20 (iab) {$i [{$a} {$b}] switch} func call", 20
5526                             ; test "false", false
5526                             ; test "true", true
5526                             ; test "1 5 false {10} if", 5
5526                             ; test "1 5 true {10} if", 10
5526                             ; test "1 false {10} {20} ifte", 20
5526                             ; test "1 true {10} {20} ifte", 10
5526                             ; test "[ 1 ] closure call", 1
5526                             ; test "[ [ 2 ] ] closure call 0?", 2
5526                             ; call execStr
5526                             ; db "9"
5526                             ; kall sqrt1
5526                             ; db 0
5526                             ; expect "9 sqrt",3
5526   CD 9E 07               CALL   printStr   
5529   44 6F 6E 65 21 00      .CSTR   "Done!"   
552F   76                     HALT      
5530                          ALIGN   2   
5530                PRINTER:      
5530   E1                     POP   hl   
5531   CD EC 06               CALL   prtdec   
5534   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               06D1 DEFINED AT LINE 1086 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1078 IN monty.asm
                    > USED AT LINE 1576 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 401 IN monty.asm
                    > USED AT LINE 408 IN monty.asm
                    > USED AT LINE 1185 IN monty.asm
                    > USED AT LINE 1226 IN monty.asm
                    > USED AT LINE 1250 IN monty.asm
                    > USED AT LINE 1253 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 41 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 1045 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 1050 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1645 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 563 IN monty.asm
                    > USED AT LINE 1272 IN monty.asm
                    > USED AT LINE 1455 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1531 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 78 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 80 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 114 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 217 IN monty.asm
ADD_:               0300 DEFINED AT LINE 219 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 225 IN monty.asm
AND_:               0309 DEFINED AT LINE 227 IN monty.asm
ARG_:               030C DEFINED AT LINE 229 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 231 IN monty.asm
ARRAY_:             0312 DEFINED AT LINE 233 IN monty.asm
ARRAYEND_:          0315 DEFINED AT LINE 235 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 237 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 239 IN monty.asm
CHAR_:              031E DEFINED AT LINE 241 IN monty.asm
DOT_:               0321 DEFINED AT LINE 243 IN monty.asm
GO_:                0324 DEFINED AT LINE 245 IN monty.asm
IDENTU_:            0327 DEFINED AT LINE 247 IN monty.asm
IDENTL_:            032A DEFINED AT LINE 249 IN monty.asm
INDEX_:             032D DEFINED AT LINE 252 IN monty.asm
INV_:               0330 DEFINED AT LINE 254 IN monty.asm
MUL_:               0336 DEFINED AT LINE 257 IN monty.asm
NOT_:               0339 DEFINED AT LINE 259 IN monty.asm
NUM_:               033E DEFINED AT LINE 262 IN monty.asm
                    > USED AT LINE 283 IN monty.asm
HEXNUM_:            0341 DEFINED AT LINE 264 IN monty.asm
OR_:                0344 DEFINED AT LINE 266 IN monty.asm
XOR_:               0347 DEFINED AT LINE 268 IN monty.asm
STRING_:            034A DEFINED AT LINE 274 IN monty.asm
SUB_:               034D DEFINED AT LINE 276 IN monty.asm
SUB1:               0359 DEFINED AT LINE 284 IN monty.asm
                    > USED AT LINE 281 IN monty.asm
SUB2:               035B DEFINED AT LINE 287 IN monty.asm
EQ_:                0361 DEFINED AT LINE 294 IN monty.asm
EQ0:                036B DEFINED AT LINE 301 IN monty.asm
                    > USED AT LINE 298 IN monty.asm
EQ1:                036C DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
GT_:                0370 DEFINED AT LINE 307 IN monty.asm
LT_:                037B DEFINED AT LINE 316 IN monty.asm
LT1:                0384 DEFINED AT LINE 323 IN monty.asm
                    > USED AT LINE 314 IN monty.asm
DIV_:               038D DEFINED AT LINE 329 IN monty.asm
COMMAND_:           039C DEFINED AT LINE 340 IN monty.asm
NOP_:               039F DEFINED AT LINE 342 IN monty.asm
ADDR:               03A1 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
AND:                03AD DEFINED AT LINE 356 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
AND1:               03B4 DEFINED AT LINE 364 IN monty.asm
                    > USED AT LINE 418 IN monty.asm
                    > USED AT LINE 428 IN monty.asm
COMMAND:            03B8 DEFINED AT LINE 368 IN monty.asm
                    > USED AT LINE 341 IN monty.asm
COMMENT:            03C9 DEFINED AT LINE 377 IN monty.asm
                    > USED AT LINE 372 IN monty.asm
                    > USED AT LINE 381 IN monty.asm
DOT:                03D2 DEFINED AT LINE 384 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT1:               03DE DEFINED AT LINE 392 IN monty.asm
                    > USED AT LINE 389 IN monty.asm
DOT2:               03E7 DEFINED AT LINE 397 IN monty.asm
                    > USED AT LINE 394 IN monty.asm
DOT3:               03F1 DEFINED AT LINE 403 IN monty.asm
                    > USED AT LINE 399 IN monty.asm
DOT4:               03F5 DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 391 IN monty.asm
                    > USED AT LINE 396 IN monty.asm
                    > USED AT LINE 402 IN monty.asm
OR:                 03FC DEFINED AT LINE 410 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
XOR:                0405 DEFINED AT LINE 419 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
XOR1:               0406 DEFINED AT LINE 421 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
SHIFTLEFT:          040E DEFINED AT LINE 432 IN monty.asm
                    > USED AT LINE 320 IN monty.asm
SHIFTLEFT1:         0416 DEFINED AT LINE 439 IN monty.asm
                    > USED AT LINE 442 IN monty.asm
SHIFTLEFT2:         0417 DEFINED AT LINE 441 IN monty.asm
                    > USED AT LINE 438 IN monty.asm
SHIFTRIGHT:         041E DEFINED AT LINE 449 IN monty.asm
                    > USED AT LINE 311 IN monty.asm
SHIFTRIGHT1:        0426 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 460 IN monty.asm
SHIFTRIGHT2:        042A DEFINED AT LINE 459 IN monty.asm
                    > USED AT LINE 455 IN monty.asm
MUL:                0431 DEFINED AT LINE 465 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
MUL2:               043B DEFINED AT LINE 474 IN monty.asm
                    > USED AT LINE 483 IN monty.asm
NUM:                044D DEFINED AT LINE 488 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
NUM0:               0456 DEFINED AT LINE 494 IN monty.asm
                    > USED AT LINE 492 IN monty.asm
NUM1:               0457 DEFINED AT LINE 496 IN monty.asm
                    > USED AT LINE 513 IN monty.asm
NUM2:               046F DEFINED AT LINE 514 IN monty.asm
                    > USED AT LINE 499 IN monty.asm
                    > USED AT LINE 501 IN monty.asm
                    > USED AT LINE 536 IN monty.asm
                    > USED AT LINE 538 IN monty.asm
NUM3:               047A DEFINED AT LINE 522 IN monty.asm
                    > USED AT LINE 517 IN monty.asm
HEXNUM:             047D DEFINED AT LINE 526 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
HEXNUM1:            0480 DEFINED AT LINE 528 IN monty.asm
                    > USED AT LINE 545 IN monty.asm
HEXNUM2:            0488 DEFINED AT LINE 534 IN monty.asm
                    > USED AT LINE 532 IN monty.asm
STRING:             049A DEFINED AT LINE 550 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
STRING1:            04A3 DEFINED AT LINE 557 IN monty.asm
                    > USED AT LINE 564 IN monty.asm
                    > USED AT LINE 566 IN monty.asm
STRING2:            04A6 DEFINED AT LINE 561 IN monty.asm
                    > USED AT LINE 556 IN monty.asm
CHAR:               04C2 DEFINED AT LINE 583 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
CHAR1:              04C5 DEFINED AT LINE 585 IN monty.asm
                    > USED AT LINE 596 IN monty.asm
CHAR2:              04D1 DEFINED AT LINE 594 IN monty.asm
                    > USED AT LINE 591 IN monty.asm
CHAR3:              04D4 DEFINED AT LINE 597 IN monty.asm
                    > USED AT LINE 589 IN monty.asm
IDENTU:             04D7 DEFINED AT LINE 601 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENTL:             04DC DEFINED AT LINE 605 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENT1:             04E1 DEFINED AT LINE 609 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
ASSIGN:             04EE DEFINED AT LINE 621 IN monty.asm
                    > USED AT LINE 300 IN monty.asm
ASSIGN1:            04FC DEFINED AT LINE 631 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
ARG_LIST:           04FE DEFINED AT LINE 648 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARG_LIST1:          0508 DEFINED AT LINE 655 IN monty.asm
                    > USED AT LINE 673 IN monty.asm
ARG_LIST2:          0514 DEFINED AT LINE 663 IN monty.asm
                    > USED AT LINE 660 IN monty.asm
ARG_LIST3:          051C DEFINED AT LINE 671 IN monty.asm
                    > USED AT LINE 662 IN monty.asm
                    > USED AT LINE 669 IN monty.asm
ARG_LIST4:          051F DEFINED AT LINE 674 IN monty.asm
                    > USED AT LINE 658 IN monty.asm
ARG_LIST5:          0524 DEFINED AT LINE 679 IN monty.asm
                    > USED AT LINE 677 IN monty.asm
BLOCK:              0530 DEFINED AT LINE 690 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
BLOCK1:             0534 DEFINED AT LINE 694 IN monty.asm
                    > USED AT LINE 698 IN monty.asm
                    > USED AT LINE 720 IN monty.asm
                    > USED AT LINE 723 IN monty.asm
                    > USED AT LINE 728 IN monty.asm
                    > USED AT LINE 732 IN monty.asm
BLOCK2:             0560 DEFINED AT LINE 721 IN monty.asm
                    > USED AT LINE 708 IN monty.asm
                    > USED AT LINE 710 IN monty.asm
                    > USED AT LINE 712 IN monty.asm
BLOCK3:             0563 DEFINED AT LINE 724 IN monty.asm
                    > USED AT LINE 715 IN monty.asm
                    > USED AT LINE 717 IN monty.asm
                    > USED AT LINE 719 IN monty.asm
BLOCK4:             056B DEFINED AT LINE 730 IN monty.asm
                    > USED AT LINE 701 IN monty.asm
                    > USED AT LINE 703 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
BLOCK5:             056E DEFINED AT LINE 733 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
BLOCKEND:           0571 DEFINED AT LINE 737 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
BLOCKEND1:          059D DEFINED AT LINE 760 IN monty.asm
                    > USED AT LINE 753 IN monty.asm
BLOCKEND2:          05A9 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
IF:                 05C2 DEFINED AT LINE 790 IN monty.asm
IFTE:               05C7 DEFINED AT LINE 796 IN monty.asm
IFTE1:              05C8 DEFINED AT LINE 798 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
SWITCH:             05D4 DEFINED AT LINE 810 IN monty.asm
INDEX:              05DE DEFINED AT LINE 822 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
INDEX0:             05E6 DEFINED AT LINE 828 IN monty.asm
INDEX1:             05E7 DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 827 IN monty.asm
INDEX2:             05F3 DEFINED AT LINE 839 IN monty.asm
                    > USED AT LINE 836 IN monty.asm
LOOP:               05F6 DEFINED AT LINE 845 IN monty.asm
WORDS:              05F8 DEFINED AT LINE 895 IN monty.asm
BYTES:              05FD DEFINED AT LINE 898 IN monty.asm
BYTES1:             0600 DEFINED AT LINE 900 IN monty.asm
                    > USED AT LINE 897 IN monty.asm
ARRAY:              0605 DEFINED AT LINE 904 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRAYEND:           0621 DEFINED AT LINE 918 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
ARRAYEND1:          0642 DEFINED AT LINE 938 IN monty.asm
                    > USED AT LINE 947 IN monty.asm
ARRAYEND2:          0652 DEFINED AT LINE 950 IN monty.asm
                    > USED AT LINE 936 IN monty.asm
                    > USED AT LINE 962 IN monty.asm
ARRAYEND3:          0665 DEFINED AT LINE 964 IN monty.asm
                    > USED AT LINE 948 IN monty.asm
FRAC:               0680 DEFINED AT LINE 992 IN monty.asm
ABS1:               0686 DEFINED AT LINE 1006 IN monty.asm
EQUALS:             0693 DEFINED AT LINE 1021 IN monty.asm
                    > USED AT LINE 305 IN monty.asm
LESSTHANEQ:         069B DEFINED AT LINE 1029 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
LESSTHAN:           06A0 DEFINED AT LINE 1036 IN monty.asm
                    > USED AT LINE 327 IN monty.asm
LESSTHAN1:          06A5 DEFINED AT LINE 1041 IN monty.asm
                    > USED AT LINE 1032 IN monty.asm
TRUE1:              06A8 DEFINED AT LINE 1044 IN monty.asm
                    > USED AT LINE 1024 IN monty.asm
NULL1:              06AE DEFINED AT LINE 1048 IN monty.asm
FALSE1:             06AE DEFINED AT LINE 1049 IN monty.asm
                    > USED AT LINE 1025 IN monty.asm
                    > USED AT LINE 1039 IN monty.asm
                    > USED AT LINE 1042 IN monty.asm
INPUT:              06B4 DEFINED AT LINE 1056 IN monty.asm
OUTPUT:             06BF DEFINED AT LINE 1068 IN monty.asm
KEY:                06C8 DEFINED AT LINE 1077 IN monty.asm
FILTER:             06D1 DEFINED AT LINE 1084 IN monty.asm
MAP:                06D1 DEFINED AT LINE 1085 IN monty.asm
DIVIDE:             06D3 DEFINED AT LINE 1123 IN monty.asm
                    > USED AT LINE 334 IN monty.asm
DIVIDE1:            06D8 DEFINED AT LINE 1126 IN monty.asm
                    > USED AT LINE 1138 IN monty.asm
DIVIDE2:            06E5 DEFINED AT LINE 1134 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
DIVIDE3:            06E6 DEFINED AT LINE 1136 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
PRTDEC:             06EC DEFINED AT LINE 1181 IN monty.asm
                    > USED AT LINE 405 IN monty.asm
                    > USED AT LINE 1662 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 143
PRTDEC0:            06FB DEFINED AT LINE 1192 IN monty.asm
                    > USED AT LINE 1183 IN monty.asm
PRTDEC1:            071D DEFINED AT LINE 1208 IN monty.asm
                    > USED AT LINE 1196 IN monty.asm
                    > USED AT LINE 1198 IN monty.asm
                    > USED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1202 IN monty.asm
                    > USED AT LINE 1205 IN monty.asm
PRTDEC2:            071F DEFINED AT LINE 1210 IN monty.asm
                    > USED AT LINE 1213 IN monty.asm
PRTDEC3:            072F DEFINED AT LINE 1222 IN monty.asm
                    > USED AT LINE 1217 IN monty.asm
PRTDEC4:            0730 DEFINED AT LINE 1224 IN monty.asm
                    > USED AT LINE 1221 IN monty.asm
PRTHEX:             0734 DEFINED AT LINE 1228 IN monty.asm
                    > USED AT LINE 390 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            073F DEFINED AT LINE 1236 IN monty.asm
                    > USED AT LINE 1231 IN monty.asm
                    > USED AT LINE 1233 IN monty.asm
PRTHEX3:            0748 DEFINED AT LINE 1244 IN monty.asm
                    > USED AT LINE 1242 IN monty.asm
PRTSTR0:            0753 DEFINED AT LINE 1252 IN monty.asm
                    > USED AT LINE 1258 IN monty.asm
PRTSTR:             0757 DEFINED AT LINE 1255 IN monty.asm
                    > USED AT LINE 395 IN monty.asm
                    > USED AT LINE 1322 IN monty.asm
NESTING:            075C DEFINED AT LINE 1271 IN monty.asm
                    > USED AT LINE 1567 IN monty.asm
                    > USED AT LINE 1608 IN monty.asm
NESTING0:           0766 DEFINED AT LINE 1277 IN monty.asm
                    > USED AT LINE 1273 IN monty.asm
                    > USED AT LINE 1275 IN monty.asm
NESTING1A:          076D DEFINED AT LINE 1282 IN monty.asm
                    > USED AT LINE 1279 IN monty.asm
NESTING1:           0770 DEFINED AT LINE 1285 IN monty.asm
                    > USED AT LINE 1276 IN monty.asm
NESTING2:           077F DEFINED AT LINE 1294 IN monty.asm
                    > USED AT LINE 1289 IN monty.asm
                    > USED AT LINE 1291 IN monty.asm
NESTING3:           0781 DEFINED AT LINE 1297 IN monty.asm
                    > USED AT LINE 1293 IN monty.asm
NESTING4:           078C DEFINED AT LINE 1304 IN monty.asm
                    > USED AT LINE 1299 IN monty.asm
                    > USED AT LINE 1301 IN monty.asm
PROMPT:             078E DEFINED AT LINE 1308 IN monty.asm
                    > USED AT LINE 1551 IN monty.asm
CRLF:               0797 DEFINED AT LINE 1313 IN monty.asm
                    > USED AT LINE 1620 IN monty.asm
PRINTSTR:           079E DEFINED AT LINE 1320 IN monty.asm
                    > USED AT LINE 1309 IN monty.asm
                    > USED AT LINE 1314 IN monty.asm
                    > USED AT LINE 1547 IN monty.asm
                    > USED AT LINE 1660 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 136
EXECSTR:            07A5 DEFINED AT LINE 1329 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               07B0 DEFINED AT LINE 1340 IN monty.asm
GO:                 07B2 DEFINED AT LINE 1347 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
                    > USED AT LINE 804 IN monty.asm
                    > USED AT LINE 806 IN monty.asm
                    > USED AT LINE 818 IN monty.asm
GO1:                07B9 DEFINED AT LINE 1353 IN monty.asm
                    > USED AT LINE 1351 IN monty.asm
GO2:                07E0 DEFINED AT LINE 1374 IN monty.asm
                    > USED AT LINE 1366 IN monty.asm
                    > USED AT LINE 1398 IN monty.asm
GO3:                07E5 DEFINED AT LINE 1378 IN monty.asm
                    > USED AT LINE 1373 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
GO10:               07F3 DEFINED AT LINE 1387 IN monty.asm
                    > USED AT LINE 1356 IN monty.asm
GO11:               0800 DEFINED AT LINE 1399 IN monty.asm
                    > USED AT LINE 1396 IN monty.asm
GO12:               0806 DEFINED AT LINE 1405 IN monty.asm
                    > USED AT LINE 1409 IN monty.asm
GO13:               080B DEFINED AT LINE 1410 IN monty.asm
                    > USED AT LINE 1404 IN monty.asm
FUNC:               0819 DEFINED AT LINE 1424 IN monty.asm
                    > USED AT LINE 374 IN monty.asm
FUNC1:              0829 DEFINED AT LINE 1438 IN monty.asm
                    > USED AT LINE 1461 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
                    > USED AT LINE 1469 IN monty.asm
                    > USED AT LINE 1473 IN monty.asm
FUNC2:              0853 DEFINED AT LINE 1462 IN monty.asm
                    > USED AT LINE 1450 IN monty.asm
                    > USED AT LINE 1452 IN monty.asm
                    > USED AT LINE 1454 IN monty.asm
FUNC3:              0856 DEFINED AT LINE 1465 IN monty.asm
                    > USED AT LINE 1456 IN monty.asm
                    > USED AT LINE 1458 IN monty.asm
                    > USED AT LINE 1460 IN monty.asm
FUNC4:              085E DEFINED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1444 IN monty.asm
                    > USED AT LINE 1446 IN monty.asm
                    > USED AT LINE 1448 IN monty.asm
FUNC4A:             0861 DEFINED AT LINE 1474 IN monty.asm
                    > USED AT LINE 1470 IN monty.asm
ARG:                086D DEFINED AT LINE 1485 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARG0:               088B DEFINED AT LINE 1506 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
ARG0A:              0894 DEFINED AT LINE 1514 IN monty.asm
                    > USED AT LINE 1491 IN monty.asm
                    > USED AT LINE 1498 IN monty.asm
ARG1:               0899 DEFINED AT LINE 1517 IN monty.asm
                    > USED AT LINE 1510 IN monty.asm
ARG1A:              08A1 DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1516 IN monty.asm
INIT:               08A4 DEFINED AT LINE 1528 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1546 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              08BD DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1541 IN monty.asm
START:              08C2 DEFINED AT LINE 1544 IN monty.asm
INTERPRET:          08D8 DEFINED AT LINE 1550 IN monty.asm
                    > USED AT LINE 1647 IN monty.asm
                    > USED AT LINE 1663 IN monty.asm
INTERPRET2:         08E2 DEFINED AT LINE 1556 IN monty.asm
                    > USED AT LINE 1600 IN monty.asm
INTERPRET3:         08EA DEFINED AT LINE 1563 IN monty.asm
                    > USED AT LINE 1572 IN monty.asm
INTERPRET4:         08F0 DEFINED AT LINE 1569 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
INTERPRET5:         08F5 DEFINED AT LINE 1575 IN monty.asm
                    > USED AT LINE 1609 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
INTERPRET6:         0906 DEFINED AT LINE 1602 IN monty.asm
                    > USED AT LINE 1578 IN monty.asm
INTERPRET7:         0914 DEFINED AT LINE 1611 IN monty.asm
                    > USED AT LINE 1583 IN monty.asm
INTERPRET8:         0927 DEFINED AT LINE 1625 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
NEXT:               092F DEFINED AT LINE 1631 IN monty.asm
                    > USED AT LINE 73 IN monty.asm
                    > USED AT LINE 1635 IN monty.asm
NEXT1:              0942 DEFINED AT LINE 1644 IN monty.asm
                    > USED AT LINE 1636 IN monty.asm
NEXT2:              0949 DEFINED AT LINE 1648 IN monty.asm
                    > USED AT LINE 1638 IN monty.asm
EXIT_:              094F DEFINED AT LINE 1655 IN monty.asm
                    > USED AT LINE 1646 IN monty.asm
ERROR:              0952 DEFINED AT LINE 1659 IN monty.asm
                    > USED AT LINE 376 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1359 IN monty.asm
                    > USED AT LINE 1530 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1535 IN monty.asm
RESTARTS:           19D0 DEFINED AT LINE 10 IN ram.asm
RST08:              19D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              19D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              19D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              19D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              19D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              19DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               19DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             19DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             19E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            19E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            19E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            19E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1532 IN monty.asm
VFRAC:              19E6 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 335 IN monty.asm
                    > USED AT LINE 993 IN monty.asm
VDATAWIDTH:         19E8 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 626 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 901 IN monty.asm
                    > USED AT LINE 934 IN monty.asm
VTIBPTR:            19EA DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
VPOINTER:           19EC DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 351 IN monty.asm
                    > USED AT LINE 353 IN monty.asm
                    > USED AT LINE 354 IN monty.asm
                    > USED AT LINE 613 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 832 IN monty.asm
                    > USED AT LINE 1520 IN monty.asm
VLASTDEF:           19EE DEFINED AT LINE 30 IN ram.asm
VHASHSTR:           19F0 DEFINED AT LINE 31 IN ram.asm
VNEXT:              19F2 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1529 IN monty.asm
VHEAPPTR:           19F4 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 551 IN monty.asm
                    > USED AT LINE 570 IN monty.asm
                    > USED AT LINE 650 IN monty.asm
                    > USED AT LINE 681 IN monty.asm
                    > USED AT LINE 928 IN monty.asm
                    > USED AT LINE 974 IN monty.asm
                    > USED AT LINE 975 IN monty.asm
                    > USED AT LINE 1425 IN monty.asm
                    > USED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1479 IN monty.asm
VTEMP1:             19F6 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 921 IN monty.asm
                    > USED AT LINE 976 IN monty.asm
VTEMP2:             19F8 DEFINED AT LINE 36 IN ram.asm
TBPTR:              19FA DEFINED AT LINE 38 IN ram.asm
TIB:                1A00 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1560 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
                    > USED AT LINE 1627 IN monty.asm
PAD:                1B00 DEFINED AT LINE 44 IN ram.asm
HEAP:               1C00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 74 IN monty.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2251S43:  4069 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2252S43:  40D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2253S43:  414F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2254S43:  41B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2255S43:  4217 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2256S43:  427B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2257S43:  42DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2258S43:  4345 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2259S43:  43AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2260S43:  4413 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2261S43:  4479 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2262S43:  44E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2263S43:  454B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2264S43:  45B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  461B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2266S43:  4689 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2267S43:  46F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2268S43:  4763 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2269S43:  47D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2270S43:  483F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2271S43:  48B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2272S43:  4925 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2273S43:  4995 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2274S43:  4A01 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2275S43:  4A6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2276S43:  4AD9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2277S43:  4B45 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2278S43:  4BB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2279S43:  4C25 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2280S43:  4C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2281S43:  4D01 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2282S43:  4D6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2283S43:  4DD9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2284S43:  4E45 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2285S43:  4EB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2286S43:  4F1D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2287S43:  4F89 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2288S43:  4FF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2289S43:  5061 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2290S43:  50CF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2291S43:  513D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2292S43:  51AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2293S43:  521B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2294S43:  527F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2295S43:  52EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2296S43:  535D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2297S43:  53CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2298S43:  543F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2299S43:  54B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2300S43:  5525 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            5530 DEFINED AT LINE 141
