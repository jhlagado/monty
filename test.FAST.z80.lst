0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4E               LD   (RST08),HL   
0094   22 D2 4E               LD   (RST10),HL   
0097   22 D4 4E               LD   (RST18),HL   
009A   22 D6 4E               LD   (RST20),HL   
009D   22 D8 4E               LD   (RST28),HL   
00A0   22 DA 4E               LD   (RST30),HL   
00A3   22 DE 4E               LD   (INTVEC),HL   
00A6   22 E0 4E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4C                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4D                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   51 0F                  DW   next   ; nNext
01E8   22 4F                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 4E            LD   de,(vPointer)   
0208   21 F8 4E               LD   hl,vPointer   
020B   C3 D0 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 53 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 AC 04               JP   percent   
021C                RBRACE_:      
021C   C3 A3 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 92 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 10 0C               JP   caret   
0228                COMMA_:      
0228   C3 51 0B               JP   comma   
022B                DQUOTE_:      
022B   C3 92 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 51 0B               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD E5 0C               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 4E               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 4E            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 70 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 4E               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 4E               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 4E                  LD   h,msb(vars)   
02BA   22 F8 4E               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 4E               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 4E               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 4E               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 4E               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 11 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 11 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD AF 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 70 0F               JP   error   
0416                LAMBDA2:      
0416   CD E5 0C               CALL   parseBlock   
0419   CD 4F 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 FA 4E            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                GRAVE:       
047C                PRINTSTRING:      
047C   03                     INC   bc   ; move to first char
047D   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
0481   18 03                  JR   printString1   
0483                PRINTSTRING0:      
0483   12                     LD   (de),a   ; a -> buffer*
0484   13                     INC   de   ; string*++,
0485   03                     INC   bc   
0486                PRINTSTRING1:      
0486   0A                     LD   a,(bc)   ; a <- string*
0487   FE 60                  CP   "`"   ; if ` exit loop
0489   20 F8                  JR   nz,printString0   
048B                             ; inc bc
048B   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
048F   C3 2B 0B               JP   dotNext   
0492                             ; string                        ;38
0492                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0492                QUOTE:       
0492                DQUOTE:      
0492                STRING:      
0492   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0495   E5                     PUSH   hl   ; save start of string
0496   0A                     LD   a,(bc)   
0497   5F                     LD   e,a   ; e = matching terminator
0498   03                     INC   bc   ; point to next char
0499   18 03                  JR   string2   
049B                STRING1:      
049B   77                     LD   (hl),a   
049C   23                     INC   hl   ; increase count
049D   03                     INC   bc   ; point to next char
049E                STRING2:      
049E   0A                     LD   a,(bc)   
049F   BB                     CP   e   ; is it the string terminator
04A0   28 02                  JR   z,string3   
04A2   18 F7                  JR   string1   
04A4                STRING3:      
04A4   AF                     XOR   a   ; write NUL to terminate string
04A5   77                     LD   (hl),a   ; hl = end of string
04A6   23                     INC   hl   
04A7   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04AA   DD E9                  JP   (ix)   
04AC                             ; %a .. %z                      43
04AC                             ; -- value
04AC                             ; returns value of arg
04AC                PERCENT:      
04AC                ARG:         
04AC   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04AF   FD 56 05               LD   d,(iy+5)   
04B2   EB                     EX   de,hl   
04B3   7D                     LD   a,l   ; arg_list* == null, skip
04B4   B4                     OR   h   
04B5   28 1A                  JR   z,arg0a   
04B7   23                     INC   hl   ; a = num_args, hl = arg_list*
04B8   7E                     LD   a,(hl)   
04B9   23                     INC   hl   
04BA   B7                     OR   a   
04BB   28 14                  JR   z,arg0a   ; num_args == 0, skip
04BD   5F                     LD   e,a   ; e = a = num_args
04BE   03                     INC   bc   ; a = next char = dollar_name
04BF   0A                     LD   a,(bc)   
04C0   C5                     PUSH   bc   ; save IP
04C1   43                     LD   b,e   ; b = e = num_args
04C2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04C5   FD 56 03               LD   d,(iy+3)   
04C8                ARG0:        
04C8   1B                     DEC   de   ; a = dollar_name, de = next arg*
04C9   1B                     DEC   de   
04CA   BE                     CP   (hl)   
04CB   28 09                  JR   z,arg1   
04CD   23                     INC   hl   ; hl = next arg_list*
04CE   10 F8                  DJNZ   arg0   
04D0   C1                     POP   bc   ; no match, restore IP
04D1                ARG0A:       
04D1   11 00 00               LD   de,0   ; return 0
04D4   18 08                  JR   arg1a   
04D6                ARG1:        
04D6   C1                     POP   bc   ; restore IP
04D7   EB                     EX   de,hl   ; hl = arg*
04D8   22 F8 4E               LD   (vPointer),hl   ; store arg* in setter
04DB   5E                     LD   e,(hl)   
04DC   23                     INC   hl   
04DD   56                     LD   d,(hl)   ; de = arg
04DE                ARG1A:       
04DE   D5                     PUSH   de   ; push arg
04DF   DD E9                  JP   (ix)   
04E1                             ;********************** PAGE 3,4 END *********************************************
04E1                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 07 0E               CALL   xjumpTable   
0503   61                     DB   "a"   ; .a print array
0504   E3 0A                  DW   dotArray   
0506   63                     DB   "c"   ; .c print char
0507   C9 05                  DW   dotChar   
0509   73                     DB   "s"   ; .s print string
050A   B4 05                  DW   dotString_   
050C   00                     DB   NUL   ; .  print number
050D                             ; /bd buffer decimal
050D                             ; value --
050D                DOTNUMBER_:      
050D   3A E8 4E               LD   a,(vNumBase)   
0510   FE 10                  CP   16   
0512   CA 7E 05               JP   z,dotHex   ; else falls through
0515   C3 18 05               JP   dotDec   
0518                             ; print decimal                 ; 70
0518                             ; value --
0518                DOTDEC:      
0518   ED 5B EC 4E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
051C   D9                     EXX      
051D   E1                     POP   hl   ; hl = value
051E   3A E6 4E               LD   a,(vDataWidth)   
0521   3D                     DEC   a   
0522   20 02                  JR   nz,dotDecX   
0524   26 00                  LD   h,0   
0526                DOTDECX:      
0526   CD 35 05               CALL   dotDec0   
0529   D9                     EXX      ; de = buffer*' bc = IP
052A   3E 20                  LD   a," "   ; append space to buffer
052C   12                     LD   (de),a   
052D   13                     INC   de   ; string*++,
052E   ED 53 EC 4E            LD   (vBufPtr),de   ; update buffer* with buffer*'
0532   C3 2B 0B               JP   dotNext   
0535                             ; hl = value
0535                             ; de' = buffer*
0535                             ; a, bc, de, hl destroyed
0535                DOTDEC0:      
0535   CB 7C                  BIT   7,h   
0537   28 0C                  JR   z,dotDec1   
0539   D9                     EXX      
053A   3E 2D                  LD   a,"-"   
053C   12                     LD   (de),a   
053D   13                     INC   de   
053E   D9                     EXX      
053F   AF                     XOR   a   
0540   95                     SUB   l   
0541   6F                     LD   l,a   
0542   9F                     SBC   a,a   
0543   94                     SUB   h   
0544   67                     LD   h,a   
0545                DOTDEC1:      
0545   0E 00                  LD   c,0   ; leading zeros flag = false
0547   11 F0 D8               LD   de,-10000   
054A   CD 65 05               CALL   dotDec2   
054D   11 18 FC               LD   de,-1000   
0550   CD 65 05               CALL   dotDec2   
0553   11 9C FF               LD   de,-100   
0556   CD 65 05               CALL   dotDec2   
0559   1E F6                  LD   e,-10   
055B   CD 65 05               CALL   dotDec2   
055E   0C                     INC   c   ; flag = true for at least digit
055F   1E FF                  LD   e,-1   
0561   CD 65 05               CALL   dotDec2   
0564   C9                     RET      
0565                DOTDEC2:      
0565   06 2F                  LD   b,"0"-1   
0567                DOTDEC3:      
0567   04                     INC   b   
0568   19                     ADD   hl,de   
0569   38 FC                  JR   c,dotDec3   
056B   ED 52                  SBC   hl,de   
056D   3E 30                  LD   a,"0"   
056F   B8                     CP   b   
0570   20 05                  JR   nz,dotDec4   
0572   AF                     XOR   a   
0573   B1                     OR   c   
0574   C8                     RET   z   
0575   18 01                  JR   dotDec5   
0577                DOTDEC4:      
0577   0C                     INC   c   
0578                DOTDEC5:      
0578   78                     LD   a,b   
0579   D9                     EXX      
057A   12                     LD   (de),a   
057B   13                     INC   de   
057C   D9                     EXX      
057D   C9                     RET      
057E                             ; buffer hex                    37
057E                             ; value --
057E                DOTHEX:      
057E   E1                     POP   hl   ; hl = value
057F   ED 5B EC 4E            LD   de,(vBufPtr)   
0583   3E 24                  LD   a,"$"   ; # prefix
0585   12                     LD   (de),a   
0586   13                     INC   de   ; string*++,
0587   3A E6 4E               LD   a,(vDataWidth)   
058A   3D                     DEC   a   
058B   28 04                  JR   z,dotHex0   
058D   7C                     LD   a,h   
058E   CD A0 05               CALL   dotHex1   
0591                DOTHEX0:      
0591   7D                     LD   a,l   
0592   CD A0 05               CALL   dotHex1   
0595   3E 20                  LD   a," "   ; append space to buffer
0597   12                     LD   (de),a   
0598   13                     INC   de   ; string*++,
0599   ED 53 EC 4E            LD   (vBufPtr),de   
059D   C3 2B 0B               JP   dotNext   
05A0                DOTHEX1:      
05A0   F5                     PUSH   af   
05A1   1F                     RRA      
05A2   1F                     RRA      
05A3   1F                     RRA      
05A4   1F                     RRA      
05A5   CD A9 05               CALL   dotHex2   
05A8   F1                     POP   af   
05A9                DOTHEX2:      
05A9   E6 0F                  AND   0x0F   
05AB   C6 90                  ADD   a,0x90   
05AD   27                     DAA      
05AE   CE 40                  ADC   a,0x40   
05B0   27                     DAA      
05B1   12                     LD   (de),a   
05B2   13                     INC   de   ; string*++,
05B3   C9                     RET      
05B4                             ; /bs buffered string
05B4                             ; string* --
05B4                DOTSTRING_:      
05B4   E1                     POP   hl   ; hl = string*
05B5   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
05B9   18 03                  JR   dotString1   
05BB                DOTSTRING0:      
05BB   12                     LD   (de),a   ; a -> buffer*
05BC   13                     INC   de   ; string*++,
05BD   23                     INC   hl   
05BE                DOTSTRING1:      
05BE   7E                     LD   a,(hl)   ; a <- string*
05BF   B7                     OR   a   ; if NUL exit loop
05C0   20 F9                  JR   nz,dotString0   
05C2   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
05C6   C3 2B 0B               JP   dotNext   
05C9                             ; .c print char
05C9                             ; char --
05C9                DOTCHAR:      
05C9   E1                     POP   hl   ; a = char
05CA   7D                     LD   a,l   
05CB   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
05CF   12                     LD   (de),a   
05D0   13                     INC   de   
05D1   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*'
05D5   C3 2B 0B               JP   dotNext   
05D8                             ;********************** PAGE 5 END *********************************************
05D8                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 29 07               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD F1 0D               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   36                     DB   lsb(command_b_)   
060D   CA                     DB   lsb(command_nop_)   
060E   43                     DB   lsb(command_d_)   
060F   CA                     DB   lsb(command_nop_)   
0610   4A                     DB   lsb(command_f_)   
0611   CA                     DB   lsb(command_nop_)   
0612   66                     DB   lsb(command_h_)   
0613   6D                     DB   lsb(command_i_)   
0614   CA                     DB   lsb(command_nop_)   
0615   74                     DB   lsb(key_)   
0616   CA                     DB   lsb(command_nop_)   
0617   78                     DB   lsb(command_m_)   
0618   CA                     DB   lsb(command_nop_)   
0619   7F                     DB   lsb(output_)   
061A   83                     DB   lsb(command_p_)   
061B   87                     DB   lsb(command_q_)   
061C   8E                     DB   lsb(command_r_)   
061D   9B                     DB   lsb(command_s_)   
061E   AB                     DB   lsb(true_)   
061F   CA                     DB   lsb(command_nop_)   
0620   AF                     DB   lsb(command_v_)   
0621   BF                     DB   lsb(command_w_)   
0622   C6                     DB   lsb(xor_)   
0623   CA                     DB   lsb(command_nop_)   
0624   CA                     DB   lsb(command_nop_)   
0625   CD                     DB   lsb(command_default_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   62                     DB   "b"   ; /ab absolute
0627   D1 06                  DW   absolute   
0629   64                     DB   "d"   ; /ad address of
062A   DE 06                  DW   addrOf   
062C   69                     DB   "i"   ; /ad address of
062D   63 08                  DW   arrayIter   
062F   73                     DB   "s"   ; /as array size
0630   FF 06                  DW   arraySize   
0632   00                     DB   NUL   
0633   C3 46 07               JP   error1   
0636                COMMAND_B_:      
0636   62                     DB   "b"   ; /bb bye bye cold boot
0637   BC 0E                  DW   coldStart   
0639   6D                     DB   "m"   ; /bm byte mode
063A   21 07                  DW   byteMode   
063C   72                     DB   "r"   ; /br break from loop
063D   07 07                  DW   break   
063F   00                     DB   NUL   
0640   C3 21 07               JP   byteMode   ; /b byte mode
0643                COMMAND_D_:      
0643   62                     DB   "b"   ; /db decimal base
0644   3E 07                  DW   decBase   
0646   00                     DB   NUL   
0647   C3 3E 07               JP   decBase   ; /d decimal
064A                COMMAND_F_:      
064A   64                     DB   "d"   ; /fd fold
064B   0C 0A                  DW   fold   
064D   65                     DB   "e"   ; /fe forEach
064E   5E 0A                  DW   forEach   
0650   73                     DB   "s"   ; /fs funcSrc
0651   AA 0A                  DW   funcSrc   
0653   74                     DB   "t"   ; /ft filter
0654   AE 09                  DW   filter   
0656   31                     DB   "1"   
0657   B9 0F                  DW   f1   
0659   32                     DB   "2"   
065A   01 10                  DW   f2   
065C   33                     DB   "3"   
065D   0D 10                  DW   f3   
065F   34                     DB   "4"   
0660   19 10                  DW   f4   
0662   00                     DB   NUL   
0663   C3 A2 03               JP   false1   
0666                COMMAND_H_:      
0666   62                     DB   "b"   ; /hb hex base
0667   4C 07                  DW   hexBase   
0669   00                     DB   NUL   
066A   C3 4C 07               JP   hexBase   ; /h hex base
066D                             ; 6
066D                COMMAND_I_:      
066D   6E                     DB   "n"   ; /in input
066E   52 07                  DW   input   
0670   00                     DB   NUL   
0671   C3 46 07               JP   error1   
0674                KEY_:        
0674   00                     DB   NUL   
0675   C3 5D 07               JP   key   
0678                COMMAND_M_:      
0678   70                     DB   "p"   ; /mp map
0679   6C 09                  DW   map   
067B   00                     DB   NUL   
067C   C3 46 07               JP   error1   
067F                OUTPUT_:      
067F   00                     DB   NUL   
0680   C3 66 07               JP   output   
0683                             ; 4
0683                COMMAND_P_:      
0683   00                     DB   NUL   
0684   C3 46 07               JP   error1   
0687                             ; 6
0687                COMMAND_Q_:      
0687   74                     DB   "t"   ; /qt quit
0688   6F 07                  DW   quit   
068A   00                     DB   NUL   
068B   C3 46 07               JP   error1   
068E                COMMAND_R_:      
068E   63                     DB   "c"   ; /rc tail call optimisation
068F   79 07                  DW   recur   
0691   65                     DB   "e"   ; /re remainder
0692   7F 07                  DW   remain   
0694   67                     DB   "g"   ; /rg range src
0695   E7 07                  DW   rangeSrc   
0697   00                     DB   NUL   
0698   C3 46 07               JP   error1   
069B                COMMAND_S_:      
069B   62                     DB   "b"   
069C   85 07                  DW   stringBegin   
069E   65                     DB   "e"   
069F   8D 07                  DW   stringEnd   
06A1   69                     DB   "i"   
06A2   E4 08                  DW   stringIter   
06A4   73                     DB   "s"   
06A5   BC 07                  DW   stringSize   
06A7   00                     DB   NUL   
06A8   C3 46 07               JP   error1   
06AB                TRUE_:       
06AB   00                     DB   NUL   
06AC   C3 9C 03               JP   true1   
06AF                COMMAND_V_:      
06AF   68                     DB   "h"   
06B0   BE 07                  DW   varHeapPtr   
06B2   74                     DB   "t"   
06B3   C7 07                  DW   varTIBPtr   
06B5   48                     DB   "H"   
06B6   32 07                  DW   constHeapStart   
06B8   54                     DB   "T"   
06B9   38 07                  DW   constTIBStart   
06BB   00                     DB   NUL   
06BC   C3 46 07               JP   error1   
06BF                COMMAND_W_:      
06BF   6D                     DB   "m"   ; /wm word mode
06C0   D6 07                  DW   wordMode   
06C2   00                     DB   NUL   
06C3   C3 D6 07               JP   wordMode   ; /w word mode
06C6                XOR_:        
06C6   00                     DB   NUL   
06C7   C3 DC 07               JP   xor   
06CA                             ; 2
06CA                COMMAND_NOP_:      
06CA   00                     DB   NUL   
06CB   DD E9                  JP   (ix)   
06CD                             ; 3
06CD                COMMAND_DEFAULT_:      
06CD   00                     DB   NUL   
06CE   C3 22 04               JP   div   
06D1                             ;********************** PAGE 6 END *********************************************
06D1                             ; /ab absolute
06D1                             ; num -- num
06D1                ABSOLUTE:      
06D1   E1                     POP   hl   
06D2   CB 7C                  BIT   7,h   
06D4   C8                     RET   z   
06D5   AF                     XOR   a   
06D6   95                     SUB   l   
06D7   6F                     LD   l,a   
06D8   9F                     SBC   a,a   
06D9   94                     SUB   h   
06DA   67                     LD   h,a   
06DB   E5                     PUSH   hl   
06DC   DD E9                  JP   (ix)   
06DE                             ; /ad addrOf                    24
06DE                             ; char -- addr
06DE                ADDROF:      
06DE   E1                     POP   hl   ; a = char
06DF   7D                     LD   a,l   
06E0   FE 7B                  CP   "z"+1   ; if a > z then exit
06E2   30 19                  JR   nc,addrOf2   
06E4   D6 41                  SUB   "A"   ; a - 65
06E6   38 15                  JR   c,addrOf2   ; if < A then exit
06E8   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
06EA   38 06                  JR   c,addrOf1   
06EC   D6 06                  SUB   "a"-("Z"+1)   
06EE   FE 1A                  CP   "Z"-"A"+1   
06F0   38 0B                  JR   c,addrOf2   ; if < a then exit
06F2                ADDROF1:      
06F2   87                     ADD   a,a   ; double a
06F3   21 00 4E               LD   hl,VARS   ; hl = VARS + a
06F6   85                     ADD   a,l   
06F7   6F                     LD   l,a   
06F8   3E 00                  LD   a,0   
06FA   8C                     ADC   a,h   
06FB   67                     LD   h,a   
06FC   E5                     PUSH   hl   
06FD                ADDROF2:      
06FD   DD E9                  JP   (ix)   
06FF                             ; /as size of an array, num elements, ignores vDataWidth :-/
06FF                             ; array* -- num
06FF                ARRAYSIZE:      
06FF   E1                     POP   hl   
0700   2B                     DEC   hl   ; msb size
0701   56                     LD   d,(hl)   
0702   2B                     DEC   hl   ; lsb size
0703   5E                     LD   e,(hl)   
0704   D5                     PUSH   de   
0705   DD E9                  JP   (ix)   
0707                             ; 13
0707                             ; /br break from loop
0707                             ; --
0707                BREAK:       
0707   E1                     POP   hl   ; hl = condition, break if false
0708   7D                     LD   a,l   
0709   B4                     OR   h   
070A   28 02                  JR   z,break1   
070C   DD E9                  JP   (ix)   
070E                BREAK1:      
070E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0710   FD 54                  LD   d,iyh   
0712   21 08 00               LD   hl,8   
0715   19                     ADD   hl,de   
0716   23                     INC   hl   
0717   23                     INC   hl   
0718   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
071B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
071E   C3 A3 0B               JP   blockEnd   
0721                             ; /b
0721                BYTEMODE:      
0721   21 01 00               LD   hl,1   
0724                BYTEMODE1:      
0724   22 E6 4E               LD   (vDataWidth),hl   
0727   DD E9                  JP   (ix)   
0729                             ; //
0729                COMMENT:      
0729   03                     INC   bc   ; point to next char
072A   0A                     LD   a,(bc)   
072B   FE 20                  CP   " "   ; terminate on any char less than SP
072D   30 FA                  JR   nc,comment   
072F   0B                     DEC   bc   
0730   DD E9                  JP   (ix)   
0732                CONSTHEAPSTART:      
0732   11 22 4F               LD   de,HEAP   
0735   C3 D3 07               JP   constant   
0738                CONSTTIBSTART:      
0738   11 00 4C               LD   de,TIB   
073B   C3 D3 07               JP   constant   
073E                DECBASE:      
073E   21 0A 00               LD   hl,10   
0741                DECBASE1:      
0741   22 E8 4E               LD   (vNumBase),hl   
0744   DD E9                  JP   (ix)   
0746                ERROR1:      
0746   21 01 00               LD   hl,1   ; error 1: unknown command
0749   C3 70 0F               JP   error   
074C                HEXBASE:      
074C   21 10 00               LD   hl,16   
074F   C3 41 07               JP   decBase1   
0752                             ; Z80 port input
0752                             ; port -- value
0752                INPUT:       
0752   E1                     POP   hl   
0753   59                     LD   e,c   ; save IP
0754   4D                     LD   c,l   
0755   ED 68                  IN   l,(c)   
0757   26 00                  LD   h,0   
0759   4B                     LD   c,e   ; restore IP
075A   E5                     PUSH   hl   
075B   DD E9                  JP   (ix)   
075D                             ; /k                              6
075D                KEY:         
075D   CD 81 00               CALL   getchar   
0760   26 00                  LD   h,0   
0762   6F                     LD   l,a   
0763   E5                     PUSH   hl   
0764   DD E9                  JP   (ix)   
0766                             ; /o Z80 port output
0766                             ; value port --
0766                OUTPUT:      
0766   E1                     POP   hl   
0767   59                     LD   e,c   ; save IP
0768   4D                     LD   c,l   
0769   E1                     POP   hl   
076A   ED 69                  OUT   (c),l   
076C   4B                     LD   c,e   ; restore IP
076D   DD E9                  JP   (ix)   
076F                             ; /qt
076F                             ; bool --
076F                QUIT:        
076F   E1                     POP   hl   ; hl = condition, exit if true
0770   7D                     LD   a,l   
0771   B4                     OR   h   
0772   20 02                  JR   nz,quit1   
0774   DD E9                  JP   (ix)   
0776                QUIT1:       
0776   C3 A3 0B               JP   blockEnd   
0779                RECUR:       
0779   E1                     POP   hl   
077A   22 F2 4E               LD   (vRecur),hl   
077D   DD E9                  JP   (ix)   
077F                REMAIN:      
077F   2A FA 4E               LD   hl,(vRemain)   
0782   E5                     PUSH   hl   
0783   DD E9                  JP   (ix)   
0785                STRINGBEGIN:      
0785   21 FF FF               LD   hl,TRUE   ; string mode = true
0788   22 F6 4E               LD   (vStrMode),hl   
078B   18 27                  JR   stringEnd1   ; save hl in vBufPtr
078D                STRINGEND:      
078D   21 00 00               LD   hl,FALSE   ; string mode = false
0790   22 F6 4E               LD   (vStrMode),hl   
0793   2A EC 4E               LD   hl,(vBufPtr)   ; append NUL to string
0796   AF                     XOR   a   
0797   77                     LD   (hl),a   
0798   23                     INC   hl   ; hl = string_end*
0799   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
079D   11 00 4D               LD   de,BUFFER   ; de = string*
07A0   B7                     OR   a   ; bc = size
07A1   ED 52                  SBC   hl,de   
07A3   44 4D                  LD   bc,hl   
07A5   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = hstring*
07A8   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
07A9   D5                     PUSH   de   ; return hstring*
07AA   ED B0                  LDIR      ; copy size bytes from string* to hstring*
07AC   ED 53 F0 4E            LD   (vHeapPtr),de   ; bump heap to hstring* += size
07B0   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
07B4                STRINGEND1:      
07B4   21 00 4D               LD   hl,BUFFER   ; reset vBufPtr
07B7   22 EC 4E               LD   (vBufPtr),hl   
07BA   DD E9                  JP   (ix)   
07BC                STRINGSIZE:      
07BC   DD E9                  JP   (ix)   
07BE                VARHEAPPTR:      
07BE   ED 5B F0 4E            LD   de,(vHeapPtr)   
07C2   21 F0 4E               LD   hl,vHeapPtr   
07C5   18 09                  JR   variable   
07C7                VARTIBPTR:      
07C7   ED 5B EA 4E            LD   de,(vTIBPtr)   
07CB   21 EA 4E               LD   hl,vTIBPtr   
07CE   18 00                  JR   variable   
07D0                VARIABLE:      
07D0   22 F8 4E               LD   (vPointer),hl   
07D3                CONSTANT:      
07D3   D5                     PUSH   de   
07D4   DD E9                  JP   (ix)   
07D6                             ; /w
07D6                WORDMODE:      
07D6   21 02 00               LD   hl,2   
07D9   C3 24 07               JP   byteMode1   
07DC                XOR:         
07DC   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07DD                XOR1:        
07DD   E1                     POP   hl   
07DE   7B                     LD   a,e   
07DF   AD                     XOR   l   
07E0   6F                     LD   l,a   
07E1   7A                     LD   a,d   
07E2   AC                     XOR   h   
07E3   67                     LD   h,a   
07E4   E5                     PUSH   hl   
07E5   DD E9                  JP   (ix)   
07E7                             ;*******************************************************************
07E7                             ; Monty implementations
07E7                             ;*******************************************************************
07E7                             ; /rg rangeSrc
07E7                             ; begin end step -- src
07E7                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07E7                RANGESRC:      ; range source: begin, end, step, local: L
07E7   CD 10 0C               CALL   go   
07EA   00 00                  DW   NUL   
07EC   F6 07                  DW   rangeSrcM_1875S1425   
07EE   F0 07                  DW   $+2   
07F0   01                     DB   1   
07F1   04 62 65 73 4C         .PSTR   "besL"   
07F6                RANGESRCM_1875S1425:      
07F6   7B                     DB   "{"   
07F7   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0802   5C 6B 74 7B            DB   "\\kt{"   
0806   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
080E   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0814   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
081C   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0824   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
082E   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0836   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
083D   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
0851   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0859   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0860   7D                     DB   "}"   
0861   7D                     DB   "}"   
0862   00                     DB   0   
0863                             ; /ai arrayIter
0863                             ; array* -- src
0863                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0863                ARRAYITER:      
0863   CD 10 0C               CALL   go   
0866   00 00                  DW   NUL   
0868   70 08                  DW   arrayIterM_1894S1445   
086A   6C 08                  DW   $+2   
086C   01                     DB   1   
086D   02 61 4C               .PSTR   "aL"   
0870                ARRAYITERM_1894S1445:      
0870   7B                     DB   "{"   
0871   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
0881   5C 6B 74 7B            DB   "\\kt{"   
0885   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
088D   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0893   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
089B   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
08A3   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
08AA   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08B2   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
08BB   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
08D2   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08DA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E1   7D                     DB   "}"   
08E2   7D                     DB   "}"   
08E3   00                     DB   0   
08E4                             ; /si stringIter
08E4                             ; string* -- src
08E4                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08E4                STRINGITER:      
08E4   CD 10 0C               CALL   go   
08E7   00 00                  DW   NUL   
08E9   F1 08                  DW   stringIterM_1913S1465   
08EB   ED 08                  DW   $+2   
08ED   01                     DB   1   
08EE   02 73 4C               .PSTR   "sL"   
08F1                STRINGITERM_1913S1465:      
08F1   7B                     DB   "{"   
08F2   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08FC   5C 6B 74 7B            DB   "\\kt{"   
0900   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0908   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
090F   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0917   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
091F   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0926   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
0937   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
093F   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0946   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
095A   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0962   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0969   7D                     DB   "}"   
096A   7D                     DB   "}"   
096B   00                     DB   0   
096C                             ; /mp map
096C                             ; src func -- src1
096C                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
096C                MAP:         ; map: source, function
096C   CD 10 0C               CALL   go   
096F   00 00                  DW   NUL   
0971   79 09                  DW   mapM_1933S1487   
0973   75 09                  DW   $+2   
0975   00                     DB   0   
0976   02 73 66               .PSTR   "sf"   
0979                MAPM_1933S1487:      
0979   7B                     DB   "{"   
097A   5C 6B 74 7B            DB   "\\kt{"   
097E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0986   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098A   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
098F   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
099B   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09A4   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09AB   7D                     DB   "}"   
09AC   7D                     DB   "}"   
09AD   00                     DB   0   
09AE                             ; /ft filter
09AE                             ; src pred -- src1
09AE                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09AE                FILTER:      ; filter: source, predicate, local: T
09AE   CD 10 0C               CALL   go   
09B1   00 00                  DW   NUL   
09B3   BC 09                  DW   filterM_1947S1502   
09B5   B7 09                  DW   $+2   
09B7   01                     DB   1   
09B8   03 73 70 54            .PSTR   "spT"   
09BC                FILTERM_1947S1502:      
09BC   7B                     DB   "{"   
09BD   5B 30 5D 25 54 3D      DB   "[0]%T="   
09C3   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09C7   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09CB   5B                     DB   "["   
09CC   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
09D9   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09E1   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09E5   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09EA   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0A00   3F 3F                  DB   "??"   
0A02   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A09   7D                     DB   "}"   
0A0A   7D                     DB   "}"   
0A0B   00                     DB   0   
0A0C                             ; /fd fold
0A0C                             ; reducer is a function like: \\da00bbLi4u
0A0C                             ; src init reducer -- src1
0A0C                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A0C                FOLD:        ; src, init, reducer
0A0C   CD 10 0C               CALL   go   
0A0F   00 00                  DW   NUL   
0A11   1B 0A                  DW   foldM_1966S1522   
0A13   15 0A                  DW   $+2   
0A15   01                     DB   1   
0A16   04 73 69 72 41         .PSTR   "sirA"   
0A1B                FOLDM_1966S1522:      
0A1B   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A1C   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A23   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A27   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A2B   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A30   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A4B   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A54   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A5B   7D                     DB   "}"   
0A5C   7D                     DB   "}"   
0A5D   00                     DB   0   
0A5E                             ; /fe forEach
0A5E                             ; src proc --
0A5E                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A5E                FOREACH:      ; forEach: source, procedure, local: T
0A5E   CD 10 0C               CALL   go   
0A61   00 00                  DW   NUL   
0A63   6C 0A                  DW   forEachM_1980S1537   
0A65   67 0A                  DW   $+2   
0A67   01                     DB   1   
0A68   03 73 70 54            .PSTR   "spT"   
0A6C                FOREACHM_1980S1537:      
0A6C   7B                     DB   "{"   
0A6D   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A73   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A77   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A7F   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A84   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A96   3F 3F                  DB   "??"   ; ifte:
0A98   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0AA1   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AA8   7D                     DB   "}"   
0AA9   00                     DB   0   
0AAA                             ; ; /fs funcSrc
0AAA                             ; ; func -- src
0AAA                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0AAA                FUNCSRC:      ; :f func or block
0AAA   CD 10 0C               CALL   go   
0AAD   00 00                  DW   NUL   
0AAF   B6 0A                  DW   funcSrcM_1994S1552   
0AB1   B3 0A                  DW   $+2   
0AB3   00                     DB   0   
0AB4   01 66                  .PSTR   "f"   
0AB6                FUNCSRCM_1994S1552:      
0AB6   7B                     DB   "{"   
0AB7   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0ABB   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0AC3   5C 64 74 7B            DB   "\\dt{"   
0AC7   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AD9   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AE0   7D                     DB   "}"   
0AE1   7D                     DB   "}"   
0AE2   00                     DB   0   
0AE3                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0AE3                DOTARRAY:      
0AE3   CD 10 0C               CALL   go   
0AE6   00 00                  DW   NUL   
0AE8   F1 0A                  DW   dotArrayM_2004S1563   
0AEA   EC 0A                  DW   $+2   
0AEC   02                     DB   2   
0AED   03 61 62 63            .PSTR   "abc"   
0AF1                DOTARRAYM_2004S1563:      
0AF1   7B                     DB   "{"   
0AF2   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0B29   7D                     DB   "}"   
0B2A   00                     DB   0   
0B2B                DOTNEXT:      
0B2B   3A F6 4E               LD   a,(vStrMode)   ; if string mode then exit
0B2E   3C                     INC   a   
0B2F   20 02                  JR   nz,dotNext1   
0B31   DD E9                  JP   (ix)   
0B33                DOTNEXT1:      
0B33   11 00 4D               LD   de,BUFFER   
0B36   2A EC 4E               LD   hl,(vBufPtr)   
0B39   B7                     OR   a   ; hl = count, de = vHeapPtr
0B3A   ED 52                  SBC   hl,de   
0B3C   C3 45 0B               JP   dotNext3   
0B3F                DOTNEXT2:      
0B3F   1A                     LD   a,(de)   ; print char at char*
0B40   CD 85 00               CALL   putchar   
0B43   13                     INC   de   ; char*++
0B44   2B                     DEC   hl   ; count--
0B45                DOTNEXT3:      
0B45   7D                     LD   a,l   ; count == 0?
0B46   B4                     OR   h   
0B47   20 F6                  JR   nz,dotNext2   ; if not loop
0B49   21 00 4D               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0B4C   22 EC 4E               LD   (vBufPtr),hl   
0B4F   DD E9                  JP   (ix)   
0B51                             ;*******************************************************************
0B51                             ; unused opcodes (reserved)
0B51                             ;*******************************************************************
0B51                UNDERSCORE:      
0B51                COMMA:       
0B51   DD E9                  JP   (ix)   
0B53                             ;*******************************************************************
0B53                             ; opcodes continued
0B53                             ;*******************************************************************
0B53                RBRACK:      
0B53                ARRAYEND:      
0B53   FD 54                  LD   d,iyh   ; de = BP
0B55   FD 5D                  LD   e,iyl   
0B57   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0B5B   62 6B                  LD   hl,de   ; hl = de = BP
0B5D   B7                     OR   a   
0B5E   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B60   CB 3C                  SRL   h   ; 
0B62   CB 1D                  RR   l   
0B64   44 4D                  LD   bc,hl   ; bc = count
0B66   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B69   71                     LD   (hl),c   ; write num items in length word
0B6A   23                     INC   hl   
0B6B   70                     LD   (hl),b   
0B6C   23                     INC   hl   ; hl = array[0], bc = count
0B6D                             ; de = BP, hl = array[0], bc = count
0B6D   18 15                  JR   arrayEnd3   
0B6F                ARRAYEND1:      
0B6F   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B72   77                     LD   (hl),a   ; write lsb of array item
0B73   23                     INC   hl   ; move to msb of array item
0B74   3A E6 4E               LD   a,(vDataWidth)   ; vDataWidth=1?
0B77   3D                     DEC   a   
0B78   28 05                  JR   z,arrayEnd2   
0B7A   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B7D   77                     LD   (hl),a   ; write msb of array item
0B7E   23                     INC   hl   ; move to next word in array
0B7F                ARRAYEND2:      
0B7F   FD 2B                  DEC   iy   ; move to next word on stack
0B81   FD 2B                  DEC   iy   
0B83   0B                     DEC   bc   ; dec items count
0B84                ARRAYEND3:      
0B84   79                     LD   a,c   ; if not zero loop
0B85   B0                     OR   b   
0B86   20 E7                  JR   nz,arrayEnd1   
0B88   EB                     EX   de,hl   ; de = end of array, hl = BP
0B89   F9                     LD   sp,hl   ; sp = BP
0B8A   E1                     POP   hl   ; de = end of array, hl = old BP
0B8B   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0B8C   FD 62                  LD   iyh,d   
0B8E   FD 6B                  LD   iyl,e   
0B90   D1                     POP   de   ; pop arg_list (discard)
0B91   D1                     POP   de   ; pop first_arg* (discard)
0B92   D1                     POP   de   ; pop IP (discard)
0B93   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = array[-2]
0B97   13                     INC   de   
0B98   13                     INC   de   
0B99   D5                     PUSH   de   ; return array[0]
0B9A   22 F0 4E               LD   (vHeapPtr),hl   ; move heap* to end of array
0B9D   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0BA1   DD E9                  JP   (ix)   
0BA3                             ;                               58
0BA3                RBRACE:      
0BA3                BLOCKEND:      
0BA3   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BA6   FD 56 01               LD   d,(iy+1)   
0BA9   ED 53 04 4F            LD   (vTemp1),de   
0BAD   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BB0   FD 56 07               LD   d,(iy+7)   
0BB3   ED 53 06 4F            LD   (vTemp2),de   
0BB7   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BBA   FD 56 03               LD   d,(iy+3)   
0BBD   EB                     EX   de,hl   
0BBE   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BC1   FD 56 01               LD   d,(iy+1)   
0BC4   13                     INC   de   ; for carry flag <=
0BC5   B7                     OR   a   
0BC6   ED 52                  SBC   hl,de   
0BC8   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BCA   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BCC   FD 5D                  LD   e,iyl   
0BCE   21 08 00               LD   hl,8   
0BD1   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BD2   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BD3   18 0C                  JR   blockEnd2   
0BD5                BLOCKEND1:      ; same scope
0BD5   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BD8   FD 56 03               LD   d,(iy+3)   
0BDB   EB                     EX   de,hl   
0BDC   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BDE   FD 5D                  LD   e,iyl   
0BE0   EB                     EX   de,hl   
0BE1                BLOCKEND2:      
0BE1   44 4D                  LD   bc,hl   ; bc = hl = BP
0BE3   B7                     OR   a   ; hl = BP - SP = count
0BE4   ED 72                  SBC   hl,sp   
0BE6   7D                     LD   a,l   
0BE7   B4                     OR   h   
0BE8   28 09                  JR   z,blockEnd3   
0BEA   C5                     PUSH   bc   ; bc = count, hl = BP
0BEB   44 4D                  LD   bc,hl   
0BED   E1                     POP   hl   
0BEE   2B                     DEC   hl   ; hl = BP-1
0BEF   1B                     DEC   de   ; de = args*-1
0BF0   ED B8                  LDDR      
0BF2   13                     INC   de   
0BF3                BLOCKEND3:      
0BF3   EB                     EX   de,hl   ; sp = de = new tos*
0BF4   F9                     LD   sp,hl   
0BF5   ED 4B 06 4F            LD   bc,(vTemp2)   
0BF9   FD 2A 04 4F            LD   iy,(vTemp1)   
0BFD   ED 5B F2 4E            LD   de,(vRecur)   ; de = recur vector
0C01   7B                     LD   a,e   ; check for NUL
0C02   B2                     OR   d   
0C03   20 02                  JR   nz,blockEnd4   
0C05   DD E9                  JP   (ix)   
0C07                BLOCKEND4:      
0C07   21 00 00               LD   hl,0   ; clear recur vector
0C0A   22 F2 4E               LD   (vRecur),hl   
0C0D   C3 11 0C               JP   go1   ; execute de
0C10                             ; execute a block of code which ends with } 116
0C10                             ; creates a root scope if BP == stack
0C10                             ; else uses outer scope
0C10                CARET:       
0C10                GO:          
0C10   D1                     POP   de   ; de = block*
0C11                GO1:         
0C11   7B                     LD   a,e   ; if block* == null, exit
0C12   B2                     OR   d   
0C13   20 02                  JR   nz,go2   
0C15   DD E9                  JP   (ix)   
0C17                GO2:         
0C17   1A                     LD   a,(de)   
0C18   FE 7B                  CP   "{"   
0C1A   28 06                  JR   z,goBlock   
0C1C   FE 28                  CP   "("   
0C1E   C2 55 0C               JP   nz,goFunc   
0C21   D5                     PUSH   de   ; push de just before stack frame
0C22                GOBLOCK:      
0C22   ED 53 04 4F            LD   (vTemp1),de   ; save de
0C26   21 00 4C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C29   FD 54                  LD   d,iyh   
0C2B   FD 5D                  LD   e,iyl   
0C2D   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C2E   ED 52                  SBC   hl,de   
0C30   ED 5B 04 4F            LD   de,(vTemp1)   ; restore de
0C34   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C35   B4                     OR   h   
0C36   3E 00                  LD   a,0   
0C38   28 6A                  JR   z,goFunc8   
0C3A   C5                     PUSH   bc   ; push IP
0C3B   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C3E   FD 46 05               LD   b,(iy+5)   
0C41   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C44   FD 66 03               LD   h,(iy+3)   
0C47                GOBLOCK2:      
0C47   C5                     PUSH   bc   ; arg_list*
0C48   E5                     PUSH   hl   ; first_arg*
0C49   FD E5                  PUSH   iy   ; push BP
0C4B   FD 21 00 00            LD   iy,0   ; BP = SP
0C4F   FD 39                  ADD   iy,sp   
0C51                GOBLOCK3:      
0C51   42 4B                  LD   bc,de   ; bc = de = block*-1
0C53   DD E9                  JP   (ix)   
0C55                GOFUNC:      ; execute func
0C55   EB                     EX   de,hl   ; hl = func*
0C56   5E                     LD   e,(hl)   ; de = partial_array*
0C57   23                     INC   hl   
0C58   56                     LD   d,(hl)   
0C59   23                     INC   hl   
0C5A   7B                     LD   a,e   ; if partial_array* == null skip
0C5B   B2                     OR   d   
0C5C   28 21                  JR   z,goFunc3   
0C5E   ED 43 04 4F            LD   (vTemp1),bc   
0C62   22 06 4F               LD   (vTemp2),hl   ; save bc,hl
0C65   EB                     EX   de,hl   ; hl = partial_array*
0C66   2B                     DEC   hl   ; bc = count
0C67   46                     LD   b,(hl)   
0C68   2B                     DEC   hl   
0C69   4E                     LD   c,(hl)   
0C6A   23                     INC   hl   ; hl = array data*
0C6B   23                     INC   hl   
0C6C   18 06                  JR   goFunc2   ; push each item on stack
0C6E                GOFUNC1:      
0C6E   5E                     LD   e,(hl)   ; de = partial item
0C6F   23                     INC   hl   
0C70   56                     LD   d,(hl)   
0C71   23                     INC   hl   
0C72   D5                     PUSH   de   ; push on stack
0C73   0B                     DEC   bc   
0C74                GOFUNC2:      
0C74   79                     LD   a,c   ; if count != 0 then loop
0C75   B0                     OR   b   
0C76   20 F6                  JR   nz,goFunc1   
0C78   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore bc
0C7C   2A 06 4F               LD   hl,(vTemp2)   ; restore hl
0C7F                GOFUNC3:      
0C7F   5E                     LD   e,(hl)   ; de = block*
0C80   23                     INC   hl   
0C81   56                     LD   d,(hl)   
0C82   23                     INC   hl   
0C83   ED 53 04 4F            LD   (vTemp1),de   ; save block*
0C87   5E                     LD   e,(hl)   ; de = arg_list*
0C88   23                     INC   hl   
0C89   56                     LD   d,(hl)   
0C8A   23                     INC   hl   
0C8B   EB                     EX   de,hl   ; hl = arg_list*
0C8C   ED 5B 04 4F            LD   de,(vTemp1)   ; restore de = block*
0C90   7D                     LD   a,l   ; if arg_list* == null a = 0
0C91   B4                     OR   h   
0C92   20 03                  JR   nz,goFunc4   
0C94   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C95   18 0D                  JR   goFunc8   
0C97                GOFUNC4:      ; allocate locals
0C97   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0C98   18 03                  JR   goFunc6   
0C9A                GOFUNC5:      ; loop
0C9A   3B                     DEC   sp   
0C9B   3B                     DEC   sp   
0C9C   3D                     DEC   a   
0C9D                GOFUNC6:      
0C9D   B7                     OR   a   
0C9E   20 FA                  JR   nz,goFunc5   ; end loop
0CA0                GOFUNC7:      
0CA0   23                     INC   hl   ; a = num_args* x 2
0CA1   7E                     LD   a,(hl)   
0CA2   2B                     DEC   hl   
0CA3   87                     ADD   a,a   ; a *= 2
0CA4                GOFUNC8:      
0CA4   C5                     PUSH   bc   ; push IP
0CA5   44 4D                  LD   bc,hl   
0CA7   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CAA   85                     ADD   a,l   
0CAB   6F                     LD   l,a   
0CAC   39                     ADD   hl,sp   
0CAD   18 98                  JR   goBlock2   
0CAF                             ; 
0CAF                             ;*******************************************************************
0CAF                             ; general routines
0CAF                             ;*******************************************************************
0CAF                             ; arg_list - parses arg_list e.g. ab:c
0CAF                             ; -- arg_list*
0CAF                PARSEARGS:      
0CAF   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CB2   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0CB5   E5                     PUSH   hl   ; save start of arg_list
0CB6   23                     INC   hl   ; skip length fields to start of string
0CB7   23                     INC   hl   
0CB8   03                     INC   bc   ; point to next char
0CB9                PARSEARGS1:      
0CB9   0A                     LD   a,(bc)   
0CBA   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CBC   20 03                  JR   nz,parseArgs1a   
0CBE   14                     INC   d   ; non zero value local count acts as flag
0CBF   18 10                  JR   parseArgs3   
0CC1                PARSEARGS1A:      
0CC1   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CC3   38 0F                  JR   c,parseArgs4   
0CC5   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CC7   30 0B                  JR   nc,parseArgs4   
0CC9                PARSEARGS2:      
0CC9   77                     LD   (hl),a   
0CCA   23                     INC   hl   
0CCB   1C                     INC   e   ; increase arg count
0CCC   AF                     XOR   a   
0CCD   B2                     OR   d   
0CCE   28 01                  JR   z,parseArgs3   
0CD0   14                     INC   d   ; if d > 0 increase local count
0CD1                PARSEARGS3:      
0CD1   03                     INC   bc   ; point to next char
0CD2   18 E5                  JR   parseArgs1   
0CD4                PARSEARGS4:      
0CD4   0B                     DEC   bc   
0CD5   AF                     XOR   a   
0CD6   B2                     OR   d   
0CD7   28 01                  JR   z,parseArgs5   
0CD9   15                     DEC   d   ; remove initial inc
0CDA                PARSEARGS5:      
0CDA   23                     INC   hl   
0CDB   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CDE   E1                     POP   hl   ; hl = start of arg_list
0CDF   72                     LD   (hl),d   ; write number of locals at start - 1
0CE0   23                     INC   hl   
0CE1   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CE2   2B                     DEC   hl   
0CE3   E3                     EX   (sp),hl   
0CE4   E9                     JP   (hl)   
0CE5                             ; create block: parses block e.g. 00bbIC4uLi4g
0CE5                             ; -- block*
0CE5                PARSEBLOCK:      
0CE5   C5                     PUSH   bc   ; return pointer to first { of block
0CE6   03                     INC   bc   
0CE7   16 01                  LD   d,1   ; nesting: count first parenthesis
0CE9                PARSEBLOCK1:      ; Skip to end of definition
0CE9   0A                     LD   a,(bc)   ; Get the next character
0CEA   03                     INC   bc   ; Point to next character
0CEB   FE 21                  CP   " " + 1   ; ignore whitespace
0CED   38 FA                  JR   c,parseBlock1   
0CEF   FE 29                  CP   ")"   
0CF1   28 2D                  JR   z,parseBlock4   
0CF3   FE 7D                  CP   "}"   
0CF5   28 29                  JR   z,parseBlock4   
0CF7   FE 5D                  CP   "]"   
0CF9   28 25                  JR   z,parseBlock4   
0CFB   FE 28                  CP   "("   
0CFD   28 16                  JR   z,parseBlock2   
0CFF   FE 7B                  CP   "{"   
0D01   28 12                  JR   z,parseBlock2   
0D03   FE 5B                  CP   "["   
0D05   28 0E                  JR   z,parseBlock2   
0D07   FE 27                  CP   "'"   
0D09   28 0D                  JR   z,parseBlock3   
0D0B   FE 60                  CP   "`"   
0D0D   28 09                  JR   z,parseBlock3   
0D0F   FE 22                  CP   DQ   
0D11   28 05                  JR   z,parseBlock3   
0D13   18 D4                  JR   parseBlock1   
0D15                PARSEBLOCK2:      
0D15   14                     INC   d   
0D16   18 D1                  JR   parseBlock1   
0D18                PARSEBLOCK3:      
0D18   3E 80                  LD   a,$80   
0D1A   AA                     XOR   d   
0D1B   57                     LD   d,a   
0D1C   20 CB                  JR   nz,parseBlock1   
0D1E   18 03                  JR   parseBlock5   
0D20                PARSEBLOCK4:      
0D20   15                     DEC   d   
0D21   20 C6                  JR   nz,parseBlock1   ; get the next element
0D23                PARSEBLOCK5:      
0D23   60 69                  LD   hl,bc   ; hl = IP
0D25   11 22 4F               LD   de,HEAP   ; is IP pointing to object in heap
0D28   B7                     OR   a   ; IP - HEAP
0D29   ED 52                  SBC   hl,de   
0D2B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D2D   28 1C                  JR   z,parseBlock6   
0D2F   60 69                  LD   hl,bc   ; hl = IP
0D31   D1                     POP   de   ; de = block*
0D32   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0D36   B7                     OR   a   ; bc = size
0D37   ED 52                  SBC   hl,de   
0D39   44 4D                  LD   bc,hl   
0D3B   EB                     EX   de,hl   ; hl = block* de = heap*
0D3C   ED 5B F0 4E            LD   de,(vHeapPtr)   
0D40   D5                     PUSH   de   ; return hblock*
0D41   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D43   ED 53 F0 4E            LD   (vHeapPtr),de   ; heap* += size
0D47   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0D4B                PARSEBLOCK6:      
0D4B   0B                     DEC   bc   ; balanced, exit
0D4C   E1                     POP   hl   ; hl = block*
0D4D   E3                     EX   (sp),hl   ; return to caller
0D4E   E9                     JP   (hl)   
0D4F                             ; create function
0D4F                             ; arg_list* block* -- func*
0D4F                CREATEFUNC:      
0D4F   E1                     POP   hl   ; save retrn address
0D50   22 08 4F               LD   (vTemp3),hl   
0D53   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0D57   E1                     POP   hl   ; hl = block*
0D58   22 06 4F               LD   (vTemp2),hl   ; save block*
0D5B   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D5E   FD 56 05               LD   d,(iy+5)   
0D61   7B                     LD   a,e   ; if arg_list == null then make a func
0D62   B2                     OR   d   
0D63   20 09                  JR   nz,createFunc0   
0D65   21 00 00               LD   hl,0   ; partial_array = null
0D68   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
0D6C   18 65                  JR   createFunc5   
0D6E                CREATEFUNC0:      
0D6E   E1                     POP   hl   ; hl = inner_arg_list*
0D6F   E5                     PUSH   hl   ; save inner_arg_list
0D70   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
0D74   7E                     LD   a,(hl)   ; compile inner_num_locals
0D75   4F                     LD   c,a   ; b = inner_num_locals
0D76   12                     LD   (de),a   
0D77   23                     INC   hl   
0D78   13                     INC   de   
0D79   7E                     LD   a,(hl)   ; compile inner_length
0D7A   12                     LD   (de),a   
0D7B   91                     SUB   c   ; a = inner_num args
0D7C   23                     INC   hl   
0D7D   13                     INC   de   
0D7E   B7                     OR   a   ; compile args if inner_length > 0
0D7F   28 05                  JR   z,createFunc1   
0D81   4F                     LD   c,a   ; bc = a
0D82   06 00                  LD   b,0   
0D84   ED B0                  LDIR      
0D86                CREATEFUNC1:      
0D86   EB                     EX   de,hl   ; hl = outer_arg_list
0D87   FD 5E 04               LD   e,(iy+4)   
0D8A   FD 56 05               LD   d,(iy+5)   
0D8D   EB                     EX   de,hl   
0D8E   23                     INC   hl   ; a = outer_length
0D8F   7E                     LD   a,(hl)   
0D90   23                     INC   hl   
0D91   B7                     OR   a   
0D92   28 05                  JR   z,createFunc2   
0D94   4F                     LD   c,a   
0D95   06 00                  LD   b,0   
0D97   ED B0                  LDIR      ; append outer_args
0D99                CREATEFUNC2:      ; a = outer_length
0D99   47                     LD   b,a   ; b = a = outer_length
0D9A   2A F0 4E               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0D9D   23                     INC   hl   
0D9E   7E                     LD   a,(hl)   ; add outer_length to new length
0D9F   80                     ADD   a,b   
0DA0   77                     LD   (hl),a   
0DA1   2B                     DEC   hl   
0DA2   78                     LD   a,b   ; save outer_length in a'
0DA3   08                     EX   af,af'   
0DA4   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DA5   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DA6   B7                     OR   a   
0DA7   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DA9   4F                     LD   c,a   ; c = inner_num_locals
0DAA   06 00                  LD   b,0   ; bc = inner_num_locals
0DAC   23                     INC   hl   ; a = inner_length
0DAD   7E                     LD   a,(hl)   
0DAE   91                     SUB   c   ; a = inner_num_args
0DAF   23                     INC   hl   ; hl = inner_arg_chars
0DB0   85                     ADD   a,l   ; hl += a
0DB1   6F                     LD   l,a   
0DB2   3E 00                  LD   a,0   
0DB4   84                     ADD   a,h   
0DB5   67                     LD   h,a   
0DB6   ED B0                  LDIR      ; append inner_locals
0DB8                CREATEFUNC2A:      
0DB8   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DB9   12                     LD   (de),a   ; compile partial_array length field
0DBA   13                     INC   de   
0DBB   AF                     XOR   a   
0DBC   12                     LD   (de),a   
0DBD   13                     INC   de   
0DBE   D5                     PUSH   de   ; push partial_array*
0DBF   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DC0   FD 5E 02               LD   e,(iy+2)   
0DC3   FD 56 03               LD   d,(iy+3)   
0DC6   EB                     EX   de,hl   
0DC7                CREATEFUNC3:      
0DC7   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DC8   4E                     LD   c,(hl)   
0DC9   2B                     DEC   hl   
0DCA   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DCB   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DCC   13                     INC   de   
0DCD   79                     LD   a,c   
0DCE   12                     LD   (de),a   
0DCF   13                     INC   de   
0DD0   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DD2                CREATEFUNC4:      
0DD2   E1                     POP   hl   ; hl = partial_array*
0DD3                CREATEFUNC5:      
0DD3   C1                     POP   bc   ; bc = new_arg_list*
0DD4   D5                     PUSH   de   ; return new func*
0DD5   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DD6   73                     LD   (hl),e   ; compile partial_array* to func
0DD7   23                     INC   hl   
0DD8   72                     LD   (hl),d   
0DD9   23                     INC   hl   
0DDA   ED 5B 06 4F            LD   de,(vTemp2)   ; de = block*
0DDE   73                     LD   (hl),e   ; compile block* to func
0DDF   23                     INC   hl   
0DE0   72                     LD   (hl),d   
0DE1   23                     INC   hl   
0DE2   71                     LD   (hl),c   ; compile new_arg_list* to func
0DE3   23                     INC   hl   
0DE4   70                     LD   (hl),b   
0DE5   23                     INC   hl   
0DE6   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap ptr
0DE9   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0DED   2A 08 4F               LD   hl,(vTemp3)   ; jump to return address
0DF0   E9                     JP   (hl)   
0DF1                             ; ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0DF1                             ; flushBuffer:
0DF1                             ;     push af
0DF1                             ;     push de
0DF1                             ;     push hl
0DF1                             ;     ld hl,(vBufPtr)
0DF1                             ;     ld de,BUF
0DF1                             ;     ld (vBufPtr),de
0DF1                             ;     or a
0DF1                             ;     sbc hl,de
0DF1                             ;     call printChars2
0DF1                             ;     pop hl
0DF1                             ;     pop de
0DF1                             ;     pop af
0DF1                             ;     ret
0DF1                             ; printChars1:
0DF1                             ;     ld a,(de)                           ; print char at char*
0DF1                             ;     call putchar
0DF1                             ;     inc de                              ; char*++
0DF1                             ;     dec hl                              ; count--
0DF1                             ; printChars2:
0DF1                             ;     ld a,l                              ; count == 0?
0DF1                             ;     or h
0DF1                             ;     ret z
0DF1                             ;     jr printChars1                      ; if not loop
0DF1                             ; ; followed by a table
0DF1                             ; ; db char
0DF1                             ; ; db lsb(addr)
0DF1                             ; ; the final item must have char == NUL
0DF1                             ; jumpTable:
0DF1                             ;     pop hl
0DF1                             ;     inc bc
0DF1                             ; jumpTable0:
0DF1                             ;     xor a
0DF1                             ;     cp (hl)
0DF1                             ;     jr z,jumpTable2
0DF1                             ;     ld a,(bc)
0DF1                             ;     cp (hl)
0DF1                             ;     jr z,jumpTable1
0DF1                             ;     inc hl
0DF1                             ;     inc hl
0DF1                             ;     jr jumpTable0
0DF1                             ; jumpTable1:
0DF1                             ;     inc hl
0DF1                             ;     ld l,(hl)                   ; must have the same msb as the table
0DF1                             ;     jp (hl)
0DF1                             ; jumpTable2:
0DF1                             ;     dec bc
0DF1                             ;     inc hl
0DF1                             ;     jp (hl)
0DF1                             ; followed by a table
0DF1                             ; indexed on the 0-25 lowercase letter
0DF1                             ; db lsb(addr)
0DF1                             ; the final item index 26 matches any other char
0DF1                COMMANDTABLE:      
0DF1   03                     INC   bc   
0DF2   0A                     LD   a,(bc)   
0DF3   FE 7B                  CP   "z"+1   
0DF5   30 0B                  JR   nc,commandTable2   
0DF7   D6 61                  SUB   "a"   
0DF9   38 07                  JR   c,commandTable2   
0DFB                COMMANDTABLE1:      
0DFB   E1                     POP   hl   
0DFC   85                     ADD   a,l   
0DFD   6F                     LD   l,a   
0DFE   6E                     LD   l,(hl)   ; must have the same msb as the table
0DFF   C3 08 0E               JP   xjumpTableX   
0E02                COMMANDTABLE2:      
0E02   3E 1A                  LD   a,26   
0E04   0B                     DEC   bc   
0E05   18 F4                  JR   commandTable1   
0E07                             ; followed by a table
0E07                             ; db char
0E07                             ; db lsb(addr)
0E07                             ; the final item must have char == NUL
0E07                XJUMPTABLE:      
0E07   E1                     POP   hl   
0E08                XJUMPTABLEX:      
0E08   03                     INC   bc   
0E09                XJUMPTABLE0:      
0E09   AF                     XOR   a   
0E0A   BE                     CP   (hl)   
0E0B   28 0F                  JR   z,xjumpTable2   
0E0D   0A                     LD   a,(bc)   
0E0E   BE                     CP   (hl)   
0E0F   28 05                  JR   z,xjumpTable1   
0E11   23                     INC   hl   
0E12   23                     INC   hl   
0E13   23                     INC   hl   
0E14   18 F3                  JR   xjumpTable0   
0E16                XJUMPTABLE1:      
0E16   23                     INC   hl   
0E17   5E                     LD   e,(hl)   
0E18   23                     INC   hl   
0E19   56                     LD   d,(hl)   
0E1A   EB                     EX   de,hl   
0E1B   E9                     JP   (hl)   
0E1C                XJUMPTABLE2:      
0E1C   0B                     DEC   bc   
0E1D   23                     INC   hl   
0E1E   E9                     JP   (hl)   
0E1F                PRTSTR0:      
0E1F   CD 85 00               CALL   putchar   
0E22   23                     INC   hl   
0E23                PRTSTR:      
0E23   7E                     LD   a,(hl)   
0E24   B7                     OR   a   
0E25   20 F8                  JR   nz,prtstr0   
0E27   C9                     RET      
0E28                             ; **************************************************************************
0E28                             ; calculate nesting value
0E28                             ; a is char to be tested,
0E28                             ; e is the nesting value (initially 0)
0E28                             ; e is increased by ( and [
0E28                             ; e is decreased by ) and ]
0E28                             ; e has its bit 7 toggled by `
0E28                             ; limited to 127 levels
0E28                             ; **************************************************************************
0E28                NESTING:      
0E28   FE 22                  CP   DQ   ; quote char
0E2A   28 06                  JR   z,nesting0   
0E2C   FE 60                  CP   "`"   ; quote char
0E2E   28 02                  JR   z,nesting0   
0E30   18 0A                  JR   nesting1   
0E32                NESTING0:      
0E32   CB 7B                  BIT   7,e   
0E34   28 03                  JR   z,nesting1a   
0E36   CB BB                  RES   7,e   
0E38   C9                     RET      
0E39                NESTING1A:      
0E39   CB FB                  SET   7,e   
0E3B   C9                     RET      
0E3C                NESTING1:      
0E3C   CB 7B                  BIT   7,e   
0E3E   C0                     RET   nz   
0E3F   FE 7B                  CP   "{"   
0E41   28 08                  JR   z,nesting2   
0E43   FE 5B                  CP   "["   
0E45   28 04                  JR   z,nesting2   
0E47   FE 28                  CP   "("   
0E49   20 02                  JR   nz,nesting3   
0E4B                NESTING2:      
0E4B   1C                     INC   e   
0E4C   C9                     RET      
0E4D                NESTING3:      
0E4D   FE 7D                  CP   "}"   
0E4F   28 07                  JR   z,nesting4   
0E51   FE 5D                  CP   "]"   
0E53   28 03                  JR   z,nesting4   
0E55   FE 29                  CP   ")"   
0E57   C0                     RET   nz   
0E58                NESTING4:      
0E58   1D                     DEC   e   
0E59   C9                     RET      
0E5A                PROMPT:      
0E5A   CD 6A 0E               CALL   printStr   
0E5D   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E62   C9                     RET      
0E63                CRLF:        
0E63   CD 6A 0E               CALL   printStr   
0E66   0D 0A 00               .CSTR   "\r\n"   
0E69   C9                     RET      
0E6A                             ; prints a null teminated string
0E6A                             ; the string should be immediately following the call
0E6A                PRINTSTR:      
0E6A   E3                     EX   (sp),hl   ; swap			
0E6B   CD 23 0E               CALL   prtstr   
0E6E   23                     INC   hl   ; inc past NUL
0E6F   E3                     EX   (sp),hl   ; put it back	
0E70   C9                     RET      
0E71                INIT:        
0E71   21 F0 01               LD   hl,titleStr   
0E74   11 0E 4F               LD   de,titleBuf   
0E77   06 14                  LD   b,20   
0E79                INIT1:       
0E79   1A                     LD   a,(de)   
0E7A   BE                     CP   (hl)   
0E7B   20 17                  JR   nz,coldBoot0   
0E7D   13                     INC   de   
0E7E   23                     INC   hl   
0E7F   10 F8                  DJNZ   init1   
0E81                WARMINIT:      
0E81   ED 4B FC 4E            LD   bc,(vSavedIP)   ; restore IP
0E85   ED 7B FE 4E            LD   sp,(vSavedSP)   ; restore SP
0E89   DD 2A 00 4F            LD   ix,(vSavedNext)   ; restore Next
0E8D   FD 2A 02 4F            LD   iy,(vSavedBP)   ; restore BP
0E91   C3 CB 0E               JP   start1   
0E94                COLDBOOT0:      
0E94   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0E97   11 0E 4F               LD   de,titleBuf   
0E9A   06 14                  LD   b,20   
0E9C   ED B0                  LDIR      
0E9E                COLDINIT:      
0E9E   21 DE 01               LD   hl,isysVars   
0EA1   11 E6 4E               LD   de,sysVars   
0EA4   01 12 00               LD   bc,9 * 2   
0EA7   ED B0                  LDIR      
0EA9   21 00 4E               LD   hl,vars   ; 52 vars LO HI
0EAC   06 34                  LD   b,26*2   
0EAE   AF                     XOR   a   
0EAF                COLDBOOT1:      
0EAF   77                     LD   (hl),a   
0EB0   23                     INC   hl   
0EB1   10 FC                  DJNZ   coldBoot1   
0EB3   DD 2A EE 4E            LD   ix,(vNext)   
0EB7   FD 21 00 4C            LD   iy,STACK   
0EBB   C9                     RET      
0EBC                COLDSTART:      
0EBC   31 00 4C               LD   sp,STACK   
0EBF   CD 94 0E               CALL   coldBoot0   
0EC2   C3 CB 0E               JP   start1   
0EC5                START:       
0EC5   31 00 4C               LD   sp,STACK   ; start Monty
0EC8   CD 71 0E               CALL   init   ; setups
0ECB                START1:      
0ECB   21 0E 4F               LD   hl,titleBuf   
0ECE   CD 23 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0ED1                INTERPRET:      
0ED1   CD 5A 0E               CALL   prompt   
0ED4   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0ED7   21 00 4C               LD   hl,TIB   
0EDA   22 EA 4E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EDD                INTERPRET2:      ; calculate nesting
0EDD   1E 00                  LD   e,0   ; initilize nesting value
0EDF   C5                     PUSH   bc   ; save offset into TIB,
0EE0                             ; bc is also the count of chars in TIB
0EE0   21 00 4C               LD   hl,TIB   ; hl is start of TIB
0EE3   18 0B                  JR   interpret4   
0EE5                INTERPRET3:      
0EE5   3E 33                  LD   a,"3"   
0EE7   CD 85 00               CALL   putchar   
0EEA   7E                     LD   a,(hl)   ; a = char in TIB
0EEB   23                     INC   hl   ; inc pointer into TIB
0EEC   0B                     DEC   bc   ; dec count of chars in TIB
0EED   CD 28 0E               CALL   nesting   ; update nesting value
0EF0                INTERPRET4:      
0EF0   79                     LD   a,c   ; is count zero?
0EF1   B0                     OR   b   
0EF2   20 F1                  JR   nz,interpret3   ; if not loop
0EF4   C1                     POP   bc   ; restore offset into TIB
0EF5                INTERPRET5:      
0EF5   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0EF8   FE 20                  CP   $20   ; compare to space
0EFA   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0EFC   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0EFE                             ; ???? NEEDED?
0EFE   28 36                  JR   z,interpret8   
0F00   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F02   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F04   FE 05                  CP   CTRL_E   
0F06   CA 94 0F               JP   z,edit_   
0F09   FE 08                  CP   CTRL_H   
0F0B   CA 84 0F               JP   z,backSpace_   
0F0E   FE 0A                  CP   CTRL_J   
0F10   CA AC 0F               JP   z,reEdit_   
0F13                             ; cp CTRL_S
0F13                             ; jp z,printStack_
0F13                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F13                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F13                             ; DB     lsb(list_)       ; FF  ^L 12
0F13                             ; DB     lsb(printStack_) ; DLE ^P 16
0F13                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F13                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F13                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F13                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F13                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F13                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F13                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F13                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F13                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F13                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F13                INTERPRET5A:      
0F13                             ; ld (vTIBPtr),bc
0F13                             ; ld bc,(vTIBPtr)
0F13   18 C8                  JR   interpret2   
0F15                INTERPRET6:      
0F15   21 00 4C               LD   hl,TIB   
0F18   09                     ADD   hl,bc   
0F19   77                     LD   (hl),a   ; store the character in textbuf
0F1A   03                     INC   bc   
0F1B   CD 85 00               CALL   putchar   ; echo character to screen
0F1E   CD 28 0E               CALL   nesting   
0F21   18 D2                  JR   interpret5   ; wait for next character
0F23                INTERPRET7:      
0F23   21 00 4C               LD   hl,TIB   
0F26   09                     ADD   hl,bc   
0F27   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F29   23                     INC   hl   
0F2A   36 0A                  LD   (hl),"\n"   
0F2C   23                     INC   hl   
0F2D   03                     INC   bc   
0F2E   03                     INC   bc   
0F2F   CD 63 0E               CALL   crlf   ; echo character to screen
0F32   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F33   B7                     OR   a   
0F34   20 BF                  JR   nz,interpret5   
0F36                INTERPRET8:      
0F36   21 00 4C               LD   hl,TIB   
0F39   09                     ADD   hl,bc   
0F3A   22 EA 4E               LD   (vTIBPtr),hl   
0F3D   01 00 4C               LD   bc,TIB   
0F40   ED 43 FC 4E            LD   (vSavedIP),bc   ; save IP
0F44   ED 73 FE 4E            LD   (vSavedSP),sp   ; save SP
0F48   DD 22 00 4F            LD   (vSavedNext),ix   ; save Next
0F4C   FD 22 02 4F            LD   (vSavedBP),iy   ; save BP
0F50   0B                     DEC   bc   
0F51                NEXT:        
0F51   03                     INC   bc   ; Increment the IP
0F52   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F53   FE 20                  CP   " "   ; whitespace?
0F55   28 FA                  JR   z,next   ; space? ignore
0F57   38 08                  JR   c,next1   
0F59   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F5B   6F                     LD   l,a   ; index into table
0F5C   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F5E   6E                     LD   l,(hl)   ; get low jump address
0F5F   24                     INC   h   ; Load h with page after opcodes
0F60   E9                     JP   (hl)   ; Jump to routine
0F61                NEXT1:       
0F61   FE 00                  CP   NUL   ; end of input string?
0F63   28 03                  JR   z,exit   
0F65   C3 D1 0E               JP   interpret   ; no, other whitespace, macros?
0F68                EXIT:        
0F68   03                     INC   bc   
0F69   60 69                  LD   hl,bc   
0F6B   E9                     JP   (hl)   
0F6C                RUN:         
0F6C   C1                     POP   bc   
0F6D   0B                     DEC   bc   
0F6E   DD E9                  JP   (ix)   
0F70                ERROR:       
0F70   E5                     PUSH   hl   
0F71   CD 6C 0F               CALL   run   
0F74   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F81   C3 D1 0E               JP   interpret   
0F84                BACKSPACE_:      
0F84   79                     LD   a,c   
0F85   B0                     OR   b   
0F86   CA DD 0E               JP   z,interpret2   
0F89   0B                     DEC   bc   
0F8A   CD 6A 0E               CALL   printStr   
0F8D   08 20 08 00            .CSTR   "\b \b"   
0F91   C3 DD 0E               JP   interpret2   
0F94                             ; edit
0F94                EDIT_:       
0F94   CD 6C 0F               CALL   run   
0F97   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FA9   C3 D1 0E               JP   interpret   
0FAC                REEDIT_:      
0FAC   C3 D1 0E               JP   interpret   
0FAF                PRINTSTACK_:      
0FAF   CD 6C 0F               CALL   run   
0FB2   2F 70 6B 00            .CSTR   "/pk"   
0FB6   C3 D1 0E               JP   interpret   
0FB9                             ; editDef:
0FB9                             ;     pop hl                      ; pop ret address
0FB9                             ;     ex (sp),hl                  ; swap with TOS
0FB9                             ;     push hl                     ; dup TOS
0FB9                             ;     ld a,l                      ; a = ident
0FB9                             ;     ld de,TIB                   ; de = start of TIB
0FB9                             ;     ld (vTIBPtr),de             ; update TIB*
0FB9                             ;     push ix                     ; save NEXT
0FB9                             ;     ld ix,editDef0              ; NEXT = editDef0
0FB9                             ;     jp lookupRef                ; convert letter into address
0FB9                             ; editDef0:
0FB9                             ;     ld e,(hl)                   ; de = (hl++)
0FB9                             ;     inc hl
0FB9                             ;     ld d,(hl)
0FB9                             ;     ld a,d                      ; de == 0 ?
0FB9                             ;     or e
0FB9                             ;     jr z,editDef4
0FB9                             ;     ld ix,editDef3              ; NEXT = editDef3
0FB9                             ;     ex de,hl
0FB9                             ;     ld a,(hl)
0FB9                             ;     cp "{"
0FB9                             ;     jr nz,editDef1
0FB9                             ;     jp editBlock0               ; convert letter into address
0FB9                             ; editDef1:
0FB9                             ;     cp "("
0FB9                             ;     jr nz,editDef2
0FB9                             ;     jp editBlock0               ; convert letter into address
0FB9                             ; editDef2:
0FB9                             ;     jp editFunc
0FB9                             ; editDef3:
0FB9                             ;     ld a," "                    ; write assign
0FB9                             ;     call writeChar
0FB9                             ;     pop hl                      ; a = ident
0FB9                             ;     ld a,l
0FB9                             ;     call writeChar
0FB9                             ;     ld a,"="                    ; write assign
0FB9                             ;     call writeChar
0FB9                             ;     ld ix,editDef4              ; NEXT = editDef4
0FB9                             ;     jp printTIB
0FB9                             ; editDef4:
0FB9                             ;     pop ix                      ; restore NEXT
0FB9                             ;     jp (ix)
0FB9                             ; writeChar:
0FB9                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FB9                             ;     ld (de),a                   ; write ident
0FB9                             ;     inc de
0FB9                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FB9                             ;     ret
0FB9                             ; ; printTIB
0FB9                             ; printTIB:
0FB9                             ;     ld hl,(vTIBPtr)
0FB9                             ;     ld de,TIB
0FB9                             ;     or a
0FB9                             ;     sbc hl,de
0FB9                             ;     jp printTIB2
0FB9                             ; printTIB1:
0FB9                             ;     ld a,(de)
0FB9                             ;     call putchar
0FB9                             ; printTIB2:
0FB9                             ;     ld a,l
0FB9                             ;     or h
0FB9                             ;     jr nz,printTIB1
0FB9                             ;     jp (ix)
0FB9                             ; editBlock:
0FB9                             ;     pop hl                      ; hl = block*
0FB9                             ; editBlock0:
0FB9                             ;     push ix                     ; save next
0FB9                             ;     push hl                     ; push block*
0FB9                             ;     push hl                     ; push block*
0FB9                             ;     ld ix,(editBlock2)
0FB9                             ;     jp blockLength
0FB9                             ; editBlock1:
0FB9                             ;     pop hl                      ; bc = length, (sp) = IP
0FB9                             ;     pop de                      ; de = block*
0FB9                             ;     ld a,l
0FB9                             ;     or h
0FB9                             ;     jr z,editBlock2
0FB9                             ;     push bc
0FB9                             ;     ld bc,hl
0FB9                             ;     ex de,hl                    ; hl = block*
0FB9                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FB9                             ;     ldir                        ; copy block to TIB
0FB9                             ;     ld (vTIBPtr),de              ; save TIB*
0FB9                             ;     pop bc
0FB9                             ; editBlock2:
0FB9                             ;     pop ix                      ; restore next
0FB9                             ;     jp (ix)
0FB9                             ; editFunc:
0FB9                             ;     jp (ix)
0FB9                             ; editArray:
0FB9                             ;     jp (ix)
0FB9                             ; editparseArgs:
0FB9                             ;     jp (ix)
0FB9                             ; ; blockLength
0FB9                             ; ; addr1 -- length
0FB9                             ; blockLength:
0FB9                             ;     pop hl                      ; block*
0FB9                             ;     push hl                     ; save block*
0FB9                             ;     inc hl                      ; skip first char
0FB9                             ;     ld d,1                      ; increase nesting
0FB9                             ; blockLength1:                   ; Skip to end of definition
0FB9                             ;     ld a,(hl)                   ; Get the next character
0FB9                             ;     inc hl                      ; Point to next character
0FB9                             ;     cp " " + 1                  ; ignore whitespace
0FB9                             ;     jr c,blockLength1
0FB9                             ;     cp ")"
0FB9                             ;     jr z,blockLength4
0FB9                             ;     cp "}"
0FB9                             ;     jr z,blockLength4
0FB9                             ;     cp "]"
0FB9                             ;     jr z,blockLength4
0FB9                             ;     cp "("
0FB9                             ;     jr z,blockLength2
0FB9                             ;     cp "{"
0FB9                             ;     jr z,blockLength2
0FB9                             ;     cp "["
0FB9                             ;     jr z,blockLength2
0FB9                             ;     cp "'"
0FB9                             ;     jr z,blockLength3
0FB9                             ;     cp "`"
0FB9                             ;     jr z,blockLength3
0FB9                             ;     cp DQ
0FB9                             ;     jr z,blockLength3
0FB9                             ;     jr blockLength1
0FB9                             ; blockLength2:
0FB9                             ;     inc d
0FB9                             ;     jr blockLength1
0FB9                             ; blockLength4:
0FB9                             ;     dec d
0FB9                             ;     jr nz, blockLength1         ; get the next element
0FB9                             ; blockLength3:
0FB9                             ;     ld a,$80
0FB9                             ;     xor d
0FB9                             ;     ld d,a
0FB9                             ;     jr nz, blockLength1
0FB9                             ;     pop hl                      ; hl = block*
0FB9                             ;     or a
0FB9                             ;     sbc hl,de
0FB9                             ;     push hl
0FB9                             ;     jp (ix)
0FB9                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FB9                             ; \a start of stack \#3 depth \b base \$ prompt
0FB9                             ; DW dStack               ; a vS0 start of datastack			
0FB9                             ; DW FALSE                ; b vBase16
0FB9                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FB9                             ; DW 0                    ; d
0FB9                             ; DW 65                   ; e vLastDef "A" last command u defined
0FB9                             ; DW 0                    ; f
0FB9                             ; DW page6                ; g 256 bytes limits
0FB9                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FB9                          ;*Macro unroll: FUNC f1, 2, "abc"
0FB9                F1:          
0FB9   CD 10 0C               CALL   go   
0FBC   00 00                  DW   NUL   
0FBE   C7 0F                  DW   f1M_3009S12   
0FC0   C2 0F                  DW   $+2   
0FC2   02                     DB   2   
0FC3   03 61 62 63            .PSTR   "abc"   
0FC7                F1M_3009S12:      
0FC7   7B                     DB   "{"   
0FC8   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0FFF   7D                     DB   "}"   
1000   00                     DB   0   
1001                          ;*Macro unroll: FUNC f2, 0, ""
1001                F2:          
1001   CD 10 0C               CALL   go   
1004   00 00                  DW   NUL   
1006   0C 10                  DW   f2M_3014S18   
1008   0A 10                  DW   $+2   
100A   00                     DB   0   
100B   00                     .PSTR   ""   
100C                F2M_3014S18:      
100C   00                     DB   0   
100D                          ;*Macro unroll: FUNC f3, 0, ""
100D                F3:          
100D   CD 10 0C               CALL   go   
1010   00 00                  DW   NUL   
1012   18 10                  DW   f3M_3016S21   
1014   16 10                  DW   $+2   
1016   00                     DB   0   
1017   00                     .PSTR   ""   
1018                F3M_3016S21:      
1018   00                     DB   0   
1019                          ;*Macro unroll: FUNC f4, 0, ""
1019                F4:          
1019   CD 10 0C               CALL   go   
101C   00 00                  DW   NUL   
101E   24 10                  DW   f4M_3018S24   
1020   22 10                  DW   $+2   
1022   00                     DB   0   
1023   00                     .PSTR   ""   
1024                F4M_3018S24:      
1024   00                     DB   0   
1025                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 [10 20 30] /ai \\a{%a.} /fe", $1000
1100                          ;*Macro unroll:  test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100   31 00 4C               LD   SP,STACK   
1103   CD 9E 0E               CALL   coldInit   
1106   CD 04 4A               CALL   execStr   
1109   24 31 30 30 30 20 27 68 65 6C 6C 6F 20 74 68 65 72 65 21 27 20 2F 73 69 20 5C 61 7B 25 61 2E 63 7D 20 2F 66 65 00 DB   "$1000 'hello there!' /si \\a{%a.c} /fe",0   
112F   E1                     POP   HL   
1130   E5                     PUSH   HL   
1131   11 00 10               LD   DE,$1000   
1134   B7                     OR   A   
1135   ED 52                  SBC   HL,DE   
1137   7D                     LD   A,L   
1138   B4                     OR   H   
1139   CA B3 11               JP   Z,expectM_3028S36   
113C   CD 6A 0E               CALL   printStr   
113F   43 6F 64 65 3A 20 24 31 30 30 30 20 27 68 65 6C 6C 6F 20 74 68 65 72 65 21 27 20 2F 73 69 20 5C 61 7B 25 61 2E 63 7D 20 2F 66 65 00 .CSTR   "Code: ","$1000 'hello there!' /si \\a{%a.c} /fe"   
116B   CD 6A 0E               CALL   printStr   
116E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
117D   21 00 10               LD   hl,$1000   
1180   E5                     PUSH   hl   
1181   E5                     PUSH   hl   
1182   CD 6C 0F               CALL   run   
1185   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
118D   CD 6A 0E               CALL   printStr   
1190   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
119D   E1                     POP   hl   
119E   E5                     PUSH   hl   
119F   E5                     PUSH   hl   
11A0   CD 6C 0F               CALL   run   
11A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11B2   76                     HALT      
11B3                EXPECTM_3028S36:      
11B3   E1                     POP   HL   
11B4                             ; test "[1 2 3].a", 0
11B4                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
11B4                             ; ; test "`hello:` 65.c 1. 2. 3.", FALSE
11B4                             ; test "/h/bm$1234.",0
11B4                             ; test "/b257.",0
11B4                             ; call printStr
11B4                             ; .cstr "Done!"
11B4                             ; HALT
11B4                             ; 
11B4                          ;*Macro unroll:  test "/f", false
11B4   31 00 4C               LD   SP,STACK   
11B7   CD 9E 0E               CALL   coldInit   
11BA   CD 04 4A               CALL   execStr   
11BD   2F 66 00               DB   "/f",0   
11C0   E1                     POP   HL   
11C1   E5                     PUSH   HL   
11C2   11 00 00               LD   DE,false   
11C5   B7                     OR   A   
11C6   ED 52                  SBC   HL,DE   
11C8   7D                     LD   A,L   
11C9   B4                     OR   H   
11CA   CA 21 12               JP   Z,expectM_3038S49   
11CD   CD 6A 0E               CALL   printStr   
11D0   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
11D9   CD 6A 0E               CALL   printStr   
11DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11EB   21 00 00               LD   hl,false   
11EE   E5                     PUSH   hl   
11EF   E5                     PUSH   hl   
11F0   CD 6C 0F               CALL   run   
11F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11FB   CD 6A 0E               CALL   printStr   
11FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
120B   E1                     POP   hl   
120C   E5                     PUSH   hl   
120D   E5                     PUSH   hl   
120E   CD 6C 0F               CALL   run   
1211   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1220   76                     HALT      
1221                EXPECTM_3038S49:      
1221   E1                     POP   HL   
1222                          ;*Macro unroll:  test "/t", true
1222   31 00 4C               LD   SP,STACK   
1225   CD 9E 0E               CALL   coldInit   
1228   CD 04 4A               CALL   execStr   
122B   2F 74 00               DB   "/t",0   
122E   E1                     POP   HL   
122F   E5                     PUSH   HL   
1230   11 FF FF               LD   DE,true   
1233   B7                     OR   A   
1234   ED 52                  SBC   HL,DE   
1236   7D                     LD   A,L   
1237   B4                     OR   H   
1238   CA 8F 12               JP   Z,expectM_3039S50   
123B   CD 6A 0E               CALL   printStr   
123E   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1247   CD 6A 0E               CALL   printStr   
124A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1259   21 FF FF               LD   hl,true   
125C   E5                     PUSH   hl   
125D   E5                     PUSH   hl   
125E   CD 6C 0F               CALL   run   
1261   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1269   CD 6A 0E               CALL   printStr   
126C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1279   E1                     POP   hl   
127A   E5                     PUSH   hl   
127B   E5                     PUSH   hl   
127C   CD 6C 0F               CALL   run   
127F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
128E   76                     HALT      
128F                EXPECTM_3039S50:      
128F   E1                     POP   HL   
1290                          ;*Macro unroll:  test "1", 1
1290   31 00 4C               LD   SP,STACK   
1293   CD 9E 0E               CALL   coldInit   
1296   CD 04 4A               CALL   execStr   
1299   31 00                  DB   "1",0   
129B   E1                     POP   HL   
129C   E5                     PUSH   HL   
129D   11 01 00               LD   DE,1   
12A0   B7                     OR   A   
12A1   ED 52                  SBC   HL,DE   
12A3   7D                     LD   A,L   
12A4   B4                     OR   H   
12A5   CA FB 12               JP   Z,expectM_3040S51   
12A8   CD 6A 0E               CALL   printStr   
12AB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12B3   CD 6A 0E               CALL   printStr   
12B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12C5   21 01 00               LD   hl,1   
12C8   E5                     PUSH   hl   
12C9   E5                     PUSH   hl   
12CA   CD 6C 0F               CALL   run   
12CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12D5   CD 6A 0E               CALL   printStr   
12D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12E5   E1                     POP   hl   
12E6   E5                     PUSH   hl   
12E7   E5                     PUSH   hl   
12E8   CD 6C 0F               CALL   run   
12EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12FA   76                     HALT      
12FB                EXPECTM_3040S51:      
12FB   E1                     POP   HL   
12FC                          ;*Macro unroll:  test "2", 2
12FC   31 00 4C               LD   SP,STACK   
12FF   CD 9E 0E               CALL   coldInit   
1302   CD 04 4A               CALL   execStr   
1305   32 00                  DB   "2",0   
1307   E1                     POP   HL   
1308   E5                     PUSH   HL   
1309   11 02 00               LD   DE,2   
130C   B7                     OR   A   
130D   ED 52                  SBC   HL,DE   
130F   7D                     LD   A,L   
1310   B4                     OR   H   
1311   CA 67 13               JP   Z,expectM_3041S52   
1314   CD 6A 0E               CALL   printStr   
1317   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
131F   CD 6A 0E               CALL   printStr   
1322   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1331   21 02 00               LD   hl,2   
1334   E5                     PUSH   hl   
1335   E5                     PUSH   hl   
1336   CD 6C 0F               CALL   run   
1339   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1341   CD 6A 0E               CALL   printStr   
1344   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1351   E1                     POP   hl   
1352   E5                     PUSH   hl   
1353   E5                     PUSH   hl   
1354   CD 6C 0F               CALL   run   
1357   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1366   76                     HALT      
1367                EXPECTM_3041S52:      
1367   E1                     POP   HL   
1368                          ;*Macro unroll:  test "1", 1
1368   31 00 4C               LD   SP,STACK   
136B   CD 9E 0E               CALL   coldInit   
136E   CD 04 4A               CALL   execStr   
1371   31 00                  DB   "1",0   
1373   E1                     POP   HL   
1374   E5                     PUSH   HL   
1375   11 01 00               LD   DE,1   
1378   B7                     OR   A   
1379   ED 52                  SBC   HL,DE   
137B   7D                     LD   A,L   
137C   B4                     OR   H   
137D   CA D3 13               JP   Z,expectM_3042S53   
1380   CD 6A 0E               CALL   printStr   
1383   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
138B   CD 6A 0E               CALL   printStr   
138E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
139D   21 01 00               LD   hl,1   
13A0   E5                     PUSH   hl   
13A1   E5                     PUSH   hl   
13A2   CD 6C 0F               CALL   run   
13A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13AD   CD 6A 0E               CALL   printStr   
13B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13BD   E1                     POP   hl   
13BE   E5                     PUSH   hl   
13BF   E5                     PUSH   hl   
13C0   CD 6C 0F               CALL   run   
13C3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13D2   76                     HALT      
13D3                EXPECTM_3042S53:      
13D3   E1                     POP   HL   
13D4                          ;*Macro unroll:  test "0", 0
13D4   31 00 4C               LD   SP,STACK   
13D7   CD 9E 0E               CALL   coldInit   
13DA   CD 04 4A               CALL   execStr   
13DD   30 00                  DB   "0",0   
13DF   E1                     POP   HL   
13E0   E5                     PUSH   HL   
13E1   11 00 00               LD   DE,0   
13E4   B7                     OR   A   
13E5   ED 52                  SBC   HL,DE   
13E7   7D                     LD   A,L   
13E8   B4                     OR   H   
13E9   CA 3F 14               JP   Z,expectM_3043S54   
13EC   CD 6A 0E               CALL   printStr   
13EF   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
13F7   CD 6A 0E               CALL   printStr   
13FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1409   21 00 00               LD   hl,0   
140C   E5                     PUSH   hl   
140D   E5                     PUSH   hl   
140E   CD 6C 0F               CALL   run   
1411   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1419   CD 6A 0E               CALL   printStr   
141C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1429   E1                     POP   hl   
142A   E5                     PUSH   hl   
142B   E5                     PUSH   hl   
142C   CD 6C 0F               CALL   run   
142F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
143E   76                     HALT      
143F                EXPECTM_3043S54:      
143F   E1                     POP   HL   
1440                          ;*Macro unroll:  test "10", 10
1440   31 00 4C               LD   SP,STACK   
1443   CD 9E 0E               CALL   coldInit   
1446   CD 04 4A               CALL   execStr   
1449   31 30 00               DB   "10",0   
144C   E1                     POP   HL   
144D   E5                     PUSH   HL   
144E   11 0A 00               LD   DE,10   
1451   B7                     OR   A   
1452   ED 52                  SBC   HL,DE   
1454   7D                     LD   A,L   
1455   B4                     OR   H   
1456   CA AD 14               JP   Z,expectM_3044S55   
1459   CD 6A 0E               CALL   printStr   
145C   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1465   CD 6A 0E               CALL   printStr   
1468   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1477   21 0A 00               LD   hl,10   
147A   E5                     PUSH   hl   
147B   E5                     PUSH   hl   
147C   CD 6C 0F               CALL   run   
147F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1487   CD 6A 0E               CALL   printStr   
148A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1497   E1                     POP   hl   
1498   E5                     PUSH   hl   
1499   E5                     PUSH   hl   
149A   CD 6C 0F               CALL   run   
149D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14AC   76                     HALT      
14AD                EXPECTM_3044S55:      
14AD   E1                     POP   HL   
14AE                          ;*Macro unroll:  test "123", 123
14AE   31 00 4C               LD   SP,STACK   
14B1   CD 9E 0E               CALL   coldInit   
14B4   CD 04 4A               CALL   execStr   
14B7   31 32 33 00            DB   "123",0   
14BB   E1                     POP   HL   
14BC   E5                     PUSH   HL   
14BD   11 7B 00               LD   DE,123   
14C0   B7                     OR   A   
14C1   ED 52                  SBC   HL,DE   
14C3   7D                     LD   A,L   
14C4   B4                     OR   H   
14C5   CA 1D 15               JP   Z,expectM_3045S56   
14C8   CD 6A 0E               CALL   printStr   
14CB   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
14D5   CD 6A 0E               CALL   printStr   
14D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14E7   21 7B 00               LD   hl,123   
14EA   E5                     PUSH   hl   
14EB   E5                     PUSH   hl   
14EC   CD 6C 0F               CALL   run   
14EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14F7   CD 6A 0E               CALL   printStr   
14FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1507   E1                     POP   hl   
1508   E5                     PUSH   hl   
1509   E5                     PUSH   hl   
150A   CD 6C 0F               CALL   run   
150D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
151C   76                     HALT      
151D                EXPECTM_3045S56:      
151D   E1                     POP   HL   
151E                          ;*Macro unroll:  test "-1",-1
151E   31 00 4C               LD   SP,STACK   
1521   CD 9E 0E               CALL   coldInit   
1524   CD 04 4A               CALL   execStr   
1527   2D 31 00               DB   "-1",0   
152A   E1                     POP   HL   
152B   E5                     PUSH   HL   
152C   11 FF FF               LD   DE,-1   
152F   B7                     OR   A   
1530   ED 52                  SBC   HL,DE   
1532   7D                     LD   A,L   
1533   B4                     OR   H   
1534   CA 8B 15               JP   Z,expectM_3046S57   
1537   CD 6A 0E               CALL   printStr   
153A   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1543   CD 6A 0E               CALL   printStr   
1546   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1555   21 FF FF               LD   hl,-1   
1558   E5                     PUSH   hl   
1559   E5                     PUSH   hl   
155A   CD 6C 0F               CALL   run   
155D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1565   CD 6A 0E               CALL   printStr   
1568   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1575   E1                     POP   hl   
1576   E5                     PUSH   hl   
1577   E5                     PUSH   hl   
1578   CD 6C 0F               CALL   run   
157B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
158A   76                     HALT      
158B                EXPECTM_3046S57:      
158B   E1                     POP   HL   
158C                          ;*Macro unroll:  test "~a", $61
158C   31 00 4C               LD   SP,STACK   
158F   CD 9E 0E               CALL   coldInit   
1592   CD 04 4A               CALL   execStr   
1595   7E 61 00               DB   "~a",0   
1598   E1                     POP   HL   
1599   E5                     PUSH   HL   
159A   11 61 00               LD   DE,$61   
159D   B7                     OR   A   
159E   ED 52                  SBC   HL,DE   
15A0   7D                     LD   A,L   
15A1   B4                     OR   H   
15A2   CA F9 15               JP   Z,expectM_3047S58   
15A5   CD 6A 0E               CALL   printStr   
15A8   43 6F 64 65 3A 20 7E 61 00 .CSTR   "Code: ","~a"   
15B1   CD 6A 0E               CALL   printStr   
15B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15C3   21 61 00               LD   hl,$61   
15C6   E5                     PUSH   hl   
15C7   E5                     PUSH   hl   
15C8   CD 6C 0F               CALL   run   
15CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15D3   CD 6A 0E               CALL   printStr   
15D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E3   E1                     POP   hl   
15E4   E5                     PUSH   hl   
15E5   E5                     PUSH   hl   
15E6   CD 6C 0F               CALL   run   
15E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15F8   76                     HALT      
15F9                EXPECTM_3047S58:      
15F9   E1                     POP   HL   
15FA                          ;*Macro unroll:  test "~~", $7e
15FA   31 00 4C               LD   SP,STACK   
15FD   CD 9E 0E               CALL   coldInit   
1600   CD 04 4A               CALL   execStr   
1603   7E 7E 00               DB   "~~",0   
1606   E1                     POP   HL   
1607   E5                     PUSH   HL   
1608   11 7E 00               LD   DE,$7e   
160B   B7                     OR   A   
160C   ED 52                  SBC   HL,DE   
160E   7D                     LD   A,L   
160F   B4                     OR   H   
1610   CA 67 16               JP   Z,expectM_3048S59   
1613   CD 6A 0E               CALL   printStr   
1616   43 6F 64 65 3A 20 7E 7E 00 .CSTR   "Code: ","~~"   
161F   CD 6A 0E               CALL   printStr   
1622   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1631   21 7E 00               LD   hl,$7e   
1634   E5                     PUSH   hl   
1635   E5                     PUSH   hl   
1636   CD 6C 0F               CALL   run   
1639   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1641   CD 6A 0E               CALL   printStr   
1644   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1651   E1                     POP   hl   
1652   E5                     PUSH   hl   
1653   E5                     PUSH   hl   
1654   CD 6C 0F               CALL   run   
1657   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1666   76                     HALT      
1667                EXPECTM_3048S59:      
1667   E1                     POP   HL   
1668                          ;*Macro unroll:  test "$10", $10
1668   31 00 4C               LD   SP,STACK   
166B   CD 9E 0E               CALL   coldInit   
166E   CD 04 4A               CALL   execStr   
1671   24 31 30 00            DB   "$10",0   
1675   E1                     POP   HL   
1676   E5                     PUSH   HL   
1677   11 10 00               LD   DE,$10   
167A   B7                     OR   A   
167B   ED 52                  SBC   HL,DE   
167D   7D                     LD   A,L   
167E   B4                     OR   H   
167F   CA D7 16               JP   Z,expectM_3049S60   
1682   CD 6A 0E               CALL   printStr   
1685   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
168F   CD 6A 0E               CALL   printStr   
1692   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16A1   21 10 00               LD   hl,$10   
16A4   E5                     PUSH   hl   
16A5   E5                     PUSH   hl   
16A6   CD 6C 0F               CALL   run   
16A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16B1   CD 6A 0E               CALL   printStr   
16B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C1   E1                     POP   hl   
16C2   E5                     PUSH   hl   
16C3   E5                     PUSH   hl   
16C4   CD 6C 0F               CALL   run   
16C7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16D6   76                     HALT      
16D7                EXPECTM_3049S60:      
16D7   E1                     POP   HL   
16D8                          ;*Macro unroll:  test "$FF", $FF
16D8   31 00 4C               LD   SP,STACK   
16DB   CD 9E 0E               CALL   coldInit   
16DE   CD 04 4A               CALL   execStr   
16E1   24 46 46 00            DB   "$FF",0   
16E5   E1                     POP   HL   
16E6   E5                     PUSH   HL   
16E7   11 FF 00               LD   DE,$FF   
16EA   B7                     OR   A   
16EB   ED 52                  SBC   HL,DE   
16ED   7D                     LD   A,L   
16EE   B4                     OR   H   
16EF   CA 47 17               JP   Z,expectM_3050S61   
16F2   CD 6A 0E               CALL   printStr   
16F5   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
16FF   CD 6A 0E               CALL   printStr   
1702   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1711   21 FF 00               LD   hl,$FF   
1714   E5                     PUSH   hl   
1715   E5                     PUSH   hl   
1716   CD 6C 0F               CALL   run   
1719   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1721   CD 6A 0E               CALL   printStr   
1724   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1731   E1                     POP   hl   
1732   E5                     PUSH   hl   
1733   E5                     PUSH   hl   
1734   CD 6C 0F               CALL   run   
1737   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1746   76                     HALT      
1747                EXPECTM_3050S61:      
1747   E1                     POP   HL   
1748                          ;*Macro unroll:  test "-1 2 +",1
1748   31 00 4C               LD   SP,STACK   
174B   CD 9E 0E               CALL   coldInit   
174E   CD 04 4A               CALL   execStr   
1751   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1758   E1                     POP   HL   
1759   E5                     PUSH   HL   
175A   11 01 00               LD   DE,1   
175D   B7                     OR   A   
175E   ED 52                  SBC   HL,DE   
1760   7D                     LD   A,L   
1761   B4                     OR   H   
1762   CA BD 17               JP   Z,expectM_3051S62   
1765   CD 6A 0E               CALL   printStr   
1768   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1775   CD 6A 0E               CALL   printStr   
1778   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1787   21 01 00               LD   hl,1   
178A   E5                     PUSH   hl   
178B   E5                     PUSH   hl   
178C   CD 6C 0F               CALL   run   
178F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1797   CD 6A 0E               CALL   printStr   
179A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17A7   E1                     POP   hl   
17A8   E5                     PUSH   hl   
17A9   E5                     PUSH   hl   
17AA   CD 6C 0F               CALL   run   
17AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17BC   76                     HALT      
17BD                EXPECTM_3051S62:      
17BD   E1                     POP   HL   
17BE                          ;*Macro unroll:  test "-1 1 +",0
17BE   31 00 4C               LD   SP,STACK   
17C1   CD 9E 0E               CALL   coldInit   
17C4   CD 04 4A               CALL   execStr   
17C7   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17CE   E1                     POP   HL   
17CF   E5                     PUSH   HL   
17D0   11 00 00               LD   DE,0   
17D3   B7                     OR   A   
17D4   ED 52                  SBC   HL,DE   
17D6   7D                     LD   A,L   
17D7   B4                     OR   H   
17D8   CA 33 18               JP   Z,expectM_3052S63   
17DB   CD 6A 0E               CALL   printStr   
17DE   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
17EB   CD 6A 0E               CALL   printStr   
17EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17FD   21 00 00               LD   hl,0   
1800   E5                     PUSH   hl   
1801   E5                     PUSH   hl   
1802   CD 6C 0F               CALL   run   
1805   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
180D   CD 6A 0E               CALL   printStr   
1810   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
181D   E1                     POP   hl   
181E   E5                     PUSH   hl   
181F   E5                     PUSH   hl   
1820   CD 6C 0F               CALL   run   
1823   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1832   76                     HALT      
1833                EXPECTM_3052S63:      
1833   E1                     POP   HL   
1834                          ;*Macro unroll:  test "1 2 +", 3
1834   31 00 4C               LD   SP,STACK   
1837   CD 9E 0E               CALL   coldInit   
183A   CD 04 4A               CALL   execStr   
183D   31 20 32 20 2B 00      DB   "1 2 +",0   
1843   E1                     POP   HL   
1844   E5                     PUSH   HL   
1845   11 03 00               LD   DE,3   
1848   B7                     OR   A   
1849   ED 52                  SBC   HL,DE   
184B   7D                     LD   A,L   
184C   B4                     OR   H   
184D   CA A7 18               JP   Z,expectM_3053S64   
1850   CD 6A 0E               CALL   printStr   
1853   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
185F   CD 6A 0E               CALL   printStr   
1862   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1871   21 03 00               LD   hl,3   
1874   E5                     PUSH   hl   
1875   E5                     PUSH   hl   
1876   CD 6C 0F               CALL   run   
1879   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1881   CD 6A 0E               CALL   printStr   
1884   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1891   E1                     POP   hl   
1892   E5                     PUSH   hl   
1893   E5                     PUSH   hl   
1894   CD 6C 0F               CALL   run   
1897   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18A6   76                     HALT      
18A7                EXPECTM_3053S64:      
18A7   E1                     POP   HL   
18A8                          ;*Macro unroll:  test "4 1 2 +", 3
18A8   31 00 4C               LD   SP,STACK   
18AB   CD 9E 0E               CALL   coldInit   
18AE   CD 04 4A               CALL   execStr   
18B1   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18B9   E1                     POP   HL   
18BA   E5                     PUSH   HL   
18BB   11 03 00               LD   DE,3   
18BE   B7                     OR   A   
18BF   ED 52                  SBC   HL,DE   
18C1   7D                     LD   A,L   
18C2   B4                     OR   H   
18C3   CA 1F 19               JP   Z,expectM_3054S65   
18C6   CD 6A 0E               CALL   printStr   
18C9   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18D7   CD 6A 0E               CALL   printStr   
18DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E9   21 03 00               LD   hl,3   
18EC   E5                     PUSH   hl   
18ED   E5                     PUSH   hl   
18EE   CD 6C 0F               CALL   run   
18F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18F9   CD 6A 0E               CALL   printStr   
18FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1909   E1                     POP   hl   
190A   E5                     PUSH   hl   
190B   E5                     PUSH   hl   
190C   CD 6C 0F               CALL   run   
190F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
191E   76                     HALT      
191F                EXPECTM_3054S65:      
191F   E1                     POP   HL   
1920                          ;*Macro unroll:  test "123 456 +", 123+456
1920   31 00 4C               LD   SP,STACK   
1923   CD 9E 0E               CALL   coldInit   
1926   CD 04 4A               CALL   execStr   
1929   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1933   E1                     POP   HL   
1934   E5                     PUSH   HL   
1935   11 43 02               LD   DE,123+456   
1938   B7                     OR   A   
1939   ED 52                  SBC   HL,DE   
193B   7D                     LD   A,L   
193C   B4                     OR   H   
193D   CA 9B 19               JP   Z,expectM_3055S66   
1940   CD 6A 0E               CALL   printStr   
1943   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1953   CD 6A 0E               CALL   printStr   
1956   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1965   21 43 02               LD   hl,123+456   
1968   E5                     PUSH   hl   
1969   E5                     PUSH   hl   
196A   CD 6C 0F               CALL   run   
196D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1975   CD 6A 0E               CALL   printStr   
1978   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1985   E1                     POP   hl   
1986   E5                     PUSH   hl   
1987   E5                     PUSH   hl   
1988   CD 6C 0F               CALL   run   
198B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
199A   76                     HALT      
199B                EXPECTM_3055S66:      
199B   E1                     POP   HL   
199C                          ;*Macro unroll:  test "64 128 +", 64+128
199C   31 00 4C               LD   SP,STACK   
199F   CD 9E 0E               CALL   coldInit   
19A2   CD 04 4A               CALL   execStr   
19A5   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19AE   E1                     POP   HL   
19AF   E5                     PUSH   HL   
19B0   11 C0 00               LD   DE,64+128   
19B3   B7                     OR   A   
19B4   ED 52                  SBC   HL,DE   
19B6   7D                     LD   A,L   
19B7   B4                     OR   H   
19B8   CA 15 1A               JP   Z,expectM_3056S67   
19BB   CD 6A 0E               CALL   printStr   
19BE   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
19CD   CD 6A 0E               CALL   printStr   
19D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19DF   21 C0 00               LD   hl,64+128   
19E2   E5                     PUSH   hl   
19E3   E5                     PUSH   hl   
19E4   CD 6C 0F               CALL   run   
19E7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19EF   CD 6A 0E               CALL   printStr   
19F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19FF   E1                     POP   hl   
1A00   E5                     PUSH   hl   
1A01   E5                     PUSH   hl   
1A02   CD 6C 0F               CALL   run   
1A05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A14   76                     HALT      
1A15                EXPECTM_3056S67:      
1A15   E1                     POP   HL   
1A16                          ;*Macro unroll:  test "1 2 +", 3
1A16   31 00 4C               LD   SP,STACK   
1A19   CD 9E 0E               CALL   coldInit   
1A1C   CD 04 4A               CALL   execStr   
1A1F   31 20 32 20 2B 00      DB   "1 2 +",0   
1A25   E1                     POP   HL   
1A26   E5                     PUSH   HL   
1A27   11 03 00               LD   DE,3   
1A2A   B7                     OR   A   
1A2B   ED 52                  SBC   HL,DE   
1A2D   7D                     LD   A,L   
1A2E   B4                     OR   H   
1A2F   CA 89 1A               JP   Z,expectM_3057S68   
1A32   CD 6A 0E               CALL   printStr   
1A35   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A41   CD 6A 0E               CALL   printStr   
1A44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A53   21 03 00               LD   hl,3   
1A56   E5                     PUSH   hl   
1A57   E5                     PUSH   hl   
1A58   CD 6C 0F               CALL   run   
1A5B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A63   CD 6A 0E               CALL   printStr   
1A66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A73   E1                     POP   hl   
1A74   E5                     PUSH   hl   
1A75   E5                     PUSH   hl   
1A76   CD 6C 0F               CALL   run   
1A79   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A88   76                     HALT      
1A89                EXPECTM_3057S68:      
1A89   E1                     POP   HL   
1A8A                          ;*Macro unroll:  test "1a= a++ a",2
1A8A   31 00 4C               LD   SP,STACK   
1A8D   CD 9E 0E               CALL   coldInit   
1A90   CD 04 4A               CALL   execStr   
1A93   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A9D   E1                     POP   HL   
1A9E   E5                     PUSH   HL   
1A9F   11 02 00               LD   DE,2   
1AA2   B7                     OR   A   
1AA3   ED 52                  SBC   HL,DE   
1AA5   7D                     LD   A,L   
1AA6   B4                     OR   H   
1AA7   CA 05 1B               JP   Z,expectM_3058S69   
1AAA   CD 6A 0E               CALL   printStr   
1AAD   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1ABD   CD 6A 0E               CALL   printStr   
1AC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ACF   21 02 00               LD   hl,2   
1AD2   E5                     PUSH   hl   
1AD3   E5                     PUSH   hl   
1AD4   CD 6C 0F               CALL   run   
1AD7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1ADF   CD 6A 0E               CALL   printStr   
1AE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEF   E1                     POP   hl   
1AF0   E5                     PUSH   hl   
1AF1   E5                     PUSH   hl   
1AF2   CD 6C 0F               CALL   run   
1AF5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B04   76                     HALT      
1B05                EXPECTM_3058S69:      
1B05   E1                     POP   HL   
1B06                          ;*Macro unroll:  test "-1 -1 -",0
1B06   31 00 4C               LD   SP,STACK   
1B09   CD 9E 0E               CALL   coldInit   
1B0C   CD 04 4A               CALL   execStr   
1B0F   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1B17   E1                     POP   HL   
1B18   E5                     PUSH   HL   
1B19   11 00 00               LD   DE,0   
1B1C   B7                     OR   A   
1B1D   ED 52                  SBC   HL,DE   
1B1F   7D                     LD   A,L   
1B20   B4                     OR   H   
1B21   CA 7D 1B               JP   Z,expectM_3059S70   
1B24   CD 6A 0E               CALL   printStr   
1B27   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B35   CD 6A 0E               CALL   printStr   
1B38   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B47   21 00 00               LD   hl,0   
1B4A   E5                     PUSH   hl   
1B4B   E5                     PUSH   hl   
1B4C   CD 6C 0F               CALL   run   
1B4F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B57   CD 6A 0E               CALL   printStr   
1B5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B67   E1                     POP   hl   
1B68   E5                     PUSH   hl   
1B69   E5                     PUSH   hl   
1B6A   CD 6C 0F               CALL   run   
1B6D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B7C   76                     HALT      
1B7D                EXPECTM_3059S70:      
1B7D   E1                     POP   HL   
1B7E                          ;*Macro unroll:  test "5 3 -", 2
1B7E   31 00 4C               LD   SP,STACK   
1B81   CD 9E 0E               CALL   coldInit   
1B84   CD 04 4A               CALL   execStr   
1B87   35 20 33 20 2D 00      DB   "5 3 -",0   
1B8D   E1                     POP   HL   
1B8E   E5                     PUSH   HL   
1B8F   11 02 00               LD   DE,2   
1B92   B7                     OR   A   
1B93   ED 52                  SBC   HL,DE   
1B95   7D                     LD   A,L   
1B96   B4                     OR   H   
1B97   CA F1 1B               JP   Z,expectM_3060S71   
1B9A   CD 6A 0E               CALL   printStr   
1B9D   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1BA9   CD 6A 0E               CALL   printStr   
1BAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BBB   21 02 00               LD   hl,2   
1BBE   E5                     PUSH   hl   
1BBF   E5                     PUSH   hl   
1BC0   CD 6C 0F               CALL   run   
1BC3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BCB   CD 6A 0E               CALL   printStr   
1BCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BDB   E1                     POP   hl   
1BDC   E5                     PUSH   hl   
1BDD   E5                     PUSH   hl   
1BDE   CD 6C 0F               CALL   run   
1BE1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BF0   76                     HALT      
1BF1                EXPECTM_3060S71:      
1BF1   E1                     POP   HL   
1BF2                          ;*Macro unroll:  test "2 1 -",1
1BF2   31 00 4C               LD   SP,STACK   
1BF5   CD 9E 0E               CALL   coldInit   
1BF8   CD 04 4A               CALL   execStr   
1BFB   32 20 31 20 2D 00      DB   "2 1 -",0   
1C01   E1                     POP   HL   
1C02   E5                     PUSH   HL   
1C03   11 01 00               LD   DE,1   
1C06   B7                     OR   A   
1C07   ED 52                  SBC   HL,DE   
1C09   7D                     LD   A,L   
1C0A   B4                     OR   H   
1C0B   CA 65 1C               JP   Z,expectM_3061S72   
1C0E   CD 6A 0E               CALL   printStr   
1C11   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C1D   CD 6A 0E               CALL   printStr   
1C20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C2F   21 01 00               LD   hl,1   
1C32   E5                     PUSH   hl   
1C33   E5                     PUSH   hl   
1C34   CD 6C 0F               CALL   run   
1C37   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C3F   CD 6A 0E               CALL   printStr   
1C42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C4F   E1                     POP   hl   
1C50   E5                     PUSH   hl   
1C51   E5                     PUSH   hl   
1C52   CD 6C 0F               CALL   run   
1C55   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C64   76                     HALT      
1C65                EXPECTM_3061S72:      
1C65   E1                     POP   HL   
1C66                          ;*Macro unroll:  test "3a= a-- a",2
1C66   31 00 4C               LD   SP,STACK   
1C69   CD 9E 0E               CALL   coldInit   
1C6C   CD 04 4A               CALL   execStr   
1C6F   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C79   E1                     POP   HL   
1C7A   E5                     PUSH   HL   
1C7B   11 02 00               LD   DE,2   
1C7E   B7                     OR   A   
1C7F   ED 52                  SBC   HL,DE   
1C81   7D                     LD   A,L   
1C82   B4                     OR   H   
1C83   CA E1 1C               JP   Z,expectM_3062S73   
1C86   CD 6A 0E               CALL   printStr   
1C89   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C99   CD 6A 0E               CALL   printStr   
1C9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CAB   21 02 00               LD   hl,2   
1CAE   E5                     PUSH   hl   
1CAF   E5                     PUSH   hl   
1CB0   CD 6C 0F               CALL   run   
1CB3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CBB   CD 6A 0E               CALL   printStr   
1CBE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CCB   E1                     POP   hl   
1CCC   E5                     PUSH   hl   
1CCD   E5                     PUSH   hl   
1CCE   CD 6C 0F               CALL   run   
1CD1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CE0   76                     HALT      
1CE1                EXPECTM_3062S73:      
1CE1   E1                     POP   HL   
1CE2                          ;*Macro unroll:  test "3 5 &", 1
1CE2   31 00 4C               LD   SP,STACK   
1CE5   CD 9E 0E               CALL   coldInit   
1CE8   CD 04 4A               CALL   execStr   
1CEB   33 20 35 20 26 00      DB   "3 5 &",0   
1CF1   E1                     POP   HL   
1CF2   E5                     PUSH   HL   
1CF3   11 01 00               LD   DE,1   
1CF6   B7                     OR   A   
1CF7   ED 52                  SBC   HL,DE   
1CF9   7D                     LD   A,L   
1CFA   B4                     OR   H   
1CFB   CA 55 1D               JP   Z,expectM_3063S74   
1CFE   CD 6A 0E               CALL   printStr   
1D01   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1D0D   CD 6A 0E               CALL   printStr   
1D10   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D1F   21 01 00               LD   hl,1   
1D22   E5                     PUSH   hl   
1D23   E5                     PUSH   hl   
1D24   CD 6C 0F               CALL   run   
1D27   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D2F   CD 6A 0E               CALL   printStr   
1D32   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D3F   E1                     POP   hl   
1D40   E5                     PUSH   hl   
1D41   E5                     PUSH   hl   
1D42   CD 6C 0F               CALL   run   
1D45   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D54   76                     HALT      
1D55                EXPECTM_3063S74:      
1D55   E1                     POP   HL   
1D56                          ;*Macro unroll:  test "3 5 |", 7
1D56   31 00 4C               LD   SP,STACK   
1D59   CD 9E 0E               CALL   coldInit   
1D5C   CD 04 4A               CALL   execStr   
1D5F   33 20 35 20 7C 00      DB   "3 5 |",0   
1D65   E1                     POP   HL   
1D66   E5                     PUSH   HL   
1D67   11 07 00               LD   DE,7   
1D6A   B7                     OR   A   
1D6B   ED 52                  SBC   HL,DE   
1D6D   7D                     LD   A,L   
1D6E   B4                     OR   H   
1D6F   CA C9 1D               JP   Z,expectM_3064S75   
1D72   CD 6A 0E               CALL   printStr   
1D75   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D81   CD 6A 0E               CALL   printStr   
1D84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D93   21 07 00               LD   hl,7   
1D96   E5                     PUSH   hl   
1D97   E5                     PUSH   hl   
1D98   CD 6C 0F               CALL   run   
1D9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DA3   CD 6A 0E               CALL   printStr   
1DA6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DB3   E1                     POP   hl   
1DB4   E5                     PUSH   hl   
1DB5   E5                     PUSH   hl   
1DB6   CD 6C 0F               CALL   run   
1DB9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DC8   76                     HALT      
1DC9                EXPECTM_3064S75:      
1DC9   E1                     POP   HL   
1DCA                          ;*Macro unroll:  test "3 5 /x", 6
1DCA   31 00 4C               LD   SP,STACK   
1DCD   CD 9E 0E               CALL   coldInit   
1DD0   CD 04 4A               CALL   execStr   
1DD3   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1DDA   E1                     POP   HL   
1DDB   E5                     PUSH   HL   
1DDC   11 06 00               LD   DE,6   
1DDF   B7                     OR   A   
1DE0   ED 52                  SBC   HL,DE   
1DE2   7D                     LD   A,L   
1DE3   B4                     OR   H   
1DE4   CA 3F 1E               JP   Z,expectM_3065S76   
1DE7   CD 6A 0E               CALL   printStr   
1DEA   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1DF7   CD 6A 0E               CALL   printStr   
1DFA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E09   21 06 00               LD   hl,6   
1E0C   E5                     PUSH   hl   
1E0D   E5                     PUSH   hl   
1E0E   CD 6C 0F               CALL   run   
1E11   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E19   CD 6A 0E               CALL   printStr   
1E1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E29   E1                     POP   hl   
1E2A   E5                     PUSH   hl   
1E2B   E5                     PUSH   hl   
1E2C   CD 6C 0F               CALL   run   
1E2F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E3E   76                     HALT      
1E3F                EXPECTM_3065S76:      
1E3F   E1                     POP   HL   
1E40                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1E40   31 00 4C               LD   SP,STACK   
1E43   CD 9E 0E               CALL   coldInit   
1E46   CD 04 4A               CALL   execStr   
1E49   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E58   E1                     POP   HL   
1E59   E5                     PUSH   HL   
1E5A   11 06 00               LD   DE,6   
1E5D   B7                     OR   A   
1E5E   ED 52                  SBC   HL,DE   
1E60   7D                     LD   A,L   
1E61   B4                     OR   H   
1E62   CA C5 1E               JP   Z,expectM_3066S77   
1E65   CD 6A 0E               CALL   printStr   
1E68   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E7D   CD 6A 0E               CALL   printStr   
1E80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E8F   21 06 00               LD   hl,6   
1E92   E5                     PUSH   hl   
1E93   E5                     PUSH   hl   
1E94   CD 6C 0F               CALL   run   
1E97   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E9F   CD 6A 0E               CALL   printStr   
1EA2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EAF   E1                     POP   hl   
1EB0   E5                     PUSH   hl   
1EB1   E5                     PUSH   hl   
1EB2   CD 6C 0F               CALL   run   
1EB5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EC4   76                     HALT      
1EC5                EXPECTM_3066S77:      
1EC5   E1                     POP   HL   
1EC6                          ;*Macro unroll:  test "2 3 *", 6
1EC6   31 00 4C               LD   SP,STACK   
1EC9   CD 9E 0E               CALL   coldInit   
1ECC   CD 04 4A               CALL   execStr   
1ECF   32 20 33 20 2A 00      DB   "2 3 *",0   
1ED5   E1                     POP   HL   
1ED6   E5                     PUSH   HL   
1ED7   11 06 00               LD   DE,6   
1EDA   B7                     OR   A   
1EDB   ED 52                  SBC   HL,DE   
1EDD   7D                     LD   A,L   
1EDE   B4                     OR   H   
1EDF   CA 39 1F               JP   Z,expectM_3067S78   
1EE2   CD 6A 0E               CALL   printStr   
1EE5   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1EF1   CD 6A 0E               CALL   printStr   
1EF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F03   21 06 00               LD   hl,6   
1F06   E5                     PUSH   hl   
1F07   E5                     PUSH   hl   
1F08   CD 6C 0F               CALL   run   
1F0B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F13   CD 6A 0E               CALL   printStr   
1F16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F23   E1                     POP   hl   
1F24   E5                     PUSH   hl   
1F25   E5                     PUSH   hl   
1F26   CD 6C 0F               CALL   run   
1F29   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F38   76                     HALT      
1F39                EXPECTM_3067S78:      
1F39   E1                     POP   HL   
1F3A                          ;*Macro unroll:  test "1 2 3 + *", 5
1F3A   31 00 4C               LD   SP,STACK   
1F3D   CD 9E 0E               CALL   coldInit   
1F40   CD 04 4A               CALL   execStr   
1F43   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1F4D   E1                     POP   HL   
1F4E   E5                     PUSH   HL   
1F4F   11 05 00               LD   DE,5   
1F52   B7                     OR   A   
1F53   ED 52                  SBC   HL,DE   
1F55   7D                     LD   A,L   
1F56   B4                     OR   H   
1F57   CA B5 1F               JP   Z,expectM_3068S79   
1F5A   CD 6A 0E               CALL   printStr   
1F5D   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1F6D   CD 6A 0E               CALL   printStr   
1F70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F7F   21 05 00               LD   hl,5   
1F82   E5                     PUSH   hl   
1F83   E5                     PUSH   hl   
1F84   CD 6C 0F               CALL   run   
1F87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F8F   CD 6A 0E               CALL   printStr   
1F92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F9F   E1                     POP   hl   
1FA0   E5                     PUSH   hl   
1FA1   E5                     PUSH   hl   
1FA2   CD 6C 0F               CALL   run   
1FA5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FB4   76                     HALT      
1FB5                EXPECTM_3068S79:      
1FB5   E1                     POP   HL   
1FB6                          ;*Macro unroll:  test "7 3 /", 2
1FB6   31 00 4C               LD   SP,STACK   
1FB9   CD 9E 0E               CALL   coldInit   
1FBC   CD 04 4A               CALL   execStr   
1FBF   37 20 33 20 2F 00      DB   "7 3 /",0   
1FC5   E1                     POP   HL   
1FC6   E5                     PUSH   HL   
1FC7   11 02 00               LD   DE,2   
1FCA   B7                     OR   A   
1FCB   ED 52                  SBC   HL,DE   
1FCD   7D                     LD   A,L   
1FCE   B4                     OR   H   
1FCF   CA 29 20               JP   Z,expectM_3069S80   
1FD2   CD 6A 0E               CALL   printStr   
1FD5   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1FE1   CD 6A 0E               CALL   printStr   
1FE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FF3   21 02 00               LD   hl,2   
1FF6   E5                     PUSH   hl   
1FF7   E5                     PUSH   hl   
1FF8   CD 6C 0F               CALL   run   
1FFB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2003   CD 6A 0E               CALL   printStr   
2006   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2013   E1                     POP   hl   
2014   E5                     PUSH   hl   
2015   E5                     PUSH   hl   
2016   CD 6C 0F               CALL   run   
2019   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2028   76                     HALT      
2029                EXPECTM_3069S80:      
2029   E1                     POP   HL   
202A                          ;*Macro unroll:  test "100a= 1a+= a", 101
202A   31 00 4C               LD   SP,STACK   
202D   CD 9E 0E               CALL   coldInit   
2030   CD 04 4A               CALL   execStr   
2033   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2040   E1                     POP   HL   
2041   E5                     PUSH   HL   
2042   11 65 00               LD   DE,101   
2045   B7                     OR   A   
2046   ED 52                  SBC   HL,DE   
2048   7D                     LD   A,L   
2049   B4                     OR   H   
204A   CA AB 20               JP   Z,expectM_3070S81   
204D   CD 6A 0E               CALL   printStr   
2050   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2063   CD 6A 0E               CALL   printStr   
2066   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2075   21 65 00               LD   hl,101   
2078   E5                     PUSH   hl   
2079   E5                     PUSH   hl   
207A   CD 6C 0F               CALL   run   
207D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2085   CD 6A 0E               CALL   printStr   
2088   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2095   E1                     POP   hl   
2096   E5                     PUSH   hl   
2097   E5                     PUSH   hl   
2098   CD 6C 0F               CALL   run   
209B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20AA   76                     HALT      
20AB                EXPECTM_3070S81:      
20AB   E1                     POP   HL   
20AC                          ;*Macro unroll:  test "100a= a1-= a", 99
20AC   31 00 4C               LD   SP,STACK   
20AF   CD 9E 0E               CALL   coldInit   
20B2   CD 04 4A               CALL   execStr   
20B5   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
20C2   E1                     POP   HL   
20C3   E5                     PUSH   HL   
20C4   11 63 00               LD   DE,99   
20C7   B7                     OR   A   
20C8   ED 52                  SBC   HL,DE   
20CA   7D                     LD   A,L   
20CB   B4                     OR   H   
20CC   CA 2D 21               JP   Z,expectM_3071S82   
20CF   CD 6A 0E               CALL   printStr   
20D2   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
20E5   CD 6A 0E               CALL   printStr   
20E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20F7   21 63 00               LD   hl,99   
20FA   E5                     PUSH   hl   
20FB   E5                     PUSH   hl   
20FC   CD 6C 0F               CALL   run   
20FF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2107   CD 6A 0E               CALL   printStr   
210A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2117   E1                     POP   hl   
2118   E5                     PUSH   hl   
2119   E5                     PUSH   hl   
211A   CD 6C 0F               CALL   run   
211D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
212C   76                     HALT      
212D                EXPECTM_3071S82:      
212D   E1                     POP   HL   
212E                          ;*Macro unroll:  test "100a= a2*= a", 200
212E   31 00 4C               LD   SP,STACK   
2131   CD 9E 0E               CALL   coldInit   
2134   CD 04 4A               CALL   execStr   
2137   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2144   E1                     POP   HL   
2145   E5                     PUSH   HL   
2146   11 C8 00               LD   DE,200   
2149   B7                     OR   A   
214A   ED 52                  SBC   HL,DE   
214C   7D                     LD   A,L   
214D   B4                     OR   H   
214E   CA AF 21               JP   Z,expectM_3072S83   
2151   CD 6A 0E               CALL   printStr   
2154   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2167   CD 6A 0E               CALL   printStr   
216A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2179   21 C8 00               LD   hl,200   
217C   E5                     PUSH   hl   
217D   E5                     PUSH   hl   
217E   CD 6C 0F               CALL   run   
2181   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2189   CD 6A 0E               CALL   printStr   
218C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2199   E1                     POP   hl   
219A   E5                     PUSH   hl   
219B   E5                     PUSH   hl   
219C   CD 6C 0F               CALL   run   
219F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21AE   76                     HALT      
21AF                EXPECTM_3072S83:      
21AF   E1                     POP   HL   
21B0                          ;*Macro unroll:  test "100a= a2/= a", 50
21B0   31 00 4C               LD   SP,STACK   
21B3   CD 9E 0E               CALL   coldInit   
21B6   CD 04 4A               CALL   execStr   
21B9   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
21C6   E1                     POP   HL   
21C7   E5                     PUSH   HL   
21C8   11 32 00               LD   DE,50   
21CB   B7                     OR   A   
21CC   ED 52                  SBC   HL,DE   
21CE   7D                     LD   A,L   
21CF   B4                     OR   H   
21D0   CA 31 22               JP   Z,expectM_3073S84   
21D3   CD 6A 0E               CALL   printStr   
21D6   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
21E9   CD 6A 0E               CALL   printStr   
21EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21FB   21 32 00               LD   hl,50   
21FE   E5                     PUSH   hl   
21FF   E5                     PUSH   hl   
2200   CD 6C 0F               CALL   run   
2203   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
220B   CD 6A 0E               CALL   printStr   
220E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
221B   E1                     POP   hl   
221C   E5                     PUSH   hl   
221D   E5                     PUSH   hl   
221E   CD 6C 0F               CALL   run   
2221   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2230   76                     HALT      
2231                EXPECTM_3073S84:      
2231   E1                     POP   HL   
2232                          ;*Macro unroll:  test "7 3 / /re", 1
2232   31 00 4C               LD   SP,STACK   
2235   CD 9E 0E               CALL   coldInit   
2238   CD 04 4A               CALL   execStr   
223B   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2245   E1                     POP   HL   
2246   E5                     PUSH   HL   
2247   11 01 00               LD   DE,1   
224A   B7                     OR   A   
224B   ED 52                  SBC   HL,DE   
224D   7D                     LD   A,L   
224E   B4                     OR   H   
224F   CA AD 22               JP   Z,expectM_3074S85   
2252   CD 6A 0E               CALL   printStr   
2255   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2265   CD 6A 0E               CALL   printStr   
2268   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2277   21 01 00               LD   hl,1   
227A   E5                     PUSH   hl   
227B   E5                     PUSH   hl   
227C   CD 6C 0F               CALL   run   
227F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2287   CD 6A 0E               CALL   printStr   
228A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2297   E1                     POP   hl   
2298   E5                     PUSH   hl   
2299   E5                     PUSH   hl   
229A   CD 6C 0F               CALL   run   
229D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22AC   76                     HALT      
22AD                EXPECTM_3074S85:      
22AD   E1                     POP   HL   
22AE                          ;*Macro unroll:  test "7 3 /", 2
22AE   31 00 4C               LD   SP,STACK   
22B1   CD 9E 0E               CALL   coldInit   
22B4   CD 04 4A               CALL   execStr   
22B7   37 20 33 20 2F 00      DB   "7 3 /",0   
22BD   E1                     POP   HL   
22BE   E5                     PUSH   HL   
22BF   11 02 00               LD   DE,2   
22C2   B7                     OR   A   
22C3   ED 52                  SBC   HL,DE   
22C5   7D                     LD   A,L   
22C6   B4                     OR   H   
22C7   CA 21 23               JP   Z,expectM_3075S86   
22CA   CD 6A 0E               CALL   printStr   
22CD   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22D9   CD 6A 0E               CALL   printStr   
22DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22EB   21 02 00               LD   hl,2   
22EE   E5                     PUSH   hl   
22EF   E5                     PUSH   hl   
22F0   CD 6C 0F               CALL   run   
22F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22FB   CD 6A 0E               CALL   printStr   
22FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
230B   E1                     POP   hl   
230C   E5                     PUSH   hl   
230D   E5                     PUSH   hl   
230E   CD 6C 0F               CALL   run   
2311   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2320   76                     HALT      
2321                EXPECTM_3075S86:      
2321   E1                     POP   HL   
2322                          ;*Macro unroll:  test "2 3 ==", FALSE
2322   31 00 4C               LD   SP,STACK   
2325   CD 9E 0E               CALL   coldInit   
2328   CD 04 4A               CALL   execStr   
232B   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2332   E1                     POP   HL   
2333   E5                     PUSH   HL   
2334   11 00 00               LD   DE,FALSE   
2337   B7                     OR   A   
2338   ED 52                  SBC   HL,DE   
233A   7D                     LD   A,L   
233B   B4                     OR   H   
233C   CA 97 23               JP   Z,expectM_3076S87   
233F   CD 6A 0E               CALL   printStr   
2342   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
234F   CD 6A 0E               CALL   printStr   
2352   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2361   21 00 00               LD   hl,FALSE   
2364   E5                     PUSH   hl   
2365   E5                     PUSH   hl   
2366   CD 6C 0F               CALL   run   
2369   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2371   CD 6A 0E               CALL   printStr   
2374   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2381   E1                     POP   hl   
2382   E5                     PUSH   hl   
2383   E5                     PUSH   hl   
2384   CD 6C 0F               CALL   run   
2387   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2396   76                     HALT      
2397                EXPECTM_3076S87:      
2397   E1                     POP   HL   
2398                          ;*Macro unroll:  test "3 3 ==", TRUE
2398   31 00 4C               LD   SP,STACK   
239B   CD 9E 0E               CALL   coldInit   
239E   CD 04 4A               CALL   execStr   
23A1   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
23A8   E1                     POP   HL   
23A9   E5                     PUSH   HL   
23AA   11 FF FF               LD   DE,TRUE   
23AD   B7                     OR   A   
23AE   ED 52                  SBC   HL,DE   
23B0   7D                     LD   A,L   
23B1   B4                     OR   H   
23B2   CA 0D 24               JP   Z,expectM_3077S88   
23B5   CD 6A 0E               CALL   printStr   
23B8   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
23C5   CD 6A 0E               CALL   printStr   
23C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D7   21 FF FF               LD   hl,TRUE   
23DA   E5                     PUSH   hl   
23DB   E5                     PUSH   hl   
23DC   CD 6C 0F               CALL   run   
23DF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23E7   CD 6A 0E               CALL   printStr   
23EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F7   E1                     POP   hl   
23F8   E5                     PUSH   hl   
23F9   E5                     PUSH   hl   
23FA   CD 6C 0F               CALL   run   
23FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
240C   76                     HALT      
240D                EXPECTM_3077S88:      
240D   E1                     POP   HL   
240E                          ;*Macro unroll:  test "1 2 <", TRUE
240E   31 00 4C               LD   SP,STACK   
2411   CD 9E 0E               CALL   coldInit   
2414   CD 04 4A               CALL   execStr   
2417   31 20 32 20 3C 00      DB   "1 2 <",0   
241D   E1                     POP   HL   
241E   E5                     PUSH   HL   
241F   11 FF FF               LD   DE,TRUE   
2422   B7                     OR   A   
2423   ED 52                  SBC   HL,DE   
2425   7D                     LD   A,L   
2426   B4                     OR   H   
2427   CA 81 24               JP   Z,expectM_3078S89   
242A   CD 6A 0E               CALL   printStr   
242D   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2439   CD 6A 0E               CALL   printStr   
243C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
244B   21 FF FF               LD   hl,TRUE   
244E   E5                     PUSH   hl   
244F   E5                     PUSH   hl   
2450   CD 6C 0F               CALL   run   
2453   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
245B   CD 6A 0E               CALL   printStr   
245E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
246B   E1                     POP   hl   
246C   E5                     PUSH   hl   
246D   E5                     PUSH   hl   
246E   CD 6C 0F               CALL   run   
2471   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2480   76                     HALT      
2481                EXPECTM_3078S89:      
2481   E1                     POP   HL   
2482                          ;*Macro unroll:  test "2 1 <", FALSE
2482   31 00 4C               LD   SP,STACK   
2485   CD 9E 0E               CALL   coldInit   
2488   CD 04 4A               CALL   execStr   
248B   32 20 31 20 3C 00      DB   "2 1 <",0   
2491   E1                     POP   HL   
2492   E5                     PUSH   HL   
2493   11 00 00               LD   DE,FALSE   
2496   B7                     OR   A   
2497   ED 52                  SBC   HL,DE   
2499   7D                     LD   A,L   
249A   B4                     OR   H   
249B   CA F5 24               JP   Z,expectM_3079S90   
249E   CD 6A 0E               CALL   printStr   
24A1   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
24AD   CD 6A 0E               CALL   printStr   
24B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BF   21 00 00               LD   hl,FALSE   
24C2   E5                     PUSH   hl   
24C3   E5                     PUSH   hl   
24C4   CD 6C 0F               CALL   run   
24C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24CF   CD 6A 0E               CALL   printStr   
24D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DF   E1                     POP   hl   
24E0   E5                     PUSH   hl   
24E1   E5                     PUSH   hl   
24E2   CD 6C 0F               CALL   run   
24E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F4   76                     HALT      
24F5                EXPECTM_3079S90:      
24F5   E1                     POP   HL   
24F6                          ;*Macro unroll:  test "2 3 <", TRUE
24F6   31 00 4C               LD   SP,STACK   
24F9   CD 9E 0E               CALL   coldInit   
24FC   CD 04 4A               CALL   execStr   
24FF   32 20 33 20 3C 00      DB   "2 3 <",0   
2505   E1                     POP   HL   
2506   E5                     PUSH   HL   
2507   11 FF FF               LD   DE,TRUE   
250A   B7                     OR   A   
250B   ED 52                  SBC   HL,DE   
250D   7D                     LD   A,L   
250E   B4                     OR   H   
250F   CA 69 25               JP   Z,expectM_3080S91   
2512   CD 6A 0E               CALL   printStr   
2515   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2521   CD 6A 0E               CALL   printStr   
2524   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2533   21 FF FF               LD   hl,TRUE   
2536   E5                     PUSH   hl   
2537   E5                     PUSH   hl   
2538   CD 6C 0F               CALL   run   
253B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2543   CD 6A 0E               CALL   printStr   
2546   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2553   E1                     POP   hl   
2554   E5                     PUSH   hl   
2555   E5                     PUSH   hl   
2556   CD 6C 0F               CALL   run   
2559   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2568   76                     HALT      
2569                EXPECTM_3080S91:      
2569   E1                     POP   HL   
256A                          ;*Macro unroll:  test "3 3 <", FALSE
256A   31 00 4C               LD   SP,STACK   
256D   CD 9E 0E               CALL   coldInit   
2570   CD 04 4A               CALL   execStr   
2573   33 20 33 20 3C 00      DB   "3 3 <",0   
2579   E1                     POP   HL   
257A   E5                     PUSH   HL   
257B   11 00 00               LD   DE,FALSE   
257E   B7                     OR   A   
257F   ED 52                  SBC   HL,DE   
2581   7D                     LD   A,L   
2582   B4                     OR   H   
2583   CA DD 25               JP   Z,expectM_3081S92   
2586   CD 6A 0E               CALL   printStr   
2589   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2595   CD 6A 0E               CALL   printStr   
2598   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25A7   21 00 00               LD   hl,FALSE   
25AA   E5                     PUSH   hl   
25AB   E5                     PUSH   hl   
25AC   CD 6C 0F               CALL   run   
25AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25B7   CD 6A 0E               CALL   printStr   
25BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25C7   E1                     POP   hl   
25C8   E5                     PUSH   hl   
25C9   E5                     PUSH   hl   
25CA   CD 6C 0F               CALL   run   
25CD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25DC   76                     HALT      
25DD                EXPECTM_3081S92:      
25DD   E1                     POP   HL   
25DE                          ;*Macro unroll:  test "1 2 >", FALSE
25DE   31 00 4C               LD   SP,STACK   
25E1   CD 9E 0E               CALL   coldInit   
25E4   CD 04 4A               CALL   execStr   
25E7   31 20 32 20 3E 00      DB   "1 2 >",0   
25ED   E1                     POP   HL   
25EE   E5                     PUSH   HL   
25EF   11 00 00               LD   DE,FALSE   
25F2   B7                     OR   A   
25F3   ED 52                  SBC   HL,DE   
25F5   7D                     LD   A,L   
25F6   B4                     OR   H   
25F7   CA 51 26               JP   Z,expectM_3082S93   
25FA   CD 6A 0E               CALL   printStr   
25FD   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2609   CD 6A 0E               CALL   printStr   
260C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
261B   21 00 00               LD   hl,FALSE   
261E   E5                     PUSH   hl   
261F   E5                     PUSH   hl   
2620   CD 6C 0F               CALL   run   
2623   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
262B   CD 6A 0E               CALL   printStr   
262E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
263B   E1                     POP   hl   
263C   E5                     PUSH   hl   
263D   E5                     PUSH   hl   
263E   CD 6C 0F               CALL   run   
2641   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2650   76                     HALT      
2651                EXPECTM_3082S93:      
2651   E1                     POP   HL   
2652                          ;*Macro unroll:  test "2 1 >", TRUE
2652   31 00 4C               LD   SP,STACK   
2655   CD 9E 0E               CALL   coldInit   
2658   CD 04 4A               CALL   execStr   
265B   32 20 31 20 3E 00      DB   "2 1 >",0   
2661   E1                     POP   HL   
2662   E5                     PUSH   HL   
2663   11 FF FF               LD   DE,TRUE   
2666   B7                     OR   A   
2667   ED 52                  SBC   HL,DE   
2669   7D                     LD   A,L   
266A   B4                     OR   H   
266B   CA C5 26               JP   Z,expectM_3083S94   
266E   CD 6A 0E               CALL   printStr   
2671   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
267D   CD 6A 0E               CALL   printStr   
2680   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
268F   21 FF FF               LD   hl,TRUE   
2692   E5                     PUSH   hl   
2693   E5                     PUSH   hl   
2694   CD 6C 0F               CALL   run   
2697   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
269F   CD 6A 0E               CALL   printStr   
26A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26AF   E1                     POP   hl   
26B0   E5                     PUSH   hl   
26B1   E5                     PUSH   hl   
26B2   CD 6C 0F               CALL   run   
26B5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26C4   76                     HALT      
26C5                EXPECTM_3083S94:      
26C5   E1                     POP   HL   
26C6                          ;*Macro unroll:  test "3 3 >", FALSE
26C6   31 00 4C               LD   SP,STACK   
26C9   CD 9E 0E               CALL   coldInit   
26CC   CD 04 4A               CALL   execStr   
26CF   33 20 33 20 3E 00      DB   "3 3 >",0   
26D5   E1                     POP   HL   
26D6   E5                     PUSH   HL   
26D7   11 00 00               LD   DE,FALSE   
26DA   B7                     OR   A   
26DB   ED 52                  SBC   HL,DE   
26DD   7D                     LD   A,L   
26DE   B4                     OR   H   
26DF   CA 39 27               JP   Z,expectM_3084S95   
26E2   CD 6A 0E               CALL   printStr   
26E5   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
26F1   CD 6A 0E               CALL   printStr   
26F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2703   21 00 00               LD   hl,FALSE   
2706   E5                     PUSH   hl   
2707   E5                     PUSH   hl   
2708   CD 6C 0F               CALL   run   
270B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2713   CD 6A 0E               CALL   printStr   
2716   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2723   E1                     POP   hl   
2724   E5                     PUSH   hl   
2725   E5                     PUSH   hl   
2726   CD 6C 0F               CALL   run   
2729   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2738   76                     HALT      
2739                EXPECTM_3084S95:      
2739   E1                     POP   HL   
273A                          ;*Macro unroll:  test "4 3 >", TRUE
273A   31 00 4C               LD   SP,STACK   
273D   CD 9E 0E               CALL   coldInit   
2740   CD 04 4A               CALL   execStr   
2743   34 20 33 20 3E 00      DB   "4 3 >",0   
2749   E1                     POP   HL   
274A   E5                     PUSH   HL   
274B   11 FF FF               LD   DE,TRUE   
274E   B7                     OR   A   
274F   ED 52                  SBC   HL,DE   
2751   7D                     LD   A,L   
2752   B4                     OR   H   
2753   CA AD 27               JP   Z,expectM_3085S96   
2756   CD 6A 0E               CALL   printStr   
2759   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2765   CD 6A 0E               CALL   printStr   
2768   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2777   21 FF FF               LD   hl,TRUE   
277A   E5                     PUSH   hl   
277B   E5                     PUSH   hl   
277C   CD 6C 0F               CALL   run   
277F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2787   CD 6A 0E               CALL   printStr   
278A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2797   E1                     POP   hl   
2798   E5                     PUSH   hl   
2799   E5                     PUSH   hl   
279A   CD 6C 0F               CALL   run   
279D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27AC   76                     HALT      
27AD                EXPECTM_3085S96:      
27AD   E1                     POP   HL   
27AE                          ;*Macro unroll:  test "2 2 <=", TRUE
27AE   31 00 4C               LD   SP,STACK   
27B1   CD 9E 0E               CALL   coldInit   
27B4   CD 04 4A               CALL   execStr   
27B7   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
27BE   E1                     POP   HL   
27BF   E5                     PUSH   HL   
27C0   11 FF FF               LD   DE,TRUE   
27C3   B7                     OR   A   
27C4   ED 52                  SBC   HL,DE   
27C6   7D                     LD   A,L   
27C7   B4                     OR   H   
27C8   CA 23 28               JP   Z,expectM_3086S97   
27CB   CD 6A 0E               CALL   printStr   
27CE   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
27DB   CD 6A 0E               CALL   printStr   
27DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27ED   21 FF FF               LD   hl,TRUE   
27F0   E5                     PUSH   hl   
27F1   E5                     PUSH   hl   
27F2   CD 6C 0F               CALL   run   
27F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27FD   CD 6A 0E               CALL   printStr   
2800   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
280D   E1                     POP   hl   
280E   E5                     PUSH   hl   
280F   E5                     PUSH   hl   
2810   CD 6C 0F               CALL   run   
2813   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2822   76                     HALT      
2823                EXPECTM_3086S97:      
2823   E1                     POP   HL   
2824                          ;*Macro unroll:  test "2 2 >=", TRUE
2824   31 00 4C               LD   SP,STACK   
2827   CD 9E 0E               CALL   coldInit   
282A   CD 04 4A               CALL   execStr   
282D   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2834   E1                     POP   HL   
2835   E5                     PUSH   HL   
2836   11 FF FF               LD   DE,TRUE   
2839   B7                     OR   A   
283A   ED 52                  SBC   HL,DE   
283C   7D                     LD   A,L   
283D   B4                     OR   H   
283E   CA 99 28               JP   Z,expectM_3087S98   
2841   CD 6A 0E               CALL   printStr   
2844   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2851   CD 6A 0E               CALL   printStr   
2854   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2863   21 FF FF               LD   hl,TRUE   
2866   E5                     PUSH   hl   
2867   E5                     PUSH   hl   
2868   CD 6C 0F               CALL   run   
286B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2873   CD 6A 0E               CALL   printStr   
2876   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2883   E1                     POP   hl   
2884   E5                     PUSH   hl   
2885   E5                     PUSH   hl   
2886   CD 6C 0F               CALL   run   
2889   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2898   76                     HALT      
2899                EXPECTM_3087S98:      
2899   E1                     POP   HL   
289A                          ;*Macro unroll:  test "3 1 <<", 6
289A   31 00 4C               LD   SP,STACK   
289D   CD 9E 0E               CALL   coldInit   
28A0   CD 04 4A               CALL   execStr   
28A3   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
28AA   E1                     POP   HL   
28AB   E5                     PUSH   HL   
28AC   11 06 00               LD   DE,6   
28AF   B7                     OR   A   
28B0   ED 52                  SBC   HL,DE   
28B2   7D                     LD   A,L   
28B3   B4                     OR   H   
28B4   CA 0F 29               JP   Z,expectM_3088S99   
28B7   CD 6A 0E               CALL   printStr   
28BA   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
28C7   CD 6A 0E               CALL   printStr   
28CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D9   21 06 00               LD   hl,6   
28DC   E5                     PUSH   hl   
28DD   E5                     PUSH   hl   
28DE   CD 6C 0F               CALL   run   
28E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28E9   CD 6A 0E               CALL   printStr   
28EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28F9   E1                     POP   hl   
28FA   E5                     PUSH   hl   
28FB   E5                     PUSH   hl   
28FC   CD 6C 0F               CALL   run   
28FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
290E   76                     HALT      
290F                EXPECTM_3088S99:      
290F   E1                     POP   HL   
2910                          ;*Macro unroll:  test "10 1 >>", 5
2910   31 00 4C               LD   SP,STACK   
2913   CD 9E 0E               CALL   coldInit   
2916   CD 04 4A               CALL   execStr   
2919   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2921   E1                     POP   HL   
2922   E5                     PUSH   HL   
2923   11 05 00               LD   DE,5   
2926   B7                     OR   A   
2927   ED 52                  SBC   HL,DE   
2929   7D                     LD   A,L   
292A   B4                     OR   H   
292B   CA 87 29               JP   Z,expectM_3089S100   
292E   CD 6A 0E               CALL   printStr   
2931   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
293F   CD 6A 0E               CALL   printStr   
2942   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2951   21 05 00               LD   hl,5   
2954   E5                     PUSH   hl   
2955   E5                     PUSH   hl   
2956   CD 6C 0F               CALL   run   
2959   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2961   CD 6A 0E               CALL   printStr   
2964   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2971   E1                     POP   hl   
2972   E5                     PUSH   hl   
2973   E5                     PUSH   hl   
2974   CD 6C 0F               CALL   run   
2977   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2986   76                     HALT      
2987                EXPECTM_3089S100:      
2987   E1                     POP   HL   
2988                          ;*Macro unroll:  test "1 x = x", 1
2988   31 00 4C               LD   SP,STACK   
298B   CD 9E 0E               CALL   coldInit   
298E   CD 04 4A               CALL   execStr   
2991   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2999   E1                     POP   HL   
299A   E5                     PUSH   HL   
299B   11 01 00               LD   DE,1   
299E   B7                     OR   A   
299F   ED 52                  SBC   HL,DE   
29A1   7D                     LD   A,L   
29A2   B4                     OR   H   
29A3   CA FF 29               JP   Z,expectM_3090S101   
29A6   CD 6A 0E               CALL   printStr   
29A9   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
29B7   CD 6A 0E               CALL   printStr   
29BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29C9   21 01 00               LD   hl,1   
29CC   E5                     PUSH   hl   
29CD   E5                     PUSH   hl   
29CE   CD 6C 0F               CALL   run   
29D1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29D9   CD 6A 0E               CALL   printStr   
29DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29E9   E1                     POP   hl   
29EA   E5                     PUSH   hl   
29EB   E5                     PUSH   hl   
29EC   CD 6C 0F               CALL   run   
29EF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29FE   76                     HALT      
29FF                EXPECTM_3090S101:      
29FF   E1                     POP   HL   
2A00                          ;*Macro unroll:  test "1{}^", 1
2A00   31 00 4C               LD   SP,STACK   
2A03   CD 9E 0E               CALL   coldInit   
2A06   CD 04 4A               CALL   execStr   
2A09   31 7B 7D 5E 00         DB   "1{}^",0   
2A0E   E1                     POP   HL   
2A0F   E5                     PUSH   HL   
2A10   11 01 00               LD   DE,1   
2A13   B7                     OR   A   
2A14   ED 52                  SBC   HL,DE   
2A16   7D                     LD   A,L   
2A17   B4                     OR   H   
2A18   CA 71 2A               JP   Z,expectM_3091S102   
2A1B   CD 6A 0E               CALL   printStr   
2A1E   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2A29   CD 6A 0E               CALL   printStr   
2A2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A3B   21 01 00               LD   hl,1   
2A3E   E5                     PUSH   hl   
2A3F   E5                     PUSH   hl   
2A40   CD 6C 0F               CALL   run   
2A43   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A4B   CD 6A 0E               CALL   printStr   
2A4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A5B   E1                     POP   hl   
2A5C   E5                     PUSH   hl   
2A5D   E5                     PUSH   hl   
2A5E   CD 6C 0F               CALL   run   
2A61   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A70   76                     HALT      
2A71                EXPECTM_3091S102:      
2A71   E1                     POP   HL   
2A72                          ;*Macro unroll:  test "{1}^", 1
2A72   31 00 4C               LD   SP,STACK   
2A75   CD 9E 0E               CALL   coldInit   
2A78   CD 04 4A               CALL   execStr   
2A7B   7B 31 7D 5E 00         DB   "{1}^",0   
2A80   E1                     POP   HL   
2A81   E5                     PUSH   HL   
2A82   11 01 00               LD   DE,1   
2A85   B7                     OR   A   
2A86   ED 52                  SBC   HL,DE   
2A88   7D                     LD   A,L   
2A89   B4                     OR   H   
2A8A   CA E3 2A               JP   Z,expectM_3092S103   
2A8D   CD 6A 0E               CALL   printStr   
2A90   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2A9B   CD 6A 0E               CALL   printStr   
2A9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AAD   21 01 00               LD   hl,1   
2AB0   E5                     PUSH   hl   
2AB1   E5                     PUSH   hl   
2AB2   CD 6C 0F               CALL   run   
2AB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2ABD   CD 6A 0E               CALL   printStr   
2AC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ACD   E1                     POP   hl   
2ACE   E5                     PUSH   hl   
2ACF   E5                     PUSH   hl   
2AD0   CD 6C 0F               CALL   run   
2AD3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AE2   76                     HALT      
2AE3                EXPECTM_3092S103:      
2AE3   E1                     POP   HL   
2AE4                          ;*Macro unroll:  test "{{1}^}^", 1
2AE4   31 00 4C               LD   SP,STACK   
2AE7   CD 9E 0E               CALL   coldInit   
2AEA   CD 04 4A               CALL   execStr   
2AED   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2AF5   E1                     POP   HL   
2AF6   E5                     PUSH   HL   
2AF7   11 01 00               LD   DE,1   
2AFA   B7                     OR   A   
2AFB   ED 52                  SBC   HL,DE   
2AFD   7D                     LD   A,L   
2AFE   B4                     OR   H   
2AFF   CA 5B 2B               JP   Z,expectM_3093S104   
2B02   CD 6A 0E               CALL   printStr   
2B05   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2B13   CD 6A 0E               CALL   printStr   
2B16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B25   21 01 00               LD   hl,1   
2B28   E5                     PUSH   hl   
2B29   E5                     PUSH   hl   
2B2A   CD 6C 0F               CALL   run   
2B2D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B35   CD 6A 0E               CALL   printStr   
2B38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B45   E1                     POP   hl   
2B46   E5                     PUSH   hl   
2B47   E5                     PUSH   hl   
2B48   CD 6C 0F               CALL   run   
2B4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B5A   76                     HALT      
2B5B                EXPECTM_3093S104:      
2B5B   E1                     POP   HL   
2B5C                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2B5C   31 00 4C               LD   SP,STACK   
2B5F   CD 9E 0E               CALL   coldInit   
2B62   CD 04 4A               CALL   execStr   
2B65   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2B70   E1                     POP   HL   
2B71   E5                     PUSH   HL   
2B72   11 01 00               LD   DE,1   
2B75   B7                     OR   A   
2B76   ED 52                  SBC   HL,DE   
2B78   7D                     LD   A,L   
2B79   B4                     OR   H   
2B7A   CA D9 2B               JP   Z,expectM_3094S105   
2B7D   CD 6A 0E               CALL   printStr   
2B80   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2B91   CD 6A 0E               CALL   printStr   
2B94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BA3   21 01 00               LD   hl,1   
2BA6   E5                     PUSH   hl   
2BA7   E5                     PUSH   hl   
2BA8   CD 6C 0F               CALL   run   
2BAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BB3   CD 6A 0E               CALL   printStr   
2BB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BC3   E1                     POP   hl   
2BC4   E5                     PUSH   hl   
2BC5   E5                     PUSH   hl   
2BC6   CD 6C 0F               CALL   run   
2BC9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BD8   76                     HALT      
2BD9                EXPECTM_3094S105:      
2BD9   E1                     POP   HL   
2BDA                          ;*Macro unroll:  test "5 /f{10} ?", 5
2BDA   31 00 4C               LD   SP,STACK   
2BDD   CD 9E 0E               CALL   coldInit   
2BE0   CD 04 4A               CALL   execStr   
2BE3   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2BEE   E1                     POP   HL   
2BEF   E5                     PUSH   HL   
2BF0   11 05 00               LD   DE,5   
2BF3   B7                     OR   A   
2BF4   ED 52                  SBC   HL,DE   
2BF6   7D                     LD   A,L   
2BF7   B4                     OR   H   
2BF8   CA 57 2C               JP   Z,expectM_3095S106   
2BFB   CD 6A 0E               CALL   printStr   
2BFE   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2C0F   CD 6A 0E               CALL   printStr   
2C12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C21   21 05 00               LD   hl,5   
2C24   E5                     PUSH   hl   
2C25   E5                     PUSH   hl   
2C26   CD 6C 0F               CALL   run   
2C29   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C31   CD 6A 0E               CALL   printStr   
2C34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C41   E1                     POP   hl   
2C42   E5                     PUSH   hl   
2C43   E5                     PUSH   hl   
2C44   CD 6C 0F               CALL   run   
2C47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C56   76                     HALT      
2C57                EXPECTM_3095S106:      
2C57   E1                     POP   HL   
2C58                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2C58   31 00 4C               LD   SP,STACK   
2C5B   CD 9E 0E               CALL   coldInit   
2C5E   CD 04 4A               CALL   execStr   
2C61   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2C6E   E1                     POP   HL   
2C6F   E5                     PUSH   HL   
2C70   11 0F 00               LD   DE,15   
2C73   B7                     OR   A   
2C74   ED 52                  SBC   HL,DE   
2C76   7D                     LD   A,L   
2C77   B4                     OR   H   
2C78   CA D9 2C               JP   Z,expectM_3096S107   
2C7B   CD 6A 0E               CALL   printStr   
2C7E   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2C91   CD 6A 0E               CALL   printStr   
2C94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CA3   21 0F 00               LD   hl,15   
2CA6   E5                     PUSH   hl   
2CA7   E5                     PUSH   hl   
2CA8   CD 6C 0F               CALL   run   
2CAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CB3   CD 6A 0E               CALL   printStr   
2CB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CC3   E1                     POP   hl   
2CC4   E5                     PUSH   hl   
2CC5   E5                     PUSH   hl   
2CC6   CD 6C 0F               CALL   run   
2CC9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CD8   76                     HALT      
2CD9                EXPECTM_3096S107:      
2CD9   E1                     POP   HL   
2CDA                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2CDA   31 00 4C               LD   SP,STACK   
2CDD   CD 9E 0E               CALL   coldInit   
2CE0   CD 04 4A               CALL   execStr   
2CE3   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2CF5   E1                     POP   HL   
2CF6   E5                     PUSH   HL   
2CF7   11 15 00               LD   DE,21   
2CFA   B7                     OR   A   
2CFB   ED 52                  SBC   HL,DE   
2CFD   7D                     LD   A,L   
2CFE   B4                     OR   H   
2CFF   CA 65 2D               JP   Z,expectM_3097S108   
2D02   CD 6A 0E               CALL   printStr   
2D05   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2D1D   CD 6A 0E               CALL   printStr   
2D20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D2F   21 15 00               LD   hl,21   
2D32   E5                     PUSH   hl   
2D33   E5                     PUSH   hl   
2D34   CD 6C 0F               CALL   run   
2D37   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D3F   CD 6A 0E               CALL   printStr   
2D42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D4F   E1                     POP   hl   
2D50   E5                     PUSH   hl   
2D51   E5                     PUSH   hl   
2D52   CD 6C 0F               CALL   run   
2D55   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D64   76                     HALT      
2D65                EXPECTM_3097S108:      
2D65   E1                     POP   HL   
2D66                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2D66   31 00 4C               LD   SP,STACK   
2D69   CD 9E 0E               CALL   coldInit   
2D6C   CD 04 4A               CALL   execStr   
2D6F   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2D81   E1                     POP   HL   
2D82   E5                     PUSH   HL   
2D83   11 0B 00               LD   DE,11   
2D86   B7                     OR   A   
2D87   ED 52                  SBC   HL,DE   
2D89   7D                     LD   A,L   
2D8A   B4                     OR   H   
2D8B   CA F1 2D               JP   Z,expectM_3098S109   
2D8E   CD 6A 0E               CALL   printStr   
2D91   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2DA9   CD 6A 0E               CALL   printStr   
2DAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DBB   21 0B 00               LD   hl,11   
2DBE   E5                     PUSH   hl   
2DBF   E5                     PUSH   hl   
2DC0   CD 6C 0F               CALL   run   
2DC3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DCB   CD 6A 0E               CALL   printStr   
2DCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DDB   E1                     POP   hl   
2DDC   E5                     PUSH   hl   
2DDD   E5                     PUSH   hl   
2DDE   CD 6C 0F               CALL   run   
2DE1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DF0   76                     HALT      
2DF1                EXPECTM_3098S109:      
2DF1   E1                     POP   HL   
2DF2                          ;*Macro unroll:  test "\\{2}^", 2
2DF2   31 00 4C               LD   SP,STACK   
2DF5   CD 9E 0E               CALL   coldInit   
2DF8   CD 04 4A               CALL   execStr   
2DFB   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2E01   E1                     POP   HL   
2E02   E5                     PUSH   HL   
2E03   11 02 00               LD   DE,2   
2E06   B7                     OR   A   
2E07   ED 52                  SBC   HL,DE   
2E09   7D                     LD   A,L   
2E0A   B4                     OR   H   
2E0B   CA 65 2E               JP   Z,expectM_3099S110   
2E0E   CD 6A 0E               CALL   printStr   
2E11   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2E1D   CD 6A 0E               CALL   printStr   
2E20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E2F   21 02 00               LD   hl,2   
2E32   E5                     PUSH   hl   
2E33   E5                     PUSH   hl   
2E34   CD 6C 0F               CALL   run   
2E37   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E3F   CD 6A 0E               CALL   printStr   
2E42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E4F   E1                     POP   hl   
2E50   E5                     PUSH   hl   
2E51   E5                     PUSH   hl   
2E52   CD 6C 0F               CALL   run   
2E55   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E64   76                     HALT      
2E65                EXPECTM_3099S110:      
2E65   E1                     POP   HL   
2E66                          ;*Macro unroll:  test "\\a{2}^", 2
2E66   31 00 4C               LD   SP,STACK   
2E69   CD 9E 0E               CALL   coldInit   
2E6C   CD 04 4A               CALL   execStr   
2E6F   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2E76   E1                     POP   HL   
2E77   E5                     PUSH   HL   
2E78   11 02 00               LD   DE,2   
2E7B   B7                     OR   A   
2E7C   ED 52                  SBC   HL,DE   
2E7E   7D                     LD   A,L   
2E7F   B4                     OR   H   
2E80   CA DB 2E               JP   Z,expectM_3100S111   
2E83   CD 6A 0E               CALL   printStr   
2E86   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2E93   CD 6A 0E               CALL   printStr   
2E96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EA5   21 02 00               LD   hl,2   
2EA8   E5                     PUSH   hl   
2EA9   E5                     PUSH   hl   
2EAA   CD 6C 0F               CALL   run   
2EAD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EB5   CD 6A 0E               CALL   printStr   
2EB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EC5   E1                     POP   hl   
2EC6   E5                     PUSH   hl   
2EC7   E5                     PUSH   hl   
2EC8   CD 6C 0F               CALL   run   
2ECB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EDA   76                     HALT      
2EDB                EXPECTM_3100S111:      
2EDB   E1                     POP   HL   
2EDC                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2EDC   31 00 4C               LD   SP,STACK   
2EDF   CD 9E 0E               CALL   coldInit   
2EE2   CD 04 4A               CALL   execStr   
2EE5   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2EEF   E1                     POP   HL   
2EF0   E5                     PUSH   HL   
2EF1   11 05 00               LD   DE,5   
2EF4   B7                     OR   A   
2EF5   ED 52                  SBC   HL,DE   
2EF7   7D                     LD   A,L   
2EF8   B4                     OR   H   
2EF9   CA 57 2F               JP   Z,expectM_3101S112   
2EFC   CD 6A 0E               CALL   printStr   
2EFF   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
2F0F   CD 6A 0E               CALL   printStr   
2F12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F21   21 05 00               LD   hl,5   
2F24   E5                     PUSH   hl   
2F25   E5                     PUSH   hl   
2F26   CD 6C 0F               CALL   run   
2F29   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F31   CD 6A 0E               CALL   printStr   
2F34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F41   E1                     POP   hl   
2F42   E5                     PUSH   hl   
2F43   E5                     PUSH   hl   
2F44   CD 6C 0F               CALL   run   
2F47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F56   76                     HALT      
2F57                EXPECTM_3101S112:      
2F57   E1                     POP   HL   
2F58                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
2F58   31 00 4C               LD   SP,STACK   
2F5B   CD 9E 0E               CALL   coldInit   
2F5E   CD 04 4A               CALL   execStr   
2F61   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
2F6D   E1                     POP   HL   
2F6E   E5                     PUSH   HL   
2F6F   11 05 00               LD   DE,5   
2F72   B7                     OR   A   
2F73   ED 52                  SBC   HL,DE   
2F75   7D                     LD   A,L   
2F76   B4                     OR   H   
2F77   CA D7 2F               JP   Z,expectM_3102S113   
2F7A   CD 6A 0E               CALL   printStr   
2F7D   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
2F8F   CD 6A 0E               CALL   printStr   
2F92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA1   21 05 00               LD   hl,5   
2FA4   E5                     PUSH   hl   
2FA5   E5                     PUSH   hl   
2FA6   CD 6C 0F               CALL   run   
2FA9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FB1   CD 6A 0E               CALL   printStr   
2FB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FC1   E1                     POP   hl   
2FC2   E5                     PUSH   hl   
2FC3   E5                     PUSH   hl   
2FC4   CD 6C 0F               CALL   run   
2FC7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FD6   76                     HALT      
2FD7                EXPECTM_3102S113:      
2FD7   E1                     POP   HL   
2FD8                          ;*Macro unroll:  test "\\a{{2}^}^", 2
2FD8   31 00 4C               LD   SP,STACK   
2FDB   CD 9E 0E               CALL   coldInit   
2FDE   CD 04 4A               CALL   execStr   
2FE1   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
2FEB   E1                     POP   HL   
2FEC   E5                     PUSH   HL   
2FED   11 02 00               LD   DE,2   
2FF0   B7                     OR   A   
2FF1   ED 52                  SBC   HL,DE   
2FF3   7D                     LD   A,L   
2FF4   B4                     OR   H   
2FF5   CA 53 30               JP   Z,expectM_3103S114   
2FF8   CD 6A 0E               CALL   printStr   
2FFB   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
300B   CD 6A 0E               CALL   printStr   
300E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
301D   21 02 00               LD   hl,2   
3020   E5                     PUSH   hl   
3021   E5                     PUSH   hl   
3022   CD 6C 0F               CALL   run   
3025   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
302D   CD 6A 0E               CALL   printStr   
3030   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
303D   E1                     POP   hl   
303E   E5                     PUSH   hl   
303F   E5                     PUSH   hl   
3040   CD 6C 0F               CALL   run   
3043   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3052   76                     HALT      
3053                EXPECTM_3103S114:      
3053   E1                     POP   HL   
3054                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3054   31 00 4C               LD   SP,STACK   
3057   CD 9E 0E               CALL   coldInit   
305A   CD 04 4A               CALL   execStr   
305D   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
306C   E1                     POP   HL   
306D   E5                     PUSH   HL   
306E   11 05 00               LD   DE,5   
3071   B7                     OR   A   
3072   ED 52                  SBC   HL,DE   
3074   7D                     LD   A,L   
3075   B4                     OR   H   
3076   CA D9 30               JP   Z,expectM_3104S115   
3079   CD 6A 0E               CALL   printStr   
307C   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3091   CD 6A 0E               CALL   printStr   
3094   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30A3   21 05 00               LD   hl,5   
30A6   E5                     PUSH   hl   
30A7   E5                     PUSH   hl   
30A8   CD 6C 0F               CALL   run   
30AB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30B3   CD 6A 0E               CALL   printStr   
30B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30C3   E1                     POP   hl   
30C4   E5                     PUSH   hl   
30C5   E5                     PUSH   hl   
30C6   CD 6C 0F               CALL   run   
30C9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30D8   76                     HALT      
30D9                EXPECTM_3104S115:      
30D9   E1                     POP   HL   
30DA                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
30DA   31 00 4C               LD   SP,STACK   
30DD   CD 9E 0E               CALL   coldInit   
30E0   CD 04 4A               CALL   execStr   
30E3   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
30F3   E1                     POP   HL   
30F4   E5                     PUSH   HL   
30F5   11 01 00               LD   DE,1   
30F8   B7                     OR   A   
30F9   ED 52                  SBC   HL,DE   
30FB   7D                     LD   A,L   
30FC   B4                     OR   H   
30FD   CA 61 31               JP   Z,expectM_3105S116   
3100   CD 6A 0E               CALL   printStr   
3103   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3119   CD 6A 0E               CALL   printStr   
311C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312B   21 01 00               LD   hl,1   
312E   E5                     PUSH   hl   
312F   E5                     PUSH   hl   
3130   CD 6C 0F               CALL   run   
3133   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
313B   CD 6A 0E               CALL   printStr   
313E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
314B   E1                     POP   hl   
314C   E5                     PUSH   hl   
314D   E5                     PUSH   hl   
314E   CD 6C 0F               CALL   run   
3151   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3160   76                     HALT      
3161                EXPECTM_3105S116:      
3161   E1                     POP   HL   
3162                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3162   31 00 4C               LD   SP,STACK   
3165   CD 9E 0E               CALL   coldInit   
3168   CD 04 4A               CALL   execStr   
316B   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
317E   E1                     POP   HL   
317F   E5                     PUSH   HL   
3180   11 07 00               LD   DE,7   
3183   B7                     OR   A   
3184   ED 52                  SBC   HL,DE   
3186   7D                     LD   A,L   
3187   B4                     OR   H   
3188   CA EF 31               JP   Z,expectM_3106S117   
318B   CD 6A 0E               CALL   printStr   
318E   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
31A7   CD 6A 0E               CALL   printStr   
31AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B9   21 07 00               LD   hl,7   
31BC   E5                     PUSH   hl   
31BD   E5                     PUSH   hl   
31BE   CD 6C 0F               CALL   run   
31C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31C9   CD 6A 0E               CALL   printStr   
31CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31D9   E1                     POP   hl   
31DA   E5                     PUSH   hl   
31DB   E5                     PUSH   hl   
31DC   CD 6C 0F               CALL   run   
31DF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31EE   76                     HALT      
31EF                EXPECTM_3106S117:      
31EF   E1                     POP   HL   
31F0                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
31F0   31 00 4C               LD   SP,STACK   
31F3   CD 9E 0E               CALL   coldInit   
31F6   CD 04 4A               CALL   execStr   
31F9   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
320E   E1                     POP   HL   
320F   E5                     PUSH   HL   
3210   11 06 00               LD   DE,6   
3213   B7                     OR   A   
3214   ED 52                  SBC   HL,DE   
3216   7D                     LD   A,L   
3217   B4                     OR   H   
3218   CA 81 32               JP   Z,expectM_3107S118   
321B   CD 6A 0E               CALL   printStr   
321E   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3239   CD 6A 0E               CALL   printStr   
323C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
324B   21 06 00               LD   hl,6   
324E   E5                     PUSH   hl   
324F   E5                     PUSH   hl   
3250   CD 6C 0F               CALL   run   
3253   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
325B   CD 6A 0E               CALL   printStr   
325E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
326B   E1                     POP   hl   
326C   E5                     PUSH   hl   
326D   E5                     PUSH   hl   
326E   CD 6C 0F               CALL   run   
3271   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3280   76                     HALT      
3281                EXPECTM_3107S118:      
3281   E1                     POP   HL   
3282                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3282   31 00 4C               LD   SP,STACK   
3285   CD 9E 0E               CALL   coldInit   
3288   CD 04 4A               CALL   execStr   
328B   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3299   E1                     POP   HL   
329A   E5                     PUSH   HL   
329B   11 02 00               LD   DE,2   
329E   B7                     OR   A   
329F   ED 52                  SBC   HL,DE   
32A1   7D                     LD   A,L   
32A2   B4                     OR   H   
32A3   CA 05 33               JP   Z,expectM_3108S119   
32A6   CD 6A 0E               CALL   printStr   
32A9   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
32BD   CD 6A 0E               CALL   printStr   
32C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32CF   21 02 00               LD   hl,2   
32D2   E5                     PUSH   hl   
32D3   E5                     PUSH   hl   
32D4   CD 6C 0F               CALL   run   
32D7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32DF   CD 6A 0E               CALL   printStr   
32E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32EF   E1                     POP   hl   
32F0   E5                     PUSH   hl   
32F1   E5                     PUSH   hl   
32F2   CD 6C 0F               CALL   run   
32F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3304   76                     HALT      
3305                EXPECTM_3108S119:      
3305   E1                     POP   HL   
3306                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3306   31 00 4C               LD   SP,STACK   
3309   CD 9E 0E               CALL   coldInit   
330C   CD 04 4A               CALL   execStr   
330F   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3320   E1                     POP   HL   
3321   E5                     PUSH   HL   
3322   11 01 00               LD   DE,1   
3325   B7                     OR   A   
3326   ED 52                  SBC   HL,DE   
3328   7D                     LD   A,L   
3329   B4                     OR   H   
332A   CA 8F 33               JP   Z,expectM_3109S120   
332D   CD 6A 0E               CALL   printStr   
3330   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3347   CD 6A 0E               CALL   printStr   
334A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3359   21 01 00               LD   hl,1   
335C   E5                     PUSH   hl   
335D   E5                     PUSH   hl   
335E   CD 6C 0F               CALL   run   
3361   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3369   CD 6A 0E               CALL   printStr   
336C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3379   E1                     POP   hl   
337A   E5                     PUSH   hl   
337B   E5                     PUSH   hl   
337C   CD 6C 0F               CALL   run   
337F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
338E   76                     HALT      
338F                EXPECTM_3109S120:      
338F   E1                     POP   HL   
3390                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3390   31 00 4C               LD   SP,STACK   
3393   CD 9E 0E               CALL   coldInit   
3396   CD 04 4A               CALL   execStr   
3399   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
33AB   E1                     POP   HL   
33AC   E5                     PUSH   HL   
33AD   11 02 00               LD   DE,2   
33B0   B7                     OR   A   
33B1   ED 52                  SBC   HL,DE   
33B3   7D                     LD   A,L   
33B4   B4                     OR   H   
33B5   CA 1B 34               JP   Z,expectM_3110S121   
33B8   CD 6A 0E               CALL   printStr   
33BB   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
33D3   CD 6A 0E               CALL   printStr   
33D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33E5   21 02 00               LD   hl,2   
33E8   E5                     PUSH   hl   
33E9   E5                     PUSH   hl   
33EA   CD 6C 0F               CALL   run   
33ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33F5   CD 6A 0E               CALL   printStr   
33F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3405   E1                     POP   hl   
3406   E5                     PUSH   hl   
3407   E5                     PUSH   hl   
3408   CD 6C 0F               CALL   run   
340B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
341A   76                     HALT      
341B                EXPECTM_3110S121:      
341B   E1                     POP   HL   
341C                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
341C   31 00 4C               LD   SP,STACK   
341F   CD 9E 0E               CALL   coldInit   
3422   CD 04 4A               CALL   execStr   
3425   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3438   E1                     POP   HL   
3439   E5                     PUSH   HL   
343A   11 02 00               LD   DE,2   
343D   B7                     OR   A   
343E   ED 52                  SBC   HL,DE   
3440   7D                     LD   A,L   
3441   B4                     OR   H   
3442   CA A9 34               JP   Z,expectM_3111S122   
3445   CD 6A 0E               CALL   printStr   
3448   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3461   CD 6A 0E               CALL   printStr   
3464   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3473   21 02 00               LD   hl,2   
3476   E5                     PUSH   hl   
3477   E5                     PUSH   hl   
3478   CD 6C 0F               CALL   run   
347B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3483   CD 6A 0E               CALL   printStr   
3486   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3493   E1                     POP   hl   
3494   E5                     PUSH   hl   
3495   E5                     PUSH   hl   
3496   CD 6C 0F               CALL   run   
3499   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34A8   76                     HALT      
34A9                EXPECTM_3111S122:      
34A9   E1                     POP   HL   
34AA                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
34AA   31 00 4C               LD   SP,STACK   
34AD   CD 9E 0E               CALL   coldInit   
34B0   CD 04 4A               CALL   execStr   
34B3   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
34C5   E1                     POP   HL   
34C6   E5                     PUSH   HL   
34C7   11 02 00               LD   DE,2   
34CA   B7                     OR   A   
34CB   ED 52                  SBC   HL,DE   
34CD   7D                     LD   A,L   
34CE   B4                     OR   H   
34CF   CA 35 35               JP   Z,expectM_3112S123   
34D2   CD 6A 0E               CALL   printStr   
34D5   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
34ED   CD 6A 0E               CALL   printStr   
34F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34FF   21 02 00               LD   hl,2   
3502   E5                     PUSH   hl   
3503   E5                     PUSH   hl   
3504   CD 6C 0F               CALL   run   
3507   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
350F   CD 6A 0E               CALL   printStr   
3512   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
351F   E1                     POP   hl   
3520   E5                     PUSH   hl   
3521   E5                     PUSH   hl   
3522   CD 6C 0F               CALL   run   
3525   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3534   76                     HALT      
3535                EXPECTM_3112S123:      
3535   E1                     POP   HL   
3536                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3536   31 00 4C               LD   SP,STACK   
3539   CD 9E 0E               CALL   coldInit   
353C   CD 04 4A               CALL   execStr   
353F   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3558   E1                     POP   HL   
3559   E5                     PUSH   HL   
355A   11 05 00               LD   DE,5   
355D   B7                     OR   A   
355E   ED 52                  SBC   HL,DE   
3560   7D                     LD   A,L   
3561   B4                     OR   H   
3562   CA CF 35               JP   Z,expectM_3113S124   
3565   CD 6A 0E               CALL   printStr   
3568   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3587   CD 6A 0E               CALL   printStr   
358A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3599   21 05 00               LD   hl,5   
359C   E5                     PUSH   hl   
359D   E5                     PUSH   hl   
359E   CD 6C 0F               CALL   run   
35A1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35A9   CD 6A 0E               CALL   printStr   
35AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35B9   E1                     POP   hl   
35BA   E5                     PUSH   hl   
35BB   E5                     PUSH   hl   
35BC   CD 6C 0F               CALL   run   
35BF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35CE   76                     HALT      
35CF                EXPECTM_3113S124:      
35CF   E1                     POP   HL   
35D0                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
35D0   31 00 4C               LD   SP,STACK   
35D3   CD 9E 0E               CALL   coldInit   
35D6   CD 04 4A               CALL   execStr   
35D9   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
35E9   E1                     POP   HL   
35EA   E5                     PUSH   HL   
35EB   11 02 00               LD   DE,2   
35EE   B7                     OR   A   
35EF   ED 52                  SBC   HL,DE   
35F1   7D                     LD   A,L   
35F2   B4                     OR   H   
35F3   CA 57 36               JP   Z,expectM_3114S125   
35F6   CD 6A 0E               CALL   printStr   
35F9   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
360F   CD 6A 0E               CALL   printStr   
3612   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3621   21 02 00               LD   hl,2   
3624   E5                     PUSH   hl   
3625   E5                     PUSH   hl   
3626   CD 6C 0F               CALL   run   
3629   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3631   CD 6A 0E               CALL   printStr   
3634   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3641   E1                     POP   hl   
3642   E5                     PUSH   hl   
3643   E5                     PUSH   hl   
3644   CD 6C 0F               CALL   run   
3647   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3656   76                     HALT      
3657                EXPECTM_3114S125:      
3657   E1                     POP   HL   
3658                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3658   31 00 4C               LD   SP,STACK   
365B   CD 9E 0E               CALL   coldInit   
365E   CD 04 4A               CALL   execStr   
3661   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3678   E1                     POP   HL   
3679   E5                     PUSH   HL   
367A   11 64 00               LD   DE,100   
367D   B7                     OR   A   
367E   ED 52                  SBC   HL,DE   
3680   7D                     LD   A,L   
3681   B4                     OR   H   
3682   CA ED 36               JP   Z,expectM_3115S126   
3685   CD 6A 0E               CALL   printStr   
3688   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
36A5   CD 6A 0E               CALL   printStr   
36A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36B7   21 64 00               LD   hl,100   
36BA   E5                     PUSH   hl   
36BB   E5                     PUSH   hl   
36BC   CD 6C 0F               CALL   run   
36BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36C7   CD 6A 0E               CALL   printStr   
36CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36D7   E1                     POP   hl   
36D8   E5                     PUSH   hl   
36D9   E5                     PUSH   hl   
36DA   CD 6C 0F               CALL   run   
36DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36EC   76                     HALT      
36ED                EXPECTM_3115S126:      
36ED   E1                     POP   HL   
36EE                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
36EE   31 00 4C               LD   SP,STACK   
36F1   CD 9E 0E               CALL   coldInit   
36F4   CD 04 4A               CALL   execStr   
36F7   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
370F   E1                     POP   HL   
3710   E5                     PUSH   HL   
3711   11 01 00               LD   DE,1   
3714   B7                     OR   A   
3715   ED 52                  SBC   HL,DE   
3717   7D                     LD   A,L   
3718   B4                     OR   H   
3719   CA 85 37               JP   Z,expectM_3116S127   
371C   CD 6A 0E               CALL   printStr   
371F   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
373D   CD 6A 0E               CALL   printStr   
3740   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
374F   21 01 00               LD   hl,1   
3752   E5                     PUSH   hl   
3753   E5                     PUSH   hl   
3754   CD 6C 0F               CALL   run   
3757   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
375F   CD 6A 0E               CALL   printStr   
3762   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
376F   E1                     POP   hl   
3770   E5                     PUSH   hl   
3771   E5                     PUSH   hl   
3772   CD 6C 0F               CALL   run   
3775   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3784   76                     HALT      
3785                EXPECTM_3116S127:      
3785   E1                     POP   HL   
3786                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3786   31 00 4C               LD   SP,STACK   
3789   CD 9E 0E               CALL   coldInit   
378C   CD 04 4A               CALL   execStr   
378F   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
37A8   E1                     POP   HL   
37A9   E5                     PUSH   HL   
37AA   11 02 00               LD   DE,2   
37AD   B7                     OR   A   
37AE   ED 52                  SBC   HL,DE   
37B0   7D                     LD   A,L   
37B1   B4                     OR   H   
37B2   CA 1F 38               JP   Z,expectM_3117S128   
37B5   CD 6A 0E               CALL   printStr   
37B8   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
37D7   CD 6A 0E               CALL   printStr   
37DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37E9   21 02 00               LD   hl,2   
37EC   E5                     PUSH   hl   
37ED   E5                     PUSH   hl   
37EE   CD 6C 0F               CALL   run   
37F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37F9   CD 6A 0E               CALL   printStr   
37FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3809   E1                     POP   hl   
380A   E5                     PUSH   hl   
380B   E5                     PUSH   hl   
380C   CD 6C 0F               CALL   run   
380F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
381E   76                     HALT      
381F                EXPECTM_3117S128:      
381F   E1                     POP   HL   
3820                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3820   31 00 4C               LD   SP,STACK   
3823   CD 9E 0E               CALL   coldInit   
3826   CD 04 4A               CALL   execStr   
3829   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3847   E1                     POP   HL   
3848   E5                     PUSH   HL   
3849   11 0B 00               LD   DE,11   
384C   B7                     OR   A   
384D   ED 52                  SBC   HL,DE   
384F   7D                     LD   A,L   
3850   B4                     OR   H   
3851   CA C3 38               JP   Z,expectM_3118S129   
3854   CD 6A 0E               CALL   printStr   
3857   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
387B   CD 6A 0E               CALL   printStr   
387E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
388D   21 0B 00               LD   hl,11   
3890   E5                     PUSH   hl   
3891   E5                     PUSH   hl   
3892   CD 6C 0F               CALL   run   
3895   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
389D   CD 6A 0E               CALL   printStr   
38A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38AD   E1                     POP   hl   
38AE   E5                     PUSH   hl   
38AF   E5                     PUSH   hl   
38B0   CD 6C 0F               CALL   run   
38B3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38C2   76                     HALT      
38C3                EXPECTM_3118S129:      
38C3   E1                     POP   HL   
38C4                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
38C4   31 00 4C               LD   SP,STACK   
38C7   CD 9E 0E               CALL   coldInit   
38CA   CD 04 4A               CALL   execStr   
38CD   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
38EB   E1                     POP   HL   
38EC   E5                     PUSH   HL   
38ED   11 15 00               LD   DE,21   
38F0   B7                     OR   A   
38F1   ED 52                  SBC   HL,DE   
38F3   7D                     LD   A,L   
38F4   B4                     OR   H   
38F5   CA 67 39               JP   Z,expectM_3119S130   
38F8   CD 6A 0E               CALL   printStr   
38FB   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
391F   CD 6A 0E               CALL   printStr   
3922   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3931   21 15 00               LD   hl,21   
3934   E5                     PUSH   hl   
3935   E5                     PUSH   hl   
3936   CD 6C 0F               CALL   run   
3939   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3941   CD 6A 0E               CALL   printStr   
3944   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3951   E1                     POP   hl   
3952   E5                     PUSH   hl   
3953   E5                     PUSH   hl   
3954   CD 6C 0F               CALL   run   
3957   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3966   76                     HALT      
3967                EXPECTM_3119S130:      
3967   E1                     POP   HL   
3968                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3968   31 00 4C               LD   SP,STACK   
396B   CD 9E 0E               CALL   coldInit   
396E   CD 04 4A               CALL   execStr   
3971   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
397F   E1                     POP   HL   
3980   E5                     PUSH   HL   
3981   11 14 00               LD   DE,20   
3984   B7                     OR   A   
3985   ED 52                  SBC   HL,DE   
3987   7D                     LD   A,L   
3988   B4                     OR   H   
3989   CA EB 39               JP   Z,expectM_3120S131   
398C   CD 6A 0E               CALL   printStr   
398F   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
39A3   CD 6A 0E               CALL   printStr   
39A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39B5   21 14 00               LD   hl,20   
39B8   E5                     PUSH   hl   
39B9   E5                     PUSH   hl   
39BA   CD 6C 0F               CALL   run   
39BD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39C5   CD 6A 0E               CALL   printStr   
39C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39D5   E1                     POP   hl   
39D6   E5                     PUSH   hl   
39D7   E5                     PUSH   hl   
39D8   CD 6C 0F               CALL   run   
39DB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39EA   76                     HALT      
39EB                EXPECTM_3120S131:      
39EB   E1                     POP   HL   
39EC                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
39EC   31 00 4C               LD   SP,STACK   
39EF   CD 9E 0E               CALL   coldInit   
39F2   CD 04 4A               CALL   execStr   
39F5   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3A07   E1                     POP   HL   
3A08   E5                     PUSH   HL   
3A09   11 04 00               LD   DE,4   
3A0C   B7                     OR   A   
3A0D   ED 52                  SBC   HL,DE   
3A0F   7D                     LD   A,L   
3A10   B4                     OR   H   
3A11   CA 77 3A               JP   Z,expectM_3121S132   
3A14   CD 6A 0E               CALL   printStr   
3A17   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3A2F   CD 6A 0E               CALL   printStr   
3A32   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A41   21 04 00               LD   hl,4   
3A44   E5                     PUSH   hl   
3A45   E5                     PUSH   hl   
3A46   CD 6C 0F               CALL   run   
3A49   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A51   CD 6A 0E               CALL   printStr   
3A54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A61   E1                     POP   hl   
3A62   E5                     PUSH   hl   
3A63   E5                     PUSH   hl   
3A64   CD 6C 0F               CALL   run   
3A67   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A76   76                     HALT      
3A77                EXPECTM_3121S132:      
3A77   E1                     POP   HL   
3A78                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3A78   31 00 4C               LD   SP,STACK   
3A7B   CD 9E 0E               CALL   coldInit   
3A7E   CD 04 4A               CALL   execStr   
3A81   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3A90   E1                     POP   HL   
3A91   E5                     PUSH   HL   
3A92   11 02 00               LD   DE,2   
3A95   B7                     OR   A   
3A96   ED 52                  SBC   HL,DE   
3A98   7D                     LD   A,L   
3A99   B4                     OR   H   
3A9A   CA FD 3A               JP   Z,expectM_3122S133   
3A9D   CD 6A 0E               CALL   printStr   
3AA0   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3AB5   CD 6A 0E               CALL   printStr   
3AB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AC7   21 02 00               LD   hl,2   
3ACA   E5                     PUSH   hl   
3ACB   E5                     PUSH   hl   
3ACC   CD 6C 0F               CALL   run   
3ACF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AD7   CD 6A 0E               CALL   printStr   
3ADA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AE7   E1                     POP   hl   
3AE8   E5                     PUSH   hl   
3AE9   E5                     PUSH   hl   
3AEA   CD 6C 0F               CALL   run   
3AED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AFC   76                     HALT      
3AFD                EXPECTM_3122S133:      
3AFD   E1                     POP   HL   
3AFE                          ;*Macro unroll:  test "/bm [~A ~B ~C] 1#", 66
3AFE   31 00 4C               LD   SP,STACK   
3B01   CD 9E 0E               CALL   coldInit   
3B04   CD 04 4A               CALL   execStr   
3B07   2F 62 6D 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 DB   "/bm [~A ~B ~C] 1#",0   
3B19   E1                     POP   HL   
3B1A   E5                     PUSH   HL   
3B1B   11 42 00               LD   DE,66   
3B1E   B7                     OR   A   
3B1F   ED 52                  SBC   HL,DE   
3B21   7D                     LD   A,L   
3B22   B4                     OR   H   
3B23   CA 89 3B               JP   Z,expectM_3123S134   
3B26   CD 6A 0E               CALL   printStr   
3B29   43 6F 64 65 3A 20 2F 62 6D 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [~A ~B ~C] 1#"   
3B41   CD 6A 0E               CALL   printStr   
3B44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B53   21 42 00               LD   hl,66   
3B56   E5                     PUSH   hl   
3B57   E5                     PUSH   hl   
3B58   CD 6C 0F               CALL   run   
3B5B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B63   CD 6A 0E               CALL   printStr   
3B66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B73   E1                     POP   hl   
3B74   E5                     PUSH   hl   
3B75   E5                     PUSH   hl   
3B76   CD 6C 0F               CALL   run   
3B79   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B88   76                     HALT      
3B89                EXPECTM_3123S134:      
3B89   E1                     POP   HL   
3B8A                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3B8A   31 00 4C               LD   SP,STACK   
3B8D   CD 9E 0E               CALL   coldInit   
3B90   CD 04 4A               CALL   execStr   
3B93   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3BA7   E1                     POP   HL   
3BA8   E5                     PUSH   HL   
3BA9   11 0A 00               LD   DE,10   
3BAC   B7                     OR   A   
3BAD   ED 52                  SBC   HL,DE   
3BAF   7D                     LD   A,L   
3BB0   B4                     OR   H   
3BB1   CA 19 3C               JP   Z,expectM_3124S135   
3BB4   CD 6A 0E               CALL   printStr   
3BB7   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3BD1   CD 6A 0E               CALL   printStr   
3BD4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BE3   21 0A 00               LD   hl,10   
3BE6   E5                     PUSH   hl   
3BE7   E5                     PUSH   hl   
3BE8   CD 6C 0F               CALL   run   
3BEB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BF3   CD 6A 0E               CALL   printStr   
3BF6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C03   E1                     POP   hl   
3C04   E5                     PUSH   hl   
3C05   E5                     PUSH   hl   
3C06   CD 6C 0F               CALL   run   
3C09   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C18   76                     HALT      
3C19                EXPECTM_3124S135:      
3C19   E1                     POP   HL   
3C1A                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3C1A   31 00 4C               LD   SP,STACK   
3C1D   CD 9E 0E               CALL   coldInit   
3C20   CD 04 4A               CALL   execStr   
3C23   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3C3E   E1                     POP   HL   
3C3F   E5                     PUSH   HL   
3C40   11 0A 00               LD   DE,10   
3C43   B7                     OR   A   
3C44   ED 52                  SBC   HL,DE   
3C46   7D                     LD   A,L   
3C47   B4                     OR   H   
3C48   CA B7 3C               JP   Z,expectM_3125S136   
3C4B   CD 6A 0E               CALL   printStr   
3C4E   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3C6F   CD 6A 0E               CALL   printStr   
3C72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C81   21 0A 00               LD   hl,10   
3C84   E5                     PUSH   hl   
3C85   E5                     PUSH   hl   
3C86   CD 6C 0F               CALL   run   
3C89   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C91   CD 6A 0E               CALL   printStr   
3C94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CA1   E1                     POP   hl   
3CA2   E5                     PUSH   hl   
3CA3   E5                     PUSH   hl   
3CA4   CD 6C 0F               CALL   run   
3CA7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CB6   76                     HALT      
3CB7                EXPECTM_3125S136:      
3CB7   E1                     POP   HL   
3CB8                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3CB8   31 00 4C               LD   SP,STACK   
3CBB   CD 9E 0E               CALL   coldInit   
3CBE   CD 04 4A               CALL   execStr   
3CC1   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3CE0   E1                     POP   HL   
3CE1   E5                     PUSH   HL   
3CE2   11 0A 00               LD   DE,10   
3CE5   B7                     OR   A   
3CE6   ED 52                  SBC   HL,DE   
3CE8   7D                     LD   A,L   
3CE9   B4                     OR   H   
3CEA   CA 5D 3D               JP   Z,expectM_3126S137   
3CED   CD 6A 0E               CALL   printStr   
3CF0   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3D15   CD 6A 0E               CALL   printStr   
3D18   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D27   21 0A 00               LD   hl,10   
3D2A   E5                     PUSH   hl   
3D2B   E5                     PUSH   hl   
3D2C   CD 6C 0F               CALL   run   
3D2F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D37   CD 6A 0E               CALL   printStr   
3D3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D47   E1                     POP   hl   
3D48   E5                     PUSH   hl   
3D49   E5                     PUSH   hl   
3D4A   CD 6C 0F               CALL   run   
3D4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D5C   76                     HALT      
3D5D                EXPECTM_3126S137:      
3D5D   E1                     POP   HL   
3D5E                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3D5E   31 00 4C               LD   SP,STACK   
3D61   CD 9E 0E               CALL   coldInit   
3D64   CD 04 4A               CALL   execStr   
3D67   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3D86   E1                     POP   HL   
3D87   E5                     PUSH   HL   
3D88   11 14 00               LD   DE,20   
3D8B   B7                     OR   A   
3D8C   ED 52                  SBC   HL,DE   
3D8E   7D                     LD   A,L   
3D8F   B4                     OR   H   
3D90   CA 03 3E               JP   Z,expectM_3127S138   
3D93   CD 6A 0E               CALL   printStr   
3D96   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3DBB   CD 6A 0E               CALL   printStr   
3DBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DCD   21 14 00               LD   hl,20   
3DD0   E5                     PUSH   hl   
3DD1   E5                     PUSH   hl   
3DD2   CD 6C 0F               CALL   run   
3DD5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DDD   CD 6A 0E               CALL   printStr   
3DE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DED   E1                     POP   hl   
3DEE   E5                     PUSH   hl   
3DEF   E5                     PUSH   hl   
3DF0   CD 6C 0F               CALL   run   
3DF3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E02   76                     HALT      
3E03                EXPECTM_3127S138:      
3E03   E1                     POP   HL   
3E04                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3E04   31 00 4C               LD   SP,STACK   
3E07   CD 9E 0E               CALL   coldInit   
3E0A   CD 04 4A               CALL   execStr   
3E0D   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3E25   E1                     POP   HL   
3E26   E5                     PUSH   HL   
3E27   11 06 00               LD   DE,6   
3E2A   B7                     OR   A   
3E2B   ED 52                  SBC   HL,DE   
3E2D   7D                     LD   A,L   
3E2E   B4                     OR   H   
3E2F   CA 9B 3E               JP   Z,expectM_3128S139   
3E32   CD 6A 0E               CALL   printStr   
3E35   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3E53   CD 6A 0E               CALL   printStr   
3E56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E65   21 06 00               LD   hl,6   
3E68   E5                     PUSH   hl   
3E69   E5                     PUSH   hl   
3E6A   CD 6C 0F               CALL   run   
3E6D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E75   CD 6A 0E               CALL   printStr   
3E78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E85   E1                     POP   hl   
3E86   E5                     PUSH   hl   
3E87   E5                     PUSH   hl   
3E88   CD 6C 0F               CALL   run   
3E8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E9A   76                     HALT      
3E9B                EXPECTM_3128S139:      
3E9B   E1                     POP   HL   
3E9C                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3E9C   31 00 4C               LD   SP,STACK   
3E9F   CD 9E 0E               CALL   coldInit   
3EA2   CD 04 4A               CALL   execStr   
3EA5   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3EC0   E1                     POP   HL   
3EC1   E5                     PUSH   HL   
3EC2   11 02 00               LD   DE,2   
3EC5   B7                     OR   A   
3EC6   ED 52                  SBC   HL,DE   
3EC8   7D                     LD   A,L   
3EC9   B4                     OR   H   
3ECA   CA 39 3F               JP   Z,expectM_3129S140   
3ECD   CD 6A 0E               CALL   printStr   
3ED0   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3EF1   CD 6A 0E               CALL   printStr   
3EF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F03   21 02 00               LD   hl,2   
3F06   E5                     PUSH   hl   
3F07   E5                     PUSH   hl   
3F08   CD 6C 0F               CALL   run   
3F0B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F13   CD 6A 0E               CALL   printStr   
3F16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F23   E1                     POP   hl   
3F24   E5                     PUSH   hl   
3F25   E5                     PUSH   hl   
3F26   CD 6C 0F               CALL   run   
3F29   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F38   76                     HALT      
3F39                EXPECTM_3129S140:      
3F39   E1                     POP   HL   
3F3A                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3F3A   31 00 4C               LD   SP,STACK   
3F3D   CD 9E 0E               CALL   coldInit   
3F40   CD 04 4A               CALL   execStr   
3F43   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3F69   E1                     POP   HL   
3F6A   E5                     PUSH   HL   
3F6B   11 0A 00               LD   DE,10   
3F6E   B7                     OR   A   
3F6F   ED 52                  SBC   HL,DE   
3F71   7D                     LD   A,L   
3F72   B4                     OR   H   
3F73   CA ED 3F               JP   Z,expectM_3130S141   
3F76   CD 6A 0E               CALL   printStr   
3F79   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3FA5   CD 6A 0E               CALL   printStr   
3FA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FB7   21 0A 00               LD   hl,10   
3FBA   E5                     PUSH   hl   
3FBB   E5                     PUSH   hl   
3FBC   CD 6C 0F               CALL   run   
3FBF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FC7   CD 6A 0E               CALL   printStr   
3FCA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FD7   E1                     POP   hl   
3FD8   E5                     PUSH   hl   
3FD9   E5                     PUSH   hl   
3FDA   CD 6C 0F               CALL   run   
3FDD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FEC   76                     HALT      
3FED                EXPECTM_3130S141:      
3FED   E1                     POP   HL   
3FEE                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3FEE   31 00 4C               LD   SP,STACK   
3FF1   CD 9E 0E               CALL   coldInit   
3FF4   CD 04 4A               CALL   execStr   
3FF7   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4022   E1                     POP   HL   
4023   E5                     PUSH   HL   
4024   11 06 00               LD   DE,6   
4027   B7                     OR   A   
4028   ED 52                  SBC   HL,DE   
402A   7D                     LD   A,L   
402B   B4                     OR   H   
402C   CA AB 40               JP   Z,expectM_3131S142   
402F   CD 6A 0E               CALL   printStr   
4032   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4063   CD 6A 0E               CALL   printStr   
4066   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4075   21 06 00               LD   hl,6   
4078   E5                     PUSH   hl   
4079   E5                     PUSH   hl   
407A   CD 6C 0F               CALL   run   
407D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4085   CD 6A 0E               CALL   printStr   
4088   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4095   E1                     POP   hl   
4096   E5                     PUSH   hl   
4097   E5                     PUSH   hl   
4098   CD 6C 0F               CALL   run   
409B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40AA   76                     HALT      
40AB                EXPECTM_3131S142:      
40AB   E1                     POP   HL   
40AC                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
40AC   31 00 4C               LD   SP,STACK   
40AF   CD 9E 0E               CALL   coldInit   
40B2   CD 04 4A               CALL   execStr   
40B5   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
40C9   E1                     POP   HL   
40CA   E5                     PUSH   HL   
40CB   11 03 00               LD   DE,3   
40CE   B7                     OR   A   
40CF   ED 52                  SBC   HL,DE   
40D1   7D                     LD   A,L   
40D2   B4                     OR   H   
40D3   CA 3B 41               JP   Z,expectM_3132S143   
40D6   CD 6A 0E               CALL   printStr   
40D9   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
40F3   CD 6A 0E               CALL   printStr   
40F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4105   21 03 00               LD   hl,3   
4108   E5                     PUSH   hl   
4109   E5                     PUSH   hl   
410A   CD 6C 0F               CALL   run   
410D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4115   CD 6A 0E               CALL   printStr   
4118   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4125   E1                     POP   hl   
4126   E5                     PUSH   hl   
4127   E5                     PUSH   hl   
4128   CD 6C 0F               CALL   run   
412B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
413A   76                     HALT      
413B                EXPECTM_3132S143:      
413B   E1                     POP   HL   
413C                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
413C   31 00 4C               LD   SP,STACK   
413F   CD 9E 0E               CALL   coldInit   
4142   CD 04 4A               CALL   execStr   
4145   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
4159   E1                     POP   HL   
415A   E5                     PUSH   HL   
415B   11 01 00               LD   DE,1   
415E   B7                     OR   A   
415F   ED 52                  SBC   HL,DE   
4161   7D                     LD   A,L   
4162   B4                     OR   H   
4163   CA CB 41               JP   Z,expectM_3133S144   
4166   CD 6A 0E               CALL   printStr   
4169   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
4183   CD 6A 0E               CALL   printStr   
4186   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4195   21 01 00               LD   hl,1   
4198   E5                     PUSH   hl   
4199   E5                     PUSH   hl   
419A   CD 6C 0F               CALL   run   
419D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41A5   CD 6A 0E               CALL   printStr   
41A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41B5   E1                     POP   hl   
41B6   E5                     PUSH   hl   
41B7   E5                     PUSH   hl   
41B8   CD 6C 0F               CALL   run   
41BB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41CA   76                     HALT      
41CB                EXPECTM_3133S144:      
41CB   E1                     POP   HL   
41CC                          ;*Macro unroll:  test "~A 1 - /ad", NUL
41CC   31 00 4C               LD   SP,STACK   
41CF   CD 9E 0E               CALL   coldInit   
41D2   CD 04 4A               CALL   execStr   
41D5   7E 41 20 31 20 2D 20 2F 61 64 00 DB   "~A 1 - /ad",0   
41E0   E1                     POP   HL   
41E1   E5                     PUSH   HL   
41E2   11 00 00               LD   DE,NUL   
41E5   B7                     OR   A   
41E6   ED 52                  SBC   HL,DE   
41E8   7D                     LD   A,L   
41E9   B4                     OR   H   
41EA   CA 49 42               JP   Z,expectM_3134S145   
41ED   CD 6A 0E               CALL   printStr   
41F0   43 6F 64 65 3A 20 7E 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~A 1 - /ad"   
4201   CD 6A 0E               CALL   printStr   
4204   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4213   21 00 00               LD   hl,NUL   
4216   E5                     PUSH   hl   
4217   E5                     PUSH   hl   
4218   CD 6C 0F               CALL   run   
421B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4223   CD 6A 0E               CALL   printStr   
4226   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4233   E1                     POP   hl   
4234   E5                     PUSH   hl   
4235   E5                     PUSH   hl   
4236   CD 6C 0F               CALL   run   
4239   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4248   76                     HALT      
4249                EXPECTM_3134S145:      
4249   E1                     POP   HL   
424A                          ;*Macro unroll:  test "~Z 1 + /ad", NUL
424A   31 00 4C               LD   SP,STACK   
424D   CD 9E 0E               CALL   coldInit   
4250   CD 04 4A               CALL   execStr   
4253   7E 5A 20 31 20 2B 20 2F 61 64 00 DB   "~Z 1 + /ad",0   
425E   E1                     POP   HL   
425F   E5                     PUSH   HL   
4260   11 00 00               LD   DE,NUL   
4263   B7                     OR   A   
4264   ED 52                  SBC   HL,DE   
4266   7D                     LD   A,L   
4267   B4                     OR   H   
4268   CA C7 42               JP   Z,expectM_3135S146   
426B   CD 6A 0E               CALL   printStr   
426E   43 6F 64 65 3A 20 7E 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~Z 1 + /ad"   
427F   CD 6A 0E               CALL   printStr   
4282   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4291   21 00 00               LD   hl,NUL   
4294   E5                     PUSH   hl   
4295   E5                     PUSH   hl   
4296   CD 6C 0F               CALL   run   
4299   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42A1   CD 6A 0E               CALL   printStr   
42A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B1   E1                     POP   hl   
42B2   E5                     PUSH   hl   
42B3   E5                     PUSH   hl   
42B4   CD 6C 0F               CALL   run   
42B7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42C6   76                     HALT      
42C7                EXPECTM_3135S146:      
42C7   E1                     POP   HL   
42C8                          ;*Macro unroll:  test "~a 1 - /ad", NUL
42C8   31 00 4C               LD   SP,STACK   
42CB   CD 9E 0E               CALL   coldInit   
42CE   CD 04 4A               CALL   execStr   
42D1   7E 61 20 31 20 2D 20 2F 61 64 00 DB   "~a 1 - /ad",0   
42DC   E1                     POP   HL   
42DD   E5                     PUSH   HL   
42DE   11 00 00               LD   DE,NUL   
42E1   B7                     OR   A   
42E2   ED 52                  SBC   HL,DE   
42E4   7D                     LD   A,L   
42E5   B4                     OR   H   
42E6   CA 45 43               JP   Z,expectM_3136S147   
42E9   CD 6A 0E               CALL   printStr   
42EC   43 6F 64 65 3A 20 7E 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~a 1 - /ad"   
42FD   CD 6A 0E               CALL   printStr   
4300   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
430F   21 00 00               LD   hl,NUL   
4312   E5                     PUSH   hl   
4313   E5                     PUSH   hl   
4314   CD 6C 0F               CALL   run   
4317   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
431F   CD 6A 0E               CALL   printStr   
4322   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
432F   E1                     POP   hl   
4330   E5                     PUSH   hl   
4331   E5                     PUSH   hl   
4332   CD 6C 0F               CALL   run   
4335   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4344   76                     HALT      
4345                EXPECTM_3136S147:      
4345   E1                     POP   HL   
4346                          ;*Macro unroll:  test "~z 1 + /ad", NUL
4346   31 00 4C               LD   SP,STACK   
4349   CD 9E 0E               CALL   coldInit   
434C   CD 04 4A               CALL   execStr   
434F   7E 7A 20 31 20 2B 20 2F 61 64 00 DB   "~z 1 + /ad",0   
435A   E1                     POP   HL   
435B   E5                     PUSH   HL   
435C   11 00 00               LD   DE,NUL   
435F   B7                     OR   A   
4360   ED 52                  SBC   HL,DE   
4362   7D                     LD   A,L   
4363   B4                     OR   H   
4364   CA C3 43               JP   Z,expectM_3137S148   
4367   CD 6A 0E               CALL   printStr   
436A   43 6F 64 65 3A 20 7E 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~z 1 + /ad"   
437B   CD 6A 0E               CALL   printStr   
437E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
438D   21 00 00               LD   hl,NUL   
4390   E5                     PUSH   hl   
4391   E5                     PUSH   hl   
4392   CD 6C 0F               CALL   run   
4395   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
439D   CD 6A 0E               CALL   printStr   
43A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43AD   E1                     POP   hl   
43AE   E5                     PUSH   hl   
43AF   E5                     PUSH   hl   
43B0   CD 6C 0F               CALL   run   
43B3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43C2   76                     HALT      
43C3                EXPECTM_3137S148:      
43C3   E1                     POP   HL   
43C4                          ;*Macro unroll:  test "~z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
43C4   31 00 4C               LD   SP,STACK   
43C7   CD 9E 0E               CALL   coldInit   
43CA   CD 04 4A               CALL   execStr   
43CD   7E 7A 20 2F 61 64 00   DB   "~z /ad",0   
43D4   E1                     POP   HL   
43D5   E5                     PUSH   HL   
43D6   11 66 4E               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
43D9   B7                     OR   A   
43DA   ED 52                  SBC   HL,DE   
43DC   7D                     LD   A,L   
43DD   B4                     OR   H   
43DE   CA 39 44               JP   Z,expectM_3138S149   
43E1   CD 6A 0E               CALL   printStr   
43E4   43 6F 64 65 3A 20 7E 7A 20 2F 61 64 00 .CSTR   "Code: ","~z /ad"   
43F1   CD 6A 0E               CALL   printStr   
43F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4403   21 66 4E               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4406   E5                     PUSH   hl   
4407   E5                     PUSH   hl   
4408   CD 6C 0F               CALL   run   
440B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4413   CD 6A 0E               CALL   printStr   
4416   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4423   E1                     POP   hl   
4424   E5                     PUSH   hl   
4425   E5                     PUSH   hl   
4426   CD 6C 0F               CALL   run   
4429   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4438   76                     HALT      
4439                EXPECTM_3138S149:      
4439   E1                     POP   HL   
443A                          ;*Macro unroll:  test "~a /ad", VARS + ("Z"-"A"+1)*2
443A   31 00 4C               LD   SP,STACK   
443D   CD 9E 0E               CALL   coldInit   
4440   CD 04 4A               CALL   execStr   
4443   7E 61 20 2F 61 64 00   DB   "~a /ad",0   
444A   E1                     POP   HL   
444B   E5                     PUSH   HL   
444C   11 34 4E               LD   DE,VARS + ("Z"-"A"+1)*2   
444F   B7                     OR   A   
4450   ED 52                  SBC   HL,DE   
4452   7D                     LD   A,L   
4453   B4                     OR   H   
4454   CA AF 44               JP   Z,expectM_3139S150   
4457   CD 6A 0E               CALL   printStr   
445A   43 6F 64 65 3A 20 7E 61 20 2F 61 64 00 .CSTR   "Code: ","~a /ad"   
4467   CD 6A 0E               CALL   printStr   
446A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4479   21 34 4E               LD   hl,VARS + ("Z"-"A"+1)*2   
447C   E5                     PUSH   hl   
447D   E5                     PUSH   hl   
447E   CD 6C 0F               CALL   run   
4481   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4489   CD 6A 0E               CALL   printStr   
448C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4499   E1                     POP   hl   
449A   E5                     PUSH   hl   
449B   E5                     PUSH   hl   
449C   CD 6C 0F               CALL   run   
449F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44AE   76                     HALT      
44AF                EXPECTM_3139S150:      
44AF   E1                     POP   HL   
44B0                          ;*Macro unroll:  test "~Z /ad", VARS + ("Z"-"A")*2
44B0   31 00 4C               LD   SP,STACK   
44B3   CD 9E 0E               CALL   coldInit   
44B6   CD 04 4A               CALL   execStr   
44B9   7E 5A 20 2F 61 64 00   DB   "~Z /ad",0   
44C0   E1                     POP   HL   
44C1   E5                     PUSH   HL   
44C2   11 32 4E               LD   DE,VARS + ("Z"-"A")*2   
44C5   B7                     OR   A   
44C6   ED 52                  SBC   HL,DE   
44C8   7D                     LD   A,L   
44C9   B4                     OR   H   
44CA   CA 25 45               JP   Z,expectM_3140S151   
44CD   CD 6A 0E               CALL   printStr   
44D0   43 6F 64 65 3A 20 7E 5A 20 2F 61 64 00 .CSTR   "Code: ","~Z /ad"   
44DD   CD 6A 0E               CALL   printStr   
44E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44EF   21 32 4E               LD   hl,VARS + ("Z"-"A")*2   
44F2   E5                     PUSH   hl   
44F3   E5                     PUSH   hl   
44F4   CD 6C 0F               CALL   run   
44F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44FF   CD 6A 0E               CALL   printStr   
4502   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
450F   E1                     POP   hl   
4510   E5                     PUSH   hl   
4511   E5                     PUSH   hl   
4512   CD 6C 0F               CALL   run   
4515   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4524   76                     HALT      
4525                EXPECTM_3140S151:      
4525   E1                     POP   HL   
4526                          ;*Macro unroll:  test "~A /ad", VARS
4526   31 00 4C               LD   SP,STACK   
4529   CD 9E 0E               CALL   coldInit   
452C   CD 04 4A               CALL   execStr   
452F   7E 41 20 2F 61 64 00   DB   "~A /ad",0   
4536   E1                     POP   HL   
4537   E5                     PUSH   HL   
4538   11 00 4E               LD   DE,VARS   
453B   B7                     OR   A   
453C   ED 52                  SBC   HL,DE   
453E   7D                     LD   A,L   
453F   B4                     OR   H   
4540   CA 9B 45               JP   Z,expectM_3141S152   
4543   CD 6A 0E               CALL   printStr   
4546   43 6F 64 65 3A 20 7E 41 20 2F 61 64 00 .CSTR   "Code: ","~A /ad"   
4553   CD 6A 0E               CALL   printStr   
4556   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4565   21 00 4E               LD   hl,VARS   
4568   E5                     PUSH   hl   
4569   E5                     PUSH   hl   
456A   CD 6C 0F               CALL   run   
456D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4575   CD 6A 0E               CALL   printStr   
4578   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4585   E1                     POP   hl   
4586   E5                     PUSH   hl   
4587   E5                     PUSH   hl   
4588   CD 6C 0F               CALL   run   
458B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
459A   76                     HALT      
459B                EXPECTM_3141S152:      
459B   E1                     POP   HL   
459C                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
459C   31 00 4C               LD   SP,STACK   
459F   CD 9E 0E               CALL   coldInit   
45A2   CD 04 4A               CALL   execStr   
45A5   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
45B2   E1                     POP   HL   
45B3   E5                     PUSH   HL   
45B4   11 01 00               LD   DE,1   
45B7   B7                     OR   A   
45B8   ED 52                  SBC   HL,DE   
45BA   7D                     LD   A,L   
45BB   B4                     OR   H   
45BC   CA 1D 46               JP   Z,expectM_3142S153   
45BF   CD 6A 0E               CALL   printStr   
45C2   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
45D5   CD 6A 0E               CALL   printStr   
45D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E7   21 01 00               LD   hl,1   
45EA   E5                     PUSH   hl   
45EB   E5                     PUSH   hl   
45EC   CD 6C 0F               CALL   run   
45EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45F7   CD 6A 0E               CALL   printStr   
45FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4607   E1                     POP   hl   
4608   E5                     PUSH   hl   
4609   E5                     PUSH   hl   
460A   CD 6C 0F               CALL   run   
460D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
461C   76                     HALT      
461D                EXPECTM_3142S153:      
461D   E1                     POP   HL   
461E                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
461E   31 00 4C               LD   SP,STACK   
4621   CD 9E 0E               CALL   coldInit   
4624   CD 04 4A               CALL   execStr   
4627   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
463B   E1                     POP   HL   
463C   E5                     PUSH   HL   
463D   11 03 00               LD   DE,3   
4640   B7                     OR   A   
4641   ED 52                  SBC   HL,DE   
4643   7D                     LD   A,L   
4644   B4                     OR   H   
4645   CA AD 46               JP   Z,expectM_3143S154   
4648   CD 6A 0E               CALL   printStr   
464B   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4665   CD 6A 0E               CALL   printStr   
4668   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4677   21 03 00               LD   hl,3   
467A   E5                     PUSH   hl   
467B   E5                     PUSH   hl   
467C   CD 6C 0F               CALL   run   
467F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4687   CD 6A 0E               CALL   printStr   
468A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4697   E1                     POP   hl   
4698   E5                     PUSH   hl   
4699   E5                     PUSH   hl   
469A   CD 6C 0F               CALL   run   
469D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46AC   76                     HALT      
46AD                EXPECTM_3143S154:      
46AD   E1                     POP   HL   
46AE                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
46AE   31 00 4C               LD   SP,STACK   
46B1   CD 9E 0E               CALL   coldInit   
46B4   CD 04 4A               CALL   execStr   
46B7   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
46CE   E1                     POP   HL   
46CF   E5                     PUSH   HL   
46D0   11 02 00               LD   DE,2   
46D3   B7                     OR   A   
46D4   ED 52                  SBC   HL,DE   
46D6   7D                     LD   A,L   
46D7   B4                     OR   H   
46D8   CA 43 47               JP   Z,expectM_3144S155   
46DB   CD 6A 0E               CALL   printStr   
46DE   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
46FB   CD 6A 0E               CALL   printStr   
46FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
470D   21 02 00               LD   hl,2   
4710   E5                     PUSH   hl   
4711   E5                     PUSH   hl   
4712   CD 6C 0F               CALL   run   
4715   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
471D   CD 6A 0E               CALL   printStr   
4720   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
472D   E1                     POP   hl   
472E   E5                     PUSH   hl   
472F   E5                     PUSH   hl   
4730   CD 6C 0F               CALL   run   
4733   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4742   76                     HALT      
4743                EXPECTM_3144S155:      
4743   E1                     POP   HL   
4744                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4744   31 00 4C               LD   SP,STACK   
4747   CD 9E 0E               CALL   coldInit   
474A   CD 04 4A               CALL   execStr   
474D   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4770   E1                     POP   HL   
4771   E5                     PUSH   HL   
4772   11 01 00               LD   DE,1   
4775   B7                     OR   A   
4776   ED 52                  SBC   HL,DE   
4778   7D                     LD   A,L   
4779   B4                     OR   H   
477A   CA F1 47               JP   Z,expectM_3145S156   
477D   CD 6A 0E               CALL   printStr   
4780   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
47A9   CD 6A 0E               CALL   printStr   
47AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47BB   21 01 00               LD   hl,1   
47BE   E5                     PUSH   hl   
47BF   E5                     PUSH   hl   
47C0   CD 6C 0F               CALL   run   
47C3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47CB   CD 6A 0E               CALL   printStr   
47CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47DB   E1                     POP   hl   
47DC   E5                     PUSH   hl   
47DD   E5                     PUSH   hl   
47DE   CD 6C 0F               CALL   run   
47E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47F0   76                     HALT      
47F1                EXPECTM_3145S156:      
47F1   E1                     POP   HL   
47F2                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
47F2   31 00 4C               LD   SP,STACK   
47F5   CD 9E 0E               CALL   coldInit   
47F8   CD 04 4A               CALL   execStr   
47FB   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
481E   E1                     POP   HL   
481F   E5                     PUSH   HL   
4820   11 01 00               LD   DE,1   
4823   B7                     OR   A   
4824   ED 52                  SBC   HL,DE   
4826   7D                     LD   A,L   
4827   B4                     OR   H   
4828   CA 9F 48               JP   Z,expectM_3146S157   
482B   CD 6A 0E               CALL   printStr   
482E   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4857   CD 6A 0E               CALL   printStr   
485A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4869   21 01 00               LD   hl,1   
486C   E5                     PUSH   hl   
486D   E5                     PUSH   hl   
486E   CD 6C 0F               CALL   run   
4871   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4879   CD 6A 0E               CALL   printStr   
487C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4889   E1                     POP   hl   
488A   E5                     PUSH   hl   
488B   E5                     PUSH   hl   
488C   CD 6C 0F               CALL   run   
488F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
489E   76                     HALT      
489F                EXPECTM_3146S157:      
489F   E1                     POP   HL   
48A0                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
48A0   31 00 4C               LD   SP,STACK   
48A3   CD 9E 0E               CALL   coldInit   
48A6   CD 04 4A               CALL   execStr   
48A9   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
48D9   E1                     POP   HL   
48DA   E5                     PUSH   HL   
48DB   11 02 00               LD   DE,2   
48DE   B7                     OR   A   
48DF   ED 52                  SBC   HL,DE   
48E1   7D                     LD   A,L   
48E2   B4                     OR   H   
48E3   CA 67 49               JP   Z,expectM_3147S158   
48E6   CD 6A 0E               CALL   printStr   
48E9   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
491F   CD 6A 0E               CALL   printStr   
4922   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4931   21 02 00               LD   hl,2   
4934   E5                     PUSH   hl   
4935   E5                     PUSH   hl   
4936   CD 6C 0F               CALL   run   
4939   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4941   CD 6A 0E               CALL   printStr   
4944   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4951   E1                     POP   hl   
4952   E5                     PUSH   hl   
4953   E5                     PUSH   hl   
4954   CD 6C 0F               CALL   run   
4957   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4966   76                     HALT      
4967                EXPECTM_3147S158:      
4967   E1                     POP   HL   
4968                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4968   31 00 4C               LD   SP,STACK   
496B   CD 9E 0E               CALL   coldInit   
496E   CD 04 4A               CALL   execStr   
4971   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4986   E1                     POP   HL   
4987   E5                     PUSH   HL   
4988   11 02 00               LD   DE,2   
498B   B7                     OR   A   
498C   ED 52                  SBC   HL,DE   
498E   7D                     LD   A,L   
498F   B4                     OR   H   
4990   CA F9 49               JP   Z,expectM_3148S159   
4993   CD 6A 0E               CALL   printStr   
4996   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
49B1   CD 6A 0E               CALL   printStr   
49B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49C3   21 02 00               LD   hl,2   
49C6   E5                     PUSH   hl   
49C7   E5                     PUSH   hl   
49C8   CD 6C 0F               CALL   run   
49CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49D3   CD 6A 0E               CALL   printStr   
49D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49E3   E1                     POP   hl   
49E4   E5                     PUSH   hl   
49E5   E5                     PUSH   hl   
49E6   CD 6C 0F               CALL   run   
49E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49F8   76                     HALT      
49F9                EXPECTM_3148S159:      
49F9   E1                     POP   HL   
49FA                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
49FA                             ; 
49FA   CD 6A 0E               CALL   printStr   
49FD   44 6F 6E 65 21 00      .CSTR   "Done!"   
4A03   76                     HALT      
4A04                             ; executes a null teminated string (null executes exit_)
4A04                             ; the string should be immedaitely following the call
4A04                EXECSTR:      ; create a root stack frame
4A04   C1                     POP   bc   ; bc = code*
4A05   0B                     DEC   bc   ; dec to prepare for next routine
4A06   11 00 00               LD   de,0   
4A09   D5                     PUSH   de   ; push fake IP
4A0A   D5                     PUSH   de   ; push null arg_list*
4A0B   D5                     PUSH   de   ; push null first_arg*
4A0C   D5                     PUSH   de   ; push fake BP
4A0D   DD E9                  JP   (ix)   
4A0F                STKSIZE:   EQU   $100   ; Stack size
4A0F                TIBSIZE:   EQU   $100   ; 256 bytes
4A0F                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4A0F                          ALIGN   $100   
4B00                          DS   STKSIZE   
4C00                STACK:       
4C00                          ALIGN   $100   
4C00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                VARS:        
4E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4ED0                RESTARTS:      
4ED0                RST08:    DS   2   
4ED2                RST10:    DS   2   
4ED4                RST18:    DS   2   
4ED6                RST20:    DS   2   
4ED8                RST28:    DS   2   
4EDA                RST30:    DS   2   ; 
4EDC                BAUD:     DS   2   ; 
4EDE                INTVEC:   DS   2   ; 
4EE0                NMIVEC:   DS   2   ; 
4EE2                GETCVEC:   DS   2   ; 
4EE4                PUTCVEC:   DS   2   ; 
4EE6                SYSVARS:      
4EE6                             ; initialised sys variables (preserved)
4EE6                VDATAWIDTH:   DS   2   ; 
4EE8                VNUMBASE:   DS   2   ; 
4EEA                VTIBPTR:   DS   2   ; 
4EEC                VBUFPTR:   DS   2   ; 
4EEE                VNEXT:    DS   2   ; 
4EF0                VHEAPPTR:   DS   2   ; 
4EF2                VRECUR:   DS   2   ; 
4EF4                VDEFINE:   DS   2   ; 
4EF6                VSTRMODE:   DS   2   ; 
4EF8                             ; uninitialised sys variables (preserved)
4EF8                VPOINTER:   DS   2   ; 
4EFA                VREMAIN:   DS   2   ; 
4EFC                VSAVEDIP:   DS   2   ; 
4EFE                VSAVEDSP:   DS   2   ; 
4F00                VSAVEDNEXT:   DS   2   ; 
4F02                VSAVEDBP:   DS   2   ; 
4F04                             ; uninitialised sys variables (unpreserved)
4F04                VTEMP1:   DS   2   ; 
4F06                VTEMP2:   DS   2   ; 
4F08                VTEMP3:   DS   2   ; 
4F0A                VLASTDEF:   DS   2   ; 
4F0C                TBPTR:    DS   2   ; reserved for tests
4F0E                TITLEBUF:   DS   20   
4F22                HEAP:        
4F22                             ; FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
4F22                             ; db "{"
4F22                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
4F22                             ; db    "\\kt{"
4F22                             ; db      "0%t!=/qt"                  ; break if type != 0
4F22                             ; db      "\\dt:a{"                   ; return talkback to receive data
4F22                             ; db        "%L1#!/qt"                ; if not active don't send
4F22                             ; db        "%L0# %a="                ; store current index in A
4F22                             ; db        "%s %L0# +="              ; inc value of index by step
4F22                             ; db        "1%t!=/qt"                ; break if type != 0
4F22                             ; db        "%a %e <"                 ; ifte: in range?
4F22                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: 1: send index, 2: active = false, send quit
4F22                             ; db          "?? %k/rc"              ; ifte: call sink note: /rc recur
4F22                             ; db      "} 0 %k^"                   ; init sink
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC map, 0, "sf"                   ; map
4F22                             ; db "{"
4F22                             ; db    "\\kt{"
4F22                             ; db      "0%t!=/qt"                  ; break if type != 0
4F22                             ; db      "\\dt{"                     ; call source with tb
4F22                             ; db        "1%t=="                   ; ifte: type == 1 ?
4F22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
4F22                             ; db        "?? %t %k^"               ; ifte: send to sink
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; ; /ft filter
4F22                             ; ; src pred -- src1
4F22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
4F22                             ; db "{"
4F22                             ; db    "[0]%T="
4F22                             ; db    "\\kt{"                       ; return talkback to receive data
4F22                             ; db      "\\dt{"                     ; call source with tb
4F22                             ; db        "["
4F22                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
4F22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
4F22                             ; db          "{/t}"                  ; case 2: return true
4F22                             ; db        "]%t#^"                   ; select on %t
4F22                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
4F22                             ; db        "??"
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC forEach, 1, "spT"
4F22                             ; db "{"
4F22                             ; db    "[0]%T="
4F22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
4F22                             ; db      "2%t==/qt"                    ; if type == 2 skip
4F22                             ; db      "0%t=="                   ; ifte: type = 0 ?
4F22                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
4F22                             ; db      "??"                      ; ifte:
4F22                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
4F22                             ; db    "} 0 %s^"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
4F22                             ; db "{"                                  ; reducer: \\da00bbLi4u
4F22                             ; db    "[%i]%A="
4F22                             ; db    "\\kt{"                         ; return talkback to receive data
4F22                             ; db      "\\dt{"                         ; call source with tb
4F22                             ; db        "1%t=="                       ; ifte: type == 1 ?
4F22                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
4F22                             ; db        "?? %t %k^"                    ; ifte: send to sink
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2352 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2358 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
NUM:                044C DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        047C DEFINED AT LINE 750 IN MAIN.asm
PRINTSTRING0:       0483 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTSTRING1:       0486 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
QUOTE:              0492 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0492 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0492 DEFINED AT LINE 770 IN MAIN.asm
STRING1:            049B DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
STRING2:            049E DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
STRING3:            04A4 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
PERCENT:            04AC DEFINED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04AC DEFINED AT LINE 797 IN MAIN.asm
ARG0:               04C8 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ARG0A:              04D1 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
ARG1:               04D6 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
ARG1A:              04DE DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTNUMBER_:         050D DEFINED AT LINE 856 IN MAIN.asm
DOTDEC:             0518 DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
DOTDECX:            0526 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
DOTDEC0:            0535 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
DOTDEC1:            0545 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
DOTDEC2:            0565 DEFINED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
DOTDEC3:            0567 DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
DOTDEC4:            0577 DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
DOTDEC5:            0578 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
DOTHEX:             057E DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
DOTHEX0:            0591 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
DOTHEX1:            05A0 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
DOTHEX2:            05A9 DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
DOTSTRING_:         05B4 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
DOTSTRING0:         05BB DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
DOTSTRING1:         05BE DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DOTCHAR:            05C9 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1009 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1045 IN MAIN.asm
COMMAND_B_:         0636 DEFINED AT LINE 1057 IN MAIN.asm
COMMAND_D_:         0643 DEFINED AT LINE 1067 IN MAIN.asm
COMMAND_F_:         064A DEFINED AT LINE 1073 IN MAIN.asm
COMMAND_H_:         0666 DEFINED AT LINE 1093 IN MAIN.asm
COMMAND_I_:         066D DEFINED AT LINE 1100 IN MAIN.asm
KEY_:               0674 DEFINED AT LINE 1106 IN MAIN.asm
COMMAND_M_:         0678 DEFINED AT LINE 1110 IN MAIN.asm
OUTPUT_:            067F DEFINED AT LINE 1116 IN MAIN.asm
COMMAND_P_:         0683 DEFINED AT LINE 1120 IN MAIN.asm
COMMAND_Q_:         0687 DEFINED AT LINE 1125 IN MAIN.asm
COMMAND_R_:         068E DEFINED AT LINE 1131 IN MAIN.asm
COMMAND_S_:         069B DEFINED AT LINE 1141 IN MAIN.asm
TRUE_:              06AB DEFINED AT LINE 1153 IN MAIN.asm
COMMAND_V_:         06AF DEFINED AT LINE 1157 IN MAIN.asm
COMMAND_W_:         06BF DEFINED AT LINE 1169 IN MAIN.asm
XOR_:               06C6 DEFINED AT LINE 1175 IN MAIN.asm
COMMAND_NOP_:       06CA DEFINED AT LINE 1180 IN MAIN.asm
COMMAND_DEFAULT_:   06CD DEFINED AT LINE 1185 IN MAIN.asm
ABSOLUTE:           06D1 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
ADDROF:             06DE DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
ADDROF1:            06F2 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
ADDROF2:            06FD DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
ARRAYSIZE:          06FF DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
BREAK:              0707 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
BREAK1:             070E DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
BYTEMODE:           0721 DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
BYTEMODE1:          0724 DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
COMMENT:            0729 DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
CONSTHEAPSTART:     0732 DEFINED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
CONSTTIBSTART:      0738 DEFINED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
DECBASE:            073E DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
DECBASE1:           0741 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
ERROR1:             0746 DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
HEXBASE:            074C DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
INPUT:              0752 DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
KEY:                075D DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
OUTPUT:             0766 DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
QUIT:               076F DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
QUIT1:              0776 DEFINED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
RECUR:              0779 DEFINED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
REMAIN:             077F DEFINED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
STRINGBEGIN:        0785 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
STRINGEND:          078D DEFINED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRINGEND1:         07B4 DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
STRINGSIZE:         07BC DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
VARHEAPPTR:         07BE DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
VARTIBPTR:          07C7 DEFINED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
VARIABLE:           07D0 DEFINED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1393 IN MAIN.asm
CONSTANT:           07D3 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
WORDMODE:           07D6 DEFINED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
XOR:                07DC DEFINED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
XOR1:               07DD DEFINED AT LINE 1408 IN MAIN.asm
RANGESRC:           07E7 DEFINED AT LINE 32
                    > USED AT LINE 1137 IN MAIN.asm
RANGESRCM_1875S1425: 07F6 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0863 DEFINED AT LINE 32
                    > USED AT LINE 1051 IN MAIN.asm
ARRAYITERM_1894S1445: 0870 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08E4 DEFINED AT LINE 32
                    > USED AT LINE 1147 IN MAIN.asm
STRINGITERM_1913S1465: 08F1 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                096C DEFINED AT LINE 32
                    > USED AT LINE 1112 IN MAIN.asm
MAPM_1933S1487:     0979 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09AE DEFINED AT LINE 32
                    > USED AT LINE 1081 IN MAIN.asm
FILTERM_1947S1502:  09BC DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A0C DEFINED AT LINE 32
                    > USED AT LINE 1075 IN MAIN.asm
FOLDM_1966S1522:    0A1B DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A5E DEFINED AT LINE 32
                    > USED AT LINE 1077 IN MAIN.asm
FOREACHM_1980S1537: 0A6C DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0AAA DEFINED AT LINE 32
                    > USED AT LINE 1079 IN MAIN.asm
FUNCSRCM_1994S1552: 0AB6 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0AE3 DEFINED AT LINE 32
                    > USED AT LINE 847 IN MAIN.asm
DOTARRAYM_2004S1563: 0AF1 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTNEXT:            0B2B DEFINED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DOTNEXT1:           0B33 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
DOTNEXT2:           0B3F DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
DOTNEXT3:           0B45 DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
UNDERSCORE:         0B51 DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0B51 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
RBRACK:             0B53 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B53 DEFINED AT LINE 1605 IN MAIN.asm
ARRAYEND1:          0B6F DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
ARRAYEND2:          0B7F DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
ARRAYEND3:          0B84 DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
RBRACE:             0BA3 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BA3 DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
BLOCKEND1:          0BD5 DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
BLOCKEND2:          0BE1 DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
BLOCKEND3:          0BF3 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
BLOCKEND4:          0C07 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
CARET:              0C10 DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C10 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C11 DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
GO2:                0C17 DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
GOBLOCK:            0C22 DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
GOBLOCK2:           0C47 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
GOBLOCK3:           0C51 DEFINED AT LINE 1758 IN MAIN.asm
GOFUNC:             0C55 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
GOFUNC1:            0C6E DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
GOFUNC2:            0C74 DEFINED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
GOFUNC3:            0C7F DEFINED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
GOFUNC4:            0C97 DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
GOFUNC5:            0C9A DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
GOFUNC6:            0C9D DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
GOFUNC7:            0CA0 DEFINED AT LINE 1821 IN MAIN.asm
GOFUNC8:            0CA4 DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
PARSEARGS:          0CAF DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CB9 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
PARSEARGS1A:        0CC1 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
PARSEARGS2:         0CC9 DEFINED AT LINE 1861 IN MAIN.asm
PARSEARGS3:         0CD1 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
PARSEARGS4:         0CD4 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
PARSEARGS5:         0CDA DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
PARSEBLOCK:         0CE5 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0CE9 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
PARSEBLOCK2:        0D15 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
PARSEBLOCK3:        0D18 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
PARSEBLOCK4:        0D20 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
PARSEBLOCK5:        0D23 DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
PARSEBLOCK6:        0D4B DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
CREATEFUNC:         0D4F DEFINED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D6E DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
CREATEFUNC1:        0D86 DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
CREATEFUNC2:        0D99 DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
CREATEFUNC2A:       0DB8 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
CREATEFUNC3:        0DC7 DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
CREATEFUNC4:        0DD2 DEFINED AT LINE 2056 IN MAIN.asm
CREATEFUNC5:        0DD3 DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
COMMANDTABLE:       0DF1 DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
COMMANDTABLE1:      0DFB DEFINED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
COMMANDTABLE2:      0E02 DEFINED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
XJUMPTABLE:         0E07 DEFINED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
XJUMPTABLEX:        0E08 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
XJUMPTABLE0:        0E09 DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
XJUMPTABLE1:        0E16 DEFINED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
XJUMPTABLE2:        0E1C DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
PRTSTR0:            0E1F DEFINED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
PRTSTR:             0E23 DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
NESTING:            0E28 DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
NESTING0:           0E32 DEFINED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
NESTING1A:          0E39 DEFINED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
NESTING1:           0E3C DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
NESTING2:           0E4B DEFINED AT LINE 2228 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
NESTING3:           0E4D DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
NESTING4:           0E58 DEFINED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
PROMPT:             0E5A DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
CRLF:               0E63 DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
PRINTSTR:           0E6A DEFINED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 164
INIT:               0E71 DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
INIT1:              0E79 DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
WARMINIT:           0E81 DEFINED AT LINE 2273 IN MAIN.asm
COLDBOOT0:          0E94 DEFINED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
COLDINIT:           0E9E DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EAF DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
COLDSTART:          0EBC DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
START:              0EC5 DEFINED AT LINE 2308 IN MAIN.asm
START1:             0ECB DEFINED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
INTERPRET:          0ED1 DEFINED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
INTERPRET2:         0EDD DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
INTERPRET3:         0EE5 DEFINED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
INTERPRET4:         0EF0 DEFINED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
INTERPRET5:         0EF5 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
INTERPRET5A:        0F13 DEFINED AT LINE 2384 IN MAIN.asm
INTERPRET6:         0F15 DEFINED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
INTERPRET7:         0F23 DEFINED AT LINE 2399 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
INTERPRET8:         0F36 DEFINED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
NEXT:               0F51 DEFINED AT LINE 2427 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
NEXT1:              0F61 DEFINED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2432 IN MAIN.asm
EXIT:               0F68 DEFINED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
RUN:                0F6C DEFINED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0F70 DEFINED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
BACKSPACE_:         0F84 DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
EDIT_:              0F94 DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
REEDIT_:            0FAC DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
PRINTSTACK_:        0FAF DEFINED AT LINE 2479 IN MAIN.asm
F1:                 0FB9 DEFINED AT LINE 32
                    > USED AT LINE 1083 IN MAIN.asm
F1M_3009S12:        0FC7 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1001 DEFINED AT LINE 32
                    > USED AT LINE 1085 IN MAIN.asm
F2M_3014S18:        100C DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 100D DEFINED AT LINE 32
                    > USED AT LINE 1087 IN MAIN.asm
F3M_3016S21:        1018 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 1019 DEFINED AT LINE 32
                    > USED AT LINE 1089 IN MAIN.asm
F4M_3018S24:        1024 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 28
                    > USED AT LINE 8
EXPECTM_3028S36:    11B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S49:    1221 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S50:    128F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S51:    12FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S52:    1367 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S53:    13D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S54:    143F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S55:    14AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S56:    151D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S57:    158B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S58:    15F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S59:    1667 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S60:    16D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S61:    1747 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S62:    17BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S63:    1833 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S64:    18A7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S65:    191F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S66:    199B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S67:    1A15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S68:    1A89 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S69:    1B05 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S70:    1B7D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S71:    1BF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S72:    1C65 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S73:    1CE1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S74:    1D55 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S75:    1DC9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S76:    1E3F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S77:    1EC5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S78:    1F39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S79:    1FB5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S80:    2029 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S81:    20AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S82:    212D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S83:    21AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S84:    2231 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S85:    22AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S86:    2321 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S87:    2397 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S88:    240D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S89:    2481 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S90:    24F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S91:    2569 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S92:    25DD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S93:    2651 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S94:    26C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S95:    2739 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S96:    27AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S97:    2823 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S98:    2899 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S99:    290F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S100:   2987 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S101:   29FF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S102:   2A71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S103:   2AE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S104:   2B5B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S105:   2BD9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S106:   2C57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S107:   2CD9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S108:   2D65 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S109:   2DF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S110:   2E65 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S111:   2EDB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S112:   2F57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S113:   2FD7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S114:   3053 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S115:   30D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S116:   3161 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S117:   31EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S118:   3281 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S119:   3305 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S120:   338F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S121:   341B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S122:   34A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S123:   3535 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S124:   35CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S125:   3657 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S126:   36ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S127:   3785 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S128:   381F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S129:   38C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S130:   3967 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S131:   39EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S132:   3A77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S133:   3AFD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S134:   3B89 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S135:   3C19 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S136:   3CB7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S137:   3D5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S138:   3E03 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S139:   3E9B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S140:   3F39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S141:   3FED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S142:   40AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S143:   413B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S144:   41CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S145:   4249 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S146:   42C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S147:   4345 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S148:   43C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S149:   4439 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S150:   44AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S151:   4525 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S152:   459B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S153:   461D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S154:   46AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S155:   4743 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S156:   47F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S157:   489F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S158:   4967 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S159:   49F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            4A04 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4C00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4C00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
BUFFER:             4D00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
VARS:               4E00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           4ED0 DEFINED AT LINE 18 IN ram.asm
RST08:              4ED0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4ED2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4ED4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4ED6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4ED8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4EDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4EDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4EDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4EE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4EE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4EE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4EE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2288 IN MAIN.asm
VDATAWIDTH:         4EE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
VNUMBASE:           4EE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
VTIBPTR:            4EEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
VBUFPTR:            4EEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
VNEXT:              4EEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2300 IN MAIN.asm
VHEAPPTR:           4EF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
VRECUR:             4EF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
VDEFINE:            4EF4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           4EF6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
VPOINTER:           4EF8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
VREMAIN:            4EFA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
VSAVEDIP:           4EFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
VSAVEDSP:           4EFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2275 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
VSAVEDNEXT:         4F00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
VSAVEDBP:           4F02 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
VTEMP1:             4F04 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
VTEMP2:             4F06 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
VTEMP3:             4F08 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
VLASTDEF:           4F0A DEFINED AT LINE 61 IN ram.asm
TBPTR:              4F0C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           4F0E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
HEAP:               4F22 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
