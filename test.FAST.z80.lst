0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3A               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3A               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3A               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3A               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3A               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3A               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3A               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 39               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3A               LD   (RST08),HL   
0094   22 D2 3A               LD   (RST10),HL   
0097   22 D4 3A               LD   (RST18),HL   
009A   22 D6 3A               LD   (RST20),HL   
009D   22 D8 3A               LD   (RST28),HL   
00A0   22 DA 3A               LD   (RST30),HL   
00A3   22 DE 3A               LD   (INTVEC),HL   
00A6   22 E0 3A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 39               LD   SP,STACK   
00C6   CD 75 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   00 0A                  DW   next   ; g nNext
0186   00 3D                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   85                     DB   lsb(nop_)   ; SP
0221   3F                     DB   lsb(not_)   ; !
0222   50                     DB   lsb(string_)   ; "
0223   47                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   85                     DB   lsb(nop_)   ; )
022A   3C                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   85                     DB   lsb(nop_)   ; ,
022D   53                     DB   lsb(sub_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(div_)   ; /	
0230   44                     DB   lsb(num_)   ; 0
0231   44                     DB   lsb(num_)   ; 1
0232   44                     DB   lsb(num_)   ; 2
0233   44                     DB   lsb(num_)   ; 3
0234   44                     DB   lsb(num_)   ; 4
0235   44                     DB   lsb(num_)   ; 5
0236   44                     DB   lsb(num_)   ; 6
0237   44                     DB   lsb(num_)   ; 7
0238   44                     DB   lsb(num_)   ; 8
0239   44                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(go_)   ; :
023B   85                     DB   lsb(nop_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   56                     DB   lsb(eq_)   ; =
023E   65                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   2D                     DB   lsb(identU_)   ; A
0242   2D                     DB   lsb(identU_)   ; B
0243   2D                     DB   lsb(identU_)   ; C
0244   2D                     DB   lsb(identU_)   ; D
0245   2D                     DB   lsb(identU_)   ; E
0246   2D                     DB   lsb(identU_)   ; F
0247   2D                     DB   lsb(identU_)   ; G
0248   2D                     DB   lsb(identU_)   ; h
0249   2D                     DB   lsb(identU_)   ; I
024A   2D                     DB   lsb(identU_)   ; J
024B   2D                     DB   lsb(identU_)   ; K
024C   2D                     DB   lsb(identU_)   ; L
024D   2D                     DB   lsb(identU_)   ; M
024E   2D                     DB   lsb(identU_)   ; N
024F   2D                     DB   lsb(identU_)   ; O
0250   2D                     DB   lsb(identU_)   ; p
0251   2D                     DB   lsb(identU_)   ; Q
0252   2D                     DB   lsb(identU_)   ; R
0253   2D                     DB   lsb(identU_)   ; S
0254   2D                     DB   lsb(identU_)   ; T
0255   2D                     DB   lsb(identU_)   ; U
0256   2D                     DB   lsb(identU_)   ; V
0257   2D                     DB   lsb(identU_)   ; W
0258   2D                     DB   lsb(identU_)   ; X
0259   2D                     DB   lsb(identU_)   ; Y
025A   2D                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   4D                     DB   lsb(xor_)   ; ^
025F   27                     DB   lsb(remain_)   ; _
0260   50                     DB   lsb(string_)   ; `     used for testing string   	
0261   30                     DB   lsb(identL_)   ; a
0262   30                     DB   lsb(identL_)   ; b
0263   30                     DB   lsb(identL_)   ; c
0264   30                     DB   lsb(identL_)   ; d
0265   30                     DB   lsb(identL_)   ; e
0266   30                     DB   lsb(identL_)   ; f
0267   30                     DB   lsb(identL_)   ; g
0268   30                     DB   lsb(identL_)   ; h
0269   30                     DB   lsb(identL_)   ; i
026A   30                     DB   lsb(identL_)   ; j
026B   30                     DB   lsb(identL_)   ; k
026C   30                     DB   lsb(identL_)   ; l
026D   30                     DB   lsb(identL_)   ; m
026E   30                     DB   lsb(identL_)   ; n
026F   30                     DB   lsb(identL_)   ; o
0270   30                     DB   lsb(identL_)   ; p
0271   30                     DB   lsb(identL_)   ; q
0272   30                     DB   lsb(identL_)   ; r
0273   30                     DB   lsb(identL_)   ; s
0274   30                     DB   lsb(identL_)   ; t
0275   30                     DB   lsb(identL_)   ; u
0276   30                     DB   lsb(identL_)   ; v
0277   30                     DB   lsb(identL_)   ; w
0278   30                     DB   lsb(identL_)   ; x
0279   30                     DB   lsb(identL_)   ; y
027A   30                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4A                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   36                     DB   lsb(inv_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 87 03               JP   add   
0303                ADDR_:       
0303   C3 A0 03               JP   addr   
0306                AND_:        
0306   C3 AC 03               JP   and   
0309                ARG_:        
0309   C3 C9 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 00 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 32 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 4E 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 9C 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 C5 04               JP   block   
031B                BLOCKEND_:      
031B   C3 2E 05               JP   blockend   
031E                CHAR_:       
031E   C3 83 05               JP   char   
0321                COMMAND_:      
0321   C3 B7 07               JP   command   
0324                DOT_:        
0324   C3 AB 05               JP   dot   
0327                REMAIN_:      
0327   C3 46 07               JP   remain   
032A                GO_:         
032A   C3 0F 06               JP   go   
032D                IDENTU_:      
032D   C3 C8 06               JP   identU   
0330                IDENTL_:      
0330   C3 CD 06               JP   identL   
0333                IF_:         
0333   C3 DF 06               JP   if   
0336                INV_:        ; Bitwise INVert the top member of the stack
0336   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0339   C3 C1 03               JP   xor1   
033C                MUL_:        
033C   C3 F8 06               JP   mul   
033F                NOT_:        ; logical invert, any non zero value
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1D                  JR   eq1   
0344                NUM_:        
0344   C3 16 07               JP   num   
0347                HEXNUM_:      
0347   C3 AB 06               JP   hexnum   
034A                OR_:         
034A   C3 B7 03               JP   or   
034D                XOR_:        
034D   C3 C0 03               JP   xor   
0350                STRING_:      
0350   C3 6F 07               JP   string   
0353                SUB_:        
0353   C3 97 07               JP   sub   
0356                EQ_:         
0356   03                     INC   bc   
0357   0A                     LD   a,(bc)   ; is it == ?
0358   FE 3D                  CP   "="   
035A   28 04                  JR   z,eq0   ; no its equality
035C   0B                     DEC   bc   
035D   C3 B4 04               JP   assign   ; no its assignment
0360                EQ0:         
0360   E1                     POP   hl   
0361                EQ1:         
0361   D1                     POP   de   
0362   C3 EE 05               JP   equals   
0365                GT_:         
0365   03                     INC   bc   
0366   0A                     LD   a,(bc)   
0367   FE 3E                  CP   ">"   
0369   CA 5C 07               JP   z,shiftRight   
036C   D1                     POP   de   
036D   E1                     POP   hl   
036E   18 09                  JR   lt1   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA 4C 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA F6 05               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 FB 05               JP   lessthan   
0382                DIV_:        
0382   C3 98 05               JP   div   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                             ;*******************************************************************
0387                             ; word operators
0387                             ;*******************************************************************
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 07                  JR   nz,add1   
038D   11 01 00               LD   de,1   
0390   3E 3D                  LD   a,"="   
0392   18 01                  JR   add2   
0394                ADD1:        
0394   D1                     POP   de   ; second term
0395                ADD2:        
0395   E1                     POP   hl   ; first term
0396   19                     ADD   hl,de   
0397                ADD3:        
0397   FE 3D                  CP   "="   ; += add to variable
0399   CA B6 04               JP   z,assign0   
039C   E5                     PUSH   hl   
039D   0B                     DEC   bc   
039E   DD E9                  JP   (ix)   
03A0                             ; -- ptr
03A0                ADDR:        
03A0   2A F0 3A               LD   hl,(vPointer)   
03A3   E5                     PUSH   hl   
03A4   21 F0 3A               LD   hl,vPointer   
03A7   22 F0 3A               LD   (vPointer),hl   
03AA   DD E9                  JP   (ix)   
03AC                AND:         
03AC   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03AD   E1                     POP   hl   
03AE   7B                     LD   a,e   
03AF   A5                     AND   l   
03B0   6F                     LD   l,a   
03B1   7A                     LD   a,d   
03B2   A4                     AND   h   
03B3                AND1:        
03B3   67                     LD   h,a   
03B4   E5                     PUSH   hl   
03B5   DD E9                  JP   (ix)   
03B7                OR:          
03B7   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   B5                     OR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   B4                     OR   h   
03BE   18 F3                  JR   and1   
03C0                XOR:         
03C0   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C1                XOR1:        
03C1   E1                     POP   hl   
03C2   7B                     LD   a,e   
03C3   AD                     XOR   l   
03C4   6F                     LD   l,a   
03C5   7A                     LD   a,d   
03C6   AC                     XOR   h   
03C7   18 EA                  JR   and1   
03C9                             ; $a .. $z
03C9                             ; -- value
03C9                             ; returns value of arg
03C9                ARG:         
03C9   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CC   FD 56 05               LD   d,(iy+5)   
03CF   EB                     EX   de,hl   
03D0   7D                     LD   a,l   ; arg_list* == null, skip
03D1   B4                     OR   h   
03D2   28 1C                  JR   z,arg0a   
03D4   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D5   2B                     DEC   hl   
03D6   7E                     LD   a,(hl)   
03D7   23                     INC   hl   
03D8   23                     INC   hl   
03D9   B7                     OR   a   
03DA   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DC   5F                     LD   e,a   ; e = a = num_args
03DD   03                     INC   bc   ; a = next char = arg_name
03DE   0A                     LD   a,(bc)   
03DF   C5                     PUSH   bc   ; save IP
03E0   43                     LD   b,e   ; b = e = num_args
03E1   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E4   FD 56 03               LD   d,(iy+3)   
03E7                ARG0:        
03E7   1B                     DEC   de   ; a = arg_name, de = next arg*
03E8   1B                     DEC   de   
03E9   BE                     CP   (hl)   
03EA   28 09                  JR   z,arg1   
03EC   23                     INC   hl   ; hl = next arg_list*
03ED   10 F8                  DJNZ   arg0   
03EF   C1                     POP   bc   ; no match, restore IP
03F0                ARG0A:       
03F0   11 00 00               LD   de,0   ; return 0
03F3   18 08                  JR   arg1a   
03F5                ARG1:        
03F5   C1                     POP   bc   ; restore IP
03F6   EB                     EX   de,hl   ; hl = arg*
03F7   22 F0 3A               LD   (vPointer),hl   ; store arg* in setter
03FA   5E                     LD   e,(hl)   
03FB   23                     INC   hl   
03FC   56                     LD   d,(hl)   ; de = arg
03FD                ARG1A:       
03FD   D5                     PUSH   de   ; push arg
03FE   DD E9                  JP   (ix)   
0400                             ; arg_list - parses input (ab:c)
0400                             ; names after the : represent uninitialised locals
0400                             ; return values are the state of the stack after the block ends
0400                ARG_LIST:      
0400   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0403   2A EC 3A               LD   hl,(vHeapPtr)   ; hl = heap*
0406   23                     INC   hl   ; skip length field to start
0407   23                     INC   hl   
0408   E5                     PUSH   hl   ; save start of arg_list
0409   03                     INC   bc   ; point to next char
040A                ARG_LIST1:      
040A   0A                     LD   a,(bc)   
040B   FE 29                  CP   ")"   ; ) is the arg_list terminator
040D   28 12                  JR   z,arg_list4   
040F   FE 3A                  CP   ":"   
0411   20 03                  JR   nz,arg_list2   
0413   14                     INC   d   ; non zero value local count acts as flag
0414   20 08                  JR   nz,arg_list3   
0416                ARG_LIST2:      
0416   77                     LD   (hl),a   
0417   23                     INC   hl   
0418   1C                     INC   e   ; increase arg count
0419   AF                     XOR   a   
041A   B2                     OR   d   
041B   28 01                  JR   z,arg_list3   
041D   14                     INC   d   ; if d > 0 increase local count
041E                ARG_LIST3:      
041E   03                     INC   bc   ; point to next char
041F   18 E9                  JR   arg_list1   
0421                ARG_LIST4:      
0421   AF                     XOR   a   
0422   B2                     OR   d   
0423   28 01                  JR   z,arg_list5   
0425   15                     DEC   d   ; remove initial inc
0426                ARG_LIST5:      
0426   23                     INC   hl   
0427   22 EC 3A               LD   (vHeapPtr),hl   ; bump heap* to after end of string
042A   E1                     POP   hl   ; hl = start of arg_list
042B   E5                     PUSH   hl   ; return start of string
042C   2B                     DEC   hl   ; write length bytes to length field at start - 2
042D   72                     LD   (hl),d   
042E   2B                     DEC   hl   
042F   73                     LD   (hl),e   
0430   DD E9                  JP   (ix)   
0432                ARRBEGIN:      
0432   11 00 00               LD   de,0   ; create stack frame
0435   D5                     PUSH   de   ; push null for IP
0436   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0439   FD 56 05               LD   d,(iy+5)   ; 
043C   D5                     PUSH   de   ; 
043D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0440   FD 56 03               LD   d,(iy+3)   ; 
0443   D5                     PUSH   de   ; 
0444   FD E5                  PUSH   iy   ; push BP
0446   FD 21 00 00            LD   iy,0   ; BP = SP
044A   FD 39                  ADD   iy,sp   
044C   DD E9                  JP   (ix)   
044E                ARREND:      
044E   FD 54                  LD   d,iyh   ; de = BP
0450   FD 5D                  LD   e,iyl   
0452   ED 43 F8 3A            LD   (vTemp1),bc   ; save IP
0456   62 6B                  LD   hl,de   ; hl = de = BP
0458   B7                     OR   a   
0459   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
045B   CB 3C                  SRL   h   ; 
045D   CB 1D                  RR   l   
045F   44 4D                  LD   bc,hl   ; bc = count
0461   2A EC 3A               LD   hl,(vHeapPtr)   ; hl = array[-2]
0464   71                     LD   (hl),c   ; write num items in length word
0465   23                     INC   hl   
0466   70                     LD   (hl),b   
0467   23                     INC   hl   ; hl = array[0], bc = count
0468                             ; de = BP, hl = array[0], bc = count
0468                ARREND1:      
0468   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
046B   77                     LD   (hl),a   ; write lsb of array item
046C   23                     INC   hl   ; move to msb of array item
046D   3A E6 3A               LD   a,(vDataWidth)   ; vDataWidth=1?
0470   3D                     DEC   a   
0471   28 05                  JR   z,arrEnd2   
0473   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0476   77                     LD   (hl),a   ; write msb of array item
0477   23                     INC   hl   ; move to next word in array
0478                ARREND2:      
0478   FD 2B                  DEC   iy   ; move to next word on stack
047A   FD 2B                  DEC   iy   
047C   0B                     DEC   bc   ; dec items count
047D   79                     LD   a,c   ; if not zero loop
047E   B0                     OR   b   
047F   20 E7                  JR   nz,arrEnd1   
0481   EB                     EX   de,hl   ; de = end of array, hl = BP
0482   F9                     LD   sp,hl   ; sp = BP
0483   E1                     POP   hl   ; de = end of array, hl = old BP
0484   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0485   FD 62                  LD   iyh,d   
0487   FD 6B                  LD   iyl,e   
0489   D1                     POP   de   ; pop arg_list (discard)
048A   D1                     POP   de   ; pop first_arg* (discard)
048B   D1                     POP   de   ; pop IP (discard)
048C   ED 5B EC 3A            LD   de,(vHeapPtr)   ; de = array[-2]
0490   22 EC 3A               LD   (vHeapPtr),hl   ; move heap* to end of array
0493   ED 4B F8 3A            LD   bc,(vTemp1)   ; restore IP
0497   13                     INC   de   ; de = array[0]
0498   13                     INC   de   
0499   D5                     PUSH   de   ; return array[0]
049A   DD E9                  JP   (ix)   
049C                             ; index of an array, based on vDataWidth
049C                             ; array num -- value    ; also sets vPointer to address
049C                ARRINDEX:      
049C   E1                     POP   hl   ; hl = index
049D   D1                     POP   de   ; de = array
049E   3A E6 3A               LD   a,(vDataWidth)   ; a = data width
04A1   3D                     DEC   a   
04A2   28 01                  JR   z,arrIndex1   
04A4                ARRINDEX0:      
04A4   29                     ADD   hl,hl   ; if data width = 2 then double
04A5                ARRINDEX1:      
04A5   19                     ADD   hl,de   ; add addr
04A6   22 F0 3A               LD   (vPointer),hl   ; store address in setter
04A9   16 00                  LD   d,0   
04AB   5E                     LD   e,(hl)   
04AC   B7                     OR   a   ; check data width again
04AD   28 02                  JR   z,arrIndex2   
04AF   23                     INC   hl   
04B0   56                     LD   d,(hl)   
04B1                ARRINDEX2:      
04B1   D5                     PUSH   de   
04B2   DD E9                  JP   (ix)   
04B4                             ; value _oldValue --            ; uses address in vPointer
04B4                ASSIGN:      
04B4   E1                     POP   hl   ; discard last accessed value
04B5   E1                     POP   hl   ; hl = new value
04B6                ASSIGN0:      
04B6   EB                     EX   de,hl   ; de = new value
04B7                ASSIGNX:      
04B7   2A F0 3A               LD   hl,(vPointer)   
04BA   73                     LD   (hl),e   
04BB   3A E6 3A               LD   a,(vDataWidth)   
04BE   3D                     DEC   a   ; is it byte?
04BF   28 02                  JR   z,assign1   
04C1   23                     INC   hl   
04C2   72                     LD   (hl),d   
04C3                ASSIGN1:      
04C3   DD E9                  JP   (ix)   
04C5                BLOCK:       
04C5   C5                     PUSH   bc   ; return pointer to first { of block
04C6   03                     INC   bc   
04C7   16 01                  LD   d,1   ; nesting: count first parenthesis
04C9                BLOCK1:      ; Skip to end of definition
04C9   0A                     LD   a,(bc)   ; Get the next character
04CA   03                     INC   bc   ; Point to next character
04CB   FE 21                  CP   " " + 1   ; ignore whitespace
04CD   38 FA                  JR   c,block1   
04CF   FE 29                  CP   ")"   
04D1   28 2D                  JR   z,block4   
04D3   FE 7D                  CP   "}"   
04D5   28 29                  JR   z,block4   
04D7   FE 5D                  CP   "]"   
04D9   28 25                  JR   z,block4   
04DB   FE 28                  CP   "("   
04DD   28 16                  JR   z,block2   
04DF   FE 7B                  CP   "{"   
04E1   28 12                  JR   z,block2   
04E3   FE 5B                  CP   "["   
04E5   28 0E                  JR   z,block2   
04E7   FE 27                  CP   "'"   
04E9   28 0D                  JR   z,block3   
04EB   FE 60                  CP   "`"   
04ED   28 09                  JR   z,block3   
04EF   FE 22                  CP   $22   
04F1   28 05                  JR   z,block3   
04F3   18 D4                  JR   block1   
04F5                BLOCK2:      
04F5   14                     INC   d   
04F6   18 D1                  JR   block1   
04F8                BLOCK3:      
04F8   3E 80                  LD   a,$80   
04FA   AA                     XOR   d   
04FB   47                     LD   b,a   
04FC   20 CB                  JR   nz,block1   
04FE   18 03                  JR   block5   
0500                BLOCK4:      
0500   15                     DEC   d   
0501   20 C6                  JR   nz,block1   ; get the next element
0503                BLOCK5:      
0503   60 69                  LD   hl,bc   ; hl = IP
0505   11 00 3D               LD   de,HEAP   ; is IP pointing to object in heap
0508   B7                     OR   a   ; IP - HEAP
0509   ED 52                  SBC   hl,de   
050B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050D   28 1C                  JR   z,block6   
050F   60 69                  LD   hl,bc   ; hl = IP
0511   D1                     POP   de   ; de = block*
0512   ED 43 F8 3A            LD   (vTemp1),bc   ; save IP
0516   B7                     OR   a   ; bc = size
0517   ED 52                  SBC   hl,de   
0519   44 4D                  LD   bc,hl   
051B   EB                     EX   de,hl   ; hl = block* de = heap*
051C   ED 5B EC 3A            LD   de,(vHeapPtr)   
0520   D5                     PUSH   de   ; return hblock*
0521   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0523   ED 53 EC 3A            LD   (vHeapPtr),de   ; heap* += size
0527   ED 4B F8 3A            LD   bc,(vTemp1)   ; restore IP
052B                BLOCK6:      
052B   0B                     DEC   bc   ; balanced, exit
052C   DD E9                  JP   (ix)   
052E                BLOCKEND:      
052E   D9                     EXX      ; de" = oldBP bc" = oldIP
052F   FD 5E 00               LD   e,(iy+0)   
0532   FD 56 01               LD   d,(iy+1)   
0535   FD 4E 06               LD   c,(iy+6)   
0538   FD 46 07               LD   b,(iy+7)   
053B   D9                     EXX      
053C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
053F   FD 56 03               LD   d,(iy+3)   
0542   EB                     EX   de,hl   
0543   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0546   FD 56 01               LD   d,(iy+1)   
0549   13                     INC   de   ; for carry flag <=
054A   B7                     OR   a   
054B   ED 52                  SBC   hl,de   
054D   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
054F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0551   FD 5D                  LD   e,iyl   
0553   21 08 00               LD   hl,8   
0556   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0557   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0558   18 0C                  JR   blockend2   
055A                BLOCKEND1:      ; same scope
055A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
055D   FD 56 03               LD   d,(iy+3)   
0560   EB                     EX   de,hl   
0561   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0563   FD 5D                  LD   e,iyl   
0565   EB                     EX   de,hl   
0566                BLOCKEND2:      
0566   44 4D                  LD   bc,hl   ; bc = hl = BP
0568   B7                     OR   a   ; hl = BP - SP = count
0569   ED 72                  SBC   hl,sp   
056B   7D                     LD   a,l   
056C   B4                     OR   h   
056D   28 09                  JR   z,blockend3   
056F   C5                     PUSH   bc   ; bc = count, hl = BP
0570   44 4D                  LD   bc,hl   
0572   E1                     POP   hl   
0573   2B                     DEC   hl   ; hl = BP-1
0574   1B                     DEC   de   ; de = args*-1
0575   ED B8                  LDDR      
0577   13                     INC   de   
0578                BLOCKEND3:      
0578   EB                     EX   de,hl   ; hl = new tos
0579   F9                     LD   sp,hl   ; sp = new tos
057A   D9                     EXX      ; bc = IP, iy = oldBP
057B   D5                     PUSH   de   
057C   C5                     PUSH   bc   
057D   D9                     EXX      
057E   C1                     POP   bc   
057F   FD E1                  POP   iy   
0581   DD E9                  JP   (ix)   
0583                CHAR:        
0583   21 00 00               LD   hl,0   ; if "" is empty or null
0586                CHAR1:       
0586   03                     INC   bc   ; point to next char
0587   0A                     LD   a,(bc)   
0588   FE 27                  CP   "'"   ; ' is the terminator
058A   28 09                  JR   z,char3   
058C   FE 5C                  CP   $5c   ; \ is the escape
058E   20 02                  JR   nz,char2   
0590   03                     INC   bc   
0591   0A                     LD   a,(bc)   
0592                CHAR2:       
0592   6F                     LD   l,a   
0593   18 F1                  JR   char1   
0595                CHAR3:       
0595   E5                     PUSH   hl   
0596   DD E9                  JP   (ix)   
0598                DIV:         
0598   D1                     POP   de   
0599   E1                     POP   hl   
059A   C5                     PUSH   bc   ; preserve the IP
059B   44 4D                  LD   bc,hl   
059D   CD D5 05               CALL   divide   
05A0   EB                     EX   de,hl   
05A1   ED 53 F6 3A            LD   (vRemain),de   
05A5   C1                     POP   bc   
05A6   03                     INC   bc   
05A7   0A                     LD   a,(bc)   
05A8   C3 97 03               JP   add3   
05AB                DOT:         
05AB   E1                     POP   hl   
05AC   03                     INC   bc   
05AD   0A                     LD   a,(bc)   
05AE   FE 68                  CP   "h"   
05B0   20 05                  JR   nz,dot1   
05B2   CD 04 09               CALL   prthex   
05B5   18 17                  JR   dot4   
05B7                DOT1:        
05B7   FE 73                  CP   "s"   
05B9   20 05                  JR   nz,dot2   
05BB   CD 27 09               CALL   prtstr   
05BE   18 0E                  JR   dot4   
05C0                DOT2:        
05C0   FE 63                  CP   "c"   
05C2   20 06                  JR   nz,dot3   
05C4   7D                     LD   a,l   
05C5   CD 85 00               CALL   putchar   
05C8   18 04                  JR   dot4   
05CA                DOT3:        
05CA   0B                     DEC   bc   
05CB   CD BC 08               CALL   prtdec   
05CE                DOT4:        
05CE   3E 20                  LD   a," "   
05D0   CD 85 00               CALL   putchar   
05D3   DD E9                  JP   (ix)   
05D5                             ; division subroutine.
05D5                             ; bc: divisor, de: dividend, hl: remainder
05D5                DIVIDE:      
05D5   21 00 00               LD   hl,0   ; zero the remainder
05D8   3E 10                  LD   a,16   ; loop counter
05DA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05DA   CB 21                  SLA   c   
05DC   CB 10                  RL   b   
05DE   ED 6A                  ADC   hl,hl   
05E0   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E2   38 03                  JR   c,divide2   
05E4   0C                     INC   c   
05E5   18 01                  JR   divide3   
05E7                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E7   19                     ADD   hl,de   
05E8                DIVIDE3:      
05E8   3D                     DEC   a   
05E9   20 EF                  JR   nz,divide1   
05EB   50 59                  LD   de,bc   ; result from bc to de
05ED   C9                     RET      
05EE                             ; hl = value1, de = value2
05EE                             ; hl = result
05EE                EQUALS:      
05EE   B7                     OR   a   ; reset the carry flag
05EF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05F1   28 10                  JR   z,true1   
05F3   C3 09 06               JP   false1   
05F6                             ; hl = value1 de = value2
05F6                             ; hl = result
05F6                LESSTHANEQ:      
05F6   B7                     OR   a   
05F7   ED 52                  SBC   hl,de   
05F9   18 05                  JR   lessthan1   
05FB                             ; hl = value1 de = value2
05FB                             ; hl = result
05FB                LESSTHAN:      
05FB   B7                     OR   a   
05FC   ED 52                  SBC   hl,de   
05FE   28 09                  JR   z,false1   
0600                LESSTHAN1:      
0600   FA 09 06               JP   m,false1   
0603                TRUE1:       
0603   21 FF FF               LD   hl,TRUE   
0606   E5                     PUSH   hl   
0607   DD E9                  JP   (ix)   
0609                NULL1:       
0609                FALSE1:      
0609   21 00 00               LD   hl,FALSE   
060C   E5                     PUSH   hl   
060D   DD E9                  JP   (ix)   
060F                             ; execute a block of code which ends with }
060F                             ; creates a root scope if BP == stack
060F                             ; else uses outer scope
060F                GO:          
060F   D1                     POP   de   ; de = block*
0610                GO1:         
0610   7B                     LD   a,e   ; if block* == null, exit
0611   B2                     OR   d   
0612   20 02                  JR   nz,go2   
0614   DD E9                  JP   (ix)   
0616                GO2:         
0616   1A                     LD   a,(de)   
0617   FE 7B                  CP   "{"   
0619   C2 3D 06               JP   nz,go3   
061C   13                     INC   de   ; execute block of monty code
061D   C5                     PUSH   bc   ; push IP
061E   21 80 39               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0621   FD 44                  LD   b,iyh   
0623   FD 4D                  LD   c,iyl   
0625   B7                     OR   a   ; hl = stack - BP = root_scope
0626   ED 42                  SBC   hl,bc   
0628   7D                     LD   a,l   ; if root_scope, skip
0629   B4                     OR   h   
062A   28 6C                  JR   z,go10   
062C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
062F   FD 46 05               LD   b,(iy+5)   
0632   C5                     PUSH   bc   
0633   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0636   FD 46 03               LD   b,(iy+3)   
0639   60 69                  LD   hl,bc   
063B   18 60                  JR   go11   
063D                GO3:         ; execute function
063D   EB                     EX   de,hl   ; hl = func*
063E   5E                     LD   e,(hl)   ; de = capture*
063F   23                     INC   hl   
0640   56                     LD   d,(hl)   
0641   23                     INC   hl   
0642   7B                     LD   a,e   ; if capture* == null skip
0643   B2                     OR   d   
0644   28 21                  JR   z,go6   
0646   ED 43 F8 3A            LD   (vTemp1),bc   
064A   22 FA 3A               LD   (vTemp2),hl   ; save bc,hl
064D   EB                     EX   de,hl   ; hl = array*
064E   2B                     DEC   hl   ; bc = count
064F   46                     LD   b,(hl)   
0650   2B                     DEC   hl   
0651   4E                     LD   c,(hl)   
0652   23                     INC   hl   ; push each item on stack
0653   23                     INC   hl   
0654   18 06                  JR   go5   
0656                GO4:         
0656   5E                     LD   e,(hl)   ; de = capture item
0657   23                     INC   hl   
0658   56                     LD   d,(hl)   
0659   23                     INC   hl   
065A   D5                     PUSH   de   ; push on stack
065B   0B                     DEC   bc   
065C                GO5:         
065C   79                     LD   a,c   ; if count != 0 then loop
065D   B0                     OR   b   
065E   20 F6                  JR   nz,go4   
0660   ED 4B F8 3A            LD   bc,(vTemp1)   ; restore bc
0664   2A FA 3A               LD   hl,(vTemp2)   ; restore hl
0667                GO6:         
0667   5E                     LD   e,(hl)   ; de = block*
0668   23                     INC   hl   
0669   56                     LD   d,(hl)   
066A   23                     INC   hl   
066B   ED 53 F8 3A            LD   (vTemp1),de   ; save block*
066F   5E                     LD   e,(hl)   ; de = arg_list*
0670   23                     INC   hl   
0671   56                     LD   d,(hl)   
0672   23                     INC   hl   
0673   EB                     EX   de,hl   ; hl = arg_list*
0674   ED 5B F8 3A            LD   de,(vTemp1)   ; restore de = block*
0678   7D                     LD   a,l   ; if arg_list* != null skip
0679   B4                     OR   h   
067A   20 03                  JR   nz,go7   
067C   C5                     PUSH   bc   ; push IP
067D   18 19                  JR   go10   
067F                GO7:         
067F   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0680   7E                     LD   a,(hl)   
0681   23                     INC   hl   
0682   B7                     OR   a   
0683   28 05                  JR   z,go9   
0685                GO8:         
0685   3B                     DEC   sp   
0686   3B                     DEC   sp   
0687   3D                     DEC   a   
0688   20 FB                  JR   nz,go8   
068A                GO9:         
068A   C5                     PUSH   bc   ; push IP
068B   E5                     PUSH   hl   ; push arg_list*
068C   2B                     DEC   hl   ; hl = num_args*
068D   2B                     DEC   hl   
068E   7E                     LD   a,(hl)   ; hl = num_args * 2
068F   87                     ADD   a,a   
0690   C6 04                  ADD   a,4   ; offset for IP and arg_list
0692   6F                     LD   l,a   
0693   26 00                  LD   h,$0   
0695   39                     ADD   hl,sp   ; hl = first_arg*
0696   18 06                  JR   go12   
0698                GO10:        
0698   E5                     PUSH   hl   ; push arg_list (null)
0699   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
069C   39                     ADD   hl,sp   
069D                GO11:        
069D   1B                     DEC   de   
069E                GO12:        
069E   E5                     PUSH   hl   ; push first_arg
069F   FD E5                  PUSH   iy   ; push BP
06A1   FD 21 00 00            LD   iy,0   ; BP = SP
06A5   FD 39                  ADD   iy,sp   
06A7   42 4B                  LD   bc,de   ; bc = de = block*-1
06A9   DD E9                  JP   (ix)   
06AB                HEXNUM:      
06AB   21 00 00               LD   hl,0   ; Clear hl to accept the number
06AE                HEXNUM1:      
06AE   03                     INC   bc   
06AF   0A                     LD   a,(bc)   ; Get the character which is a numeral
06B0   CB 77                  BIT   6,a   ; is it uppercase alpha?
06B2   28 02                  JR   z,hexnum2   ; no a decimal
06B4   D6 07                  SUB   7   ; sub 7  to make $a - $F
06B6                HEXNUM2:      
06B6   D6 30                  SUB   $30   ; form decimal digit
06B8   DA 38 07               JP   c,num2   
06BB   FE 10                  CP   $0F+1   
06BD   D2 38 07               JP   nc,num2   
06C0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06C1   29                     ADD   hl,hl   ; 4X
06C2   29                     ADD   hl,hl   ; 8X
06C3   29                     ADD   hl,hl   ; 16X
06C4   85                     ADD   a,l   ; add into bottom of hl
06C5   6F                     LD   l,a   
06C6   18 E6                  JR   hexnum1   
06C8                IDENTU:      
06C8   0A                     LD   a,(bc)   ; a = identifier char
06C9   D6 41                  SUB   "A"   ; "A" = 0
06CB   18 05                  JR   ident1   
06CD                IDENTL:      
06CD   0A                     LD   a,(bc)   
06CE   D6 61                  SUB   "a"   
06D0   C6 1A                  ADD   a,26   
06D2                IDENT1:      
06D2   87                     ADD   a,a   ; l = a * 2
06D3   6F                     LD   l,a   
06D4   26 3A                  LD   h,msb(vars)   
06D6   22 F0 3A               LD   (vPointer),hl   ; store address in setter
06D9   5E                     LD   e,(hl)   
06DA   23                     INC   hl   
06DB   56                     LD   d,(hl)   
06DC   D5                     PUSH   de   
06DD   DD E9                  JP   (ix)   
06DF                             ; if
06DF                             ; condition then -- value
06DF                IF:          
06DF   03                     INC   bc   
06E0   0A                     LD   a,(bc)   
06E1   FE 3F                  CP   "?"   
06E3   28 06                  JR   z,ifte   
06E5   0B                     DEC   bc   
06E6   11 00 00               LD   de,0   ; NUL pointer for else
06E9   18 01                  JR   ifte1   
06EB                             ; ifte
06EB                             ; condition then else -- value
06EB                IFTE:        
06EB   D1                     POP   de   ; de = else
06EC                IFTE1:       
06EC   E1                     POP   hl   ; hl = then
06ED   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06EE   7C                     LD   a,h   
06EF   B5                     OR   l   
06F0   E1                     POP   hl   ; hl = then
06F1   CA 10 06               JP   z,go1   ; if z de = else
06F4   EB                     EX   de,hl   ; condition = false, de = then
06F5   C3 10 06               JP   go1   
06F8                MUL:         
06F8   D1                     POP   de   ; get first value
06F9   E1                     POP   hl   
06FA                MUL2:        
06FA   C5                     PUSH   bc   ; Preserve the IP
06FB   44 4D                  LD   bc,hl   ; bc = 2nd value
06FD   21 00 00               LD   hl,0   
0700   3E 10                  LD   a,16   
0702                MUL3:        
0702   29                     ADD   hl,hl   
0703   CB 13                  RL   e   
0705   CB 12                  RL   d   
0707   30 04                  JR   nc,$+6   
0709   09                     ADD   hl,bc   
070A   30 01                  JR   nc,$+3   
070C   13                     INC   de   
070D   3D                     DEC   a   
070E   20 F2                  JR   nz,mul3   
0710   C1                     POP   bc   ; Restore the IP
0711   03                     INC   bc   
0712   0A                     LD   a,(bc)   
0713   C3 97 03               JP   add3   
0716                NUM:         
0716   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0719   0A                     LD   a,(bc)   ; Get numeral or -
071A   FE 2D                  CP   "-"   
071C   20 01                  JR   nz,num0   
071E   03                     INC   bc   ; move to next char, no flags affected
071F                NUM0:        
071F   08                     EX   af,af'   ; save zero flag = 0 for later
0720                NUM1:        
0720   0A                     LD   a,(bc)   ; read digit
0721   D6 30                  SUB   "0"   ; less than 0?
0723   38 13                  JR   c,num2   ; not a digit, exit loop
0725   FE 0A                  CP   10   ; greater that 9?
0727   30 0F                  JR   nc,num2   ; not a digit, exit loop
0729   03                     INC   bc   ; inc IP
072A   54 5D                  LD   de,hl   ; multiply hl * 10
072C   29                     ADD   hl,hl   
072D   29                     ADD   hl,hl   
072E   19                     ADD   hl,de   
072F   29                     ADD   hl,hl   
0730   85                     ADD   a,l   ; add digit in a to hl
0731   6F                     LD   l,a   
0732   3E 00                  LD   a,0   
0734   8C                     ADC   a,h   
0735   67                     LD   h,a   
0736   18 E8                  JR   num1   
0738                NUM2:        
0738   0B                     DEC   bc   
0739   08                     EX   af,af'   ; restore zero flag
073A   20 07                  JR   nz,num3   
073C   EB                     EX   de,hl   ; negate the value of hl
073D   21 00 00               LD   hl,0   
0740   B7                     OR   a   ; jump to sub2
0741   ED 52                  SBC   hl,de   
0743                NUM3:        
0743   E5                     PUSH   hl   ; Put the number on the stack
0744   DD E9                  JP   (ix)   ; and process the next character
0746                REMAIN:      
0746   2A F6 3A               LD   hl,(vRemain)   
0749   E5                     PUSH   hl   
074A   DD E9                  JP   (ix)   
074C                             ; shiftLeft
074C                             ; value count -- value2          shift left count places
074C                SHIFTLEFT:      
074C   50 59                  LD   de,bc   ; save IP
074E   C1                     POP   bc   ; bc = count
074F   41                     LD   b,c   ; b = loop counter
0750   E1                     POP   hl   
0751   04                     INC   b   ; test for counter=0 case
0752   18 01                  JR   shiftLeft2   
0754                SHIFTLEFT1:      
0754   29                     ADD   hl,hl   ; left shift hl
0755                SHIFTLEFT2:      
0755   10 FD                  DJNZ   shiftLeft1   
0757   E5                     PUSH   hl   
0758   42 4B                  LD   bc,de   ; restore IP
075A   DD E9                  JP   (ix)   
075C                             ; shiftRight
075C                             ; value count -- value2          shift left count places
075C                SHIFTRIGHT:      
075C   50 59                  LD   de,bc   ; save IP
075E   C1                     POP   bc   ; bc = count
075F   41                     LD   b,c   ; b = loop counter
0760   E1                     POP   hl   
0761   04                     INC   b   ; test for counter=0 case
0762   18 04                  JR   shiftRight2   
0764                SHIFTRIGHT1:      
0764   CB 3C                  SRL   h   ; right shift hl
0766   CB 1D                  RR   l   
0768                SHIFTRIGHT2:      
0768   10 FA                  DJNZ   shiftRight1   
076A   E5                     PUSH   hl   
076B   42 4B                  LD   bc,de   ; restore IP
076D   DD E9                  JP   (ix)   
076F                             ; string
076F                             ; -- ptr                        ; points to start of string chars,
076F                             ; length is stored at start - 2 bytes
076F                STRING:      
076F   2A EC 3A               LD   hl,(vHeapPtr)   ; hl = heap*
0772   23                     INC   hl   ; skip length field to start
0773   23                     INC   hl   
0774   E5                     PUSH   hl   ; save start of string
0775   03                     INC   bc   ; point to next char
0776   18 03                  JR   string2   
0778                STRING1:      
0778   77                     LD   (hl),a   
0779   23                     INC   hl   ; increase count
077A   03                     INC   bc   ; point to next char
077B                STRING2:      
077B   0A                     LD   a,(bc)   
077C   FE 22                  CP   DQUOTE   ; " is the string terminator
077E   20 F8                  JR   nz,string1   
0780   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0782   20 F4                  JR   nz,string1   
0784   AF                     XOR   a   ; write NUL to terminate string
0785   77                     LD   (hl),a   ; hl = end of string
0786   23                     INC   hl   
0787   22 EC 3A               LD   (vHeapPtr),hl   ; bump heap* to after end of string
078A   2B                     DEC   hl   ; hl = end of string without terminator
078B   D1                     POP   de   ; de = start of string
078C   D5                     PUSH   de   ; return start of string
078D   B7                     OR   a   ; hl = length bytes, de = start of string
078E   ED 52                  SBC   hl,de   
0790   EB                     EX   de,hl   
0791   2B                     DEC   hl   ; write length bytes to length field at start - 2
0792   72                     LD   (hl),d   
0793   2B                     DEC   hl   
0794   73                     LD   (hl),e   
0795   DD E9                  JP   (ix)   
0797                SUB:         ; negative sign or subtract
0797   03                     INC   bc   ; check if sign of a number
0798   0A                     LD   a,(bc)   
0799   0B                     DEC   bc   
079A   FE 30                  CP   "0"   
079C   38 05                  JR   c,sub0   
079E   FE 3A                  CP   "9"+1   
07A0   DA 44 03               JP   c,num_   
07A3                SUB0:        ; Subtract the value 2nd on stack from top of stack
07A3   03                     INC   bc   
07A4   FE 2D                  CP   "-"   
07A6   20 07                  JR   nz,sub1   
07A8   11 01 00               LD   de,1   
07AB   3E 3D                  LD   a,"="   
07AD   18 01                  JR   sub3   
07AF                SUB1:        
07AF   D1                     POP   de   
07B0                SUB3:        
07B0   E1                     POP   hl   
07B1   B7                     OR   a   
07B2   ED 52                  SBC   hl,de   
07B4   C3 97 03               JP   add3   
07B7                             ;*******************************************************************
07B7                             ; commands
07B7                             ;*******************************************************************
07B7                COMMAND:      
07B7   03                     INC   bc   
07B8   0A                     LD   a,(bc)   
07B9   FE 5C                  CP   $5C   ; \\ comment
07BB   CA 32 08               JP   z,comment   
07BE   FE 61                  CP   "a"   ; \a absolute
07C0   CA 05 08               JP   z,abs1   
07C3   FE 62                  CP   "b"   ; \b bytes
07C5   CA 3B 08               JP   z,bytes   
07C8   FE 63                  CP   "c"   ; \c capture
07CA   CA 12 08               JP   z,capture   
07CD   FE 66                  CP   "f"   ; \f func
07CF   CA 43 08               JP   z,func   
07D2   FE 46                  CP   "F"   ; \F false
07D4   CA 09 06               JP   z,false1   
07D7   FE 69                  CP   "i"   ; \i input
07D9   CA 5F 08               JP   z,input   
07DC   FE 6B                  CP   "k"   ; \k key
07DE   CA 6A 08               JP   z,key   
07E1   FE 6F                  CP   "o"   ; \o output
07E3   CA 73 08               JP   z,output   
07E6   FE 72                  CP   "r"   ; \r repeat
07E8   CA 7C 08               JP   z,repeat   
07EB   FE 73                  CP   "s"   ; \s select
07ED   CA 84 08               JP   z,select   
07F0   FE 54                  CP   "T"   ; \T true
07F2   CA 03 06               JP   z,true1   
07F5   FE 77                  CP   "w"   ; \w words
07F7   CA 8E 08               JP   z,words   
07FA   FE 78                  CP   "x"   ; \x exit loop or block
07FC   CA 94 08               JP   z,blockExit   
07FF   21 01 00               LD   hl,1   ; error 1: unknown command
0802   C3 19 0A               JP   error   
0805                ABS1:        
0805   E1                     POP   hl   
0806   CB 7C                  BIT   7,h   
0808   C8                     RET   z   
0809   AF                     XOR   a   
080A   95                     SUB   l   
080B   6F                     LD   l,a   
080C   9F                     SBC   a,a   
080D   94                     SUB   h   
080E   67                     LD   h,a   
080F   E5                     PUSH   hl   
0810   DD E9                  JP   (ix)   
0812                             ; capture
0812                             ; array* func* -- func1*
0812                CAPTURE:      
0812   E1                     POP   hl   ; h1 = func*
0813   ED 5B EC 3A            LD   de,(vHeapPtr)   ; de = heap* = capture*
0817   ED 43 F8 3A            LD   (vTemp1),bc   ; save IP
081B   01 06 00               LD   bc,6   ; bc = count
081E   ED B0                  LDIR      ; clone func
0820   ED 4B F8 3A            LD   bc,(vTemp1)   ; restore IP
0824   2A EC 3A               LD   hl,(vHeapPtr)   ; hl = heap* = capture*
0827   ED 53 EC 3A            LD   (vHeapPtr),de   ; heap* += 6
082B   D1                     POP   de   ; de = array*
082C   E5                     PUSH   hl   ; return capture*
082D   73                     LD   (hl),e   ; compile array*
082E   23                     INC   hl   
082F   72                     LD   (hl),d   
0830   DD E9                  JP   (ix)   
0832                COMMENT:      
0832   03                     INC   bc   ; point to next char
0833   0A                     LD   a,(bc)   
0834   FE 20                  CP   " "   ; terminate on any char less than SP
0836   30 FA                  JR   nc,comment   
0838   0B                     DEC   bc   
0839   DD E9                  JP   (ix)   
083B                BYTES:       
083B   21 01 00               LD   hl,1   
083E                BYTES1:      
083E   22 E6 3A               LD   (vDataWidth),hl   
0841   DD E9                  JP   (ix)   
0843                             ; arg_list* block* -- ptr
0843                FUNC:        
0843   D1                     POP   de   ; de = block* hl = heap*
0844   2A EC 3A               LD   hl,(vHeapPtr)   
0847   AF                     XOR   a   
0848   77                     LD   (hl),a   ; compile null capture*
0849   23                     INC   hl   
084A   77                     LD   (hl),a   
084B   23                     INC   hl   
084C   73                     LD   (hl),e   ; compile block*
084D   23                     INC   hl   
084E   72                     LD   (hl),d   
084F   23                     INC   hl   
0850   D1                     POP   de   ; de = block*
0851   73                     LD   (hl),e   ; compile arg_list*
0852   23                     INC   hl   
0853   72                     LD   (hl),d   
0854   23                     INC   hl   
0855   ED 5B EC 3A            LD   de,(vHeapPtr)   ; return func*
0859   D5                     PUSH   de   
085A   22 EC 3A               LD   (vHeapPtr),hl   ; heap* += 4
085D   DD E9                  JP   (ix)   
085F                             ; Z80 port input
085F                             ; port -- value
085F                INPUT:       
085F   E1                     POP   hl   
0860   59                     LD   e,c   ; save IP
0861   4D                     LD   c,l   
0862   ED 68                  IN   l,(c)   
0864   26 00                  LD   h,0   
0866   4B                     LD   c,e   ; restore IP
0867   E5                     PUSH   hl   
0868   DD E9                  JP   (ix)   
086A                KEY:         
086A   CD 81 00               CALL   getchar   
086D   26 00                  LD   h,0   
086F   6F                     LD   l,a   
0870   E5                     PUSH   hl   
0871   DD E9                  JP   (ix)   
0873                             ; Z80 port output
0873                             ; value port --
0873                OUTPUT:      
0873   E1                     POP   hl   
0874   59                     LD   e,c   ; save IP
0875   4D                     LD   c,l   
0876   E1                     POP   hl   
0877   ED 69                  OUT   (c),l   
0879   4B                     LD   c,e   ; restore IP
087A   DD E9                  JP   (ix)   
087C                             ; repeat
087C                             ; block* --
087C                REPEAT:      
087C   0B                     DEC   bc   ; rewind IP to before \r
087D   0B                     DEC   bc   
087E   E1                     POP   hl   
087F   E5                     PUSH   hl   
0880   E5                     PUSH   hl   
0881   C3 0F 06               JP   go   
0884                             ; select
0884                             ; index array -- value
0884                SELECT:      
0884   D1                     POP   de   ; de = array
0885   E1                     POP   hl   ; hl = index
0886   29                     ADD   hl,hl   ; if data width = 2 then double
0887   19                     ADD   hl,de   ; add addr
0888   5E                     LD   e,(hl)   
0889   23                     INC   hl   
088A   56                     LD   d,(hl)   
088B   C3 10 06               JP   go1   
088E                WORDS:       
088E   21 02 00               LD   hl,2   
0891   C3 3E 08               JP   bytes1   
0894                BLOCKEXIT:      
0894   E1                     POP   hl   
0895   7D                     LD   a,l   
0896   B4                     OR   h   
0897   28 02                  JR   z,blockExit1   
0899   DD E9                  JP   (ix)   
089B                BLOCKEXIT1:      
089B   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
089E   FD 66 07               LD   h,(iy+7)   
08A1   23                     INC   hl   ; forward IP on stack to after \r
08A2   23                     INC   hl   
08A3   FD 75 06               LD   (iy+6),l   
08A6   FD 74 07               LD   (iy+7),h   
08A9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
08AC   FD 56 03               LD   d,(iy+3)   
08AF   13                     INC   de   
08B0   13                     INC   de   
08B1   FD 73 02               LD   (iy+2),e   ; hl = first_arg*, is it in this scope?
08B4   FD 72 03               LD   (iy+3),d   
08B7   C3 2E 05               JP   blockEnd   
08BA                             ; 
08BA                             ; 
08BA                             ; 
08BA                             ; 
08BA                FILTER:      
08BA                MAP:         
08BA                SCAN:        
08BA   DD E9                  JP   (ix)   
08BC                             ; print decimal
08BC                             ; hl = value
08BC                PRTDEC:      
08BC   CB 7C                  BIT   7,h   
08BE   28 0B                  JR   z,prtdec0   
08C0   3E 2D                  LD   a,"-"   
08C2   CD 85 00               CALL   putchar   
08C5   AF                     XOR   a   
08C6   95                     SUB   l   
08C7   6F                     LD   l,a   
08C8   9F                     SBC   a,a   
08C9   94                     SUB   h   
08CA   67                     LD   h,a   
08CB                PRTDEC0:      
08CB   C5                     PUSH   bc   
08CC   0E 00                  LD   c,0   ; leading zeros flag = false
08CE   11 F0 D8               LD   de,-10000   
08D1   CD ED 08               CALL   prtdec1   
08D4   11 18 FC               LD   de,-1000   
08D7   CD ED 08               CALL   prtdec1   
08DA   11 9C FF               LD   de,-100   
08DD   CD ED 08               CALL   prtdec1   
08E0   1E F6                  LD   e,-10   
08E2   CD ED 08               CALL   prtdec1   
08E5   0C                     INC   c   ; flag = true for at least digit
08E6   1E FF                  LD   e,-1   
08E8   CD ED 08               CALL   prtdec1   
08EB   C1                     POP   bc   
08EC   C9                     RET      
08ED                PRTDEC1:      
08ED   06 2F                  LD   b,"0"-1   
08EF                PRTDEC2:      
08EF   04                     INC   b   
08F0   19                     ADD   hl,de   
08F1   38 FC                  JR   c,prtdec2   
08F3   ED 52                  SBC   hl,de   
08F5   3E 30                  LD   a,"0"   
08F7   B8                     CP   b   
08F8   20 05                  JR   nz,prtdec3   
08FA   AF                     XOR   a   
08FB   B1                     OR   c   
08FC   C8                     RET   z   
08FD   18 01                  JR   prtdec4   
08FF                PRTDEC3:      
08FF   0C                     INC   c   
0900                PRTDEC4:      
0900   78                     LD   a,b   
0901   C3 85 00               JP   putchar   
0904                PRTHEX:      ; display hl as a 16-bit number in hex.
0904   C5                     PUSH   bc   ; preserve the IP
0905   7C                     LD   a,h   
0906   CD 0F 09               CALL   prthex2   
0909   7D                     LD   a,l   
090A   CD 0F 09               CALL   prthex2   
090D   C1                     POP   bc   
090E   C9                     RET      
090F                PRTHEX2:      
090F   4F                     LD   c,a   
0910   1F                     RRA      
0911   1F                     RRA      
0912   1F                     RRA      
0913   1F                     RRA      
0914   CD 18 09               CALL   prthex3   
0917   79                     LD   a,c   
0918                PRTHEX3:      
0918   E6 0F                  AND   0x0F   
091A   C6 90                  ADD   a,0x90   
091C   27                     DAA      
091D   CE 40                  ADC   a,0x40   
091F   27                     DAA      
0920   C3 85 00               JP   putchar   
0923                PRTSTR0:      
0923   CD 85 00               CALL   putchar   
0926   23                     INC   hl   
0927                PRTSTR:      
0927   7E                     LD   a,(hl)   
0928   B7                     OR   a   
0929   20 F8                  JR   nz,prtstr0   
092B   C9                     RET      
092C                             ; **************************************************************************
092C                             ; calculate nesting value
092C                             ; a is char to be tested,
092C                             ; e is the nesting value (initially 0)
092C                             ; e is increased by ( and [
092C                             ; e is decreased by ) and ]
092C                             ; e has its bit 7 toggled by `
092C                             ; limited to 127 levels
092C                             ; **************************************************************************
092C                NESTING:      
092C   FE 22                  CP   DQUOTE   ; quote char
092E   28 06                  JR   z,nesting0   
0930   FE 60                  CP   "`"   ; quote char
0932   28 02                  JR   z,nesting0   
0934   18 0A                  JR   nesting1   
0936                NESTING0:      
0936   CB 7B                  BIT   7,e   
0938   28 03                  JR   z,nesting1a   
093A   CB BB                  RES   7,e   
093C   C9                     RET      
093D                NESTING1A:      
093D   CB FB                  SET   7,e   
093F   C9                     RET      
0940                NESTING1:      
0940   CB 7B                  BIT   7,e   
0942   C0                     RET   nz   
0943   FE 7B                  CP   "{"   
0945   28 08                  JR   z,nesting2   
0947   FE 5B                  CP   "["   
0949   28 04                  JR   z,nesting2   
094B   FE 28                  CP   "("   
094D   20 02                  JR   nz,nesting3   
094F                NESTING2:      
094F   1C                     INC   e   
0950   C9                     RET      
0951                NESTING3:      
0951   FE 7D                  CP   "}"   
0953   28 07                  JR   z,nesting4   
0955   FE 5D                  CP   "]"   
0957   28 03                  JR   z,nesting4   
0959   FE 29                  CP   ")"   
095B   C0                     RET   nz   
095C                NESTING4:      
095C   1D                     DEC   e   
095D   C9                     RET      
095E                PROMPT:      
095E   CD 6E 09               CALL   printStr   
0961   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0966   C9                     RET      
0967                CRLF:        
0967   CD 6E 09               CALL   printStr   
096A   0D 0A 00               .CSTR   "\r\n"   
096D   C9                     RET      
096E                             ; prints a null teminated string
096E                             ; the string should be immedaitely following the call
096E                PRINTSTR:      
096E   E3                     EX   (sp),hl   ; swap			
096F   CD 27 09               CALL   prtstr   
0972   23                     INC   hl   ; inc past NUL
0973   E3                     EX   (sp),hl   ; put it back	
0974   C9                     RET      
0975                INIT:        
0975   DD 2A EA 3A            LD   ix,(vNext)   
0979   FD 21 80 39            LD   iy,STACK   
097D   21 80 01               LD   hl,isysVars   
0980   11 E6 3A               LD   de,sysVars   
0983   01 10 00               LD   bc,8 * 2   
0986   ED B0                  LDIR      
0988   21 00 3A               LD   hl,vars   ; 52 vars LO HI
098B   06 34                  LD   b,26*2   
098D   AF                     XOR   a   
098E                INIT0:       
098E   77                     LD   (hl),a   
098F   23                     INC   hl   
0990   10 FC                  DJNZ   init0   
0992   C9                     RET      
0993                START:       
0993   31 80 39               LD   sp,STACK   ; start of monty
0996   CD 75 09               CALL   init   ; setups
0999   CD 6E 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
099C   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09A9                INTERPRET:      
09A9   CD 5E 09               CALL   prompt   
09AC   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09AF   ED 43 E8 3A            LD   (vTIBPtr),bc   
09B3                INTERPRET2:      ; calc nesting (a macro might have changed it)
09B3   1E 00                  LD   e,0   ; initilize nesting value
09B5   C5                     PUSH   bc   ; save offset into TIB,
09B6                             ; bc is also the count of chars in TIB
09B6   21 00 3B               LD   hl,TIB   ; hl is start of TIB
09B9   18 06                  JR   interpret4   
09BB                INTERPRET3:      
09BB   7E                     LD   a,(hl)   ; a = char in TIB
09BC   23                     INC   hl   ; inc pointer into TIB
09BD   0B                     DEC   bc   ; dec count of chars in TIB
09BE   CD 2C 09               CALL   nesting   ; update nesting value
09C1                INTERPRET4:      
09C1   79                     LD   a,c   ; is count zero?
09C2   B0                     OR   b   
09C3   20 F6                  JR   nz,interpret3   ; if not loop
09C5   C1                     POP   bc   ; restore offset into TIB
09C6                INTERPRET5:      
09C6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09C9   FE 20                  CP   $20   ; compare to space
09CB   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09CD   FE 00                  CP   $0   ; is it end of string? NUL end of string
09CF                             ; ???? NEEDED?
09CF   28 27                  JR   z,interpret8   
09D1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09D3   28 10                  JR   z,interpret7   ; if anything else its macro/control
09D5                             ; macro
09D5                             ;  ld (vTIBPtr),bc
09D5                             ;  ld hl,ctrlCodes
09D5                             ;  add a,l			            ; look up key of macros
09D5                             ;  ld l,a
09D5                             ;  ld e,(hl)
09D5                             ;  ld a,e
09D5                             ;  or a
09D5                             ;  jr z,macro1
09D5                             ;  ld d,msb(macros)
09D5                             ;  push de
09D5                             ;  call call		            ; monty exec_ operation and jump to it
09D5                             ;  db DC1,0
09D5                             ; macro1:
09D5                             ;  ld bc,(vTIBPtr)
09D5   18 DC                  JR   interpret2   
09D7                INTERPRET6:      
09D7   21 00 3B               LD   hl,TIB   
09DA   09                     ADD   hl,bc   
09DB   77                     LD   (hl),a   ; store the character in textbuf
09DC   03                     INC   bc   
09DD   CD 85 00               CALL   putchar   ; echo character to screen
09E0   CD 2C 09               CALL   nesting   
09E3   18 E1                  JR   interpret5   ; wait for next character
09E5                INTERPRET7:      
09E5   21 00 3B               LD   hl,TIB   
09E8   09                     ADD   hl,bc   
09E9   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09EB   23                     INC   hl   
09EC   36 0A                  LD   (hl),"\n"   
09EE   23                     INC   hl   
09EF   03                     INC   bc   
09F0   03                     INC   bc   
09F1   CD 67 09               CALL   crlf   ; echo character to screen
09F4   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09F5   B7                     OR   a   
09F6   20 CE                  JR   nz,interpret5   
09F8                INTERPRET8:      
09F8   ED 43 E8 3A            LD   (vTIBPtr),bc   
09FC   01 00 3B               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09FF                             ; we pressed enter
09FF   0B                     DEC   bc   
0A00                NEXT:        
0A00   03                     INC   bc   ; Increment the IP
0A01   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A02   FE 20                  CP   " "   ; whitespace?
0A04   28 FA                  JR   z,next   ; space? ignore
0A06   38 07                  JR   c,next1   
0A08   6F                     LD   l,a   ; index into table
0A09   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A0B   6E                     LD   l,(hl)   ; get low jump address
0A0C   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A0E   E9                     JP   (hl)   ; Jump to routine
0A0F                NEXT1:       
0A0F   FE 00                  CP   NUL   ; end of input string?
0A11   28 03                  JR   z,exit_   
0A13   C3 A9 09               JP   interpret   ; no, other whitespace, macros?
0A16                EXIT_:       
0A16   60 69                  LD   hl,bc   
0A18   E9                     JP   (hl)   
0A19                ERROR:       
0A19   CD 6E 09               CALL   printStr   
0A1C   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A23   CD BC 08               CALL   prtdec   
0A26   C3 A9 09               JP   interpret   
0A29                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                             ; call printStr
0B00                             ; .cstr "Done!"
0B00                             ; HALT
0B00                             ; 
0B00                          ;*Macro unroll:  test "\\F", false
0B00   31 80 39               LD   SP,STACK   
0B03   CD 75 09               CALL   init   
0B06   CD B6 38               CALL   execStr   
0B09   5C 46 00               .CSTR   "\\F"   
0B0C                          ;*Macro unroll:  expect "\\F",false
0B0C   E1                     POP   HL   
0B0D   E5                     PUSH   HL   
0B0E   11 00 00               LD   DE,false   
0B11   B7                     OR   A   
0B12   ED 52                  SBC   HL,DE   
0B14   7D                     LD   A,L   
0B15   B4                     OR   H   
0B16   28 4D                  JR   Z,expectM_0_2103S43   
0B18   CD 6E 09               CALL   printStr   
0B1B   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0B24   CD 6E 09               CALL   printStr   
0B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B36   21 00 00               LD   HL,false   
0B39   CD BC 08               CALL   prtdec   
0B3C   CD 6E 09               CALL   printStr   
0B3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B4C   E1                     POP   hl   
0B4D   E5                     PUSH   hl   
0B4E   CD BC 08               CALL   prtdec   
0B51   E1                     POP   hl   
0B52   CD 6E 09               CALL   printStr   
0B55   20 28 23 00            .CSTR   " (#"   
0B59   CD 04 09               CALL   prthex   
0B5C   CD 6E 09               CALL   printStr   
0B5F   29 0D 0A 00            .CSTR   ")\r\n"   
0B63   76                     HALT      
0B64   00                     .CSTR      
0B65                EXPECTM_0_2103S43:      
0B65   E1                     POP   HL   
0B66                          ;*Macro unroll:  test "\\T", true
0B66   31 80 39               LD   SP,STACK   
0B69   CD 75 09               CALL   init   
0B6C   CD B6 38               CALL   execStr   
0B6F   5C 54 00               .CSTR   "\\T"   
0B72                          ;*Macro unroll:  expect "\\T",true
0B72   E1                     POP   HL   
0B73   E5                     PUSH   HL   
0B74   11 FF FF               LD   DE,true   
0B77   B7                     OR   A   
0B78   ED 52                  SBC   HL,DE   
0B7A   7D                     LD   A,L   
0B7B   B4                     OR   H   
0B7C   28 4D                  JR   Z,expectM_0_2104S43   
0B7E   CD 6E 09               CALL   printStr   
0B81   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0B8A   CD 6E 09               CALL   printStr   
0B8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B9C   21 FF FF               LD   HL,true   
0B9F   CD BC 08               CALL   prtdec   
0BA2   CD 6E 09               CALL   printStr   
0BA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BB2   E1                     POP   hl   
0BB3   E5                     PUSH   hl   
0BB4   CD BC 08               CALL   prtdec   
0BB7   E1                     POP   hl   
0BB8   CD 6E 09               CALL   printStr   
0BBB   20 28 23 00            .CSTR   " (#"   
0BBF   CD 04 09               CALL   prthex   
0BC2   CD 6E 09               CALL   printStr   
0BC5   29 0D 0A 00            .CSTR   ")\r\n"   
0BC9   76                     HALT      
0BCA   00                     .CSTR      
0BCB                EXPECTM_0_2104S43:      
0BCB   E1                     POP   HL   
0BCC                          ;*Macro unroll:  test "1", 1
0BCC   31 80 39               LD   SP,STACK   
0BCF   CD 75 09               CALL   init   
0BD2   CD B6 38               CALL   execStr   
0BD5   31 00                  .CSTR   "1"   
0BD7                          ;*Macro unroll:  expect "1",1
0BD7   E1                     POP   HL   
0BD8   E5                     PUSH   HL   
0BD9   11 01 00               LD   DE,1   
0BDC   B7                     OR   A   
0BDD   ED 52                  SBC   HL,DE   
0BDF   7D                     LD   A,L   
0BE0   B4                     OR   H   
0BE1   28 4C                  JR   Z,expectM_0_2105S43   
0BE3   CD 6E 09               CALL   printStr   
0BE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BEE   CD 6E 09               CALL   printStr   
0BF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C00   21 01 00               LD   HL,1   
0C03   CD BC 08               CALL   prtdec   
0C06   CD 6E 09               CALL   printStr   
0C09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C16   E1                     POP   hl   
0C17   E5                     PUSH   hl   
0C18   CD BC 08               CALL   prtdec   
0C1B   E1                     POP   hl   
0C1C   CD 6E 09               CALL   printStr   
0C1F   20 28 23 00            .CSTR   " (#"   
0C23   CD 04 09               CALL   prthex   
0C26   CD 6E 09               CALL   printStr   
0C29   29 0D 0A 00            .CSTR   ")\r\n"   
0C2D   76                     HALT      
0C2E   00                     .CSTR      
0C2F                EXPECTM_0_2105S43:      
0C2F   E1                     POP   HL   
0C30                          ;*Macro unroll:  test "2", 2
0C30   31 80 39               LD   SP,STACK   
0C33   CD 75 09               CALL   init   
0C36   CD B6 38               CALL   execStr   
0C39   32 00                  .CSTR   "2"   
0C3B                          ;*Macro unroll:  expect "2",2
0C3B   E1                     POP   HL   
0C3C   E5                     PUSH   HL   
0C3D   11 02 00               LD   DE,2   
0C40   B7                     OR   A   
0C41   ED 52                  SBC   HL,DE   
0C43   7D                     LD   A,L   
0C44   B4                     OR   H   
0C45   28 4C                  JR   Z,expectM_0_2106S43   
0C47   CD 6E 09               CALL   printStr   
0C4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0C52   CD 6E 09               CALL   printStr   
0C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C64   21 02 00               LD   HL,2   
0C67   CD BC 08               CALL   prtdec   
0C6A   CD 6E 09               CALL   printStr   
0C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C7A   E1                     POP   hl   
0C7B   E5                     PUSH   hl   
0C7C   CD BC 08               CALL   prtdec   
0C7F   E1                     POP   hl   
0C80   CD 6E 09               CALL   printStr   
0C83   20 28 23 00            .CSTR   " (#"   
0C87   CD 04 09               CALL   prthex   
0C8A   CD 6E 09               CALL   printStr   
0C8D   29 0D 0A 00            .CSTR   ")\r\n"   
0C91   76                     HALT      
0C92   00                     .CSTR      
0C93                EXPECTM_0_2106S43:      
0C93   E1                     POP   HL   
0C94                          ;*Macro unroll:  test "1", 1
0C94   31 80 39               LD   SP,STACK   
0C97   CD 75 09               CALL   init   
0C9A   CD B6 38               CALL   execStr   
0C9D   31 00                  .CSTR   "1"   
0C9F                          ;*Macro unroll:  expect "1",1
0C9F   E1                     POP   HL   
0CA0   E5                     PUSH   HL   
0CA1   11 01 00               LD   DE,1   
0CA4   B7                     OR   A   
0CA5   ED 52                  SBC   HL,DE   
0CA7   7D                     LD   A,L   
0CA8   B4                     OR   H   
0CA9   28 4C                  JR   Z,expectM_0_2107S43   
0CAB   CD 6E 09               CALL   printStr   
0CAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0CB6   CD 6E 09               CALL   printStr   
0CB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CC8   21 01 00               LD   HL,1   
0CCB   CD BC 08               CALL   prtdec   
0CCE   CD 6E 09               CALL   printStr   
0CD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CDE   E1                     POP   hl   
0CDF   E5                     PUSH   hl   
0CE0   CD BC 08               CALL   prtdec   
0CE3   E1                     POP   hl   
0CE4   CD 6E 09               CALL   printStr   
0CE7   20 28 23 00            .CSTR   " (#"   
0CEB   CD 04 09               CALL   prthex   
0CEE   CD 6E 09               CALL   printStr   
0CF1   29 0D 0A 00            .CSTR   ")\r\n"   
0CF5   76                     HALT      
0CF6   00                     .CSTR      
0CF7                EXPECTM_0_2107S43:      
0CF7   E1                     POP   HL   
0CF8                          ;*Macro unroll:  test "0", 0
0CF8   31 80 39               LD   SP,STACK   
0CFB   CD 75 09               CALL   init   
0CFE   CD B6 38               CALL   execStr   
0D01   30 00                  .CSTR   "0"   
0D03                          ;*Macro unroll:  expect "0",0
0D03   E1                     POP   HL   
0D04   E5                     PUSH   HL   
0D05   11 00 00               LD   DE,0   
0D08   B7                     OR   A   
0D09   ED 52                  SBC   HL,DE   
0D0B   7D                     LD   A,L   
0D0C   B4                     OR   H   
0D0D   28 4C                  JR   Z,expectM_0_2108S43   
0D0F   CD 6E 09               CALL   printStr   
0D12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0D1A   CD 6E 09               CALL   printStr   
0D1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D2C   21 00 00               LD   HL,0   
0D2F   CD BC 08               CALL   prtdec   
0D32   CD 6E 09               CALL   printStr   
0D35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D42   E1                     POP   hl   
0D43   E5                     PUSH   hl   
0D44   CD BC 08               CALL   prtdec   
0D47   E1                     POP   hl   
0D48   CD 6E 09               CALL   printStr   
0D4B   20 28 23 00            .CSTR   " (#"   
0D4F   CD 04 09               CALL   prthex   
0D52   CD 6E 09               CALL   printStr   
0D55   29 0D 0A 00            .CSTR   ")\r\n"   
0D59   76                     HALT      
0D5A   00                     .CSTR      
0D5B                EXPECTM_0_2108S43:      
0D5B   E1                     POP   HL   
0D5C                          ;*Macro unroll:  test "10", 10
0D5C   31 80 39               LD   SP,STACK   
0D5F   CD 75 09               CALL   init   
0D62   CD B6 38               CALL   execStr   
0D65   31 30 00               .CSTR   "10"   
0D68                          ;*Macro unroll:  expect "10",10
0D68   E1                     POP   HL   
0D69   E5                     PUSH   HL   
0D6A   11 0A 00               LD   DE,10   
0D6D   B7                     OR   A   
0D6E   ED 52                  SBC   HL,DE   
0D70   7D                     LD   A,L   
0D71   B4                     OR   H   
0D72   28 4D                  JR   Z,expectM_0_2109S43   
0D74   CD 6E 09               CALL   printStr   
0D77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D80   CD 6E 09               CALL   printStr   
0D83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D92   21 0A 00               LD   HL,10   
0D95   CD BC 08               CALL   prtdec   
0D98   CD 6E 09               CALL   printStr   
0D9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DA8   E1                     POP   hl   
0DA9   E5                     PUSH   hl   
0DAA   CD BC 08               CALL   prtdec   
0DAD   E1                     POP   hl   
0DAE   CD 6E 09               CALL   printStr   
0DB1   20 28 23 00            .CSTR   " (#"   
0DB5   CD 04 09               CALL   prthex   
0DB8   CD 6E 09               CALL   printStr   
0DBB   29 0D 0A 00            .CSTR   ")\r\n"   
0DBF   76                     HALT      
0DC0   00                     .CSTR      
0DC1                EXPECTM_0_2109S43:      
0DC1   E1                     POP   HL   
0DC2                          ;*Macro unroll:  test "123", 123
0DC2   31 80 39               LD   SP,STACK   
0DC5   CD 75 09               CALL   init   
0DC8   CD B6 38               CALL   execStr   
0DCB   31 32 33 00            .CSTR   "123"   
0DCF                          ;*Macro unroll:  expect "123",123
0DCF   E1                     POP   HL   
0DD0   E5                     PUSH   HL   
0DD1   11 7B 00               LD   DE,123   
0DD4   B7                     OR   A   
0DD5   ED 52                  SBC   HL,DE   
0DD7   7D                     LD   A,L   
0DD8   B4                     OR   H   
0DD9   28 4E                  JR   Z,expectM_0_2110S43   
0DDB   CD 6E 09               CALL   printStr   
0DDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0DE8   CD 6E 09               CALL   printStr   
0DEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DFA   21 7B 00               LD   HL,123   
0DFD   CD BC 08               CALL   prtdec   
0E00   CD 6E 09               CALL   printStr   
0E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E10   E1                     POP   hl   
0E11   E5                     PUSH   hl   
0E12   CD BC 08               CALL   prtdec   
0E15   E1                     POP   hl   
0E16   CD 6E 09               CALL   printStr   
0E19   20 28 23 00            .CSTR   " (#"   
0E1D   CD 04 09               CALL   prthex   
0E20   CD 6E 09               CALL   printStr   
0E23   29 0D 0A 00            .CSTR   ")\r\n"   
0E27   76                     HALT      
0E28   00                     .CSTR      
0E29                EXPECTM_0_2110S43:      
0E29   E1                     POP   HL   
0E2A                          ;*Macro unroll:  test "-1",-1
0E2A   31 80 39               LD   SP,STACK   
0E2D   CD 75 09               CALL   init   
0E30   CD B6 38               CALL   execStr   
0E33   2D 31 00               .CSTR   "-1"   
0E36                          ;*Macro unroll:  expect "-1",-1
0E36   E1                     POP   HL   
0E37   E5                     PUSH   HL   
0E38   11 FF FF               LD   DE,-1   
0E3B   B7                     OR   A   
0E3C   ED 52                  SBC   HL,DE   
0E3E   7D                     LD   A,L   
0E3F   B4                     OR   H   
0E40   28 4D                  JR   Z,expectM_0_2111S43   
0E42   CD 6E 09               CALL   printStr   
0E45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0E4E   CD 6E 09               CALL   printStr   
0E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E60   21 FF FF               LD   HL,-1   
0E63   CD BC 08               CALL   prtdec   
0E66   CD 6E 09               CALL   printStr   
0E69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E76   E1                     POP   hl   
0E77   E5                     PUSH   hl   
0E78   CD BC 08               CALL   prtdec   
0E7B   E1                     POP   hl   
0E7C   CD 6E 09               CALL   printStr   
0E7F   20 28 23 00            .CSTR   " (#"   
0E83   CD 04 09               CALL   prthex   
0E86   CD 6E 09               CALL   printStr   
0E89   29 0D 0A 00            .CSTR   ")\r\n"   
0E8D   76                     HALT      
0E8E   00                     .CSTR      
0E8F                EXPECTM_0_2111S43:      
0E8F   E1                     POP   HL   
0E90                          ;*Macro unroll:  test "''", 0
0E90   31 80 39               LD   SP,STACK   
0E93   CD 75 09               CALL   init   
0E96   CD B6 38               CALL   execStr   
0E99   27 27 00               .CSTR   "''"   
0E9C                          ;*Macro unroll:  expect "''",0
0E9C   E1                     POP   HL   
0E9D   E5                     PUSH   HL   
0E9E   11 00 00               LD   DE,0   
0EA1   B7                     OR   A   
0EA2   ED 52                  SBC   HL,DE   
0EA4   7D                     LD   A,L   
0EA5   B4                     OR   H   
0EA6   28 4D                  JR   Z,expectM_0_2112S43   
0EA8   CD 6E 09               CALL   printStr   
0EAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0EB4   CD 6E 09               CALL   printStr   
0EB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC6   21 00 00               LD   HL,0   
0EC9   CD BC 08               CALL   prtdec   
0ECC   CD 6E 09               CALL   printStr   
0ECF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EDC   E1                     POP   hl   
0EDD   E5                     PUSH   hl   
0EDE   CD BC 08               CALL   prtdec   
0EE1   E1                     POP   hl   
0EE2   CD 6E 09               CALL   printStr   
0EE5   20 28 23 00            .CSTR   " (#"   
0EE9   CD 04 09               CALL   prthex   
0EEC   CD 6E 09               CALL   printStr   
0EEF   29 0D 0A 00            .CSTR   ")\r\n"   
0EF3   76                     HALT      
0EF4   00                     .CSTR      
0EF5                EXPECTM_0_2112S43:      
0EF5   E1                     POP   HL   
0EF6                          ;*Macro unroll:  test "'a'", $61
0EF6   31 80 39               LD   SP,STACK   
0EF9   CD 75 09               CALL   init   
0EFC   CD B6 38               CALL   execStr   
0EFF   27 61 27 00            .CSTR   "'a'"   
0F03                          ;*Macro unroll:  expect "'a'",$61
0F03   E1                     POP   HL   
0F04   E5                     PUSH   HL   
0F05   11 61 00               LD   DE,$61   
0F08   B7                     OR   A   
0F09   ED 52                  SBC   HL,DE   
0F0B   7D                     LD   A,L   
0F0C   B4                     OR   H   
0F0D   28 4E                  JR   Z,expectM_0_2113S43   
0F0F   CD 6E 09               CALL   printStr   
0F12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0F1C   CD 6E 09               CALL   printStr   
0F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F2E   21 61 00               LD   HL,$61   
0F31   CD BC 08               CALL   prtdec   
0F34   CD 6E 09               CALL   printStr   
0F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F44   E1                     POP   hl   
0F45   E5                     PUSH   hl   
0F46   CD BC 08               CALL   prtdec   
0F49   E1                     POP   hl   
0F4A   CD 6E 09               CALL   printStr   
0F4D   20 28 23 00            .CSTR   " (#"   
0F51   CD 04 09               CALL   prthex   
0F54   CD 6E 09               CALL   printStr   
0F57   29 0D 0A 00            .CSTR   ")\r\n"   
0F5B   76                     HALT      
0F5C   00                     .CSTR      
0F5D                EXPECTM_0_2113S43:      
0F5D   E1                     POP   HL   
0F5E                          ;*Macro unroll:  test "'\\''", $27
0F5E   31 80 39               LD   SP,STACK   
0F61   CD 75 09               CALL   init   
0F64   CD B6 38               CALL   execStr   
0F67   27 5C 27 27 00         .CSTR   "'\\''"   
0F6C                          ;*Macro unroll:  expect "'\\''",$27
0F6C   E1                     POP   HL   
0F6D   E5                     PUSH   HL   
0F6E   11 27 00               LD   DE,$27   
0F71   B7                     OR   A   
0F72   ED 52                  SBC   HL,DE   
0F74   7D                     LD   A,L   
0F75   B4                     OR   H   
0F76   28 4F                  JR   Z,expectM_0_2114S43   
0F78   CD 6E 09               CALL   printStr   
0F7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F86   CD 6E 09               CALL   printStr   
0F89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F98   21 27 00               LD   HL,$27   
0F9B   CD BC 08               CALL   prtdec   
0F9E   CD 6E 09               CALL   printStr   
0FA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FAE   E1                     POP   hl   
0FAF   E5                     PUSH   hl   
0FB0   CD BC 08               CALL   prtdec   
0FB3   E1                     POP   hl   
0FB4   CD 6E 09               CALL   printStr   
0FB7   20 28 23 00            .CSTR   " (#"   
0FBB   CD 04 09               CALL   prthex   
0FBE   CD 6E 09               CALL   printStr   
0FC1   29 0D 0A 00            .CSTR   ")\r\n"   
0FC5   76                     HALT      
0FC6   00                     .CSTR      
0FC7                EXPECTM_0_2114S43:      
0FC7   E1                     POP   HL   
0FC8                          ;*Macro unroll:  test "#10", $10
0FC8   31 80 39               LD   SP,STACK   
0FCB   CD 75 09               CALL   init   
0FCE   CD B6 38               CALL   execStr   
0FD1   23 31 30 00            .CSTR   "#10"   
0FD5                          ;*Macro unroll:  expect "#10",$10
0FD5   E1                     POP   HL   
0FD6   E5                     PUSH   HL   
0FD7   11 10 00               LD   DE,$10   
0FDA   B7                     OR   A   
0FDB   ED 52                  SBC   HL,DE   
0FDD   7D                     LD   A,L   
0FDE   B4                     OR   H   
0FDF   28 4E                  JR   Z,expectM_0_2115S43   
0FE1   CD 6E 09               CALL   printStr   
0FE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0FEE   CD 6E 09               CALL   printStr   
0FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1000   21 10 00               LD   HL,$10   
1003   CD BC 08               CALL   prtdec   
1006   CD 6E 09               CALL   printStr   
1009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1016   E1                     POP   hl   
1017   E5                     PUSH   hl   
1018   CD BC 08               CALL   prtdec   
101B   E1                     POP   hl   
101C   CD 6E 09               CALL   printStr   
101F   20 28 23 00            .CSTR   " (#"   
1023   CD 04 09               CALL   prthex   
1026   CD 6E 09               CALL   printStr   
1029   29 0D 0A 00            .CSTR   ")\r\n"   
102D   76                     HALT      
102E   00                     .CSTR      
102F                EXPECTM_0_2115S43:      
102F   E1                     POP   HL   
1030                          ;*Macro unroll:  test "#FF", $FF
1030   31 80 39               LD   SP,STACK   
1033   CD 75 09               CALL   init   
1036   CD B6 38               CALL   execStr   
1039   23 46 46 00            .CSTR   "#FF"   
103D                          ;*Macro unroll:  expect "#FF",$FF
103D   E1                     POP   HL   
103E   E5                     PUSH   HL   
103F   11 FF 00               LD   DE,$FF   
1042   B7                     OR   A   
1043   ED 52                  SBC   HL,DE   
1045   7D                     LD   A,L   
1046   B4                     OR   H   
1047   28 4E                  JR   Z,expectM_0_2116S43   
1049   CD 6E 09               CALL   printStr   
104C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1056   CD 6E 09               CALL   printStr   
1059   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1068   21 FF 00               LD   HL,$FF   
106B   CD BC 08               CALL   prtdec   
106E   CD 6E 09               CALL   printStr   
1071   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
107E   E1                     POP   hl   
107F   E5                     PUSH   hl   
1080   CD BC 08               CALL   prtdec   
1083   E1                     POP   hl   
1084   CD 6E 09               CALL   printStr   
1087   20 28 23 00            .CSTR   " (#"   
108B   CD 04 09               CALL   prthex   
108E   CD 6E 09               CALL   printStr   
1091   29 0D 0A 00            .CSTR   ")\r\n"   
1095   76                     HALT      
1096   00                     .CSTR      
1097                EXPECTM_0_2116S43:      
1097   E1                     POP   HL   
1098                          ;*Macro unroll:  test "-1 2 +",1
1098   31 80 39               LD   SP,STACK   
109B   CD 75 09               CALL   init   
109E   CD B6 38               CALL   execStr   
10A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
10A8                          ;*Macro unroll:  expect "-1 2 +",1
10A8   E1                     POP   HL   
10A9   E5                     PUSH   HL   
10AA   11 01 00               LD   DE,1   
10AD   B7                     OR   A   
10AE   ED 52                  SBC   HL,DE   
10B0   7D                     LD   A,L   
10B1   B4                     OR   H   
10B2   28 51                  JR   Z,expectM_0_2117S43   
10B4   CD 6E 09               CALL   printStr   
10B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
10C4   CD 6E 09               CALL   printStr   
10C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D6   21 01 00               LD   HL,1   
10D9   CD BC 08               CALL   prtdec   
10DC   CD 6E 09               CALL   printStr   
10DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EC   E1                     POP   hl   
10ED   E5                     PUSH   hl   
10EE   CD BC 08               CALL   prtdec   
10F1   E1                     POP   hl   
10F2   CD 6E 09               CALL   printStr   
10F5   20 28 23 00            .CSTR   " (#"   
10F9   CD 04 09               CALL   prthex   
10FC   CD 6E 09               CALL   printStr   
10FF   29 0D 0A 00            .CSTR   ")\r\n"   
1103   76                     HALT      
1104   00                     .CSTR      
1105                EXPECTM_0_2117S43:      
1105   E1                     POP   HL   
1106                          ;*Macro unroll:  test "-1 1 +",0
1106   31 80 39               LD   SP,STACK   
1109   CD 75 09               CALL   init   
110C   CD B6 38               CALL   execStr   
110F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1116                          ;*Macro unroll:  expect "-1 1 +",0
1116   E1                     POP   HL   
1117   E5                     PUSH   HL   
1118   11 00 00               LD   DE,0   
111B   B7                     OR   A   
111C   ED 52                  SBC   HL,DE   
111E   7D                     LD   A,L   
111F   B4                     OR   H   
1120   28 51                  JR   Z,expectM_0_2118S43   
1122   CD 6E 09               CALL   printStr   
1125   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1132   CD 6E 09               CALL   printStr   
1135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1144   21 00 00               LD   HL,0   
1147   CD BC 08               CALL   prtdec   
114A   CD 6E 09               CALL   printStr   
114D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
115A   E1                     POP   hl   
115B   E5                     PUSH   hl   
115C   CD BC 08               CALL   prtdec   
115F   E1                     POP   hl   
1160   CD 6E 09               CALL   printStr   
1163   20 28 23 00            .CSTR   " (#"   
1167   CD 04 09               CALL   prthex   
116A   CD 6E 09               CALL   printStr   
116D   29 0D 0A 00            .CSTR   ")\r\n"   
1171   76                     HALT      
1172   00                     .CSTR      
1173                EXPECTM_0_2118S43:      
1173   E1                     POP   HL   
1174                          ;*Macro unroll:  test "1 2 +", 3
1174   31 80 39               LD   SP,STACK   
1177   CD 75 09               CALL   init   
117A   CD B6 38               CALL   execStr   
117D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1183                          ;*Macro unroll:  expect "1 2 +",3
1183   E1                     POP   HL   
1184   E5                     PUSH   HL   
1185   11 03 00               LD   DE,3   
1188   B7                     OR   A   
1189   ED 52                  SBC   HL,DE   
118B   7D                     LD   A,L   
118C   B4                     OR   H   
118D   28 50                  JR   Z,expectM_0_2119S43   
118F   CD 6E 09               CALL   printStr   
1192   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
119E   CD 6E 09               CALL   printStr   
11A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11B0   21 03 00               LD   HL,3   
11B3   CD BC 08               CALL   prtdec   
11B6   CD 6E 09               CALL   printStr   
11B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C6   E1                     POP   hl   
11C7   E5                     PUSH   hl   
11C8   CD BC 08               CALL   prtdec   
11CB   E1                     POP   hl   
11CC   CD 6E 09               CALL   printStr   
11CF   20 28 23 00            .CSTR   " (#"   
11D3   CD 04 09               CALL   prthex   
11D6   CD 6E 09               CALL   printStr   
11D9   29 0D 0A 00            .CSTR   ")\r\n"   
11DD   76                     HALT      
11DE   00                     .CSTR      
11DF                EXPECTM_0_2119S43:      
11DF   E1                     POP   HL   
11E0                          ;*Macro unroll:  test "4 1 2 +", 3
11E0   31 80 39               LD   SP,STACK   
11E3   CD 75 09               CALL   init   
11E6   CD B6 38               CALL   execStr   
11E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
11F1                          ;*Macro unroll:  expect "4 1 2 +",3
11F1   E1                     POP   HL   
11F2   E5                     PUSH   HL   
11F3   11 03 00               LD   DE,3   
11F6   B7                     OR   A   
11F7   ED 52                  SBC   HL,DE   
11F9   7D                     LD   A,L   
11FA   B4                     OR   H   
11FB   28 52                  JR   Z,expectM_0_2120S43   
11FD   CD 6E 09               CALL   printStr   
1200   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
120E   CD 6E 09               CALL   printStr   
1211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1220   21 03 00               LD   HL,3   
1223   CD BC 08               CALL   prtdec   
1226   CD 6E 09               CALL   printStr   
1229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1236   E1                     POP   hl   
1237   E5                     PUSH   hl   
1238   CD BC 08               CALL   prtdec   
123B   E1                     POP   hl   
123C   CD 6E 09               CALL   printStr   
123F   20 28 23 00            .CSTR   " (#"   
1243   CD 04 09               CALL   prthex   
1246   CD 6E 09               CALL   printStr   
1249   29 0D 0A 00            .CSTR   ")\r\n"   
124D   76                     HALT      
124E   00                     .CSTR      
124F                EXPECTM_0_2120S43:      
124F   E1                     POP   HL   
1250                          ;*Macro unroll:  test "123 456 +", 123+456
1250   31 80 39               LD   SP,STACK   
1253   CD 75 09               CALL   init   
1256   CD B6 38               CALL   execStr   
1259   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1263                          ;*Macro unroll:  expect "123 456 +",123+456
1263   E1                     POP   HL   
1264   E5                     PUSH   HL   
1265   11 43 02               LD   DE,123+456   
1268   B7                     OR   A   
1269   ED 52                  SBC   HL,DE   
126B   7D                     LD   A,L   
126C   B4                     OR   H   
126D   28 54                  JR   Z,expectM_0_2121S43   
126F   CD 6E 09               CALL   printStr   
1272   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1282   CD 6E 09               CALL   printStr   
1285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1294   21 43 02               LD   HL,123+456   
1297   CD BC 08               CALL   prtdec   
129A   CD 6E 09               CALL   printStr   
129D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12AA   E1                     POP   hl   
12AB   E5                     PUSH   hl   
12AC   CD BC 08               CALL   prtdec   
12AF   E1                     POP   hl   
12B0   CD 6E 09               CALL   printStr   
12B3   20 28 23 00            .CSTR   " (#"   
12B7   CD 04 09               CALL   prthex   
12BA   CD 6E 09               CALL   printStr   
12BD   29 0D 0A 00            .CSTR   ")\r\n"   
12C1   76                     HALT      
12C2   00                     .CSTR      
12C3                EXPECTM_0_2121S43:      
12C3   E1                     POP   HL   
12C4                          ;*Macro unroll:  test "64 128 +", 64+128
12C4   31 80 39               LD   SP,STACK   
12C7   CD 75 09               CALL   init   
12CA   CD B6 38               CALL   execStr   
12CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12D6                          ;*Macro unroll:  expect "64 128 +",64+128
12D6   E1                     POP   HL   
12D7   E5                     PUSH   HL   
12D8   11 C0 00               LD   DE,64+128   
12DB   B7                     OR   A   
12DC   ED 52                  SBC   HL,DE   
12DE   7D                     LD   A,L   
12DF   B4                     OR   H   
12E0   28 53                  JR   Z,expectM_0_2122S43   
12E2   CD 6E 09               CALL   printStr   
12E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12F4   CD 6E 09               CALL   printStr   
12F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1306   21 C0 00               LD   HL,64+128   
1309   CD BC 08               CALL   prtdec   
130C   CD 6E 09               CALL   printStr   
130F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131C   E1                     POP   hl   
131D   E5                     PUSH   hl   
131E   CD BC 08               CALL   prtdec   
1321   E1                     POP   hl   
1322   CD 6E 09               CALL   printStr   
1325   20 28 23 00            .CSTR   " (#"   
1329   CD 04 09               CALL   prthex   
132C   CD 6E 09               CALL   printStr   
132F   29 0D 0A 00            .CSTR   ")\r\n"   
1333   76                     HALT      
1334   00                     .CSTR      
1335                EXPECTM_0_2122S43:      
1335   E1                     POP   HL   
1336                          ;*Macro unroll:  test "1 2 +", 3
1336   31 80 39               LD   SP,STACK   
1339   CD 75 09               CALL   init   
133C   CD B6 38               CALL   execStr   
133F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1345                          ;*Macro unroll:  expect "1 2 +",3
1345   E1                     POP   HL   
1346   E5                     PUSH   HL   
1347   11 03 00               LD   DE,3   
134A   B7                     OR   A   
134B   ED 52                  SBC   HL,DE   
134D   7D                     LD   A,L   
134E   B4                     OR   H   
134F   28 50                  JR   Z,expectM_0_2123S43   
1351   CD 6E 09               CALL   printStr   
1354   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1360   CD 6E 09               CALL   printStr   
1363   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1372   21 03 00               LD   HL,3   
1375   CD BC 08               CALL   prtdec   
1378   CD 6E 09               CALL   printStr   
137B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1388   E1                     POP   hl   
1389   E5                     PUSH   hl   
138A   CD BC 08               CALL   prtdec   
138D   E1                     POP   hl   
138E   CD 6E 09               CALL   printStr   
1391   20 28 23 00            .CSTR   " (#"   
1395   CD 04 09               CALL   prthex   
1398   CD 6E 09               CALL   printStr   
139B   29 0D 0A 00            .CSTR   ")\r\n"   
139F   76                     HALT      
13A0   00                     .CSTR      
13A1                EXPECTM_0_2123S43:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "1 a= a++ a",2
13A2   31 80 39               LD   SP,STACK   
13A5   CD 75 09               CALL   init   
13A8   CD B6 38               CALL   execStr   
13AB   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
13B6                          ;*Macro unroll:  expect "1 a= a++ a",2
13B6   E1                     POP   HL   
13B7   E5                     PUSH   HL   
13B8   11 02 00               LD   DE,2   
13BB   B7                     OR   A   
13BC   ED 52                  SBC   HL,DE   
13BE   7D                     LD   A,L   
13BF   B4                     OR   H   
13C0   28 55                  JR   Z,expectM_0_2124S43   
13C2   CD 6E 09               CALL   printStr   
13C5   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
13D6   CD 6E 09               CALL   printStr   
13D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E8   21 02 00               LD   HL,2   
13EB   CD BC 08               CALL   prtdec   
13EE   CD 6E 09               CALL   printStr   
13F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FE   E1                     POP   hl   
13FF   E5                     PUSH   hl   
1400   CD BC 08               CALL   prtdec   
1403   E1                     POP   hl   
1404   CD 6E 09               CALL   printStr   
1407   20 28 23 00            .CSTR   " (#"   
140B   CD 04 09               CALL   prthex   
140E   CD 6E 09               CALL   printStr   
1411   29 0D 0A 00            .CSTR   ")\r\n"   
1415   76                     HALT      
1416   00                     .CSTR      
1417                EXPECTM_0_2124S43:      
1417   E1                     POP   HL   
1418                          ;*Macro unroll:  test "1 a= 2 a += a",3
1418   31 80 39               LD   SP,STACK   
141B   CD 75 09               CALL   init   
141E   CD B6 38               CALL   execStr   
1421   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
142F                          ;*Macro unroll:  expect "1 a= 2 a += a",3
142F   E1                     POP   HL   
1430   E5                     PUSH   HL   
1431   11 03 00               LD   DE,3   
1434   B7                     OR   A   
1435   ED 52                  SBC   HL,DE   
1437   7D                     LD   A,L   
1438   B4                     OR   H   
1439   28 58                  JR   Z,expectM_0_2125S43   
143B   CD 6E 09               CALL   printStr   
143E   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
1452   CD 6E 09               CALL   printStr   
1455   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1464   21 03 00               LD   HL,3   
1467   CD BC 08               CALL   prtdec   
146A   CD 6E 09               CALL   printStr   
146D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
147A   E1                     POP   hl   
147B   E5                     PUSH   hl   
147C   CD BC 08               CALL   prtdec   
147F   E1                     POP   hl   
1480   CD 6E 09               CALL   printStr   
1483   20 28 23 00            .CSTR   " (#"   
1487   CD 04 09               CALL   prthex   
148A   CD 6E 09               CALL   printStr   
148D   29 0D 0A 00            .CSTR   ")\r\n"   
1491   76                     HALT      
1492   00                     .CSTR      
1493                EXPECTM_0_2125S43:      
1493   E1                     POP   HL   
1494                          ;*Macro unroll:  test "-1 -1 -",0
1494   31 80 39               LD   SP,STACK   
1497   CD 75 09               CALL   init   
149A   CD B6 38               CALL   execStr   
149D   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
14A5                          ;*Macro unroll:  expect "-1 -1 -",0
14A5   E1                     POP   HL   
14A6   E5                     PUSH   HL   
14A7   11 00 00               LD   DE,0   
14AA   B7                     OR   A   
14AB   ED 52                  SBC   HL,DE   
14AD   7D                     LD   A,L   
14AE   B4                     OR   H   
14AF   28 52                  JR   Z,expectM_0_2126S43   
14B1   CD 6E 09               CALL   printStr   
14B4   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
14C2   CD 6E 09               CALL   printStr   
14C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14D4   21 00 00               LD   HL,0   
14D7   CD BC 08               CALL   prtdec   
14DA   CD 6E 09               CALL   printStr   
14DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EA   E1                     POP   hl   
14EB   E5                     PUSH   hl   
14EC   CD BC 08               CALL   prtdec   
14EF   E1                     POP   hl   
14F0   CD 6E 09               CALL   printStr   
14F3   20 28 23 00            .CSTR   " (#"   
14F7   CD 04 09               CALL   prthex   
14FA   CD 6E 09               CALL   printStr   
14FD   29 0D 0A 00            .CSTR   ")\r\n"   
1501   76                     HALT      
1502   00                     .CSTR      
1503                EXPECTM_0_2126S43:      
1503   E1                     POP   HL   
1504                          ;*Macro unroll:  test "5 3 -", 2
1504   31 80 39               LD   SP,STACK   
1507   CD 75 09               CALL   init   
150A   CD B6 38               CALL   execStr   
150D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1513                          ;*Macro unroll:  expect "5 3 -",2
1513   E1                     POP   HL   
1514   E5                     PUSH   HL   
1515   11 02 00               LD   DE,2   
1518   B7                     OR   A   
1519   ED 52                  SBC   HL,DE   
151B   7D                     LD   A,L   
151C   B4                     OR   H   
151D   28 50                  JR   Z,expectM_0_2127S43   
151F   CD 6E 09               CALL   printStr   
1522   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
152E   CD 6E 09               CALL   printStr   
1531   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1540   21 02 00               LD   HL,2   
1543   CD BC 08               CALL   prtdec   
1546   CD 6E 09               CALL   printStr   
1549   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1556   E1                     POP   hl   
1557   E5                     PUSH   hl   
1558   CD BC 08               CALL   prtdec   
155B   E1                     POP   hl   
155C   CD 6E 09               CALL   printStr   
155F   20 28 23 00            .CSTR   " (#"   
1563   CD 04 09               CALL   prthex   
1566   CD 6E 09               CALL   printStr   
1569   29 0D 0A 00            .CSTR   ")\r\n"   
156D   76                     HALT      
156E   00                     .CSTR      
156F                EXPECTM_0_2127S43:      
156F   E1                     POP   HL   
1570                          ;*Macro unroll:  test "2 1 -",1
1570   31 80 39               LD   SP,STACK   
1573   CD 75 09               CALL   init   
1576   CD B6 38               CALL   execStr   
1579   32 20 31 20 2D 00      .CSTR   "2 1 -"   
157F                          ;*Macro unroll:  expect "2 1 -",1
157F   E1                     POP   HL   
1580   E5                     PUSH   HL   
1581   11 01 00               LD   DE,1   
1584   B7                     OR   A   
1585   ED 52                  SBC   HL,DE   
1587   7D                     LD   A,L   
1588   B4                     OR   H   
1589   28 50                  JR   Z,expectM_0_2128S43   
158B   CD 6E 09               CALL   printStr   
158E   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
159A   CD 6E 09               CALL   printStr   
159D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AC   21 01 00               LD   HL,1   
15AF   CD BC 08               CALL   prtdec   
15B2   CD 6E 09               CALL   printStr   
15B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C2   E1                     POP   hl   
15C3   E5                     PUSH   hl   
15C4   CD BC 08               CALL   prtdec   
15C7   E1                     POP   hl   
15C8   CD 6E 09               CALL   printStr   
15CB   20 28 23 00            .CSTR   " (#"   
15CF   CD 04 09               CALL   prthex   
15D2   CD 6E 09               CALL   printStr   
15D5   29 0D 0A 00            .CSTR   ")\r\n"   
15D9   76                     HALT      
15DA   00                     .CSTR      
15DB                EXPECTM_0_2128S43:      
15DB   E1                     POP   HL   
15DC                          ;*Macro unroll:  test "3 a= a-- a",2
15DC   31 80 39               LD   SP,STACK   
15DF   CD 75 09               CALL   init   
15E2   CD B6 38               CALL   execStr   
15E5   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
15F0                          ;*Macro unroll:  expect "3 a= a-- a",2
15F0   E1                     POP   HL   
15F1   E5                     PUSH   HL   
15F2   11 02 00               LD   DE,2   
15F5   B7                     OR   A   
15F6   ED 52                  SBC   HL,DE   
15F8   7D                     LD   A,L   
15F9   B4                     OR   H   
15FA   28 55                  JR   Z,expectM_0_2129S43   
15FC   CD 6E 09               CALL   printStr   
15FF   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
1610   CD 6E 09               CALL   printStr   
1613   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1622   21 02 00               LD   HL,2   
1625   CD BC 08               CALL   prtdec   
1628   CD 6E 09               CALL   printStr   
162B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1638   E1                     POP   hl   
1639   E5                     PUSH   hl   
163A   CD BC 08               CALL   prtdec   
163D   E1                     POP   hl   
163E   CD 6E 09               CALL   printStr   
1641   20 28 23 00            .CSTR   " (#"   
1645   CD 04 09               CALL   prthex   
1648   CD 6E 09               CALL   printStr   
164B   29 0D 0A 00            .CSTR   ")\r\n"   
164F   76                     HALT      
1650   00                     .CSTR      
1651                EXPECTM_0_2129S43:      
1651   E1                     POP   HL   
1652                          ;*Macro unroll:  test "4 a= a 2 -= a",2
1652   31 80 39               LD   SP,STACK   
1655   CD 75 09               CALL   init   
1658   CD B6 38               CALL   execStr   
165B   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
1669                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
1669   E1                     POP   HL   
166A   E5                     PUSH   HL   
166B   11 02 00               LD   DE,2   
166E   B7                     OR   A   
166F   ED 52                  SBC   HL,DE   
1671   7D                     LD   A,L   
1672   B4                     OR   H   
1673   28 58                  JR   Z,expectM_0_2130S43   
1675   CD 6E 09               CALL   printStr   
1678   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
168C   CD 6E 09               CALL   printStr   
168F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
169E   21 02 00               LD   HL,2   
16A1   CD BC 08               CALL   prtdec   
16A4   CD 6E 09               CALL   printStr   
16A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16B4   E1                     POP   hl   
16B5   E5                     PUSH   hl   
16B6   CD BC 08               CALL   prtdec   
16B9   E1                     POP   hl   
16BA   CD 6E 09               CALL   printStr   
16BD   20 28 23 00            .CSTR   " (#"   
16C1   CD 04 09               CALL   prthex   
16C4   CD 6E 09               CALL   printStr   
16C7   29 0D 0A 00            .CSTR   ")\r\n"   
16CB   76                     HALT      
16CC   00                     .CSTR      
16CD                EXPECTM_0_2130S43:      
16CD   E1                     POP   HL   
16CE                          ;*Macro unroll:  test "3 5 &", 1
16CE   31 80 39               LD   SP,STACK   
16D1   CD 75 09               CALL   init   
16D4   CD B6 38               CALL   execStr   
16D7   33 20 35 20 26 00      .CSTR   "3 5 &"   
16DD                          ;*Macro unroll:  expect "3 5 &",1
16DD   E1                     POP   HL   
16DE   E5                     PUSH   HL   
16DF   11 01 00               LD   DE,1   
16E2   B7                     OR   A   
16E3   ED 52                  SBC   HL,DE   
16E5   7D                     LD   A,L   
16E6   B4                     OR   H   
16E7   28 50                  JR   Z,expectM_0_2131S43   
16E9   CD 6E 09               CALL   printStr   
16EC   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
16F8   CD 6E 09               CALL   printStr   
16FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
170A   21 01 00               LD   HL,1   
170D   CD BC 08               CALL   prtdec   
1710   CD 6E 09               CALL   printStr   
1713   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1720   E1                     POP   hl   
1721   E5                     PUSH   hl   
1722   CD BC 08               CALL   prtdec   
1725   E1                     POP   hl   
1726   CD 6E 09               CALL   printStr   
1729   20 28 23 00            .CSTR   " (#"   
172D   CD 04 09               CALL   prthex   
1730   CD 6E 09               CALL   printStr   
1733   29 0D 0A 00            .CSTR   ")\r\n"   
1737   76                     HALT      
1738   00                     .CSTR      
1739                EXPECTM_0_2131S43:      
1739   E1                     POP   HL   
173A                          ;*Macro unroll:  test "3 5 |", 7
173A   31 80 39               LD   SP,STACK   
173D   CD 75 09               CALL   init   
1740   CD B6 38               CALL   execStr   
1743   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1749                          ;*Macro unroll:  expect "3 5 |",7
1749   E1                     POP   HL   
174A   E5                     PUSH   HL   
174B   11 07 00               LD   DE,7   
174E   B7                     OR   A   
174F   ED 52                  SBC   HL,DE   
1751   7D                     LD   A,L   
1752   B4                     OR   H   
1753   28 50                  JR   Z,expectM_0_2132S43   
1755   CD 6E 09               CALL   printStr   
1758   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1764   CD 6E 09               CALL   printStr   
1767   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1776   21 07 00               LD   HL,7   
1779   CD BC 08               CALL   prtdec   
177C   CD 6E 09               CALL   printStr   
177F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
178C   E1                     POP   hl   
178D   E5                     PUSH   hl   
178E   CD BC 08               CALL   prtdec   
1791   E1                     POP   hl   
1792   CD 6E 09               CALL   printStr   
1795   20 28 23 00            .CSTR   " (#"   
1799   CD 04 09               CALL   prthex   
179C   CD 6E 09               CALL   printStr   
179F   29 0D 0A 00            .CSTR   ")\r\n"   
17A3   76                     HALT      
17A4   00                     .CSTR      
17A5                EXPECTM_0_2132S43:      
17A5   E1                     POP   HL   
17A6                          ;*Macro unroll:  test "2 3 *", 6
17A6   31 80 39               LD   SP,STACK   
17A9   CD 75 09               CALL   init   
17AC   CD B6 38               CALL   execStr   
17AF   32 20 33 20 2A 00      .CSTR   "2 3 *"   
17B5                          ;*Macro unroll:  expect "2 3 *",6
17B5   E1                     POP   HL   
17B6   E5                     PUSH   HL   
17B7   11 06 00               LD   DE,6   
17BA   B7                     OR   A   
17BB   ED 52                  SBC   HL,DE   
17BD   7D                     LD   A,L   
17BE   B4                     OR   H   
17BF   28 50                  JR   Z,expectM_0_2133S43   
17C1   CD 6E 09               CALL   printStr   
17C4   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
17D0   CD 6E 09               CALL   printStr   
17D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17E2   21 06 00               LD   HL,6   
17E5   CD BC 08               CALL   prtdec   
17E8   CD 6E 09               CALL   printStr   
17EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F8   E1                     POP   hl   
17F9   E5                     PUSH   hl   
17FA   CD BC 08               CALL   prtdec   
17FD   E1                     POP   hl   
17FE   CD 6E 09               CALL   printStr   
1801   20 28 23 00            .CSTR   " (#"   
1805   CD 04 09               CALL   prthex   
1808   CD 6E 09               CALL   printStr   
180B   29 0D 0A 00            .CSTR   ")\r\n"   
180F   76                     HALT      
1810   00                     .CSTR      
1811                EXPECTM_0_2133S43:      
1811   E1                     POP   HL   
1812                          ;*Macro unroll:  test "3 x= 2 x *= x",6
1812   31 80 39               LD   SP,STACK   
1815   CD 75 09               CALL   init   
1818   CD B6 38               CALL   execStr   
181B   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1829                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1829   E1                     POP   HL   
182A   E5                     PUSH   HL   
182B   11 06 00               LD   DE,6   
182E   B7                     OR   A   
182F   ED 52                  SBC   HL,DE   
1831   7D                     LD   A,L   
1832   B4                     OR   H   
1833   28 58                  JR   Z,expectM_0_2134S43   
1835   CD 6E 09               CALL   printStr   
1838   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
184C   CD 6E 09               CALL   printStr   
184F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
185E   21 06 00               LD   HL,6   
1861   CD BC 08               CALL   prtdec   
1864   CD 6E 09               CALL   printStr   
1867   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1874   E1                     POP   hl   
1875   E5                     PUSH   hl   
1876   CD BC 08               CALL   prtdec   
1879   E1                     POP   hl   
187A   CD 6E 09               CALL   printStr   
187D   20 28 23 00            .CSTR   " (#"   
1881   CD 04 09               CALL   prthex   
1884   CD 6E 09               CALL   printStr   
1887   29 0D 0A 00            .CSTR   ")\r\n"   
188B   76                     HALT      
188C   00                     .CSTR      
188D                EXPECTM_0_2134S43:      
188D   E1                     POP   HL   
188E                          ;*Macro unroll:  test "1 2 3 + *", 5
188E   31 80 39               LD   SP,STACK   
1891   CD 75 09               CALL   init   
1894   CD B6 38               CALL   execStr   
1897   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
18A1                          ;*Macro unroll:  expect "1 2 3 + *",5
18A1   E1                     POP   HL   
18A2   E5                     PUSH   HL   
18A3   11 05 00               LD   DE,5   
18A6   B7                     OR   A   
18A7   ED 52                  SBC   HL,DE   
18A9   7D                     LD   A,L   
18AA   B4                     OR   H   
18AB   28 54                  JR   Z,expectM_0_2135S43   
18AD   CD 6E 09               CALL   printStr   
18B0   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
18C0   CD 6E 09               CALL   printStr   
18C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18D2   21 05 00               LD   HL,5   
18D5   CD BC 08               CALL   prtdec   
18D8   CD 6E 09               CALL   printStr   
18DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18E8   E1                     POP   hl   
18E9   E5                     PUSH   hl   
18EA   CD BC 08               CALL   prtdec   
18ED   E1                     POP   hl   
18EE   CD 6E 09               CALL   printStr   
18F1   20 28 23 00            .CSTR   " (#"   
18F5   CD 04 09               CALL   prthex   
18F8   CD 6E 09               CALL   printStr   
18FB   29 0D 0A 00            .CSTR   ")\r\n"   
18FF   76                     HALT      
1900   00                     .CSTR      
1901                EXPECTM_0_2135S43:      
1901   E1                     POP   HL   
1902                          ;*Macro unroll:  test "7 3 /", 2
1902   31 80 39               LD   SP,STACK   
1905   CD 75 09               CALL   init   
1908   CD B6 38               CALL   execStr   
190B   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1911                          ;*Macro unroll:  expect "7 3 /",2
1911   E1                     POP   HL   
1912   E5                     PUSH   HL   
1913   11 02 00               LD   DE,2   
1916   B7                     OR   A   
1917   ED 52                  SBC   HL,DE   
1919   7D                     LD   A,L   
191A   B4                     OR   H   
191B   28 50                  JR   Z,expectM_0_2136S43   
191D   CD 6E 09               CALL   printStr   
1920   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
192C   CD 6E 09               CALL   printStr   
192F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
193E   21 02 00               LD   HL,2   
1941   CD BC 08               CALL   prtdec   
1944   CD 6E 09               CALL   printStr   
1947   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1954   E1                     POP   hl   
1955   E5                     PUSH   hl   
1956   CD BC 08               CALL   prtdec   
1959   E1                     POP   hl   
195A   CD 6E 09               CALL   printStr   
195D   20 28 23 00            .CSTR   " (#"   
1961   CD 04 09               CALL   prthex   
1964   CD 6E 09               CALL   printStr   
1967   29 0D 0A 00            .CSTR   ")\r\n"   
196B   76                     HALT      
196C   00                     .CSTR      
196D                EXPECTM_0_2136S43:      
196D   E1                     POP   HL   
196E                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
196E   31 80 39               LD   SP,STACK   
1971   CD 75 09               CALL   init   
1974   CD B6 38               CALL   execStr   
1977   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1985                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1985   E1                     POP   HL   
1986   E5                     PUSH   HL   
1987   11 02 00               LD   DE,2   
198A   B7                     OR   A   
198B   ED 52                  SBC   HL,DE   
198D   7D                     LD   A,L   
198E   B4                     OR   H   
198F   28 58                  JR   Z,expectM_0_2137S43   
1991   CD 6E 09               CALL   printStr   
1994   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
19A8   CD 6E 09               CALL   printStr   
19AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19BA   21 02 00               LD   HL,2   
19BD   CD BC 08               CALL   prtdec   
19C0   CD 6E 09               CALL   printStr   
19C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19D0   E1                     POP   hl   
19D1   E5                     PUSH   hl   
19D2   CD BC 08               CALL   prtdec   
19D5   E1                     POP   hl   
19D6   CD 6E 09               CALL   printStr   
19D9   20 28 23 00            .CSTR   " (#"   
19DD   CD 04 09               CALL   prthex   
19E0   CD 6E 09               CALL   printStr   
19E3   29 0D 0A 00            .CSTR   ")\r\n"   
19E7   76                     HALT      
19E8   00                     .CSTR      
19E9                EXPECTM_0_2137S43:      
19E9   E1                     POP   HL   
19EA                          ;*Macro unroll:  test "7 3 / _", 1
19EA   31 80 39               LD   SP,STACK   
19ED   CD 75 09               CALL   init   
19F0   CD B6 38               CALL   execStr   
19F3   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
19FB                          ;*Macro unroll:  expect "7 3 / _",1
19FB   E1                     POP   HL   
19FC   E5                     PUSH   HL   
19FD   11 01 00               LD   DE,1   
1A00   B7                     OR   A   
1A01   ED 52                  SBC   HL,DE   
1A03   7D                     LD   A,L   
1A04   B4                     OR   H   
1A05   28 52                  JR   Z,expectM_0_2138S43   
1A07   CD 6E 09               CALL   printStr   
1A0A   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1A18   CD 6E 09               CALL   printStr   
1A1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A2A   21 01 00               LD   HL,1   
1A2D   CD BC 08               CALL   prtdec   
1A30   CD 6E 09               CALL   printStr   
1A33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A40   E1                     POP   hl   
1A41   E5                     PUSH   hl   
1A42   CD BC 08               CALL   prtdec   
1A45   E1                     POP   hl   
1A46   CD 6E 09               CALL   printStr   
1A49   20 28 23 00            .CSTR   " (#"   
1A4D   CD 04 09               CALL   prthex   
1A50   CD 6E 09               CALL   printStr   
1A53   29 0D 0A 00            .CSTR   ")\r\n"   
1A57   76                     HALT      
1A58   00                     .CSTR      
1A59                EXPECTM_0_2138S43:      
1A59   E1                     POP   HL   
1A5A                          ;*Macro unroll:  test "7 3 /", 2
1A5A   31 80 39               LD   SP,STACK   
1A5D   CD 75 09               CALL   init   
1A60   CD B6 38               CALL   execStr   
1A63   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1A69                          ;*Macro unroll:  expect "7 3 /",2
1A69   E1                     POP   HL   
1A6A   E5                     PUSH   HL   
1A6B   11 02 00               LD   DE,2   
1A6E   B7                     OR   A   
1A6F   ED 52                  SBC   HL,DE   
1A71   7D                     LD   A,L   
1A72   B4                     OR   H   
1A73   28 50                  JR   Z,expectM_0_2139S43   
1A75   CD 6E 09               CALL   printStr   
1A78   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1A84   CD 6E 09               CALL   printStr   
1A87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A96   21 02 00               LD   HL,2   
1A99   CD BC 08               CALL   prtdec   
1A9C   CD 6E 09               CALL   printStr   
1A9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AAC   E1                     POP   hl   
1AAD   E5                     PUSH   hl   
1AAE   CD BC 08               CALL   prtdec   
1AB1   E1                     POP   hl   
1AB2   CD 6E 09               CALL   printStr   
1AB5   20 28 23 00            .CSTR   " (#"   
1AB9   CD 04 09               CALL   prthex   
1ABC   CD 6E 09               CALL   printStr   
1ABF   29 0D 0A 00            .CSTR   ")\r\n"   
1AC3   76                     HALT      
1AC4   00                     .CSTR      
1AC5                EXPECTM_0_2139S43:      
1AC5   E1                     POP   HL   
1AC6                          ;*Macro unroll:  test "2 3 ==", FALSE
1AC6   31 80 39               LD   SP,STACK   
1AC9   CD 75 09               CALL   init   
1ACC   CD B6 38               CALL   execStr   
1ACF   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1AD6                          ;*Macro unroll:  expect "2 3 ==",FALSE
1AD6   E1                     POP   HL   
1AD7   E5                     PUSH   HL   
1AD8   11 00 00               LD   DE,FALSE   
1ADB   B7                     OR   A   
1ADC   ED 52                  SBC   HL,DE   
1ADE   7D                     LD   A,L   
1ADF   B4                     OR   H   
1AE0   28 51                  JR   Z,expectM_0_2140S43   
1AE2   CD 6E 09               CALL   printStr   
1AE5   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1AF2   CD 6E 09               CALL   printStr   
1AF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B04   21 00 00               LD   HL,FALSE   
1B07   CD BC 08               CALL   prtdec   
1B0A   CD 6E 09               CALL   printStr   
1B0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B1A   E1                     POP   hl   
1B1B   E5                     PUSH   hl   
1B1C   CD BC 08               CALL   prtdec   
1B1F   E1                     POP   hl   
1B20   CD 6E 09               CALL   printStr   
1B23   20 28 23 00            .CSTR   " (#"   
1B27   CD 04 09               CALL   prthex   
1B2A   CD 6E 09               CALL   printStr   
1B2D   29 0D 0A 00            .CSTR   ")\r\n"   
1B31   76                     HALT      
1B32   00                     .CSTR      
1B33                EXPECTM_0_2140S43:      
1B33   E1                     POP   HL   
1B34                          ;*Macro unroll:  test "3 3 ==", TRUE
1B34   31 80 39               LD   SP,STACK   
1B37   CD 75 09               CALL   init   
1B3A   CD B6 38               CALL   execStr   
1B3D   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1B44                          ;*Macro unroll:  expect "3 3 ==",TRUE
1B44   E1                     POP   HL   
1B45   E5                     PUSH   HL   
1B46   11 FF FF               LD   DE,TRUE   
1B49   B7                     OR   A   
1B4A   ED 52                  SBC   HL,DE   
1B4C   7D                     LD   A,L   
1B4D   B4                     OR   H   
1B4E   28 51                  JR   Z,expectM_0_2141S43   
1B50   CD 6E 09               CALL   printStr   
1B53   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1B60   CD 6E 09               CALL   printStr   
1B63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B72   21 FF FF               LD   HL,TRUE   
1B75   CD BC 08               CALL   prtdec   
1B78   CD 6E 09               CALL   printStr   
1B7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B88   E1                     POP   hl   
1B89   E5                     PUSH   hl   
1B8A   CD BC 08               CALL   prtdec   
1B8D   E1                     POP   hl   
1B8E   CD 6E 09               CALL   printStr   
1B91   20 28 23 00            .CSTR   " (#"   
1B95   CD 04 09               CALL   prthex   
1B98   CD 6E 09               CALL   printStr   
1B9B   29 0D 0A 00            .CSTR   ")\r\n"   
1B9F   76                     HALT      
1BA0   00                     .CSTR      
1BA1                EXPECTM_0_2141S43:      
1BA1   E1                     POP   HL   
1BA2                          ;*Macro unroll:  test "1 2 <", TRUE
1BA2   31 80 39               LD   SP,STACK   
1BA5   CD 75 09               CALL   init   
1BA8   CD B6 38               CALL   execStr   
1BAB   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1BB1                          ;*Macro unroll:  expect "1 2 <",TRUE
1BB1   E1                     POP   HL   
1BB2   E5                     PUSH   HL   
1BB3   11 FF FF               LD   DE,TRUE   
1BB6   B7                     OR   A   
1BB7   ED 52                  SBC   HL,DE   
1BB9   7D                     LD   A,L   
1BBA   B4                     OR   H   
1BBB   28 50                  JR   Z,expectM_0_2142S43   
1BBD   CD 6E 09               CALL   printStr   
1BC0   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1BCC   CD 6E 09               CALL   printStr   
1BCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BDE   21 FF FF               LD   HL,TRUE   
1BE1   CD BC 08               CALL   prtdec   
1BE4   CD 6E 09               CALL   printStr   
1BE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BF4   E1                     POP   hl   
1BF5   E5                     PUSH   hl   
1BF6   CD BC 08               CALL   prtdec   
1BF9   E1                     POP   hl   
1BFA   CD 6E 09               CALL   printStr   
1BFD   20 28 23 00            .CSTR   " (#"   
1C01   CD 04 09               CALL   prthex   
1C04   CD 6E 09               CALL   printStr   
1C07   29 0D 0A 00            .CSTR   ")\r\n"   
1C0B   76                     HALT      
1C0C   00                     .CSTR      
1C0D                EXPECTM_0_2142S43:      
1C0D   E1                     POP   HL   
1C0E                          ;*Macro unroll:  test "2 1 <", FALSE
1C0E   31 80 39               LD   SP,STACK   
1C11   CD 75 09               CALL   init   
1C14   CD B6 38               CALL   execStr   
1C17   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1C1D                          ;*Macro unroll:  expect "2 1 <",FALSE
1C1D   E1                     POP   HL   
1C1E   E5                     PUSH   HL   
1C1F   11 00 00               LD   DE,FALSE   
1C22   B7                     OR   A   
1C23   ED 52                  SBC   HL,DE   
1C25   7D                     LD   A,L   
1C26   B4                     OR   H   
1C27   28 50                  JR   Z,expectM_0_2143S43   
1C29   CD 6E 09               CALL   printStr   
1C2C   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1C38   CD 6E 09               CALL   printStr   
1C3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C4A   21 00 00               LD   HL,FALSE   
1C4D   CD BC 08               CALL   prtdec   
1C50   CD 6E 09               CALL   printStr   
1C53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C60   E1                     POP   hl   
1C61   E5                     PUSH   hl   
1C62   CD BC 08               CALL   prtdec   
1C65   E1                     POP   hl   
1C66   CD 6E 09               CALL   printStr   
1C69   20 28 23 00            .CSTR   " (#"   
1C6D   CD 04 09               CALL   prthex   
1C70   CD 6E 09               CALL   printStr   
1C73   29 0D 0A 00            .CSTR   ")\r\n"   
1C77   76                     HALT      
1C78   00                     .CSTR      
1C79                EXPECTM_0_2143S43:      
1C79   E1                     POP   HL   
1C7A                          ;*Macro unroll:  test "2 3 <", TRUE
1C7A   31 80 39               LD   SP,STACK   
1C7D   CD 75 09               CALL   init   
1C80   CD B6 38               CALL   execStr   
1C83   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1C89                          ;*Macro unroll:  expect "2 3 <",TRUE
1C89   E1                     POP   HL   
1C8A   E5                     PUSH   HL   
1C8B   11 FF FF               LD   DE,TRUE   
1C8E   B7                     OR   A   
1C8F   ED 52                  SBC   HL,DE   
1C91   7D                     LD   A,L   
1C92   B4                     OR   H   
1C93   28 50                  JR   Z,expectM_0_2144S43   
1C95   CD 6E 09               CALL   printStr   
1C98   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1CA4   CD 6E 09               CALL   printStr   
1CA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CB6   21 FF FF               LD   HL,TRUE   
1CB9   CD BC 08               CALL   prtdec   
1CBC   CD 6E 09               CALL   printStr   
1CBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CCC   E1                     POP   hl   
1CCD   E5                     PUSH   hl   
1CCE   CD BC 08               CALL   prtdec   
1CD1   E1                     POP   hl   
1CD2   CD 6E 09               CALL   printStr   
1CD5   20 28 23 00            .CSTR   " (#"   
1CD9   CD 04 09               CALL   prthex   
1CDC   CD 6E 09               CALL   printStr   
1CDF   29 0D 0A 00            .CSTR   ")\r\n"   
1CE3   76                     HALT      
1CE4   00                     .CSTR      
1CE5                EXPECTM_0_2144S43:      
1CE5   E1                     POP   HL   
1CE6                          ;*Macro unroll:  test "3 3 <", FALSE
1CE6   31 80 39               LD   SP,STACK   
1CE9   CD 75 09               CALL   init   
1CEC   CD B6 38               CALL   execStr   
1CEF   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1CF5                          ;*Macro unroll:  expect "3 3 <",FALSE
1CF5   E1                     POP   HL   
1CF6   E5                     PUSH   HL   
1CF7   11 00 00               LD   DE,FALSE   
1CFA   B7                     OR   A   
1CFB   ED 52                  SBC   HL,DE   
1CFD   7D                     LD   A,L   
1CFE   B4                     OR   H   
1CFF   28 50                  JR   Z,expectM_0_2145S43   
1D01   CD 6E 09               CALL   printStr   
1D04   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1D10   CD 6E 09               CALL   printStr   
1D13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D22   21 00 00               LD   HL,FALSE   
1D25   CD BC 08               CALL   prtdec   
1D28   CD 6E 09               CALL   printStr   
1D2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D38   E1                     POP   hl   
1D39   E5                     PUSH   hl   
1D3A   CD BC 08               CALL   prtdec   
1D3D   E1                     POP   hl   
1D3E   CD 6E 09               CALL   printStr   
1D41   20 28 23 00            .CSTR   " (#"   
1D45   CD 04 09               CALL   prthex   
1D48   CD 6E 09               CALL   printStr   
1D4B   29 0D 0A 00            .CSTR   ")\r\n"   
1D4F   76                     HALT      
1D50   00                     .CSTR      
1D51                EXPECTM_0_2145S43:      
1D51   E1                     POP   HL   
1D52                          ;*Macro unroll:  test "1 2 >", FALSE
1D52   31 80 39               LD   SP,STACK   
1D55   CD 75 09               CALL   init   
1D58   CD B6 38               CALL   execStr   
1D5B   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1D61                          ;*Macro unroll:  expect "1 2 >",FALSE
1D61   E1                     POP   HL   
1D62   E5                     PUSH   HL   
1D63   11 00 00               LD   DE,FALSE   
1D66   B7                     OR   A   
1D67   ED 52                  SBC   HL,DE   
1D69   7D                     LD   A,L   
1D6A   B4                     OR   H   
1D6B   28 50                  JR   Z,expectM_0_2146S43   
1D6D   CD 6E 09               CALL   printStr   
1D70   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1D7C   CD 6E 09               CALL   printStr   
1D7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D8E   21 00 00               LD   HL,FALSE   
1D91   CD BC 08               CALL   prtdec   
1D94   CD 6E 09               CALL   printStr   
1D97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DA4   E1                     POP   hl   
1DA5   E5                     PUSH   hl   
1DA6   CD BC 08               CALL   prtdec   
1DA9   E1                     POP   hl   
1DAA   CD 6E 09               CALL   printStr   
1DAD   20 28 23 00            .CSTR   " (#"   
1DB1   CD 04 09               CALL   prthex   
1DB4   CD 6E 09               CALL   printStr   
1DB7   29 0D 0A 00            .CSTR   ")\r\n"   
1DBB   76                     HALT      
1DBC   00                     .CSTR      
1DBD                EXPECTM_0_2146S43:      
1DBD   E1                     POP   HL   
1DBE                          ;*Macro unroll:  test "2 1 >", TRUE
1DBE   31 80 39               LD   SP,STACK   
1DC1   CD 75 09               CALL   init   
1DC4   CD B6 38               CALL   execStr   
1DC7   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1DCD                          ;*Macro unroll:  expect "2 1 >",TRUE
1DCD   E1                     POP   HL   
1DCE   E5                     PUSH   HL   
1DCF   11 FF FF               LD   DE,TRUE   
1DD2   B7                     OR   A   
1DD3   ED 52                  SBC   HL,DE   
1DD5   7D                     LD   A,L   
1DD6   B4                     OR   H   
1DD7   28 50                  JR   Z,expectM_0_2147S43   
1DD9   CD 6E 09               CALL   printStr   
1DDC   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1DE8   CD 6E 09               CALL   printStr   
1DEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DFA   21 FF FF               LD   HL,TRUE   
1DFD   CD BC 08               CALL   prtdec   
1E00   CD 6E 09               CALL   printStr   
1E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E10   E1                     POP   hl   
1E11   E5                     PUSH   hl   
1E12   CD BC 08               CALL   prtdec   
1E15   E1                     POP   hl   
1E16   CD 6E 09               CALL   printStr   
1E19   20 28 23 00            .CSTR   " (#"   
1E1D   CD 04 09               CALL   prthex   
1E20   CD 6E 09               CALL   printStr   
1E23   29 0D 0A 00            .CSTR   ")\r\n"   
1E27   76                     HALT      
1E28   00                     .CSTR      
1E29                EXPECTM_0_2147S43:      
1E29   E1                     POP   HL   
1E2A                          ;*Macro unroll:  test "3 3 >", FALSE
1E2A   31 80 39               LD   SP,STACK   
1E2D   CD 75 09               CALL   init   
1E30   CD B6 38               CALL   execStr   
1E33   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1E39                          ;*Macro unroll:  expect "3 3 >",FALSE
1E39   E1                     POP   HL   
1E3A   E5                     PUSH   HL   
1E3B   11 00 00               LD   DE,FALSE   
1E3E   B7                     OR   A   
1E3F   ED 52                  SBC   HL,DE   
1E41   7D                     LD   A,L   
1E42   B4                     OR   H   
1E43   28 50                  JR   Z,expectM_0_2148S43   
1E45   CD 6E 09               CALL   printStr   
1E48   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1E54   CD 6E 09               CALL   printStr   
1E57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E66   21 00 00               LD   HL,FALSE   
1E69   CD BC 08               CALL   prtdec   
1E6C   CD 6E 09               CALL   printStr   
1E6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7C   E1                     POP   hl   
1E7D   E5                     PUSH   hl   
1E7E   CD BC 08               CALL   prtdec   
1E81   E1                     POP   hl   
1E82   CD 6E 09               CALL   printStr   
1E85   20 28 23 00            .CSTR   " (#"   
1E89   CD 04 09               CALL   prthex   
1E8C   CD 6E 09               CALL   printStr   
1E8F   29 0D 0A 00            .CSTR   ")\r\n"   
1E93   76                     HALT      
1E94   00                     .CSTR      
1E95                EXPECTM_0_2148S43:      
1E95   E1                     POP   HL   
1E96                          ;*Macro unroll:  test "4 3 >", TRUE
1E96   31 80 39               LD   SP,STACK   
1E99   CD 75 09               CALL   init   
1E9C   CD B6 38               CALL   execStr   
1E9F   34 20 33 20 3E 00      .CSTR   "4 3 >"   
1EA5                          ;*Macro unroll:  expect "4 3 >",TRUE
1EA5   E1                     POP   HL   
1EA6   E5                     PUSH   HL   
1EA7   11 FF FF               LD   DE,TRUE   
1EAA   B7                     OR   A   
1EAB   ED 52                  SBC   HL,DE   
1EAD   7D                     LD   A,L   
1EAE   B4                     OR   H   
1EAF   28 50                  JR   Z,expectM_0_2149S43   
1EB1   CD 6E 09               CALL   printStr   
1EB4   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1EC0   CD 6E 09               CALL   printStr   
1EC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED2   21 FF FF               LD   HL,TRUE   
1ED5   CD BC 08               CALL   prtdec   
1ED8   CD 6E 09               CALL   printStr   
1EDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EE8   E1                     POP   hl   
1EE9   E5                     PUSH   hl   
1EEA   CD BC 08               CALL   prtdec   
1EED   E1                     POP   hl   
1EEE   CD 6E 09               CALL   printStr   
1EF1   20 28 23 00            .CSTR   " (#"   
1EF5   CD 04 09               CALL   prthex   
1EF8   CD 6E 09               CALL   printStr   
1EFB   29 0D 0A 00            .CSTR   ")\r\n"   
1EFF   76                     HALT      
1F00   00                     .CSTR      
1F01                EXPECTM_0_2149S43:      
1F01   E1                     POP   HL   
1F02                          ;*Macro unroll:  test "2 2 <=", TRUE
1F02   31 80 39               LD   SP,STACK   
1F05   CD 75 09               CALL   init   
1F08   CD B6 38               CALL   execStr   
1F0B   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
1F12                          ;*Macro unroll:  expect "2 2 <=",TRUE
1F12   E1                     POP   HL   
1F13   E5                     PUSH   HL   
1F14   11 FF FF               LD   DE,TRUE   
1F17   B7                     OR   A   
1F18   ED 52                  SBC   HL,DE   
1F1A   7D                     LD   A,L   
1F1B   B4                     OR   H   
1F1C   28 51                  JR   Z,expectM_0_2150S43   
1F1E   CD 6E 09               CALL   printStr   
1F21   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
1F2E   CD 6E 09               CALL   printStr   
1F31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F40   21 FF FF               LD   HL,TRUE   
1F43   CD BC 08               CALL   prtdec   
1F46   CD 6E 09               CALL   printStr   
1F49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F56   E1                     POP   hl   
1F57   E5                     PUSH   hl   
1F58   CD BC 08               CALL   prtdec   
1F5B   E1                     POP   hl   
1F5C   CD 6E 09               CALL   printStr   
1F5F   20 28 23 00            .CSTR   " (#"   
1F63   CD 04 09               CALL   prthex   
1F66   CD 6E 09               CALL   printStr   
1F69   29 0D 0A 00            .CSTR   ")\r\n"   
1F6D   76                     HALT      
1F6E   00                     .CSTR      
1F6F                EXPECTM_0_2150S43:      
1F6F   E1                     POP   HL   
1F70                          ;*Macro unroll:  test "2 2 >=", TRUE
1F70   31 80 39               LD   SP,STACK   
1F73   CD 75 09               CALL   init   
1F76   CD B6 38               CALL   execStr   
1F79   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
1F80                          ;*Macro unroll:  expect "2 2 >=",TRUE
1F80   E1                     POP   HL   
1F81   E5                     PUSH   HL   
1F82   11 FF FF               LD   DE,TRUE   
1F85   B7                     OR   A   
1F86   ED 52                  SBC   HL,DE   
1F88   7D                     LD   A,L   
1F89   B4                     OR   H   
1F8A   28 51                  JR   Z,expectM_0_2151S43   
1F8C   CD 6E 09               CALL   printStr   
1F8F   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
1F9C   CD 6E 09               CALL   printStr   
1F9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FAE   21 FF FF               LD   HL,TRUE   
1FB1   CD BC 08               CALL   prtdec   
1FB4   CD 6E 09               CALL   printStr   
1FB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FC4   E1                     POP   hl   
1FC5   E5                     PUSH   hl   
1FC6   CD BC 08               CALL   prtdec   
1FC9   E1                     POP   hl   
1FCA   CD 6E 09               CALL   printStr   
1FCD   20 28 23 00            .CSTR   " (#"   
1FD1   CD 04 09               CALL   prthex   
1FD4   CD 6E 09               CALL   printStr   
1FD7   29 0D 0A 00            .CSTR   ")\r\n"   
1FDB   76                     HALT      
1FDC   00                     .CSTR      
1FDD                EXPECTM_0_2151S43:      
1FDD   E1                     POP   HL   
1FDE                          ;*Macro unroll:  test "3 1 <<", 6
1FDE   31 80 39               LD   SP,STACK   
1FE1   CD 75 09               CALL   init   
1FE4   CD B6 38               CALL   execStr   
1FE7   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
1FEE                          ;*Macro unroll:  expect "3 1 <<",6
1FEE   E1                     POP   HL   
1FEF   E5                     PUSH   HL   
1FF0   11 06 00               LD   DE,6   
1FF3   B7                     OR   A   
1FF4   ED 52                  SBC   HL,DE   
1FF6   7D                     LD   A,L   
1FF7   B4                     OR   H   
1FF8   28 51                  JR   Z,expectM_0_2152S43   
1FFA   CD 6E 09               CALL   printStr   
1FFD   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
200A   CD 6E 09               CALL   printStr   
200D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
201C   21 06 00               LD   HL,6   
201F   CD BC 08               CALL   prtdec   
2022   CD 6E 09               CALL   printStr   
2025   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2032   E1                     POP   hl   
2033   E5                     PUSH   hl   
2034   CD BC 08               CALL   prtdec   
2037   E1                     POP   hl   
2038   CD 6E 09               CALL   printStr   
203B   20 28 23 00            .CSTR   " (#"   
203F   CD 04 09               CALL   prthex   
2042   CD 6E 09               CALL   printStr   
2045   29 0D 0A 00            .CSTR   ")\r\n"   
2049   76                     HALT      
204A   00                     .CSTR      
204B                EXPECTM_0_2152S43:      
204B   E1                     POP   HL   
204C                          ;*Macro unroll:  test "10 1 >>", 5
204C   31 80 39               LD   SP,STACK   
204F   CD 75 09               CALL   init   
2052   CD B6 38               CALL   execStr   
2055   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
205D                          ;*Macro unroll:  expect "10 1 >>",5
205D   E1                     POP   HL   
205E   E5                     PUSH   HL   
205F   11 05 00               LD   DE,5   
2062   B7                     OR   A   
2063   ED 52                  SBC   HL,DE   
2065   7D                     LD   A,L   
2066   B4                     OR   H   
2067   28 52                  JR   Z,expectM_0_2153S43   
2069   CD 6E 09               CALL   printStr   
206C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
207A   CD 6E 09               CALL   printStr   
207D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
208C   21 05 00               LD   HL,5   
208F   CD BC 08               CALL   prtdec   
2092   CD 6E 09               CALL   printStr   
2095   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A2   E1                     POP   hl   
20A3   E5                     PUSH   hl   
20A4   CD BC 08               CALL   prtdec   
20A7   E1                     POP   hl   
20A8   CD 6E 09               CALL   printStr   
20AB   20 28 23 00            .CSTR   " (#"   
20AF   CD 04 09               CALL   prthex   
20B2   CD 6E 09               CALL   printStr   
20B5   29 0D 0A 00            .CSTR   ")\r\n"   
20B9   76                     HALT      
20BA   00                     .CSTR      
20BB                EXPECTM_0_2153S43:      
20BB   E1                     POP   HL   
20BC                          ;*Macro unroll:  test "1 x = x", 1
20BC   31 80 39               LD   SP,STACK   
20BF   CD 75 09               CALL   init   
20C2   CD B6 38               CALL   execStr   
20C5   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
20CD                          ;*Macro unroll:  expect "1 x = x",1
20CD   E1                     POP   HL   
20CE   E5                     PUSH   HL   
20CF   11 01 00               LD   DE,1   
20D2   B7                     OR   A   
20D3   ED 52                  SBC   HL,DE   
20D5   7D                     LD   A,L   
20D6   B4                     OR   H   
20D7   28 52                  JR   Z,expectM_0_2154S43   
20D9   CD 6E 09               CALL   printStr   
20DC   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
20EA   CD 6E 09               CALL   printStr   
20ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20FC   21 01 00               LD   HL,1   
20FF   CD BC 08               CALL   prtdec   
2102   CD 6E 09               CALL   printStr   
2105   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2112   E1                     POP   hl   
2113   E5                     PUSH   hl   
2114   CD BC 08               CALL   prtdec   
2117   E1                     POP   hl   
2118   CD 6E 09               CALL   printStr   
211B   20 28 23 00            .CSTR   " (#"   
211F   CD 04 09               CALL   prthex   
2122   CD 6E 09               CALL   printStr   
2125   29 0D 0A 00            .CSTR   ")\r\n"   
2129   76                     HALT      
212A   00                     .CSTR      
212B                EXPECTM_0_2154S43:      
212B   E1                     POP   HL   
212C                          ;*Macro unroll:  test "1{}:", 1
212C   31 80 39               LD   SP,STACK   
212F   CD 75 09               CALL   init   
2132   CD B6 38               CALL   execStr   
2135   31 7B 7D 3A 00         .CSTR   "1{}:"   
213A                          ;*Macro unroll:  expect "1{}:",1
213A   E1                     POP   HL   
213B   E5                     PUSH   HL   
213C   11 01 00               LD   DE,1   
213F   B7                     OR   A   
2140   ED 52                  SBC   HL,DE   
2142   7D                     LD   A,L   
2143   B4                     OR   H   
2144   28 4F                  JR   Z,expectM_0_2155S43   
2146   CD 6E 09               CALL   printStr   
2149   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
2154   CD 6E 09               CALL   printStr   
2157   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2166   21 01 00               LD   HL,1   
2169   CD BC 08               CALL   prtdec   
216C   CD 6E 09               CALL   printStr   
216F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
217C   E1                     POP   hl   
217D   E5                     PUSH   hl   
217E   CD BC 08               CALL   prtdec   
2181   E1                     POP   hl   
2182   CD 6E 09               CALL   printStr   
2185   20 28 23 00            .CSTR   " (#"   
2189   CD 04 09               CALL   prthex   
218C   CD 6E 09               CALL   printStr   
218F   29 0D 0A 00            .CSTR   ")\r\n"   
2193   76                     HALT      
2194   00                     .CSTR      
2195                EXPECTM_0_2155S43:      
2195   E1                     POP   HL   
2196                          ;*Macro unroll:  test "{1}:", 1
2196   31 80 39               LD   SP,STACK   
2199   CD 75 09               CALL   init   
219C   CD B6 38               CALL   execStr   
219F   7B 31 7D 3A 00         .CSTR   "{1}:"   
21A4                          ;*Macro unroll:  expect "{1}:",1
21A4   E1                     POP   HL   
21A5   E5                     PUSH   HL   
21A6   11 01 00               LD   DE,1   
21A9   B7                     OR   A   
21AA   ED 52                  SBC   HL,DE   
21AC   7D                     LD   A,L   
21AD   B4                     OR   H   
21AE   28 4F                  JR   Z,expectM_0_2156S43   
21B0   CD 6E 09               CALL   printStr   
21B3   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
21BE   CD 6E 09               CALL   printStr   
21C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21D0   21 01 00               LD   HL,1   
21D3   CD BC 08               CALL   prtdec   
21D6   CD 6E 09               CALL   printStr   
21D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E6   E1                     POP   hl   
21E7   E5                     PUSH   hl   
21E8   CD BC 08               CALL   prtdec   
21EB   E1                     POP   hl   
21EC   CD 6E 09               CALL   printStr   
21EF   20 28 23 00            .CSTR   " (#"   
21F3   CD 04 09               CALL   prthex   
21F6   CD 6E 09               CALL   printStr   
21F9   29 0D 0A 00            .CSTR   ")\r\n"   
21FD   76                     HALT      
21FE   00                     .CSTR      
21FF                EXPECTM_0_2156S43:      
21FF   E1                     POP   HL   
2200                          ;*Macro unroll:  test "{{1}:}:", 1
2200   31 80 39               LD   SP,STACK   
2203   CD 75 09               CALL   init   
2206   CD B6 38               CALL   execStr   
2209   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
2211                          ;*Macro unroll:  expect "{{1}:}:",1
2211   E1                     POP   HL   
2212   E5                     PUSH   HL   
2213   11 01 00               LD   DE,1   
2216   B7                     OR   A   
2217   ED 52                  SBC   HL,DE   
2219   7D                     LD   A,L   
221A   B4                     OR   H   
221B   28 52                  JR   Z,expectM_0_2157S43   
221D   CD 6E 09               CALL   printStr   
2220   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
222E   CD 6E 09               CALL   printStr   
2231   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2240   21 01 00               LD   HL,1   
2243   CD BC 08               CALL   prtdec   
2246   CD 6E 09               CALL   printStr   
2249   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2256   E1                     POP   hl   
2257   E5                     PUSH   hl   
2258   CD BC 08               CALL   prtdec   
225B   E1                     POP   hl   
225C   CD 6E 09               CALL   printStr   
225F   20 28 23 00            .CSTR   " (#"   
2263   CD 04 09               CALL   prthex   
2266   CD 6E 09               CALL   printStr   
2269   29 0D 0A 00            .CSTR   ")\r\n"   
226D   76                     HALT      
226E   00                     .CSTR      
226F                EXPECTM_0_2157S43:      
226F   E1                     POP   HL   
2270                          ;*Macro unroll:  test "{{{1}:}:}:", 1
2270   31 80 39               LD   SP,STACK   
2273   CD 75 09               CALL   init   
2276   CD B6 38               CALL   execStr   
2279   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
2284                          ;*Macro unroll:  expect "{{{1}:}:}:",1
2284   E1                     POP   HL   
2285   E5                     PUSH   HL   
2286   11 01 00               LD   DE,1   
2289   B7                     OR   A   
228A   ED 52                  SBC   HL,DE   
228C   7D                     LD   A,L   
228D   B4                     OR   H   
228E   28 55                  JR   Z,expectM_0_2158S43   
2290   CD 6E 09               CALL   printStr   
2293   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
22A4   CD 6E 09               CALL   printStr   
22A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22B6   21 01 00               LD   HL,1   
22B9   CD BC 08               CALL   prtdec   
22BC   CD 6E 09               CALL   printStr   
22BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22CC   E1                     POP   hl   
22CD   E5                     PUSH   hl   
22CE   CD BC 08               CALL   prtdec   
22D1   E1                     POP   hl   
22D2   CD 6E 09               CALL   printStr   
22D5   20 28 23 00            .CSTR   " (#"   
22D9   CD 04 09               CALL   prthex   
22DC   CD 6E 09               CALL   printStr   
22DF   29 0D 0A 00            .CSTR   ")\r\n"   
22E3   76                     HALT      
22E4   00                     .CSTR      
22E5                EXPECTM_0_2158S43:      
22E5   E1                     POP   HL   
22E6                          ;*Macro unroll:  test "5 \\F {10} ?", 5
22E6   31 80 39               LD   SP,STACK   
22E9   CD 75 09               CALL   init   
22EC   CD B6 38               CALL   execStr   
22EF   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
22FB                          ;*Macro unroll:  expect "5 \\F {10} ?",5
22FB   E1                     POP   HL   
22FC   E5                     PUSH   HL   
22FD   11 05 00               LD   DE,5   
2300   B7                     OR   A   
2301   ED 52                  SBC   HL,DE   
2303   7D                     LD   A,L   
2304   B4                     OR   H   
2305   28 56                  JR   Z,expectM_0_2159S43   
2307   CD 6E 09               CALL   printStr   
230A   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
231C   CD 6E 09               CALL   printStr   
231F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
232E   21 05 00               LD   HL,5   
2331   CD BC 08               CALL   prtdec   
2334   CD 6E 09               CALL   printStr   
2337   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2344   E1                     POP   hl   
2345   E5                     PUSH   hl   
2346   CD BC 08               CALL   prtdec   
2349   E1                     POP   hl   
234A   CD 6E 09               CALL   printStr   
234D   20 28 23 00            .CSTR   " (#"   
2351   CD 04 09               CALL   prthex   
2354   CD 6E 09               CALL   printStr   
2357   29 0D 0A 00            .CSTR   ")\r\n"   
235B   76                     HALT      
235C   00                     .CSTR      
235D                EXPECTM_0_2159S43:      
235D   E1                     POP   HL   
235E                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
235E   31 80 39               LD   SP,STACK   
2361   CD 75 09               CALL   init   
2364   CD B6 38               CALL   execStr   
2367   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
2375                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
2375   E1                     POP   HL   
2376   E5                     PUSH   HL   
2377   11 0F 00               LD   DE,15   
237A   B7                     OR   A   
237B   ED 52                  SBC   HL,DE   
237D   7D                     LD   A,L   
237E   B4                     OR   H   
237F   28 58                  JR   Z,expectM_0_2160S43   
2381   CD 6E 09               CALL   printStr   
2384   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
2398   CD 6E 09               CALL   printStr   
239B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23AA   21 0F 00               LD   HL,15   
23AD   CD BC 08               CALL   prtdec   
23B0   CD 6E 09               CALL   printStr   
23B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23C0   E1                     POP   hl   
23C1   E5                     PUSH   hl   
23C2   CD BC 08               CALL   prtdec   
23C5   E1                     POP   hl   
23C6   CD 6E 09               CALL   printStr   
23C9   20 28 23 00            .CSTR   " (#"   
23CD   CD 04 09               CALL   prthex   
23D0   CD 6E 09               CALL   printStr   
23D3   29 0D 0A 00            .CSTR   ")\r\n"   
23D7   76                     HALT      
23D8   00                     .CSTR      
23D9                EXPECTM_0_2160S43:      
23D9   E1                     POP   HL   
23DA                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
23DA   31 80 39               LD   SP,STACK   
23DD   CD 75 09               CALL   init   
23E0   CD B6 38               CALL   execStr   
23E3   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
23F7                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
23F7   E1                     POP   HL   
23F8   E5                     PUSH   HL   
23F9   11 15 00               LD   DE,21   
23FC   B7                     OR   A   
23FD   ED 52                  SBC   HL,DE   
23FF   7D                     LD   A,L   
2400   B4                     OR   H   
2401   28 5E                  JR   Z,expectM_0_2161S43   
2403   CD 6E 09               CALL   printStr   
2406   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
2420   CD 6E 09               CALL   printStr   
2423   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2432   21 15 00               LD   HL,21   
2435   CD BC 08               CALL   prtdec   
2438   CD 6E 09               CALL   printStr   
243B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2448   E1                     POP   hl   
2449   E5                     PUSH   hl   
244A   CD BC 08               CALL   prtdec   
244D   E1                     POP   hl   
244E   CD 6E 09               CALL   printStr   
2451   20 28 23 00            .CSTR   " (#"   
2455   CD 04 09               CALL   prthex   
2458   CD 6E 09               CALL   printStr   
245B   29 0D 0A 00            .CSTR   ")\r\n"   
245F   76                     HALT      
2460   00                     .CSTR      
2461                EXPECTM_0_2161S43:      
2461   E1                     POP   HL   
2462                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
2462   31 80 39               LD   SP,STACK   
2465   CD 75 09               CALL   init   
2468   CD B6 38               CALL   execStr   
246B   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
247F                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
247F   E1                     POP   HL   
2480   E5                     PUSH   HL   
2481   11 0B 00               LD   DE,11   
2484   B7                     OR   A   
2485   ED 52                  SBC   HL,DE   
2487   7D                     LD   A,L   
2488   B4                     OR   H   
2489   28 5E                  JR   Z,expectM_0_2162S43   
248B   CD 6E 09               CALL   printStr   
248E   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
24A8   CD 6E 09               CALL   printStr   
24AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BA   21 0B 00               LD   HL,11   
24BD   CD BC 08               CALL   prtdec   
24C0   CD 6E 09               CALL   printStr   
24C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D0   E1                     POP   hl   
24D1   E5                     PUSH   hl   
24D2   CD BC 08               CALL   prtdec   
24D5   E1                     POP   hl   
24D6   CD 6E 09               CALL   printStr   
24D9   20 28 23 00            .CSTR   " (#"   
24DD   CD 04 09               CALL   prthex   
24E0   CD 6E 09               CALL   printStr   
24E3   29 0D 0A 00            .CSTR   ")\r\n"   
24E7   76                     HALT      
24E8   00                     .CSTR      
24E9                EXPECTM_0_2162S43:      
24E9   E1                     POP   HL   
24EA                          ;*Macro unroll:  test "() -2%", $0000
24EA   31 80 39               LD   SP,STACK   
24ED   CD 75 09               CALL   init   
24F0   CD B6 38               CALL   execStr   
24F3   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
24FA                          ;*Macro unroll:  expect "() -2%",$0000
24FA   E1                     POP   HL   
24FB   E5                     PUSH   HL   
24FC   11 00 00               LD   DE,$0000   
24FF   B7                     OR   A   
2500   ED 52                  SBC   HL,DE   
2502   7D                     LD   A,L   
2503   B4                     OR   H   
2504   28 51                  JR   Z,expectM_0_2163S43   
2506   CD 6E 09               CALL   printStr   
2509   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
2516   CD 6E 09               CALL   printStr   
2519   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2528   21 00 00               LD   HL,$0000   
252B   CD BC 08               CALL   prtdec   
252E   CD 6E 09               CALL   printStr   
2531   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
253E   E1                     POP   hl   
253F   E5                     PUSH   hl   
2540   CD BC 08               CALL   prtdec   
2543   E1                     POP   hl   
2544   CD 6E 09               CALL   printStr   
2547   20 28 23 00            .CSTR   " (#"   
254B   CD 04 09               CALL   prthex   
254E   CD 6E 09               CALL   printStr   
2551   29 0D 0A 00            .CSTR   ")\r\n"   
2555   76                     HALT      
2556   00                     .CSTR      
2557                EXPECTM_0_2163S43:      
2557   E1                     POP   HL   
2558                          ;*Macro unroll:  test "(a) -1%", $0001
2558   31 80 39               LD   SP,STACK   
255B   CD 75 09               CALL   init   
255E   CD B6 38               CALL   execStr   
2561   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
2569                          ;*Macro unroll:  expect "(a) -1%",$0001
2569   E1                     POP   HL   
256A   E5                     PUSH   HL   
256B   11 01 00               LD   DE,$0001   
256E   B7                     OR   A   
256F   ED 52                  SBC   HL,DE   
2571   7D                     LD   A,L   
2572   B4                     OR   H   
2573   28 52                  JR   Z,expectM_0_2164S43   
2575   CD 6E 09               CALL   printStr   
2578   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
2586   CD 6E 09               CALL   printStr   
2589   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2598   21 01 00               LD   HL,$0001   
259B   CD BC 08               CALL   prtdec   
259E   CD 6E 09               CALL   printStr   
25A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25AE   E1                     POP   hl   
25AF   E5                     PUSH   hl   
25B0   CD BC 08               CALL   prtdec   
25B3   E1                     POP   hl   
25B4   CD 6E 09               CALL   printStr   
25B7   20 28 23 00            .CSTR   " (#"   
25BB   CD 04 09               CALL   prthex   
25BE   CD 6E 09               CALL   printStr   
25C1   29 0D 0A 00            .CSTR   ")\r\n"   
25C5   76                     HALT      
25C6   00                     .CSTR      
25C7                EXPECTM_0_2164S43:      
25C7   E1                     POP   HL   
25C8                          ;*Macro unroll:  test "(a:) -1%", $0001
25C8   31 80 39               LD   SP,STACK   
25CB   CD 75 09               CALL   init   
25CE   CD B6 38               CALL   execStr   
25D1   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
25DA                          ;*Macro unroll:  expect "(a:) -1%",$0001
25DA   E1                     POP   HL   
25DB   E5                     PUSH   HL   
25DC   11 01 00               LD   DE,$0001   
25DF   B7                     OR   A   
25E0   ED 52                  SBC   HL,DE   
25E2   7D                     LD   A,L   
25E3   B4                     OR   H   
25E4   28 53                  JR   Z,expectM_0_2165S43   
25E6   CD 6E 09               CALL   printStr   
25E9   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
25F8   CD 6E 09               CALL   printStr   
25FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
260A   21 01 00               LD   HL,$0001   
260D   CD BC 08               CALL   prtdec   
2610   CD 6E 09               CALL   printStr   
2613   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2620   E1                     POP   hl   
2621   E5                     PUSH   hl   
2622   CD BC 08               CALL   prtdec   
2625   E1                     POP   hl   
2626   CD 6E 09               CALL   printStr   
2629   20 28 23 00            .CSTR   " (#"   
262D   CD 04 09               CALL   prthex   
2630   CD 6E 09               CALL   printStr   
2633   29 0D 0A 00            .CSTR   ")\r\n"   
2637   76                     HALT      
2638   00                     .CSTR      
2639                EXPECTM_0_2165S43:      
2639   E1                     POP   HL   
263A                          ;*Macro unroll:  test "(a:b) -1%", $0102
263A   31 80 39               LD   SP,STACK   
263D   CD 75 09               CALL   init   
2640   CD B6 38               CALL   execStr   
2643   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
264D                          ;*Macro unroll:  expect "(a:b) -1%",$0102
264D   E1                     POP   HL   
264E   E5                     PUSH   HL   
264F   11 02 01               LD   DE,$0102   
2652   B7                     OR   A   
2653   ED 52                  SBC   HL,DE   
2655   7D                     LD   A,L   
2656   B4                     OR   H   
2657   28 54                  JR   Z,expectM_0_2166S43   
2659   CD 6E 09               CALL   printStr   
265C   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
266C   CD 6E 09               CALL   printStr   
266F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
267E   21 02 01               LD   HL,$0102   
2681   CD BC 08               CALL   prtdec   
2684   CD 6E 09               CALL   printStr   
2687   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2694   E1                     POP   hl   
2695   E5                     PUSH   hl   
2696   CD BC 08               CALL   prtdec   
2699   E1                     POP   hl   
269A   CD 6E 09               CALL   printStr   
269D   20 28 23 00            .CSTR   " (#"   
26A1   CD 04 09               CALL   prthex   
26A4   CD 6E 09               CALL   printStr   
26A7   29 0D 0A 00            .CSTR   ")\r\n"   
26AB   76                     HALT      
26AC   00                     .CSTR      
26AD                EXPECTM_0_2166S43:      
26AD   E1                     POP   HL   
26AE                          ;*Macro unroll:  test "(:b) -1%", $0101
26AE   31 80 39               LD   SP,STACK   
26B1   CD 75 09               CALL   init   
26B4   CD B6 38               CALL   execStr   
26B7   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
26C0                          ;*Macro unroll:  expect "(:b) -1%",$0101
26C0   E1                     POP   HL   
26C1   E5                     PUSH   HL   
26C2   11 01 01               LD   DE,$0101   
26C5   B7                     OR   A   
26C6   ED 52                  SBC   HL,DE   
26C8   7D                     LD   A,L   
26C9   B4                     OR   H   
26CA   28 53                  JR   Z,expectM_0_2167S43   
26CC   CD 6E 09               CALL   printStr   
26CF   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
26DE   CD 6E 09               CALL   printStr   
26E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26F0   21 01 01               LD   HL,$0101   
26F3   CD BC 08               CALL   prtdec   
26F6   CD 6E 09               CALL   printStr   
26F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2706   E1                     POP   hl   
2707   E5                     PUSH   hl   
2708   CD BC 08               CALL   prtdec   
270B   E1                     POP   hl   
270C   CD 6E 09               CALL   printStr   
270F   20 28 23 00            .CSTR   " (#"   
2713   CD 04 09               CALL   prthex   
2716   CD 6E 09               CALL   printStr   
2719   29 0D 0A 00            .CSTR   ")\r\n"   
271D   76                     HALT      
271E   00                     .CSTR      
271F                EXPECTM_0_2167S43:      
271F   E1                     POP   HL   
2720                          ;*Macro unroll:  test "() {2} \\f:", 2
2720   31 80 39               LD   SP,STACK   
2723   CD 75 09               CALL   init   
2726   CD B6 38               CALL   execStr   
2729   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
2734                          ;*Macro unroll:  expect "() {2} \\f:",2
2734   E1                     POP   HL   
2735   E5                     PUSH   HL   
2736   11 02 00               LD   DE,2   
2739   B7                     OR   A   
273A   ED 52                  SBC   HL,DE   
273C   7D                     LD   A,L   
273D   B4                     OR   H   
273E   28 55                  JR   Z,expectM_0_2168S43   
2740   CD 6E 09               CALL   printStr   
2743   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
2754   CD 6E 09               CALL   printStr   
2757   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2766   21 02 00               LD   HL,2   
2769   CD BC 08               CALL   prtdec   
276C   CD 6E 09               CALL   printStr   
276F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
277C   E1                     POP   hl   
277D   E5                     PUSH   hl   
277E   CD BC 08               CALL   prtdec   
2781   E1                     POP   hl   
2782   CD 6E 09               CALL   printStr   
2785   20 28 23 00            .CSTR   " (#"   
2789   CD 04 09               CALL   prthex   
278C   CD 6E 09               CALL   printStr   
278F   29 0D 0A 00            .CSTR   ")\r\n"   
2793   76                     HALT      
2794   00                     .CSTR      
2795                EXPECTM_0_2168S43:      
2795   E1                     POP   HL   
2796                          ;*Macro unroll:  test "(a) {2} \\f:", 2
2796   31 80 39               LD   SP,STACK   
2799   CD 75 09               CALL   init   
279C   CD B6 38               CALL   execStr   
279F   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
27AB                          ;*Macro unroll:  expect "(a) {2} \\f:",2
27AB   E1                     POP   HL   
27AC   E5                     PUSH   HL   
27AD   11 02 00               LD   DE,2   
27B0   B7                     OR   A   
27B1   ED 52                  SBC   HL,DE   
27B3   7D                     LD   A,L   
27B4   B4                     OR   H   
27B5   28 56                  JR   Z,expectM_0_2169S43   
27B7   CD 6E 09               CALL   printStr   
27BA   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
27CC   CD 6E 09               CALL   printStr   
27CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DE   21 02 00               LD   HL,2   
27E1   CD BC 08               CALL   prtdec   
27E4   CD 6E 09               CALL   printStr   
27E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27F4   E1                     POP   hl   
27F5   E5                     PUSH   hl   
27F6   CD BC 08               CALL   prtdec   
27F9   E1                     POP   hl   
27FA   CD 6E 09               CALL   printStr   
27FD   20 28 23 00            .CSTR   " (#"   
2801   CD 04 09               CALL   prthex   
2804   CD 6E 09               CALL   printStr   
2807   29 0D 0A 00            .CSTR   ")\r\n"   
280B   76                     HALT      
280C   00                     .CSTR      
280D                EXPECTM_0_2169S43:      
280D   E1                     POP   HL   
280E                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
280E   31 80 39               LD   SP,STACK   
2811   CD 75 09               CALL   init   
2814   CD B6 38               CALL   execStr   
2817   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2826                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2826   E1                     POP   HL   
2827   E5                     PUSH   HL   
2828   11 05 00               LD   DE,5   
282B   B7                     OR   A   
282C   ED 52                  SBC   HL,DE   
282E   7D                     LD   A,L   
282F   B4                     OR   H   
2830   28 59                  JR   Z,expectM_0_2170S43   
2832   CD 6E 09               CALL   printStr   
2835   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
284A   CD 6E 09               CALL   printStr   
284D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285C   21 05 00               LD   HL,5   
285F   CD BC 08               CALL   prtdec   
2862   CD 6E 09               CALL   printStr   
2865   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2872   E1                     POP   hl   
2873   E5                     PUSH   hl   
2874   CD BC 08               CALL   prtdec   
2877   E1                     POP   hl   
2878   CD 6E 09               CALL   printStr   
287B   20 28 23 00            .CSTR   " (#"   
287F   CD 04 09               CALL   prthex   
2882   CD 6E 09               CALL   printStr   
2885   29 0D 0A 00            .CSTR   ")\r\n"   
2889   76                     HALT      
288A   00                     .CSTR      
288B                EXPECTM_0_2170S43:      
288B   E1                     POP   HL   
288C                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
288C   31 80 39               LD   SP,STACK   
288F   CD 75 09               CALL   init   
2892   CD B6 38               CALL   execStr   
2895   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
28A6                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
28A6   E1                     POP   HL   
28A7   E5                     PUSH   HL   
28A8   11 05 00               LD   DE,5   
28AB   B7                     OR   A   
28AC   ED 52                  SBC   HL,DE   
28AE   7D                     LD   A,L   
28AF   B4                     OR   H   
28B0   28 5B                  JR   Z,expectM_0_2171S43   
28B2   CD 6E 09               CALL   printStr   
28B5   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
28CC   CD 6E 09               CALL   printStr   
28CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28DE   21 05 00               LD   HL,5   
28E1   CD BC 08               CALL   prtdec   
28E4   CD 6E 09               CALL   printStr   
28E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28F4   E1                     POP   hl   
28F5   E5                     PUSH   hl   
28F6   CD BC 08               CALL   prtdec   
28F9   E1                     POP   hl   
28FA   CD 6E 09               CALL   printStr   
28FD   20 28 23 00            .CSTR   " (#"   
2901   CD 04 09               CALL   prthex   
2904   CD 6E 09               CALL   printStr   
2907   29 0D 0A 00            .CSTR   ")\r\n"   
290B   76                     HALT      
290C   00                     .CSTR      
290D                EXPECTM_0_2171S43:      
290D   E1                     POP   HL   
290E                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
290E   31 80 39               LD   SP,STACK   
2911   CD 75 09               CALL   init   
2914   CD B6 38               CALL   execStr   
2917   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2926                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2926   E1                     POP   HL   
2927   E5                     PUSH   HL   
2928   11 02 00               LD   DE,2   
292B   B7                     OR   A   
292C   ED 52                  SBC   HL,DE   
292E   7D                     LD   A,L   
292F   B4                     OR   H   
2930   28 59                  JR   Z,expectM_0_2172S43   
2932   CD 6E 09               CALL   printStr   
2935   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
294A   CD 6E 09               CALL   printStr   
294D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
295C   21 02 00               LD   HL,2   
295F   CD BC 08               CALL   prtdec   
2962   CD 6E 09               CALL   printStr   
2965   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2972   E1                     POP   hl   
2973   E5                     PUSH   hl   
2974   CD BC 08               CALL   prtdec   
2977   E1                     POP   hl   
2978   CD 6E 09               CALL   printStr   
297B   20 28 23 00            .CSTR   " (#"   
297F   CD 04 09               CALL   prthex   
2982   CD 6E 09               CALL   printStr   
2985   29 0D 0A 00            .CSTR   ")\r\n"   
2989   76                     HALT      
298A   00                     .CSTR      
298B                EXPECTM_0_2172S43:      
298B   E1                     POP   HL   
298C                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
298C   31 80 39               LD   SP,STACK   
298F   CD 75 09               CALL   init   
2992   CD B6 38               CALL   execStr   
2995   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
29A9                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
29A9   E1                     POP   HL   
29AA   E5                     PUSH   HL   
29AB   11 05 00               LD   DE,5   
29AE   B7                     OR   A   
29AF   ED 52                  SBC   HL,DE   
29B1   7D                     LD   A,L   
29B2   B4                     OR   H   
29B3   28 5E                  JR   Z,expectM_0_2173S43   
29B5   CD 6E 09               CALL   printStr   
29B8   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
29D2   CD 6E 09               CALL   printStr   
29D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E4   21 05 00               LD   HL,5   
29E7   CD BC 08               CALL   prtdec   
29EA   CD 6E 09               CALL   printStr   
29ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29FA   E1                     POP   hl   
29FB   E5                     PUSH   hl   
29FC   CD BC 08               CALL   prtdec   
29FF   E1                     POP   hl   
2A00   CD 6E 09               CALL   printStr   
2A03   20 28 23 00            .CSTR   " (#"   
2A07   CD 04 09               CALL   prthex   
2A0A   CD 6E 09               CALL   printStr   
2A0D   29 0D 0A 00            .CSTR   ")\r\n"   
2A11   76                     HALT      
2A12   00                     .CSTR      
2A13                EXPECTM_0_2173S43:      
2A13   E1                     POP   HL   
2A14                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
2A14   31 80 39               LD   SP,STACK   
2A17   CD 75 09               CALL   init   
2A1A   CD B6 38               CALL   execStr   
2A1D   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2A32                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2A32   E1                     POP   HL   
2A33   E5                     PUSH   HL   
2A34   11 01 00               LD   DE,1   
2A37   B7                     OR   A   
2A38   ED 52                  SBC   HL,DE   
2A3A   7D                     LD   A,L   
2A3B   B4                     OR   H   
2A3C   28 5F                  JR   Z,expectM_0_2174S43   
2A3E   CD 6E 09               CALL   printStr   
2A41   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
2A5C   CD 6E 09               CALL   printStr   
2A5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6E   21 01 00               LD   HL,1   
2A71   CD BC 08               CALL   prtdec   
2A74   CD 6E 09               CALL   printStr   
2A77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A84   E1                     POP   hl   
2A85   E5                     PUSH   hl   
2A86   CD BC 08               CALL   prtdec   
2A89   E1                     POP   hl   
2A8A   CD 6E 09               CALL   printStr   
2A8D   20 28 23 00            .CSTR   " (#"   
2A91   CD 04 09               CALL   prthex   
2A94   CD 6E 09               CALL   printStr   
2A97   29 0D 0A 00            .CSTR   ")\r\n"   
2A9B   76                     HALT      
2A9C   00                     .CSTR      
2A9D                EXPECTM_0_2174S43:      
2A9D   E1                     POP   HL   
2A9E                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
2A9E   31 80 39               LD   SP,STACK   
2AA1   CD 75 09               CALL   init   
2AA4   CD B6 38               CALL   execStr   
2AA7   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
2ABF                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
2ABF   E1                     POP   HL   
2AC0   E5                     PUSH   HL   
2AC1   11 07 00               LD   DE,7   
2AC4   B7                     OR   A   
2AC5   ED 52                  SBC   HL,DE   
2AC7   7D                     LD   A,L   
2AC8   B4                     OR   H   
2AC9   28 62                  JR   Z,expectM_0_2175S43   
2ACB   CD 6E 09               CALL   printStr   
2ACE   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
2AEC   CD 6E 09               CALL   printStr   
2AEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AFE   21 07 00               LD   HL,7   
2B01   CD BC 08               CALL   prtdec   
2B04   CD 6E 09               CALL   printStr   
2B07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B14   E1                     POP   hl   
2B15   E5                     PUSH   hl   
2B16   CD BC 08               CALL   prtdec   
2B19   E1                     POP   hl   
2B1A   CD 6E 09               CALL   printStr   
2B1D   20 28 23 00            .CSTR   " (#"   
2B21   CD 04 09               CALL   prthex   
2B24   CD 6E 09               CALL   printStr   
2B27   29 0D 0A 00            .CSTR   ")\r\n"   
2B2B   76                     HALT      
2B2C   00                     .CSTR      
2B2D                EXPECTM_0_2175S43:      
2B2D   E1                     POP   HL   
2B2E                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
2B2E   31 80 39               LD   SP,STACK   
2B31   CD 75 09               CALL   init   
2B34   CD B6 38               CALL   execStr   
2B37   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2B51                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2B51   E1                     POP   HL   
2B52   E5                     PUSH   HL   
2B53   11 06 00               LD   DE,6   
2B56   B7                     OR   A   
2B57   ED 52                  SBC   HL,DE   
2B59   7D                     LD   A,L   
2B5A   B4                     OR   H   
2B5B   28 64                  JR   Z,expectM_0_2176S43   
2B5D   CD 6E 09               CALL   printStr   
2B60   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2B80   CD 6E 09               CALL   printStr   
2B83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B92   21 06 00               LD   HL,6   
2B95   CD BC 08               CALL   prtdec   
2B98   CD 6E 09               CALL   printStr   
2B9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BA8   E1                     POP   hl   
2BA9   E5                     PUSH   hl   
2BAA   CD BC 08               CALL   prtdec   
2BAD   E1                     POP   hl   
2BAE   CD 6E 09               CALL   printStr   
2BB1   20 28 23 00            .CSTR   " (#"   
2BB5   CD 04 09               CALL   prthex   
2BB8   CD 6E 09               CALL   printStr   
2BBB   29 0D 0A 00            .CSTR   ")\r\n"   
2BBF   76                     HALT      
2BC0   00                     .CSTR      
2BC1                EXPECTM_0_2176S43:      
2BC1   E1                     POP   HL   
2BC2                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
2BC2   31 80 39               LD   SP,STACK   
2BC5   CD 75 09               CALL   init   
2BC8   CD B6 38               CALL   execStr   
2BCB   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
2BDE                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
2BDE   E1                     POP   HL   
2BDF   E5                     PUSH   HL   
2BE0   11 02 00               LD   DE,2   
2BE3   B7                     OR   A   
2BE4   ED 52                  SBC   HL,DE   
2BE6   7D                     LD   A,L   
2BE7   B4                     OR   H   
2BE8   28 5D                  JR   Z,expectM_0_2177S43   
2BEA   CD 6E 09               CALL   printStr   
2BED   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
2C06   CD 6E 09               CALL   printStr   
2C09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C18   21 02 00               LD   HL,2   
2C1B   CD BC 08               CALL   prtdec   
2C1E   CD 6E 09               CALL   printStr   
2C21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C2E   E1                     POP   hl   
2C2F   E5                     PUSH   hl   
2C30   CD BC 08               CALL   prtdec   
2C33   E1                     POP   hl   
2C34   CD 6E 09               CALL   printStr   
2C37   20 28 23 00            .CSTR   " (#"   
2C3B   CD 04 09               CALL   prthex   
2C3E   CD 6E 09               CALL   printStr   
2C41   29 0D 0A 00            .CSTR   ")\r\n"   
2C45   76                     HALT      
2C46   00                     .CSTR      
2C47                EXPECTM_0_2177S43:      
2C47   E1                     POP   HL   
2C48                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2C48   31 80 39               LD   SP,STACK   
2C4B   CD 75 09               CALL   init   
2C4E   CD B6 38               CALL   execStr   
2C51   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2C67                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2C67   E1                     POP   HL   
2C68   E5                     PUSH   HL   
2C69   11 01 00               LD   DE,1   
2C6C   B7                     OR   A   
2C6D   ED 52                  SBC   HL,DE   
2C6F   7D                     LD   A,L   
2C70   B4                     OR   H   
2C71   28 60                  JR   Z,expectM_0_2178S43   
2C73   CD 6E 09               CALL   printStr   
2C76   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2C92   CD 6E 09               CALL   printStr   
2C95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CA4   21 01 00               LD   HL,1   
2CA7   CD BC 08               CALL   prtdec   
2CAA   CD 6E 09               CALL   printStr   
2CAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CBA   E1                     POP   hl   
2CBB   E5                     PUSH   hl   
2CBC   CD BC 08               CALL   prtdec   
2CBF   E1                     POP   hl   
2CC0   CD 6E 09               CALL   printStr   
2CC3   20 28 23 00            .CSTR   " (#"   
2CC7   CD 04 09               CALL   prthex   
2CCA   CD 6E 09               CALL   printStr   
2CCD   29 0D 0A 00            .CSTR   ")\r\n"   
2CD1   76                     HALT      
2CD2   00                     .CSTR      
2CD3                EXPECTM_0_2178S43:      
2CD3   E1                     POP   HL   
2CD4                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2CD4   31 80 39               LD   SP,STACK   
2CD7   CD 75 09               CALL   init   
2CDA   CD B6 38               CALL   execStr   
2CDD   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2CF4                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2CF4   E1                     POP   HL   
2CF5   E5                     PUSH   HL   
2CF6   11 02 00               LD   DE,2   
2CF9   B7                     OR   A   
2CFA   ED 52                  SBC   HL,DE   
2CFC   7D                     LD   A,L   
2CFD   B4                     OR   H   
2CFE   28 61                  JR   Z,expectM_0_2179S43   
2D00   CD 6E 09               CALL   printStr   
2D03   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2D20   CD 6E 09               CALL   printStr   
2D23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D32   21 02 00               LD   HL,2   
2D35   CD BC 08               CALL   prtdec   
2D38   CD 6E 09               CALL   printStr   
2D3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D48   E1                     POP   hl   
2D49   E5                     PUSH   hl   
2D4A   CD BC 08               CALL   prtdec   
2D4D   E1                     POP   hl   
2D4E   CD 6E 09               CALL   printStr   
2D51   20 28 23 00            .CSTR   " (#"   
2D55   CD 04 09               CALL   prthex   
2D58   CD 6E 09               CALL   printStr   
2D5B   29 0D 0A 00            .CSTR   ")\r\n"   
2D5F   76                     HALT      
2D60   00                     .CSTR      
2D61                EXPECTM_0_2179S43:      
2D61   E1                     POP   HL   
2D62                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2D62   31 80 39               LD   SP,STACK   
2D65   CD 75 09               CALL   init   
2D68   CD B6 38               CALL   execStr   
2D6B   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2D83                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2D83   E1                     POP   HL   
2D84   E5                     PUSH   HL   
2D85   11 02 00               LD   DE,2   
2D88   B7                     OR   A   
2D89   ED 52                  SBC   HL,DE   
2D8B   7D                     LD   A,L   
2D8C   B4                     OR   H   
2D8D   28 62                  JR   Z,expectM_0_2180S43   
2D8F   CD 6E 09               CALL   printStr   
2D92   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
2DB0   CD 6E 09               CALL   printStr   
2DB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DC2   21 02 00               LD   HL,2   
2DC5   CD BC 08               CALL   prtdec   
2DC8   CD 6E 09               CALL   printStr   
2DCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DD8   E1                     POP   hl   
2DD9   E5                     PUSH   hl   
2DDA   CD BC 08               CALL   prtdec   
2DDD   E1                     POP   hl   
2DDE   CD 6E 09               CALL   printStr   
2DE1   20 28 23 00            .CSTR   " (#"   
2DE5   CD 04 09               CALL   prthex   
2DE8   CD 6E 09               CALL   printStr   
2DEB   29 0D 0A 00            .CSTR   ")\r\n"   
2DEF   76                     HALT      
2DF0   00                     .CSTR      
2DF1                EXPECTM_0_2180S43:      
2DF1   E1                     POP   HL   
2DF2                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2DF2   31 80 39               LD   SP,STACK   
2DF5   CD 75 09               CALL   init   
2DF8   CD B6 38               CALL   execStr   
2DFB   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2E12                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2E12   E1                     POP   HL   
2E13   E5                     PUSH   HL   
2E14   11 02 00               LD   DE,2   
2E17   B7                     OR   A   
2E18   ED 52                  SBC   HL,DE   
2E1A   7D                     LD   A,L   
2E1B   B4                     OR   H   
2E1C   28 61                  JR   Z,expectM_0_2181S43   
2E1E   CD 6E 09               CALL   printStr   
2E21   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2E3E   CD 6E 09               CALL   printStr   
2E41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E50   21 02 00               LD   HL,2   
2E53   CD BC 08               CALL   prtdec   
2E56   CD 6E 09               CALL   printStr   
2E59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E66   E1                     POP   hl   
2E67   E5                     PUSH   hl   
2E68   CD BC 08               CALL   prtdec   
2E6B   E1                     POP   hl   
2E6C   CD 6E 09               CALL   printStr   
2E6F   20 28 23 00            .CSTR   " (#"   
2E73   CD 04 09               CALL   prthex   
2E76   CD 6E 09               CALL   printStr   
2E79   29 0D 0A 00            .CSTR   ")\r\n"   
2E7D   76                     HALT      
2E7E   00                     .CSTR      
2E7F                EXPECTM_0_2181S43:      
2E7F   E1                     POP   HL   
2E80                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
2E80   31 80 39               LD   SP,STACK   
2E83   CD 75 09               CALL   init   
2E86   CD B6 38               CALL   execStr   
2E89   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
2EA7                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
2EA7   E1                     POP   HL   
2EA8   E5                     PUSH   HL   
2EA9   11 05 00               LD   DE,5   
2EAC   B7                     OR   A   
2EAD   ED 52                  SBC   HL,DE   
2EAF   7D                     LD   A,L   
2EB0   B4                     OR   H   
2EB1   28 68                  JR   Z,expectM_0_2182S43   
2EB3   CD 6E 09               CALL   printStr   
2EB6   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
2EDA   CD 6E 09               CALL   printStr   
2EDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EEC   21 05 00               LD   HL,5   
2EEF   CD BC 08               CALL   prtdec   
2EF2   CD 6E 09               CALL   printStr   
2EF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F02   E1                     POP   hl   
2F03   E5                     PUSH   hl   
2F04   CD BC 08               CALL   prtdec   
2F07   E1                     POP   hl   
2F08   CD 6E 09               CALL   printStr   
2F0B   20 28 23 00            .CSTR   " (#"   
2F0F   CD 04 09               CALL   prthex   
2F12   CD 6E 09               CALL   printStr   
2F15   29 0D 0A 00            .CSTR   ")\r\n"   
2F19   76                     HALT      
2F1A   00                     .CSTR      
2F1B                EXPECTM_0_2182S43:      
2F1B   E1                     POP   HL   
2F1C                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
2F1C   31 80 39               LD   SP,STACK   
2F1F   CD 75 09               CALL   init   
2F22   CD B6 38               CALL   execStr   
2F25   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
2F3A                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
2F3A   E1                     POP   HL   
2F3B   E5                     PUSH   HL   
2F3C   11 02 00               LD   DE,2   
2F3F   B7                     OR   A   
2F40   ED 52                  SBC   HL,DE   
2F42   7D                     LD   A,L   
2F43   B4                     OR   H   
2F44   28 5F                  JR   Z,expectM_0_2183S43   
2F46   CD 6E 09               CALL   printStr   
2F49   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
2F64   CD 6E 09               CALL   printStr   
2F67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F76   21 02 00               LD   HL,2   
2F79   CD BC 08               CALL   prtdec   
2F7C   CD 6E 09               CALL   printStr   
2F7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F8C   E1                     POP   hl   
2F8D   E5                     PUSH   hl   
2F8E   CD BC 08               CALL   prtdec   
2F91   E1                     POP   hl   
2F92   CD 6E 09               CALL   printStr   
2F95   20 28 23 00            .CSTR   " (#"   
2F99   CD 04 09               CALL   prthex   
2F9C   CD 6E 09               CALL   printStr   
2F9F   29 0D 0A 00            .CSTR   ")\r\n"   
2FA3   76                     HALT      
2FA4   00                     .CSTR      
2FA5                EXPECTM_0_2183S43:      
2FA5   E1                     POP   HL   
2FA6                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
2FA6   31 80 39               LD   SP,STACK   
2FA9   CD 75 09               CALL   init   
2FAC   CD B6 38               CALL   execStr   
2FAF   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
2FCA                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
2FCA   E1                     POP   HL   
2FCB   E5                     PUSH   HL   
2FCC   11 64 00               LD   DE,100   
2FCF   B7                     OR   A   
2FD0   ED 52                  SBC   HL,DE   
2FD2   7D                     LD   A,L   
2FD3   B4                     OR   H   
2FD4   28 65                  JR   Z,expectM_0_2184S43   
2FD6   CD 6E 09               CALL   printStr   
2FD9   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
2FFA   CD 6E 09               CALL   printStr   
2FFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
300C   21 64 00               LD   HL,100   
300F   CD BC 08               CALL   prtdec   
3012   CD 6E 09               CALL   printStr   
3015   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3022   E1                     POP   hl   
3023   E5                     PUSH   hl   
3024   CD BC 08               CALL   prtdec   
3027   E1                     POP   hl   
3028   CD 6E 09               CALL   printStr   
302B   20 28 23 00            .CSTR   " (#"   
302F   CD 04 09               CALL   prthex   
3032   CD 6E 09               CALL   printStr   
3035   29 0D 0A 00            .CSTR   ")\r\n"   
3039   76                     HALT      
303A   00                     .CSTR      
303B                EXPECTM_0_2184S43:      
303B   E1                     POP   HL   
303C                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
303C   31 80 39               LD   SP,STACK   
303F   CD 75 09               CALL   init   
3042   CD B6 38               CALL   execStr   
3045   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
3061                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
3061   E1                     POP   HL   
3062   E5                     PUSH   HL   
3063   11 01 00               LD   DE,1   
3066   B7                     OR   A   
3067   ED 52                  SBC   HL,DE   
3069   7D                     LD   A,L   
306A   B4                     OR   H   
306B   28 66                  JR   Z,expectM_0_2185S43   
306D   CD 6E 09               CALL   printStr   
3070   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
3092   CD 6E 09               CALL   printStr   
3095   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30A4   21 01 00               LD   HL,1   
30A7   CD BC 08               CALL   prtdec   
30AA   CD 6E 09               CALL   printStr   
30AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30BA   E1                     POP   hl   
30BB   E5                     PUSH   hl   
30BC   CD BC 08               CALL   prtdec   
30BF   E1                     POP   hl   
30C0   CD 6E 09               CALL   printStr   
30C3   20 28 23 00            .CSTR   " (#"   
30C7   CD 04 09               CALL   prthex   
30CA   CD 6E 09               CALL   printStr   
30CD   29 0D 0A 00            .CSTR   ")\r\n"   
30D1   76                     HALT      
30D2   00                     .CSTR      
30D3                EXPECTM_0_2185S43:      
30D3   E1                     POP   HL   
30D4                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
30D4   31 80 39               LD   SP,STACK   
30D7   CD 75 09               CALL   init   
30DA   CD B6 38               CALL   execStr   
30DD   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
30FA                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
30FA   E1                     POP   HL   
30FB   E5                     PUSH   HL   
30FC   11 02 00               LD   DE,2   
30FF   B7                     OR   A   
3100   ED 52                  SBC   HL,DE   
3102   7D                     LD   A,L   
3103   B4                     OR   H   
3104   28 67                  JR   Z,expectM_0_2186S43   
3106   CD 6E 09               CALL   printStr   
3109   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
312C   CD 6E 09               CALL   printStr   
312F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
313E   21 02 00               LD   HL,2   
3141   CD BC 08               CALL   prtdec   
3144   CD 6E 09               CALL   printStr   
3147   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3154   E1                     POP   hl   
3155   E5                     PUSH   hl   
3156   CD BC 08               CALL   prtdec   
3159   E1                     POP   hl   
315A   CD 6E 09               CALL   printStr   
315D   20 28 23 00            .CSTR   " (#"   
3161   CD 04 09               CALL   prthex   
3164   CD 6E 09               CALL   printStr   
3167   29 0D 0A 00            .CSTR   ")\r\n"   
316B   76                     HALT      
316C   00                     .CSTR      
316D                EXPECTM_0_2186S43:      
316D   E1                     POP   HL   
316E                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
316E   31 80 39               LD   SP,STACK   
3171   CD 75 09               CALL   init   
3174   CD B6 38               CALL   execStr   
3177   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
319C                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
319C   E1                     POP   HL   
319D   E5                     PUSH   HL   
319E   11 0B 00               LD   DE,11   
31A1   B7                     OR   A   
31A2   ED 52                  SBC   HL,DE   
31A4   7D                     LD   A,L   
31A5   B4                     OR   H   
31A6   28 6F                  JR   Z,expectM_0_2187S43   
31A8   CD 6E 09               CALL   printStr   
31AB   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
31D6   CD 6E 09               CALL   printStr   
31D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E8   21 0B 00               LD   HL,11   
31EB   CD BC 08               CALL   prtdec   
31EE   CD 6E 09               CALL   printStr   
31F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31FE   E1                     POP   hl   
31FF   E5                     PUSH   hl   
3200   CD BC 08               CALL   prtdec   
3203   E1                     POP   hl   
3204   CD 6E 09               CALL   printStr   
3207   20 28 23 00            .CSTR   " (#"   
320B   CD 04 09               CALL   prthex   
320E   CD 6E 09               CALL   printStr   
3211   29 0D 0A 00            .CSTR   ")\r\n"   
3215   76                     HALT      
3216   00                     .CSTR      
3217                EXPECTM_0_2187S43:      
3217   E1                     POP   HL   
3218                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
3218   31 80 39               LD   SP,STACK   
321B   CD 75 09               CALL   init   
321E   CD B6 38               CALL   execStr   
3221   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
3246                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
3246   E1                     POP   HL   
3247   E5                     PUSH   HL   
3248   11 15 00               LD   DE,21   
324B   B7                     OR   A   
324C   ED 52                  SBC   HL,DE   
324E   7D                     LD   A,L   
324F   B4                     OR   H   
3250   28 6F                  JR   Z,expectM_0_2188S43   
3252   CD 6E 09               CALL   printStr   
3255   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
3280   CD 6E 09               CALL   printStr   
3283   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3292   21 15 00               LD   HL,21   
3295   CD BC 08               CALL   prtdec   
3298   CD 6E 09               CALL   printStr   
329B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A8   E1                     POP   hl   
32A9   E5                     PUSH   hl   
32AA   CD BC 08               CALL   prtdec   
32AD   E1                     POP   hl   
32AE   CD 6E 09               CALL   printStr   
32B1   20 28 23 00            .CSTR   " (#"   
32B5   CD 04 09               CALL   prthex   
32B8   CD 6E 09               CALL   printStr   
32BB   29 0D 0A 00            .CSTR   ")\r\n"   
32BF   76                     HALT      
32C0   00                     .CSTR      
32C1                EXPECTM_0_2188S43:      
32C1   E1                     POP   HL   
32C2                          ;*Macro unroll:  test "[10 20 30] 1%", 20
32C2   31 80 39               LD   SP,STACK   
32C5   CD 75 09               CALL   init   
32C8   CD B6 38               CALL   execStr   
32CB   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
32D9                          ;*Macro unroll:  expect "[10 20 30] 1%",20
32D9   E1                     POP   HL   
32DA   E5                     PUSH   HL   
32DB   11 14 00               LD   DE,20   
32DE   B7                     OR   A   
32DF   ED 52                  SBC   HL,DE   
32E1   7D                     LD   A,L   
32E2   B4                     OR   H   
32E3   28 58                  JR   Z,expectM_0_2189S43   
32E5   CD 6E 09               CALL   printStr   
32E8   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
32FC   CD 6E 09               CALL   printStr   
32FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
330E   21 14 00               LD   HL,20   
3311   CD BC 08               CALL   prtdec   
3314   CD 6E 09               CALL   printStr   
3317   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3324   E1                     POP   hl   
3325   E5                     PUSH   hl   
3326   CD BC 08               CALL   prtdec   
3329   E1                     POP   hl   
332A   CD 6E 09               CALL   printStr   
332D   20 28 23 00            .CSTR   " (#"   
3331   CD 04 09               CALL   prthex   
3334   CD 6E 09               CALL   printStr   
3337   29 0D 0A 00            .CSTR   ")\r\n"   
333B   76                     HALT      
333C   00                     .CSTR      
333D                EXPECTM_0_2189S43:      
333D   E1                     POP   HL   
333E                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
333E   31 80 39               LD   SP,STACK   
3341   CD 75 09               CALL   init   
3344   CD B6 38               CALL   execStr   
3347   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
3355                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
3355   E1                     POP   HL   
3356   E5                     PUSH   HL   
3357   11 02 00               LD   DE,2   
335A   B7                     OR   A   
335B   ED 52                  SBC   HL,DE   
335D   7D                     LD   A,L   
335E   B4                     OR   H   
335F   28 58                  JR   Z,expectM_0_2190S43   
3361   CD 6E 09               CALL   printStr   
3364   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
3378   CD 6E 09               CALL   printStr   
337B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
338A   21 02 00               LD   HL,2   
338D   CD BC 08               CALL   prtdec   
3390   CD 6E 09               CALL   printStr   
3393   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33A0   E1                     POP   hl   
33A1   E5                     PUSH   hl   
33A2   CD BC 08               CALL   prtdec   
33A5   E1                     POP   hl   
33A6   CD 6E 09               CALL   printStr   
33A9   20 28 23 00            .CSTR   " (#"   
33AD   CD 04 09               CALL   prthex   
33B0   CD 6E 09               CALL   printStr   
33B3   29 0D 0A 00            .CSTR   ")\r\n"   
33B7   76                     HALT      
33B8   00                     .CSTR      
33B9                EXPECTM_0_2190S43:      
33B9   E1                     POP   HL   
33BA                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
33BA   31 80 39               LD   SP,STACK   
33BD   CD 75 09               CALL   init   
33C0   CD B6 38               CALL   execStr   
33C3   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
33D7                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
33D7   E1                     POP   HL   
33D8   E5                     PUSH   HL   
33D9   11 42 00               LD   DE,66   
33DC   B7                     OR   A   
33DD   ED 52                  SBC   HL,DE   
33DF   7D                     LD   A,L   
33E0   B4                     OR   H   
33E1   28 5E                  JR   Z,expectM_0_2191S43   
33E3   CD 6E 09               CALL   printStr   
33E6   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
3400   CD 6E 09               CALL   printStr   
3403   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3412   21 42 00               LD   HL,66   
3415   CD BC 08               CALL   prtdec   
3418   CD 6E 09               CALL   printStr   
341B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3428   E1                     POP   hl   
3429   E5                     PUSH   hl   
342A   CD BC 08               CALL   prtdec   
342D   E1                     POP   hl   
342E   CD 6E 09               CALL   printStr   
3431   20 28 23 00            .CSTR   " (#"   
3435   CD 04 09               CALL   prthex   
3438   CD 6E 09               CALL   printStr   
343B   29 0D 0A 00            .CSTR   ")\r\n"   
343F   76                     HALT      
3440   00                     .CSTR      
3441                EXPECTM_0_2191S43:      
3441   E1                     POP   HL   
3442                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
3442   31 80 39               LD   SP,STACK   
3445   CD 75 09               CALL   init   
3448   CD B6 38               CALL   execStr   
344B   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
3461                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
3461   E1                     POP   HL   
3462   E5                     PUSH   HL   
3463   11 0A 00               LD   DE,10   
3466   B7                     OR   A   
3467   ED 52                  SBC   HL,DE   
3469   7D                     LD   A,L   
346A   B4                     OR   H   
346B   28 60                  JR   Z,expectM_0_2192S43   
346D   CD 6E 09               CALL   printStr   
3470   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
348C   CD 6E 09               CALL   printStr   
348F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
349E   21 0A 00               LD   HL,10   
34A1   CD BC 08               CALL   prtdec   
34A4   CD 6E 09               CALL   printStr   
34A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34B4   E1                     POP   hl   
34B5   E5                     PUSH   hl   
34B6   CD BC 08               CALL   prtdec   
34B9   E1                     POP   hl   
34BA   CD 6E 09               CALL   printStr   
34BD   20 28 23 00            .CSTR   " (#"   
34C1   CD 04 09               CALL   prthex   
34C4   CD 6E 09               CALL   printStr   
34C7   29 0D 0A 00            .CSTR   ")\r\n"   
34CB   76                     HALT      
34CC   00                     .CSTR      
34CD                EXPECTM_0_2192S43:      
34CD   E1                     POP   HL   
34CE                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
34CE   31 80 39               LD   SP,STACK   
34D1   CD 75 09               CALL   init   
34D4   CD B6 38               CALL   execStr   
34D7   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
34FB                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
34FB   E1                     POP   HL   
34FC   E5                     PUSH   HL   
34FD   11 0A 00               LD   DE,10   
3500   B7                     OR   A   
3501   ED 52                  SBC   HL,DE   
3503   7D                     LD   A,L   
3504   B4                     OR   H   
3505   28 6E                  JR   Z,expectM_0_2193S43   
3507   CD 6E 09               CALL   printStr   
350A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3534   CD 6E 09               CALL   printStr   
3537   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3546   21 0A 00               LD   HL,10   
3549   CD BC 08               CALL   prtdec   
354C   CD 6E 09               CALL   printStr   
354F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
355C   E1                     POP   hl   
355D   E5                     PUSH   hl   
355E   CD BC 08               CALL   prtdec   
3561   E1                     POP   hl   
3562   CD 6E 09               CALL   printStr   
3565   20 28 23 00            .CSTR   " (#"   
3569   CD 04 09               CALL   prthex   
356C   CD 6E 09               CALL   printStr   
356F   29 0D 0A 00            .CSTR   ")\r\n"   
3573   76                     HALT      
3574   00                     .CSTR      
3575                EXPECTM_0_2193S43:      
3575   E1                     POP   HL   
3576                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
3576   31 80 39               LD   SP,STACK   
3579   CD 75 09               CALL   init   
357C   CD B6 38               CALL   execStr   
357F   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
35A5                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
35A5   E1                     POP   HL   
35A6   E5                     PUSH   HL   
35A7   11 0A 00               LD   DE,10   
35AA   B7                     OR   A   
35AB   ED 52                  SBC   HL,DE   
35AD   7D                     LD   A,L   
35AE   B4                     OR   H   
35AF   28 70                  JR   Z,expectM_0_2194S43   
35B1   CD 6E 09               CALL   printStr   
35B4   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
35E0   CD 6E 09               CALL   printStr   
35E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35F2   21 0A 00               LD   HL,10   
35F5   CD BC 08               CALL   prtdec   
35F8   CD 6E 09               CALL   printStr   
35FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3608   E1                     POP   hl   
3609   E5                     PUSH   hl   
360A   CD BC 08               CALL   prtdec   
360D   E1                     POP   hl   
360E   CD 6E 09               CALL   printStr   
3611   20 28 23 00            .CSTR   " (#"   
3615   CD 04 09               CALL   prthex   
3618   CD 6E 09               CALL   printStr   
361B   29 0D 0A 00            .CSTR   ")\r\n"   
361F   76                     HALT      
3620   00                     .CSTR      
3621                EXPECTM_0_2194S43:      
3621   E1                     POP   HL   
3622                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
3622   31 80 39               LD   SP,STACK   
3625   CD 75 09               CALL   init   
3628   CD B6 38               CALL   execStr   
362B   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3651                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
3651   E1                     POP   HL   
3652   E5                     PUSH   HL   
3653   11 14 00               LD   DE,20   
3656   B7                     OR   A   
3657   ED 52                  SBC   HL,DE   
3659   7D                     LD   A,L   
365A   B4                     OR   H   
365B   28 70                  JR   Z,expectM_0_2195S43   
365D   CD 6E 09               CALL   printStr   
3660   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
368C   CD 6E 09               CALL   printStr   
368F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
369E   21 14 00               LD   HL,20   
36A1   CD BC 08               CALL   prtdec   
36A4   CD 6E 09               CALL   printStr   
36A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36B4   E1                     POP   hl   
36B5   E5                     PUSH   hl   
36B6   CD BC 08               CALL   prtdec   
36B9   E1                     POP   hl   
36BA   CD 6E 09               CALL   printStr   
36BD   20 28 23 00            .CSTR   " (#"   
36C1   CD 04 09               CALL   prthex   
36C4   CD 6E 09               CALL   printStr   
36C7   29 0D 0A 00            .CSTR   ")\r\n"   
36CB   76                     HALT      
36CC   00                     .CSTR      
36CD                EXPECTM_0_2195S43:      
36CD   E1                     POP   HL   
36CE                          ;*Macro unroll:  test "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ", 10
36CE   31 80 39               LD   SP,STACK   
36D1   CD 75 09               CALL   init   
36D4   CD B6 38               CALL   execStr   
36D7   30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
36FF                          ;*Macro unroll:  expect "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ",10
36FF   E1                     POP   HL   
3700   E5                     PUSH   HL   
3701   11 0A 00               LD   DE,10   
3704   B7                     OR   A   
3705   ED 52                  SBC   HL,DE   
3707   7D                     LD   A,L   
3708   B4                     OR   H   
3709   28 72                  JR   Z,expectM_0_2196S43   
370B   CD 6E 09               CALL   printStr   
370E   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
373C   CD 6E 09               CALL   printStr   
373F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
374E   21 0A 00               LD   HL,10   
3751   CD BC 08               CALL   prtdec   
3754   CD 6E 09               CALL   printStr   
3757   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3764   E1                     POP   hl   
3765   E5                     PUSH   hl   
3766   CD BC 08               CALL   prtdec   
3769   E1                     POP   hl   
376A   CD 6E 09               CALL   printStr   
376D   20 28 23 00            .CSTR   " (#"   
3771   CD 04 09               CALL   prthex   
3774   CD 6E 09               CALL   printStr   
3777   29 0D 0A 00            .CSTR   ")\r\n"   
377B   76                     HALT      
377C   00                     .CSTR      
377D                EXPECTM_0_2196S43:      
377D   E1                     POP   HL   
377E                          ;*Macro unroll:  test "5 [4] (a) {$a} \\f \\c :", 4
377E   31 80 39               LD   SP,STACK   
3781   CD 75 09               CALL   init   
3784   CD B6 38               CALL   execStr   
3787   35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "5 [4] (a) {$a} \\f \\c :"   
379E                          ;*Macro unroll:  expect "5 [4] (a) {$a} \\f \\c :",4
379E   E1                     POP   HL   
379F   E5                     PUSH   HL   
37A0   11 04 00               LD   DE,4   
37A3   B7                     OR   A   
37A4   ED 52                  SBC   HL,DE   
37A6   7D                     LD   A,L   
37A7   B4                     OR   H   
37A8   28 61                  JR   Z,expectM_0_2197S43   
37AA   CD 6E 09               CALL   printStr   
37AD   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "Code: ","5 [4] (a) {$a} \\f \\c :"   
37CA   CD 6E 09               CALL   printStr   
37CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37DC   21 04 00               LD   HL,4   
37DF   CD BC 08               CALL   prtdec   
37E2   CD 6E 09               CALL   printStr   
37E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37F2   E1                     POP   hl   
37F3   E5                     PUSH   hl   
37F4   CD BC 08               CALL   prtdec   
37F7   E1                     POP   hl   
37F8   CD 6E 09               CALL   printStr   
37FB   20 28 23 00            .CSTR   " (#"   
37FF   CD 04 09               CALL   prthex   
3802   CD 6E 09               CALL   printStr   
3805   29 0D 0A 00            .CSTR   ")\r\n"   
3809   76                     HALT      
380A   00                     .CSTR      
380B                EXPECTM_0_2197S43:      
380B   E1                     POP   HL   
380C                          ;*Macro unroll:  test "5 [4] (ab) {$a $b +} \\f \\c :", 9
380C   31 80 39               LD   SP,STACK   
380F   CD 75 09               CALL   init   
3812   CD B6 38               CALL   execStr   
3815   35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "5 [4] (ab) {$a $b +} \\f \\c :"   
3832                          ;*Macro unroll:  expect "5 [4] (ab) {$a $b +} \\f \\c :",9
3832   E1                     POP   HL   
3833   E5                     PUSH   HL   
3834   11 09 00               LD   DE,9   
3837   B7                     OR   A   
3838   ED 52                  SBC   HL,DE   
383A   7D                     LD   A,L   
383B   B4                     OR   H   
383C   28 67                  JR   Z,expectM_0_2198S43   
383E   CD 6E 09               CALL   printStr   
3841   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "Code: ","5 [4] (ab) {$a $b +} \\f \\c :"   
3864   CD 6E 09               CALL   printStr   
3867   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3876   21 09 00               LD   HL,9   
3879   CD BC 08               CALL   prtdec   
387C   CD 6E 09               CALL   printStr   
387F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
388C   E1                     POP   hl   
388D   E5                     PUSH   hl   
388E   CD BC 08               CALL   prtdec   
3891   E1                     POP   hl   
3892   CD 6E 09               CALL   printStr   
3895   20 28 23 00            .CSTR   " (#"   
3899   CD 04 09               CALL   prthex   
389C   CD 6E 09               CALL   printStr   
389F   29 0D 0A 00            .CSTR   ")\r\n"   
38A3   76                     HALT      
38A4   00                     .CSTR      
38A5                EXPECTM_0_2198S43:      
38A5   E1                     POP   HL   
38A6                             ; 
38A6                             ; 
38A6                             ; 
38A6                             ; 
38A6                             ; 
38A6                             ; 
38A6                             ; 
38A6   CD 6E 09               CALL   printStr   
38A9   44 6F 6E 65 21 00      .CSTR   "Done!"   
38AF   76                     HALT      
38B0                          ALIGN   2   
38B0                PRINTER:      
38B0   E1                     POP   hl   
38B1   CD BC 08               CALL   prtdec   
38B4   DD E9                  JP   (ix)   
38B6                             ; executes a null teminated string (null executes exit_)
38B6                             ; the string should be immedaitely following the call
38B6                EXECSTR:      ; create a root stack frame
38B6   C1                     POP   bc   ; bc = code*
38B7   0B                     DEC   bc   ; dec to prepare for next routine
38B8   11 00 00               LD   de,0   
38BB   D5                     PUSH   de   ; push fake IP
38BC   D5                     PUSH   de   ; push null arg_list*
38BD   D5                     PUSH   de   ; push null first_arg*
38BE   D5                     PUSH   de   ; push fake BP
38BF   DD E9                  JP   (ix)   
38C1                          ALIGN   $100   
3900                             ; .org RAMSTART
3900                          DS   DSIZE   
3980                STACK:       
3980                          ALIGN   $100   
3A00                VARS:        
3A00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3AD0                RESTARTS:      
3AD0                RST08:    DS   2   
3AD2                RST10:    DS   2   
3AD4                RST18:    DS   2   
3AD6                RST20:    DS   2   
3AD8                RST28:    DS   2   
3ADA                RST30:    DS   2   ; 
3ADC                BAUD:     DS   2   ; 
3ADE                INTVEC:   DS   2   ; 
3AE0                NMIVEC:   DS   2   ; 
3AE2                GETCVEC:   DS   2   ; 
3AE4                PUTCVEC:   DS   2   ; 
3AE6                SYSVARS:      
3AE6                             ; initialised sys variables
3AE6                VDATAWIDTH:   DS   2   ; 
3AE8                VTIBPTR:   DS   2   ; 
3AEA                VNEXT:    DS   2   ; 
3AEC                VHEAPPTR:   DS   2   ; 
3AEE                             ; uninitialised sys variables
3AEE                VBLOCKEND:   DS   2   ; 
3AF0                VPOINTER:   DS   2   ; 
3AF2                VHASHSTR:   DS   2   ; 
3AF4                VLASTDEF:   DS   2   ; 
3AF6                VREMAIN:   DS   2   ; 
3AF8                VTEMP1:   DS   2   ; 
3AFA                VTEMP2:   DS   2   ; 
3AFC                TBPTR:    DS   2   ; reserved for tests
3AFE                          ALIGN   $100   
3B00                TIB:      DS   TIBSIZE   
3C00                          ALIGN   $100   
3C00                PAD:      DS   $100   
3D00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08BA DEFINED AT LINE 1337 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1266 IN monty.asm
                    > USED AT LINE 1538 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 740 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 1348 IN monty.asm
                    > USED AT LINE 1389 IN monty.asm
                    > USED AT LINE 1413 IN monty.asm
                    > USED AT LINE 1416 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 798 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 803 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1605 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1104 IN monty.asm
                    > USED AT LINE 1435 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
REMAIN_:            0327 DEFINED AT LINE 241 IN monty.asm
GO_:                032A DEFINED AT LINE 243 IN monty.asm
IDENTU_:            032D DEFINED AT LINE 245 IN monty.asm
IDENTL_:            0330 DEFINED AT LINE 247 IN monty.asm
IF_:                0333 DEFINED AT LINE 249 IN monty.asm
INV_:               0336 DEFINED AT LINE 251 IN monty.asm
MUL_:               033C DEFINED AT LINE 254 IN monty.asm
NOT_:               033F DEFINED AT LINE 256 IN monty.asm
NUM_:               0344 DEFINED AT LINE 259 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
HEXNUM_:            0347 DEFINED AT LINE 261 IN monty.asm
OR_:                034A DEFINED AT LINE 263 IN monty.asm
XOR_:               034D DEFINED AT LINE 265 IN monty.asm
STRING_:            0350 DEFINED AT LINE 267 IN monty.asm
SUB_:               0353 DEFINED AT LINE 269 IN monty.asm
EQ_:                0356 DEFINED AT LINE 271 IN monty.asm
EQ0:                0360 DEFINED AT LINE 278 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
EQ1:                0361 DEFINED AT LINE 280 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
GT_:                0365 DEFINED AT LINE 284 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
DIV_:               0382 DEFINED AT LINE 306 IN monty.asm
NOP_:               0385 DEFINED AT LINE 308 IN monty.asm
ADD:                0387 DEFINED AT LINE 315 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0394 DEFINED AT LINE 323 IN monty.asm
                    > USED AT LINE 319 IN monty.asm
ADD2:               0395 DEFINED AT LINE 325 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               0397 DEFINED AT LINE 328 IN monty.asm
                    > USED AT LINE 721 IN monty.asm
                    > USED AT LINE 1008 IN monty.asm
                    > USED AT LINE 1145 IN monty.asm
ADDR:               03A0 DEFINED AT LINE 336 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03AC DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B3 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 362 IN monty.asm
                    > USED AT LINE 372 IN monty.asm
OR:                 03B7 DEFINED AT LINE 354 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
XOR:                03C0 DEFINED AT LINE 363 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
XOR1:               03C1 DEFINED AT LINE 365 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
ARG:                03C9 DEFINED AT LINE 377 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03E7 DEFINED AT LINE 398 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
ARG0A:              03F0 DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 383 IN monty.asm
                    > USED AT LINE 390 IN monty.asm
ARG1:               03F5 DEFINED AT LINE 409 IN monty.asm
                    > USED AT LINE 402 IN monty.asm
ARG1A:              03FD DEFINED AT LINE 416 IN monty.asm
                    > USED AT LINE 408 IN monty.asm
ARG_LIST:           0400 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          040A DEFINED AT LINE 432 IN monty.asm
                    > USED AT LINE 450 IN monty.asm
ARG_LIST2:          0416 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 437 IN monty.asm
ARG_LIST3:          041E DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 439 IN monty.asm
                    > USED AT LINE 446 IN monty.asm
ARG_LIST4:          0421 DEFINED AT LINE 451 IN monty.asm
                    > USED AT LINE 435 IN monty.asm
ARG_LIST5:          0426 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
ARRBEGIN:           0432 DEFINED AT LINE 467 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             044E DEFINED AT LINE 481 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            0468 DEFINED AT LINE 497 IN monty.asm
                    > USED AT LINE 513 IN monty.asm
ARREND2:            0478 DEFINED AT LINE 507 IN monty.asm
                    > USED AT LINE 503 IN monty.asm
ARRINDEX:           049C DEFINED AT LINE 534 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04A4 DEFINED AT LINE 540 IN monty.asm
ARRINDEX1:          04A5 DEFINED AT LINE 542 IN monty.asm
                    > USED AT LINE 539 IN monty.asm
ARRINDEX2:          04B1 DEFINED AT LINE 551 IN monty.asm
                    > USED AT LINE 548 IN monty.asm
ASSIGN:             04B4 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
ASSIGN0:            04B6 DEFINED AT LINE 559 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
ASSIGNX:            04B7 DEFINED AT LINE 561 IN monty.asm
ASSIGN1:            04C3 DEFINED AT LINE 569 IN monty.asm
                    > USED AT LINE 566 IN monty.asm
BLOCK:              04C5 DEFINED AT LINE 572 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04C9 DEFINED AT LINE 576 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
BLOCK2:             04F5 DEFINED AT LINE 603 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
BLOCK3:             04F8 DEFINED AT LINE 606 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
BLOCK4:             0500 DEFINED AT LINE 612 IN monty.asm
                    > USED AT LINE 583 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 587 IN monty.asm
BLOCK5:             0503 DEFINED AT LINE 615 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
BLOCK6:             052B DEFINED AT LINE 634 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
BLOCKEND:           052E DEFINED AT LINE 638 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1328 IN monty.asm
BLOCKEND1:          055A DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 653 IN monty.asm
BLOCKEND2:          0566 DEFINED AT LINE 667 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
BLOCKEND3:          0578 DEFINED AT LINE 681 IN monty.asm
                    > USED AT LINE 673 IN monty.asm
CHAR:               0583 DEFINED AT LINE 692 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              0586 DEFINED AT LINE 694 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
CHAR2:              0592 DEFINED AT LINE 703 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
CHAR3:              0595 DEFINED AT LINE 706 IN monty.asm
                    > USED AT LINE 698 IN monty.asm
DIV:                0598 DEFINED AT LINE 710 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
DOT:                05AB DEFINED AT LINE 723 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05B7 DEFINED AT LINE 731 IN monty.asm
                    > USED AT LINE 728 IN monty.asm
DOT2:               05C0 DEFINED AT LINE 736 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
DOT3:               05CA DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
DOT4:               05CE DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 730 IN monty.asm
                    > USED AT LINE 735 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DIVIDE:             05D5 DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 715 IN monty.asm
DIVIDE1:            05DA DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
DIVIDE2:            05E7 DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 761 IN monty.asm
DIVIDE3:            05E8 DEFINED AT LINE 766 IN monty.asm
                    > USED AT LINE 763 IN monty.asm
EQUALS:             05EE DEFINED AT LINE 774 IN monty.asm
                    > USED AT LINE 282 IN monty.asm
LESSTHANEQ:         05F6 DEFINED AT LINE 782 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           05FB DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          0600 DEFINED AT LINE 794 IN monty.asm
                    > USED AT LINE 785 IN monty.asm
TRUE1:              0603 DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 1176 IN monty.asm
NULL1:              0609 DEFINED AT LINE 801 IN monty.asm
FALSE1:             0609 DEFINED AT LINE 802 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 1164 IN monty.asm
GO:                 060F DEFINED AT LINE 810 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
                    > USED AT LINE 1291 IN monty.asm
GO1:                0610 DEFINED AT LINE 812 IN monty.asm
                    > USED AT LINE 983 IN monty.asm
                    > USED AT LINE 985 IN monty.asm
                    > USED AT LINE 1303 IN monty.asm
GO2:                0616 DEFINED AT LINE 817 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
GO3:                063D DEFINED AT LINE 838 IN monty.asm
                    > USED AT LINE 820 IN monty.asm
GO4:                0656 DEFINED AT LINE 857 IN monty.asm
                    > USED AT LINE 867 IN monty.asm
GO5:                065C DEFINED AT LINE 864 IN monty.asm
                    > USED AT LINE 856 IN monty.asm
GO6:                0667 DEFINED AT LINE 870 IN monty.asm
                    > USED AT LINE 846 IN monty.asm
GO7:                067F DEFINED AT LINE 887 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
GO8:                0685 DEFINED AT LINE 893 IN monty.asm
                    > USED AT LINE 897 IN monty.asm
GO9:                068A DEFINED AT LINE 898 IN monty.asm
                    > USED AT LINE 892 IN monty.asm
GO10:               0698 DEFINED AT LINE 910 IN monty.asm
                    > USED AT LINE 830 IN monty.asm
                    > USED AT LINE 886 IN monty.asm
GO11:               069D DEFINED AT LINE 914 IN monty.asm
                    > USED AT LINE 837 IN monty.asm
GO12:               069E DEFINED AT LINE 916 IN monty.asm
                    > USED AT LINE 909 IN monty.asm
HEXNUM:             06AB DEFINED AT LINE 924 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
HEXNUM1:            06AE DEFINED AT LINE 926 IN monty.asm
                    > USED AT LINE 943 IN monty.asm
HEXNUM2:            06B6 DEFINED AT LINE 932 IN monty.asm
                    > USED AT LINE 930 IN monty.asm
IDENTU:             06C8 DEFINED AT LINE 944 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
IDENTL:             06CD DEFINED AT LINE 948 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             06D2 DEFINED AT LINE 952 IN monty.asm
                    > USED AT LINE 947 IN monty.asm
IF:                 06DF DEFINED AT LINE 965 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IFTE:               06EB DEFINED AT LINE 975 IN monty.asm
                    > USED AT LINE 969 IN monty.asm
IFTE1:              06EC DEFINED AT LINE 977 IN monty.asm
                    > USED AT LINE 972 IN monty.asm
MUL:                06F8 DEFINED AT LINE 987 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
MUL2:               06FA DEFINED AT LINE 990 IN monty.asm
MUL3:               0702 DEFINED AT LINE 995 IN monty.asm
                    > USED AT LINE 1004 IN monty.asm
NUM:                0716 DEFINED AT LINE 1010 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
NUM0:               071F DEFINED AT LINE 1016 IN monty.asm
                    > USED AT LINE 1014 IN monty.asm
NUM1:               0720 DEFINED AT LINE 1018 IN monty.asm
                    > USED AT LINE 1035 IN monty.asm
NUM2:               0738 DEFINED AT LINE 1036 IN monty.asm
                    > USED AT LINE 934 IN monty.asm
                    > USED AT LINE 936 IN monty.asm
                    > USED AT LINE 1021 IN monty.asm
                    > USED AT LINE 1023 IN monty.asm
NUM3:               0743 DEFINED AT LINE 1044 IN monty.asm
                    > USED AT LINE 1039 IN monty.asm
REMAIN:             0746 DEFINED AT LINE 1048 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
SHIFTLEFT:          074C DEFINED AT LINE 1055 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         0754 DEFINED AT LINE 1062 IN monty.asm
                    > USED AT LINE 1065 IN monty.asm
SHIFTLEFT2:         0755 DEFINED AT LINE 1064 IN monty.asm
                    > USED AT LINE 1061 IN monty.asm
SHIFTRIGHT:         075C DEFINED AT LINE 1072 IN monty.asm
                    > USED AT LINE 288 IN monty.asm
SHIFTRIGHT1:        0764 DEFINED AT LINE 1079 IN monty.asm
                    > USED AT LINE 1083 IN monty.asm
SHIFTRIGHT2:        0768 DEFINED AT LINE 1082 IN monty.asm
                    > USED AT LINE 1078 IN monty.asm
STRING:             076F DEFINED AT LINE 1091 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
STRING1:            0778 DEFINED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1105 IN monty.asm
                    > USED AT LINE 1107 IN monty.asm
STRING2:            077B DEFINED AT LINE 1102 IN monty.asm
                    > USED AT LINE 1097 IN monty.asm
SUB:                0797 DEFINED AT LINE 1124 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
SUB0:               07A3 DEFINED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1129 IN monty.asm
SUB1:               07AF DEFINED AT LINE 1139 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
SUB3:               07B0 DEFINED AT LINE 1141 IN monty.asm
                    > USED AT LINE 1138 IN monty.asm
COMMAND:            07B7 DEFINED AT LINE 1150 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               0805 DEFINED AT LINE 1185 IN monty.asm
                    > USED AT LINE 1156 IN monty.asm
CAPTURE:            0812 DEFINED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1160 IN monty.asm
COMMENT:            0832 DEFINED AT LINE 1216 IN monty.asm
                    > USED AT LINE 1154 IN monty.asm
                    > USED AT LINE 1220 IN monty.asm
BYTES:              083B DEFINED AT LINE 1224 IN monty.asm
                    > USED AT LINE 1158 IN monty.asm
BYTES1:             083E DEFINED AT LINE 1226 IN monty.asm
                    > USED AT LINE 1307 IN monty.asm
FUNC:               0843 DEFINED AT LINE 1231 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
INPUT:              085F DEFINED AT LINE 1255 IN monty.asm
                    > USED AT LINE 1166 IN monty.asm
KEY:                086A DEFINED AT LINE 1265 IN monty.asm
                    > USED AT LINE 1168 IN monty.asm
OUTPUT:             0873 DEFINED AT LINE 1274 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
REPEAT:             087C DEFINED AT LINE 1285 IN monty.asm
                    > USED AT LINE 1172 IN monty.asm
SELECT:             0884 DEFINED AT LINE 1295 IN monty.asm
                    > USED AT LINE 1174 IN monty.asm
WORDS:              088E DEFINED AT LINE 1305 IN monty.asm
                    > USED AT LINE 1178 IN monty.asm
BLOCKEXIT:          0894 DEFINED AT LINE 1309 IN monty.asm
                    > USED AT LINE 1180 IN monty.asm
BLOCKEXIT1:         089B DEFINED AT LINE 1315 IN monty.asm
                    > USED AT LINE 1313 IN monty.asm
FILTER:             08BA DEFINED AT LINE 1335 IN monty.asm
MAP:                08BA DEFINED AT LINE 1336 IN monty.asm
PRTDEC:             08BC DEFINED AT LINE 1344 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 135
PRTDEC0:            08CB DEFINED AT LINE 1355 IN monty.asm
                    > USED AT LINE 1346 IN monty.asm
PRTDEC1:            08ED DEFINED AT LINE 1371 IN monty.asm
                    > USED AT LINE 1359 IN monty.asm
                    > USED AT LINE 1361 IN monty.asm
                    > USED AT LINE 1363 IN monty.asm
                    > USED AT LINE 1365 IN monty.asm
                    > USED AT LINE 1368 IN monty.asm
PRTDEC2:            08EF DEFINED AT LINE 1373 IN monty.asm
                    > USED AT LINE 1376 IN monty.asm
PRTDEC3:            08FF DEFINED AT LINE 1385 IN monty.asm
                    > USED AT LINE 1380 IN monty.asm
PRTDEC4:            0900 DEFINED AT LINE 1387 IN monty.asm
                    > USED AT LINE 1384 IN monty.asm
PRTHEX:             0904 DEFINED AT LINE 1391 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            090F DEFINED AT LINE 1399 IN monty.asm
                    > USED AT LINE 1394 IN monty.asm
                    > USED AT LINE 1396 IN monty.asm
PRTHEX3:            0918 DEFINED AT LINE 1407 IN monty.asm
                    > USED AT LINE 1405 IN monty.asm
PRTSTR0:            0923 DEFINED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
PRTSTR:             0927 DEFINED AT LINE 1418 IN monty.asm
                    > USED AT LINE 734 IN monty.asm
                    > USED AT LINE 1485 IN monty.asm
NESTING:            092C DEFINED AT LINE 1434 IN monty.asm
                    > USED AT LINE 1529 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
NESTING0:           0936 DEFINED AT LINE 1440 IN monty.asm
                    > USED AT LINE 1436 IN monty.asm
                    > USED AT LINE 1438 IN monty.asm
NESTING1A:          093D DEFINED AT LINE 1445 IN monty.asm
                    > USED AT LINE 1442 IN monty.asm
NESTING1:           0940 DEFINED AT LINE 1448 IN monty.asm
                    > USED AT LINE 1439 IN monty.asm
NESTING2:           094F DEFINED AT LINE 1457 IN monty.asm
                    > USED AT LINE 1452 IN monty.asm
                    > USED AT LINE 1454 IN monty.asm
NESTING3:           0951 DEFINED AT LINE 1460 IN monty.asm
                    > USED AT LINE 1456 IN monty.asm
NESTING4:           095C DEFINED AT LINE 1467 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
PROMPT:             095E DEFINED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1513 IN monty.asm
CRLF:               0967 DEFINED AT LINE 1476 IN monty.asm
                    > USED AT LINE 1582 IN monty.asm
PRINTSTR:           096E DEFINED AT LINE 1483 IN monty.asm
                    > USED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1613 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 128
INIT:               0975 DEFINED AT LINE 1490 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1508 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              098E DEFINED AT LINE 1500 IN monty.asm
                    > USED AT LINE 1503 IN monty.asm
START:              0993 DEFINED AT LINE 1506 IN monty.asm
INTERPRET:          09A9 DEFINED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
INTERPRET2:         09B3 DEFINED AT LINE 1518 IN monty.asm
                    > USED AT LINE 1562 IN monty.asm
INTERPRET3:         09BB DEFINED AT LINE 1525 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
INTERPRET4:         09C1 DEFINED AT LINE 1531 IN monty.asm
                    > USED AT LINE 1523 IN monty.asm
INTERPRET5:         09C6 DEFINED AT LINE 1537 IN monty.asm
                    > USED AT LINE 1571 IN monty.asm
                    > USED AT LINE 1585 IN monty.asm
INTERPRET6:         09D7 DEFINED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1540 IN monty.asm
INTERPRET7:         09E5 DEFINED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
INTERPRET8:         09F8 DEFINED AT LINE 1587 IN monty.asm
                    > USED AT LINE 1543 IN monty.asm
NEXT:               0A00 DEFINED AT LINE 1593 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
NEXT1:              0A0F DEFINED AT LINE 1604 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
EXIT_:              0A16 DEFINED AT LINE 1608 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
ERROR:              0A19 DEFINED AT LINE 1612 IN monty.asm
                    > USED AT LINE 1183 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2103S43:  0B65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2104S43:  0BCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2105S43:  0C2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2106S43:  0C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2107S43:  0CF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2108S43:  0D5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2109S43:  0DC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2110S43:  0E29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2111S43:  0E8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2112S43:  0EF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2113S43:  0F5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2114S43:  0FC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2115S43:  102F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2116S43:  1097 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2117S43:  1105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2118S43:  1173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2119S43:  11DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2120S43:  124F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2121S43:  12C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2122S43:  1335 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2123S43:  13A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2124S43:  1417 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2125S43:  1493 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2126S43:  1503 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2127S43:  156F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2128S43:  15DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2129S43:  1651 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2130S43:  16CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2131S43:  1739 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2132S43:  17A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2133S43:  1811 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2134S43:  188D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  1901 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  196D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  19E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  1A59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  1AC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  1B33 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  1BA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  1C0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  1C79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  1CE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  1D51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  1DBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  1E29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  1E95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  1F01 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  1F6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  1FDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  204B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  20BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  212B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  2195 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  21FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  226F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  22E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  235D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  23D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  2461 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  24E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  2557 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  25C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  2639 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  26AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  271F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  2795 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  280D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  288B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  290D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  298B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  2A13 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  2A9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  2B2D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  2BC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  2C47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  2CD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  2D61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  2DF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  2E7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  2F1B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  2FA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  303B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  30D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  316D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  3217 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  32C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  333D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  33B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  3441 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  34CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  3575 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  3621 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  36CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  377D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  380B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  38A5 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            38B0 DEFINED AT LINE 133
EXECSTR:            38B6 DEFINED AT LINE 140
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3980 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 823 IN monty.asm
                    > USED AT LINE 1492 IN monty.asm
                    > USED AT LINE 1507 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1497 IN monty.asm
RESTARTS:           3AD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3AD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3AD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3AD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3AD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3AD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3ADA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3ADC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3ADE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3AE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3AE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3AE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3AE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1494 IN monty.asm
VDATAWIDTH:         3AE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 501 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
                    > USED AT LINE 564 IN monty.asm
                    > USED AT LINE 1227 IN monty.asm
VTIBPTR:            3AE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1516 IN monty.asm
                    > USED AT LINE 1588 IN monty.asm
VNEXT:              3AEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1491 IN monty.asm
VHEAPPTR:           3AEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 427 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
                    > USED AT LINE 491 IN monty.asm
                    > USED AT LINE 523 IN monty.asm
                    > USED AT LINE 524 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
                    > USED AT LINE 1092 IN monty.asm
                    > USED AT LINE 1111 IN monty.asm
                    > USED AT LINE 1202 IN monty.asm
                    > USED AT LINE 1207 IN monty.asm
                    > USED AT LINE 1208 IN monty.asm
                    > USED AT LINE 1233 IN monty.asm
                    > USED AT LINE 1248 IN monty.asm
                    > USED AT LINE 1250 IN monty.asm
VBLOCKEND:          3AEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           3AF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 337 IN monty.asm
                    > USED AT LINE 339 IN monty.asm
                    > USED AT LINE 340 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
                    > USED AT LINE 562 IN monty.asm
                    > USED AT LINE 956 IN monty.asm
VHASHSTR:           3AF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           3AF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            3AF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 717 IN monty.asm
                    > USED AT LINE 1049 IN monty.asm
VTEMP1:             3AF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 484 IN monty.asm
                    > USED AT LINE 525 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
                    > USED AT LINE 847 IN monty.asm
                    > USED AT LINE 868 IN monty.asm
                    > USED AT LINE 875 IN monty.asm
                    > USED AT LINE 881 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
                    > USED AT LINE 1206 IN monty.asm
VTEMP2:             3AFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 848 IN monty.asm
                    > USED AT LINE 869 IN monty.asm
TBPTR:              3AFC DEFINED AT LINE 43 IN ram.asm
TIB:                3B00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1522 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
                    > USED AT LINE 1574 IN monty.asm
                    > USED AT LINE 1589 IN monty.asm
PAD:                3C00 DEFINED AT LINE 49 IN ram.asm
HEAP:               3D00 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 617 IN monty.asm
