0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 54               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 54               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 54               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 54               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 54               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 54               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 54               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 54               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 54               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 54               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 52               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 54               LD   (RST08),HL   
0094   22 D2 54               LD   (RST10),HL   
0097   22 D4 54               LD   (RST18),HL   
009A   22 D6 54               LD   (RST20),HL   
009D   22 D8 54               LD   (RST28),HL   
00A0   22 DA 54               LD   (RST30),HL   
00A3   22 DE 54               LD   (INTVEC),HL   
00A6   22 E0 54               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 54               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 54               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 52                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 53                  DW   BUF   ; vBUFPtr pointer into BUF
0188   45 0E                  DW   next   ; nNext
018A   1C 55                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 88 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 0F 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 2B 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 DA 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 10 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 79 05               JP   rbrace   
031B                TICK_:       
031B   C3 0A 06               JP   tick   
031E                SEMICOLON_:      
031E   C3 01 07               JP   semicolon   
0321                DOT_:        
0321   C3 CB 07               JP   dot   
0324                COLON_:      
0324   C3 9B 04               JP   colon   
0327                UPCASE_:      
0327   C3 A5 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 AA 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 BC 0A               JP   question   
0330                STAR_:       
0330   C3 3F 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 26 09               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 5B 0B               JP   num   
0347                HASH_:       
0347   C3 7B 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 E9 09               JP   caret   
0350                COMMA_:      
0350   C3 9D 07               JP   comma   
0353                DQUOTE_:      
0353   C3 38 0C               JP   dquote   
0356                MINUS_:      
0356   C3 60 0C               JP   minus   
0359                EQ_:         
0359   CD E6 0C               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   D1 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 1E 09               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA 25 0C               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA 15 0C               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 2F 09               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 34 09               JP   lessthan   
0384                SLASH_:      
0384   C3 1F 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 0D 0C               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 D3 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 D3 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 54            LD   de,(vPointer)   
03AD   21 F4 54               LD   hl,vPointer   
03B0   C3 C7 0C               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   C3 C1 03               JP   or   
03C1                OR:          
03C1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C2   E1                     POP   hl   
03C3   7B                     LD   a,e   
03C4   B5                     OR   l   
03C5   6F                     LD   l,a   
03C6   7A                     LD   a,d   
03C7   B4                     OR   h   
03C8   18 F0                  JR   and1   
03CA                XOR:         
03CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CB                XOR1:        
03CB   E1                     POP   hl   
03CC   7B                     LD   a,e   
03CD   AD                     XOR   l   
03CE   6F                     LD   l,a   
03CF   7A                     LD   a,d   
03D0   AC                     XOR   h   
03D1   67                     LD   h,a   
03D2   E5                     PUSH   hl   
03D3   DD E9                  JP   (ix)   
03D5                INVERT:      ; Bitwise INVert the top member of the stack
03D5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D8   18 F1                  JR   xor1   
03DA                             ; %a .. %z
03DA                             ; -- value
03DA                             ; returns value of arg
03DA                PERCENT:      
03DA                ARG:         
03DA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DD   FD 56 05               LD   d,(iy+5)   
03E0   EB                     EX   de,hl   
03E1   7D                     LD   a,l   ; arg_list* == null, skip
03E2   B4                     OR   h   
03E3   28 1A                  JR   z,arg0a   
03E5   23                     INC   hl   ; a = num_args, hl = arg_list*
03E6   7E                     LD   a,(hl)   
03E7   23                     INC   hl   
03E8   B7                     OR   a   
03E9   28 14                  JR   z,arg0a   ; num_args == 0, skip
03EB   5F                     LD   e,a   ; e = a = num_args
03EC   03                     INC   bc   ; a = next char = dollar_name
03ED   0A                     LD   a,(bc)   
03EE   C5                     PUSH   bc   ; save IP
03EF   43                     LD   b,e   ; b = e = num_args
03F0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F3   FD 56 03               LD   d,(iy+3)   
03F6                ARG0:        
03F6   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F7   1B                     DEC   de   
03F8   BE                     CP   (hl)   
03F9   28 09                  JR   z,arg1   
03FB   23                     INC   hl   ; hl = next arg_list*
03FC   10 F8                  DJNZ   arg0   
03FE   C1                     POP   bc   ; no match, restore IP
03FF                ARG0A:       
03FF   11 00 00               LD   de,0   ; return 0
0402   18 08                  JR   arg1a   
0404                ARG1:        
0404   C1                     POP   bc   ; restore IP
0405   EB                     EX   de,hl   ; hl = arg*
0406   22 F4 54               LD   (vPointer),hl   ; store arg* in setter
0409   5E                     LD   e,(hl)   
040A   23                     INC   hl   
040B   56                     LD   d,(hl)   ; de = arg
040C                ARG1A:       
040C   D5                     PUSH   de   ; push arg
040D   DD E9                  JP   (ix)   
040F                LBRACK:      
040F                ARRAYSTART:      
040F   11 00 00               LD   de,0   ; create stack frame
0412   D5                     PUSH   de   ; push null for IP
0413   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0416   FD 56 05               LD   d,(iy+5)   ; 
0419   D5                     PUSH   de   ; 
041A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
041D   FD 56 03               LD   d,(iy+3)   ; 
0420   D5                     PUSH   de   ; 
0421   FD E5                  PUSH   iy   ; push BP
0423   FD 21 00 00            LD   iy,0   ; BP = SP
0427   FD 39                  ADD   iy,sp   
0429   DD E9                  JP   (ix)   
042B                RBRACK:      
042B                ARRAYEND:      
042B   FD 54                  LD   d,iyh   ; de = BP
042D   FD 5D                  LD   e,iyl   
042F   ED 43 00 55            LD   (vTemp1),bc   ; save IP
0433   62 6B                  LD   hl,de   ; hl = de = BP
0435   B7                     OR   a   
0436   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0438   CB 3C                  SRL   h   ; 
043A   CB 1D                  RR   l   
043C   44 4D                  LD   bc,hl   ; bc = count
043E   2A F0 54               LD   hl,(vHeapPtr)   ; hl = array[-4]
0441   71                     LD   (hl),c   ; write num items in length word
0442   23                     INC   hl   
0443   70                     LD   (hl),b   
0444   23                     INC   hl   ; hl = array[0], bc = count
0445                             ; de = BP, hl = array[0], bc = count
0445   18 15                  JR   arrayEnd3   
0447                ARRAYEND1:      
0447   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
044A   77                     LD   (hl),a   ; write lsb of array item
044B   23                     INC   hl   ; move to msb of array item
044C   3A E6 54               LD   a,(vDataWidth)   ; vDataWidth=1?
044F   3D                     DEC   a   
0450   28 05                  JR   z,arrayEnd2   
0452   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0455   77                     LD   (hl),a   ; write msb of array item
0456   23                     INC   hl   ; move to next word in array
0457                ARRAYEND2:      
0457   FD 2B                  DEC   iy   ; move to next word on stack
0459   FD 2B                  DEC   iy   
045B   0B                     DEC   bc   ; dec items count
045C                ARRAYEND3:      
045C   79                     LD   a,c   ; if not zero loop
045D   B0                     OR   b   
045E   20 E7                  JR   nz,arrayEnd1   
0460   EB                     EX   de,hl   ; de = end of array, hl = BP
0461   F9                     LD   sp,hl   ; sp = BP
0462   E1                     POP   hl   ; de = end of array, hl = old BP
0463   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0464   FD 62                  LD   iyh,d   
0466   FD 6B                  LD   iyl,e   
0468   D1                     POP   de   ; pop arg_list (discard)
0469   D1                     POP   de   ; pop first_arg* (discard)
046A   D1                     POP   de   ; pop IP (discard)
046B   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = array[-2]
046F   13                     INC   de   
0470   13                     INC   de   
0471   D5                     PUSH   de   ; return array[0]
0472   22 F0 54               LD   (vHeapPtr),hl   ; move heap* to end of array
0475   ED 4B 00 55            LD   bc,(vTemp1)   ; restore IP
0479   DD E9                  JP   (ix)   
047B                             ; index of an array, based on vDataWidth
047B                             ; array* num -- value    ; also sets vPointer to address
047B                HASH:        
047B                ARRAYINDEX:      
047B   E1                     POP   hl   ; hl = index
047C   D1                     POP   de   ; de = array
047D   3A E6 54               LD   a,(vDataWidth)   ; a = data width
0480   3D                     DEC   a   
0481   28 01                  JR   z,arrayIndex1   
0483                ARRAYINDEX0:      
0483   29                     ADD   hl,hl   ; if data width = 2 then double
0484                ARRAYINDEX1:      
0484   19                     ADD   hl,de   ; add addr
0485   22 F4 54               LD   (vPointer),hl   ; store address in setter
0488   16 00                  LD   d,0   
048A   5E                     LD   e,(hl)   
048B   B7                     OR   a   ; check data width again
048C   28 02                  JR   z,arrayIndex2   
048E   23                     INC   hl   
048F   56                     LD   d,(hl)   
0490                ARRAYINDEX2:      
0490   D5                     PUSH   de   
0491   DD E9                  JP   (ix)   
0493                             ; /as size of an array, num elements, ignores vDataWidth :-/
0493                             ; array* -- num
0493                ARRAYSIZE:      
0493   E1                     POP   hl   
0494   2B                     DEC   hl   ; msb size
0495   56                     LD   d,(hl)   
0496   2B                     DEC   hl   ; lsb size
0497   5E                     LD   e,(hl)   
0498   D5                     PUSH   de   
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                             ; format: numLocals totNumArgs argChars...
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 54               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   E5                     PUSH   hl   ; save start of arg_list
04A2   23                     INC   hl   ; skip length fields to start of string
04A3   23                     INC   hl   
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 61                  CP   "a"   ; < "a" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 54               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   72                     LD   (hl),d   ; write number of locals at start - 1
04CD   23                     INC   hl   
04CE   73                     LD   (hl),e   ; write number of args + locals at start - 2
04CF   DD E9                  JP   (ix)   
04D1                             ; value _oldValue --            ; uses address in vPointer
04D1                ASSIGN:      
04D1   E1                     POP   hl   ; discard last accessed value
04D2   E1                     POP   hl   ; hl = new value
04D3                ASSIGN0:      
04D3   EB                     EX   de,hl   ; de = new value
04D4                ASSIGNX:      
04D4   2A F4 54               LD   hl,(vPointer)   
04D7   73                     LD   (hl),e   
04D8   3A E6 54               LD   a,(vDataWidth)   
04DB   3D                     DEC   a   ; is it byte?
04DC   28 02                  JR   z,assign1   
04DE   23                     INC   hl   
04DF   72                     LD   (hl),d   
04E0                ASSIGN1:      
04E0   DD E9                  JP   (ix)   
04E2                             ; /ab absolute
04E2                             ; num -- num
04E2                ABSOLUTE:      
04E2   E1                     POP   hl   
04E3   CB 7C                  BIT   7,h   
04E5   C8                     RET   z   
04E6   AF                     XOR   a   
04E7   95                     SUB   l   
04E8   6F                     LD   l,a   
04E9   9F                     SBC   a,a   
04EA   94                     SUB   h   
04EB   67                     LD   h,a   
04EC   E5                     PUSH   hl   
04ED   DD E9                  JP   (ix)   
04EF                             ; /ad addrOf
04EF                             ; char -- addr
04EF                ADDROF:      
04EF   E1                     POP   hl   ; a = char
04F0   7D                     LD   a,l   
04F1   FE 7B                  CP   "z"+1   ; if a > z then exit
04F3   30 19                  JR   nc,addrOf2   
04F5   D6 41                  SUB   "A"   ; a - 65
04F7   38 15                  JR   c,addrOf2   ; if < A then exit
04F9   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04FB   38 06                  JR   c,addrOf1   
04FD   D6 06                  SUB   "a"-("Z"+1)   
04FF   FE 1A                  CP   "Z"-"A"+1   
0501   38 0B                  JR   c,addrOf2   ; if < a then exit
0503                ADDROF1:      
0503   87                     ADD   a,a   ; double a
0504   21 00 54               LD   hl,VARS   ; hl = VARS + a
0507   85                     ADD   a,l   
0508   6F                     LD   l,a   
0509   3E 00                  LD   a,0   
050B   8C                     ADC   a,h   
050C   67                     LD   h,a   
050D   E5                     PUSH   hl   
050E                ADDROF2:      
050E   DD E9                  JP   (ix)   
0510                LBRACE:      
0510                BLOCKSTART:      
0510   C5                     PUSH   bc   ; return pointer to first { of block
0511   03                     INC   bc   
0512   16 01                  LD   d,1   ; nesting: count first parenthesis
0514                BLOCKSTART1:      ; Skip to end of definition
0514   0A                     LD   a,(bc)   ; Get the next character
0515   03                     INC   bc   ; Point to next character
0516   FE 21                  CP   " " + 1   ; ignore whitespace
0518   38 FA                  JR   c,blockStart1   
051A   FE 29                  CP   ")"   
051C   28 2D                  JR   z,blockStart4   
051E   FE 7D                  CP   "}"   
0520   28 29                  JR   z,blockStart4   
0522   FE 5D                  CP   "]"   
0524   28 25                  JR   z,blockStart4   
0526   FE 28                  CP   "("   
0528   28 16                  JR   z,blockStart2   
052A   FE 7B                  CP   "{"   
052C   28 12                  JR   z,blockStart2   
052E   FE 5B                  CP   "["   
0530   28 0E                  JR   z,blockStart2   
0532   FE 27                  CP   "'"   
0534   28 0D                  JR   z,blockStart3   
0536   FE 60                  CP   "`"   
0538   28 09                  JR   z,blockStart3   
053A   FE 22                  CP   DQ   
053C   28 05                  JR   z,blockStart3   
053E   18 D4                  JR   blockStart1   
0540                BLOCKSTART2:      
0540   14                     INC   d   
0541   18 D1                  JR   blockStart1   
0543                BLOCKSTART3:      
0543   3E 80                  LD   a,$80   
0545   AA                     XOR   d   
0546   57                     LD   d,a   
0547   20 CB                  JR   nz,blockStart1   
0549   18 03                  JR   blockStart5   
054B                BLOCKSTART4:      
054B   15                     DEC   d   
054C   20 C6                  JR   nz,blockStart1   ; get the next element
054E                BLOCKSTART5:      
054E   60 69                  LD   hl,bc   ; hl = IP
0550   11 1C 55               LD   de,HEAP   ; is IP pointing to object in heap
0553   B7                     OR   a   ; IP - HEAP
0554   ED 52                  SBC   hl,de   
0556   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0558   28 1C                  JR   z,blockStart6   
055A   60 69                  LD   hl,bc   ; hl = IP
055C   D1                     POP   de   ; de = block*
055D   ED 43 00 55            LD   (vTemp1),bc   ; save IP
0561   B7                     OR   a   ; bc = size
0562   ED 52                  SBC   hl,de   
0564   44 4D                  LD   bc,hl   
0566   EB                     EX   de,hl   ; hl = block* de = heap*
0567   ED 5B F0 54            LD   de,(vHeapPtr)   
056B   D5                     PUSH   de   ; return hblock*
056C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
056E   ED 53 F0 54            LD   (vHeapPtr),de   ; heap* += size
0572   ED 4B 00 55            LD   bc,(vTemp1)   ; restore IP
0576                BLOCKSTART6:      
0576   0B                     DEC   bc   ; balanced, exit
0577   DD E9                  JP   (ix)   
0579                RBRACE:      
0579                BLOCKEND:      
0579   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
057C   FD 56 01               LD   d,(iy+1)   
057F   ED 53 00 55            LD   (vTemp1),de   
0583   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0586   FD 56 07               LD   d,(iy+7)   
0589   ED 53 02 55            LD   (vTemp2),de   
058D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0590   FD 56 03               LD   d,(iy+3)   
0593   EB                     EX   de,hl   
0594   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0597   FD 56 01               LD   d,(iy+1)   
059A   13                     INC   de   ; for carry flag <=
059B   B7                     OR   a   
059C   ED 52                  SBC   hl,de   
059E   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
05A0   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
05A2   FD 5D                  LD   e,iyl   
05A4   21 08 00               LD   hl,8   
05A7   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A8   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A9   18 0C                  JR   blockEnd2   
05AB                BLOCKEND1:      ; same scope
05AB   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05AE   FD 56 03               LD   d,(iy+3)   
05B1   EB                     EX   de,hl   
05B2   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05B4   FD 5D                  LD   e,iyl   
05B6   EB                     EX   de,hl   
05B7                BLOCKEND2:      
05B7   44 4D                  LD   bc,hl   ; bc = hl = BP
05B9   B7                     OR   a   ; hl = BP - SP = count
05BA   ED 72                  SBC   hl,sp   
05BC   7D                     LD   a,l   
05BD   B4                     OR   h   
05BE   28 09                  JR   z,blockEnd3   
05C0   C5                     PUSH   bc   ; bc = count, hl = BP
05C1   44 4D                  LD   bc,hl   
05C3   E1                     POP   hl   
05C4   2B                     DEC   hl   ; hl = BP-1
05C5   1B                     DEC   de   ; de = args*-1
05C6   ED B8                  LDDR      
05C8   13                     INC   de   
05C9                BLOCKEND3:      
05C9   EB                     EX   de,hl   ; sp = de = new tos*
05CA   F9                     LD   sp,hl   
05CB   ED 4B 02 55            LD   bc,(vTemp2)   
05CF   FD 2A 00 55            LD   iy,(vTemp1)   
05D3   ED 5B F2 54            LD   de,(vRecur)   ; de = recur vector
05D7   7B                     LD   a,e   ; check for NUL
05D8   B2                     OR   d   
05D9   20 02                  JR   nz,blockEnd4   
05DB   DD E9                  JP   (ix)   
05DD                BLOCKEND4:      
05DD   21 00 00               LD   hl,0   ; clear recur vector
05E0   22 F2 54               LD   (vRecur),hl   
05E3   C3 EA 09               JP   go1   ; execute de
05E6                             ; /br break from loop
05E6                             ; --
05E6                BREAK:       
05E6   E1                     POP   hl   ; hl = condition, break if false
05E7   7D                     LD   a,l   
05E8   B4                     OR   h   
05E9   28 02                  JR   z,break1   
05EB   DD E9                  JP   (ix)   
05ED                BREAK1:      
05ED   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05EF   FD 54                  LD   d,iyh   
05F1   21 08 00               LD   hl,8   
05F4   19                     ADD   hl,de   
05F5   23                     INC   hl   
05F6   23                     INC   hl   
05F7   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05FA   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05FD   C3 79 05               JP   blockEnd   
0600                QUIT:        
0600   E1                     POP   hl   ; hl = condition, exit if true
0601   7D                     LD   a,l   
0602   B4                     OR   h   
0603   20 02                  JR   nz,quit1   
0605   DD E9                  JP   (ix)   
0607                QUIT1:       
0607   C3 79 05               JP   blockEnd   
060A                TICK:        
060A                CHAR:        
060A   21 00 00               LD   hl,0   ; if "" is empty or null
060D                CHAR1:       
060D   03                     INC   bc   ; point to next char
060E   0A                     LD   a,(bc)   
060F   FE 27                  CP   "'"   ; ' is the terminator
0611   28 09                  JR   z,char3   
0613   FE 5C                  CP   $5c   ; \ is the escape
0615   20 02                  JR   nz,char2   
0617   03                     INC   bc   
0618   0A                     LD   a,(bc)   
0619                CHAR2:       
0619   6F                     LD   l,a   
061A   18 F1                  JR   char1   
061C                CHAR3:       
061C   E5                     PUSH   hl   
061D   DD E9                  JP   (ix)   
061F                SLASH:       
061F                COMMAND:      
061F   CD E6 0C               CALL   jumpTable   
0622   2F                     DB   "/"   ; // comment
0623   F8 06                  DW   comment   
0625   61                     DB   "a"   
0626   5E 06                  DW   command_a   
0628   62                     DB   "b"   
0629   6D 06                  DW   command_b   
062B   63                     DB   "c"   ; /c chars
062C   F0 06                  DW   chars   
062E   64                     DB   "d"   ; /d decimal
062F   BD 07                  DW   decimal   
0631   66                     DB   "f"   
0632   79 06                  DW   command_f   
0634   68                     DB   "h"   ; /h hexadecimal
0635   C5 07                  DW   hexadecimal   
0637   69                     DB   "i"   
0638   97 06                  DW   command_i   
063A   6B                     DB   "k"   ; /k key
063B   E0 0A                  DW   key   
063D   6C                     DB   "l"   
063E   A3 06                  DW   command_l   
0640   6D                     DB   "m"   
0641   AC 06                  DW   command_m   
0643   6E                     DB   "n"   ; /n numbers
0644   EB 06                  DW   numbers   
0646   6F                     DB   "o"   ; /o output
0647   F2 0A                  DW   output   
0649   70                     DB   "p"   
064A   B5 06                  DW   command_p   
064C   72                     DB   "r"   
064D   C7 06                  DW   command_r   
064F   74                     DB   "t"   ; /t true
0650   3C 09                  DW   true1   
0652   76                     DB   "v"   
0653   D6 06                  DW   command_v   
0655   77                     DB   "w"   ; /w words
0656   EB 06                  DW   words   
0658   78                     DB   "x"   ; /x xor
0659   CA 03                  DW   xor   
065B   00                     DB   NUL   
065C   AC 07                  DW   div   
065E                COMMAND_A:      
065E   CD E6 0C               CALL   jumpTable   
0661   62                     DB   "b"   ; /ab absolute
0662   E2 04                  DW   absolute   
0664   64                     DB   "d"   ; /ad address of
0665   EF 04                  DW   addrOf   
0667   73                     DB   "s"   ; /as array size
0668   93 04                  DW   arraySize   
066A   00                     DB   NUL   
066B   48 09                  DW   error1   
066D                COMMAND_B:      
066D   CD E6 0C               CALL   jumpTable   
0670   72                     DB   "r"   ; /br break
0671   E6 05                  DW   break   
0673   79                     DB   "y"   ; /by cold boot
0674   AD 0D                  DW   coldStart   
0676   00                     DB   NUL   
0677   F0 06                  DW   bytes   ; /b bytes
0679                COMMAND_F:      
0679   CD E6 0C               CALL   jumpTable   
067C   65                     DB   "e"   ; /fe forEach
067D   54 09                  DW   forEach   
067F   6C                     DB   "l"   ; /fl flush output buffer
0680   4F 09                  DW   flush   
0682   73                     DB   "s"   ; /fs funcSrc
0683   A1 09                  DW   funcSrc   
0685   31                     DB   "1"   
0686   AD 0E                  DW   f1   
0688   32                     DB   "2"   
0689   B9 0E                  DW   f2   
068B   33                     DB   "3"   
068C   C5 0E                  DW   f3   
068E   34                     DB   "4"   
068F   D1 0E                  DW   f4   
0691   7A                     DB   "z"   
0692   DC 09                  DW   fz   
0694   00                     DB   NUL   
0695   42 09                  DW   false1   
0697                COMMAND_I:      
0697   CD E6 0C               CALL   jumpTable   
069A   6E                     DB   "n"   ; /in input
069B   D5 0A                  DW   input   
069D   76                     DB   "v"   ; /iv invert
069E   D5 03                  DW   invert   
06A0   00                     DB   NUL   
06A1   48 09                  DW   error1   
06A3                COMMAND_L:      
06A3   CD E6 0C               CALL   jumpTable   
06A6   69                     DB   "i"   ; /li literal
06A7   E9 0A                  DW   literal   
06A9   00                     DB   NUL   
06AA   48 09                  DW   error1   
06AC                COMMAND_M:      
06AC   CD E6 0C               CALL   jumpTable   
06AF   70                     DB   "p"   ; /mp map
06B0   FB 0A                  DW   map   
06B2   00                     DB   NUL   
06B3   48 09                  DW   error1   
06B5                COMMAND_P:      
06B5   CD E6 0C               CALL   jumpTable   
06B8   63                     DB   "c"   ; /pc print chars
06B9   7F 0C                  DW   printChars   
06BB   00                     DB   NUL   
06BC   48 09                  DW   error1   
06BE                COMMAND_Q:      
06BE   CD E6 0C               CALL   jumpTable   
06C1   74                     DB   "t"   ; /qt quit
06C2   00 06                  DW   quit   
06C4   00                     DB   NUL   
06C5   48 09                  DW   error1   
06C7                COMMAND_R:      
06C7   CD E6 0C               CALL   jumpTable   
06CA   63                     DB   "c"   ; /rc tail call optimisation
06CB   91 0C                  DW   recur   
06CD   65                     DB   "e"   ; /re remainder
06CE   97 0C                  DW   remain   
06D0   67                     DB   "g"   ; /rg range src
06D1   8B 0B                  DW   rangeSrc   
06D3   00                     DB   NUL   
06D4   48 09                  DW   error1   
06D6                COMMAND_V:      
06D6   CD E6 0C               CALL   jumpTable   
06D9   62                     DB   "b"   
06DA   AC 0C                  DW   varBufPtr   
06DC   68                     DB   "h"   
06DD   B5 0C                  DW   varHeapPtr   
06DF   74                     DB   "t"   
06E0   BE 0C                  DW   varTIBPtr   
06E2   42                     DB   "B"   
06E3   9D 0C                  DW   constBufStart   
06E5   54                     DB   "T"   
06E6   A7 0C                  DW   constTIBStart   
06E8   00                     DB   NUL   
06E9   48 09                  DW   error1   
06EB                WORDS:       
06EB                NUMBERS:      
06EB   21 02 00               LD   hl,2   
06EE   18 03                  JR   bytes1   
06F0                BYTES:       
06F0                CHARS:       
06F0   21 01 00               LD   hl,1   
06F3                BYTES1:      
06F3   22 E6 54               LD   (vDataWidth),hl   
06F6   DD E9                  JP   (ix)   
06F8                COMMENT:      
06F8   03                     INC   bc   ; point to next char
06F9   0A                     LD   a,(bc)   
06FA   FE 20                  CP   " "   ; terminate on any char less than SP
06FC   30 FA                  JR   nc,comment   
06FE   0B                     DEC   bc   
06FF   DD E9                  JP   (ix)   
0701                             ; ";" createFunc
0701                             ; arg_list* block* -- func*
0701                SEMICOLON:      
0701                CREATEFUNC:      
0701   ED 43 00 55            LD   (vTemp1),bc   ; save IP
0705   E1                     POP   hl   ; hl = block*
0706   22 02 55               LD   (vTemp2),hl   ; save block*
0709   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
070C   FD 56 05               LD   d,(iy+5)   
070F   7B                     LD   a,e   ; if arg_list == null then make a func
0710   B2                     OR   d   
0711   20 09                  JR   nz,createFunc0   
0713   21 00 00               LD   hl,0   ; partial_array = null
0716   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = compile*
071A   18 65                  JR   createFunc5   
071C                CREATEFUNC0:      
071C   E1                     POP   hl   ; hl = inner_arg_list*
071D   E5                     PUSH   hl   ; save inner_arg_list
071E   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = compile*
0722   7E                     LD   a,(hl)   ; compile inner_num_locals
0723   4F                     LD   c,a   ; b = inner_num_locals
0724   12                     LD   (de),a   
0725   23                     INC   hl   
0726   13                     INC   de   
0727   7E                     LD   a,(hl)   ; compile inner_length
0728   12                     LD   (de),a   
0729   91                     SUB   c   ; a = inner_num args
072A   23                     INC   hl   
072B   13                     INC   de   
072C   B7                     OR   a   ; compile args if inner_length > 0
072D   28 05                  JR   z,createFunc1   
072F   4F                     LD   c,a   ; bc = a
0730   06 00                  LD   b,0   
0732   ED B0                  LDIR      
0734                CREATEFUNC1:      
0734   EB                     EX   de,hl   ; hl = outer_arg_list
0735   FD 5E 04               LD   e,(iy+4)   
0738   FD 56 05               LD   d,(iy+5)   
073B   EB                     EX   de,hl   
073C   23                     INC   hl   ; a = outer_length
073D   7E                     LD   a,(hl)   
073E   23                     INC   hl   
073F   B7                     OR   a   
0740   28 05                  JR   z,createFunc2   
0742   4F                     LD   c,a   
0743   06 00                  LD   b,0   
0745   ED B0                  LDIR      ; append outer_args
0747                CREATEFUNC2:      ; a = outer_length
0747   47                     LD   b,a   ; b = a = outer_length
0748   2A F0 54               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
074B   23                     INC   hl   
074C   7E                     LD   a,(hl)   ; add outer_length to new length
074D   80                     ADD   a,b   
074E   77                     LD   (hl),a   
074F   2B                     DEC   hl   
0750   78                     LD   a,b   ; save outer_length in a'
0751   08                     EX   af,af'   
0752   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0753   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0754   B7                     OR   a   
0755   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0757   4F                     LD   c,a   ; c = inner_num_locals
0758   06 00                  LD   b,0   ; bc = inner_num_locals
075A   23                     INC   hl   ; a = inner_length
075B   7E                     LD   a,(hl)   
075C   91                     SUB   c   ; a = inner_num_args
075D   23                     INC   hl   ; hl = inner_arg_chars
075E   85                     ADD   a,l   ; hl += a
075F   6F                     LD   l,a   
0760   3E 00                  LD   a,0   
0762   84                     ADD   a,h   
0763   67                     LD   h,a   
0764   ED B0                  LDIR      ; append inner_locals
0766                CREATEFUNC2A:      
0766   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0767   12                     LD   (de),a   ; compile partial_array length field
0768   13                     INC   de   
0769   AF                     XOR   a   
076A   12                     LD   (de),a   
076B   13                     INC   de   
076C   D5                     PUSH   de   ; push partial_array*
076D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
076E   FD 5E 02               LD   e,(iy+2)   
0771   FD 56 03               LD   d,(iy+3)   
0774   EB                     EX   de,hl   
0775                CREATEFUNC3:      
0775   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0776   4E                     LD   c,(hl)   
0777   2B                     DEC   hl   
0778   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0779   12                     LD   (de),a   ; write LSB and MSB to partial_array*
077A   13                     INC   de   
077B   79                     LD   a,c   
077C   12                     LD   (de),a   
077D   13                     INC   de   
077E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0780                CREATEFUNC4:      
0780   E1                     POP   hl   ; hl = partial_array*
0781                CREATEFUNC5:      
0781   C1                     POP   bc   ; bc = new_arg_list*
0782   D5                     PUSH   de   ; return new func*
0783   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0784   73                     LD   (hl),e   ; compile partial_array* to func
0785   23                     INC   hl   
0786   72                     LD   (hl),d   
0787   23                     INC   hl   
0788   ED 5B 02 55            LD   de,(vTemp2)   ; de = block*
078C   73                     LD   (hl),e   ; compile block* to func
078D   23                     INC   hl   
078E   72                     LD   (hl),d   
078F   23                     INC   hl   
0790   71                     LD   (hl),c   ; compile new_arg_list* to func
0791   23                     INC   hl   
0792   70                     LD   (hl),b   
0793   23                     INC   hl   
0794   22 F0 54               LD   (vHeapPtr),hl   ; bump heap ptr
0797   ED 4B 00 55            LD   bc,(vTemp1)   ; restore IP
079B   DD E9                  JP   (ix)   
079D                             ; , discard stack item
079D                             ; x y -- x
079D                COMMA:       
079D                DISCARD:      
079D   FD 54                  LD   d,iyh   ; limit this to SP <= BP
079F   FD 5D                  LD   e,iyl   
07A1   EB                     EX   de,hl   
07A2   B7                     OR   a   
07A3   ED 72                  SBC   hl,sp   
07A5   CB 7C                  BIT   7,h   
07A7   20 01                  JR   nz,discard1   
07A9   E1                     POP   hl   
07AA                DISCARD1:      
07AA   DD E9                  JP   (ix)   
07AC                DIV:         
07AC   D1                     POP   de   
07AD   E1                     POP   hl   
07AE   C5                     PUSH   bc   ; preserve the IP
07AF   44 4D                  LD   bc,hl   
07B1   CD 05 09               CALL   divide   
07B4   EB                     EX   de,hl   
07B5   ED 53 F6 54            LD   (vRemain),de   
07B9   C1                     POP   bc   
07BA   C3 9B 03               JP   add3   
07BD                DECIMAL:      
07BD   21 0A 00               LD   hl,10   
07C0                DECIMAL1:      
07C0   22 E8 54               LD   (vNumBase),hl   
07C3   DD E9                  JP   (ix)   
07C5                HEXADECIMAL:      
07C5   21 10 00               LD   hl,16   
07C8   C3 C0 07               JP   decimal1   
07CB                DOT:         
07CB   CD E6 0C               CALL   jumpTable   
07CE   61                     DB   "a"   ; .a print array
07CF   DD 07                  DW   dotArray   
07D1   63                     DB   "c"   ; .c print char
07D2   E4 08                  DW   dotChar   
07D4   73                     DB   "s"   ; .s print string
07D5   CA 08                  DW   dotString   
07D7   78                     DB   "x"   ; .x print x chars
07D8   E9 08                  DW   dotXChars   
07DA   00                     DB   NUL   ; .  print number
07DB   25 08                  DW   dotNumber   
07DD                          ;*Macro unroll: FUNC dotArray, 2, "abc"
07DD                DOTARRAY:      
07DD   CD E9 09               CALL   go   
07E0   00 00                  DW   NUL   
07E2   EB 07                  DW   dotArrayM_1635S1123   
07E4   E6 07                  DW   $+2   
07E6   02                     DB   2   
07E7   03 61 62 63            .PSTR   "abc"   
07EB                DOTARRAYM_1635S1123:      
07EB   7B                     DB   "{"   
07EC   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
0823   7D                     DB   "}"   
0824   00                     DB   0   
0825                             ; /bd buffer decimal
0825                             ; value --
0825                DOTNUMBER:      
0825   3A E8 54               LD   a,(vNumBase)   
0828   FE 10                  CP   16   
082A   28 66                  JR   z,bufferHex   ; else falls through
082C                             ; /bd buffer decimal
082C                             ; value --
082C                BUFFERDEC:      
082C   ED 5B EC 54            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0830   D9                     EXX      
0831   E1                     POP   hl   ; hl = value
0832   CD 46 08               CALL   bufferDec0   
0835   D9                     EXX      ; de = buffer*' bc = IP
0836   3E 20                  LD   a," "   ; append space to buffer
0838   12                     LD   (de),a   
0839   1C                     INC   e   ; buffer*++, wraparound
083A   CC CF 0C               CALL   z,flushBuffer   
083D   2A EC 54               LD   hl,(vBufPtr)   ; hl = buffer*
0840   ED 53 EC 54            LD   (vBufPtr),de   ; update buffer* with buffer*'
0844   DD E9                  JP   (ix)   
0846                             ; hl = value
0846                             ; de' = buffer*
0846                             ; a, bc, de, hl destroyed
0846                BUFFERDEC0:      
0846   CB 7C                  BIT   7,h   
0848   28 0C                  JR   z,bufferDec1   
084A   D9                     EXX      
084B   3E 2D                  LD   a,"-"   
084D   12                     LD   (de),a   
084E   13                     INC   de   
084F   D9                     EXX      
0850   AF                     XOR   a   
0851   95                     SUB   l   
0852   6F                     LD   l,a   
0853   9F                     SBC   a,a   
0854   94                     SUB   h   
0855   67                     LD   h,a   
0856                BUFFERDEC1:      
0856   0E 00                  LD   c,0   ; leading zeros flag = false
0858   11 F0 D8               LD   de,-10000   
085B   CD 76 08               CALL   bufferDec2   
085E   11 18 FC               LD   de,-1000   
0861   CD 76 08               CALL   bufferDec2   
0864   11 9C FF               LD   de,-100   
0867   CD 76 08               CALL   bufferDec2   
086A   1E F6                  LD   e,-10   
086C   CD 76 08               CALL   bufferDec2   
086F   0C                     INC   c   ; flag = true for at least digit
0870   1E FF                  LD   e,-1   
0872   CD 76 08               CALL   bufferDec2   
0875   C9                     RET      
0876                BUFFERDEC2:      
0876   06 2F                  LD   b,"0"-1   
0878                BUFFERDEC3:      
0878   04                     INC   b   
0879   19                     ADD   hl,de   
087A   38 FC                  JR   c,bufferDec3   
087C   ED 52                  SBC   hl,de   
087E   3E 30                  LD   a,"0"   
0880   B8                     CP   b   
0881   20 05                  JR   nz,bufferDec4   
0883   AF                     XOR   a   
0884   B1                     OR   c   
0885   C8                     RET   z   
0886   18 01                  JR   bufferDec5   
0888                BUFFERDEC4:      
0888   0C                     INC   c   
0889                BUFFERDEC5:      
0889   78                     LD   a,b   
088A   D9                     EXX      
088B   12                     LD   (de),a   
088C   1C                     INC   e   
088D   CC CF 0C               CALL   z,flushBuffer   
0890   D9                     EXX      
0891   C9                     RET      
0892                             ; /bh buffer hex
0892                             ; value --
0892                BUFFERHEX:      
0892   E1                     POP   hl   ; hl = value
0893   ED 5B EC 54            LD   de,(vBufPtr)   
0897   3E 24                  LD   a,"$"   ; # prefix
0899   12                     LD   (de),a   
089A   1C                     INC   e   ; buffer*++, wraparound
089B   CC CF 0C               CALL   z,flushBuffer   
089E   7C                     LD   a,h   
089F   CD B3 08               CALL   bufferHex1   
08A2   7D                     LD   a,l   
08A3   CD B3 08               CALL   bufferHex1   
08A6   3E 20                  LD   a," "   ; append space to buffer
08A8   12                     LD   (de),a   
08A9   1C                     INC   e   ; buffer*++, wraparound
08AA   CC CF 0C               CALL   z,flushBuffer   
08AD   ED 53 EC 54            LD   (vBufPtr),de   
08B1   DD E9                  JP   (ix)   
08B3                BUFFERHEX1:      
08B3   F5                     PUSH   af   
08B4   1F                     RRA      
08B5   1F                     RRA      
08B6   1F                     RRA      
08B7   1F                     RRA      
08B8   CD BC 08               CALL   bufferHex2   
08BB   F1                     POP   af   
08BC                BUFFERHEX2:      
08BC   E6 0F                  AND   0x0F   
08BE   C6 90                  ADD   a,0x90   
08C0   27                     DAA      
08C1   CE 40                  ADC   a,0x40   
08C3   27                     DAA      
08C4   12                     LD   (de),a   
08C5   1C                     INC   e   ; buffer*++, wraparound
08C6   CC CF 0C               CALL   z,flushBuffer   
08C9   C9                     RET      
08CA                             ; /bs buffered string
08CA                             ; string* --
08CA                DOTSTRING:      
08CA   E1                     POP   hl   ; hl = string*
08CB   ED 5B EC 54            LD   de,(vBufPtr)   ; de = buffer*
08CF   18 06                  JR   dotString1   
08D1                DOTSTRING0:      
08D1   12                     LD   (de),a   ; a -> buffer*
08D2   1C                     INC   e   ; buffer*++, wraparound
08D3   CC CF 0C               CALL   z,flushBuffer   
08D6   23                     INC   hl   
08D7                DOTSTRING1:      
08D7   7E                     LD   a,(hl)   ; a <- string*
08D8   B7                     OR   a   ; if NUL exit loop
08D9   20 F6                  JR   nz,dotString0   
08DB   2A EC 54               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
08DE   ED 53 EC 54            LD   (vBufPtr),de   ; save buffer*' in pointer
08E2   DD E9                  JP   (ix)   
08E4                             ; /bc buffer char
08E4                             ; char --
08E4                DOTCHAR:      
08E4   21 01 00               LD   hl,1   
08E7   18 01                  JR   dotXChars0   
08E9                             ; /bx buffered x chars
08E9                             ; char length --
08E9                DOTXCHARS:      
08E9   E1                     POP   hl   ; hl = length
08EA                DOTXCHARS0:      
08EA   D1                     POP   de   ; a' = char
08EB   7B                     LD   a,e   
08EC   08                     EX   af,af'   
08ED   ED 5B EC 54            LD   de,(vBufPtr)   ; de = buffer*
08F1   18 08                  JR   dotXChars2   
08F3                DOTXCHARS1:      
08F3   08                     EX   af,af'   
08F4   12                     LD   (de),a   
08F5   08                     EX   af,af'   
08F6   1C                     INC   e   ; buffer*++, wraparound
08F7   CC CF 0C               CALL   z,flushBuffer   
08FA   2B                     DEC   hl   
08FB                DOTXCHARS2:      
08FB   7D                     LD   a,l   
08FC   B4                     OR   h   
08FD   20 F4                  JR   nz,dotXChars1   
08FF   ED 53 EC 54            LD   (vBufPtr),de   ; save buffer*'
0903   DD E9                  JP   (ix)   
0905                             ; division subroutine.
0905                             ; bc: divisor, de: dividend, hl: remainder
0905                DIVIDE:      
0905   21 00 00               LD   hl,0   ; zero the remainder
0908   3E 10                  LD   a,16   ; loop counter
090A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
090A   CB 21                  SLA   c   
090C   CB 10                  RL   b   
090E   ED 6A                  ADC   hl,hl   
0910   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0912   38 03                  JR   c,divide2   
0914   0C                     INC   c   
0915   18 01                  JR   divide3   
0917                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0917   19                     ADD   hl,de   
0918                DIVIDE3:      
0918   3D                     DEC   a   
0919   20 EF                  JR   nz,divide1   
091B   50 59                  LD   de,bc   ; result from bc to de
091D   C9                     RET      
091E                             ; hl = value1, de = value2
091E                             ; hl = result
091E                EQUALS:      
091E   B7                     OR   a   ; reset the carry flag
091F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0921   28 19                  JR   z,true1   
0923   C3 42 09               JP   false1   
0926                NOTEQUALS:      
0926   B7                     OR   a   ; reset the carry flag
0927   ED 52                  SBC   hl,de   
0929   C2 3C 09               JP   nz,true1   
092C   C3 42 09               JP   false1   
092F                             ; hl = value1 de = value2
092F                             ; hl = result
092F                LESSTHANEQ:      
092F   B7                     OR   a   
0930   ED 52                  SBC   hl,de   
0932   18 05                  JR   lessthan1   
0934                             ; hl = value1 de = value2
0934                             ; hl = result
0934                LESSTHAN:      
0934   B7                     OR   a   
0935   ED 52                  SBC   hl,de   
0937   28 09                  JR   z,false1   
0939                LESSTHAN1:      
0939   FA 42 09               JP   m,false1   
093C                TRUE1:       
093C   21 FF FF               LD   hl,TRUE   
093F   E5                     PUSH   hl   
0940   DD E9                  JP   (ix)   
0942                NULL1:       
0942                FALSE1:      
0942   21 00 00               LD   hl,FALSE   
0945   E5                     PUSH   hl   
0946   DD E9                  JP   (ix)   
0948                ERROR1:      
0948   21 01 00               LD   hl,1   ; error 1: unknown command
094B   E5                     PUSH   hl   
094C   C3 65 0E               JP   error   
094F                             ; /fl flush
094F                             ; --
094F                FLUSH:       
094F   CD CF 0C               CALL   flushBuffer   
0952   DD E9                  JP   (ix)   
0954                             ; /fe forEach
0954                             ; src proc --
0954                          ;*Macro unroll: FUNC forEach, 1, "spT"
0954                FOREACH:      
0954   CD E9 09               CALL   go   
0957   00 00                  DW   NUL   
0959   62 09                  DW   forEachM_1865S1371   
095B   5D 09                  DW   $+2   
095D   01                     DB   1   
095E   03 73 70 54            .PSTR   "spT"   
0962                FOREACHM_1865S1371:      
0962   7B                     DB   "{"   
0963   5B 30 5D 25 54 3D      DB   "[0]%T="   
0969   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
096D   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0973   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0978   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
098A   3F 3F                  DB   "??"   ; ifte:
098C   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0995   7D 3F                  DB   "}?"   
0997   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
099F   7D                     DB   "}"   
09A0   00                     DB   0   
09A1                             ; ; /fs funcSrc
09A1                             ; ; func -- src
09A1                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
09A1                FUNCSRC:      ; :f func or block
09A1   CD E9 09               CALL   go   
09A4   00 00                  DW   NUL   
09A6   AD 09                  DW   funcSrcM_1880S1387   
09A8   AA 09                  DW   $+2   
09AA   00                     DB   0   
09AB   01 66                  .PSTR   "f"   
09AD                FUNCSRCM_1880S1387:      
09AD   7B                     DB   "{"   
09AE   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
09B2   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
09BA   3A 64 74 7B            DB   ":dt{"   
09BE   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09D0   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09D8   7D 3B                  DB   "};"   
09DA   7D                     DB   "}"   
09DB   00                     DB   0   
09DC                FZ:          
09DC   21 00 52               LD   hl,STACK   
09DF   ED 72                  SBC   hl,sp   
09E1   CB 3C                  SRL   h   
09E3   CB 1D                  RR   l   
09E5   E5                     PUSH   hl   
09E6   C3 25 08               JP   dotNumber   
09E9                             ; execute a block of code which ends with }
09E9                             ; creates a root scope if BP == stack
09E9                             ; else uses outer scope
09E9                CARET:       
09E9                GO:          
09E9   D1                     POP   de   ; de = block*
09EA                GO1:         
09EA   7B                     LD   a,e   ; if block* == null, exit
09EB   B2                     OR   d   
09EC   20 02                  JR   nz,go2   
09EE   DD E9                  JP   (ix)   
09F0                GO2:         
09F0   1A                     LD   a,(de)   
09F1   FE 7B                  CP   "{"   
09F3   28 06                  JR   z,goBlock   
09F5   FE 28                  CP   "("   
09F7   C2 2E 0A               JP   nz,goFunc   
09FA   D5                     PUSH   de   ; push de just before stack frame
09FB                GOBLOCK:      
09FB   ED 53 00 55            LD   (vTemp1),de   ; save de
09FF   21 00 52               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A02   FD 54                  LD   d,iyh   
0A04   FD 5D                  LD   e,iyl   
0A06   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A07   ED 52                  SBC   hl,de   
0A09   ED 5B 00 55            LD   de,(vTemp1)   ; restore de
0A0D   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A0E   B4                     OR   h   
0A0F   3E 00                  LD   a,0   
0A11   28 6A                  JR   z,goFunc8   
0A13   C5                     PUSH   bc   ; push IP
0A14   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A17   FD 46 05               LD   b,(iy+5)   
0A1A   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A1D   FD 66 03               LD   h,(iy+3)   
0A20                GOBLOCK2:      
0A20   C5                     PUSH   bc   ; arg_list*
0A21   E5                     PUSH   hl   ; first_arg*
0A22   FD E5                  PUSH   iy   ; push BP
0A24   FD 21 00 00            LD   iy,0   ; BP = SP
0A28   FD 39                  ADD   iy,sp   
0A2A                GOBLOCK3:      
0A2A   42 4B                  LD   bc,de   ; bc = de = block*-1
0A2C   DD E9                  JP   (ix)   
0A2E                GOFUNC:      ; execute func
0A2E   EB                     EX   de,hl   ; hl = func*
0A2F   5E                     LD   e,(hl)   ; de = partial_array*
0A30   23                     INC   hl   
0A31   56                     LD   d,(hl)   
0A32   23                     INC   hl   
0A33   7B                     LD   a,e   ; if partial_array* == null skip
0A34   B2                     OR   d   
0A35   28 21                  JR   z,goFunc3   
0A37   ED 43 00 55            LD   (vTemp1),bc   
0A3B   22 02 55               LD   (vTemp2),hl   ; save bc,hl
0A3E   EB                     EX   de,hl   ; hl = partial_array*
0A3F   2B                     DEC   hl   ; bc = count
0A40   46                     LD   b,(hl)   
0A41   2B                     DEC   hl   
0A42   4E                     LD   c,(hl)   
0A43   23                     INC   hl   ; hl = array data*
0A44   23                     INC   hl   
0A45   18 06                  JR   goFunc2   ; push each item on stack
0A47                GOFUNC1:      
0A47   5E                     LD   e,(hl)   ; de = partial item
0A48   23                     INC   hl   
0A49   56                     LD   d,(hl)   
0A4A   23                     INC   hl   
0A4B   D5                     PUSH   de   ; push on stack
0A4C   0B                     DEC   bc   
0A4D                GOFUNC2:      
0A4D   79                     LD   a,c   ; if count != 0 then loop
0A4E   B0                     OR   b   
0A4F   20 F6                  JR   nz,goFunc1   
0A51   ED 4B 00 55            LD   bc,(vTemp1)   ; restore bc
0A55   2A 02 55               LD   hl,(vTemp2)   ; restore hl
0A58                GOFUNC3:      
0A58   5E                     LD   e,(hl)   ; de = block*
0A59   23                     INC   hl   
0A5A   56                     LD   d,(hl)   
0A5B   23                     INC   hl   
0A5C   ED 53 00 55            LD   (vTemp1),de   ; save block*
0A60   5E                     LD   e,(hl)   ; de = arg_list*
0A61   23                     INC   hl   
0A62   56                     LD   d,(hl)   
0A63   23                     INC   hl   
0A64   EB                     EX   de,hl   ; hl = arg_list*
0A65   ED 5B 00 55            LD   de,(vTemp1)   ; restore de = block*
0A69   7D                     LD   a,l   ; if arg_list* == null a = 0
0A6A   B4                     OR   h   
0A6B   20 03                  JR   nz,goFunc4   
0A6D   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A6E   18 0D                  JR   goFunc8   
0A70                GOFUNC4:      ; allocate locals
0A70   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A71   18 03                  JR   goFunc6   
0A73                GOFUNC5:      ; loop
0A73   3B                     DEC   sp   
0A74   3B                     DEC   sp   
0A75   3D                     DEC   a   
0A76                GOFUNC6:      
0A76   B7                     OR   a   
0A77   20 FA                  JR   nz,goFunc5   ; end loop
0A79                GOFUNC7:      
0A79   23                     INC   hl   ; a = num_args* x 2
0A7A   7E                     LD   a,(hl)   
0A7B   2B                     DEC   hl   
0A7C   87                     ADD   a,a   ; a *= 2
0A7D                GOFUNC8:      
0A7D   C5                     PUSH   bc   ; push IP
0A7E   44 4D                  LD   bc,hl   
0A80   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A83   85                     ADD   a,l   
0A84   6F                     LD   l,a   
0A85   39                     ADD   hl,sp   
0A86   18 98                  JR   goBlock2   
0A88                DOLLAR:      
0A88                HEXNUM:      
0A88   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A8B                HEXNUM1:      
0A8B   03                     INC   bc   
0A8C   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A8D   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A8F   28 02                  JR   z,hexnum2   ; no a decimal
0A91   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A93                HEXNUM2:      
0A93   D6 30                  SUB   $30   ; form decimal digit
0A95   DA 7D 0B               JP   c,num2   
0A98   FE 10                  CP   $0F+1   
0A9A   D2 7D 0B               JP   nc,num2   
0A9D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A9E   29                     ADD   hl,hl   ; 4X
0A9F   29                     ADD   hl,hl   ; 8X
0AA0   29                     ADD   hl,hl   ; 16X
0AA1   85                     ADD   a,l   ; add into bottom of hl
0AA2   6F                     LD   l,a   
0AA3   18 E6                  JR   hexnum1   
0AA5                UPCASE:      
0AA5   0A                     LD   a,(bc)   ; a = identifier char
0AA6   D6 41                  SUB   "A"   ; "A" = 0
0AA8   18 05                  JR   ident1   
0AAA                LOWCASE:      
0AAA   0A                     LD   a,(bc)   
0AAB   D6 61                  SUB   "a"   
0AAD   C6 1A                  ADD   a,26   
0AAF                IDENT1:      
0AAF   87                     ADD   a,a   ; l = a * 2
0AB0   6F                     LD   l,a   
0AB1   26 54                  LD   h,msb(vars)   
0AB3   22 F4 54               LD   (vPointer),hl   ; store address in setter
0AB6   5E                     LD   e,(hl)   
0AB7   23                     INC   hl   
0AB8   56                     LD   d,(hl)   
0AB9   D5                     PUSH   de   
0ABA   DD E9                  JP   (ix)   
0ABC                             ; if
0ABC                             ; condition then -- value
0ABC                QUESTION:      
0ABC                IF:          
0ABC   03                     INC   bc   
0ABD   0A                     LD   a,(bc)   
0ABE   FE 3F                  CP   "?"   
0AC0   28 06                  JR   z,ifte   
0AC2   0B                     DEC   bc   
0AC3   11 00 00               LD   de,NUL   ; NUL pointer for else
0AC6   18 01                  JR   ifte1   
0AC8                             ; ifte
0AC8                             ; condition then else -- value
0AC8                IFTE:        
0AC8   D1                     POP   de   ; de = else
0AC9                IFTE1:       
0AC9   E1                     POP   hl   ; hl = then
0ACA   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0ACB   7C                     LD   a,h   
0ACC   B5                     OR   l   
0ACD   E1                     POP   hl   ; hl = then
0ACE   CA EA 09               JP   z,go1   ; if z de = else
0AD1   EB                     EX   de,hl   ; condition = false, de = then
0AD2   C3 EA 09               JP   go1   
0AD5                             ; Z80 port input
0AD5                             ; port -- value
0AD5                INPUT:       
0AD5   E1                     POP   hl   
0AD6   59                     LD   e,c   ; save IP
0AD7   4D                     LD   c,l   
0AD8   ED 68                  IN   l,(c)   
0ADA   26 00                  LD   h,0   
0ADC   4B                     LD   c,e   ; restore IP
0ADD   E5                     PUSH   hl   
0ADE   DD E9                  JP   (ix)   
0AE0                KEY:         
0AE0   CD 81 00               CALL   getchar   
0AE3   26 00                  LD   h,0   
0AE5   6F                     LD   l,a   
0AE6   E5                     PUSH   hl   
0AE7   DD E9                  JP   (ix)   
0AE9                             ; /li literal
0AE9                             ; low level operation
0AE9                             ; reads the next two bytes and
0AE9                             ; pushes a word on the stack
0AE9                             ; -- value
0AE9                LITERAL:      
0AE9   03                     INC   bc   
0AEA   0A                     LD   a,(bc)   
0AEB   6F                     LD   l,a   
0AEC   03                     INC   bc   
0AED   0A                     LD   a,(bc)   
0AEE   67                     LD   h,a   
0AEF   E5                     PUSH   hl   
0AF0   DD E9                  JP   (ix)   
0AF2                             ; Z80 port output
0AF2                             ; value port --
0AF2                OUTPUT:      
0AF2   E1                     POP   hl   
0AF3   59                     LD   e,c   ; save IP
0AF4   4D                     LD   c,l   
0AF5   E1                     POP   hl   
0AF6   ED 69                  OUT   (c),l   
0AF8   4B                     LD   c,e   ; restore IP
0AF9   DD E9                  JP   (ix)   
0AFB                             ; /mp map
0AFB                             ; src func -- src1
0AFB                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
0AFB                MAP:         ; map
0AFB   CD E9 09               CALL   go   
0AFE   00 00                  DW   NUL   
0B00   08 0B                  DW   mapM_2119S1638   
0B02   04 0B                  DW   $+2   
0B04   00                     DB   0   
0B05   02 73 66               .PSTR   "sf"   
0B08                MAPM_2119S1638:      
0B08   7B                     DB   "{"   
0B09   3A 6B 74 7B            DB   ":kt{"   
0B0D   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0B15   3A 64 74 7B            DB   ":dt{"   ; call source with tb
0B19   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0B1E   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0B2A   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0B33   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0B3B   7D 3B                  DB   "};"   
0B3D   7D                     DB   "}"   
0B3E   00                     DB   0   
0B3F                STAR:        
0B3F                MUL:         
0B3F   D1                     POP   de   ; get first value
0B40   E1                     POP   hl   
0B41                MUL2:        
0B41   C5                     PUSH   bc   ; Preserve the IP
0B42   44 4D                  LD   bc,hl   ; bc = 2nd value
0B44   21 00 00               LD   hl,0   
0B47   3E 10                  LD   a,16   
0B49                MUL3:        
0B49   29                     ADD   hl,hl   
0B4A   CB 13                  RL   e   
0B4C   CB 12                  RL   d   
0B4E   30 04                  JR   nc,$+6   
0B50   09                     ADD   hl,bc   
0B51   30 01                  JR   nc,$+3   
0B53   13                     INC   de   
0B54   3D                     DEC   a   
0B55   20 F2                  JR   nz,mul3   
0B57   C1                     POP   bc   ; Restore the IP
0B58   C3 9B 03               JP   add3   
0B5B                NUM:         
0B5B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B5E   0A                     LD   a,(bc)   ; Get numeral or -
0B5F   FE 2D                  CP   "-"   
0B61   20 01                  JR   nz,num0   
0B63   03                     INC   bc   ; move to next char, no flags affected
0B64                NUM0:        
0B64   08                     EX   af,af'   ; save zero flag = 0 for later
0B65                NUM1:        
0B65   0A                     LD   a,(bc)   ; read digit
0B66   D6 30                  SUB   "0"   ; less than 0?
0B68   38 13                  JR   c,num2   ; not a digit, exit loop
0B6A   FE 0A                  CP   10   ; greater that 9?
0B6C   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B6E   03                     INC   bc   ; inc IP
0B6F   54 5D                  LD   de,hl   ; multiply hl * 10
0B71   29                     ADD   hl,hl   
0B72   29                     ADD   hl,hl   
0B73   19                     ADD   hl,de   
0B74   29                     ADD   hl,hl   
0B75   85                     ADD   a,l   ; add digit in a to hl
0B76   6F                     LD   l,a   
0B77   3E 00                  LD   a,0   
0B79   8C                     ADC   a,h   
0B7A   67                     LD   h,a   
0B7B   18 E8                  JR   num1   
0B7D                NUM2:        
0B7D   0B                     DEC   bc   
0B7E   08                     EX   af,af'   ; restore zero flag
0B7F   20 07                  JR   nz,num3   
0B81   EB                     EX   de,hl   ; negate the value of hl
0B82   21 00 00               LD   hl,0   
0B85   B7                     OR   a   ; jump to sub2
0B86   ED 52                  SBC   hl,de   
0B88                NUM3:        
0B88   E5                     PUSH   hl   ; Put the number on the stack
0B89   DD E9                  JP   (ix)   ; and process the next character
0B8B                             ; /rg rangeSrc
0B8B                             ; begin end step -- src
0B8B                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0B8B                RANGESRC:      ; range source (begin end step)
0B8B   CD E9 09               CALL   go   
0B8E   00 00                  DW   NUL   
0B90   9A 0B                  DW   rangeSrcM_2191S1713   
0B92   94 0B                  DW   $+2   
0B94   01                     DB   1   
0B95   04 62 65 73 4C         .PSTR   "besL"   
0B9A                RANGESRCM_2191S1713:      
0B9A   7B                     DB   "{"   
0B9B   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0BA6   3A 6B 74 7B            DB   ":kt{"   
0BAA   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0BB2   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0BB8   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
0BBF   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0BC7   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0BD6   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0BDE   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0BE5   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0BF9   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0C01   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0C09   7D 3B                  DB   "};"   
0C0B   7D                     DB   "}"   
0C0C   00                     DB   0   
0C0D                RPAREN:      
0C0D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0C10   FD 46 09               LD   b,(iy+9)   
0C13   DD E9                  JP   (ix)   
0C15                             ; shiftLeft
0C15                             ; value count -- value2          shift left count places
0C15                SHIFTLEFT:      
0C15   50 59                  LD   de,bc   ; save IP
0C17   C1                     POP   bc   ; bc = count
0C18   41                     LD   b,c   ; b = loop counter
0C19   E1                     POP   hl   
0C1A   04                     INC   b   ; test for counter=0 case
0C1B   18 01                  JR   shiftLeft2   
0C1D                SHIFTLEFT1:      
0C1D   29                     ADD   hl,hl   ; left shift hl
0C1E                SHIFTLEFT2:      
0C1E   10 FD                  DJNZ   shiftLeft1   
0C20   E5                     PUSH   hl   
0C21   42 4B                  LD   bc,de   ; restore IP
0C23   DD E9                  JP   (ix)   
0C25                             ; shiftRight
0C25                             ; value count -- value2          shift left count places
0C25                SHIFTRIGHT:      
0C25   50 59                  LD   de,bc   ; save IP
0C27   C1                     POP   bc   ; bc = count
0C28   41                     LD   b,c   ; b = loop counter
0C29   E1                     POP   hl   
0C2A   04                     INC   b   ; test for counter=0 case
0C2B   18 04                  JR   shiftRight2   
0C2D                SHIFTRIGHT1:      
0C2D   CB 3C                  SRL   h   ; right shift hl
0C2F   CB 1D                  RR   l   
0C31                SHIFTRIGHT2:      
0C31   10 FA                  DJNZ   shiftRight1   
0C33   E5                     PUSH   hl   
0C34   42 4B                  LD   bc,de   ; restore IP
0C36   DD E9                  JP   (ix)   
0C38                             ; string
0C38                             ; -- ptr                        ; points to start of string chars,
0C38                             ; length is stored at start - 2 bytes
0C38                DQUOTE:      
0C38                STRING:      
0C38   2A F0 54               LD   hl,(vHeapPtr)   ; hl = heap*
0C3B   23                     INC   hl   ; skip length field to start
0C3C   23                     INC   hl   
0C3D   E5                     PUSH   hl   ; save start of string
0C3E   03                     INC   bc   ; point to next char
0C3F   18 03                  JR   string2   
0C41                STRING1:      
0C41   77                     LD   (hl),a   
0C42   23                     INC   hl   ; increase count
0C43   03                     INC   bc   ; point to next char
0C44                STRING2:      
0C44   0A                     LD   a,(bc)   
0C45   FE 22                  CP   DQ   ; " is the string terminator
0C47   28 04                  JR   z,string3   
0C49   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0C4B   20 F4                  JR   nz,string1   
0C4D                STRING3:      
0C4D   AF                     XOR   a   ; write NUL to terminate string
0C4E   77                     LD   (hl),a   ; hl = end of string
0C4F   23                     INC   hl   
0C50   22 F0 54               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C53   2B                     DEC   hl   ; hl = end of string without terminator
0C54   D1                     POP   de   ; de = start of string
0C55   D5                     PUSH   de   ; return start of string
0C56   B7                     OR   a   ; hl = length bytes, de = start of string
0C57   ED 52                  SBC   hl,de   
0C59   EB                     EX   de,hl   
0C5A   2B                     DEC   hl   ; write length bytes to length field at start - 2
0C5B   72                     LD   (hl),d   
0C5C   2B                     DEC   hl   
0C5D   73                     LD   (hl),e   
0C5E   DD E9                  JP   (ix)   
0C60                MINUS:       ; negative sign or subtract
0C60   03                     INC   bc   ; check if sign of a number
0C61   0A                     LD   a,(bc)   
0C62   0B                     DEC   bc   
0C63   FE 30                  CP   "0"   
0C65   38 05                  JR   c,sub   
0C67   FE 3A                  CP   "9"+1   
0C69   DA 44 03               JP   c,num_   
0C6C                SUB:         ; Subtract the value 2nd on stack from top of stack
0C6C   03                     INC   bc   
0C6D   FE 2D                  CP   "-"   
0C6F   20 05                  JR   nz,sub1   
0C71   E1                     POP   hl   
0C72   2B                     DEC   hl   
0C73   C3 D3 04               JP   assign0   
0C76                SUB1:        
0C76   0B                     DEC   bc   
0C77   D1                     POP   de   
0C78   E1                     POP   hl   
0C79   B7                     OR   a   
0C7A   ED 52                  SBC   hl,de   
0C7C   C3 9B 03               JP   add3   
0C7F                             ; /pc printChars
0C7F                             ; char* len --
0C7F                PRINTCHARS:      
0C7F   E1                     POP   hl   ; hl = count
0C80   D1                     POP   de   ; de = char*
0C81   CD 8C 0C               CALL   printChars2   
0C84   DD E9                  JP   (ix)   
0C86                PRINTCHARS1:      
0C86   1A                     LD   a,(de)   ; print char at char*
0C87   CD 85 00               CALL   putchar   
0C8A   13                     INC   de   ; char*++
0C8B   2B                     DEC   hl   ; count--
0C8C                PRINTCHARS2:      
0C8C   7D                     LD   a,l   ; count == 0?
0C8D   B4                     OR   h   
0C8E   C8                     RET   z   
0C8F   18 F5                  JR   printChars1   ; if not loop
0C91                RECUR:       
0C91   E1                     POP   hl   
0C92   22 F2 54               LD   (vRecur),hl   
0C95   DD E9                  JP   (ix)   
0C97                REMAIN:      
0C97   2A F6 54               LD   hl,(vRemain)   
0C9A   E5                     PUSH   hl   
0C9B   DD E9                  JP   (ix)   
0C9D                CONSTBUFSTART:      
0C9D   11 00 53               LD   de,BUF   
0CA0   18 28                  JR   constant   
0CA2                CONSTHEAPSTART:      
0CA2   11 1C 55               LD   de,HEAP   
0CA5   18 23                  JR   constant   
0CA7                CONSTTIBSTART:      
0CA7   11 00 52               LD   de,TIB   
0CAA   18 1E                  JR   constant   
0CAC                VARBUFPTR:      
0CAC   ED 5B EC 54            LD   de,(vBufPtr)   
0CB0   21 EC 54               LD   hl,vBufPtr   
0CB3   18 12                  JR   variable   
0CB5                VARHEAPPTR:      
0CB5   ED 5B F0 54            LD   de,(vHeapPtr)   
0CB9   21 F0 54               LD   hl,vHeapPtr   
0CBC   18 09                  JR   variable   
0CBE                VARTIBPTR:      
0CBE   ED 5B EA 54            LD   de,(vTIBPtr)   
0CC2   21 EA 54               LD   hl,vTIBPtr   
0CC5   18 00                  JR   variable   
0CC7                VARIABLE:      
0CC7   22 F4 54               LD   (vPointer),hl   
0CCA                CONSTANT:      
0CCA   D5                     PUSH   de   
0CCB   DD E9                  JP   (ix)   
0CCD                             ; 
0CCD                FILTER:      
0CCD                SCAN:        
0CCD   DD E9                  JP   (ix)   
0CCF                             ;*******************************************************************
0CCF                             ; general routines
0CCF                             ;*******************************************************************
0CCF                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0CCF                FLUSHBUFFER:      
0CCF   F5                     PUSH   af   
0CD0   D5                     PUSH   de   
0CD1   E5                     PUSH   hl   
0CD2   2A EC 54               LD   hl,(vBufPtr)   
0CD5   11 00 53               LD   de,BUF   
0CD8   ED 53 EC 54            LD   (vBufPtr),de   
0CDC   B7                     OR   a   
0CDD   ED 52                  SBC   hl,de   
0CDF   CD 8C 0C               CALL   printChars2   
0CE2   E1                     POP   hl   
0CE3   D1                     POP   de   
0CE4   F1                     POP   af   
0CE5   C9                     RET      
0CE6                             ; followed by a table
0CE6                             ; db char
0CE6                             ; dw addr
0CE6                             ; the final item must have char == NUL
0CE6                JUMPTABLE:      
0CE6   03                     INC   bc   
0CE7   E1                     POP   hl   
0CE8                JUMPTABLE0:      
0CE8   AF                     XOR   a   
0CE9   BE                     CP   (hl)   
0CEA   28 09                  JR   z,jumpTable1   
0CEC   0A                     LD   a,(bc)   
0CED   BE                     CP   (hl)   
0CEE   28 06                  JR   z,jumpTable2   
0CF0   23                     INC   hl   
0CF1   23                     INC   hl   
0CF2   23                     INC   hl   
0CF3   18 F3                  JR   jumpTable0   
0CF5                JUMPTABLE1:      
0CF5   0B                     DEC   bc   
0CF6                JUMPTABLE2:      
0CF6   23                     INC   hl   
0CF7   5E                     LD   e,(hl)   
0CF8   23                     INC   hl   
0CF9   56                     LD   d,(hl)   
0CFA   EB                     EX   de,hl   
0CFB   E9                     JP   (hl)   
0CFC                PRTSTR0:      
0CFC   CD 85 00               CALL   putchar   
0CFF   23                     INC   hl   
0D00                PRTSTR:      
0D00   7E                     LD   a,(hl)   
0D01   B7                     OR   a   
0D02   20 F8                  JR   nz,prtstr0   
0D04   C9                     RET      
0D05                             ; **************************************************************************
0D05                             ; calculate nesting value
0D05                             ; a is char to be tested,
0D05                             ; e is the nesting value (initially 0)
0D05                             ; e is increased by ( and [
0D05                             ; e is decreased by ) and ]
0D05                             ; e has its bit 7 toggled by `
0D05                             ; limited to 127 levels
0D05                             ; **************************************************************************
0D05                NESTING:      
0D05   FE 22                  CP   DQ   ; quote char
0D07   28 06                  JR   z,nesting0   
0D09   FE 60                  CP   "`"   ; quote char
0D0B   28 02                  JR   z,nesting0   
0D0D   18 0A                  JR   nesting1   
0D0F                NESTING0:      
0D0F   CB 7B                  BIT   7,e   
0D11   28 03                  JR   z,nesting1a   
0D13   CB BB                  RES   7,e   
0D15   C9                     RET      
0D16                NESTING1A:      
0D16   CB FB                  SET   7,e   
0D18   C9                     RET      
0D19                NESTING1:      
0D19   CB 7B                  BIT   7,e   
0D1B   C0                     RET   nz   
0D1C   FE 7B                  CP   "{"   
0D1E   28 08                  JR   z,nesting2   
0D20   FE 5B                  CP   "["   
0D22   28 04                  JR   z,nesting2   
0D24   FE 28                  CP   "("   
0D26   20 02                  JR   nz,nesting3   
0D28                NESTING2:      
0D28   1C                     INC   e   
0D29   C9                     RET      
0D2A                NESTING3:      
0D2A   FE 7D                  CP   "}"   
0D2C   28 07                  JR   z,nesting4   
0D2E   FE 5D                  CP   "]"   
0D30   28 03                  JR   z,nesting4   
0D32   FE 29                  CP   ")"   
0D34   C0                     RET   nz   
0D35                NESTING4:      
0D35   1D                     DEC   e   
0D36   C9                     RET      
0D37                PROMPT:      
0D37   CD 47 0D               CALL   printStr   
0D3A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0D3F   C9                     RET      
0D40                CRLF:        
0D40   CD 47 0D               CALL   printStr   
0D43   0D 0A 00               .CSTR   "\r\n"   
0D46   C9                     RET      
0D47                             ; prints a null teminated string
0D47                             ; the string should be immediately following the call
0D47                PRINTSTR:      
0D47   E3                     EX   (sp),hl   ; swap			
0D48   CD 00 0D               CALL   prtstr   
0D4B   23                     INC   hl   ; inc past NUL
0D4C   E3                     EX   (sp),hl   ; put it back	
0D4D   C9                     RET      
0D4E                TITLESTR:      
0D4E   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0D62                INIT:        
0D62   21 4E 0D               LD   hl,titleStr   
0D65   11 08 55               LD   de,titleBuf   
0D68   06 14                  LD   b,20   
0D6A                INIT1:       
0D6A   1A                     LD   a,(de)   
0D6B   BE                     CP   (hl)   
0D6C   20 17                  JR   nz,coldBoot0   
0D6E   13                     INC   de   
0D6F   23                     INC   hl   
0D70   10 F8                  DJNZ   init1   
0D72                WARMINIT:      
0D72   ED 4B F8 54            LD   bc,(vSavedIP)   ; restore IP
0D76   ED 7B FA 54            LD   sp,(vSavedSP)   ; restore SP
0D7A   DD 2A FC 54            LD   ix,(vSavedNext)   ; restore Next
0D7E   FD 2A FE 54            LD   iy,(vSavedBP)   ; restore BP
0D82   C3 BC 0D               JP   start1   
0D85                COLDBOOT0:      
0D85   21 4E 0D               LD   hl,titleStr   ; copy titleStr to titleBuf
0D88   11 08 55               LD   de,titleBuf   
0D8B   06 14                  LD   b,20   
0D8D   ED B0                  LDIR      
0D8F                COLDINIT:      
0D8F   21 80 01               LD   hl,isysVars   
0D92   11 E6 54               LD   de,sysVars   
0D95   01 10 00               LD   bc,8 * 2   
0D98   ED B0                  LDIR      
0D9A   21 00 54               LD   hl,vars   ; 52 vars LO HI
0D9D   06 34                  LD   b,26*2   
0D9F   AF                     XOR   a   
0DA0                COLDBOOT1:      
0DA0   77                     LD   (hl),a   
0DA1   23                     INC   hl   
0DA2   10 FC                  DJNZ   coldBoot1   
0DA4   DD 2A EE 54            LD   ix,(vNext)   
0DA8   FD 21 00 52            LD   iy,STACK   
0DAC   C9                     RET      
0DAD                COLDSTART:      
0DAD   31 00 52               LD   sp,STACK   
0DB0   CD 85 0D               CALL   coldBoot0   
0DB3   C3 BC 0D               JP   start1   
0DB6                START:       
0DB6   31 00 52               LD   sp,STACK   ; start Monty
0DB9   CD 62 0D               CALL   init   ; setups
0DBC                START1:      
0DBC   21 08 55               LD   hl,titleBuf   
0DBF   CD 00 0D               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0DC2                INTERPRET:      
0DC2   CD CF 0C               CALL   flushBuffer   
0DC5   CD 37 0D               CALL   prompt   
0DC8   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0DCB   21 00 52               LD   hl,TIB   
0DCE   22 EA 54               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0DD1                INTERPRET2:      ; calculate nesting
0DD1   1E 00                  LD   e,0   ; initilize nesting value
0DD3   C5                     PUSH   bc   ; save offset into TIB,
0DD4                             ; bc is also the count of chars in TIB
0DD4   21 00 52               LD   hl,TIB   ; hl is start of TIB
0DD7   18 0B                  JR   interpret4   
0DD9                INTERPRET3:      
0DD9   3E 33                  LD   a,"3"   
0DDB   CD 85 00               CALL   putchar   
0DDE   7E                     LD   a,(hl)   ; a = char in TIB
0DDF   23                     INC   hl   ; inc pointer into TIB
0DE0   0B                     DEC   bc   ; dec count of chars in TIB
0DE1   CD 05 0D               CALL   nesting   ; update nesting value
0DE4                INTERPRET4:      
0DE4   79                     LD   a,c   ; is count zero?
0DE5   B0                     OR   b   
0DE6   20 F1                  JR   nz,interpret3   ; if not loop
0DE8   C1                     POP   bc   ; restore offset into TIB
0DE9                INTERPRET5:      
0DE9   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0DEC   FE 20                  CP   $20   ; compare to space
0DEE   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DF0   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DF2                             ; ???? NEEDED?
0DF2   28 36                  JR   z,interpret8   
0DF4   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DF6   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0DF8   FE 05                  CP   CTRL_E   
0DFA   CA 88 0E               JP   z,edit_   
0DFD   FE 08                  CP   CTRL_H   
0DFF   CA 78 0E               JP   z,backSpace_   
0E02   FE 0A                  CP   CTRL_J   
0E04   CA A0 0E               JP   z,reEdit_   
0E07                             ; cp CTRL_S
0E07                             ; jp z,printStack_
0E07                             ; DB     lsb(edit_)       ; ENQ ^E  5
0E07                             ; DB     lsb(reedit_)     ; LF  ^J 10
0E07                             ; DB     lsb(list_)       ; FF  ^L 12
0E07                             ; DB     lsb(printStack_) ; DLE ^P 16
0E07                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0E07                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0E07                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0E07                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0E07                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0E07                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0E07                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0E07                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0E07                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0E07                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0E07                INTERPRET5A:      
0E07                             ; ld (vTIBPtr),bc
0E07                             ; ld bc,(vTIBPtr)
0E07   18 C8                  JR   interpret2   
0E09                INTERPRET6:      
0E09   21 00 52               LD   hl,TIB   
0E0C   09                     ADD   hl,bc   
0E0D   77                     LD   (hl),a   ; store the character in textbuf
0E0E   03                     INC   bc   
0E0F   CD 85 00               CALL   putchar   ; echo character to screen
0E12   CD 05 0D               CALL   nesting   
0E15   18 D2                  JR   interpret5   ; wait for next character
0E17                INTERPRET7:      
0E17   21 00 52               LD   hl,TIB   
0E1A   09                     ADD   hl,bc   
0E1B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0E1D   23                     INC   hl   
0E1E   36 0A                  LD   (hl),"\n"   
0E20   23                     INC   hl   
0E21   03                     INC   bc   
0E22   03                     INC   bc   
0E23   CD 40 0D               CALL   crlf   ; echo character to screen
0E26   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0E27   B7                     OR   a   
0E28   20 BF                  JR   nz,interpret5   
0E2A                INTERPRET8:      
0E2A   21 00 52               LD   hl,TIB   
0E2D   09                     ADD   hl,bc   
0E2E   22 EA 54               LD   (vTIBPtr),hl   
0E31   01 00 52               LD   bc,TIB   
0E34   ED 43 F8 54            LD   (vSavedIP),bc   ; save IP
0E38   ED 73 FA 54            LD   (vSavedSP),sp   ; save SP
0E3C   DD 22 FC 54            LD   (vSavedNext),ix   ; save Next
0E40   FD 22 FE 54            LD   (vSavedBP),iy   ; save BP
0E44   0B                     DEC   bc   
0E45                NEXT:        
0E45   03                     INC   bc   ; Increment the IP
0E46   0A                     LD   a,(bc)   ; Get the next character and dispatch
0E47   FE 20                  CP   " "   ; whitespace?
0E49   28 FA                  JR   z,next   ; space? ignore
0E4B   38 09                  JR   c,next1   
0E4D   D6 20                  SUB   " "   
0E4F   6F                     LD   l,a   ; index into table
0E50   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0E52   6E                     LD   l,(hl)   ; get low jump address
0E53   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0E55   E9                     JP   (hl)   ; Jump to routine
0E56                NEXT1:       
0E56   FE 00                  CP   NUL   ; end of input string?
0E58   28 03                  JR   z,exit   
0E5A   C3 C2 0D               JP   interpret   ; no, other whitespace, macros?
0E5D                EXIT:        
0E5D   03                     INC   bc   
0E5E   60 69                  LD   hl,bc   
0E60   E9                     JP   (hl)   
0E61                RUN:         
0E61   C1                     POP   bc   
0E62   0B                     DEC   bc   
0E63   DD E9                  JP   (ix)   
0E65                ERROR:       
0E65   CD 61 0E               CALL   run   
0E68   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0E75   C3 C2 0D               JP   interpret   
0E78                BACKSPACE_:      
0E78   79                     LD   a,c   
0E79   B0                     OR   b   
0E7A   CA D1 0D               JP   z,interpret2   
0E7D   0B                     DEC   bc   
0E7E   CD 47 0D               CALL   printStr   
0E81   08 20 08 00            .CSTR   "\b \b"   
0E85   C3 D1 0D               JP   interpret2   
0E88                             ; edit
0E88                EDIT_:       
0E88   CD 61 0E               CALL   run   
0E8B   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0E9D   C3 C2 0D               JP   interpret   
0EA0                REEDIT_:      
0EA0   C3 C2 0D               JP   interpret   
0EA3                PRINTSTACK_:      
0EA3   CD 61 0E               CALL   run   
0EA6   2F 70 6B 00            .CSTR   "/pk"   
0EAA   C3 C2 0D               JP   interpret   
0EAD                             ; editDef:
0EAD                             ;     pop hl                      ; pop ret address
0EAD                             ;     ex (sp),hl                  ; swap with TOS
0EAD                             ;     push hl                     ; dup TOS
0EAD                             ;     ld a,l                      ; a = ident
0EAD                             ;     ld de,TIB                   ; de = start of TIB
0EAD                             ;     ld (vTIBPtr),de             ; update TIB*
0EAD                             ;     push ix                     ; save NEXT
0EAD                             ;     ld ix,editDef0              ; NEXT = editDef0
0EAD                             ;     jp lookupRef                ; convert letter into address
0EAD                             ; editDef0:
0EAD                             ;     ld e,(hl)                   ; de = (hl++)
0EAD                             ;     inc hl
0EAD                             ;     ld d,(hl)
0EAD                             ;     ld a,d                      ; de == 0 ?
0EAD                             ;     or e
0EAD                             ;     jr z,editDef4
0EAD                             ;     ld ix,editDef3              ; NEXT = editDef3
0EAD                             ;     ex de,hl
0EAD                             ;     ld a,(hl)
0EAD                             ;     cp "{"
0EAD                             ;     jr nz,editDef1
0EAD                             ;     jp editBlock0               ; convert letter into address
0EAD                             ; editDef1:
0EAD                             ;     cp "("
0EAD                             ;     jr nz,editDef2
0EAD                             ;     jp editBlock0               ; convert letter into address
0EAD                             ; editDef2:
0EAD                             ;     jp editFunc
0EAD                             ; editDef3:
0EAD                             ;     ld a," "                    ; write assign
0EAD                             ;     call writeChar
0EAD                             ;     pop hl                      ; a = ident
0EAD                             ;     ld a,l
0EAD                             ;     call writeChar
0EAD                             ;     ld a,"="                    ; write assign
0EAD                             ;     call writeChar
0EAD                             ;     ld ix,editDef4              ; NEXT = editDef4
0EAD                             ;     jp printTIB
0EAD                             ; editDef4:
0EAD                             ;     pop ix                      ; restore NEXT
0EAD                             ;     jp (ix)
0EAD                             ; writeChar:
0EAD                             ;     ld de,(vTIBPtr)             ; de = TIB*
0EAD                             ;     ld (de),a                   ; write ident
0EAD                             ;     inc de
0EAD                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0EAD                             ;     ret
0EAD                             ; ; printTIB
0EAD                             ; printTIB:
0EAD                             ;     ld hl,(vTIBPtr)
0EAD                             ;     ld de,TIB
0EAD                             ;     or a
0EAD                             ;     sbc hl,de
0EAD                             ;     jp printTIB2
0EAD                             ; printTIB1:
0EAD                             ;     ld a,(de)
0EAD                             ;     call putchar
0EAD                             ; printTIB2:
0EAD                             ;     ld a,l
0EAD                             ;     or h
0EAD                             ;     jr nz,printTIB1
0EAD                             ;     jp (ix)
0EAD                             ; editBlock:
0EAD                             ;     pop hl                      ; hl = block*
0EAD                             ; editBlock0:
0EAD                             ;     push ix                     ; save next
0EAD                             ;     push hl                     ; push block*
0EAD                             ;     push hl                     ; push block*
0EAD                             ;     ld ix,(editBlock2)
0EAD                             ;     jp blockLength
0EAD                             ; editBlock1:
0EAD                             ;     pop hl                      ; bc = length, (sp) = IP
0EAD                             ;     pop de                      ; de = block*
0EAD                             ;     ld a,l
0EAD                             ;     or h
0EAD                             ;     jr z,editBlock2
0EAD                             ;     push bc
0EAD                             ;     ld bc,hl
0EAD                             ;     ex de,hl                    ; hl = block*
0EAD                             ;     ld de,(vTIBPtr)              ; de = TIB*
0EAD                             ;     ldir                        ; copy block to TIB
0EAD                             ;     ld (vTIBPtr),de              ; save TIB*
0EAD                             ;     pop bc
0EAD                             ; editBlock2:
0EAD                             ;     pop ix                      ; restore next
0EAD                             ;     jp (ix)
0EAD                             ; editFunc:
0EAD                             ;     jp (ix)
0EAD                             ; editArray:
0EAD                             ;     jp (ix)
0EAD                             ; editArglist:
0EAD                             ;     jp (ix)
0EAD                             ; ; blockLength
0EAD                             ; ; addr1 -- length
0EAD                             ; blockLength:
0EAD                             ;     pop hl                      ; block*
0EAD                             ;     push hl                     ; save block*
0EAD                             ;     inc hl                      ; skip first char
0EAD                             ;     ld d,1                      ; increase nesting
0EAD                             ; blockLength1:                   ; Skip to end of definition
0EAD                             ;     ld a,(hl)                   ; Get the next character
0EAD                             ;     inc hl                      ; Point to next character
0EAD                             ;     cp " " + 1                  ; ignore whitespace
0EAD                             ;     jr c,blockLength1
0EAD                             ;     cp ")"
0EAD                             ;     jr z,blockLength4
0EAD                             ;     cp "}"
0EAD                             ;     jr z,blockLength4
0EAD                             ;     cp "]"
0EAD                             ;     jr z,blockLength4
0EAD                             ;     cp "("
0EAD                             ;     jr z,blockLength2
0EAD                             ;     cp "{"
0EAD                             ;     jr z,blockLength2
0EAD                             ;     cp "["
0EAD                             ;     jr z,blockLength2
0EAD                             ;     cp "'"
0EAD                             ;     jr z,blockLength3
0EAD                             ;     cp "`"
0EAD                             ;     jr z,blockLength3
0EAD                             ;     cp DQ
0EAD                             ;     jr z,blockLength3
0EAD                             ;     jr blockLength1
0EAD                             ; blockLength2:
0EAD                             ;     inc d
0EAD                             ;     jr blockLength1
0EAD                             ; blockLength4:
0EAD                             ;     dec d
0EAD                             ;     jr nz, blockLength1         ; get the next element
0EAD                             ; blockLength3:
0EAD                             ;     ld a,$80
0EAD                             ;     xor d
0EAD                             ;     ld d,a
0EAD                             ;     jr nz, blockLength1
0EAD                             ;     pop hl                      ; hl = block*
0EAD                             ;     or a
0EAD                             ;     sbc hl,de
0EAD                             ;     push hl
0EAD                             ;     jp (ix)
0EAD                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0EAD                             ; \a start of stack \#3 depth \b base \$ prompt
0EAD                             ; DW dStack               ; a vS0 start of datastack			
0EAD                             ; DW FALSE                ; b vBase16
0EAD                             ; DW 0                    ; c vTIBPtr an offset to the tib
0EAD                             ; DW 0                    ; d
0EAD                             ; DW 65                   ; e vLastDef "A" last command u defined
0EAD                             ; DW 0                    ; f
0EAD                             ; DW page6                ; g 256 bytes limits
0EAD                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0EAD                          ;*Macro unroll: FUNC f1, 1, ""
0EAD                F1:          
0EAD   CD E9 09               CALL   go   
0EB0   00 00                  DW   NUL   
0EB2   B8 0E                  DW   f1M_2809S12   
0EB4   B6 0E                  DW   $+2   
0EB6   01                     DB   1   
0EB7   00                     .PSTR   ""   
0EB8                F1M_2809S12:      
0EB8   00                     DB   0   
0EB9                          ;*Macro unroll: FUNC f2, 1, ""
0EB9                F2:          
0EB9   CD E9 09               CALL   go   
0EBC   00 00                  DW   NUL   
0EBE   C4 0E                  DW   f2M_2811S15   
0EC0   C2 0E                  DW   $+2   
0EC2   01                     DB   1   
0EC3   00                     .PSTR   ""   
0EC4                F2M_2811S15:      
0EC4   00                     DB   0   
0EC5                          ;*Macro unroll: FUNC f3, 0, ""
0EC5                F3:          
0EC5   CD E9 09               CALL   go   
0EC8   00 00                  DW   NUL   
0ECA   D0 0E                  DW   f3M_2813S18   
0ECC   CE 0E                  DW   $+2   
0ECE   00                     DB   0   
0ECF   00                     .PSTR   ""   
0ED0                F3M_2813S18:      
0ED0   00                     DB   0   
0ED1                          ;*Macro unroll: FUNC f4, 1, ""
0ED1                F4:          
0ED1   CD E9 09               CALL   go   
0ED4   00 00                  DW   NUL   
0ED6   DC 0E                  DW   f4M_2815S21   
0ED8   DA 0E                  DW   $+2   
0EDA   01                     DB   1   
0EDB   00                     .PSTR   ""   
0EDC                F4M_2815S21:      
0EDC   00                     DB   0   
0EDD                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                             ; test "[1 2 5]/as.",0
0F00                             ; test "0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe", 0
0F00                          ;*Macro unroll:  test "[1 2 5].a 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe", 0
0F00   31 00 52               LD   SP,STACK   
0F03   CD 8F 0D               CALL   coldInit   
0F06   CD 86 50               CALL   execStr   
0F09   5B 31 20 32 20 35 5D 2E 61 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 65 00 DB   "[1 2 5].a 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe",0   
0F40   CD CF 0C               CALL   flushBuffer   
0F43   E1                     POP   HL   
0F44   E5                     PUSH   HL   
0F45   11 00 00               LD   DE,0   
0F48   B7                     OR   A   
0F49   ED 52                  SBC   HL,DE   
0F4B   7D                     LD   A,L   
0F4C   B4                     OR   H   
0F4D   CA DE 0F               JP   Z,expectM_2821S29   
0F50   CD 47 0D               CALL   printStr   
0F53   43 6F 64 65 3A 20 5B 31 20 32 20 35 5D 2E 61 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 65 00 .CSTR   "Code: ","[1 2 5].a 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe"   
0F90   CD 47 0D               CALL   printStr   
0F93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FA2   21 00 00               LD   hl,0   
0FA5   E5                     PUSH   hl   
0FA6   E5                     PUSH   hl   
0FA7   CD 61 0E               CALL   run   
0FAA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FB2   CD CF 0C               CALL   flushBuffer   
0FB5   CD 47 0D               CALL   printStr   
0FB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FC5   E1                     POP   hl   
0FC6   E5                     PUSH   hl   
0FC7   E5                     PUSH   hl   
0FC8   CD 61 0E               CALL   run   
0FCB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FDA   CD CF 0C               CALL   flushBuffer   
0FDD   76                     HALT      
0FDE                EXPECTM_2821S29:      
0FDE   E1                     POP   HL   
0FDF   CD 47 0D               CALL   printStr   
0FE2   44 6F 6E 65 21 00      .CSTR   "Done!"   
0FE8   76                     HALT      
0FE9                             ; 
0FE9                          ;*Macro unroll:  test "/f", false
0FE9   31 00 52               LD   SP,STACK   
0FEC   CD 8F 0D               CALL   coldInit   
0FEF   CD 86 50               CALL   execStr   
0FF2   2F 66 00               DB   "/f",0   
0FF5   CD CF 0C               CALL   flushBuffer   
0FF8   E1                     POP   HL   
0FF9   E5                     PUSH   HL   
0FFA   11 00 00               LD   DE,false   
0FFD   B7                     OR   A   
0FFE   ED 52                  SBC   HL,DE   
1000   7D                     LD   A,L   
1001   B4                     OR   H   
1002   CA 5F 10               JP   Z,expectM_2826S37   
1005   CD 47 0D               CALL   printStr   
1008   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1011   CD 47 0D               CALL   printStr   
1014   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1023   21 00 00               LD   hl,false   
1026   E5                     PUSH   hl   
1027   E5                     PUSH   hl   
1028   CD 61 0E               CALL   run   
102B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1033   CD CF 0C               CALL   flushBuffer   
1036   CD 47 0D               CALL   printStr   
1039   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1046   E1                     POP   hl   
1047   E5                     PUSH   hl   
1048   E5                     PUSH   hl   
1049   CD 61 0E               CALL   run   
104C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
105B   CD CF 0C               CALL   flushBuffer   
105E   76                     HALT      
105F                EXPECTM_2826S37:      
105F   E1                     POP   HL   
1060                          ;*Macro unroll:  test "/t", true
1060   31 00 52               LD   SP,STACK   
1063   CD 8F 0D               CALL   coldInit   
1066   CD 86 50               CALL   execStr   
1069   2F 74 00               DB   "/t",0   
106C   CD CF 0C               CALL   flushBuffer   
106F   E1                     POP   HL   
1070   E5                     PUSH   HL   
1071   11 FF FF               LD   DE,true   
1074   B7                     OR   A   
1075   ED 52                  SBC   HL,DE   
1077   7D                     LD   A,L   
1078   B4                     OR   H   
1079   CA D6 10               JP   Z,expectM_2827S38   
107C   CD 47 0D               CALL   printStr   
107F   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1088   CD 47 0D               CALL   printStr   
108B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
109A   21 FF FF               LD   hl,true   
109D   E5                     PUSH   hl   
109E   E5                     PUSH   hl   
109F   CD 61 0E               CALL   run   
10A2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10AA   CD CF 0C               CALL   flushBuffer   
10AD   CD 47 0D               CALL   printStr   
10B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10BD   E1                     POP   hl   
10BE   E5                     PUSH   hl   
10BF   E5                     PUSH   hl   
10C0   CD 61 0E               CALL   run   
10C3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10D2   CD CF 0C               CALL   flushBuffer   
10D5   76                     HALT      
10D6                EXPECTM_2827S38:      
10D6   E1                     POP   HL   
10D7                          ;*Macro unroll:  test "1", 1
10D7   31 00 52               LD   SP,STACK   
10DA   CD 8F 0D               CALL   coldInit   
10DD   CD 86 50               CALL   execStr   
10E0   31 00                  DB   "1",0   
10E2   CD CF 0C               CALL   flushBuffer   
10E5   E1                     POP   HL   
10E6   E5                     PUSH   HL   
10E7   11 01 00               LD   DE,1   
10EA   B7                     OR   A   
10EB   ED 52                  SBC   HL,DE   
10ED   7D                     LD   A,L   
10EE   B4                     OR   H   
10EF   CA 4B 11               JP   Z,expectM_2828S39   
10F2   CD 47 0D               CALL   printStr   
10F5   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10FD   CD 47 0D               CALL   printStr   
1100   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
110F   21 01 00               LD   hl,1   
1112   E5                     PUSH   hl   
1113   E5                     PUSH   hl   
1114   CD 61 0E               CALL   run   
1117   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
111F   CD CF 0C               CALL   flushBuffer   
1122   CD 47 0D               CALL   printStr   
1125   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1132   E1                     POP   hl   
1133   E5                     PUSH   hl   
1134   E5                     PUSH   hl   
1135   CD 61 0E               CALL   run   
1138   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1147   CD CF 0C               CALL   flushBuffer   
114A   76                     HALT      
114B                EXPECTM_2828S39:      
114B   E1                     POP   HL   
114C                          ;*Macro unroll:  test "2", 2
114C   31 00 52               LD   SP,STACK   
114F   CD 8F 0D               CALL   coldInit   
1152   CD 86 50               CALL   execStr   
1155   32 00                  DB   "2",0   
1157   CD CF 0C               CALL   flushBuffer   
115A   E1                     POP   HL   
115B   E5                     PUSH   HL   
115C   11 02 00               LD   DE,2   
115F   B7                     OR   A   
1160   ED 52                  SBC   HL,DE   
1162   7D                     LD   A,L   
1163   B4                     OR   H   
1164   CA C0 11               JP   Z,expectM_2829S40   
1167   CD 47 0D               CALL   printStr   
116A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1172   CD 47 0D               CALL   printStr   
1175   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1184   21 02 00               LD   hl,2   
1187   E5                     PUSH   hl   
1188   E5                     PUSH   hl   
1189   CD 61 0E               CALL   run   
118C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1194   CD CF 0C               CALL   flushBuffer   
1197   CD 47 0D               CALL   printStr   
119A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11A7   E1                     POP   hl   
11A8   E5                     PUSH   hl   
11A9   E5                     PUSH   hl   
11AA   CD 61 0E               CALL   run   
11AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11BC   CD CF 0C               CALL   flushBuffer   
11BF   76                     HALT      
11C0                EXPECTM_2829S40:      
11C0   E1                     POP   HL   
11C1                          ;*Macro unroll:  test "1", 1
11C1   31 00 52               LD   SP,STACK   
11C4   CD 8F 0D               CALL   coldInit   
11C7   CD 86 50               CALL   execStr   
11CA   31 00                  DB   "1",0   
11CC   CD CF 0C               CALL   flushBuffer   
11CF   E1                     POP   HL   
11D0   E5                     PUSH   HL   
11D1   11 01 00               LD   DE,1   
11D4   B7                     OR   A   
11D5   ED 52                  SBC   HL,DE   
11D7   7D                     LD   A,L   
11D8   B4                     OR   H   
11D9   CA 35 12               JP   Z,expectM_2830S41   
11DC   CD 47 0D               CALL   printStr   
11DF   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11E7   CD 47 0D               CALL   printStr   
11EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11F9   21 01 00               LD   hl,1   
11FC   E5                     PUSH   hl   
11FD   E5                     PUSH   hl   
11FE   CD 61 0E               CALL   run   
1201   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1209   CD CF 0C               CALL   flushBuffer   
120C   CD 47 0D               CALL   printStr   
120F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
121C   E1                     POP   hl   
121D   E5                     PUSH   hl   
121E   E5                     PUSH   hl   
121F   CD 61 0E               CALL   run   
1222   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1231   CD CF 0C               CALL   flushBuffer   
1234   76                     HALT      
1235                EXPECTM_2830S41:      
1235   E1                     POP   HL   
1236                          ;*Macro unroll:  test "0", 0
1236   31 00 52               LD   SP,STACK   
1239   CD 8F 0D               CALL   coldInit   
123C   CD 86 50               CALL   execStr   
123F   30 00                  DB   "0",0   
1241   CD CF 0C               CALL   flushBuffer   
1244   E1                     POP   HL   
1245   E5                     PUSH   HL   
1246   11 00 00               LD   DE,0   
1249   B7                     OR   A   
124A   ED 52                  SBC   HL,DE   
124C   7D                     LD   A,L   
124D   B4                     OR   H   
124E   CA AA 12               JP   Z,expectM_2831S42   
1251   CD 47 0D               CALL   printStr   
1254   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
125C   CD 47 0D               CALL   printStr   
125F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
126E   21 00 00               LD   hl,0   
1271   E5                     PUSH   hl   
1272   E5                     PUSH   hl   
1273   CD 61 0E               CALL   run   
1276   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
127E   CD CF 0C               CALL   flushBuffer   
1281   CD 47 0D               CALL   printStr   
1284   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1291   E1                     POP   hl   
1292   E5                     PUSH   hl   
1293   E5                     PUSH   hl   
1294   CD 61 0E               CALL   run   
1297   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12A6   CD CF 0C               CALL   flushBuffer   
12A9   76                     HALT      
12AA                EXPECTM_2831S42:      
12AA   E1                     POP   HL   
12AB                          ;*Macro unroll:  test "10", 10
12AB   31 00 52               LD   SP,STACK   
12AE   CD 8F 0D               CALL   coldInit   
12B1   CD 86 50               CALL   execStr   
12B4   31 30 00               DB   "10",0   
12B7   CD CF 0C               CALL   flushBuffer   
12BA   E1                     POP   HL   
12BB   E5                     PUSH   HL   
12BC   11 0A 00               LD   DE,10   
12BF   B7                     OR   A   
12C0   ED 52                  SBC   HL,DE   
12C2   7D                     LD   A,L   
12C3   B4                     OR   H   
12C4   CA 21 13               JP   Z,expectM_2832S43   
12C7   CD 47 0D               CALL   printStr   
12CA   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
12D3   CD 47 0D               CALL   printStr   
12D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E5   21 0A 00               LD   hl,10   
12E8   E5                     PUSH   hl   
12E9   E5                     PUSH   hl   
12EA   CD 61 0E               CALL   run   
12ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12F5   CD CF 0C               CALL   flushBuffer   
12F8   CD 47 0D               CALL   printStr   
12FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1308   E1                     POP   hl   
1309   E5                     PUSH   hl   
130A   E5                     PUSH   hl   
130B   CD 61 0E               CALL   run   
130E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
131D   CD CF 0C               CALL   flushBuffer   
1320   76                     HALT      
1321                EXPECTM_2832S43:      
1321   E1                     POP   HL   
1322                          ;*Macro unroll:  test "123", 123
1322   31 00 52               LD   SP,STACK   
1325   CD 8F 0D               CALL   coldInit   
1328   CD 86 50               CALL   execStr   
132B   31 32 33 00            DB   "123",0   
132F   CD CF 0C               CALL   flushBuffer   
1332   E1                     POP   HL   
1333   E5                     PUSH   HL   
1334   11 7B 00               LD   DE,123   
1337   B7                     OR   A   
1338   ED 52                  SBC   HL,DE   
133A   7D                     LD   A,L   
133B   B4                     OR   H   
133C   CA 9A 13               JP   Z,expectM_2833S44   
133F   CD 47 0D               CALL   printStr   
1342   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
134C   CD 47 0D               CALL   printStr   
134F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
135E   21 7B 00               LD   hl,123   
1361   E5                     PUSH   hl   
1362   E5                     PUSH   hl   
1363   CD 61 0E               CALL   run   
1366   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
136E   CD CF 0C               CALL   flushBuffer   
1371   CD 47 0D               CALL   printStr   
1374   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1381   E1                     POP   hl   
1382   E5                     PUSH   hl   
1383   E5                     PUSH   hl   
1384   CD 61 0E               CALL   run   
1387   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1396   CD CF 0C               CALL   flushBuffer   
1399   76                     HALT      
139A                EXPECTM_2833S44:      
139A   E1                     POP   HL   
139B                          ;*Macro unroll:  test "-1",-1
139B   31 00 52               LD   SP,STACK   
139E   CD 8F 0D               CALL   coldInit   
13A1   CD 86 50               CALL   execStr   
13A4   2D 31 00               DB   "-1",0   
13A7   CD CF 0C               CALL   flushBuffer   
13AA   E1                     POP   HL   
13AB   E5                     PUSH   HL   
13AC   11 FF FF               LD   DE,-1   
13AF   B7                     OR   A   
13B0   ED 52                  SBC   HL,DE   
13B2   7D                     LD   A,L   
13B3   B4                     OR   H   
13B4   CA 11 14               JP   Z,expectM_2834S45   
13B7   CD 47 0D               CALL   printStr   
13BA   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
13C3   CD 47 0D               CALL   printStr   
13C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D5   21 FF FF               LD   hl,-1   
13D8   E5                     PUSH   hl   
13D9   E5                     PUSH   hl   
13DA   CD 61 0E               CALL   run   
13DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13E5   CD CF 0C               CALL   flushBuffer   
13E8   CD 47 0D               CALL   printStr   
13EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13F8   E1                     POP   hl   
13F9   E5                     PUSH   hl   
13FA   E5                     PUSH   hl   
13FB   CD 61 0E               CALL   run   
13FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
140D   CD CF 0C               CALL   flushBuffer   
1410   76                     HALT      
1411                EXPECTM_2834S45:      
1411   E1                     POP   HL   
1412                          ;*Macro unroll:  test "''", 0
1412   31 00 52               LD   SP,STACK   
1415   CD 8F 0D               CALL   coldInit   
1418   CD 86 50               CALL   execStr   
141B   27 27 00               DB   "''",0   
141E   CD CF 0C               CALL   flushBuffer   
1421   E1                     POP   HL   
1422   E5                     PUSH   HL   
1423   11 00 00               LD   DE,0   
1426   B7                     OR   A   
1427   ED 52                  SBC   HL,DE   
1429   7D                     LD   A,L   
142A   B4                     OR   H   
142B   CA 88 14               JP   Z,expectM_2835S46   
142E   CD 47 0D               CALL   printStr   
1431   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
143A   CD 47 0D               CALL   printStr   
143D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144C   21 00 00               LD   hl,0   
144F   E5                     PUSH   hl   
1450   E5                     PUSH   hl   
1451   CD 61 0E               CALL   run   
1454   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
145C   CD CF 0C               CALL   flushBuffer   
145F   CD 47 0D               CALL   printStr   
1462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146F   E1                     POP   hl   
1470   E5                     PUSH   hl   
1471   E5                     PUSH   hl   
1472   CD 61 0E               CALL   run   
1475   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1484   CD CF 0C               CALL   flushBuffer   
1487   76                     HALT      
1488                EXPECTM_2835S46:      
1488   E1                     POP   HL   
1489                          ;*Macro unroll:  test "'a'", $61
1489   31 00 52               LD   SP,STACK   
148C   CD 8F 0D               CALL   coldInit   
148F   CD 86 50               CALL   execStr   
1492   27 61 27 00            DB   "'a'",0   
1496   CD CF 0C               CALL   flushBuffer   
1499   E1                     POP   HL   
149A   E5                     PUSH   HL   
149B   11 61 00               LD   DE,$61   
149E   B7                     OR   A   
149F   ED 52                  SBC   HL,DE   
14A1   7D                     LD   A,L   
14A2   B4                     OR   H   
14A3   CA 01 15               JP   Z,expectM_2836S47   
14A6   CD 47 0D               CALL   printStr   
14A9   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
14B3   CD 47 0D               CALL   printStr   
14B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C5   21 61 00               LD   hl,$61   
14C8   E5                     PUSH   hl   
14C9   E5                     PUSH   hl   
14CA   CD 61 0E               CALL   run   
14CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D5   CD CF 0C               CALL   flushBuffer   
14D8   CD 47 0D               CALL   printStr   
14DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E8   E1                     POP   hl   
14E9   E5                     PUSH   hl   
14EA   E5                     PUSH   hl   
14EB   CD 61 0E               CALL   run   
14EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14FD   CD CF 0C               CALL   flushBuffer   
1500   76                     HALT      
1501                EXPECTM_2836S47:      
1501   E1                     POP   HL   
1502                          ;*Macro unroll:  test "'\\''", $27
1502   31 00 52               LD   SP,STACK   
1505   CD 8F 0D               CALL   coldInit   
1508   CD 86 50               CALL   execStr   
150B   27 5C 27 27 00         DB   "'\\''",0   
1510   CD CF 0C               CALL   flushBuffer   
1513   E1                     POP   HL   
1514   E5                     PUSH   HL   
1515   11 27 00               LD   DE,$27   
1518   B7                     OR   A   
1519   ED 52                  SBC   HL,DE   
151B   7D                     LD   A,L   
151C   B4                     OR   H   
151D   CA 7C 15               JP   Z,expectM_2837S48   
1520   CD 47 0D               CALL   printStr   
1523   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
152E   CD 47 0D               CALL   printStr   
1531   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1540   21 27 00               LD   hl,$27   
1543   E5                     PUSH   hl   
1544   E5                     PUSH   hl   
1545   CD 61 0E               CALL   run   
1548   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1550   CD CF 0C               CALL   flushBuffer   
1553   CD 47 0D               CALL   printStr   
1556   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1563   E1                     POP   hl   
1564   E5                     PUSH   hl   
1565   E5                     PUSH   hl   
1566   CD 61 0E               CALL   run   
1569   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1578   CD CF 0C               CALL   flushBuffer   
157B   76                     HALT      
157C                EXPECTM_2837S48:      
157C   E1                     POP   HL   
157D                          ;*Macro unroll:  test "$10", $10
157D   31 00 52               LD   SP,STACK   
1580   CD 8F 0D               CALL   coldInit   
1583   CD 86 50               CALL   execStr   
1586   24 31 30 00            DB   "$10",0   
158A   CD CF 0C               CALL   flushBuffer   
158D   E1                     POP   HL   
158E   E5                     PUSH   HL   
158F   11 10 00               LD   DE,$10   
1592   B7                     OR   A   
1593   ED 52                  SBC   HL,DE   
1595   7D                     LD   A,L   
1596   B4                     OR   H   
1597   CA F5 15               JP   Z,expectM_2838S49   
159A   CD 47 0D               CALL   printStr   
159D   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
15A7   CD 47 0D               CALL   printStr   
15AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15B9   21 10 00               LD   hl,$10   
15BC   E5                     PUSH   hl   
15BD   E5                     PUSH   hl   
15BE   CD 61 0E               CALL   run   
15C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15C9   CD CF 0C               CALL   flushBuffer   
15CC   CD 47 0D               CALL   printStr   
15CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15DC   E1                     POP   hl   
15DD   E5                     PUSH   hl   
15DE   E5                     PUSH   hl   
15DF   CD 61 0E               CALL   run   
15E2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15F1   CD CF 0C               CALL   flushBuffer   
15F4   76                     HALT      
15F5                EXPECTM_2838S49:      
15F5   E1                     POP   HL   
15F6                          ;*Macro unroll:  test "$FF", $FF
15F6   31 00 52               LD   SP,STACK   
15F9   CD 8F 0D               CALL   coldInit   
15FC   CD 86 50               CALL   execStr   
15FF   24 46 46 00            DB   "$FF",0   
1603   CD CF 0C               CALL   flushBuffer   
1606   E1                     POP   HL   
1607   E5                     PUSH   HL   
1608   11 FF 00               LD   DE,$FF   
160B   B7                     OR   A   
160C   ED 52                  SBC   HL,DE   
160E   7D                     LD   A,L   
160F   B4                     OR   H   
1610   CA 6E 16               JP   Z,expectM_2839S50   
1613   CD 47 0D               CALL   printStr   
1616   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1620   CD 47 0D               CALL   printStr   
1623   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1632   21 FF 00               LD   hl,$FF   
1635   E5                     PUSH   hl   
1636   E5                     PUSH   hl   
1637   CD 61 0E               CALL   run   
163A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1642   CD CF 0C               CALL   flushBuffer   
1645   CD 47 0D               CALL   printStr   
1648   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1655   E1                     POP   hl   
1656   E5                     PUSH   hl   
1657   E5                     PUSH   hl   
1658   CD 61 0E               CALL   run   
165B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
166A   CD CF 0C               CALL   flushBuffer   
166D   76                     HALT      
166E                EXPECTM_2839S50:      
166E   E1                     POP   HL   
166F                          ;*Macro unroll:  test "-1 2 +",1
166F   31 00 52               LD   SP,STACK   
1672   CD 8F 0D               CALL   coldInit   
1675   CD 86 50               CALL   execStr   
1678   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
167F   CD CF 0C               CALL   flushBuffer   
1682   E1                     POP   HL   
1683   E5                     PUSH   HL   
1684   11 01 00               LD   DE,1   
1687   B7                     OR   A   
1688   ED 52                  SBC   HL,DE   
168A   7D                     LD   A,L   
168B   B4                     OR   H   
168C   CA ED 16               JP   Z,expectM_2840S51   
168F   CD 47 0D               CALL   printStr   
1692   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
169F   CD 47 0D               CALL   printStr   
16A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16B1   21 01 00               LD   hl,1   
16B4   E5                     PUSH   hl   
16B5   E5                     PUSH   hl   
16B6   CD 61 0E               CALL   run   
16B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16C1   CD CF 0C               CALL   flushBuffer   
16C4   CD 47 0D               CALL   printStr   
16C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16D4   E1                     POP   hl   
16D5   E5                     PUSH   hl   
16D6   E5                     PUSH   hl   
16D7   CD 61 0E               CALL   run   
16DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16E9   CD CF 0C               CALL   flushBuffer   
16EC   76                     HALT      
16ED                EXPECTM_2840S51:      
16ED   E1                     POP   HL   
16EE                          ;*Macro unroll:  test "-1 1 +",0
16EE   31 00 52               LD   SP,STACK   
16F1   CD 8F 0D               CALL   coldInit   
16F4   CD 86 50               CALL   execStr   
16F7   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
16FE   CD CF 0C               CALL   flushBuffer   
1701   E1                     POP   HL   
1702   E5                     PUSH   HL   
1703   11 00 00               LD   DE,0   
1706   B7                     OR   A   
1707   ED 52                  SBC   HL,DE   
1709   7D                     LD   A,L   
170A   B4                     OR   H   
170B   CA 6C 17               JP   Z,expectM_2841S52   
170E   CD 47 0D               CALL   printStr   
1711   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
171E   CD 47 0D               CALL   printStr   
1721   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1730   21 00 00               LD   hl,0   
1733   E5                     PUSH   hl   
1734   E5                     PUSH   hl   
1735   CD 61 0E               CALL   run   
1738   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1740   CD CF 0C               CALL   flushBuffer   
1743   CD 47 0D               CALL   printStr   
1746   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1753   E1                     POP   hl   
1754   E5                     PUSH   hl   
1755   E5                     PUSH   hl   
1756   CD 61 0E               CALL   run   
1759   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1768   CD CF 0C               CALL   flushBuffer   
176B   76                     HALT      
176C                EXPECTM_2841S52:      
176C   E1                     POP   HL   
176D                          ;*Macro unroll:  test "1 2 +", 3
176D   31 00 52               LD   SP,STACK   
1770   CD 8F 0D               CALL   coldInit   
1773   CD 86 50               CALL   execStr   
1776   31 20 32 20 2B 00      DB   "1 2 +",0   
177C   CD CF 0C               CALL   flushBuffer   
177F   E1                     POP   HL   
1780   E5                     PUSH   HL   
1781   11 03 00               LD   DE,3   
1784   B7                     OR   A   
1785   ED 52                  SBC   HL,DE   
1787   7D                     LD   A,L   
1788   B4                     OR   H   
1789   CA E9 17               JP   Z,expectM_2842S53   
178C   CD 47 0D               CALL   printStr   
178F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
179B   CD 47 0D               CALL   printStr   
179E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17AD   21 03 00               LD   hl,3   
17B0   E5                     PUSH   hl   
17B1   E5                     PUSH   hl   
17B2   CD 61 0E               CALL   run   
17B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17BD   CD CF 0C               CALL   flushBuffer   
17C0   CD 47 0D               CALL   printStr   
17C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17D0   E1                     POP   hl   
17D1   E5                     PUSH   hl   
17D2   E5                     PUSH   hl   
17D3   CD 61 0E               CALL   run   
17D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17E5   CD CF 0C               CALL   flushBuffer   
17E8   76                     HALT      
17E9                EXPECTM_2842S53:      
17E9   E1                     POP   HL   
17EA                          ;*Macro unroll:  test "4 1 2 +", 3
17EA   31 00 52               LD   SP,STACK   
17ED   CD 8F 0D               CALL   coldInit   
17F0   CD 86 50               CALL   execStr   
17F3   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
17FB   CD CF 0C               CALL   flushBuffer   
17FE   E1                     POP   HL   
17FF   E5                     PUSH   HL   
1800   11 03 00               LD   DE,3   
1803   B7                     OR   A   
1804   ED 52                  SBC   HL,DE   
1806   7D                     LD   A,L   
1807   B4                     OR   H   
1808   CA 6A 18               JP   Z,expectM_2843S54   
180B   CD 47 0D               CALL   printStr   
180E   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
181C   CD 47 0D               CALL   printStr   
181F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
182E   21 03 00               LD   hl,3   
1831   E5                     PUSH   hl   
1832   E5                     PUSH   hl   
1833   CD 61 0E               CALL   run   
1836   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
183E   CD CF 0C               CALL   flushBuffer   
1841   CD 47 0D               CALL   printStr   
1844   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1851   E1                     POP   hl   
1852   E5                     PUSH   hl   
1853   E5                     PUSH   hl   
1854   CD 61 0E               CALL   run   
1857   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1866   CD CF 0C               CALL   flushBuffer   
1869   76                     HALT      
186A                EXPECTM_2843S54:      
186A   E1                     POP   HL   
186B                          ;*Macro unroll:  test "123 456 +", 123+456
186B   31 00 52               LD   SP,STACK   
186E   CD 8F 0D               CALL   coldInit   
1871   CD 86 50               CALL   execStr   
1874   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
187E   CD CF 0C               CALL   flushBuffer   
1881   E1                     POP   HL   
1882   E5                     PUSH   HL   
1883   11 43 02               LD   DE,123+456   
1886   B7                     OR   A   
1887   ED 52                  SBC   HL,DE   
1889   7D                     LD   A,L   
188A   B4                     OR   H   
188B   CA EF 18               JP   Z,expectM_2844S55   
188E   CD 47 0D               CALL   printStr   
1891   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
18A1   CD 47 0D               CALL   printStr   
18A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18B3   21 43 02               LD   hl,123+456   
18B6   E5                     PUSH   hl   
18B7   E5                     PUSH   hl   
18B8   CD 61 0E               CALL   run   
18BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18C3   CD CF 0C               CALL   flushBuffer   
18C6   CD 47 0D               CALL   printStr   
18C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18D6   E1                     POP   hl   
18D7   E5                     PUSH   hl   
18D8   E5                     PUSH   hl   
18D9   CD 61 0E               CALL   run   
18DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18EB   CD CF 0C               CALL   flushBuffer   
18EE   76                     HALT      
18EF                EXPECTM_2844S55:      
18EF   E1                     POP   HL   
18F0                          ;*Macro unroll:  test "64 128 +", 64+128
18F0   31 00 52               LD   SP,STACK   
18F3   CD 8F 0D               CALL   coldInit   
18F6   CD 86 50               CALL   execStr   
18F9   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1902   CD CF 0C               CALL   flushBuffer   
1905   E1                     POP   HL   
1906   E5                     PUSH   HL   
1907   11 C0 00               LD   DE,64+128   
190A   B7                     OR   A   
190B   ED 52                  SBC   HL,DE   
190D   7D                     LD   A,L   
190E   B4                     OR   H   
190F   CA 72 19               JP   Z,expectM_2845S56   
1912   CD 47 0D               CALL   printStr   
1915   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1924   CD 47 0D               CALL   printStr   
1927   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1936   21 C0 00               LD   hl,64+128   
1939   E5                     PUSH   hl   
193A   E5                     PUSH   hl   
193B   CD 61 0E               CALL   run   
193E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1946   CD CF 0C               CALL   flushBuffer   
1949   CD 47 0D               CALL   printStr   
194C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1959   E1                     POP   hl   
195A   E5                     PUSH   hl   
195B   E5                     PUSH   hl   
195C   CD 61 0E               CALL   run   
195F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
196E   CD CF 0C               CALL   flushBuffer   
1971   76                     HALT      
1972                EXPECTM_2845S56:      
1972   E1                     POP   HL   
1973                          ;*Macro unroll:  test "1 2 +", 3
1973   31 00 52               LD   SP,STACK   
1976   CD 8F 0D               CALL   coldInit   
1979   CD 86 50               CALL   execStr   
197C   31 20 32 20 2B 00      DB   "1 2 +",0   
1982   CD CF 0C               CALL   flushBuffer   
1985   E1                     POP   HL   
1986   E5                     PUSH   HL   
1987   11 03 00               LD   DE,3   
198A   B7                     OR   A   
198B   ED 52                  SBC   HL,DE   
198D   7D                     LD   A,L   
198E   B4                     OR   H   
198F   CA EF 19               JP   Z,expectM_2846S57   
1992   CD 47 0D               CALL   printStr   
1995   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
19A1   CD 47 0D               CALL   printStr   
19A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19B3   21 03 00               LD   hl,3   
19B6   E5                     PUSH   hl   
19B7   E5                     PUSH   hl   
19B8   CD 61 0E               CALL   run   
19BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19C3   CD CF 0C               CALL   flushBuffer   
19C6   CD 47 0D               CALL   printStr   
19C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19D6   E1                     POP   hl   
19D7   E5                     PUSH   hl   
19D8   E5                     PUSH   hl   
19D9   CD 61 0E               CALL   run   
19DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19EB   CD CF 0C               CALL   flushBuffer   
19EE   76                     HALT      
19EF                EXPECTM_2846S57:      
19EF   E1                     POP   HL   
19F0                          ;*Macro unroll:  test "1a= a++ a",2
19F0   31 00 52               LD   SP,STACK   
19F3   CD 8F 0D               CALL   coldInit   
19F6   CD 86 50               CALL   execStr   
19F9   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A03   CD CF 0C               CALL   flushBuffer   
1A06   E1                     POP   HL   
1A07   E5                     PUSH   HL   
1A08   11 02 00               LD   DE,2   
1A0B   B7                     OR   A   
1A0C   ED 52                  SBC   HL,DE   
1A0E   7D                     LD   A,L   
1A0F   B4                     OR   H   
1A10   CA 74 1A               JP   Z,expectM_2847S58   
1A13   CD 47 0D               CALL   printStr   
1A16   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1A26   CD 47 0D               CALL   printStr   
1A29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A38   21 02 00               LD   hl,2   
1A3B   E5                     PUSH   hl   
1A3C   E5                     PUSH   hl   
1A3D   CD 61 0E               CALL   run   
1A40   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A48   CD CF 0C               CALL   flushBuffer   
1A4B   CD 47 0D               CALL   printStr   
1A4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5B   E1                     POP   hl   
1A5C   E5                     PUSH   hl   
1A5D   E5                     PUSH   hl   
1A5E   CD 61 0E               CALL   run   
1A61   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A70   CD CF 0C               CALL   flushBuffer   
1A73   76                     HALT      
1A74                EXPECTM_2847S58:      
1A74   E1                     POP   HL   
1A75                          ;*Macro unroll:  test "-1 -1 -",0
1A75   31 00 52               LD   SP,STACK   
1A78   CD 8F 0D               CALL   coldInit   
1A7B   CD 86 50               CALL   execStr   
1A7E   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1A86   CD CF 0C               CALL   flushBuffer   
1A89   E1                     POP   HL   
1A8A   E5                     PUSH   HL   
1A8B   11 00 00               LD   DE,0   
1A8E   B7                     OR   A   
1A8F   ED 52                  SBC   HL,DE   
1A91   7D                     LD   A,L   
1A92   B4                     OR   H   
1A93   CA F5 1A               JP   Z,expectM_2848S59   
1A96   CD 47 0D               CALL   printStr   
1A99   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1AA7   CD 47 0D               CALL   printStr   
1AAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB9   21 00 00               LD   hl,0   
1ABC   E5                     PUSH   hl   
1ABD   E5                     PUSH   hl   
1ABE   CD 61 0E               CALL   run   
1AC1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AC9   CD CF 0C               CALL   flushBuffer   
1ACC   CD 47 0D               CALL   printStr   
1ACF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ADC   E1                     POP   hl   
1ADD   E5                     PUSH   hl   
1ADE   E5                     PUSH   hl   
1ADF   CD 61 0E               CALL   run   
1AE2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AF1   CD CF 0C               CALL   flushBuffer   
1AF4   76                     HALT      
1AF5                EXPECTM_2848S59:      
1AF5   E1                     POP   HL   
1AF6                          ;*Macro unroll:  test "5 3 -", 2
1AF6   31 00 52               LD   SP,STACK   
1AF9   CD 8F 0D               CALL   coldInit   
1AFC   CD 86 50               CALL   execStr   
1AFF   35 20 33 20 2D 00      DB   "5 3 -",0   
1B05   CD CF 0C               CALL   flushBuffer   
1B08   E1                     POP   HL   
1B09   E5                     PUSH   HL   
1B0A   11 02 00               LD   DE,2   
1B0D   B7                     OR   A   
1B0E   ED 52                  SBC   HL,DE   
1B10   7D                     LD   A,L   
1B11   B4                     OR   H   
1B12   CA 72 1B               JP   Z,expectM_2849S60   
1B15   CD 47 0D               CALL   printStr   
1B18   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1B24   CD 47 0D               CALL   printStr   
1B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B36   21 02 00               LD   hl,2   
1B39   E5                     PUSH   hl   
1B3A   E5                     PUSH   hl   
1B3B   CD 61 0E               CALL   run   
1B3E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B46   CD CF 0C               CALL   flushBuffer   
1B49   CD 47 0D               CALL   printStr   
1B4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B59   E1                     POP   hl   
1B5A   E5                     PUSH   hl   
1B5B   E5                     PUSH   hl   
1B5C   CD 61 0E               CALL   run   
1B5F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B6E   CD CF 0C               CALL   flushBuffer   
1B71   76                     HALT      
1B72                EXPECTM_2849S60:      
1B72   E1                     POP   HL   
1B73                          ;*Macro unroll:  test "2 1 -",1
1B73   31 00 52               LD   SP,STACK   
1B76   CD 8F 0D               CALL   coldInit   
1B79   CD 86 50               CALL   execStr   
1B7C   32 20 31 20 2D 00      DB   "2 1 -",0   
1B82   CD CF 0C               CALL   flushBuffer   
1B85   E1                     POP   HL   
1B86   E5                     PUSH   HL   
1B87   11 01 00               LD   DE,1   
1B8A   B7                     OR   A   
1B8B   ED 52                  SBC   HL,DE   
1B8D   7D                     LD   A,L   
1B8E   B4                     OR   H   
1B8F   CA EF 1B               JP   Z,expectM_2850S61   
1B92   CD 47 0D               CALL   printStr   
1B95   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1BA1   CD 47 0D               CALL   printStr   
1BA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BB3   21 01 00               LD   hl,1   
1BB6   E5                     PUSH   hl   
1BB7   E5                     PUSH   hl   
1BB8   CD 61 0E               CALL   run   
1BBB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BC3   CD CF 0C               CALL   flushBuffer   
1BC6   CD 47 0D               CALL   printStr   
1BC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BD6   E1                     POP   hl   
1BD7   E5                     PUSH   hl   
1BD8   E5                     PUSH   hl   
1BD9   CD 61 0E               CALL   run   
1BDC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BEB   CD CF 0C               CALL   flushBuffer   
1BEE   76                     HALT      
1BEF                EXPECTM_2850S61:      
1BEF   E1                     POP   HL   
1BF0                          ;*Macro unroll:  test "3a= a-- a",2
1BF0   31 00 52               LD   SP,STACK   
1BF3   CD 8F 0D               CALL   coldInit   
1BF6   CD 86 50               CALL   execStr   
1BF9   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C03   CD CF 0C               CALL   flushBuffer   
1C06   E1                     POP   HL   
1C07   E5                     PUSH   HL   
1C08   11 02 00               LD   DE,2   
1C0B   B7                     OR   A   
1C0C   ED 52                  SBC   HL,DE   
1C0E   7D                     LD   A,L   
1C0F   B4                     OR   H   
1C10   CA 74 1C               JP   Z,expectM_2851S62   
1C13   CD 47 0D               CALL   printStr   
1C16   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C26   CD 47 0D               CALL   printStr   
1C29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C38   21 02 00               LD   hl,2   
1C3B   E5                     PUSH   hl   
1C3C   E5                     PUSH   hl   
1C3D   CD 61 0E               CALL   run   
1C40   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C48   CD CF 0C               CALL   flushBuffer   
1C4B   CD 47 0D               CALL   printStr   
1C4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C5B   E1                     POP   hl   
1C5C   E5                     PUSH   hl   
1C5D   E5                     PUSH   hl   
1C5E   CD 61 0E               CALL   run   
1C61   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C70   CD CF 0C               CALL   flushBuffer   
1C73   76                     HALT      
1C74                EXPECTM_2851S62:      
1C74   E1                     POP   HL   
1C75                          ;*Macro unroll:  test "3 5 &", 1
1C75   31 00 52               LD   SP,STACK   
1C78   CD 8F 0D               CALL   coldInit   
1C7B   CD 86 50               CALL   execStr   
1C7E   33 20 35 20 26 00      DB   "3 5 &",0   
1C84   CD CF 0C               CALL   flushBuffer   
1C87   E1                     POP   HL   
1C88   E5                     PUSH   HL   
1C89   11 01 00               LD   DE,1   
1C8C   B7                     OR   A   
1C8D   ED 52                  SBC   HL,DE   
1C8F   7D                     LD   A,L   
1C90   B4                     OR   H   
1C91   CA F1 1C               JP   Z,expectM_2852S63   
1C94   CD 47 0D               CALL   printStr   
1C97   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1CA3   CD 47 0D               CALL   printStr   
1CA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CB5   21 01 00               LD   hl,1   
1CB8   E5                     PUSH   hl   
1CB9   E5                     PUSH   hl   
1CBA   CD 61 0E               CALL   run   
1CBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CC5   CD CF 0C               CALL   flushBuffer   
1CC8   CD 47 0D               CALL   printStr   
1CCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CD8   E1                     POP   hl   
1CD9   E5                     PUSH   hl   
1CDA   E5                     PUSH   hl   
1CDB   CD 61 0E               CALL   run   
1CDE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CED   CD CF 0C               CALL   flushBuffer   
1CF0   76                     HALT      
1CF1                EXPECTM_2852S63:      
1CF1   E1                     POP   HL   
1CF2                          ;*Macro unroll:  test "3 5 |", 7
1CF2   31 00 52               LD   SP,STACK   
1CF5   CD 8F 0D               CALL   coldInit   
1CF8   CD 86 50               CALL   execStr   
1CFB   33 20 35 20 7C 00      DB   "3 5 |",0   
1D01   CD CF 0C               CALL   flushBuffer   
1D04   E1                     POP   HL   
1D05   E5                     PUSH   HL   
1D06   11 07 00               LD   DE,7   
1D09   B7                     OR   A   
1D0A   ED 52                  SBC   HL,DE   
1D0C   7D                     LD   A,L   
1D0D   B4                     OR   H   
1D0E   CA 6E 1D               JP   Z,expectM_2853S64   
1D11   CD 47 0D               CALL   printStr   
1D14   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D20   CD 47 0D               CALL   printStr   
1D23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D32   21 07 00               LD   hl,7   
1D35   E5                     PUSH   hl   
1D36   E5                     PUSH   hl   
1D37   CD 61 0E               CALL   run   
1D3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D42   CD CF 0C               CALL   flushBuffer   
1D45   CD 47 0D               CALL   printStr   
1D48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D55   E1                     POP   hl   
1D56   E5                     PUSH   hl   
1D57   E5                     PUSH   hl   
1D58   CD 61 0E               CALL   run   
1D5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D6A   CD CF 0C               CALL   flushBuffer   
1D6D   76                     HALT      
1D6E                EXPECTM_2853S64:      
1D6E   E1                     POP   HL   
1D6F                          ;*Macro unroll:  test "3 5 /x", 6
1D6F   31 00 52               LD   SP,STACK   
1D72   CD 8F 0D               CALL   coldInit   
1D75   CD 86 50               CALL   execStr   
1D78   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D7F   CD CF 0C               CALL   flushBuffer   
1D82   E1                     POP   HL   
1D83   E5                     PUSH   HL   
1D84   11 06 00               LD   DE,6   
1D87   B7                     OR   A   
1D88   ED 52                  SBC   HL,DE   
1D8A   7D                     LD   A,L   
1D8B   B4                     OR   H   
1D8C   CA ED 1D               JP   Z,expectM_2854S65   
1D8F   CD 47 0D               CALL   printStr   
1D92   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1D9F   CD 47 0D               CALL   printStr   
1DA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DB1   21 06 00               LD   hl,6   
1DB4   E5                     PUSH   hl   
1DB5   E5                     PUSH   hl   
1DB6   CD 61 0E               CALL   run   
1DB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DC1   CD CF 0C               CALL   flushBuffer   
1DC4   CD 47 0D               CALL   printStr   
1DC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DD4   E1                     POP   hl   
1DD5   E5                     PUSH   hl   
1DD6   E5                     PUSH   hl   
1DD7   CD 61 0E               CALL   run   
1DDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DE9   CD CF 0C               CALL   flushBuffer   
1DEC   76                     HALT      
1DED                EXPECTM_2854S65:      
1DED   E1                     POP   HL   
1DEE                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1DEE   31 00 52               LD   SP,STACK   
1DF1   CD 8F 0D               CALL   coldInit   
1DF4   CD 86 50               CALL   execStr   
1DF7   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E06   CD CF 0C               CALL   flushBuffer   
1E09   E1                     POP   HL   
1E0A   E5                     PUSH   HL   
1E0B   11 06 00               LD   DE,6   
1E0E   B7                     OR   A   
1E0F   ED 52                  SBC   HL,DE   
1E11   7D                     LD   A,L   
1E12   B4                     OR   H   
1E13   CA 7C 1E               JP   Z,expectM_2855S66   
1E16   CD 47 0D               CALL   printStr   
1E19   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E2E   CD 47 0D               CALL   printStr   
1E31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E40   21 06 00               LD   hl,6   
1E43   E5                     PUSH   hl   
1E44   E5                     PUSH   hl   
1E45   CD 61 0E               CALL   run   
1E48   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E50   CD CF 0C               CALL   flushBuffer   
1E53   CD 47 0D               CALL   printStr   
1E56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E63   E1                     POP   hl   
1E64   E5                     PUSH   hl   
1E65   E5                     PUSH   hl   
1E66   CD 61 0E               CALL   run   
1E69   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E78   CD CF 0C               CALL   flushBuffer   
1E7B   76                     HALT      
1E7C                EXPECTM_2855S66:      
1E7C   E1                     POP   HL   
1E7D                          ;*Macro unroll:  test "2 3 *", 6
1E7D   31 00 52               LD   SP,STACK   
1E80   CD 8F 0D               CALL   coldInit   
1E83   CD 86 50               CALL   execStr   
1E86   32 20 33 20 2A 00      DB   "2 3 *",0   
1E8C   CD CF 0C               CALL   flushBuffer   
1E8F   E1                     POP   HL   
1E90   E5                     PUSH   HL   
1E91   11 06 00               LD   DE,6   
1E94   B7                     OR   A   
1E95   ED 52                  SBC   HL,DE   
1E97   7D                     LD   A,L   
1E98   B4                     OR   H   
1E99   CA F9 1E               JP   Z,expectM_2856S67   
1E9C   CD 47 0D               CALL   printStr   
1E9F   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1EAB   CD 47 0D               CALL   printStr   
1EAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EBD   21 06 00               LD   hl,6   
1EC0   E5                     PUSH   hl   
1EC1   E5                     PUSH   hl   
1EC2   CD 61 0E               CALL   run   
1EC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1ECD   CD CF 0C               CALL   flushBuffer   
1ED0   CD 47 0D               CALL   printStr   
1ED3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EE0   E1                     POP   hl   
1EE1   E5                     PUSH   hl   
1EE2   E5                     PUSH   hl   
1EE3   CD 61 0E               CALL   run   
1EE6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EF5   CD CF 0C               CALL   flushBuffer   
1EF8   76                     HALT      
1EF9                EXPECTM_2856S67:      
1EF9   E1                     POP   HL   
1EFA                          ;*Macro unroll:  test "1 2 3 + *", 5
1EFA   31 00 52               LD   SP,STACK   
1EFD   CD 8F 0D               CALL   coldInit   
1F00   CD 86 50               CALL   execStr   
1F03   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1F0D   CD CF 0C               CALL   flushBuffer   
1F10   E1                     POP   HL   
1F11   E5                     PUSH   HL   
1F12   11 05 00               LD   DE,5   
1F15   B7                     OR   A   
1F16   ED 52                  SBC   HL,DE   
1F18   7D                     LD   A,L   
1F19   B4                     OR   H   
1F1A   CA 7E 1F               JP   Z,expectM_2857S68   
1F1D   CD 47 0D               CALL   printStr   
1F20   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1F30   CD 47 0D               CALL   printStr   
1F33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F42   21 05 00               LD   hl,5   
1F45   E5                     PUSH   hl   
1F46   E5                     PUSH   hl   
1F47   CD 61 0E               CALL   run   
1F4A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F52   CD CF 0C               CALL   flushBuffer   
1F55   CD 47 0D               CALL   printStr   
1F58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F65   E1                     POP   hl   
1F66   E5                     PUSH   hl   
1F67   E5                     PUSH   hl   
1F68   CD 61 0E               CALL   run   
1F6B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F7A   CD CF 0C               CALL   flushBuffer   
1F7D   76                     HALT      
1F7E                EXPECTM_2857S68:      
1F7E   E1                     POP   HL   
1F7F                          ;*Macro unroll:  test "7 3 /", 2
1F7F   31 00 52               LD   SP,STACK   
1F82   CD 8F 0D               CALL   coldInit   
1F85   CD 86 50               CALL   execStr   
1F88   37 20 33 20 2F 00      DB   "7 3 /",0   
1F8E   CD CF 0C               CALL   flushBuffer   
1F91   E1                     POP   HL   
1F92   E5                     PUSH   HL   
1F93   11 02 00               LD   DE,2   
1F96   B7                     OR   A   
1F97   ED 52                  SBC   HL,DE   
1F99   7D                     LD   A,L   
1F9A   B4                     OR   H   
1F9B   CA FB 1F               JP   Z,expectM_2858S69   
1F9E   CD 47 0D               CALL   printStr   
1FA1   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1FAD   CD 47 0D               CALL   printStr   
1FB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FBF   21 02 00               LD   hl,2   
1FC2   E5                     PUSH   hl   
1FC3   E5                     PUSH   hl   
1FC4   CD 61 0E               CALL   run   
1FC7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FCF   CD CF 0C               CALL   flushBuffer   
1FD2   CD 47 0D               CALL   printStr   
1FD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE2   E1                     POP   hl   
1FE3   E5                     PUSH   hl   
1FE4   E5                     PUSH   hl   
1FE5   CD 61 0E               CALL   run   
1FE8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FF7   CD CF 0C               CALL   flushBuffer   
1FFA   76                     HALT      
1FFB                EXPECTM_2858S69:      
1FFB   E1                     POP   HL   
1FFC                          ;*Macro unroll:  test "100a= 1a+= a", 101
1FFC   31 00 52               LD   SP,STACK   
1FFF   CD 8F 0D               CALL   coldInit   
2002   CD 86 50               CALL   execStr   
2005   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2012   CD CF 0C               CALL   flushBuffer   
2015   E1                     POP   HL   
2016   E5                     PUSH   HL   
2017   11 65 00               LD   DE,101   
201A   B7                     OR   A   
201B   ED 52                  SBC   HL,DE   
201D   7D                     LD   A,L   
201E   B4                     OR   H   
201F   CA 86 20               JP   Z,expectM_2859S70   
2022   CD 47 0D               CALL   printStr   
2025   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2038   CD 47 0D               CALL   printStr   
203B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
204A   21 65 00               LD   hl,101   
204D   E5                     PUSH   hl   
204E   E5                     PUSH   hl   
204F   CD 61 0E               CALL   run   
2052   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
205A   CD CF 0C               CALL   flushBuffer   
205D   CD 47 0D               CALL   printStr   
2060   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
206D   E1                     POP   hl   
206E   E5                     PUSH   hl   
206F   E5                     PUSH   hl   
2070   CD 61 0E               CALL   run   
2073   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2082   CD CF 0C               CALL   flushBuffer   
2085   76                     HALT      
2086                EXPECTM_2859S70:      
2086   E1                     POP   HL   
2087                          ;*Macro unroll:  test "100a= a1-= a", 99
2087   31 00 52               LD   SP,STACK   
208A   CD 8F 0D               CALL   coldInit   
208D   CD 86 50               CALL   execStr   
2090   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
209D   CD CF 0C               CALL   flushBuffer   
20A0   E1                     POP   HL   
20A1   E5                     PUSH   HL   
20A2   11 63 00               LD   DE,99   
20A5   B7                     OR   A   
20A6   ED 52                  SBC   HL,DE   
20A8   7D                     LD   A,L   
20A9   B4                     OR   H   
20AA   CA 11 21               JP   Z,expectM_2860S71   
20AD   CD 47 0D               CALL   printStr   
20B0   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
20C3   CD 47 0D               CALL   printStr   
20C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D5   21 63 00               LD   hl,99   
20D8   E5                     PUSH   hl   
20D9   E5                     PUSH   hl   
20DA   CD 61 0E               CALL   run   
20DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20E5   CD CF 0C               CALL   flushBuffer   
20E8   CD 47 0D               CALL   printStr   
20EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20F8   E1                     POP   hl   
20F9   E5                     PUSH   hl   
20FA   E5                     PUSH   hl   
20FB   CD 61 0E               CALL   run   
20FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
210D   CD CF 0C               CALL   flushBuffer   
2110   76                     HALT      
2111                EXPECTM_2860S71:      
2111   E1                     POP   HL   
2112                          ;*Macro unroll:  test "100a= a2*= a", 200
2112   31 00 52               LD   SP,STACK   
2115   CD 8F 0D               CALL   coldInit   
2118   CD 86 50               CALL   execStr   
211B   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2128   CD CF 0C               CALL   flushBuffer   
212B   E1                     POP   HL   
212C   E5                     PUSH   HL   
212D   11 C8 00               LD   DE,200   
2130   B7                     OR   A   
2131   ED 52                  SBC   HL,DE   
2133   7D                     LD   A,L   
2134   B4                     OR   H   
2135   CA 9C 21               JP   Z,expectM_2861S72   
2138   CD 47 0D               CALL   printStr   
213B   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
214E   CD 47 0D               CALL   printStr   
2151   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2160   21 C8 00               LD   hl,200   
2163   E5                     PUSH   hl   
2164   E5                     PUSH   hl   
2165   CD 61 0E               CALL   run   
2168   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2170   CD CF 0C               CALL   flushBuffer   
2173   CD 47 0D               CALL   printStr   
2176   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2183   E1                     POP   hl   
2184   E5                     PUSH   hl   
2185   E5                     PUSH   hl   
2186   CD 61 0E               CALL   run   
2189   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2198   CD CF 0C               CALL   flushBuffer   
219B   76                     HALT      
219C                EXPECTM_2861S72:      
219C   E1                     POP   HL   
219D                          ;*Macro unroll:  test "100a= a2/= a", 50
219D   31 00 52               LD   SP,STACK   
21A0   CD 8F 0D               CALL   coldInit   
21A3   CD 86 50               CALL   execStr   
21A6   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
21B3   CD CF 0C               CALL   flushBuffer   
21B6   E1                     POP   HL   
21B7   E5                     PUSH   HL   
21B8   11 32 00               LD   DE,50   
21BB   B7                     OR   A   
21BC   ED 52                  SBC   HL,DE   
21BE   7D                     LD   A,L   
21BF   B4                     OR   H   
21C0   CA 27 22               JP   Z,expectM_2862S73   
21C3   CD 47 0D               CALL   printStr   
21C6   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
21D9   CD 47 0D               CALL   printStr   
21DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21EB   21 32 00               LD   hl,50   
21EE   E5                     PUSH   hl   
21EF   E5                     PUSH   hl   
21F0   CD 61 0E               CALL   run   
21F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21FB   CD CF 0C               CALL   flushBuffer   
21FE   CD 47 0D               CALL   printStr   
2201   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
220E   E1                     POP   hl   
220F   E5                     PUSH   hl   
2210   E5                     PUSH   hl   
2211   CD 61 0E               CALL   run   
2214   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2223   CD CF 0C               CALL   flushBuffer   
2226   76                     HALT      
2227                EXPECTM_2862S73:      
2227   E1                     POP   HL   
2228                          ;*Macro unroll:  test "7 3 / /re", 1
2228   31 00 52               LD   SP,STACK   
222B   CD 8F 0D               CALL   coldInit   
222E   CD 86 50               CALL   execStr   
2231   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
223B   CD CF 0C               CALL   flushBuffer   
223E   E1                     POP   HL   
223F   E5                     PUSH   HL   
2240   11 01 00               LD   DE,1   
2243   B7                     OR   A   
2244   ED 52                  SBC   HL,DE   
2246   7D                     LD   A,L   
2247   B4                     OR   H   
2248   CA AC 22               JP   Z,expectM_2863S74   
224B   CD 47 0D               CALL   printStr   
224E   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
225E   CD 47 0D               CALL   printStr   
2261   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2270   21 01 00               LD   hl,1   
2273   E5                     PUSH   hl   
2274   E5                     PUSH   hl   
2275   CD 61 0E               CALL   run   
2278   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2280   CD CF 0C               CALL   flushBuffer   
2283   CD 47 0D               CALL   printStr   
2286   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2293   E1                     POP   hl   
2294   E5                     PUSH   hl   
2295   E5                     PUSH   hl   
2296   CD 61 0E               CALL   run   
2299   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22A8   CD CF 0C               CALL   flushBuffer   
22AB   76                     HALT      
22AC                EXPECTM_2863S74:      
22AC   E1                     POP   HL   
22AD                          ;*Macro unroll:  test "7 3 /", 2
22AD   31 00 52               LD   SP,STACK   
22B0   CD 8F 0D               CALL   coldInit   
22B3   CD 86 50               CALL   execStr   
22B6   37 20 33 20 2F 00      DB   "7 3 /",0   
22BC   CD CF 0C               CALL   flushBuffer   
22BF   E1                     POP   HL   
22C0   E5                     PUSH   HL   
22C1   11 02 00               LD   DE,2   
22C4   B7                     OR   A   
22C5   ED 52                  SBC   HL,DE   
22C7   7D                     LD   A,L   
22C8   B4                     OR   H   
22C9   CA 29 23               JP   Z,expectM_2864S75   
22CC   CD 47 0D               CALL   printStr   
22CF   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22DB   CD 47 0D               CALL   printStr   
22DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22ED   21 02 00               LD   hl,2   
22F0   E5                     PUSH   hl   
22F1   E5                     PUSH   hl   
22F2   CD 61 0E               CALL   run   
22F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22FD   CD CF 0C               CALL   flushBuffer   
2300   CD 47 0D               CALL   printStr   
2303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2310   E1                     POP   hl   
2311   E5                     PUSH   hl   
2312   E5                     PUSH   hl   
2313   CD 61 0E               CALL   run   
2316   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2325   CD CF 0C               CALL   flushBuffer   
2328   76                     HALT      
2329                EXPECTM_2864S75:      
2329   E1                     POP   HL   
232A                          ;*Macro unroll:  test "2 3 ==", FALSE
232A   31 00 52               LD   SP,STACK   
232D   CD 8F 0D               CALL   coldInit   
2330   CD 86 50               CALL   execStr   
2333   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
233A   CD CF 0C               CALL   flushBuffer   
233D   E1                     POP   HL   
233E   E5                     PUSH   HL   
233F   11 00 00               LD   DE,FALSE   
2342   B7                     OR   A   
2343   ED 52                  SBC   HL,DE   
2345   7D                     LD   A,L   
2346   B4                     OR   H   
2347   CA A8 23               JP   Z,expectM_2865S76   
234A   CD 47 0D               CALL   printStr   
234D   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
235A   CD 47 0D               CALL   printStr   
235D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
236C   21 00 00               LD   hl,FALSE   
236F   E5                     PUSH   hl   
2370   E5                     PUSH   hl   
2371   CD 61 0E               CALL   run   
2374   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
237C   CD CF 0C               CALL   flushBuffer   
237F   CD 47 0D               CALL   printStr   
2382   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
238F   E1                     POP   hl   
2390   E5                     PUSH   hl   
2391   E5                     PUSH   hl   
2392   CD 61 0E               CALL   run   
2395   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23A4   CD CF 0C               CALL   flushBuffer   
23A7   76                     HALT      
23A8                EXPECTM_2865S76:      
23A8   E1                     POP   HL   
23A9                          ;*Macro unroll:  test "3 3 ==", TRUE
23A9   31 00 52               LD   SP,STACK   
23AC   CD 8F 0D               CALL   coldInit   
23AF   CD 86 50               CALL   execStr   
23B2   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
23B9   CD CF 0C               CALL   flushBuffer   
23BC   E1                     POP   HL   
23BD   E5                     PUSH   HL   
23BE   11 FF FF               LD   DE,TRUE   
23C1   B7                     OR   A   
23C2   ED 52                  SBC   HL,DE   
23C4   7D                     LD   A,L   
23C5   B4                     OR   H   
23C6   CA 27 24               JP   Z,expectM_2866S77   
23C9   CD 47 0D               CALL   printStr   
23CC   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
23D9   CD 47 0D               CALL   printStr   
23DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23EB   21 FF FF               LD   hl,TRUE   
23EE   E5                     PUSH   hl   
23EF   E5                     PUSH   hl   
23F0   CD 61 0E               CALL   run   
23F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23FB   CD CF 0C               CALL   flushBuffer   
23FE   CD 47 0D               CALL   printStr   
2401   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
240E   E1                     POP   hl   
240F   E5                     PUSH   hl   
2410   E5                     PUSH   hl   
2411   CD 61 0E               CALL   run   
2414   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2423   CD CF 0C               CALL   flushBuffer   
2426   76                     HALT      
2427                EXPECTM_2866S77:      
2427   E1                     POP   HL   
2428                          ;*Macro unroll:  test "1 2 <", TRUE
2428   31 00 52               LD   SP,STACK   
242B   CD 8F 0D               CALL   coldInit   
242E   CD 86 50               CALL   execStr   
2431   31 20 32 20 3C 00      DB   "1 2 <",0   
2437   CD CF 0C               CALL   flushBuffer   
243A   E1                     POP   HL   
243B   E5                     PUSH   HL   
243C   11 FF FF               LD   DE,TRUE   
243F   B7                     OR   A   
2440   ED 52                  SBC   HL,DE   
2442   7D                     LD   A,L   
2443   B4                     OR   H   
2444   CA A4 24               JP   Z,expectM_2867S78   
2447   CD 47 0D               CALL   printStr   
244A   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2456   CD 47 0D               CALL   printStr   
2459   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2468   21 FF FF               LD   hl,TRUE   
246B   E5                     PUSH   hl   
246C   E5                     PUSH   hl   
246D   CD 61 0E               CALL   run   
2470   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2478   CD CF 0C               CALL   flushBuffer   
247B   CD 47 0D               CALL   printStr   
247E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
248B   E1                     POP   hl   
248C   E5                     PUSH   hl   
248D   E5                     PUSH   hl   
248E   CD 61 0E               CALL   run   
2491   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24A0   CD CF 0C               CALL   flushBuffer   
24A3   76                     HALT      
24A4                EXPECTM_2867S78:      
24A4   E1                     POP   HL   
24A5                          ;*Macro unroll:  test "2 1 <", FALSE
24A5   31 00 52               LD   SP,STACK   
24A8   CD 8F 0D               CALL   coldInit   
24AB   CD 86 50               CALL   execStr   
24AE   32 20 31 20 3C 00      DB   "2 1 <",0   
24B4   CD CF 0C               CALL   flushBuffer   
24B7   E1                     POP   HL   
24B8   E5                     PUSH   HL   
24B9   11 00 00               LD   DE,FALSE   
24BC   B7                     OR   A   
24BD   ED 52                  SBC   HL,DE   
24BF   7D                     LD   A,L   
24C0   B4                     OR   H   
24C1   CA 21 25               JP   Z,expectM_2868S79   
24C4   CD 47 0D               CALL   printStr   
24C7   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
24D3   CD 47 0D               CALL   printStr   
24D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24E5   21 00 00               LD   hl,FALSE   
24E8   E5                     PUSH   hl   
24E9   E5                     PUSH   hl   
24EA   CD 61 0E               CALL   run   
24ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24F5   CD CF 0C               CALL   flushBuffer   
24F8   CD 47 0D               CALL   printStr   
24FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2508   E1                     POP   hl   
2509   E5                     PUSH   hl   
250A   E5                     PUSH   hl   
250B   CD 61 0E               CALL   run   
250E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
251D   CD CF 0C               CALL   flushBuffer   
2520   76                     HALT      
2521                EXPECTM_2868S79:      
2521   E1                     POP   HL   
2522                          ;*Macro unroll:  test "2 3 <", TRUE
2522   31 00 52               LD   SP,STACK   
2525   CD 8F 0D               CALL   coldInit   
2528   CD 86 50               CALL   execStr   
252B   32 20 33 20 3C 00      DB   "2 3 <",0   
2531   CD CF 0C               CALL   flushBuffer   
2534   E1                     POP   HL   
2535   E5                     PUSH   HL   
2536   11 FF FF               LD   DE,TRUE   
2539   B7                     OR   A   
253A   ED 52                  SBC   HL,DE   
253C   7D                     LD   A,L   
253D   B4                     OR   H   
253E   CA 9E 25               JP   Z,expectM_2869S80   
2541   CD 47 0D               CALL   printStr   
2544   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2550   CD 47 0D               CALL   printStr   
2553   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2562   21 FF FF               LD   hl,TRUE   
2565   E5                     PUSH   hl   
2566   E5                     PUSH   hl   
2567   CD 61 0E               CALL   run   
256A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2572   CD CF 0C               CALL   flushBuffer   
2575   CD 47 0D               CALL   printStr   
2578   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2585   E1                     POP   hl   
2586   E5                     PUSH   hl   
2587   E5                     PUSH   hl   
2588   CD 61 0E               CALL   run   
258B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
259A   CD CF 0C               CALL   flushBuffer   
259D   76                     HALT      
259E                EXPECTM_2869S80:      
259E   E1                     POP   HL   
259F                          ;*Macro unroll:  test "3 3 <", FALSE
259F   31 00 52               LD   SP,STACK   
25A2   CD 8F 0D               CALL   coldInit   
25A5   CD 86 50               CALL   execStr   
25A8   33 20 33 20 3C 00      DB   "3 3 <",0   
25AE   CD CF 0C               CALL   flushBuffer   
25B1   E1                     POP   HL   
25B2   E5                     PUSH   HL   
25B3   11 00 00               LD   DE,FALSE   
25B6   B7                     OR   A   
25B7   ED 52                  SBC   HL,DE   
25B9   7D                     LD   A,L   
25BA   B4                     OR   H   
25BB   CA 1B 26               JP   Z,expectM_2870S81   
25BE   CD 47 0D               CALL   printStr   
25C1   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
25CD   CD 47 0D               CALL   printStr   
25D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25DF   21 00 00               LD   hl,FALSE   
25E2   E5                     PUSH   hl   
25E3   E5                     PUSH   hl   
25E4   CD 61 0E               CALL   run   
25E7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25EF   CD CF 0C               CALL   flushBuffer   
25F2   CD 47 0D               CALL   printStr   
25F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2602   E1                     POP   hl   
2603   E5                     PUSH   hl   
2604   E5                     PUSH   hl   
2605   CD 61 0E               CALL   run   
2608   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2617   CD CF 0C               CALL   flushBuffer   
261A   76                     HALT      
261B                EXPECTM_2870S81:      
261B   E1                     POP   HL   
261C                          ;*Macro unroll:  test "1 2 >", FALSE
261C   31 00 52               LD   SP,STACK   
261F   CD 8F 0D               CALL   coldInit   
2622   CD 86 50               CALL   execStr   
2625   31 20 32 20 3E 00      DB   "1 2 >",0   
262B   CD CF 0C               CALL   flushBuffer   
262E   E1                     POP   HL   
262F   E5                     PUSH   HL   
2630   11 00 00               LD   DE,FALSE   
2633   B7                     OR   A   
2634   ED 52                  SBC   HL,DE   
2636   7D                     LD   A,L   
2637   B4                     OR   H   
2638   CA 98 26               JP   Z,expectM_2871S82   
263B   CD 47 0D               CALL   printStr   
263E   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
264A   CD 47 0D               CALL   printStr   
264D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
265C   21 00 00               LD   hl,FALSE   
265F   E5                     PUSH   hl   
2660   E5                     PUSH   hl   
2661   CD 61 0E               CALL   run   
2664   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
266C   CD CF 0C               CALL   flushBuffer   
266F   CD 47 0D               CALL   printStr   
2672   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
267F   E1                     POP   hl   
2680   E5                     PUSH   hl   
2681   E5                     PUSH   hl   
2682   CD 61 0E               CALL   run   
2685   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2694   CD CF 0C               CALL   flushBuffer   
2697   76                     HALT      
2698                EXPECTM_2871S82:      
2698   E1                     POP   HL   
2699                          ;*Macro unroll:  test "2 1 >", TRUE
2699   31 00 52               LD   SP,STACK   
269C   CD 8F 0D               CALL   coldInit   
269F   CD 86 50               CALL   execStr   
26A2   32 20 31 20 3E 00      DB   "2 1 >",0   
26A8   CD CF 0C               CALL   flushBuffer   
26AB   E1                     POP   HL   
26AC   E5                     PUSH   HL   
26AD   11 FF FF               LD   DE,TRUE   
26B0   B7                     OR   A   
26B1   ED 52                  SBC   HL,DE   
26B3   7D                     LD   A,L   
26B4   B4                     OR   H   
26B5   CA 15 27               JP   Z,expectM_2872S83   
26B8   CD 47 0D               CALL   printStr   
26BB   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
26C7   CD 47 0D               CALL   printStr   
26CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26D9   21 FF FF               LD   hl,TRUE   
26DC   E5                     PUSH   hl   
26DD   E5                     PUSH   hl   
26DE   CD 61 0E               CALL   run   
26E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26E9   CD CF 0C               CALL   flushBuffer   
26EC   CD 47 0D               CALL   printStr   
26EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26FC   E1                     POP   hl   
26FD   E5                     PUSH   hl   
26FE   E5                     PUSH   hl   
26FF   CD 61 0E               CALL   run   
2702   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2711   CD CF 0C               CALL   flushBuffer   
2714   76                     HALT      
2715                EXPECTM_2872S83:      
2715   E1                     POP   HL   
2716                          ;*Macro unroll:  test "3 3 >", FALSE
2716   31 00 52               LD   SP,STACK   
2719   CD 8F 0D               CALL   coldInit   
271C   CD 86 50               CALL   execStr   
271F   33 20 33 20 3E 00      DB   "3 3 >",0   
2725   CD CF 0C               CALL   flushBuffer   
2728   E1                     POP   HL   
2729   E5                     PUSH   HL   
272A   11 00 00               LD   DE,FALSE   
272D   B7                     OR   A   
272E   ED 52                  SBC   HL,DE   
2730   7D                     LD   A,L   
2731   B4                     OR   H   
2732   CA 92 27               JP   Z,expectM_2873S84   
2735   CD 47 0D               CALL   printStr   
2738   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2744   CD 47 0D               CALL   printStr   
2747   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2756   21 00 00               LD   hl,FALSE   
2759   E5                     PUSH   hl   
275A   E5                     PUSH   hl   
275B   CD 61 0E               CALL   run   
275E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2766   CD CF 0C               CALL   flushBuffer   
2769   CD 47 0D               CALL   printStr   
276C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2779   E1                     POP   hl   
277A   E5                     PUSH   hl   
277B   E5                     PUSH   hl   
277C   CD 61 0E               CALL   run   
277F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
278E   CD CF 0C               CALL   flushBuffer   
2791   76                     HALT      
2792                EXPECTM_2873S84:      
2792   E1                     POP   HL   
2793                          ;*Macro unroll:  test "4 3 >", TRUE
2793   31 00 52               LD   SP,STACK   
2796   CD 8F 0D               CALL   coldInit   
2799   CD 86 50               CALL   execStr   
279C   34 20 33 20 3E 00      DB   "4 3 >",0   
27A2   CD CF 0C               CALL   flushBuffer   
27A5   E1                     POP   HL   
27A6   E5                     PUSH   HL   
27A7   11 FF FF               LD   DE,TRUE   
27AA   B7                     OR   A   
27AB   ED 52                  SBC   HL,DE   
27AD   7D                     LD   A,L   
27AE   B4                     OR   H   
27AF   CA 0F 28               JP   Z,expectM_2874S85   
27B2   CD 47 0D               CALL   printStr   
27B5   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
27C1   CD 47 0D               CALL   printStr   
27C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27D3   21 FF FF               LD   hl,TRUE   
27D6   E5                     PUSH   hl   
27D7   E5                     PUSH   hl   
27D8   CD 61 0E               CALL   run   
27DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27E3   CD CF 0C               CALL   flushBuffer   
27E6   CD 47 0D               CALL   printStr   
27E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27F6   E1                     POP   hl   
27F7   E5                     PUSH   hl   
27F8   E5                     PUSH   hl   
27F9   CD 61 0E               CALL   run   
27FC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
280B   CD CF 0C               CALL   flushBuffer   
280E   76                     HALT      
280F                EXPECTM_2874S85:      
280F   E1                     POP   HL   
2810                          ;*Macro unroll:  test "2 2 <=", TRUE
2810   31 00 52               LD   SP,STACK   
2813   CD 8F 0D               CALL   coldInit   
2816   CD 86 50               CALL   execStr   
2819   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2820   CD CF 0C               CALL   flushBuffer   
2823   E1                     POP   HL   
2824   E5                     PUSH   HL   
2825   11 FF FF               LD   DE,TRUE   
2828   B7                     OR   A   
2829   ED 52                  SBC   HL,DE   
282B   7D                     LD   A,L   
282C   B4                     OR   H   
282D   CA 8E 28               JP   Z,expectM_2875S86   
2830   CD 47 0D               CALL   printStr   
2833   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2840   CD 47 0D               CALL   printStr   
2843   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2852   21 FF FF               LD   hl,TRUE   
2855   E5                     PUSH   hl   
2856   E5                     PUSH   hl   
2857   CD 61 0E               CALL   run   
285A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2862   CD CF 0C               CALL   flushBuffer   
2865   CD 47 0D               CALL   printStr   
2868   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2875   E1                     POP   hl   
2876   E5                     PUSH   hl   
2877   E5                     PUSH   hl   
2878   CD 61 0E               CALL   run   
287B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
288A   CD CF 0C               CALL   flushBuffer   
288D   76                     HALT      
288E                EXPECTM_2875S86:      
288E   E1                     POP   HL   
288F                          ;*Macro unroll:  test "2 2 >=", TRUE
288F   31 00 52               LD   SP,STACK   
2892   CD 8F 0D               CALL   coldInit   
2895   CD 86 50               CALL   execStr   
2898   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
289F   CD CF 0C               CALL   flushBuffer   
28A2   E1                     POP   HL   
28A3   E5                     PUSH   HL   
28A4   11 FF FF               LD   DE,TRUE   
28A7   B7                     OR   A   
28A8   ED 52                  SBC   HL,DE   
28AA   7D                     LD   A,L   
28AB   B4                     OR   H   
28AC   CA 0D 29               JP   Z,expectM_2876S87   
28AF   CD 47 0D               CALL   printStr   
28B2   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
28BF   CD 47 0D               CALL   printStr   
28C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D1   21 FF FF               LD   hl,TRUE   
28D4   E5                     PUSH   hl   
28D5   E5                     PUSH   hl   
28D6   CD 61 0E               CALL   run   
28D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28E1   CD CF 0C               CALL   flushBuffer   
28E4   CD 47 0D               CALL   printStr   
28E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28F4   E1                     POP   hl   
28F5   E5                     PUSH   hl   
28F6   E5                     PUSH   hl   
28F7   CD 61 0E               CALL   run   
28FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2909   CD CF 0C               CALL   flushBuffer   
290C   76                     HALT      
290D                EXPECTM_2876S87:      
290D   E1                     POP   HL   
290E                          ;*Macro unroll:  test "3 1 <<", 6
290E   31 00 52               LD   SP,STACK   
2911   CD 8F 0D               CALL   coldInit   
2914   CD 86 50               CALL   execStr   
2917   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
291E   CD CF 0C               CALL   flushBuffer   
2921   E1                     POP   HL   
2922   E5                     PUSH   HL   
2923   11 06 00               LD   DE,6   
2926   B7                     OR   A   
2927   ED 52                  SBC   HL,DE   
2929   7D                     LD   A,L   
292A   B4                     OR   H   
292B   CA 8C 29               JP   Z,expectM_2877S88   
292E   CD 47 0D               CALL   printStr   
2931   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
293E   CD 47 0D               CALL   printStr   
2941   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2950   21 06 00               LD   hl,6   
2953   E5                     PUSH   hl   
2954   E5                     PUSH   hl   
2955   CD 61 0E               CALL   run   
2958   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2960   CD CF 0C               CALL   flushBuffer   
2963   CD 47 0D               CALL   printStr   
2966   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2973   E1                     POP   hl   
2974   E5                     PUSH   hl   
2975   E5                     PUSH   hl   
2976   CD 61 0E               CALL   run   
2979   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2988   CD CF 0C               CALL   flushBuffer   
298B   76                     HALT      
298C                EXPECTM_2877S88:      
298C   E1                     POP   HL   
298D                          ;*Macro unroll:  test "10 1 >>", 5
298D   31 00 52               LD   SP,STACK   
2990   CD 8F 0D               CALL   coldInit   
2993   CD 86 50               CALL   execStr   
2996   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
299E   CD CF 0C               CALL   flushBuffer   
29A1   E1                     POP   HL   
29A2   E5                     PUSH   HL   
29A3   11 05 00               LD   DE,5   
29A6   B7                     OR   A   
29A7   ED 52                  SBC   HL,DE   
29A9   7D                     LD   A,L   
29AA   B4                     OR   H   
29AB   CA 0D 2A               JP   Z,expectM_2878S89   
29AE   CD 47 0D               CALL   printStr   
29B1   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
29BF   CD 47 0D               CALL   printStr   
29C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29D1   21 05 00               LD   hl,5   
29D4   E5                     PUSH   hl   
29D5   E5                     PUSH   hl   
29D6   CD 61 0E               CALL   run   
29D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29E1   CD CF 0C               CALL   flushBuffer   
29E4   CD 47 0D               CALL   printStr   
29E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29F4   E1                     POP   hl   
29F5   E5                     PUSH   hl   
29F6   E5                     PUSH   hl   
29F7   CD 61 0E               CALL   run   
29FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A09   CD CF 0C               CALL   flushBuffer   
2A0C   76                     HALT      
2A0D                EXPECTM_2878S89:      
2A0D   E1                     POP   HL   
2A0E                          ;*Macro unroll:  test "1 x = x", 1
2A0E   31 00 52               LD   SP,STACK   
2A11   CD 8F 0D               CALL   coldInit   
2A14   CD 86 50               CALL   execStr   
2A17   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2A1F   CD CF 0C               CALL   flushBuffer   
2A22   E1                     POP   HL   
2A23   E5                     PUSH   HL   
2A24   11 01 00               LD   DE,1   
2A27   B7                     OR   A   
2A28   ED 52                  SBC   HL,DE   
2A2A   7D                     LD   A,L   
2A2B   B4                     OR   H   
2A2C   CA 8E 2A               JP   Z,expectM_2879S90   
2A2F   CD 47 0D               CALL   printStr   
2A32   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2A40   CD 47 0D               CALL   printStr   
2A43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A52   21 01 00               LD   hl,1   
2A55   E5                     PUSH   hl   
2A56   E5                     PUSH   hl   
2A57   CD 61 0E               CALL   run   
2A5A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A62   CD CF 0C               CALL   flushBuffer   
2A65   CD 47 0D               CALL   printStr   
2A68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A75   E1                     POP   hl   
2A76   E5                     PUSH   hl   
2A77   E5                     PUSH   hl   
2A78   CD 61 0E               CALL   run   
2A7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A8A   CD CF 0C               CALL   flushBuffer   
2A8D   76                     HALT      
2A8E                EXPECTM_2879S90:      
2A8E   E1                     POP   HL   
2A8F                          ;*Macro unroll:  test "1{}^", 1
2A8F   31 00 52               LD   SP,STACK   
2A92   CD 8F 0D               CALL   coldInit   
2A95   CD 86 50               CALL   execStr   
2A98   31 7B 7D 5E 00         DB   "1{}^",0   
2A9D   CD CF 0C               CALL   flushBuffer   
2AA0   E1                     POP   HL   
2AA1   E5                     PUSH   HL   
2AA2   11 01 00               LD   DE,1   
2AA5   B7                     OR   A   
2AA6   ED 52                  SBC   HL,DE   
2AA8   7D                     LD   A,L   
2AA9   B4                     OR   H   
2AAA   CA 09 2B               JP   Z,expectM_2880S91   
2AAD   CD 47 0D               CALL   printStr   
2AB0   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2ABB   CD 47 0D               CALL   printStr   
2ABE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ACD   21 01 00               LD   hl,1   
2AD0   E5                     PUSH   hl   
2AD1   E5                     PUSH   hl   
2AD2   CD 61 0E               CALL   run   
2AD5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2ADD   CD CF 0C               CALL   flushBuffer   
2AE0   CD 47 0D               CALL   printStr   
2AE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AF0   E1                     POP   hl   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD 61 0E               CALL   run   
2AF6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B05   CD CF 0C               CALL   flushBuffer   
2B08   76                     HALT      
2B09                EXPECTM_2880S91:      
2B09   E1                     POP   HL   
2B0A                          ;*Macro unroll:  test "{1}^", 1
2B0A   31 00 52               LD   SP,STACK   
2B0D   CD 8F 0D               CALL   coldInit   
2B10   CD 86 50               CALL   execStr   
2B13   7B 31 7D 5E 00         DB   "{1}^",0   
2B18   CD CF 0C               CALL   flushBuffer   
2B1B   E1                     POP   HL   
2B1C   E5                     PUSH   HL   
2B1D   11 01 00               LD   DE,1   
2B20   B7                     OR   A   
2B21   ED 52                  SBC   HL,DE   
2B23   7D                     LD   A,L   
2B24   B4                     OR   H   
2B25   CA 84 2B               JP   Z,expectM_2881S92   
2B28   CD 47 0D               CALL   printStr   
2B2B   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2B36   CD 47 0D               CALL   printStr   
2B39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B48   21 01 00               LD   hl,1   
2B4B   E5                     PUSH   hl   
2B4C   E5                     PUSH   hl   
2B4D   CD 61 0E               CALL   run   
2B50   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B58   CD CF 0C               CALL   flushBuffer   
2B5B   CD 47 0D               CALL   printStr   
2B5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B6B   E1                     POP   hl   
2B6C   E5                     PUSH   hl   
2B6D   E5                     PUSH   hl   
2B6E   CD 61 0E               CALL   run   
2B71   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B80   CD CF 0C               CALL   flushBuffer   
2B83   76                     HALT      
2B84                EXPECTM_2881S92:      
2B84   E1                     POP   HL   
2B85                          ;*Macro unroll:  test "{{1}^}^", 1
2B85   31 00 52               LD   SP,STACK   
2B88   CD 8F 0D               CALL   coldInit   
2B8B   CD 86 50               CALL   execStr   
2B8E   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2B96   CD CF 0C               CALL   flushBuffer   
2B99   E1                     POP   HL   
2B9A   E5                     PUSH   HL   
2B9B   11 01 00               LD   DE,1   
2B9E   B7                     OR   A   
2B9F   ED 52                  SBC   HL,DE   
2BA1   7D                     LD   A,L   
2BA2   B4                     OR   H   
2BA3   CA 05 2C               JP   Z,expectM_2882S93   
2BA6   CD 47 0D               CALL   printStr   
2BA9   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2BB7   CD 47 0D               CALL   printStr   
2BBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BC9   21 01 00               LD   hl,1   
2BCC   E5                     PUSH   hl   
2BCD   E5                     PUSH   hl   
2BCE   CD 61 0E               CALL   run   
2BD1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BD9   CD CF 0C               CALL   flushBuffer   
2BDC   CD 47 0D               CALL   printStr   
2BDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BEC   E1                     POP   hl   
2BED   E5                     PUSH   hl   
2BEE   E5                     PUSH   hl   
2BEF   CD 61 0E               CALL   run   
2BF2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C01   CD CF 0C               CALL   flushBuffer   
2C04   76                     HALT      
2C05                EXPECTM_2882S93:      
2C05   E1                     POP   HL   
2C06                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2C06   31 00 52               LD   SP,STACK   
2C09   CD 8F 0D               CALL   coldInit   
2C0C   CD 86 50               CALL   execStr   
2C0F   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2C1A   CD CF 0C               CALL   flushBuffer   
2C1D   E1                     POP   HL   
2C1E   E5                     PUSH   HL   
2C1F   11 01 00               LD   DE,1   
2C22   B7                     OR   A   
2C23   ED 52                  SBC   HL,DE   
2C25   7D                     LD   A,L   
2C26   B4                     OR   H   
2C27   CA 8C 2C               JP   Z,expectM_2883S94   
2C2A   CD 47 0D               CALL   printStr   
2C2D   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2C3E   CD 47 0D               CALL   printStr   
2C41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C50   21 01 00               LD   hl,1   
2C53   E5                     PUSH   hl   
2C54   E5                     PUSH   hl   
2C55   CD 61 0E               CALL   run   
2C58   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C60   CD CF 0C               CALL   flushBuffer   
2C63   CD 47 0D               CALL   printStr   
2C66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C73   E1                     POP   hl   
2C74   E5                     PUSH   hl   
2C75   E5                     PUSH   hl   
2C76   CD 61 0E               CALL   run   
2C79   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C88   CD CF 0C               CALL   flushBuffer   
2C8B   76                     HALT      
2C8C                EXPECTM_2883S94:      
2C8C   E1                     POP   HL   
2C8D                          ;*Macro unroll:  test "5 /f{10} ?", 5
2C8D   31 00 52               LD   SP,STACK   
2C90   CD 8F 0D               CALL   coldInit   
2C93   CD 86 50               CALL   execStr   
2C96   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2CA1   CD CF 0C               CALL   flushBuffer   
2CA4   E1                     POP   HL   
2CA5   E5                     PUSH   HL   
2CA6   11 05 00               LD   DE,5   
2CA9   B7                     OR   A   
2CAA   ED 52                  SBC   HL,DE   
2CAC   7D                     LD   A,L   
2CAD   B4                     OR   H   
2CAE   CA 13 2D               JP   Z,expectM_2884S95   
2CB1   CD 47 0D               CALL   printStr   
2CB4   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2CC5   CD 47 0D               CALL   printStr   
2CC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CD7   21 05 00               LD   hl,5   
2CDA   E5                     PUSH   hl   
2CDB   E5                     PUSH   hl   
2CDC   CD 61 0E               CALL   run   
2CDF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CE7   CD CF 0C               CALL   flushBuffer   
2CEA   CD 47 0D               CALL   printStr   
2CED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CFA   E1                     POP   hl   
2CFB   E5                     PUSH   hl   
2CFC   E5                     PUSH   hl   
2CFD   CD 61 0E               CALL   run   
2D00   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D0F   CD CF 0C               CALL   flushBuffer   
2D12   76                     HALT      
2D13                EXPECTM_2884S95:      
2D13   E1                     POP   HL   
2D14                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2D14   31 00 52               LD   SP,STACK   
2D17   CD 8F 0D               CALL   coldInit   
2D1A   CD 86 50               CALL   execStr   
2D1D   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2D2A   CD CF 0C               CALL   flushBuffer   
2D2D   E1                     POP   HL   
2D2E   E5                     PUSH   HL   
2D2F   11 0F 00               LD   DE,15   
2D32   B7                     OR   A   
2D33   ED 52                  SBC   HL,DE   
2D35   7D                     LD   A,L   
2D36   B4                     OR   H   
2D37   CA 9E 2D               JP   Z,expectM_2885S96   
2D3A   CD 47 0D               CALL   printStr   
2D3D   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2D50   CD 47 0D               CALL   printStr   
2D53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D62   21 0F 00               LD   hl,15   
2D65   E5                     PUSH   hl   
2D66   E5                     PUSH   hl   
2D67   CD 61 0E               CALL   run   
2D6A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D72   CD CF 0C               CALL   flushBuffer   
2D75   CD 47 0D               CALL   printStr   
2D78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D85   E1                     POP   hl   
2D86   E5                     PUSH   hl   
2D87   E5                     PUSH   hl   
2D88   CD 61 0E               CALL   run   
2D8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D9A   CD CF 0C               CALL   flushBuffer   
2D9D   76                     HALT      
2D9E                EXPECTM_2885S96:      
2D9E   E1                     POP   HL   
2D9F                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2D9F   31 00 52               LD   SP,STACK   
2DA2   CD 8F 0D               CALL   coldInit   
2DA5   CD 86 50               CALL   execStr   
2DA8   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2DBA   CD CF 0C               CALL   flushBuffer   
2DBD   E1                     POP   HL   
2DBE   E5                     PUSH   HL   
2DBF   11 15 00               LD   DE,21   
2DC2   B7                     OR   A   
2DC3   ED 52                  SBC   HL,DE   
2DC5   7D                     LD   A,L   
2DC6   B4                     OR   H   
2DC7   CA 33 2E               JP   Z,expectM_2886S97   
2DCA   CD 47 0D               CALL   printStr   
2DCD   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2DE5   CD 47 0D               CALL   printStr   
2DE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DF7   21 15 00               LD   hl,21   
2DFA   E5                     PUSH   hl   
2DFB   E5                     PUSH   hl   
2DFC   CD 61 0E               CALL   run   
2DFF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E07   CD CF 0C               CALL   flushBuffer   
2E0A   CD 47 0D               CALL   printStr   
2E0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E1A   E1                     POP   hl   
2E1B   E5                     PUSH   hl   
2E1C   E5                     PUSH   hl   
2E1D   CD 61 0E               CALL   run   
2E20   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E2F   CD CF 0C               CALL   flushBuffer   
2E32   76                     HALT      
2E33                EXPECTM_2886S97:      
2E33   E1                     POP   HL   
2E34                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2E34   31 00 52               LD   SP,STACK   
2E37   CD 8F 0D               CALL   coldInit   
2E3A   CD 86 50               CALL   execStr   
2E3D   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2E4F   CD CF 0C               CALL   flushBuffer   
2E52   E1                     POP   HL   
2E53   E5                     PUSH   HL   
2E54   11 0B 00               LD   DE,11   
2E57   B7                     OR   A   
2E58   ED 52                  SBC   HL,DE   
2E5A   7D                     LD   A,L   
2E5B   B4                     OR   H   
2E5C   CA C8 2E               JP   Z,expectM_2887S98   
2E5F   CD 47 0D               CALL   printStr   
2E62   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2E7A   CD 47 0D               CALL   printStr   
2E7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E8C   21 0B 00               LD   hl,11   
2E8F   E5                     PUSH   hl   
2E90   E5                     PUSH   hl   
2E91   CD 61 0E               CALL   run   
2E94   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E9C   CD CF 0C               CALL   flushBuffer   
2E9F   CD 47 0D               CALL   printStr   
2EA2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EAF   E1                     POP   hl   
2EB0   E5                     PUSH   hl   
2EB1   E5                     PUSH   hl   
2EB2   CD 61 0E               CALL   run   
2EB5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EC4   CD CF 0C               CALL   flushBuffer   
2EC7   76                     HALT      
2EC8                EXPECTM_2887S98:      
2EC8   E1                     POP   HL   
2EC9                          ;*Macro unroll:  test ": 0#", $0000
2EC9   31 00 52               LD   SP,STACK   
2ECC   CD 8F 0D               CALL   coldInit   
2ECF   CD 86 50               CALL   execStr   
2ED2   3A 20 30 23 00         DB   ": 0#",0   
2ED7   CD CF 0C               CALL   flushBuffer   
2EDA   E1                     POP   HL   
2EDB   E5                     PUSH   HL   
2EDC   11 00 00               LD   DE,$0000   
2EDF   B7                     OR   A   
2EE0   ED 52                  SBC   HL,DE   
2EE2   7D                     LD   A,L   
2EE3   B4                     OR   H   
2EE4   CA 43 2F               JP   Z,expectM_2888S99   
2EE7   CD 47 0D               CALL   printStr   
2EEA   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2EF5   CD 47 0D               CALL   printStr   
2EF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F07   21 00 00               LD   hl,$0000   
2F0A   E5                     PUSH   hl   
2F0B   E5                     PUSH   hl   
2F0C   CD 61 0E               CALL   run   
2F0F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F17   CD CF 0C               CALL   flushBuffer   
2F1A   CD 47 0D               CALL   printStr   
2F1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F2A   E1                     POP   hl   
2F2B   E5                     PUSH   hl   
2F2C   E5                     PUSH   hl   
2F2D   CD 61 0E               CALL   run   
2F30   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F3F   CD CF 0C               CALL   flushBuffer   
2F42   76                     HALT      
2F43                EXPECTM_2888S99:      
2F43   E1                     POP   HL   
2F44                          ;*Macro unroll:  test ":a 0#", $0100
2F44   31 00 52               LD   SP,STACK   
2F47   CD 8F 0D               CALL   coldInit   
2F4A   CD 86 50               CALL   execStr   
2F4D   3A 61 20 30 23 00      DB   ":a 0#",0   
2F53   CD CF 0C               CALL   flushBuffer   
2F56   E1                     POP   HL   
2F57   E5                     PUSH   HL   
2F58   11 00 01               LD   DE,$0100   
2F5B   B7                     OR   A   
2F5C   ED 52                  SBC   HL,DE   
2F5E   7D                     LD   A,L   
2F5F   B4                     OR   H   
2F60   CA C0 2F               JP   Z,expectM_2889S100   
2F63   CD 47 0D               CALL   printStr   
2F66   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2F72   CD 47 0D               CALL   printStr   
2F75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F84   21 00 01               LD   hl,$0100   
2F87   E5                     PUSH   hl   
2F88   E5                     PUSH   hl   
2F89   CD 61 0E               CALL   run   
2F8C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F94   CD CF 0C               CALL   flushBuffer   
2F97   CD 47 0D               CALL   printStr   
2F9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FA7   E1                     POP   hl   
2FA8   E5                     PUSH   hl   
2FA9   E5                     PUSH   hl   
2FAA   CD 61 0E               CALL   run   
2FAD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FBC   CD CF 0C               CALL   flushBuffer   
2FBF   76                     HALT      
2FC0                EXPECTM_2889S100:      
2FC0   E1                     POP   HL   
2FC1                          ;*Macro unroll:  test ":a: 0#", $0100
2FC1   31 00 52               LD   SP,STACK   
2FC4   CD 8F 0D               CALL   coldInit   
2FC7   CD 86 50               CALL   execStr   
2FCA   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2FD1   CD CF 0C               CALL   flushBuffer   
2FD4   E1                     POP   HL   
2FD5   E5                     PUSH   HL   
2FD6   11 00 01               LD   DE,$0100   
2FD9   B7                     OR   A   
2FDA   ED 52                  SBC   HL,DE   
2FDC   7D                     LD   A,L   
2FDD   B4                     OR   H   
2FDE   CA 3F 30               JP   Z,expectM_2890S101   
2FE1   CD 47 0D               CALL   printStr   
2FE4   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2FF1   CD 47 0D               CALL   printStr   
2FF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3003   21 00 01               LD   hl,$0100   
3006   E5                     PUSH   hl   
3007   E5                     PUSH   hl   
3008   CD 61 0E               CALL   run   
300B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3013   CD CF 0C               CALL   flushBuffer   
3016   CD 47 0D               CALL   printStr   
3019   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3026   E1                     POP   hl   
3027   E5                     PUSH   hl   
3028   E5                     PUSH   hl   
3029   CD 61 0E               CALL   run   
302C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
303B   CD CF 0C               CALL   flushBuffer   
303E   76                     HALT      
303F                EXPECTM_2890S101:      
303F   E1                     POP   HL   
3040                          ;*Macro unroll:  test ":a:b 0#", $0201
3040   31 00 52               LD   SP,STACK   
3043   CD 8F 0D               CALL   coldInit   
3046   CD 86 50               CALL   execStr   
3049   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
3051   CD CF 0C               CALL   flushBuffer   
3054   E1                     POP   HL   
3055   E5                     PUSH   HL   
3056   11 01 02               LD   DE,$0201   
3059   B7                     OR   A   
305A   ED 52                  SBC   HL,DE   
305C   7D                     LD   A,L   
305D   B4                     OR   H   
305E   CA C0 30               JP   Z,expectM_2891S102   
3061   CD 47 0D               CALL   printStr   
3064   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
3072   CD 47 0D               CALL   printStr   
3075   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3084   21 01 02               LD   hl,$0201   
3087   E5                     PUSH   hl   
3088   E5                     PUSH   hl   
3089   CD 61 0E               CALL   run   
308C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3094   CD CF 0C               CALL   flushBuffer   
3097   CD 47 0D               CALL   printStr   
309A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30A7   E1                     POP   hl   
30A8   E5                     PUSH   hl   
30A9   E5                     PUSH   hl   
30AA   CD 61 0E               CALL   run   
30AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30BC   CD CF 0C               CALL   flushBuffer   
30BF   76                     HALT      
30C0                EXPECTM_2891S102:      
30C0   E1                     POP   HL   
30C1                          ;*Macro unroll:  test "::b 0#", $0101
30C1   31 00 52               LD   SP,STACK   
30C4   CD 8F 0D               CALL   coldInit   
30C7   CD 86 50               CALL   execStr   
30CA   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
30D1   CD CF 0C               CALL   flushBuffer   
30D4   E1                     POP   HL   
30D5   E5                     PUSH   HL   
30D6   11 01 01               LD   DE,$0101   
30D9   B7                     OR   A   
30DA   ED 52                  SBC   HL,DE   
30DC   7D                     LD   A,L   
30DD   B4                     OR   H   
30DE   CA 3F 31               JP   Z,expectM_2892S103   
30E1   CD 47 0D               CALL   printStr   
30E4   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
30F1   CD 47 0D               CALL   printStr   
30F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3103   21 01 01               LD   hl,$0101   
3106   E5                     PUSH   hl   
3107   E5                     PUSH   hl   
3108   CD 61 0E               CALL   run   
310B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3113   CD CF 0C               CALL   flushBuffer   
3116   CD 47 0D               CALL   printStr   
3119   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3126   E1                     POP   hl   
3127   E5                     PUSH   hl   
3128   E5                     PUSH   hl   
3129   CD 61 0E               CALL   run   
312C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
313B   CD CF 0C               CALL   flushBuffer   
313E   76                     HALT      
313F                EXPECTM_2892S103:      
313F   E1                     POP   HL   
3140                          ;*Macro unroll:  test ":{2};^", 2
3140   31 00 52               LD   SP,STACK   
3143   CD 8F 0D               CALL   coldInit   
3146   CD 86 50               CALL   execStr   
3149   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
3150   CD CF 0C               CALL   flushBuffer   
3153   E1                     POP   HL   
3154   E5                     PUSH   HL   
3155   11 02 00               LD   DE,2   
3158   B7                     OR   A   
3159   ED 52                  SBC   HL,DE   
315B   7D                     LD   A,L   
315C   B4                     OR   H   
315D   CA BE 31               JP   Z,expectM_2893S104   
3160   CD 47 0D               CALL   printStr   
3163   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
3170   CD 47 0D               CALL   printStr   
3173   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3182   21 02 00               LD   hl,2   
3185   E5                     PUSH   hl   
3186   E5                     PUSH   hl   
3187   CD 61 0E               CALL   run   
318A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3192   CD CF 0C               CALL   flushBuffer   
3195   CD 47 0D               CALL   printStr   
3198   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31A5   E1                     POP   hl   
31A6   E5                     PUSH   hl   
31A7   E5                     PUSH   hl   
31A8   CD 61 0E               CALL   run   
31AB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31BA   CD CF 0C               CALL   flushBuffer   
31BD   76                     HALT      
31BE                EXPECTM_2893S104:      
31BE   E1                     POP   HL   
31BF                          ;*Macro unroll:  test ":a{2};^", 2
31BF   31 00 52               LD   SP,STACK   
31C2   CD 8F 0D               CALL   coldInit   
31C5   CD 86 50               CALL   execStr   
31C8   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
31D0   CD CF 0C               CALL   flushBuffer   
31D3   E1                     POP   HL   
31D4   E5                     PUSH   HL   
31D5   11 02 00               LD   DE,2   
31D8   B7                     OR   A   
31D9   ED 52                  SBC   HL,DE   
31DB   7D                     LD   A,L   
31DC   B4                     OR   H   
31DD   CA 3F 32               JP   Z,expectM_2894S105   
31E0   CD 47 0D               CALL   printStr   
31E3   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
31F1   CD 47 0D               CALL   printStr   
31F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3203   21 02 00               LD   hl,2   
3206   E5                     PUSH   hl   
3207   E5                     PUSH   hl   
3208   CD 61 0E               CALL   run   
320B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3213   CD CF 0C               CALL   flushBuffer   
3216   CD 47 0D               CALL   printStr   
3219   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3226   E1                     POP   hl   
3227   E5                     PUSH   hl   
3228   E5                     PUSH   hl   
3229   CD 61 0E               CALL   run   
322C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
323B   CD CF 0C               CALL   flushBuffer   
323E   76                     HALT      
323F                EXPECTM_2894S105:      
323F   E1                     POP   HL   
3240                          ;*Macro unroll:  test "5 :a{%a};^", 5
3240   31 00 52               LD   SP,STACK   
3243   CD 8F 0D               CALL   coldInit   
3246   CD 86 50               CALL   execStr   
3249   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
3254   CD CF 0C               CALL   flushBuffer   
3257   E1                     POP   HL   
3258   E5                     PUSH   HL   
3259   11 05 00               LD   DE,5   
325C   B7                     OR   A   
325D   ED 52                  SBC   HL,DE   
325F   7D                     LD   A,L   
3260   B4                     OR   H   
3261   CA C6 32               JP   Z,expectM_2895S106   
3264   CD 47 0D               CALL   printStr   
3267   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
3278   CD 47 0D               CALL   printStr   
327B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328A   21 05 00               LD   hl,5   
328D   E5                     PUSH   hl   
328E   E5                     PUSH   hl   
328F   CD 61 0E               CALL   run   
3292   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
329A   CD CF 0C               CALL   flushBuffer   
329D   CD 47 0D               CALL   printStr   
32A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32AD   E1                     POP   hl   
32AE   E5                     PUSH   hl   
32AF   E5                     PUSH   hl   
32B0   CD 61 0E               CALL   run   
32B3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32C2   CD CF 0C               CALL   flushBuffer   
32C5   76                     HALT      
32C6                EXPECTM_2895S106:      
32C6   E1                     POP   HL   
32C7                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
32C7   31 00 52               LD   SP,STACK   
32CA   CD 8F 0D               CALL   coldInit   
32CD   CD 86 50               CALL   execStr   
32D0   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
32DD   CD CF 0C               CALL   flushBuffer   
32E0   E1                     POP   HL   
32E1   E5                     PUSH   HL   
32E2   11 05 00               LD   DE,5   
32E5   B7                     OR   A   
32E6   ED 52                  SBC   HL,DE   
32E8   7D                     LD   A,L   
32E9   B4                     OR   H   
32EA   CA 51 33               JP   Z,expectM_2896S107   
32ED   CD 47 0D               CALL   printStr   
32F0   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
3303   CD 47 0D               CALL   printStr   
3306   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3315   21 05 00               LD   hl,5   
3318   E5                     PUSH   hl   
3319   E5                     PUSH   hl   
331A   CD 61 0E               CALL   run   
331D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3325   CD CF 0C               CALL   flushBuffer   
3328   CD 47 0D               CALL   printStr   
332B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3338   E1                     POP   hl   
3339   E5                     PUSH   hl   
333A   E5                     PUSH   hl   
333B   CD 61 0E               CALL   run   
333E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
334D   CD CF 0C               CALL   flushBuffer   
3350   76                     HALT      
3351                EXPECTM_2896S107:      
3351   E1                     POP   HL   
3352                          ;*Macro unroll:  test ":a{{2}^};^", 2
3352   31 00 52               LD   SP,STACK   
3355   CD 8F 0D               CALL   coldInit   
3358   CD 86 50               CALL   execStr   
335B   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
3366   CD CF 0C               CALL   flushBuffer   
3369   E1                     POP   HL   
336A   E5                     PUSH   HL   
336B   11 02 00               LD   DE,2   
336E   B7                     OR   A   
336F   ED 52                  SBC   HL,DE   
3371   7D                     LD   A,L   
3372   B4                     OR   H   
3373   CA D8 33               JP   Z,expectM_2897S108   
3376   CD 47 0D               CALL   printStr   
3379   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
338A   CD 47 0D               CALL   printStr   
338D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
339C   21 02 00               LD   hl,2   
339F   E5                     PUSH   hl   
33A0   E5                     PUSH   hl   
33A1   CD 61 0E               CALL   run   
33A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33AC   CD CF 0C               CALL   flushBuffer   
33AF   CD 47 0D               CALL   printStr   
33B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33BF   E1                     POP   hl   
33C0   E5                     PUSH   hl   
33C1   E5                     PUSH   hl   
33C2   CD 61 0E               CALL   run   
33C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33D4   CD CF 0C               CALL   flushBuffer   
33D7   76                     HALT      
33D8                EXPECTM_2897S108:      
33D8   E1                     POP   HL   
33D9                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
33D9   31 00 52               LD   SP,STACK   
33DC   CD 8F 0D               CALL   coldInit   
33DF   CD 86 50               CALL   execStr   
33E2   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
33F2   CD CF 0C               CALL   flushBuffer   
33F5   E1                     POP   HL   
33F6   E5                     PUSH   HL   
33F7   11 05 00               LD   DE,5   
33FA   B7                     OR   A   
33FB   ED 52                  SBC   HL,DE   
33FD   7D                     LD   A,L   
33FE   B4                     OR   H   
33FF   CA 69 34               JP   Z,expectM_2898S109   
3402   CD 47 0D               CALL   printStr   
3405   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
341B   CD 47 0D               CALL   printStr   
341E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
342D   21 05 00               LD   hl,5   
3430   E5                     PUSH   hl   
3431   E5                     PUSH   hl   
3432   CD 61 0E               CALL   run   
3435   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
343D   CD CF 0C               CALL   flushBuffer   
3440   CD 47 0D               CALL   printStr   
3443   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3450   E1                     POP   hl   
3451   E5                     PUSH   hl   
3452   E5                     PUSH   hl   
3453   CD 61 0E               CALL   run   
3456   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3465   CD CF 0C               CALL   flushBuffer   
3468   76                     HALT      
3469                EXPECTM_2898S109:      
3469   E1                     POP   HL   
346A                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
346A   31 00 52               LD   SP,STACK   
346D   CD 8F 0D               CALL   coldInit   
3470   CD 86 50               CALL   execStr   
3473   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
3484   CD CF 0C               CALL   flushBuffer   
3487   E1                     POP   HL   
3488   E5                     PUSH   HL   
3489   11 01 00               LD   DE,1   
348C   B7                     OR   A   
348D   ED 52                  SBC   HL,DE   
348F   7D                     LD   A,L   
3490   B4                     OR   H   
3491   CA FC 34               JP   Z,expectM_2899S110   
3494   CD 47 0D               CALL   printStr   
3497   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
34AE   CD 47 0D               CALL   printStr   
34B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34C0   21 01 00               LD   hl,1   
34C3   E5                     PUSH   hl   
34C4   E5                     PUSH   hl   
34C5   CD 61 0E               CALL   run   
34C8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34D0   CD CF 0C               CALL   flushBuffer   
34D3   CD 47 0D               CALL   printStr   
34D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34E3   E1                     POP   hl   
34E4   E5                     PUSH   hl   
34E5   E5                     PUSH   hl   
34E6   CD 61 0E               CALL   run   
34E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34F8   CD CF 0C               CALL   flushBuffer   
34FB   76                     HALT      
34FC                EXPECTM_2899S110:      
34FC   E1                     POP   HL   
34FD                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
34FD   31 00 52               LD   SP,STACK   
3500   CD 8F 0D               CALL   coldInit   
3503   CD 86 50               CALL   execStr   
3506   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
351A   CD CF 0C               CALL   flushBuffer   
351D   E1                     POP   HL   
351E   E5                     PUSH   HL   
351F   11 07 00               LD   DE,7   
3522   B7                     OR   A   
3523   ED 52                  SBC   HL,DE   
3525   7D                     LD   A,L   
3526   B4                     OR   H   
3527   CA 95 35               JP   Z,expectM_2900S111   
352A   CD 47 0D               CALL   printStr   
352D   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3547   CD 47 0D               CALL   printStr   
354A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3559   21 07 00               LD   hl,7   
355C   E5                     PUSH   hl   
355D   E5                     PUSH   hl   
355E   CD 61 0E               CALL   run   
3561   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3569   CD CF 0C               CALL   flushBuffer   
356C   CD 47 0D               CALL   printStr   
356F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
357C   E1                     POP   hl   
357D   E5                     PUSH   hl   
357E   E5                     PUSH   hl   
357F   CD 61 0E               CALL   run   
3582   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3591   CD CF 0C               CALL   flushBuffer   
3594   76                     HALT      
3595                EXPECTM_2900S111:      
3595   E1                     POP   HL   
3596                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3596   31 00 52               LD   SP,STACK   
3599   CD 8F 0D               CALL   coldInit   
359C   CD 86 50               CALL   execStr   
359F   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
35B5   CD CF 0C               CALL   flushBuffer   
35B8   E1                     POP   HL   
35B9   E5                     PUSH   HL   
35BA   11 06 00               LD   DE,6   
35BD   B7                     OR   A   
35BE   ED 52                  SBC   HL,DE   
35C0   7D                     LD   A,L   
35C1   B4                     OR   H   
35C2   CA 32 36               JP   Z,expectM_2901S112   
35C5   CD 47 0D               CALL   printStr   
35C8   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
35E4   CD 47 0D               CALL   printStr   
35E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35F6   21 06 00               LD   hl,6   
35F9   E5                     PUSH   hl   
35FA   E5                     PUSH   hl   
35FB   CD 61 0E               CALL   run   
35FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3606   CD CF 0C               CALL   flushBuffer   
3609   CD 47 0D               CALL   printStr   
360C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3619   E1                     POP   hl   
361A   E5                     PUSH   hl   
361B   E5                     PUSH   hl   
361C   CD 61 0E               CALL   run   
361F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
362E   CD CF 0C               CALL   flushBuffer   
3631   76                     HALT      
3632                EXPECTM_2901S112:      
3632   E1                     POP   HL   
3633                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
3633   31 00 52               LD   SP,STACK   
3636   CD 8F 0D               CALL   coldInit   
3639   CD 86 50               CALL   execStr   
363C   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
364B   CD CF 0C               CALL   flushBuffer   
364E   E1                     POP   HL   
364F   E5                     PUSH   HL   
3650   11 02 00               LD   DE,2   
3653   B7                     OR   A   
3654   ED 52                  SBC   HL,DE   
3656   7D                     LD   A,L   
3657   B4                     OR   H   
3658   CA C1 36               JP   Z,expectM_2902S113   
365B   CD 47 0D               CALL   printStr   
365E   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
3673   CD 47 0D               CALL   printStr   
3676   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3685   21 02 00               LD   hl,2   
3688   E5                     PUSH   hl   
3689   E5                     PUSH   hl   
368A   CD 61 0E               CALL   run   
368D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3695   CD CF 0C               CALL   flushBuffer   
3698   CD 47 0D               CALL   printStr   
369B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36A8   E1                     POP   hl   
36A9   E5                     PUSH   hl   
36AA   E5                     PUSH   hl   
36AB   CD 61 0E               CALL   run   
36AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36BD   CD CF 0C               CALL   flushBuffer   
36C0   76                     HALT      
36C1                EXPECTM_2902S113:      
36C1   E1                     POP   HL   
36C2                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
36C2   31 00 52               LD   SP,STACK   
36C5   CD 8F 0D               CALL   coldInit   
36C8   CD 86 50               CALL   execStr   
36CB   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
36DD   CD CF 0C               CALL   flushBuffer   
36E0   E1                     POP   HL   
36E1   E5                     PUSH   HL   
36E2   11 01 00               LD   DE,1   
36E5   B7                     OR   A   
36E6   ED 52                  SBC   HL,DE   
36E8   7D                     LD   A,L   
36E9   B4                     OR   H   
36EA   CA 56 37               JP   Z,expectM_2903S114   
36ED   CD 47 0D               CALL   printStr   
36F0   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
3708   CD 47 0D               CALL   printStr   
370B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
371A   21 01 00               LD   hl,1   
371D   E5                     PUSH   hl   
371E   E5                     PUSH   hl   
371F   CD 61 0E               CALL   run   
3722   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
372A   CD CF 0C               CALL   flushBuffer   
372D   CD 47 0D               CALL   printStr   
3730   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
373D   E1                     POP   hl   
373E   E5                     PUSH   hl   
373F   E5                     PUSH   hl   
3740   CD 61 0E               CALL   run   
3743   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3752   CD CF 0C               CALL   flushBuffer   
3755   76                     HALT      
3756                EXPECTM_2903S114:      
3756   E1                     POP   HL   
3757                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3757   31 00 52               LD   SP,STACK   
375A   CD 8F 0D               CALL   coldInit   
375D   CD 86 50               CALL   execStr   
3760   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3773   CD CF 0C               CALL   flushBuffer   
3776   E1                     POP   HL   
3777   E5                     PUSH   HL   
3778   11 02 00               LD   DE,2   
377B   B7                     OR   A   
377C   ED 52                  SBC   HL,DE   
377E   7D                     LD   A,L   
377F   B4                     OR   H   
3780   CA ED 37               JP   Z,expectM_2904S115   
3783   CD 47 0D               CALL   printStr   
3786   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
379F   CD 47 0D               CALL   printStr   
37A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37B1   21 02 00               LD   hl,2   
37B4   E5                     PUSH   hl   
37B5   E5                     PUSH   hl   
37B6   CD 61 0E               CALL   run   
37B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37C1   CD CF 0C               CALL   flushBuffer   
37C4   CD 47 0D               CALL   printStr   
37C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37D4   E1                     POP   hl   
37D5   E5                     PUSH   hl   
37D6   E5                     PUSH   hl   
37D7   CD 61 0E               CALL   run   
37DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37E9   CD CF 0C               CALL   flushBuffer   
37EC   76                     HALT      
37ED                EXPECTM_2904S115:      
37ED   E1                     POP   HL   
37EE                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
37EE   31 00 52               LD   SP,STACK   
37F1   CD 8F 0D               CALL   coldInit   
37F4   CD 86 50               CALL   execStr   
37F7   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
380B   CD CF 0C               CALL   flushBuffer   
380E   E1                     POP   HL   
380F   E5                     PUSH   HL   
3810   11 02 00               LD   DE,2   
3813   B7                     OR   A   
3814   ED 52                  SBC   HL,DE   
3816   7D                     LD   A,L   
3817   B4                     OR   H   
3818   CA 86 38               JP   Z,expectM_2905S116   
381B   CD 47 0D               CALL   printStr   
381E   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
3838   CD 47 0D               CALL   printStr   
383B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
384A   21 02 00               LD   hl,2   
384D   E5                     PUSH   hl   
384E   E5                     PUSH   hl   
384F   CD 61 0E               CALL   run   
3852   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
385A   CD CF 0C               CALL   flushBuffer   
385D   CD 47 0D               CALL   printStr   
3860   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
386D   E1                     POP   hl   
386E   E5                     PUSH   hl   
386F   E5                     PUSH   hl   
3870   CD 61 0E               CALL   run   
3873   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3882   CD CF 0C               CALL   flushBuffer   
3885   76                     HALT      
3886                EXPECTM_2905S116:      
3886   E1                     POP   HL   
3887                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3887   31 00 52               LD   SP,STACK   
388A   CD 8F 0D               CALL   coldInit   
388D   CD 86 50               CALL   execStr   
3890   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
38A3   CD CF 0C               CALL   flushBuffer   
38A6   E1                     POP   HL   
38A7   E5                     PUSH   HL   
38A8   11 02 00               LD   DE,2   
38AB   B7                     OR   A   
38AC   ED 52                  SBC   HL,DE   
38AE   7D                     LD   A,L   
38AF   B4                     OR   H   
38B0   CA 1D 39               JP   Z,expectM_2906S117   
38B3   CD 47 0D               CALL   printStr   
38B6   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
38CF   CD 47 0D               CALL   printStr   
38D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38E1   21 02 00               LD   hl,2   
38E4   E5                     PUSH   hl   
38E5   E5                     PUSH   hl   
38E6   CD 61 0E               CALL   run   
38E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38F1   CD CF 0C               CALL   flushBuffer   
38F4   CD 47 0D               CALL   printStr   
38F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3904   E1                     POP   hl   
3905   E5                     PUSH   hl   
3906   E5                     PUSH   hl   
3907   CD 61 0E               CALL   run   
390A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3919   CD CF 0C               CALL   flushBuffer   
391C   76                     HALT      
391D                EXPECTM_2906S117:      
391D   E1                     POP   HL   
391E                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
391E   31 00 52               LD   SP,STACK   
3921   CD 8F 0D               CALL   coldInit   
3924   CD 86 50               CALL   execStr   
3927   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
3941   CD CF 0C               CALL   flushBuffer   
3944   E1                     POP   HL   
3945   E5                     PUSH   HL   
3946   11 05 00               LD   DE,5   
3949   B7                     OR   A   
394A   ED 52                  SBC   HL,DE   
394C   7D                     LD   A,L   
394D   B4                     OR   H   
394E   CA C2 39               JP   Z,expectM_2907S118   
3951   CD 47 0D               CALL   printStr   
3954   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
3974   CD 47 0D               CALL   printStr   
3977   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3986   21 05 00               LD   hl,5   
3989   E5                     PUSH   hl   
398A   E5                     PUSH   hl   
398B   CD 61 0E               CALL   run   
398E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3996   CD CF 0C               CALL   flushBuffer   
3999   CD 47 0D               CALL   printStr   
399C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39A9   E1                     POP   hl   
39AA   E5                     PUSH   hl   
39AB   E5                     PUSH   hl   
39AC   CD 61 0E               CALL   run   
39AF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39BE   CD CF 0C               CALL   flushBuffer   
39C1   76                     HALT      
39C2                EXPECTM_2907S118:      
39C2   E1                     POP   HL   
39C3                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
39C3   31 00 52               LD   SP,STACK   
39C6   CD 8F 0D               CALL   coldInit   
39C9   CD 86 50               CALL   execStr   
39CC   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
39DD   CD CF 0C               CALL   flushBuffer   
39E0   E1                     POP   HL   
39E1   E5                     PUSH   HL   
39E2   11 02 00               LD   DE,2   
39E5   B7                     OR   A   
39E6   ED 52                  SBC   HL,DE   
39E8   7D                     LD   A,L   
39E9   B4                     OR   H   
39EA   CA 55 3A               JP   Z,expectM_2908S119   
39ED   CD 47 0D               CALL   printStr   
39F0   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3A07   CD 47 0D               CALL   printStr   
3A0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A19   21 02 00               LD   hl,2   
3A1C   E5                     PUSH   hl   
3A1D   E5                     PUSH   hl   
3A1E   CD 61 0E               CALL   run   
3A21   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A29   CD CF 0C               CALL   flushBuffer   
3A2C   CD 47 0D               CALL   printStr   
3A2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A3C   E1                     POP   hl   
3A3D   E5                     PUSH   hl   
3A3E   E5                     PUSH   hl   
3A3F   CD 61 0E               CALL   run   
3A42   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A51   CD CF 0C               CALL   flushBuffer   
3A54   76                     HALT      
3A55                EXPECTM_2908S119:      
3A55   E1                     POP   HL   
3A56                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3A56   31 00 52               LD   SP,STACK   
3A59   CD 8F 0D               CALL   coldInit   
3A5C   CD 86 50               CALL   execStr   
3A5F   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3A77   CD CF 0C               CALL   flushBuffer   
3A7A   E1                     POP   HL   
3A7B   E5                     PUSH   HL   
3A7C   11 64 00               LD   DE,100   
3A7F   B7                     OR   A   
3A80   ED 52                  SBC   HL,DE   
3A82   7D                     LD   A,L   
3A83   B4                     OR   H   
3A84   CA F6 3A               JP   Z,expectM_2909S120   
3A87   CD 47 0D               CALL   printStr   
3A8A   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3AA8   CD 47 0D               CALL   printStr   
3AAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ABA   21 64 00               LD   hl,100   
3ABD   E5                     PUSH   hl   
3ABE   E5                     PUSH   hl   
3ABF   CD 61 0E               CALL   run   
3AC2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3ACA   CD CF 0C               CALL   flushBuffer   
3ACD   CD 47 0D               CALL   printStr   
3AD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ADD   E1                     POP   hl   
3ADE   E5                     PUSH   hl   
3ADF   E5                     PUSH   hl   
3AE0   CD 61 0E               CALL   run   
3AE3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AF2   CD CF 0C               CALL   flushBuffer   
3AF5   76                     HALT      
3AF6                EXPECTM_2909S120:      
3AF6   E1                     POP   HL   
3AF7                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
3AF7   31 00 52               LD   SP,STACK   
3AFA   CD 8F 0D               CALL   coldInit   
3AFD   CD 86 50               CALL   execStr   
3B00   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3B19   CD CF 0C               CALL   flushBuffer   
3B1C   E1                     POP   HL   
3B1D   E5                     PUSH   HL   
3B1E   11 01 00               LD   DE,1   
3B21   B7                     OR   A   
3B22   ED 52                  SBC   HL,DE   
3B24   7D                     LD   A,L   
3B25   B4                     OR   H   
3B26   CA 99 3B               JP   Z,expectM_2910S121   
3B29   CD 47 0D               CALL   printStr   
3B2C   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3B4B   CD 47 0D               CALL   printStr   
3B4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B5D   21 01 00               LD   hl,1   
3B60   E5                     PUSH   hl   
3B61   E5                     PUSH   hl   
3B62   CD 61 0E               CALL   run   
3B65   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B6D   CD CF 0C               CALL   flushBuffer   
3B70   CD 47 0D               CALL   printStr   
3B73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B80   E1                     POP   hl   
3B81   E5                     PUSH   hl   
3B82   E5                     PUSH   hl   
3B83   CD 61 0E               CALL   run   
3B86   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B95   CD CF 0C               CALL   flushBuffer   
3B98   76                     HALT      
3B99                EXPECTM_2910S121:      
3B99   E1                     POP   HL   
3B9A                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3B9A   31 00 52               LD   SP,STACK   
3B9D   CD 8F 0D               CALL   coldInit   
3BA0   CD 86 50               CALL   execStr   
3BA3   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3BBD   CD CF 0C               CALL   flushBuffer   
3BC0   E1                     POP   HL   
3BC1   E5                     PUSH   HL   
3BC2   11 02 00               LD   DE,2   
3BC5   B7                     OR   A   
3BC6   ED 52                  SBC   HL,DE   
3BC8   7D                     LD   A,L   
3BC9   B4                     OR   H   
3BCA   CA 3E 3C               JP   Z,expectM_2911S122   
3BCD   CD 47 0D               CALL   printStr   
3BD0   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3BF0   CD 47 0D               CALL   printStr   
3BF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C02   21 02 00               LD   hl,2   
3C05   E5                     PUSH   hl   
3C06   E5                     PUSH   hl   
3C07   CD 61 0E               CALL   run   
3C0A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C12   CD CF 0C               CALL   flushBuffer   
3C15   CD 47 0D               CALL   printStr   
3C18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C25   E1                     POP   hl   
3C26   E5                     PUSH   hl   
3C27   E5                     PUSH   hl   
3C28   CD 61 0E               CALL   run   
3C2B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C3A   CD CF 0C               CALL   flushBuffer   
3C3D   76                     HALT      
3C3E                EXPECTM_2911S122:      
3C3E   E1                     POP   HL   
3C3F                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
3C3F   31 00 52               LD   SP,STACK   
3C42   CD 8F 0D               CALL   coldInit   
3C45   CD 86 50               CALL   execStr   
3C48   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3C67   CD CF 0C               CALL   flushBuffer   
3C6A   E1                     POP   HL   
3C6B   E5                     PUSH   HL   
3C6C   11 0B 00               LD   DE,11   
3C6F   B7                     OR   A   
3C70   ED 52                  SBC   HL,DE   
3C72   7D                     LD   A,L   
3C73   B4                     OR   H   
3C74   CA ED 3C               JP   Z,expectM_2912S123   
3C77   CD 47 0D               CALL   printStr   
3C7A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3C9F   CD 47 0D               CALL   printStr   
3CA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CB1   21 0B 00               LD   hl,11   
3CB4   E5                     PUSH   hl   
3CB5   E5                     PUSH   hl   
3CB6   CD 61 0E               CALL   run   
3CB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CC1   CD CF 0C               CALL   flushBuffer   
3CC4   CD 47 0D               CALL   printStr   
3CC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CD4   E1                     POP   hl   
3CD5   E5                     PUSH   hl   
3CD6   E5                     PUSH   hl   
3CD7   CD 61 0E               CALL   run   
3CDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CE9   CD CF 0C               CALL   flushBuffer   
3CEC   76                     HALT      
3CED                EXPECTM_2912S123:      
3CED   E1                     POP   HL   
3CEE                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3CEE   31 00 52               LD   SP,STACK   
3CF1   CD 8F 0D               CALL   coldInit   
3CF4   CD 86 50               CALL   execStr   
3CF7   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3D16   CD CF 0C               CALL   flushBuffer   
3D19   E1                     POP   HL   
3D1A   E5                     PUSH   HL   
3D1B   11 15 00               LD   DE,21   
3D1E   B7                     OR   A   
3D1F   ED 52                  SBC   HL,DE   
3D21   7D                     LD   A,L   
3D22   B4                     OR   H   
3D23   CA 9C 3D               JP   Z,expectM_2913S124   
3D26   CD 47 0D               CALL   printStr   
3D29   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3D4E   CD 47 0D               CALL   printStr   
3D51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D60   21 15 00               LD   hl,21   
3D63   E5                     PUSH   hl   
3D64   E5                     PUSH   hl   
3D65   CD 61 0E               CALL   run   
3D68   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D70   CD CF 0C               CALL   flushBuffer   
3D73   CD 47 0D               CALL   printStr   
3D76   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D83   E1                     POP   hl   
3D84   E5                     PUSH   hl   
3D85   E5                     PUSH   hl   
3D86   CD 61 0E               CALL   run   
3D89   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D98   CD CF 0C               CALL   flushBuffer   
3D9B   76                     HALT      
3D9C                EXPECTM_2913S124:      
3D9C   E1                     POP   HL   
3D9D                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3D9D   31 00 52               LD   SP,STACK   
3DA0   CD 8F 0D               CALL   coldInit   
3DA3   CD 86 50               CALL   execStr   
3DA6   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3DB4   CD CF 0C               CALL   flushBuffer   
3DB7   E1                     POP   HL   
3DB8   E5                     PUSH   HL   
3DB9   11 14 00               LD   DE,20   
3DBC   B7                     OR   A   
3DBD   ED 52                  SBC   HL,DE   
3DBF   7D                     LD   A,L   
3DC0   B4                     OR   H   
3DC1   CA 29 3E               JP   Z,expectM_2914S125   
3DC4   CD 47 0D               CALL   printStr   
3DC7   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3DDB   CD 47 0D               CALL   printStr   
3DDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DED   21 14 00               LD   hl,20   
3DF0   E5                     PUSH   hl   
3DF1   E5                     PUSH   hl   
3DF2   CD 61 0E               CALL   run   
3DF5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DFD   CD CF 0C               CALL   flushBuffer   
3E00   CD 47 0D               CALL   printStr   
3E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E10   E1                     POP   hl   
3E11   E5                     PUSH   hl   
3E12   E5                     PUSH   hl   
3E13   CD 61 0E               CALL   run   
3E16   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E25   CD CF 0C               CALL   flushBuffer   
3E28   76                     HALT      
3E29                EXPECTM_2914S125:      
3E29   E1                     POP   HL   
3E2A                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
3E2A   31 00 52               LD   SP,STACK   
3E2D   CD 8F 0D               CALL   coldInit   
3E30   CD 86 50               CALL   execStr   
3E33   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3E45   CD CF 0C               CALL   flushBuffer   
3E48   E1                     POP   HL   
3E49   E5                     PUSH   HL   
3E4A   11 04 00               LD   DE,4   
3E4D   B7                     OR   A   
3E4E   ED 52                  SBC   HL,DE   
3E50   7D                     LD   A,L   
3E51   B4                     OR   H   
3E52   CA BE 3E               JP   Z,expectM_2915S126   
3E55   CD 47 0D               CALL   printStr   
3E58   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3E70   CD 47 0D               CALL   printStr   
3E73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E82   21 04 00               LD   hl,4   
3E85   E5                     PUSH   hl   
3E86   E5                     PUSH   hl   
3E87   CD 61 0E               CALL   run   
3E8A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E92   CD CF 0C               CALL   flushBuffer   
3E95   CD 47 0D               CALL   printStr   
3E98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EA5   E1                     POP   hl   
3EA6   E5                     PUSH   hl   
3EA7   E5                     PUSH   hl   
3EA8   CD 61 0E               CALL   run   
3EAB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EBA   CD CF 0C               CALL   flushBuffer   
3EBD   76                     HALT      
3EBE                EXPECTM_2915S126:      
3EBE   E1                     POP   HL   
3EBF                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3EBF   31 00 52               LD   SP,STACK   
3EC2   CD 8F 0D               CALL   coldInit   
3EC5   CD 86 50               CALL   execStr   
3EC8   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3ED6   CD CF 0C               CALL   flushBuffer   
3ED9   E1                     POP   HL   
3EDA   E5                     PUSH   HL   
3EDB   11 02 00               LD   DE,2   
3EDE   B7                     OR   A   
3EDF   ED 52                  SBC   HL,DE   
3EE1   7D                     LD   A,L   
3EE2   B4                     OR   H   
3EE3   CA 4B 3F               JP   Z,expectM_2916S127   
3EE6   CD 47 0D               CALL   printStr   
3EE9   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3EFD   CD 47 0D               CALL   printStr   
3F00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F0F   21 02 00               LD   hl,2   
3F12   E5                     PUSH   hl   
3F13   E5                     PUSH   hl   
3F14   CD 61 0E               CALL   run   
3F17   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F1F   CD CF 0C               CALL   flushBuffer   
3F22   CD 47 0D               CALL   printStr   
3F25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F32   E1                     POP   hl   
3F33   E5                     PUSH   hl   
3F34   E5                     PUSH   hl   
3F35   CD 61 0E               CALL   run   
3F38   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F47   CD CF 0C               CALL   flushBuffer   
3F4A   76                     HALT      
3F4B                EXPECTM_2916S127:      
3F4B   E1                     POP   HL   
3F4C                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
3F4C   31 00 52               LD   SP,STACK   
3F4F   CD 8F 0D               CALL   coldInit   
3F52   CD 86 50               CALL   execStr   
3F55   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
3F69   CD CF 0C               CALL   flushBuffer   
3F6C   E1                     POP   HL   
3F6D   E5                     PUSH   HL   
3F6E   11 42 00               LD   DE,66   
3F71   B7                     OR   A   
3F72   ED 52                  SBC   HL,DE   
3F74   7D                     LD   A,L   
3F75   B4                     OR   H   
3F76   CA E4 3F               JP   Z,expectM_2917S128   
3F79   CD 47 0D               CALL   printStr   
3F7C   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
3F96   CD 47 0D               CALL   printStr   
3F99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FA8   21 42 00               LD   hl,66   
3FAB   E5                     PUSH   hl   
3FAC   E5                     PUSH   hl   
3FAD   CD 61 0E               CALL   run   
3FB0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FB8   CD CF 0C               CALL   flushBuffer   
3FBB   CD 47 0D               CALL   printStr   
3FBE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FCB   E1                     POP   hl   
3FCC   E5                     PUSH   hl   
3FCD   E5                     PUSH   hl   
3FCE   CD 61 0E               CALL   run   
3FD1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FE0   CD CF 0C               CALL   flushBuffer   
3FE3   76                     HALT      
3FE4                EXPECTM_2917S128:      
3FE4   E1                     POP   HL   
3FE5                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3FE5   31 00 52               LD   SP,STACK   
3FE8   CD 8F 0D               CALL   coldInit   
3FEB   CD 86 50               CALL   execStr   
3FEE   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
4002   CD CF 0C               CALL   flushBuffer   
4005   E1                     POP   HL   
4006   E5                     PUSH   HL   
4007   11 0A 00               LD   DE,10   
400A   B7                     OR   A   
400B   ED 52                  SBC   HL,DE   
400D   7D                     LD   A,L   
400E   B4                     OR   H   
400F   CA 7D 40               JP   Z,expectM_2918S129   
4012   CD 47 0D               CALL   printStr   
4015   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
402F   CD 47 0D               CALL   printStr   
4032   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4041   21 0A 00               LD   hl,10   
4044   E5                     PUSH   hl   
4045   E5                     PUSH   hl   
4046   CD 61 0E               CALL   run   
4049   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4051   CD CF 0C               CALL   flushBuffer   
4054   CD 47 0D               CALL   printStr   
4057   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4064   E1                     POP   hl   
4065   E5                     PUSH   hl   
4066   E5                     PUSH   hl   
4067   CD 61 0E               CALL   run   
406A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4079   CD CF 0C               CALL   flushBuffer   
407C   76                     HALT      
407D                EXPECTM_2918S129:      
407D   E1                     POP   HL   
407E                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
407E   31 00 52               LD   SP,STACK   
4081   CD 8F 0D               CALL   coldInit   
4084   CD 86 50               CALL   execStr   
4087   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
40A4   CD CF 0C               CALL   flushBuffer   
40A7   E1                     POP   HL   
40A8   E5                     PUSH   HL   
40A9   11 0A 00               LD   DE,10   
40AC   B7                     OR   A   
40AD   ED 52                  SBC   HL,DE   
40AF   7D                     LD   A,L   
40B0   B4                     OR   H   
40B1   CA 28 41               JP   Z,expectM_2919S130   
40B4   CD 47 0D               CALL   printStr   
40B7   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
40DA   CD 47 0D               CALL   printStr   
40DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40EC   21 0A 00               LD   hl,10   
40EF   E5                     PUSH   hl   
40F0   E5                     PUSH   hl   
40F1   CD 61 0E               CALL   run   
40F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40FC   CD CF 0C               CALL   flushBuffer   
40FF   CD 47 0D               CALL   printStr   
4102   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
410F   E1                     POP   hl   
4110   E5                     PUSH   hl   
4111   E5                     PUSH   hl   
4112   CD 61 0E               CALL   run   
4115   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4124   CD CF 0C               CALL   flushBuffer   
4127   76                     HALT      
4128                EXPECTM_2919S130:      
4128   E1                     POP   HL   
4129                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
4129   31 00 52               LD   SP,STACK   
412C   CD 8F 0D               CALL   coldInit   
412F   CD 86 50               CALL   execStr   
4132   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
4153   CD CF 0C               CALL   flushBuffer   
4156   E1                     POP   HL   
4157   E5                     PUSH   HL   
4158   11 0A 00               LD   DE,10   
415B   B7                     OR   A   
415C   ED 52                  SBC   HL,DE   
415E   7D                     LD   A,L   
415F   B4                     OR   H   
4160   CA DB 41               JP   Z,expectM_2920S131   
4163   CD 47 0D               CALL   printStr   
4166   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
418D   CD 47 0D               CALL   printStr   
4190   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
419F   21 0A 00               LD   hl,10   
41A2   E5                     PUSH   hl   
41A3   E5                     PUSH   hl   
41A4   CD 61 0E               CALL   run   
41A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41AF   CD CF 0C               CALL   flushBuffer   
41B2   CD 47 0D               CALL   printStr   
41B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41C2   E1                     POP   hl   
41C3   E5                     PUSH   hl   
41C4   E5                     PUSH   hl   
41C5   CD 61 0E               CALL   run   
41C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41D7   CD CF 0C               CALL   flushBuffer   
41DA   76                     HALT      
41DB                EXPECTM_2920S131:      
41DB   E1                     POP   HL   
41DC                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
41DC   31 00 52               LD   SP,STACK   
41DF   CD 8F 0D               CALL   coldInit   
41E2   CD 86 50               CALL   execStr   
41E5   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
4206   CD CF 0C               CALL   flushBuffer   
4209   E1                     POP   HL   
420A   E5                     PUSH   HL   
420B   11 14 00               LD   DE,20   
420E   B7                     OR   A   
420F   ED 52                  SBC   HL,DE   
4211   7D                     LD   A,L   
4212   B4                     OR   H   
4213   CA 8E 42               JP   Z,expectM_2921S132   
4216   CD 47 0D               CALL   printStr   
4219   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
4240   CD 47 0D               CALL   printStr   
4243   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4252   21 14 00               LD   hl,20   
4255   E5                     PUSH   hl   
4256   E5                     PUSH   hl   
4257   CD 61 0E               CALL   run   
425A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4262   CD CF 0C               CALL   flushBuffer   
4265   CD 47 0D               CALL   printStr   
4268   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4275   E1                     POP   hl   
4276   E5                     PUSH   hl   
4277   E5                     PUSH   hl   
4278   CD 61 0E               CALL   run   
427B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
428A   CD CF 0C               CALL   flushBuffer   
428D   76                     HALT      
428E                EXPECTM_2921S132:      
428E   E1                     POP   HL   
428F                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
428F   31 00 52               LD   SP,STACK   
4292   CD 8F 0D               CALL   coldInit   
4295   CD 86 50               CALL   execStr   
4298   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
42B0   CD CF 0C               CALL   flushBuffer   
42B3   E1                     POP   HL   
42B4   E5                     PUSH   HL   
42B5   11 06 00               LD   DE,6   
42B8   B7                     OR   A   
42B9   ED 52                  SBC   HL,DE   
42BB   7D                     LD   A,L   
42BC   B4                     OR   H   
42BD   CA 2F 43               JP   Z,expectM_2922S133   
42C0   CD 47 0D               CALL   printStr   
42C3   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
42E1   CD 47 0D               CALL   printStr   
42E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42F3   21 06 00               LD   hl,6   
42F6   E5                     PUSH   hl   
42F7   E5                     PUSH   hl   
42F8   CD 61 0E               CALL   run   
42FB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4303   CD CF 0C               CALL   flushBuffer   
4306   CD 47 0D               CALL   printStr   
4309   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4316   E1                     POP   hl   
4317   E5                     PUSH   hl   
4318   E5                     PUSH   hl   
4319   CD 61 0E               CALL   run   
431C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
432B   CD CF 0C               CALL   flushBuffer   
432E   76                     HALT      
432F                EXPECTM_2922S133:      
432F   E1                     POP   HL   
4330                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4330   31 00 52               LD   SP,STACK   
4333   CD 8F 0D               CALL   coldInit   
4336   CD 86 50               CALL   execStr   
4339   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4354   CD CF 0C               CALL   flushBuffer   
4357   E1                     POP   HL   
4358   E5                     PUSH   HL   
4359   11 02 00               LD   DE,2   
435C   B7                     OR   A   
435D   ED 52                  SBC   HL,DE   
435F   7D                     LD   A,L   
4360   B4                     OR   H   
4361   CA D6 43               JP   Z,expectM_2923S134   
4364   CD 47 0D               CALL   printStr   
4367   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4388   CD 47 0D               CALL   printStr   
438B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
439A   21 02 00               LD   hl,2   
439D   E5                     PUSH   hl   
439E   E5                     PUSH   hl   
439F   CD 61 0E               CALL   run   
43A2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43AA   CD CF 0C               CALL   flushBuffer   
43AD   CD 47 0D               CALL   printStr   
43B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43BD   E1                     POP   hl   
43BE   E5                     PUSH   hl   
43BF   E5                     PUSH   hl   
43C0   CD 61 0E               CALL   run   
43C3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43D2   CD CF 0C               CALL   flushBuffer   
43D5   76                     HALT      
43D6                EXPECTM_2923S134:      
43D6   E1                     POP   HL   
43D7                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
43D7   31 00 52               LD   SP,STACK   
43DA   CD 8F 0D               CALL   coldInit   
43DD   CD 86 50               CALL   execStr   
43E0   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4406   CD CF 0C               CALL   flushBuffer   
4409   E1                     POP   HL   
440A   E5                     PUSH   HL   
440B   11 0A 00               LD   DE,10   
440E   B7                     OR   A   
440F   ED 52                  SBC   HL,DE   
4411   7D                     LD   A,L   
4412   B4                     OR   H   
4413   CA 93 44               JP   Z,expectM_2924S135   
4416   CD 47 0D               CALL   printStr   
4419   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4445   CD 47 0D               CALL   printStr   
4448   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4457   21 0A 00               LD   hl,10   
445A   E5                     PUSH   hl   
445B   E5                     PUSH   hl   
445C   CD 61 0E               CALL   run   
445F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4467   CD CF 0C               CALL   flushBuffer   
446A   CD 47 0D               CALL   printStr   
446D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
447A   E1                     POP   hl   
447B   E5                     PUSH   hl   
447C   E5                     PUSH   hl   
447D   CD 61 0E               CALL   run   
4480   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
448F   CD CF 0C               CALL   flushBuffer   
4492   76                     HALT      
4493                EXPECTM_2924S135:      
4493   E1                     POP   HL   
4494                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
4494   31 00 52               LD   SP,STACK   
4497   CD 8F 0D               CALL   coldInit   
449A   CD 86 50               CALL   execStr   
449D   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
44CA   CD CF 0C               CALL   flushBuffer   
44CD   E1                     POP   HL   
44CE   E5                     PUSH   HL   
44CF   11 06 00               LD   DE,6   
44D2   B7                     OR   A   
44D3   ED 52                  SBC   HL,DE   
44D5   7D                     LD   A,L   
44D6   B4                     OR   H   
44D7   CA 5E 45               JP   Z,expectM_2925S136   
44DA   CD 47 0D               CALL   printStr   
44DD   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
4510   CD 47 0D               CALL   printStr   
4513   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4522   21 06 00               LD   hl,6   
4525   E5                     PUSH   hl   
4526   E5                     PUSH   hl   
4527   CD 61 0E               CALL   run   
452A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4532   CD CF 0C               CALL   flushBuffer   
4535   CD 47 0D               CALL   printStr   
4538   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4545   E1                     POP   hl   
4546   E5                     PUSH   hl   
4547   E5                     PUSH   hl   
4548   CD 61 0E               CALL   run   
454B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
455A   CD CF 0C               CALL   flushBuffer   
455D   76                     HALT      
455E                EXPECTM_2925S136:      
455E   E1                     POP   HL   
455F                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
455F   31 00 52               LD   SP,STACK   
4562   CD 8F 0D               CALL   coldInit   
4565   CD 86 50               CALL   execStr   
4568   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
457D   CD CF 0C               CALL   flushBuffer   
4580   E1                     POP   HL   
4581   E5                     PUSH   HL   
4582   11 03 00               LD   DE,3   
4585   B7                     OR   A   
4586   ED 52                  SBC   HL,DE   
4588   7D                     LD   A,L   
4589   B4                     OR   H   
458A   CA F9 45               JP   Z,expectM_2926S137   
458D   CD 47 0D               CALL   printStr   
4590   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
45AB   CD 47 0D               CALL   printStr   
45AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45BD   21 03 00               LD   hl,3   
45C0   E5                     PUSH   hl   
45C1   E5                     PUSH   hl   
45C2   CD 61 0E               CALL   run   
45C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45CD   CD CF 0C               CALL   flushBuffer   
45D0   CD 47 0D               CALL   printStr   
45D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45E0   E1                     POP   hl   
45E1   E5                     PUSH   hl   
45E2   E5                     PUSH   hl   
45E3   CD 61 0E               CALL   run   
45E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45F5   CD CF 0C               CALL   flushBuffer   
45F8   76                     HALT      
45F9                EXPECTM_2926S137:      
45F9   E1                     POP   HL   
45FA                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
45FA   31 00 52               LD   SP,STACK   
45FD   CD 8F 0D               CALL   coldInit   
4600   CD 86 50               CALL   execStr   
4603   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
4618   CD CF 0C               CALL   flushBuffer   
461B   E1                     POP   HL   
461C   E5                     PUSH   HL   
461D   11 01 00               LD   DE,1   
4620   B7                     OR   A   
4621   ED 52                  SBC   HL,DE   
4623   7D                     LD   A,L   
4624   B4                     OR   H   
4625   CA 94 46               JP   Z,expectM_2927S138   
4628   CD 47 0D               CALL   printStr   
462B   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
4646   CD 47 0D               CALL   printStr   
4649   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4658   21 01 00               LD   hl,1   
465B   E5                     PUSH   hl   
465C   E5                     PUSH   hl   
465D   CD 61 0E               CALL   run   
4660   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4668   CD CF 0C               CALL   flushBuffer   
466B   CD 47 0D               CALL   printStr   
466E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
467B   E1                     POP   hl   
467C   E5                     PUSH   hl   
467D   E5                     PUSH   hl   
467E   CD 61 0E               CALL   run   
4681   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4690   CD CF 0C               CALL   flushBuffer   
4693   76                     HALT      
4694                EXPECTM_2927S138:      
4694   E1                     POP   HL   
4695                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4695   31 00 52               LD   SP,STACK   
4698   CD 8F 0D               CALL   coldInit   
469B   CD 86 50               CALL   execStr   
469E   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
46AA   CD CF 0C               CALL   flushBuffer   
46AD   E1                     POP   HL   
46AE   E5                     PUSH   HL   
46AF   11 00 00               LD   DE,NUL   
46B2   B7                     OR   A   
46B3   ED 52                  SBC   HL,DE   
46B5   7D                     LD   A,L   
46B6   B4                     OR   H   
46B7   CA 1D 47               JP   Z,expectM_2928S139   
46BA   CD 47 0D               CALL   printStr   
46BD   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
46CF   CD 47 0D               CALL   printStr   
46D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46E1   21 00 00               LD   hl,NUL   
46E4   E5                     PUSH   hl   
46E5   E5                     PUSH   hl   
46E6   CD 61 0E               CALL   run   
46E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46F1   CD CF 0C               CALL   flushBuffer   
46F4   CD 47 0D               CALL   printStr   
46F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4704   E1                     POP   hl   
4705   E5                     PUSH   hl   
4706   E5                     PUSH   hl   
4707   CD 61 0E               CALL   run   
470A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4719   CD CF 0C               CALL   flushBuffer   
471C   76                     HALT      
471D                EXPECTM_2928S139:      
471D   E1                     POP   HL   
471E                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
471E   31 00 52               LD   SP,STACK   
4721   CD 8F 0D               CALL   coldInit   
4724   CD 86 50               CALL   execStr   
4727   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4733   CD CF 0C               CALL   flushBuffer   
4736   E1                     POP   HL   
4737   E5                     PUSH   HL   
4738   11 00 00               LD   DE,NUL   
473B   B7                     OR   A   
473C   ED 52                  SBC   HL,DE   
473E   7D                     LD   A,L   
473F   B4                     OR   H   
4740   CA A6 47               JP   Z,expectM_2929S140   
4743   CD 47 0D               CALL   printStr   
4746   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4758   CD 47 0D               CALL   printStr   
475B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
476A   21 00 00               LD   hl,NUL   
476D   E5                     PUSH   hl   
476E   E5                     PUSH   hl   
476F   CD 61 0E               CALL   run   
4772   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
477A   CD CF 0C               CALL   flushBuffer   
477D   CD 47 0D               CALL   printStr   
4780   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
478D   E1                     POP   hl   
478E   E5                     PUSH   hl   
478F   E5                     PUSH   hl   
4790   CD 61 0E               CALL   run   
4793   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47A2   CD CF 0C               CALL   flushBuffer   
47A5   76                     HALT      
47A6                EXPECTM_2929S140:      
47A6   E1                     POP   HL   
47A7                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
47A7   31 00 52               LD   SP,STACK   
47AA   CD 8F 0D               CALL   coldInit   
47AD   CD 86 50               CALL   execStr   
47B0   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
47BC   CD CF 0C               CALL   flushBuffer   
47BF   E1                     POP   HL   
47C0   E5                     PUSH   HL   
47C1   11 00 00               LD   DE,NUL   
47C4   B7                     OR   A   
47C5   ED 52                  SBC   HL,DE   
47C7   7D                     LD   A,L   
47C8   B4                     OR   H   
47C9   CA 2F 48               JP   Z,expectM_2930S141   
47CC   CD 47 0D               CALL   printStr   
47CF   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
47E1   CD 47 0D               CALL   printStr   
47E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47F3   21 00 00               LD   hl,NUL   
47F6   E5                     PUSH   hl   
47F7   E5                     PUSH   hl   
47F8   CD 61 0E               CALL   run   
47FB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4803   CD CF 0C               CALL   flushBuffer   
4806   CD 47 0D               CALL   printStr   
4809   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4816   E1                     POP   hl   
4817   E5                     PUSH   hl   
4818   E5                     PUSH   hl   
4819   CD 61 0E               CALL   run   
481C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
482B   CD CF 0C               CALL   flushBuffer   
482E   76                     HALT      
482F                EXPECTM_2930S141:      
482F   E1                     POP   HL   
4830                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4830   31 00 52               LD   SP,STACK   
4833   CD 8F 0D               CALL   coldInit   
4836   CD 86 50               CALL   execStr   
4839   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
4845   CD CF 0C               CALL   flushBuffer   
4848   E1                     POP   HL   
4849   E5                     PUSH   HL   
484A   11 00 00               LD   DE,NUL   
484D   B7                     OR   A   
484E   ED 52                  SBC   HL,DE   
4850   7D                     LD   A,L   
4851   B4                     OR   H   
4852   CA B8 48               JP   Z,expectM_2931S142   
4855   CD 47 0D               CALL   printStr   
4858   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
486A   CD 47 0D               CALL   printStr   
486D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
487C   21 00 00               LD   hl,NUL   
487F   E5                     PUSH   hl   
4880   E5                     PUSH   hl   
4881   CD 61 0E               CALL   run   
4884   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
488C   CD CF 0C               CALL   flushBuffer   
488F   CD 47 0D               CALL   printStr   
4892   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
489F   E1                     POP   hl   
48A0   E5                     PUSH   hl   
48A1   E5                     PUSH   hl   
48A2   CD 61 0E               CALL   run   
48A5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48B4   CD CF 0C               CALL   flushBuffer   
48B7   76                     HALT      
48B8                EXPECTM_2931S142:      
48B8   E1                     POP   HL   
48B9                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
48B9   31 00 52               LD   SP,STACK   
48BC   CD 8F 0D               CALL   coldInit   
48BF   CD 86 50               CALL   execStr   
48C2   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
48CA   CD CF 0C               CALL   flushBuffer   
48CD   E1                     POP   HL   
48CE   E5                     PUSH   HL   
48CF   11 66 54               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
48D2   B7                     OR   A   
48D3   ED 52                  SBC   HL,DE   
48D5   7D                     LD   A,L   
48D6   B4                     OR   H   
48D7   CA 39 49               JP   Z,expectM_2932S143   
48DA   CD 47 0D               CALL   printStr   
48DD   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
48EB   CD 47 0D               CALL   printStr   
48EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48FD   21 66 54               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4900   E5                     PUSH   hl   
4901   E5                     PUSH   hl   
4902   CD 61 0E               CALL   run   
4905   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
490D   CD CF 0C               CALL   flushBuffer   
4910   CD 47 0D               CALL   printStr   
4913   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4920   E1                     POP   hl   
4921   E5                     PUSH   hl   
4922   E5                     PUSH   hl   
4923   CD 61 0E               CALL   run   
4926   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4935   CD CF 0C               CALL   flushBuffer   
4938   76                     HALT      
4939                EXPECTM_2932S143:      
4939   E1                     POP   HL   
493A                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
493A   31 00 52               LD   SP,STACK   
493D   CD 8F 0D               CALL   coldInit   
4940   CD 86 50               CALL   execStr   
4943   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
494B   CD CF 0C               CALL   flushBuffer   
494E   E1                     POP   HL   
494F   E5                     PUSH   HL   
4950   11 34 54               LD   DE,VARS + ("Z"-"A"+1)*2   
4953   B7                     OR   A   
4954   ED 52                  SBC   HL,DE   
4956   7D                     LD   A,L   
4957   B4                     OR   H   
4958   CA BA 49               JP   Z,expectM_2933S144   
495B   CD 47 0D               CALL   printStr   
495E   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
496C   CD 47 0D               CALL   printStr   
496F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
497E   21 34 54               LD   hl,VARS + ("Z"-"A"+1)*2   
4981   E5                     PUSH   hl   
4982   E5                     PUSH   hl   
4983   CD 61 0E               CALL   run   
4986   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
498E   CD CF 0C               CALL   flushBuffer   
4991   CD 47 0D               CALL   printStr   
4994   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49A1   E1                     POP   hl   
49A2   E5                     PUSH   hl   
49A3   E5                     PUSH   hl   
49A4   CD 61 0E               CALL   run   
49A7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49B6   CD CF 0C               CALL   flushBuffer   
49B9   76                     HALT      
49BA                EXPECTM_2933S144:      
49BA   E1                     POP   HL   
49BB                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
49BB   31 00 52               LD   SP,STACK   
49BE   CD 8F 0D               CALL   coldInit   
49C1   CD 86 50               CALL   execStr   
49C4   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
49CC   CD CF 0C               CALL   flushBuffer   
49CF   E1                     POP   HL   
49D0   E5                     PUSH   HL   
49D1   11 32 54               LD   DE,VARS + ("Z"-"A")*2   
49D4   B7                     OR   A   
49D5   ED 52                  SBC   HL,DE   
49D7   7D                     LD   A,L   
49D8   B4                     OR   H   
49D9   CA 3B 4A               JP   Z,expectM_2934S145   
49DC   CD 47 0D               CALL   printStr   
49DF   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
49ED   CD 47 0D               CALL   printStr   
49F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49FF   21 32 54               LD   hl,VARS + ("Z"-"A")*2   
4A02   E5                     PUSH   hl   
4A03   E5                     PUSH   hl   
4A04   CD 61 0E               CALL   run   
4A07   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A0F   CD CF 0C               CALL   flushBuffer   
4A12   CD 47 0D               CALL   printStr   
4A15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A22   E1                     POP   hl   
4A23   E5                     PUSH   hl   
4A24   E5                     PUSH   hl   
4A25   CD 61 0E               CALL   run   
4A28   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A37   CD CF 0C               CALL   flushBuffer   
4A3A   76                     HALT      
4A3B                EXPECTM_2934S145:      
4A3B   E1                     POP   HL   
4A3C                          ;*Macro unroll:  test "'A' /ad", VARS
4A3C   31 00 52               LD   SP,STACK   
4A3F   CD 8F 0D               CALL   coldInit   
4A42   CD 86 50               CALL   execStr   
4A45   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4A4D   CD CF 0C               CALL   flushBuffer   
4A50   E1                     POP   HL   
4A51   E5                     PUSH   HL   
4A52   11 00 54               LD   DE,VARS   
4A55   B7                     OR   A   
4A56   ED 52                  SBC   HL,DE   
4A58   7D                     LD   A,L   
4A59   B4                     OR   H   
4A5A   CA BC 4A               JP   Z,expectM_2935S146   
4A5D   CD 47 0D               CALL   printStr   
4A60   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4A6E   CD 47 0D               CALL   printStr   
4A71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A80   21 00 54               LD   hl,VARS   
4A83   E5                     PUSH   hl   
4A84   E5                     PUSH   hl   
4A85   CD 61 0E               CALL   run   
4A88   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A90   CD CF 0C               CALL   flushBuffer   
4A93   CD 47 0D               CALL   printStr   
4A96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AA3   E1                     POP   hl   
4AA4   E5                     PUSH   hl   
4AA5   E5                     PUSH   hl   
4AA6   CD 61 0E               CALL   run   
4AA9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AB8   CD CF 0C               CALL   flushBuffer   
4ABB   76                     HALT      
4ABC                EXPECTM_2935S146:      
4ABC   E1                     POP   HL   
4ABD                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
4ABD   31 00 52               LD   SP,STACK   
4AC0   CD 8F 0D               CALL   coldInit   
4AC3   CD 86 50               CALL   execStr   
4AC6   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
4AD3   CD CF 0C               CALL   flushBuffer   
4AD6   E1                     POP   HL   
4AD7   E5                     PUSH   HL   
4AD8   11 2D 00               LD   DE,$2D   
4ADB   B7                     OR   A   
4ADC   ED 52                  SBC   HL,DE   
4ADE   7D                     LD   A,L   
4ADF   B4                     OR   H   
4AE0   CA 47 4B               JP   Z,expectM_2936S147   
4AE3   CD 47 0D               CALL   printStr   
4AE6   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
4AF9   CD 47 0D               CALL   printStr   
4AFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B0B   21 2D 00               LD   hl,$2D   
4B0E   E5                     PUSH   hl   
4B0F   E5                     PUSH   hl   
4B10   CD 61 0E               CALL   run   
4B13   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B1B   CD CF 0C               CALL   flushBuffer   
4B1E   CD 47 0D               CALL   printStr   
4B21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B2E   E1                     POP   hl   
4B2F   E5                     PUSH   hl   
4B30   E5                     PUSH   hl   
4B31   CD 61 0E               CALL   run   
4B34   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B43   CD CF 0C               CALL   flushBuffer   
4B46   76                     HALT      
4B47                EXPECTM_2936S147:      
4B47   E1                     POP   HL   
4B48                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
4B48   31 00 52               LD   SP,STACK   
4B4B   CD 8F 0D               CALL   coldInit   
4B4E   CD 86 50               CALL   execStr   
4B51   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
4B60   CD CF 0C               CALL   flushBuffer   
4B63   E1                     POP   HL   
4B64   E5                     PUSH   HL   
4B65   11 41 00               LD   DE,65   
4B68   B7                     OR   A   
4B69   ED 52                  SBC   HL,DE   
4B6B   7D                     LD   A,L   
4B6C   B4                     OR   H   
4B6D   CA D6 4B               JP   Z,expectM_2937S148   
4B70   CD 47 0D               CALL   printStr   
4B73   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
4B88   CD 47 0D               CALL   printStr   
4B8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B9A   21 41 00               LD   hl,65   
4B9D   E5                     PUSH   hl   
4B9E   E5                     PUSH   hl   
4B9F   CD 61 0E               CALL   run   
4BA2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4BAA   CD CF 0C               CALL   flushBuffer   
4BAD   CD 47 0D               CALL   printStr   
4BB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BBD   E1                     POP   hl   
4BBE   E5                     PUSH   hl   
4BBF   E5                     PUSH   hl   
4BC0   CD 61 0E               CALL   run   
4BC3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BD2   CD CF 0C               CALL   flushBuffer   
4BD5   76                     HALT      
4BD6                EXPECTM_2937S148:      
4BD6   E1                     POP   HL   
4BD7                          ;*Macro unroll:  test "123. /b/vB 1#", $32
4BD7   31 00 52               LD   SP,STACK   
4BDA   CD 8F 0D               CALL   coldInit   
4BDD   CD 86 50               CALL   execStr   
4BE0   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
4BEE   CD CF 0C               CALL   flushBuffer   
4BF1   E1                     POP   HL   
4BF2   E5                     PUSH   HL   
4BF3   11 32 00               LD   DE,$32   
4BF6   B7                     OR   A   
4BF7   ED 52                  SBC   HL,DE   
4BF9   7D                     LD   A,L   
4BFA   B4                     OR   H   
4BFB   CA 63 4C               JP   Z,expectM_2938S149   
4BFE   CD 47 0D               CALL   printStr   
4C01   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
4C15   CD 47 0D               CALL   printStr   
4C18   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C27   21 32 00               LD   hl,$32   
4C2A   E5                     PUSH   hl   
4C2B   E5                     PUSH   hl   
4C2C   CD 61 0E               CALL   run   
4C2F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C37   CD CF 0C               CALL   flushBuffer   
4C3A   CD 47 0D               CALL   printStr   
4C3D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C4A   E1                     POP   hl   
4C4B   E5                     PUSH   hl   
4C4C   E5                     PUSH   hl   
4C4D   CD 61 0E               CALL   run   
4C50   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C5F   CD CF 0C               CALL   flushBuffer   
4C62   76                     HALT      
4C63                EXPECTM_2938S149:      
4C63   E1                     POP   HL   
4C64                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4C64   31 00 52               LD   SP,STACK   
4C67   CD 8F 0D               CALL   coldInit   
4C6A   CD 86 50               CALL   execStr   
4C6D   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
4C7B   CD CF 0C               CALL   flushBuffer   
4C7E   E1                     POP   HL   
4C7F   E5                     PUSH   HL   
4C80   11 01 00               LD   DE,1   
4C83   B7                     OR   A   
4C84   ED 52                  SBC   HL,DE   
4C86   7D                     LD   A,L   
4C87   B4                     OR   H   
4C88   CA F0 4C               JP   Z,expectM_2939S150   
4C8B   CD 47 0D               CALL   printStr   
4C8E   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4CA2   CD 47 0D               CALL   printStr   
4CA5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CB4   21 01 00               LD   hl,1   
4CB7   E5                     PUSH   hl   
4CB8   E5                     PUSH   hl   
4CB9   CD 61 0E               CALL   run   
4CBC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4CC4   CD CF 0C               CALL   flushBuffer   
4CC7   CD 47 0D               CALL   printStr   
4CCA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CD7   E1                     POP   hl   
4CD8   E5                     PUSH   hl   
4CD9   E5                     PUSH   hl   
4CDA   CD 61 0E               CALL   run   
4CDD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CEC   CD CF 0C               CALL   flushBuffer   
4CEF   76                     HALT      
4CF0                EXPECTM_2939S150:      
4CF0   E1                     POP   HL   
4CF1                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4CF1   31 00 52               LD   SP,STACK   
4CF4   CD 8F 0D               CALL   coldInit   
4CF7   CD 86 50               CALL   execStr   
4CFA   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4D10   CD CF 0C               CALL   flushBuffer   
4D13   E1                     POP   HL   
4D14   E5                     PUSH   HL   
4D15   11 03 00               LD   DE,3   
4D18   B7                     OR   A   
4D19   ED 52                  SBC   HL,DE   
4D1B   7D                     LD   A,L   
4D1C   B4                     OR   H   
4D1D   CA 8D 4D               JP   Z,expectM_2940S151   
4D20   CD 47 0D               CALL   printStr   
4D23   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4D3F   CD 47 0D               CALL   printStr   
4D42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D51   21 03 00               LD   hl,3   
4D54   E5                     PUSH   hl   
4D55   E5                     PUSH   hl   
4D56   CD 61 0E               CALL   run   
4D59   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D61   CD CF 0C               CALL   flushBuffer   
4D64   CD 47 0D               CALL   printStr   
4D67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D74   E1                     POP   hl   
4D75   E5                     PUSH   hl   
4D76   E5                     PUSH   hl   
4D77   CD 61 0E               CALL   run   
4D7A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D89   CD CF 0C               CALL   flushBuffer   
4D8C   76                     HALT      
4D8D                EXPECTM_2940S151:      
4D8D   E1                     POP   HL   
4D8E                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4D8E   31 00 52               LD   SP,STACK   
4D91   CD 8F 0D               CALL   coldInit   
4D94   CD 86 50               CALL   execStr   
4D97   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4DB0   CD CF 0C               CALL   flushBuffer   
4DB3   E1                     POP   HL   
4DB4   E5                     PUSH   HL   
4DB5   11 02 00               LD   DE,2   
4DB8   B7                     OR   A   
4DB9   ED 52                  SBC   HL,DE   
4DBB   7D                     LD   A,L   
4DBC   B4                     OR   H   
4DBD   CA 30 4E               JP   Z,expectM_2941S152   
4DC0   CD 47 0D               CALL   printStr   
4DC3   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4DE2   CD 47 0D               CALL   printStr   
4DE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DF4   21 02 00               LD   hl,2   
4DF7   E5                     PUSH   hl   
4DF8   E5                     PUSH   hl   
4DF9   CD 61 0E               CALL   run   
4DFC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E04   CD CF 0C               CALL   flushBuffer   
4E07   CD 47 0D               CALL   printStr   
4E0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E17   E1                     POP   hl   
4E18   E5                     PUSH   hl   
4E19   E5                     PUSH   hl   
4E1A   CD 61 0E               CALL   run   
4E1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E2C   CD CF 0C               CALL   flushBuffer   
4E2F   76                     HALT      
4E30                EXPECTM_2941S152:      
4E30   E1                     POP   HL   
4E31                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4E31   31 00 52               LD   SP,STACK   
4E34   CD 8F 0D               CALL   coldInit   
4E37   CD 86 50               CALL   execStr   
4E3A   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4E5F   CD CF 0C               CALL   flushBuffer   
4E62   E1                     POP   HL   
4E63   E5                     PUSH   HL   
4E64   11 01 00               LD   DE,1   
4E67   B7                     OR   A   
4E68   ED 52                  SBC   HL,DE   
4E6A   7D                     LD   A,L   
4E6B   B4                     OR   H   
4E6C   CA EB 4E               JP   Z,expectM_2942S153   
4E6F   CD 47 0D               CALL   printStr   
4E72   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4E9D   CD 47 0D               CALL   printStr   
4EA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EAF   21 01 00               LD   hl,1   
4EB2   E5                     PUSH   hl   
4EB3   E5                     PUSH   hl   
4EB4   CD 61 0E               CALL   run   
4EB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4EBF   CD CF 0C               CALL   flushBuffer   
4EC2   CD 47 0D               CALL   printStr   
4EC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ED2   E1                     POP   hl   
4ED3   E5                     PUSH   hl   
4ED4   E5                     PUSH   hl   
4ED5   CD 61 0E               CALL   run   
4ED8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4EE7   CD CF 0C               CALL   flushBuffer   
4EEA   76                     HALT      
4EEB                EXPECTM_2942S153:      
4EEB   E1                     POP   HL   
4EEC                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4EEC   31 00 52               LD   SP,STACK   
4EEF   CD 8F 0D               CALL   coldInit   
4EF2   CD 86 50               CALL   execStr   
4EF5   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
4F1A   CD CF 0C               CALL   flushBuffer   
4F1D   E1                     POP   HL   
4F1E   E5                     PUSH   HL   
4F1F   11 01 00               LD   DE,1   
4F22   B7                     OR   A   
4F23   ED 52                  SBC   HL,DE   
4F25   7D                     LD   A,L   
4F26   B4                     OR   H   
4F27   CA A6 4F               JP   Z,expectM_2943S154   
4F2A   CD 47 0D               CALL   printStr   
4F2D   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
4F58   CD 47 0D               CALL   printStr   
4F5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F6A   21 01 00               LD   hl,1   
4F6D   E5                     PUSH   hl   
4F6E   E5                     PUSH   hl   
4F6F   CD 61 0E               CALL   run   
4F72   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4F7A   CD CF 0C               CALL   flushBuffer   
4F7D   CD 47 0D               CALL   printStr   
4F80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F8D   E1                     POP   hl   
4F8E   E5                     PUSH   hl   
4F8F   E5                     PUSH   hl   
4F90   CD 61 0E               CALL   run   
4F93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4FA2   CD CF 0C               CALL   flushBuffer   
4FA5   76                     HALT      
4FA6                EXPECTM_2943S154:      
4FA6   E1                     POP   HL   
4FA7                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
4FA7   31 00 52               LD   SP,STACK   
4FAA   CD 8F 0D               CALL   coldInit   
4FAD   CD 86 50               CALL   execStr   
4FB0   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
4FE2   CD CF 0C               CALL   flushBuffer   
4FE5   E1                     POP   HL   
4FE6   E5                     PUSH   HL   
4FE7   11 02 00               LD   DE,2   
4FEA   B7                     OR   A   
4FEB   ED 52                  SBC   HL,DE   
4FED   7D                     LD   A,L   
4FEE   B4                     OR   H   
4FEF   CA 7B 50               JP   Z,expectM_2944S155   
4FF2   CD 47 0D               CALL   printStr   
4FF5   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
502D   CD 47 0D               CALL   printStr   
5030   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
503F   21 02 00               LD   hl,2   
5042   E5                     PUSH   hl   
5043   E5                     PUSH   hl   
5044   CD 61 0E               CALL   run   
5047   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
504F   CD CF 0C               CALL   flushBuffer   
5052   CD 47 0D               CALL   printStr   
5055   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5062   E1                     POP   hl   
5063   E5                     PUSH   hl   
5064   E5                     PUSH   hl   
5065   CD 61 0E               CALL   run   
5068   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5077   CD CF 0C               CALL   flushBuffer   
507A   76                     HALT      
507B                EXPECTM_2944S155:      
507B   E1                     POP   HL   
507C                             ; 
507C   CD 47 0D               CALL   printStr   
507F   44 6F 6E 65 21 00      .CSTR   "Done!"   
5085   76                     HALT      
5086                             ; executes a null teminated string (null executes exit_)
5086                             ; the string should be immedaitely following the call
5086                EXECSTR:      ; create a root stack frame
5086   C1                     POP   bc   ; bc = code*
5087   0B                     DEC   bc   ; dec to prepare for next routine
5088   11 00 00               LD   de,0   
508B   D5                     PUSH   de   ; push fake IP
508C   D5                     PUSH   de   ; push null arg_list*
508D   D5                     PUSH   de   ; push null first_arg*
508E   D5                     PUSH   de   ; push fake BP
508F   DD E9                  JP   (ix)   
5091                STKSIZE:   EQU   $100   ; Stack size
5091                TIBSIZE:   EQU   $100   ; 256 bytes
5091                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5091                          ALIGN   $100   
5100                          DS   STKSIZE   
5200                STACK:       
5200                          ALIGN   $100   
5200                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5300                          ALIGN   $100   
5300                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5400                          ALIGN   $100   
5400                VARS:        
5400                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
54D0                RESTARTS:      
54D0                RST08:    DS   2   
54D2                RST10:    DS   2   
54D4                RST18:    DS   2   
54D6                RST20:    DS   2   
54D8                RST28:    DS   2   
54DA                RST30:    DS   2   ; 
54DC                BAUD:     DS   2   ; 
54DE                INTVEC:   DS   2   ; 
54E0                NMIVEC:   DS   2   ; 
54E2                GETCVEC:   DS   2   ; 
54E4                PUTCVEC:   DS   2   ; 
54E6                SYSVARS:      
54E6                             ; initialised sys variables (preserved)
54E6                VDATAWIDTH:   DS   2   ; 
54E8                VNUMBASE:   DS   2   ; 
54EA                VTIBPTR:   DS   2   ; 
54EC                VBUFPTR:   DS   2   ; 
54EE                VNEXT:    DS   2   ; 
54F0                VHEAPPTR:   DS   2   ; 
54F2                VRECUR:   DS   2   ; 
54F4                             ; uninitialised sys variables (preserved)
54F4                VPOINTER:   DS   2   ; 
54F6                VREMAIN:   DS   2   ; 
54F8                VSAVEDIP:   DS   2   ; 
54FA                VSAVEDSP:   DS   2   ; 
54FC                VSAVEDNEXT:   DS   2   ; 
54FE                VSAVEDBP:   DS   2   ; 
5500                             ; uninitialised sys variables (unpreserved)
5500                VTEMP1:   DS   2   ; 
5502                VTEMP2:   DS   2   ; 
5504                VLASTDEF:   DS   2   ; 
5506                TBPTR:    DS   2   ; reserved for tests
5508                TITLEBUF:   DS   20   
551C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0CCD DEFINED AT LINE 1900 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C1 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
XOR:                03CA DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
XOR1:               03CB DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
INVERT:             03D5 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
PERCENT:            03DA DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03DA DEFINED AT LINE 363 IN MAIN.asm
ARG0:               03F6 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
ARG0A:              03FF DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ARG1:               0404 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
ARG1A:              040C DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
LBRACK:             040F DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         040F DEFINED AT LINE 405 IN MAIN.asm
RBRACK:             042B DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           042B DEFINED AT LINE 420 IN MAIN.asm
ARRAYEND1:          0447 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ARRAYEND2:          0457 DEFINED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
ARRAYEND3:          045C DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
HASH:               047B DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         047B DEFINED AT LINE 475 IN MAIN.asm
ARRAYINDEX0:        0483 DEFINED AT LINE 481 IN MAIN.asm
ARRAYINDEX1:        0484 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
ARRAYINDEX2:        0490 DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
ARRAYSIZE:          0493 DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
COLON:              049B DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 512 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 530 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 545 IN MAIN.asm
ASSIGN:             04D1 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04D3 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
ASSIGNX:            04D4 DEFINED AT LINE 563 IN MAIN.asm
ASSIGN1:            04E0 DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
ABSOLUTE:           04E2 DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
ADDROF:             04EF DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
ADDROF1:            0503 DEFINED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
ADDROF2:            050E DEFINED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
LBRACE:             0510 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         0510 DEFINED AT LINE 617 IN MAIN.asm
BLOCKSTART1:        0514 DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
BLOCKSTART2:        0540 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKSTART3:        0543 DEFINED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
BLOCKSTART4:        054B DEFINED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
BLOCKSTART5:        054E DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
BLOCKSTART6:        0576 DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
RBRACE:             0579 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0579 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
BLOCKEND1:          05AB DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
BLOCKEND2:          05B7 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BLOCKEND3:          05C9 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
BLOCKEND4:          05DD DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
BREAK:              05E6 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
BREAK1:             05ED DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
QUIT:               0600 DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
QUIT1:              0607 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
TICK:               060A DEFINED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               060A DEFINED AT LINE 771 IN MAIN.asm
CHAR1:              060D DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
CHAR2:              0619 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
CHAR3:              061C DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
SLASH:              061F DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            061F DEFINED AT LINE 790 IN MAIN.asm
COMMAND_A:          065E DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
COMMAND_B:          066D DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
COMMAND_F:          0679 DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
COMMAND_I:          0697 DEFINED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
COMMAND_L:          06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
COMMAND_M:          06AC DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
COMMAND_P:          06B5 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
COMMAND_Q:          06BE DEFINED AT LINE 904 IN MAIN.asm
COMMAND_R:          06C7 DEFINED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
COMMAND_V:          06D6 DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
WORDS:              06EB DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
NUMBERS:            06EB DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
BYTES:              06F0 DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
CHARS:              06F0 DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
BYTES1:             06F3 DEFINED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
COMMENT:            06F8 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
SEMICOLON:          0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         0701 DEFINED AT LINE 959 IN MAIN.asm
CREATEFUNC0:        071C DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
CREATEFUNC1:        0734 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
CREATEFUNC2:        0747 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
CREATEFUNC2A:       0766 DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
CREATEFUNC3:        0775 DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
CREATEFUNC4:        0780 DEFINED AT LINE 1052 IN MAIN.asm
CREATEFUNC5:        0781 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
COMMA:              079D DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            079D DEFINED AT LINE 1078 IN MAIN.asm
DISCARD1:           07AA DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
DIV:                07AC DEFINED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
DECIMAL:            07BD DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
DECIMAL1:           07C0 DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
HEXADECIMAL:        07C5 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
DOT:                07CB DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
DOTARRAY:           07DD DEFINED AT LINE 32
                    > USED AT LINE 1113 IN MAIN.asm
DOTARRAYM_1635S1123: 07EB DEFINED AT LINE 39
                    > USED AT LINE 35
DOTNUMBER:          0825 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
BUFFERDEC:          082C DEFINED AT LINE 1137 IN MAIN.asm
BUFFERDEC0:         0846 DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1141 IN MAIN.asm
BUFFERDEC1:         0856 DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
BUFFERDEC2:         0876 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
BUFFERDEC3:         0878 DEFINED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
BUFFERDEC4:         0888 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
BUFFERDEC5:         0889 DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
BUFFERHEX:          0892 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
BUFFERHEX1:         08B3 DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
BUFFERHEX2:         08BC DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
DOTSTRING:          08CA DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
DOTSTRING0:         08D1 DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
DOTSTRING1:         08D7 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
DOTCHAR:            08E4 DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
DOTXCHARS:          08E9 DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
DOTXCHARS0:         08EA DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
DOTXCHARS1:         08F3 DEFINED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
DOTXCHARS2:         08FB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
DIVIDE:             0905 DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
DIVIDE1:            090A DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
DIVIDE2:            0917 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
DIVIDE3:            0918 DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
EQUALS:             091E DEFINED AT LINE 1319 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          0926 DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         092F DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           0934 DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0939 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
TRUE1:              093C DEFINED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
NULL1:              0942 DEFINED AT LINE 1352 IN MAIN.asm
FALSE1:             0942 DEFINED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
ERROR1:             0948 DEFINED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
FLUSH:              094F DEFINED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
FOREACH:            0954 DEFINED AT LINE 32
                    > USED AT LINE 856 IN MAIN.asm
FOREACHM_1865S1371: 0962 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            09A1 DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
FUNCSRCM_1880S1387: 09AD DEFINED AT LINE 39
                    > USED AT LINE 35
FZ:                 09DC DEFINED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
CARET:              09E9 DEFINED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 09E9 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09EA DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
GO2:                09F0 DEFINED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
GOBLOCK:            09FB DEFINED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
GOBLOCK2:           0A20 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
GOBLOCK3:           0A2A DEFINED AT LINE 1448 IN MAIN.asm
GOFUNC:             0A2E DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
GOFUNC1:            0A47 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
GOFUNC2:            0A4D DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
GOFUNC3:            0A58 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
GOFUNC4:            0A70 DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
GOFUNC5:            0A73 DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
GOFUNC6:            0A76 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
GOFUNC7:            0A79 DEFINED AT LINE 1511 IN MAIN.asm
GOFUNC8:            0A7D DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
DOLLAR:             0A88 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0A88 DEFINED AT LINE 1526 IN MAIN.asm
HEXNUM1:            0A8B DEFINED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
HEXNUM2:            0A93 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
UPCASE:             0AA5 DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0AAA DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0AAF DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
QUESTION:           0ABC DEFINED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0ABC DEFINED AT LINE 1569 IN MAIN.asm
IFTE:               0AC8 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
IFTE1:              0AC9 DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
INPUT:              0AD5 DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
KEY:                0AE0 DEFINED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
LITERAL:            0AE9 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
OUTPUT:             0AF2 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
MAP:                0AFB DEFINED AT LINE 32
                    > USED AT LINE 893 IN MAIN.asm
MAPM_2119S1638:     0B08 DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B3F DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0B3F DEFINED AT LINE 1652 IN MAIN.asm
MUL2:               0B41 DEFINED AT LINE 1655 IN MAIN.asm
MUL3:               0B49 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
NUM:                0B5B DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0B64 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
NUM1:               0B65 DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
NUM2:               0B7D DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
NUM3:               0B88 DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
RANGESRC:           0B8B DEFINED AT LINE 32
                    > USED AT LINE 918 IN MAIN.asm
RANGESRCM_2191S1713: 0B9A DEFINED AT LINE 39
                    > USED AT LINE 35
RPAREN:             0C0D DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0C15 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0C1D DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
SHIFTLEFT2:         0C1E DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
SHIFTRIGHT:         0C25 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0C2D DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
SHIFTRIGHT2:        0C31 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
DQUOTE:             0C38 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0C38 DEFINED AT LINE 1775 IN MAIN.asm
STRING1:            0C41 DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
STRING2:            0C44 DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
STRING3:            0C4D DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
MINUS:              0C60 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0C6C DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
SUB1:               0C76 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
PRINTCHARS:         0C7F DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
PRINTCHARS1:        0C86 DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
PRINTCHARS2:        0C8C DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
RECUR:              0C91 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
REMAIN:             0C97 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
CONSTBUFSTART:      0C9D DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
CONSTHEAPSTART:     0CA2 DEFINED AT LINE 1865 IN MAIN.asm
CONSTTIBSTART:      0CA7 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
VARBUFPTR:          0CAC DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
VARHEAPPTR:         0CB5 DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
VARTIBPTR:          0CBE DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
VARIABLE:           0CC7 DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
CONSTANT:           0CCA DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
FILTER:             0CCD DEFINED AT LINE 1899 IN MAIN.asm
FLUSHBUFFER:        0CCF DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0CE6 DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
JUMPTABLE0:         0CE8 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
JUMPTABLE1:         0CF5 DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
JUMPTABLE2:         0CF6 DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
PRTSTR0:            0CFC DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
PRTSTR:             0D00 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
NESTING:            0D05 DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
NESTING0:           0D0F DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
NESTING1A:          0D16 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
NESTING1:           0D19 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
NESTING2:           0D28 DEFINED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
NESTING3:           0D2A DEFINED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
NESTING4:           0D35 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
PROMPT:             0D37 DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
CRLF:               0D40 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
PRINTSTR:           0D47 DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 159
TITLESTR:           0D4E DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
INIT:               0D62 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
INIT1:              0D6A DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
WARMINIT:           0D72 DEFINED AT LINE 2041 IN MAIN.asm
COLDBOOT0:          0D85 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
COLDINIT:           0D8F DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0DA0 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
COLDSTART:          0DAD DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
START:              0DB6 DEFINED AT LINE 2076 IN MAIN.asm
START1:             0DBC DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
INTERPRET:          0DC2 DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
INTERPRET2:         0DD1 DEFINED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
INTERPRET3:         0DD9 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
INTERPRET4:         0DE4 DEFINED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
INTERPRET5:         0DE9 DEFINED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
INTERPRET5A:        0E07 DEFINED AT LINE 2153 IN MAIN.asm
INTERPRET6:         0E09 DEFINED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
INTERPRET7:         0E17 DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
INTERPRET8:         0E2A DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
NEXT:               0E45 DEFINED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
NEXT1:              0E56 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
EXIT:               0E5D DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
RUN:                0E61 DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0E65 DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
BACKSPACE_:         0E78 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
EDIT_:              0E88 DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
REEDIT_:            0EA0 DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
PRINTSTACK_:        0EA3 DEFINED AT LINE 2245 IN MAIN.asm
F1:                 0EAD DEFINED AT LINE 32
                    > USED AT LINE 862 IN MAIN.asm
F1M_2809S12:        0EB8 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0EB9 DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
F2M_2811S15:        0EC4 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0EC5 DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
F3M_2813S18:        0ED0 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0ED1 DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
F4M_2815S21:        0EDC DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0F00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2821S29:    0FDE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2826S37:    105F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2827S38:    10D6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2828S39:    114B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2829S40:    11C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2830S41:    1235 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2831S42:    12AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2832S43:    1321 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2833S44:    139A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2834S45:    1411 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2835S46:    1488 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2836S47:    1501 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2837S48:    157C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2838S49:    15F5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2839S50:    166E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2840S51:    16ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2841S52:    176C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2842S53:    17E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2843S54:    186A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2844S55:    18EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2845S56:    1972 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2846S57:    19EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2847S58:    1A74 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2848S59:    1AF5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2849S60:    1B72 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2850S61:    1BEF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2851S62:    1C74 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2852S63:    1CF1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2853S64:    1D6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2854S65:    1DED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2855S66:    1E7C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2856S67:    1EF9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2857S68:    1F7E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S69:    1FFB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S70:    2086 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S71:    2111 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S72:    219C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S73:    2227 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S74:    22AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S75:    2329 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S76:    23A8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S77:    2427 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S78:    24A4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S79:    2521 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S80:    259E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S81:    261B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S82:    2698 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S83:    2715 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S84:    2792 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S85:    280F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S86:    288E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S87:    290D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S88:    298C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S89:    2A0D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S90:    2A8E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S91:    2B09 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S92:    2B84 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S93:    2C05 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S94:    2C8C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S95:    2D13 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S96:    2D9E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S97:    2E33 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S98:    2EC8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S99:    2F43 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S100:   2FC0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S101:   303F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S102:   30C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S103:   313F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S104:   31BE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S105:   323F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S106:   32C6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S107:   3351 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S108:   33D8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S109:   3469 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S110:   34FC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S111:   3595 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S112:   3632 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S113:   36C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S114:   3756 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S115:   37ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S116:   3886 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S117:   391D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S118:   39C2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S119:   3A55 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S120:   3AF6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S121:   3B99 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S122:   3C3E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S123:   3CED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S124:   3D9C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S125:   3E29 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S126:   3EBE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S127:   3F4B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S128:   3FE4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S129:   407D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S130:   4128 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S131:   41DB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S132:   428E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S133:   432F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S134:   43D6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S135:   4493 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S136:   455E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S137:   45F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S138:   4694 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S139:   471D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S140:   47A6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S141:   482F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S142:   48B8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S143:   4939 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S144:   49BA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S145:   4A3B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S146:   4ABC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S147:   4B47 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S148:   4BD6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S149:   4C63 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S150:   4CF0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S151:   4D8D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S152:   4E30 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S153:   4EEB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S154:   4FA6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S155:   507B DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            5086 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5200 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5200 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
BUF:                5300 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
VARS:               5400 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           54D0 DEFINED AT LINE 18 IN ram.asm
RST08:              54D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              54D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              54D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              54D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              54D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              54DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               54DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             54DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             54E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            54E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            54E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            54E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2056 IN MAIN.asm
VDATAWIDTH:         54E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
VNUMBASE:           54E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
VTIBPTR:            54EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
VBUFPTR:            54EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
VNEXT:              54EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2068 IN MAIN.asm
VHEAPPTR:           54F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
VRECUR:             54F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
VPOINTER:           54F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
VREMAIN:            54F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
VSAVEDIP:           54F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
VSAVEDSP:           54FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
VSAVEDNEXT:         54FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
VSAVEDBP:           54FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
VTEMP1:             5500 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
VTEMP2:             5502 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
VLASTDEF:           5504 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5506 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5508 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
HEAP:               551C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
