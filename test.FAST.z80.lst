0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 .cstr code1
0000                 call flushBuffer
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4D               LD   (RST08),HL   
0094   22 D2 4D               LD   (RST10),HL   
0097   22 D4 4D               LD   (RST18),HL   
009A   22 D6 4D               LD   (RST20),HL   
009D   22 D8 4D               LD   (RST28),HL   
00A0   22 DA 4D               LD   (RST30),HL   
00A3   22 DE 4D               LD   (INTVEC),HL   
00A6   22 E0 4D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0D               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQUOTE:   EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                TMAGIC:   EQU   $AA   ; magic number
00C6                TRESERV:   EQU   $A0   ; reserved
00C6                TNUMBER:   EQU   $A1   ; number
00C6                TSTRING:   EQU   $A2   ; string
00C6                TPOINTER:   EQU   $A3   ; pointer
00C6                TARRAY:   EQU   $A4   ; array
00C6                TBLOCK:   EQU   $A5   ; block
00C6                TLAMBDA:   EQU   $A6   ; lambda
00C6                TARGLST:   EQU   $A7   ; arglist
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4B                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4C                  DW   BUF   ; vBUFPtr pointer into BUF
0188   45 0C                  DW   next   ; nNext
018A   1E 4E                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dblquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 6F 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A8 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 CE 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 37 05               JP   rbrace   
031E                TICK_:       
031E   C3 93 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 93 07               JP   semicolon   
0324                DOT_:        
0324   C3 03 06               JP   dot   
0327                COLON_:      
0327   C3 98 04               JP   colon   
032A                UPCASE_:      
032A   C3 0F 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 14 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 26 07               JP   question   
0333                STAR_:       
0333   C3 3F 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 5B 07               JP   num   
033E                HASH_:       
033E   C3 F2 06               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 4F 06               JP   caret   
0347                COMMA_:      
0347   C3 AA 05               JP   comma   
034A                DBLQUOTE_:      
034A   C3 D2 07               JP   dblquote   
034D                MINUS_:      
034D   C3 FA 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 87 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 2E 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA BF 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA AF 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 36 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 3B 06               JP   lessthan   
037C                SLASH_:      
037C   C3 B9 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 8B 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 89 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 4D            LD   de,(vPointer)   
039A   21 F2 4D               LD   hl,vPointer   
039D   C3 79 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; $a .. $z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                DOLLAR:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 4D               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   3E A4                  LD   a,TARRAY   ; write type tag
0431   77                     LD   (hl),a   
0432   23                     INC   hl   
0433   3E AA                  LD   a,TMAGIC   ; write magic byte
0435   77                     LD   (hl),a   
0436   23                     INC   hl   
0437   18 15                  JR   arrayEnd3   
0439                ARRAYEND1:      
0439   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043C   77                     LD   (hl),a   ; write lsb of array item
043D   23                     INC   hl   ; move to msb of array item
043E   3A E6 4D               LD   a,(vDataWidth)   ; vDataWidth=1?
0441   3D                     DEC   a   
0442   28 05                  JR   z,arrayEnd2   
0444   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0447   77                     LD   (hl),a   ; write msb of array item
0448   23                     INC   hl   ; move to next word in array
0449                ARRAYEND2:      
0449   FD 2B                  DEC   iy   ; move to next word on stack
044B   FD 2B                  DEC   iy   
044D   0B                     DEC   bc   ; dec items count
044E                ARRAYEND3:      
044E   79                     LD   a,c   ; if not zero loop
044F   B0                     OR   b   
0450   20 E7                  JR   nz,arrayEnd1   
0452   EB                     EX   de,hl   ; de = end of array, hl = BP
0453   F9                     LD   sp,hl   ; sp = BP
0454   E1                     POP   hl   ; de = end of array, hl = old BP
0455   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0456   FD 62                  LD   iyh,d   
0458   FD 6B                  LD   iyl,e   
045A   D1                     POP   de   ; pop arg_list (discard)
045B   D1                     POP   de   ; pop first_arg* (discard)
045C   D1                     POP   de   ; pop IP (discard)
045D   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = array[-4]
0461   13                     INC   de   ; de = array[0]
0462   13                     INC   de   
0463   13                     INC   de   
0464   13                     INC   de   
0465   D5                     PUSH   de   ; return array[0]
0466   22 F0 4D               LD   (vHeapPtr),hl   ; move heap* to end of array
0469   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
046D   DD E9                  JP   (ix)   
046F                             ; index of an array, based on vDataWidth
046F                             ; array num -- value    ; also sets vPointer to address
046F                ARRINDEX:      
046F   E1                     POP   hl   ; hl = index
0470   D1                     POP   de   ; de = array
0471   3A E6 4D               LD   a,(vDataWidth)   ; a = data width
0474   3D                     DEC   a   
0475   28 01                  JR   z,arrIndex1   
0477                ARRINDEX0:      
0477   29                     ADD   hl,hl   ; if data width = 2 then double
0478                ARRINDEX1:      
0478   19                     ADD   hl,de   ; add addr
0479   22 F2 4D               LD   (vPointer),hl   ; store address in setter
047C   16 00                  LD   d,0   
047E   5E                     LD   e,(hl)   
047F   B7                     OR   a   ; check data width again
0480   28 02                  JR   z,arrIndex2   
0482   23                     INC   hl   
0483   56                     LD   d,(hl)   
0484                ARRINDEX2:      
0484   D5                     PUSH   de   
0485   DD E9                  JP   (ix)   
0487                             ; value _oldValue --            ; uses address in vPointer
0487                ASSIGN:      
0487   E1                     POP   hl   ; discard last accessed value
0488   E1                     POP   hl   ; hl = new value
0489                ASSIGN0:      
0489   EB                     EX   de,hl   ; de = new value
048A                ASSIGNX:      
048A   2A F2 4D               LD   hl,(vPointer)   
048D   73                     LD   (hl),e   
048E   3A E6 4D               LD   a,(vDataWidth)   
0491   3D                     DEC   a   ; is it byte?
0492   28 02                  JR   z,assign1   
0494   23                     INC   hl   
0495   72                     LD   (hl),d   
0496                ASSIGN1:      
0496   DD E9                  JP   (ix)   
0498                             ; arg_list - parses input (ab:c)
0498                             ; names after the : represent uninitialised locals
0498                             ; return values are the state of the stack after the block ends
0498                             ; format: numLocals totNumArgs argChars...
0498                COLON:       
0498                ARGLIST:      
0498   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049B   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
049E   E5                     PUSH   hl   ; save start of arg_list
049F   23                     INC   hl   ; skip length fields to start of string
04A0   23                     INC   hl   
04A1   03                     INC   bc   ; point to next char
04A2                ARGLIST1:      
04A2   0A                     LD   a,(bc)   
04A3   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A5   20 03                  JR   nz,arglist1a   
04A7   14                     INC   d   ; non zero value local count acts as flag
04A8   18 10                  JR   arglist3   
04AA                ARGLIST1A:      
04AA   FE 61                  CP   "a"   ; < "a" terminates arg_list
04AC   38 0F                  JR   c,arglist4   
04AE   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B0   30 0B                  JR   nc,arglist4   
04B2                ARGLIST2:      
04B2   77                     LD   (hl),a   
04B3   23                     INC   hl   
04B4   1C                     INC   e   ; increase arg count
04B5   AF                     XOR   a   
04B6   B2                     OR   d   
04B7   28 01                  JR   z,arglist3   
04B9   14                     INC   d   ; if d > 0 increase local count
04BA                ARGLIST3:      
04BA   03                     INC   bc   ; point to next char
04BB   18 E5                  JR   arglist1   
04BD                ARGLIST4:      
04BD   0B                     DEC   bc   
04BE   AF                     XOR   a   
04BF   B2                     OR   d   
04C0   28 01                  JR   z,arglist5   
04C2   15                     DEC   d   ; remove initial inc
04C3                ARGLIST5:      
04C3   23                     INC   hl   
04C4   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C7   E1                     POP   hl   ; hl = start of arg_list
04C8   E5                     PUSH   hl   ; return start of arg_list
04C9   72                     LD   (hl),d   ; write number of locals at start - 1
04CA   23                     INC   hl   
04CB   73                     LD   (hl),e   ; write number of args + locals at start - 2
04CC   DD E9                  JP   (ix)   
04CE                LBRACE:      
04CE                BLOCKSTART:      
04CE   C5                     PUSH   bc   ; return pointer to first { of block
04CF   03                     INC   bc   
04D0   16 01                  LD   d,1   ; nesting: count first parenthesis
04D2                BLOCKSTART1:      ; Skip to end of definition
04D2   0A                     LD   a,(bc)   ; Get the next character
04D3   03                     INC   bc   ; Point to next character
04D4   FE 21                  CP   " " + 1   ; ignore whitespace
04D6   38 FA                  JR   c,blockStart1   
04D8   FE 29                  CP   ")"   
04DA   28 2D                  JR   z,blockStart4   
04DC   FE 7D                  CP   "}"   
04DE   28 29                  JR   z,blockStart4   
04E0   FE 5D                  CP   "]"   
04E2   28 25                  JR   z,blockStart4   
04E4   FE 28                  CP   "("   
04E6   28 16                  JR   z,blockStart2   
04E8   FE 7B                  CP   "{"   
04EA   28 12                  JR   z,blockStart2   
04EC   FE 5B                  CP   "["   
04EE   28 0E                  JR   z,blockStart2   
04F0   FE 27                  CP   "'"   
04F2   28 0D                  JR   z,blockStart3   
04F4   FE 60                  CP   "`"   
04F6   28 09                  JR   z,blockStart3   
04F8   FE 22                  CP   DQUOTE   
04FA   28 05                  JR   z,blockStart3   
04FC   18 D4                  JR   blockStart1   
04FE                BLOCKSTART2:      
04FE   14                     INC   d   
04FF   18 D1                  JR   blockStart1   
0501                BLOCKSTART3:      
0501   3E 80                  LD   a,$80   
0503   AA                     XOR   d   
0504   57                     LD   d,a   
0505   20 CB                  JR   nz,blockStart1   
0507   18 03                  JR   blockStart5   
0509                BLOCKSTART4:      
0509   15                     DEC   d   
050A   20 C6                  JR   nz,blockStart1   ; get the next element
050C                BLOCKSTART5:      
050C   60 69                  LD   hl,bc   ; hl = IP
050E   11 1E 4E               LD   de,HEAP   ; is IP pointing to object in heap
0511   B7                     OR   a   ; IP - HEAP
0512   ED 52                  SBC   hl,de   
0514   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0516   28 1C                  JR   z,blockStart6   
0518   60 69                  LD   hl,bc   ; hl = IP
051A   D1                     POP   de   ; de = block*
051B   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
051F   B7                     OR   a   ; bc = size
0520   ED 52                  SBC   hl,de   
0522   44 4D                  LD   bc,hl   
0524   EB                     EX   de,hl   ; hl = block* de = heap*
0525   ED 5B F0 4D            LD   de,(vHeapPtr)   
0529   D5                     PUSH   de   ; return hblock*
052A   ED B0                  LDIR      ; copy size bytes from block* to hblock*
052C   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += size
0530   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
0534                BLOCKSTART6:      
0534   0B                     DEC   bc   ; balanced, exit
0535   DD E9                  JP   (ix)   
0537                RBRACE:      
0537                BLOCKEND:      
0537   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053A   FD 56 01               LD   d,(iy+1)   
053D   ED 53 00 4E            LD   (vTemp1),de   
0541   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0544   FD 56 07               LD   d,(iy+7)   
0547   ED 53 02 4E            LD   (vTemp2),de   
054B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054E   FD 56 03               LD   d,(iy+3)   
0551   EB                     EX   de,hl   
0552   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0555   FD 56 01               LD   d,(iy+1)   
0558   13                     INC   de   ; for carry flag <=
0559   B7                     OR   a   
055A   ED 52                  SBC   hl,de   
055C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0560   FD 5D                  LD   e,iyl   
0562   21 08 00               LD   hl,8   
0565   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0566   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0567   18 0C                  JR   blockEnd2   
0569                BLOCKEND1:      ; same scope
0569   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056C   FD 56 03               LD   d,(iy+3)   
056F   EB                     EX   de,hl   
0570   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0572   FD 5D                  LD   e,iyl   
0574   EB                     EX   de,hl   
0575                BLOCKEND2:      
0575   44 4D                  LD   bc,hl   ; bc = hl = BP
0577   B7                     OR   a   ; hl = BP - SP = count
0578   ED 72                  SBC   hl,sp   
057A   7D                     LD   a,l   
057B   B4                     OR   h   
057C   28 09                  JR   z,blockEnd3   
057E   C5                     PUSH   bc   ; bc = count, hl = BP
057F   44 4D                  LD   bc,hl   
0581   E1                     POP   hl   
0582   2B                     DEC   hl   ; hl = BP-1
0583   1B                     DEC   de   ; de = args*-1
0584   ED B8                  LDDR      
0586   13                     INC   de   
0587                BLOCKEND3:      
0587   EB                     EX   de,hl   ; sp = de = new tos*
0588   F9                     LD   sp,hl   
0589   ED 4B 02 4E            LD   bc,(vTemp2)   
058D   FD 2A 00 4E            LD   iy,(vTemp1)   
0591   DD E9                  JP   (ix)   
0593                TICK:        
0593                CHAR:        
0593   21 00 00               LD   hl,0   ; if "" is empty or null
0596                CHAR1:       
0596   03                     INC   bc   ; point to next char
0597   0A                     LD   a,(bc)   
0598   FE 27                  CP   "'"   ; ' is the terminator
059A   28 09                  JR   z,char3   
059C   FE 5C                  CP   $5c   ; \ is the escape
059E   20 02                  JR   nz,char2   
05A0   03                     INC   bc   
05A1   0A                     LD   a,(bc)   
05A2                CHAR2:       
05A2   6F                     LD   l,a   
05A3   18 F1                  JR   char1   
05A5                CHAR3:       
05A5   E5                     PUSH   hl   
05A6   DD E9                  JP   (ix)   
05A8                BACKSLASH:      
05A8   DD E9                  JP   (ix)   
05AA                             ; , discard stack item
05AA                             ; x y -- x
05AA                COMMA:       
05AA                DISCARD:      
05AA   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF   B7                     OR   a   
05B0   ED 72                  SBC   hl,sp   
05B2   CB 7C                  BIT   7,h   
05B4   20 01                  JR   nz,discard1   
05B6   E1                     POP   hl   
05B7                DISCARD1:      
05B7   DD E9                  JP   (ix)   
05B9                SLASH:       
05B9                COMMAND:      
05B9   CD E1 0A               CALL   jumpTable   
05BC   2F                     DB   "/"   
05BD   20 08                  DW   comment   
05BF   61                     DB   "a"   
05C0   29 08                  DW   command_a   
05C2   62                     DB   "b"   
05C3   63 08                  DW   command_b   
05C5   63                     DB   "c"   
05C6   7F 0A                  DW   chars   
05C8   64                     DB   "d"   
05C9   87 0A                  DW   decimal   
05CB   66                     DB   "f"   
05CC   49 06                  DW   false1   
05CE   68                     DB   "h"   
05CF   8F 0A                  DW   hexadecimal   
05D1   69                     DB   "i"   
05D2   AC 09                  DW   command_i   
05D4   6B                     DB   "k"   
05D5   A0 0A                  DW   key   
05D7   6E                     DB   "n"   
05D8   B2 0A                  DW   numbers   
05DA   6F                     DB   "o"   
05DB   A9 0A                  DW   output   
05DD   70                     DB   "p"   
05DE   B8 09                  DW   command_p   
05E0   72                     DB   "r"   
05E1   21 0A                  DW   command_r   
05E3   73                     DB   "s"   
05E4   30 0A                  DW   size   
05E6   74                     DB   "t"   
05E7   43 06                  DW   true1   
05E9   76                     DB   "v"   
05EA   3A 0A                  DW   command_v   
05EC   78                     DB   "x"   
05ED   B4 03                  DW   xor   
05EF   00                     DB   NUL   
05F0   F2 05                  DW   div   
05F2                DIV:         
05F2   D1                     POP   de   
05F3   E1                     POP   hl   
05F4   C5                     PUSH   bc   ; preserve the IP
05F5   44 4D                  LD   bc,hl   
05F7   CD 15 06               CALL   divide   
05FA   EB                     EX   de,hl   
05FB   ED 53 F4 4D            LD   (vRemain),de   
05FF   C1                     POP   bc   
0600   C3 93 03               JP   add3   
0603                DOT:         
0603   CD E1 0A               CALL   jumpTable   
0606   61                     DB   "a"   
0607   7E 08                  DW   bufferArray   
0609   63                     DB   "c"   
060A   8B 09                  DW   bufferChar   
060C   73                     DB   "s"   
060D   71 09                  DW   bufferString   
060F   78                     DB   "x"   
0610   90 09                  DW   bufferXChars   
0612   00                     DB   NUL   
0613   B2 08                  DW   bufferNumber   
0615                             ; division subroutine.
0615                             ; bc: divisor, de: dividend, hl: remainder
0615                DIVIDE:      
0615   21 00 00               LD   hl,0   ; zero the remainder
0618   3E 10                  LD   a,16   ; loop counter
061A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061A   CB 21                  SLA   c   
061C   CB 10                  RL   b   
061E   ED 6A                  ADC   hl,hl   
0620   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0622   38 03                  JR   c,divide2   
0624   0C                     INC   c   
0625   18 01                  JR   divide3   
0627                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0627   19                     ADD   hl,de   
0628                DIVIDE3:      
0628   3D                     DEC   a   
0629   20 EF                  JR   nz,divide1   
062B   50 59                  LD   de,bc   ; result from bc to de
062D   C9                     RET      
062E                             ; hl = value1, de = value2
062E                             ; hl = result
062E                EQUALS:      
062E   B7                     OR   a   ; reset the carry flag
062F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0631   28 10                  JR   z,true1   
0633   C3 49 06               JP   false1   
0636                             ; hl = value1 de = value2
0636                             ; hl = result
0636                LESSTHANEQ:      
0636   B7                     OR   a   
0637   ED 52                  SBC   hl,de   
0639   18 05                  JR   lessthan1   
063B                             ; hl = value1 de = value2
063B                             ; hl = result
063B                LESSTHAN:      
063B   B7                     OR   a   
063C   ED 52                  SBC   hl,de   
063E   28 09                  JR   z,false1   
0640                LESSTHAN1:      
0640   FA 49 06               JP   m,false1   
0643                TRUE1:       
0643   21 FF FF               LD   hl,TRUE   
0646   E5                     PUSH   hl   
0647   DD E9                  JP   (ix)   
0649                NULL1:       
0649                FALSE1:      
0649   21 00 00               LD   hl,FALSE   
064C   E5                     PUSH   hl   
064D   DD E9                  JP   (ix)   
064F                             ; execute a block of code which ends with }
064F                             ; creates a root scope if BP == stack
064F                             ; else uses outer scope
064F                CARET:       
064F                GO:          
064F   D1                     POP   de   ; de = block*
0650                GO1:         
0650   7B                     LD   a,e   ; if block* == null, exit
0651   B2                     OR   d   
0652   20 02                  JR   nz,go2   
0654   DD E9                  JP   (ix)   
0656                GO2:         
0656   1A                     LD   a,(de)   
0657   FE 7B                  CP   "{"   
0659   28 06                  JR   z,goBlock1   
065B   FE 28                  CP   "("   
065D   C2 94 06               JP   nz,goLambda   
0660                             ; inc de                      ; de is the address to jump back to
0660   D5                     PUSH   de   ; push de just before stack frame
0661                GOBLOCK:      
0661                GOBLOCK1:      
0661   ED 53 00 4E            LD   (vTemp1),de   ; save de
0665   21 00 4B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0668   FD 54                  LD   d,iyh   
066A   FD 5D                  LD   e,iyl   
066C   B7                     OR   a   ; if stack* == BP then this is the root_scope
066D   ED 52                  SBC   hl,de   
066F   ED 5B 00 4E            LD   de,(vTemp1)   ; restore de
0673   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0674   B4                     OR   h   
0675   3E 00                  LD   a,0   
0677   28 6E                  JR   z,goLambda8   
0679   C5                     PUSH   bc   ; push IP
067A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
067D   FD 46 05               LD   b,(iy+5)   
0680   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0683   FD 66 03               LD   h,(iy+3)   
0686                GOBLOCK2:      
0686   C5                     PUSH   bc   ; arg_list*
0687   E5                     PUSH   hl   ; first_arg*
0688   FD E5                  PUSH   iy   ; push BP
068A   FD 21 00 00            LD   iy,0   ; BP = SP
068E   FD 39                  ADD   iy,sp   
0690   42 4B                  LD   bc,de   ; bc = de = block*-1
0692   DD E9                  JP   (ix)   
0694                GOLAMBDA:      ; execute lambda
0694   EB                     EX   de,hl   ; hl = lambda*
0695   5E                     LD   e,(hl)   ; de = partial_array*
0696   23                     INC   hl   
0697   56                     LD   d,(hl)   
0698   23                     INC   hl   
0699   7B                     LD   a,e   ; if partial_array* == null skip
069A   B2                     OR   d   
069B   28 25                  JR   z,goLambda3   
069D   ED 43 00 4E            LD   (vTemp1),bc   
06A1   22 02 4E               LD   (vTemp2),hl   ; save bc,hl
06A4   EB                     EX   de,hl   ; hl = partial_array*
06A5   2B                     DEC   hl   ; skip type byte
06A6   2B                     DEC   hl   ; skip magic byte
06A7   2B                     DEC   hl   ; bc = count
06A8   46                     LD   b,(hl)   
06A9   2B                     DEC   hl   
06AA   4E                     LD   c,(hl)   
06AB   23                     INC   hl   ; hl = array data*
06AC   23                     INC   hl   
06AD   23                     INC   hl   
06AE   23                     INC   hl   
06AF   18 06                  JR   goLambda2   ; push each item on stack
06B1                GOLAMBDA1:      
06B1   5E                     LD   e,(hl)   ; de = partial item
06B2   23                     INC   hl   
06B3   56                     LD   d,(hl)   
06B4   23                     INC   hl   
06B5   D5                     PUSH   de   ; push on stack
06B6   0B                     DEC   bc   
06B7                GOLAMBDA2:      
06B7   79                     LD   a,c   ; if count != 0 then loop
06B8   B0                     OR   b   
06B9   20 F6                  JR   nz,goLambda1   
06BB   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore bc
06BF   2A 02 4E               LD   hl,(vTemp2)   ; restore hl
06C2                GOLAMBDA3:      
06C2   5E                     LD   e,(hl)   ; de = block*
06C3   23                     INC   hl   
06C4   56                     LD   d,(hl)   
06C5   23                     INC   hl   
06C6   ED 53 00 4E            LD   (vTemp1),de   ; save block*
06CA   5E                     LD   e,(hl)   ; de = arg_list*
06CB   23                     INC   hl   
06CC   56                     LD   d,(hl)   
06CD   23                     INC   hl   
06CE   EB                     EX   de,hl   ; hl = arg_list*
06CF   ED 5B 00 4E            LD   de,(vTemp1)   ; restore de = block*
06D3   7D                     LD   a,l   ; if arg_list* == null a = 0
06D4   B4                     OR   h   
06D5   20 03                  JR   nz,goLambda4   
06D7   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06D8   18 0D                  JR   goLambda8   
06DA                GOLAMBDA4:      ; allocate locals
06DA   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06DB   18 03                  JR   goLambda6   
06DD                GOLAMBDA5:      ; loop
06DD   3B                     DEC   sp   
06DE   3B                     DEC   sp   
06DF   3D                     DEC   a   
06E0                GOLAMBDA6:      
06E0   B7                     OR   a   
06E1   20 FA                  JR   nz,goLambda5   ; end loop
06E3                GOLAMBDA7:      
06E3   23                     INC   hl   ; a = num_args* x 2
06E4   7E                     LD   a,(hl)   
06E5   2B                     DEC   hl   
06E6   87                     ADD   a,a   ; a *= 2
06E7                GOLAMBDA8:      
06E7   C5                     PUSH   bc   ; push IP
06E8   44 4D                  LD   bc,hl   
06EA   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06ED   85                     ADD   a,l   
06EE   6F                     LD   l,a   
06EF   39                     ADD   hl,sp   
06F0   18 94                  JR   goBlock2   
06F2                HASH:        
06F2                HEXNUM:      
06F2   21 00 00               LD   hl,0   ; Clear hl to accept the number
06F5                HEXNUM1:      
06F5   03                     INC   bc   
06F6   0A                     LD   a,(bc)   ; Get the character which is a numeral
06F7   CB 77                  BIT   6,a   ; is it uppercase alpha?
06F9   28 02                  JR   z,hexnum2   ; no a decimal
06FB   D6 07                  SUB   7   ; sub 7  to make $a - $F
06FD                HEXNUM2:      
06FD   D6 30                  SUB   $30   ; form decimal digit
06FF   DA 7D 07               JP   c,num2   
0702   FE 10                  CP   $0F+1   
0704   D2 7D 07               JP   nc,num2   
0707   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0708   29                     ADD   hl,hl   ; 4X
0709   29                     ADD   hl,hl   ; 8X
070A   29                     ADD   hl,hl   ; 16X
070B   85                     ADD   a,l   ; add into bottom of hl
070C   6F                     LD   l,a   
070D   18 E6                  JR   hexnum1   
070F                UPCASE:      
070F   0A                     LD   a,(bc)   ; a = identifier char
0710   D6 41                  SUB   "A"   ; "A" = 0
0712   18 05                  JR   ident1   
0714                LOWCASE:      
0714   0A                     LD   a,(bc)   
0715   D6 61                  SUB   "a"   
0717   C6 1A                  ADD   a,26   
0719                IDENT1:      
0719   87                     ADD   a,a   ; l = a * 2
071A   6F                     LD   l,a   
071B   26 4D                  LD   h,msb(vars)   
071D   22 F2 4D               LD   (vPointer),hl   ; store address in setter
0720   5E                     LD   e,(hl)   
0721   23                     INC   hl   
0722   56                     LD   d,(hl)   
0723   D5                     PUSH   de   
0724   DD E9                  JP   (ix)   
0726                             ; if
0726                             ; condition then -- value
0726                QUESTION:      
0726                IF:          
0726   03                     INC   bc   
0727   0A                     LD   a,(bc)   
0728   FE 3F                  CP   "?"   
072A   28 06                  JR   z,ifte   
072C   0B                     DEC   bc   
072D   11 00 00               LD   de,NUL   ; NUL pointer for else
0730   18 01                  JR   ifte1   
0732                             ; ifte
0732                             ; condition then else -- value
0732                IFTE:        
0732   D1                     POP   de   ; de = else
0733                IFTE1:       
0733   E1                     POP   hl   ; hl = then
0734   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0735   7C                     LD   a,h   
0736   B5                     OR   l   
0737   E1                     POP   hl   ; hl = then
0738   CA 50 06               JP   z,go1   ; if z de = else
073B   EB                     EX   de,hl   ; condition = false, de = then
073C   C3 50 06               JP   go1   
073F                STAR:        
073F                MUL:         
073F   D1                     POP   de   ; get first value
0740   E1                     POP   hl   
0741                MUL2:        
0741   C5                     PUSH   bc   ; Preserve the IP
0742   44 4D                  LD   bc,hl   ; bc = 2nd value
0744   21 00 00               LD   hl,0   
0747   3E 10                  LD   a,16   
0749                MUL3:        
0749   29                     ADD   hl,hl   
074A   CB 13                  RL   e   
074C   CB 12                  RL   d   
074E   30 04                  JR   nc,$+6   
0750   09                     ADD   hl,bc   
0751   30 01                  JR   nc,$+3   
0753   13                     INC   de   
0754   3D                     DEC   a   
0755   20 F2                  JR   nz,mul3   
0757   C1                     POP   bc   ; Restore the IP
0758   C3 93 03               JP   add3   
075B                NUM:         
075B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
075E   0A                     LD   a,(bc)   ; Get numeral or -
075F   FE 2D                  CP   "-"   
0761   20 01                  JR   nz,num0   
0763   03                     INC   bc   ; move to next char, no flags affected
0764                NUM0:        
0764   08                     EX   af,af'   ; save zero flag = 0 for later
0765                NUM1:        
0765   0A                     LD   a,(bc)   ; read digit
0766   D6 30                  SUB   "0"   ; less than 0?
0768   38 13                  JR   c,num2   ; not a digit, exit loop
076A   FE 0A                  CP   10   ; greater that 9?
076C   30 0F                  JR   nc,num2   ; not a digit, exit loop
076E   03                     INC   bc   ; inc IP
076F   54 5D                  LD   de,hl   ; multiply hl * 10
0771   29                     ADD   hl,hl   
0772   29                     ADD   hl,hl   
0773   19                     ADD   hl,de   
0774   29                     ADD   hl,hl   
0775   85                     ADD   a,l   ; add digit in a to hl
0776   6F                     LD   l,a   
0777   3E 00                  LD   a,0   
0779   8C                     ADC   a,h   
077A   67                     LD   h,a   
077B   18 E8                  JR   num1   
077D                NUM2:        
077D   0B                     DEC   bc   
077E   08                     EX   af,af'   ; restore zero flag
077F   20 07                  JR   nz,num3   
0781   EB                     EX   de,hl   ; negate the value of hl
0782   21 00 00               LD   hl,0   
0785   B7                     OR   a   ; jump to sub2
0786   ED 52                  SBC   hl,de   
0788                NUM3:        
0788   E5                     PUSH   hl   ; Put the number on the stack
0789   DD E9                  JP   (ix)   ; and process the next character
078B                RPAREN:      
078B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
078E   FD 46 09               LD   b,(iy+9)   
0791   DD E9                  JP   (ix)   
0793                             ; arg_list* block* -- ptr
0793                SEMICOLON:      
0793   D1                     POP   de   ; de = block* hl = heap*
0794   2A F0 4D               LD   hl,(vHeapPtr)   
0797   AF                     XOR   a   
0798   77                     LD   (hl),a   ; compile null partial_array*
0799   23                     INC   hl   
079A   77                     LD   (hl),a   
079B   23                     INC   hl   
079C   73                     LD   (hl),e   ; compile block*
079D   23                     INC   hl   
079E   72                     LD   (hl),d   
079F   23                     INC   hl   
07A0   D1                     POP   de   ; de = block*
07A1   73                     LD   (hl),e   ; compile arg_list*
07A2   23                     INC   hl   
07A3   72                     LD   (hl),d   
07A4   23                     INC   hl   
07A5   ED 5B F0 4D            LD   de,(vHeapPtr)   ; return lambda*
07A9   D5                     PUSH   de   
07AA   22 F0 4D               LD   (vHeapPtr),hl   ; heap* += 4
07AD   DD E9                  JP   (ix)   
07AF                             ; shiftLeft
07AF                             ; value count -- value2          shift left count places
07AF                SHIFTLEFT:      
07AF   50 59                  LD   de,bc   ; save IP
07B1   C1                     POP   bc   ; bc = count
07B2   41                     LD   b,c   ; b = loop counter
07B3   E1                     POP   hl   
07B4   04                     INC   b   ; test for counter=0 case
07B5   18 01                  JR   shiftLeft2   
07B7                SHIFTLEFT1:      
07B7   29                     ADD   hl,hl   ; left shift hl
07B8                SHIFTLEFT2:      
07B8   10 FD                  DJNZ   shiftLeft1   
07BA   E5                     PUSH   hl   
07BB   42 4B                  LD   bc,de   ; restore IP
07BD   DD E9                  JP   (ix)   
07BF                             ; shiftRight
07BF                             ; value count -- value2          shift left count places
07BF                SHIFTRIGHT:      
07BF   50 59                  LD   de,bc   ; save IP
07C1   C1                     POP   bc   ; bc = count
07C2   41                     LD   b,c   ; b = loop counter
07C3   E1                     POP   hl   
07C4   04                     INC   b   ; test for counter=0 case
07C5   18 04                  JR   shiftRight2   
07C7                SHIFTRIGHT1:      
07C7   CB 3C                  SRL   h   ; right shift hl
07C9   CB 1D                  RR   l   
07CB                SHIFTRIGHT2:      
07CB   10 FA                  DJNZ   shiftRight1   
07CD   E5                     PUSH   hl   
07CE   42 4B                  LD   bc,de   ; restore IP
07D0   DD E9                  JP   (ix)   
07D2                             ; string
07D2                             ; -- ptr                        ; points to start of string chars,
07D2                             ; length is stored at start - 2 bytes
07D2                DBLQUOTE:      
07D2                STRING:      
07D2   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
07D5   23                     INC   hl   ; skip length field to start
07D6   23                     INC   hl   
07D7   E5                     PUSH   hl   ; save start of string
07D8   03                     INC   bc   ; point to next char
07D9   18 03                  JR   string2   
07DB                STRING1:      
07DB   77                     LD   (hl),a   
07DC   23                     INC   hl   ; increase count
07DD   03                     INC   bc   ; point to next char
07DE                STRING2:      
07DE   0A                     LD   a,(bc)   
07DF   FE 22                  CP   DQUOTE   ; " is the string terminator
07E1   28 04                  JR   z,string3   
07E3   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07E5   20 F4                  JR   nz,string1   
07E7                STRING3:      
07E7   AF                     XOR   a   ; write NUL to terminate string
07E8   77                     LD   (hl),a   ; hl = end of string
07E9   23                     INC   hl   
07EA   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07ED   2B                     DEC   hl   ; hl = end of string without terminator
07EE   D1                     POP   de   ; de = start of string
07EF   D5                     PUSH   de   ; return start of string
07F0   B7                     OR   a   ; hl = length bytes, de = start of string
07F1   ED 52                  SBC   hl,de   
07F3   EB                     EX   de,hl   
07F4   2B                     DEC   hl   ; write length bytes to length field at start - 2
07F5   72                     LD   (hl),d   
07F6   2B                     DEC   hl   
07F7   73                     LD   (hl),e   
07F8   DD E9                  JP   (ix)   
07FA                MINUS:       ; negative sign or subtract
07FA   03                     INC   bc   ; check if sign of a number
07FB   0A                     LD   a,(bc)   
07FC   0B                     DEC   bc   
07FD   FE 30                  CP   "0"   
07FF   38 05                  JR   c,sub   
0801   FE 3A                  CP   "9"+1   
0803   DA 3B 03               JP   c,num_   
0806                SUB:         ; Subtract the value 2nd on stack from top of stack
0806   03                     INC   bc   
0807   FE 2D                  CP   "-"   
0809   20 05                  JR   nz,sub1   
080B   E1                     POP   hl   
080C   2B                     DEC   hl   
080D   C3 89 04               JP   assign0   
0810                SUB1:        
0810   0B                     DEC   bc   
0811   D1                     POP   de   
0812   E1                     POP   hl   
0813   B7                     OR   a   
0814   ED 52                  SBC   hl,de   
0816   C3 93 03               JP   add3   
0819                ERROR1:      
0819   21 01 00               LD   hl,1   ; error 1: unknown command
081C   E5                     PUSH   hl   
081D   C3 65 0C               JP   error   
0820                COMMENT:      
0820   03                     INC   bc   ; point to next char
0821   0A                     LD   a,(bc)   
0822   FE 20                  CP   " "   ; terminate on any char less than SP
0824   30 FA                  JR   nc,comment   
0826   0B                     DEC   bc   
0827   DD E9                  JP   (ix)   
0829                COMMAND_A:      
0829   CD E1 0A               CALL   jumpTable   
082C   62                     DB   "b"   
082D   35 08                  DW   absolute   
082F   64                     DB   "d"   
0830   42 08                  DW   addrOf   
0832   00                     DB   NUL   
0833   19 08                  DW   error1   
0835                             ; /ab absolute
0835                             ; num -- num
0835                ABSOLUTE:      
0835   E1                     POP   hl   
0836   CB 7C                  BIT   7,h   
0838   C8                     RET   z   
0839   AF                     XOR   a   
083A   95                     SUB   l   
083B   6F                     LD   l,a   
083C   9F                     SBC   a,a   
083D   94                     SUB   h   
083E   67                     LD   h,a   
083F   E5                     PUSH   hl   
0840   DD E9                  JP   (ix)   
0842                             ; /ad addrOf
0842                             ; char -- addr
0842                ADDROF:      
0842   E1                     POP   hl   ; a = char
0843   7D                     LD   a,l   
0844   FE 7B                  CP   "z"+1   ; if a > z then exit
0846   30 19                  JR   nc,addrOf2   
0848   D6 41                  SUB   "A"   ; a - 65
084A   38 15                  JR   c,addrOf2   ; if < A then exit
084C   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
084E   38 06                  JR   c,addrOf1   
0850   D6 06                  SUB   "a"-("Z"+1)   
0852   FE 1A                  CP   "Z"-"A"+1   
0854   38 0B                  JR   c,addrOf2   ; if < a then exit
0856                ADDROF1:      
0856   87                     ADD   a,a   ; double a
0857   21 00 4D               LD   hl,VARS   ; hl = VARS + a
085A   85                     ADD   a,l   
085B   6F                     LD   l,a   
085C   3E 00                  LD   a,0   
085E   8C                     ADC   a,h   
085F   67                     LD   h,a   
0860   E5                     PUSH   hl   
0861                ADDROF2:      
0861   DD E9                  JP   (ix)   
0863                COMMAND_B:      
0863   CD E1 0A               CALL   jumpTable   
0866   61                     DB   "a"   
0867   7E 08                  DW   bufferArray   
0869   63                     DB   "c"   
086A   8B 09                  DW   bufferChar   
086C   6E                     DB   "n"   
086D   B2 08                  DW   bufferNumber   
086F   72                     DB   "r"   
0870   57 09                  DW   break   
0872   73                     DB   "s"   
0873   71 09                  DW   bufferString   
0875   78                     DB   "x"   
0876   90 09                  DW   bufferXChars   
0878   79                     DB   "y"   
0879   A8 0B                  DW   coldStart   
087B   00                     DB   NUL   
087C   19 08                  DW   error1   
087E                             ; /ba buffer array
087E                             ; array* --
087E                BUFFERARRAY:      
087E   CD 4F 06               CALL   go   
0881   00 00                  DW   NUL   ; NUL closure
0883   87 08                  DW   $+4   
0885   C5 0A                  DW   args1A2L   
0887   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08B2                             ; /bd buffer decimal
08B2                             ; value --
08B2                BUFFERNUMBER:      
08B2   3A E8 4D               LD   a,(vNumBase)   
08B5   FE 10                  CP   16   
08B7   28 66                  JR   z,bufferHex   ; else falls through
08B9                             ; /bd buffer decimal
08B9                             ; value --
08B9                BUFFERDEC:      
08B9   ED 5B EC 4D            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08BD   D9                     EXX      
08BE   E1                     POP   hl   ; hl = value
08BF   CD D3 08               CALL   bufferDec0   
08C2   D9                     EXX      ; de = buffer*' bc = IP
08C3   3E 20                  LD   a," "   ; append space to buffer
08C5   12                     LD   (de),a   
08C6   1C                     INC   e   ; buffer*++, wraparound
08C7   CC CA 0A               CALL   z,flushBuffer   
08CA   2A EC 4D               LD   hl,(vBufPtr)   ; hl = buffer*
08CD   ED 53 EC 4D            LD   (vBufPtr),de   ; update buffer* with buffer*'
08D1   DD E9                  JP   (ix)   
08D3                             ; hl = value
08D3                             ; de' = buffer*
08D3                             ; a, bc, de, hl destroyed
08D3                BUFFERDEC0:      
08D3   CB 7C                  BIT   7,h   
08D5   28 0C                  JR   z,bufferDec1   
08D7   D9                     EXX      
08D8   3E 2D                  LD   a,"-"   
08DA   12                     LD   (de),a   
08DB   13                     INC   de   
08DC   D9                     EXX      
08DD   AF                     XOR   a   
08DE   95                     SUB   l   
08DF   6F                     LD   l,a   
08E0   9F                     SBC   a,a   
08E1   94                     SUB   h   
08E2   67                     LD   h,a   
08E3                BUFFERDEC1:      
08E3   0E 00                  LD   c,0   ; leading zeros flag = false
08E5   11 F0 D8               LD   de,-10000   
08E8   CD 03 09               CALL   bufferDec2   
08EB   11 18 FC               LD   de,-1000   
08EE   CD 03 09               CALL   bufferDec2   
08F1   11 9C FF               LD   de,-100   
08F4   CD 03 09               CALL   bufferDec2   
08F7   1E F6                  LD   e,-10   
08F9   CD 03 09               CALL   bufferDec2   
08FC   0C                     INC   c   ; flag = true for at least digit
08FD   1E FF                  LD   e,-1   
08FF   CD 03 09               CALL   bufferDec2   
0902   C9                     RET      
0903                BUFFERDEC2:      
0903   06 2F                  LD   b,"0"-1   
0905                BUFFERDEC3:      
0905   04                     INC   b   
0906   19                     ADD   hl,de   
0907   38 FC                  JR   c,bufferDec3   
0909   ED 52                  SBC   hl,de   
090B   3E 30                  LD   a,"0"   
090D   B8                     CP   b   
090E   20 05                  JR   nz,bufferDec4   
0910   AF                     XOR   a   
0911   B1                     OR   c   
0912   C8                     RET   z   
0913   18 01                  JR   bufferDec5   
0915                BUFFERDEC4:      
0915   0C                     INC   c   
0916                BUFFERDEC5:      
0916   78                     LD   a,b   
0917   D9                     EXX      
0918   12                     LD   (de),a   
0919   1C                     INC   e   
091A   CC CA 0A               CALL   z,flushBuffer   
091D   D9                     EXX      
091E   C9                     RET      
091F                             ; /bh buffer hex
091F                             ; value --
091F                BUFFERHEX:      
091F   E1                     POP   hl   ; hl = value
0920   ED 5B EC 4D            LD   de,(vBufPtr)   
0924   3E 23                  LD   a,"#"   ; # prefix
0926   12                     LD   (de),a   
0927   1C                     INC   e   ; buffer*++, wraparound
0928   CC CA 0A               CALL   z,flushBuffer   
092B   7C                     LD   a,h   
092C   CD 40 09               CALL   bufferHex1   
092F   7D                     LD   a,l   
0930   CD 40 09               CALL   bufferHex1   
0933   3E 20                  LD   a," "   ; append space to buffer
0935   12                     LD   (de),a   
0936   1C                     INC   e   ; buffer*++, wraparound
0937   CC CA 0A               CALL   z,flushBuffer   
093A   ED 53 EC 4D            LD   (vBufPtr),de   
093E   DD E9                  JP   (ix)   
0940                BUFFERHEX1:      
0940   F5                     PUSH   af   
0941   1F                     RRA      
0942   1F                     RRA      
0943   1F                     RRA      
0944   1F                     RRA      
0945   CD 49 09               CALL   bufferHex2   
0948   F1                     POP   af   
0949                BUFFERHEX2:      
0949   E6 0F                  AND   0x0F   
094B   C6 90                  ADD   a,0x90   
094D   27                     DAA      
094E   CE 40                  ADC   a,0x40   
0950   27                     DAA      
0951   12                     LD   (de),a   
0952   1C                     INC   e   ; buffer*++, wraparound
0953   CC CA 0A               CALL   z,flushBuffer   
0956   C9                     RET      
0957                             ; /br break from loop
0957                             ; --
0957                BREAK:       
0957   E1                     POP   hl   
0958   7D                     LD   a,l   
0959   B4                     OR   h   
095A   28 02                  JR   z,break1   
095C   DD E9                  JP   (ix)   
095E                BREAK1:      
095E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0960   FD 54                  LD   d,iyh   
0962   21 08 00               LD   hl,8   
0965   19                     ADD   hl,de   
0966   23                     INC   hl   
0967   23                     INC   hl   
0968   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
096B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
096E   C3 37 05               JP   blockEnd   
0971                             ; /bs buffered string
0971                             ; string* --
0971                BUFFERSTRING:      
0971   E1                     POP   hl   ; hl = string*
0972   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0976   18 06                  JR   bufferString1   
0978                BUFFERSTRING0:      
0978   12                     LD   (de),a   ; a -> buffer*
0979   1C                     INC   e   ; buffer*++, wraparound
097A   CC CA 0A               CALL   z,flushBuffer   
097D   23                     INC   hl   
097E                BUFFERSTRING1:      
097E   7E                     LD   a,(hl)   ; a <- string*
097F   B7                     OR   a   ; if NUL exit loop
0980   20 F6                  JR   nz,bufferString0   
0982   2A EC 4D               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0985   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
0989   DD E9                  JP   (ix)   
098B                             ; /bc buffer char
098B                             ; char --
098B                BUFFERCHAR:      
098B   21 01 00               LD   hl,1   
098E   18 01                  JR   bufferXChars0   
0990                             ; /bx buffered x chars
0990                             ; char length --
0990                BUFFERXCHARS:      
0990   E1                     POP   hl   ; hl = length
0991                BUFFERXCHARS0:      
0991   D1                     POP   de   ; a' = char
0992   7B                     LD   a,e   
0993   08                     EX   af,af'   
0994   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0998   18 08                  JR   bufferXChars2   
099A                BUFFERXCHARS1:      
099A   08                     EX   af,af'   
099B   12                     LD   (de),a   
099C   08                     EX   af,af'   
099D   1C                     INC   e   ; buffer*++, wraparound
099E   CC CA 0A               CALL   z,flushBuffer   
09A1   2B                     DEC   hl   
09A2                BUFFERXCHARS2:      
09A2   7D                     LD   a,l   
09A3   B4                     OR   h   
09A4   20 F4                  JR   nz,bufferXChars1   
09A6   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*'
09AA   DD E9                  JP   (ix)   
09AC                COMMAND_I:      
09AC   CD E1 0A               CALL   jumpTable   
09AF   6E                     DB   "n"   
09B0   95 0A                  DW   input   
09B2   76                     DB   "v"   
09B3   BF 03                  DW   invert   
09B5   00                     DB   NUL   
09B6   19 08                  DW   error1   
09B8                COMMAND_P:      
09B8   CD E1 0A               CALL   jumpTable   
09BB   61                     DB   "a"   
09BC   CA 09                  DW   partial   
09BE   62                     DB   "b"   
09BF   EA 09                  DW   printBuffer   
09C1   63                     DB   "c"   
09C2   0D 0A                  DW   printChars   
09C4   6B                     DB   "k"   
09C5   1F 0A                  DW   printStack   
09C7   00                     DB   NUL   
09C8   19 08                  DW   error1   
09CA                             ; partial
09CA                             ; array* lambda* -- lambda1*
09CA                PARTIAL:      
09CA   E1                     POP   hl   ; h1 = lambda*
09CB   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09CF   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
09D3   01 06 00               LD   bc,6   ; bc = count
09D6   ED B0                  LDIR      ; clone lambda
09D8   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
09DC   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09DF   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += 6
09E3   D1                     POP   de   ; de = array*
09E4   E5                     PUSH   hl   ; return partial_array*
09E5   73                     LD   (hl),e   ; compile array*
09E6   23                     INC   hl   
09E7   72                     LD   (hl),d   
09E8   DD E9                  JP   (ix)   
09EA                             ; /pb printBuffer
09EA                             ; --
09EA                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09EA                PRINTBUFFER:      
09EA   CD 4F 06               CALL   go   
09ED   00 00                  DW   NUL   ; NUL closure
09EF   F3 09                  DW   $+4   
09F1   C2 0A                  DW   args1A0L   
09F3   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A0D                             ; printChars
0A0D                             ; char* len --
0A0D                PRINTCHARS:      
0A0D   E1                     POP   hl   ; hl = count
0A0E   D1                     POP   de   ; de = char*
0A0F   CD 1A 0A               CALL   printChars2   
0A12   DD E9                  JP   (ix)   
0A14                PRINTCHARS1:      
0A14   1A                     LD   a,(de)   ; print char at char*
0A15   CD 85 00               CALL   putchar   
0A18   13                     INC   de   ; char*++
0A19   2B                     DEC   hl   ; count--
0A1A                PRINTCHARS2:      
0A1A   7D                     LD   a,l   ; count == 0?
0A1B   B4                     OR   h   
0A1C   C8                     RET   z   
0A1D   18 F5                  JR   printChars1   ; if not loop
0A1F                             ; /pk print stack
0A1F                             ; --
0A1F                PRINTSTACK:      
0A1F                             ;     ld (vTemp1),bc
0A1F                             ;     call printStr
0A1F                             ;     .cstr "=> "
0A1F                             ;     ld hl,STACK
0A1F                             ;     sbc hl,sp
0A1F                             ;     srl h
0A1F                             ;     rr l
0A1F                             ;     ld bc,hl
0A1F                             ;     ld hl,STACK
0A1F                             ;     jr printStack2
0A1F                             ; printStack1:
0A1F                             ;     dec bc
0A1F                             ;     dec hl
0A1F                             ;     ld d,(hl)
0A1F                             ;     dec hl
0A1F                             ;     ld e,(hl)
0A1F                             ;     ex de,hl
0A1F                             ;     call prthex
0A1F                             ;     ex de,hl
0A1F                             ;     ld a," "
0A1F                             ;     call putchar
0A1F                             ; printStack2:
0A1F                             ;     ld a,c
0A1F                             ;     or b
0A1F                             ;     jr nz,printStack1
0A1F                             ;     call prompt
0A1F                             ;     ld bc,(vTemp1)
0A1F   DD E9                  JP   (ix)   
0A21                COMMAND_R:      
0A21   CD E1 0A               CALL   jumpTable   
0A24   65                     DB   "e"   
0A25   2A 0A                  DW   remain   
0A27   00                     DB   NUL   
0A28   19 08                  DW   error1   
0A2A                REMAIN:      
0A2A   2A F4 4D               LD   hl,(vRemain)   
0A2D   E5                     PUSH   hl   
0A2E   DD E9                  JP   (ix)   
0A30                SIZE:        
0A30   E1                     POP   hl   
0A31   2B                     DEC   hl   ; skip magic byte
0A32   2B                     DEC   hl   ; skip type tag
0A33   2B                     DEC   hl   ; msb size
0A34   56                     LD   d,(hl)   
0A35   2B                     DEC   hl   ; lsb size
0A36   5E                     LD   e,(hl)   
0A37   D5                     PUSH   de   
0A38   DD E9                  JP   (ix)   
0A3A                COMMAND_V:      
0A3A   CD E1 0A               CALL   jumpTable   
0A3D   62                     DB   "b"   
0A3E   5E 0A                  DW   varBufPtr   
0A40   68                     DB   "h"   
0A41   67 0A                  DW   varHeapPtr   
0A43   74                     DB   "t"   
0A44   70 0A                  DW   varTIBPtr   
0A46   42                     DB   "B"   
0A47   4F 0A                  DW   constBufStart   
0A49   54                     DB   "T"   
0A4A   59 0A                  DW   constTIBStart   
0A4C   00                     DB   NUL   
0A4D   19 08                  DW   error1   
0A4F                CONSTBUFSTART:      
0A4F   11 00 4C               LD   de,BUF   
0A52   18 28                  JR   constant   
0A54                CONSTHEAPSTART:      
0A54   11 1E 4E               LD   de,HEAP   
0A57   18 23                  JR   constant   
0A59                CONSTTIBSTART:      
0A59   11 00 4B               LD   de,TIB   
0A5C   18 1E                  JR   constant   
0A5E                VARBUFPTR:      
0A5E   ED 5B EC 4D            LD   de,(vBufPtr)   
0A62   21 EC 4D               LD   hl,vBufPtr   
0A65   18 12                  JR   variable   
0A67                VARHEAPPTR:      
0A67   ED 5B F0 4D            LD   de,(vHeapPtr)   
0A6B   21 F0 4D               LD   hl,vHeapPtr   
0A6E   18 09                  JR   variable   
0A70                VARTIBPTR:      
0A70   ED 5B EA 4D            LD   de,(vTIBPtr)   
0A74   21 EA 4D               LD   hl,vTIBPtr   
0A77   18 00                  JR   variable   
0A79                VARIABLE:      
0A79   22 F2 4D               LD   (vPointer),hl   
0A7C                CONSTANT:      
0A7C   D5                     PUSH   de   
0A7D   DD E9                  JP   (ix)   
0A7F                CHARS:       
0A7F   21 01 00               LD   hl,1   
0A82                CHARS1:      
0A82   22 E6 4D               LD   (vDataWidth),hl   
0A85   DD E9                  JP   (ix)   
0A87                DECIMAL:      
0A87   21 0A 00               LD   hl,10   
0A8A                DECIMAL1:      
0A8A   22 E8 4D               LD   (vNumBase),hl   
0A8D   DD E9                  JP   (ix)   
0A8F                HEXADECIMAL:      
0A8F   21 10 00               LD   hl,16   
0A92   C3 8A 0A               JP   decimal1   
0A95                             ; Z80 port input
0A95                             ; port -- value
0A95                INPUT:       
0A95   E1                     POP   hl   
0A96   59                     LD   e,c   ; save IP
0A97   4D                     LD   c,l   
0A98   ED 68                  IN   l,(c)   
0A9A   26 00                  LD   h,0   
0A9C   4B                     LD   c,e   ; restore IP
0A9D   E5                     PUSH   hl   
0A9E   DD E9                  JP   (ix)   
0AA0                KEY:         
0AA0   CD 81 00               CALL   getchar   
0AA3   26 00                  LD   h,0   
0AA5   6F                     LD   l,a   
0AA6   E5                     PUSH   hl   
0AA7   DD E9                  JP   (ix)   
0AA9                             ; Z80 port output
0AA9                             ; value port --
0AA9                OUTPUT:      
0AA9   E1                     POP   hl   
0AAA   59                     LD   e,c   ; save IP
0AAB   4D                     LD   c,l   
0AAC   E1                     POP   hl   
0AAD   ED 69                  OUT   (c),l   
0AAF   4B                     LD   c,e   ; restore IP
0AB0   DD E9                  JP   (ix)   
0AB2                NUMBERS:      
0AB2   21 02 00               LD   hl,2   
0AB5   C3 82 0A               JP   chars1   
0AB8                             ; 
0AB8                             ; keyIter:
0AB8                             ;     call go
0AB8                             ;     .cstr "{/k /t}"             ; block
0AB8                             ; fromIter:
0AB8                             ;     call go
0AB8                             ;     dw NUL                      ; NUL closure
0AB8                             ;     dw $+4
0AB8                             ;     dw args1A0L
0AB8                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0AB8                             ; fromIter1:
0AB8                             ;     call go
0AB8                             ;     dw NUL                      ; NUL closure
0AB8                             ;     dw $+4
0AB8                             ;     dw args2A0L
0AB8                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0AB8                FILTER:      
0AB8                MAP:         
0AB8                SCAN:        
0AB8   DD E9                  JP   (ix)   
0ABA                             ;*******************************************************************
0ABA                             ; reusable arglists
0ABA                             ;*******************************************************************
0ABA                             ; new ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0ABA                ARGSX1A0L_:      
0ABA   00                     DB   0   
0ABB   01 61                  .PSTR   "a"   
0ABD                ARGSX0A2L_:      
0ABD   02                     DB   2   
0ABE   03 61 62 63            .PSTR   "abc"   
0AC2                             ; 
0AC2                ARGS1A0L:      ; one arg zero locals
0AC2   00                     DB   0   ; num locals
0AC3   01                     DB   1   ; num args + locals
0AC4   61                     DB   "a"   
0AC5                ARGS1A2L:      ; one arg two locals
0AC5   02                     DB   2   ; num locals
0AC6   03                     DB   3   ; num args + locals
0AC7   61 62 63               DB   "abc"   
0ACA                             ;*******************************************************************
0ACA                             ; general routines
0ACA                             ;*******************************************************************
0ACA                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0ACA                FLUSHBUFFER:      
0ACA   F5                     PUSH   af   
0ACB   D5                     PUSH   de   
0ACC   E5                     PUSH   hl   
0ACD   2A EC 4D               LD   hl,(vBufPtr)   
0AD0   11 00 4C               LD   de,BUF   
0AD3   ED 53 EC 4D            LD   (vBufPtr),de   
0AD7   B7                     OR   a   
0AD8   ED 52                  SBC   hl,de   
0ADA   CD 1A 0A               CALL   printChars2   
0ADD   E1                     POP   hl   
0ADE   D1                     POP   de   
0ADF   F1                     POP   af   
0AE0   C9                     RET      
0AE1                             ; followed by a table
0AE1                             ; db char
0AE1                             ; dw addr
0AE1                             ; the final item must have char == NUL
0AE1                JUMPTABLE:      
0AE1   03                     INC   bc   
0AE2   E1                     POP   hl   
0AE3                JUMPTABLE0:      
0AE3   AF                     XOR   a   
0AE4   BE                     CP   (hl)   
0AE5   28 09                  JR   z,jumpTable1   
0AE7   0A                     LD   a,(bc)   
0AE8   BE                     CP   (hl)   
0AE9   28 06                  JR   z,jumpTable2   
0AEB   23                     INC   hl   
0AEC   23                     INC   hl   
0AED   23                     INC   hl   
0AEE   18 F3                  JR   jumpTable0   
0AF0                JUMPTABLE1:      
0AF0   0B                     DEC   bc   
0AF1                JUMPTABLE2:      
0AF1   23                     INC   hl   
0AF2   5E                     LD   e,(hl)   
0AF3   23                     INC   hl   
0AF4   56                     LD   d,(hl)   
0AF5   EB                     EX   de,hl   
0AF6   E9                     JP   (hl)   
0AF7                PRTSTR0:      
0AF7   CD 85 00               CALL   putchar   
0AFA   23                     INC   hl   
0AFB                PRTSTR:      
0AFB   7E                     LD   a,(hl)   
0AFC   B7                     OR   a   
0AFD   20 F8                  JR   nz,prtstr0   
0AFF   C9                     RET      
0B00                             ; **************************************************************************
0B00                             ; calculate nesting value
0B00                             ; a is char to be tested,
0B00                             ; e is the nesting value (initially 0)
0B00                             ; e is increased by ( and [
0B00                             ; e is decreased by ) and ]
0B00                             ; e has its bit 7 toggled by `
0B00                             ; limited to 127 levels
0B00                             ; **************************************************************************
0B00                NESTING:      
0B00   FE 22                  CP   DQUOTE   ; quote char
0B02   28 06                  JR   z,nesting0   
0B04   FE 60                  CP   "`"   ; quote char
0B06   28 02                  JR   z,nesting0   
0B08   18 0A                  JR   nesting1   
0B0A                NESTING0:      
0B0A   CB 7B                  BIT   7,e   
0B0C   28 03                  JR   z,nesting1a   
0B0E   CB BB                  RES   7,e   
0B10   C9                     RET      
0B11                NESTING1A:      
0B11   CB FB                  SET   7,e   
0B13   C9                     RET      
0B14                NESTING1:      
0B14   CB 7B                  BIT   7,e   
0B16   C0                     RET   nz   
0B17   FE 7B                  CP   "{"   
0B19   28 08                  JR   z,nesting2   
0B1B   FE 5B                  CP   "["   
0B1D   28 04                  JR   z,nesting2   
0B1F   FE 28                  CP   "("   
0B21   20 02                  JR   nz,nesting3   
0B23                NESTING2:      
0B23   1C                     INC   e   
0B24   C9                     RET      
0B25                NESTING3:      
0B25   FE 7D                  CP   "}"   
0B27   28 07                  JR   z,nesting4   
0B29   FE 5D                  CP   "]"   
0B2B   28 03                  JR   z,nesting4   
0B2D   FE 29                  CP   ")"   
0B2F   C0                     RET   nz   
0B30                NESTING4:      
0B30   1D                     DEC   e   
0B31   C9                     RET      
0B32                PROMPT:      
0B32   CD 42 0B               CALL   printStr   
0B35   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B3A   C9                     RET      
0B3B                CRLF:        
0B3B   CD 42 0B               CALL   printStr   
0B3E   0D 0A 00               .CSTR   "\r\n"   
0B41   C9                     RET      
0B42                             ; prints a null teminated string
0B42                             ; the string should be immediately following the call
0B42                PRINTSTR:      
0B42   E3                     EX   (sp),hl   ; swap			
0B43   CD FB 0A               CALL   prtstr   
0B46   23                     INC   hl   ; inc past NUL
0B47   E3                     EX   (sp),hl   ; put it back	
0B48   C9                     RET      
0B49                TITLESTR:      
0B49   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0B5D                INIT:        
0B5D   21 49 0B               LD   hl,titleStr   
0B60   11 0A 4E               LD   de,titleBuf   
0B63   06 14                  LD   b,20   
0B65                INIT1:       
0B65   1A                     LD   a,(de)   
0B66   BE                     CP   (hl)   
0B67   20 17                  JR   nz,coldBoot0   
0B69   13                     INC   de   
0B6A   23                     INC   hl   
0B6B   10 F8                  DJNZ   init1   
0B6D                WARMINIT:      
0B6D   ED 4B F6 4D            LD   bc,(vSavedIP)   ; restore IP
0B71   ED 7B F8 4D            LD   sp,(vSavedSP)   ; restore SP
0B75   DD 2A FA 4D            LD   ix,(vSavedNext)   ; restore Next
0B79   FD 2A FC 4D            LD   iy,(vSavedBP)   ; restore BP
0B7D   C3 B7 0B               JP   start1   
0B80                COLDBOOT0:      
0B80   21 49 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0B83   11 0A 4E               LD   de,titleBuf   
0B86   06 14                  LD   b,20   
0B88   ED B0                  LDIR      
0B8A                COLDINIT:      
0B8A   21 80 01               LD   hl,isysVars   
0B8D   11 E6 4D               LD   de,sysVars   
0B90   01 10 00               LD   bc,8 * 2   
0B93   ED B0                  LDIR      
0B95   21 00 4D               LD   hl,vars   ; 52 vars LO HI
0B98   06 34                  LD   b,26*2   
0B9A   AF                     XOR   a   
0B9B                COLDBOOT1:      
0B9B   77                     LD   (hl),a   
0B9C   23                     INC   hl   
0B9D   10 FC                  DJNZ   coldBoot1   
0B9F   DD 2A EE 4D            LD   ix,(vNext)   
0BA3   FD 21 00 4B            LD   iy,STACK   
0BA7   C9                     RET      
0BA8                COLDSTART:      
0BA8   31 00 4B               LD   sp,STACK   
0BAB   CD 80 0B               CALL   coldBoot0   
0BAE   C3 B7 0B               JP   start1   
0BB1                START:       
0BB1   31 00 4B               LD   sp,STACK   ; start Monty
0BB4   CD 5D 0B               CALL   init   ; setups
0BB7                START1:      
0BB7   21 0A 4E               LD   hl,titleBuf   
0BBA   CD FB 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BBD                INTERPRET:      
0BBD   CD CA 0A               CALL   flushBuffer   
0BC0   CD 32 0B               CALL   prompt   
0BC3   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BC6   21 00 4B               LD   hl,TIB   
0BC9   22 EA 4D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BCC                INTERPRET2:      ; calculate nesting
0BCC   1E 00                  LD   e,0   ; initilize nesting value
0BCE   C5                     PUSH   bc   ; save offset into TIB,
0BCF                             ; bc is also the count of chars in TIB
0BCF   21 00 4B               LD   hl,TIB   ; hl is start of TIB
0BD2   18 0B                  JR   interpret4   
0BD4                INTERPRET3:      
0BD4   3E 33                  LD   a,"3"   
0BD6   CD 85 00               CALL   putchar   
0BD9   7E                     LD   a,(hl)   ; a = char in TIB
0BDA   23                     INC   hl   ; inc pointer into TIB
0BDB   0B                     DEC   bc   ; dec count of chars in TIB
0BDC   CD 00 0B               CALL   nesting   ; update nesting value
0BDF                INTERPRET4:      
0BDF   79                     LD   a,c   ; is count zero?
0BE0   B0                     OR   b   
0BE1   20 F1                  JR   nz,interpret3   ; if not loop
0BE3   C1                     POP   bc   ; restore offset into TIB
0BE4                INTERPRET5:      
0BE4   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BE7   FE 20                  CP   $20   ; compare to space
0BE9   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BEB   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BED                             ; ???? NEEDED?
0BED   28 3B                  JR   z,interpret8   
0BEF   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BF1   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BF3   FE 05                  CP   CTRL_E   
0BF5   CA 88 0C               JP   z,edit_   
0BF8   FE 08                  CP   CTRL_H   
0BFA   CA 78 0C               JP   z,backSpace_   
0BFD   FE 0A                  CP   CTRL_J   
0BFF   CA A0 0C               JP   z,reEdit_   
0C02   FE 13                  CP   CTRL_S   
0C04   CA A3 0C               JP   z,printStack_   
0C07                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C07                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C07                             ; DB     lsb(list_)       ; FF  ^L 12
0C07                             ; DB     lsb(printStack_) ; DLE ^P 16
0C07                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C07                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C07                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C07                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C07                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C07                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C07                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C07                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C07                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C07                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C07                INTERPRET5A:      
0C07                             ; ld (vTIBPtr),bc
0C07                             ; ld bc,(vTIBPtr)
0C07   18 C3                  JR   interpret2   
0C09                INTERPRET6:      
0C09   21 00 4B               LD   hl,TIB   
0C0C   09                     ADD   hl,bc   
0C0D   77                     LD   (hl),a   ; store the character in textbuf
0C0E   03                     INC   bc   
0C0F   CD 85 00               CALL   putchar   ; echo character to screen
0C12   CD 00 0B               CALL   nesting   
0C15   18 CD                  JR   interpret5   ; wait for next character
0C17                INTERPRET7:      
0C17   21 00 4B               LD   hl,TIB   
0C1A   09                     ADD   hl,bc   
0C1B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C1D   23                     INC   hl   
0C1E   36 0A                  LD   (hl),"\n"   
0C20   23                     INC   hl   
0C21   03                     INC   bc   
0C22   03                     INC   bc   
0C23   CD 3B 0B               CALL   crlf   ; echo character to screen
0C26   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C27   B7                     OR   a   
0C28   20 BA                  JR   nz,interpret5   
0C2A                INTERPRET8:      
0C2A   21 00 4B               LD   hl,TIB   
0C2D   09                     ADD   hl,bc   
0C2E   22 EA 4D               LD   (vTIBPtr),hl   
0C31   01 00 4B               LD   bc,TIB   
0C34   ED 43 F6 4D            LD   (vSavedIP),bc   ; save IP
0C38   ED 73 F8 4D            LD   (vSavedSP),sp   ; save SP
0C3C   DD 22 FA 4D            LD   (vSavedNext),ix   ; save Next
0C40   FD 22 FC 4D            LD   (vSavedBP),iy   ; save BP
0C44   0B                     DEC   bc   
0C45                NEXT:        
0C45   03                     INC   bc   ; Increment the IP
0C46   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C47   FE 20                  CP   " "   ; whitespace?
0C49   28 FA                  JR   z,next   ; space? ignore
0C4B   38 09                  JR   c,next1   
0C4D   D6 20                  SUB   " "   
0C4F   6F                     LD   l,a   ; index into table
0C50   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C52   6E                     LD   l,(hl)   ; get low jump address
0C53   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C55   E9                     JP   (hl)   ; Jump to routine
0C56                NEXT1:       
0C56   FE 00                  CP   NUL   ; end of input string?
0C58   28 03                  JR   z,exit   
0C5A   C3 BD 0B               JP   interpret   ; no, other whitespace, macros?
0C5D                EXIT:        
0C5D   03                     INC   bc   
0C5E   60 69                  LD   hl,bc   
0C60   E9                     JP   (hl)   
0C61                RUN:         
0C61   C1                     POP   bc   
0C62   0B                     DEC   bc   
0C63   DD E9                  JP   (ix)   
0C65                ERROR:       
0C65   CD 61 0C               CALL   run   
0C68   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C75   C3 BD 0B               JP   interpret   
0C78                BACKSPACE_:      
0C78   79                     LD   a,c   
0C79   B0                     OR   b   
0C7A   CA CC 0B               JP   z,interpret2   
0C7D   0B                     DEC   bc   
0C7E   CD 42 0B               CALL   printStr   
0C81   08 20 08 00            .CSTR   "\b \b"   
0C85   C3 CC 0B               JP   interpret2   
0C88                             ; edit
0C88                EDIT_:       
0C88   CD 61 0C               CALL   run   
0C8B   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C9D   C3 BD 0B               JP   interpret   
0CA0                REEDIT_:      
0CA0   C3 BD 0B               JP   interpret   
0CA3                PRINTSTACK_:      
0CA3   CD 61 0C               CALL   run   
0CA6   2F 70 6B 00            .CSTR   "/pk"   
0CAA   C3 BD 0B               JP   interpret   
0CAD                             ; editDef:
0CAD                             ;     pop hl                      ; pop ret address
0CAD                             ;     ex (sp),hl                  ; swap with TOS
0CAD                             ;     push hl                     ; dup TOS
0CAD                             ;     ld a,l                      ; a = ident
0CAD                             ;     ld de,TIB                   ; de = start of TIB
0CAD                             ;     ld (vTIBPtr),de             ; update TIB*
0CAD                             ;     push ix                     ; save NEXT
0CAD                             ;     ld ix,editDef0              ; NEXT = editDef0
0CAD                             ;     jp lookupRef                ; convert letter into address
0CAD                             ; editDef0:
0CAD                             ;     ld e,(hl)                   ; de = (hl++)
0CAD                             ;     inc hl
0CAD                             ;     ld d,(hl)
0CAD                             ;     ld a,d                      ; de == 0 ?
0CAD                             ;     or e
0CAD                             ;     jr z,editDef4
0CAD                             ;     ld ix,editDef3              ; NEXT = editDef3
0CAD                             ;     ex de,hl
0CAD                             ;     ld a,(hl)
0CAD                             ;     cp "{"
0CAD                             ;     jr nz,editDef1
0CAD                             ;     jp editBlock0               ; convert letter into address
0CAD                             ; editDef1:
0CAD                             ;     cp "("
0CAD                             ;     jr nz,editDef2
0CAD                             ;     jp editBlock0               ; convert letter into address
0CAD                             ; editDef2:
0CAD                             ;     jp editLambda
0CAD                             ; editDef3:
0CAD                             ;     ld a," "                    ; write assign
0CAD                             ;     call writeChar
0CAD                             ;     pop hl                      ; a = ident
0CAD                             ;     ld a,l
0CAD                             ;     call writeChar
0CAD                             ;     ld a,"="                    ; write assign
0CAD                             ;     call writeChar
0CAD                             ;     ld ix,editDef4              ; NEXT = editDef4
0CAD                             ;     jp printTIB
0CAD                             ; editDef4:
0CAD                             ;     pop ix                      ; restore NEXT
0CAD                             ;     jp (ix)
0CAD                             ; writeChar:
0CAD                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CAD                             ;     ld (de),a                   ; write ident
0CAD                             ;     inc de
0CAD                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CAD                             ;     ret
0CAD                             ; ; printTIB
0CAD                             ; printTIB:
0CAD                             ;     ld hl,(vTIBPtr)
0CAD                             ;     ld de,TIB
0CAD                             ;     or a
0CAD                             ;     sbc hl,de
0CAD                             ;     jp printTIB2
0CAD                             ; printTIB1:
0CAD                             ;     ld a,(de)
0CAD                             ;     call putchar
0CAD                             ; printTIB2:
0CAD                             ;     ld a,l
0CAD                             ;     or h
0CAD                             ;     jr nz,printTIB1
0CAD                             ;     jp (ix)
0CAD                             ; editBlock:
0CAD                             ;     pop hl                      ; hl = block*
0CAD                             ; editBlock0:
0CAD                             ;     push ix                     ; save next
0CAD                             ;     push hl                     ; push block*
0CAD                             ;     push hl                     ; push block*
0CAD                             ;     ld ix,(editBlock2)
0CAD                             ;     jp blockLength
0CAD                             ; editBlock1:
0CAD                             ;     pop hl                      ; bc = length, (sp) = IP
0CAD                             ;     pop de                      ; de = block*
0CAD                             ;     ld a,l
0CAD                             ;     or h
0CAD                             ;     jr z,editBlock2
0CAD                             ;     push bc
0CAD                             ;     ld bc,hl
0CAD                             ;     ex de,hl                    ; hl = block*
0CAD                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CAD                             ;     ldir                        ; copy block to TIB
0CAD                             ;     ld (vTIBPtr),de              ; save TIB*
0CAD                             ;     pop bc
0CAD                             ; editBlock2:
0CAD                             ;     pop ix                      ; restore next
0CAD                             ;     jp (ix)
0CAD                             ; editLambda:
0CAD                             ;     jp (ix)
0CAD                             ; editArray:
0CAD                             ;     jp (ix)
0CAD                             ; editArglist:
0CAD                             ;     jp (ix)
0CAD                             ; ; blockLength
0CAD                             ; ; addr1 -- length
0CAD                             ; blockLength:
0CAD                             ;     pop hl                      ; block*
0CAD                             ;     push hl                     ; save block*
0CAD                             ;     inc hl                      ; skip first char
0CAD                             ;     ld d,1                      ; increase nesting
0CAD                             ; blockLength1:                   ; Skip to end of definition
0CAD                             ;     ld a,(hl)                   ; Get the next character
0CAD                             ;     inc hl                      ; Point to next character
0CAD                             ;     cp " " + 1                  ; ignore whitespace
0CAD                             ;     jr c,blockLength1
0CAD                             ;     cp ")"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "}"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "]"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "("
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "{"
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "["
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "'"
0CAD                             ;     jr z,blockLength3
0CAD                             ;     cp "`"
0CAD                             ;     jr z,blockLength3
0CAD                             ;     cp DQUOTE
0CAD                             ;     jr z,blockLength3
0CAD                             ;     jr blockLength1
0CAD                             ; blockLength2:
0CAD                             ;     inc d
0CAD                             ;     jr blockLength1
0CAD                             ; blockLength4:
0CAD                             ;     dec d
0CAD                             ;     jr nz, blockLength1         ; get the next element
0CAD                             ; blockLength3:
0CAD                             ;     ld a,$80
0CAD                             ;     xor d
0CAD                             ;     ld d,a
0CAD                             ;     jr nz, blockLength1
0CAD                             ;     pop hl                      ; hl = block*
0CAD                             ;     or a
0CAD                             ;     sbc hl,de
0CAD                             ;     push hl
0CAD                             ;     jp (ix)
0CAD                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CAD                             ; \a start of stack \#3 depth \b base \$ prompt
0CAD                             ; DW dStack               ; a vS0 start of datastack			
0CAD                             ; DW FALSE                ; b vBase16
0CAD                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CAD                             ; DW 0                    ; d
0CAD                             ; DW 65                   ; e vLastDef "A" last command u defined
0CAD                             ; DW 0                    ; f
0CAD                             ; DW page6                ; g 256 bytes limits
0CAD                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CAD                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                             ; test ": 0%", $0000
0D00                             ; test ":a 0%", $0100
0D00                             ; test ":a: 0%", $0100
0D00                             ; test ":a:b 0%", $0201
0D00                             ; test "::b 0%", $0101
0D00                             ; test ":{2};^", 2
0D00                             ; test ":a{2};^", 2
0D00                             ; test "5 :a{$a};^", 5
0D00                             ; test "5 :a:b{$a};^", 5
0D00                             ; test ":a{{2}^};^", 2
0D00                             ; test "1 5 :a{{$a}^};^", 5
0D00                             ; test "1 5 :ab{{$a}^};^", 1
0D00                             ; test "1 5 :a{{$a 2 +}^};^", 7
0D00                             ; test "1 5 :ab{{$a $b +}^};^", 6
0D00                             ; test ":a{2}; x= 1 x^", 2
0D00                             ; test ":a{$a}; x= 0 1 x^", 1
0D00                             ; test ":ab{$b}; x= 1 2 x^", 2
0D00                             ; test ":a:b{$a}; x= 1 2 x^", 2
0D00                             ; test ":ab{$b}; x= 1 2 x^", 2
0D00                             ; test ":ab{$b $a}; x= 10 15 x^ -", 5
0D00                             ; test ":a:b{2}; x= 1 x^", 2
0D00                             ; test "::b{100 $b= $b}; x= x^", 100
0D00                             ; test ":a:b{1 $b= $b}; x= 2 x^", 1
0D00                             ; test ":a:b{$a $b= $b}; x= 2 x^", 2
0D00                             ; ; test "5 [4] :ab{$a $b -}; /pa ^", 1
0D00                             ; call printStr
0D00                             ; .cstr "Done!"
0D00                             ; HALT
0D00                             ; 
0D00                          ;*Macro unroll:  test "/f", false
0D00   31 00 4B               LD   SP,STACK   
0D03   CD 8A 0B               CALL   coldInit   
0D06   CD 7A 49               CALL   execStr   
0D09   2F 66 00               .CSTR   "/f"   
0D0C   CD CA 0A               CALL   flushBuffer   
0D0F                          ;*Macro unroll:  expect "/f",false
0D0F   E1                     POP   HL   
0D10   E5                     PUSH   HL   
0D11   11 00 00               LD   DE,false   
0D14   B7                     OR   A   
0D15   ED 52                  SBC   HL,DE   
0D17   7D                     LD   A,L   
0D18   B4                     OR   H   
0D19   CA 76 0D               JP   Z,expectM_0_2688S45   
0D1C   CD 42 0B               CALL   printStr   
0D1F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D28   CD 42 0B               CALL   printStr   
0D2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D3A   21 00 00               LD   hl,false   
0D3D   E5                     PUSH   hl   
0D3E   E5                     PUSH   hl   
0D3F   CD 61 0C               CALL   run   
0D42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0D4A   CD CA 0A               CALL   flushBuffer   
0D4D   CD 42 0B               CALL   printStr   
0D50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D5D   E1                     POP   hl   
0D5E   E5                     PUSH   hl   
0D5F   E5                     PUSH   hl   
0D60   CD 61 0C               CALL   run   
0D63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0D72   CD CA 0A               CALL   flushBuffer   
0D75   76                     HALT      
0D76                EXPECTM_0_2688S45:      
0D76   E1                     POP   HL   
0D77                          ;*Macro unroll:  test "/t", true
0D77   31 00 4B               LD   SP,STACK   
0D7A   CD 8A 0B               CALL   coldInit   
0D7D   CD 7A 49               CALL   execStr   
0D80   2F 74 00               .CSTR   "/t"   
0D83   CD CA 0A               CALL   flushBuffer   
0D86                          ;*Macro unroll:  expect "/t",true
0D86   E1                     POP   HL   
0D87   E5                     PUSH   HL   
0D88   11 FF FF               LD   DE,true   
0D8B   B7                     OR   A   
0D8C   ED 52                  SBC   HL,DE   
0D8E   7D                     LD   A,L   
0D8F   B4                     OR   H   
0D90   CA ED 0D               JP   Z,expectM_0_2689S45   
0D93   CD 42 0B               CALL   printStr   
0D96   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0D9F   CD 42 0B               CALL   printStr   
0DA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DB1   21 FF FF               LD   hl,true   
0DB4   E5                     PUSH   hl   
0DB5   E5                     PUSH   hl   
0DB6   CD 61 0C               CALL   run   
0DB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0DC1   CD CA 0A               CALL   flushBuffer   
0DC4   CD 42 0B               CALL   printStr   
0DC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DD4   E1                     POP   hl   
0DD5   E5                     PUSH   hl   
0DD6   E5                     PUSH   hl   
0DD7   CD 61 0C               CALL   run   
0DDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0DE9   CD CA 0A               CALL   flushBuffer   
0DEC   76                     HALT      
0DED                EXPECTM_0_2689S45:      
0DED   E1                     POP   HL   
0DEE                          ;*Macro unroll:  test "1", 1
0DEE   31 00 4B               LD   SP,STACK   
0DF1   CD 8A 0B               CALL   coldInit   
0DF4   CD 7A 49               CALL   execStr   
0DF7   31 00                  .CSTR   "1"   
0DF9   CD CA 0A               CALL   flushBuffer   
0DFC                          ;*Macro unroll:  expect "1",1
0DFC   E1                     POP   HL   
0DFD   E5                     PUSH   HL   
0DFE   11 01 00               LD   DE,1   
0E01   B7                     OR   A   
0E02   ED 52                  SBC   HL,DE   
0E04   7D                     LD   A,L   
0E05   B4                     OR   H   
0E06   CA 62 0E               JP   Z,expectM_0_2690S45   
0E09   CD 42 0B               CALL   printStr   
0E0C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E14   CD 42 0B               CALL   printStr   
0E17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E26   21 01 00               LD   hl,1   
0E29   E5                     PUSH   hl   
0E2A   E5                     PUSH   hl   
0E2B   CD 61 0C               CALL   run   
0E2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E36   CD CA 0A               CALL   flushBuffer   
0E39   CD 42 0B               CALL   printStr   
0E3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E49   E1                     POP   hl   
0E4A   E5                     PUSH   hl   
0E4B   E5                     PUSH   hl   
0E4C   CD 61 0C               CALL   run   
0E4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E5E   CD CA 0A               CALL   flushBuffer   
0E61   76                     HALT      
0E62                EXPECTM_0_2690S45:      
0E62   E1                     POP   HL   
0E63                          ;*Macro unroll:  test "2", 2
0E63   31 00 4B               LD   SP,STACK   
0E66   CD 8A 0B               CALL   coldInit   
0E69   CD 7A 49               CALL   execStr   
0E6C   32 00                  .CSTR   "2"   
0E6E   CD CA 0A               CALL   flushBuffer   
0E71                          ;*Macro unroll:  expect "2",2
0E71   E1                     POP   HL   
0E72   E5                     PUSH   HL   
0E73   11 02 00               LD   DE,2   
0E76   B7                     OR   A   
0E77   ED 52                  SBC   HL,DE   
0E79   7D                     LD   A,L   
0E7A   B4                     OR   H   
0E7B   CA D7 0E               JP   Z,expectM_0_2691S45   
0E7E   CD 42 0B               CALL   printStr   
0E81   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0E89   CD 42 0B               CALL   printStr   
0E8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E9B   21 02 00               LD   hl,2   
0E9E   E5                     PUSH   hl   
0E9F   E5                     PUSH   hl   
0EA0   CD 61 0C               CALL   run   
0EA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EAB   CD CA 0A               CALL   flushBuffer   
0EAE   CD 42 0B               CALL   printStr   
0EB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EBE   E1                     POP   hl   
0EBF   E5                     PUSH   hl   
0EC0   E5                     PUSH   hl   
0EC1   CD 61 0C               CALL   run   
0EC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0ED3   CD CA 0A               CALL   flushBuffer   
0ED6   76                     HALT      
0ED7                EXPECTM_0_2691S45:      
0ED7   E1                     POP   HL   
0ED8                          ;*Macro unroll:  test "1", 1
0ED8   31 00 4B               LD   SP,STACK   
0EDB   CD 8A 0B               CALL   coldInit   
0EDE   CD 7A 49               CALL   execStr   
0EE1   31 00                  .CSTR   "1"   
0EE3   CD CA 0A               CALL   flushBuffer   
0EE6                          ;*Macro unroll:  expect "1",1
0EE6   E1                     POP   HL   
0EE7   E5                     PUSH   HL   
0EE8   11 01 00               LD   DE,1   
0EEB   B7                     OR   A   
0EEC   ED 52                  SBC   HL,DE   
0EEE   7D                     LD   A,L   
0EEF   B4                     OR   H   
0EF0   CA 4C 0F               JP   Z,expectM_0_2692S45   
0EF3   CD 42 0B               CALL   printStr   
0EF6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0EFE   CD 42 0B               CALL   printStr   
0F01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F10   21 01 00               LD   hl,1   
0F13   E5                     PUSH   hl   
0F14   E5                     PUSH   hl   
0F15   CD 61 0C               CALL   run   
0F18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F20   CD CA 0A               CALL   flushBuffer   
0F23   CD 42 0B               CALL   printStr   
0F26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F33   E1                     POP   hl   
0F34   E5                     PUSH   hl   
0F35   E5                     PUSH   hl   
0F36   CD 61 0C               CALL   run   
0F39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F48   CD CA 0A               CALL   flushBuffer   
0F4B   76                     HALT      
0F4C                EXPECTM_0_2692S45:      
0F4C   E1                     POP   HL   
0F4D                          ;*Macro unroll:  test "0", 0
0F4D   31 00 4B               LD   SP,STACK   
0F50   CD 8A 0B               CALL   coldInit   
0F53   CD 7A 49               CALL   execStr   
0F56   30 00                  .CSTR   "0"   
0F58   CD CA 0A               CALL   flushBuffer   
0F5B                          ;*Macro unroll:  expect "0",0
0F5B   E1                     POP   HL   
0F5C   E5                     PUSH   HL   
0F5D   11 00 00               LD   DE,0   
0F60   B7                     OR   A   
0F61   ED 52                  SBC   HL,DE   
0F63   7D                     LD   A,L   
0F64   B4                     OR   H   
0F65   CA C1 0F               JP   Z,expectM_0_2693S45   
0F68   CD 42 0B               CALL   printStr   
0F6B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0F73   CD 42 0B               CALL   printStr   
0F76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F85   21 00 00               LD   hl,0   
0F88   E5                     PUSH   hl   
0F89   E5                     PUSH   hl   
0F8A   CD 61 0C               CALL   run   
0F8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F95   CD CA 0A               CALL   flushBuffer   
0F98   CD 42 0B               CALL   printStr   
0F9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FA8   E1                     POP   hl   
0FA9   E5                     PUSH   hl   
0FAA   E5                     PUSH   hl   
0FAB   CD 61 0C               CALL   run   
0FAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FBD   CD CA 0A               CALL   flushBuffer   
0FC0   76                     HALT      
0FC1                EXPECTM_0_2693S45:      
0FC1   E1                     POP   HL   
0FC2                          ;*Macro unroll:  test "10", 10
0FC2   31 00 4B               LD   SP,STACK   
0FC5   CD 8A 0B               CALL   coldInit   
0FC8   CD 7A 49               CALL   execStr   
0FCB   31 30 00               .CSTR   "10"   
0FCE   CD CA 0A               CALL   flushBuffer   
0FD1                          ;*Macro unroll:  expect "10",10
0FD1   E1                     POP   HL   
0FD2   E5                     PUSH   HL   
0FD3   11 0A 00               LD   DE,10   
0FD6   B7                     OR   A   
0FD7   ED 52                  SBC   HL,DE   
0FD9   7D                     LD   A,L   
0FDA   B4                     OR   H   
0FDB   CA 38 10               JP   Z,expectM_0_2694S45   
0FDE   CD 42 0B               CALL   printStr   
0FE1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0FEA   CD 42 0B               CALL   printStr   
0FED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FFC   21 0A 00               LD   hl,10   
0FFF   E5                     PUSH   hl   
1000   E5                     PUSH   hl   
1001   CD 61 0C               CALL   run   
1004   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
100C   CD CA 0A               CALL   flushBuffer   
100F   CD 42 0B               CALL   printStr   
1012   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
101F   E1                     POP   hl   
1020   E5                     PUSH   hl   
1021   E5                     PUSH   hl   
1022   CD 61 0C               CALL   run   
1025   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1034   CD CA 0A               CALL   flushBuffer   
1037   76                     HALT      
1038                EXPECTM_0_2694S45:      
1038   E1                     POP   HL   
1039                          ;*Macro unroll:  test "123", 123
1039   31 00 4B               LD   SP,STACK   
103C   CD 8A 0B               CALL   coldInit   
103F   CD 7A 49               CALL   execStr   
1042   31 32 33 00            .CSTR   "123"   
1046   CD CA 0A               CALL   flushBuffer   
1049                          ;*Macro unroll:  expect "123",123
1049   E1                     POP   HL   
104A   E5                     PUSH   HL   
104B   11 7B 00               LD   DE,123   
104E   B7                     OR   A   
104F   ED 52                  SBC   HL,DE   
1051   7D                     LD   A,L   
1052   B4                     OR   H   
1053   CA B1 10               JP   Z,expectM_0_2695S45   
1056   CD 42 0B               CALL   printStr   
1059   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1063   CD 42 0B               CALL   printStr   
1066   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1075   21 7B 00               LD   hl,123   
1078   E5                     PUSH   hl   
1079   E5                     PUSH   hl   
107A   CD 61 0C               CALL   run   
107D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1085   CD CA 0A               CALL   flushBuffer   
1088   CD 42 0B               CALL   printStr   
108B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1098   E1                     POP   hl   
1099   E5                     PUSH   hl   
109A   E5                     PUSH   hl   
109B   CD 61 0C               CALL   run   
109E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10AD   CD CA 0A               CALL   flushBuffer   
10B0   76                     HALT      
10B1                EXPECTM_0_2695S45:      
10B1   E1                     POP   HL   
10B2                          ;*Macro unroll:  test "-1",-1
10B2   31 00 4B               LD   SP,STACK   
10B5   CD 8A 0B               CALL   coldInit   
10B8   CD 7A 49               CALL   execStr   
10BB   2D 31 00               .CSTR   "-1"   
10BE   CD CA 0A               CALL   flushBuffer   
10C1                          ;*Macro unroll:  expect "-1",-1
10C1   E1                     POP   HL   
10C2   E5                     PUSH   HL   
10C3   11 FF FF               LD   DE,-1   
10C6   B7                     OR   A   
10C7   ED 52                  SBC   HL,DE   
10C9   7D                     LD   A,L   
10CA   B4                     OR   H   
10CB   CA 28 11               JP   Z,expectM_0_2696S45   
10CE   CD 42 0B               CALL   printStr   
10D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
10DA   CD 42 0B               CALL   printStr   
10DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10EC   21 FF FF               LD   hl,-1   
10EF   E5                     PUSH   hl   
10F0   E5                     PUSH   hl   
10F1   CD 61 0C               CALL   run   
10F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10FC   CD CA 0A               CALL   flushBuffer   
10FF   CD 42 0B               CALL   printStr   
1102   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
110F   E1                     POP   hl   
1110   E5                     PUSH   hl   
1111   E5                     PUSH   hl   
1112   CD 61 0C               CALL   run   
1115   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1124   CD CA 0A               CALL   flushBuffer   
1127   76                     HALT      
1128                EXPECTM_0_2696S45:      
1128   E1                     POP   HL   
1129                          ;*Macro unroll:  test "''", 0
1129   31 00 4B               LD   SP,STACK   
112C   CD 8A 0B               CALL   coldInit   
112F   CD 7A 49               CALL   execStr   
1132   27 27 00               .CSTR   "''"   
1135   CD CA 0A               CALL   flushBuffer   
1138                          ;*Macro unroll:  expect "''",0
1138   E1                     POP   HL   
1139   E5                     PUSH   HL   
113A   11 00 00               LD   DE,0   
113D   B7                     OR   A   
113E   ED 52                  SBC   HL,DE   
1140   7D                     LD   A,L   
1141   B4                     OR   H   
1142   CA 9F 11               JP   Z,expectM_0_2697S45   
1145   CD 42 0B               CALL   printStr   
1148   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1151   CD 42 0B               CALL   printStr   
1154   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1163   21 00 00               LD   hl,0   
1166   E5                     PUSH   hl   
1167   E5                     PUSH   hl   
1168   CD 61 0C               CALL   run   
116B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1173   CD CA 0A               CALL   flushBuffer   
1176   CD 42 0B               CALL   printStr   
1179   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1186   E1                     POP   hl   
1187   E5                     PUSH   hl   
1188   E5                     PUSH   hl   
1189   CD 61 0C               CALL   run   
118C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
119B   CD CA 0A               CALL   flushBuffer   
119E   76                     HALT      
119F                EXPECTM_0_2697S45:      
119F   E1                     POP   HL   
11A0                          ;*Macro unroll:  test "'a'", $61
11A0   31 00 4B               LD   SP,STACK   
11A3   CD 8A 0B               CALL   coldInit   
11A6   CD 7A 49               CALL   execStr   
11A9   27 61 27 00            .CSTR   "'a'"   
11AD   CD CA 0A               CALL   flushBuffer   
11B0                          ;*Macro unroll:  expect "'a'",$61
11B0   E1                     POP   HL   
11B1   E5                     PUSH   HL   
11B2   11 61 00               LD   DE,$61   
11B5   B7                     OR   A   
11B6   ED 52                  SBC   HL,DE   
11B8   7D                     LD   A,L   
11B9   B4                     OR   H   
11BA   CA 18 12               JP   Z,expectM_0_2698S45   
11BD   CD 42 0B               CALL   printStr   
11C0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
11CA   CD 42 0B               CALL   printStr   
11CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11DC   21 61 00               LD   hl,$61   
11DF   E5                     PUSH   hl   
11E0   E5                     PUSH   hl   
11E1   CD 61 0C               CALL   run   
11E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11EC   CD CA 0A               CALL   flushBuffer   
11EF   CD 42 0B               CALL   printStr   
11F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FF   E1                     POP   hl   
1200   E5                     PUSH   hl   
1201   E5                     PUSH   hl   
1202   CD 61 0C               CALL   run   
1205   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1214   CD CA 0A               CALL   flushBuffer   
1217   76                     HALT      
1218                EXPECTM_0_2698S45:      
1218   E1                     POP   HL   
1219                          ;*Macro unroll:  test "'\\''", $27
1219   31 00 4B               LD   SP,STACK   
121C   CD 8A 0B               CALL   coldInit   
121F   CD 7A 49               CALL   execStr   
1222   27 5C 27 27 00         .CSTR   "'\\''"   
1227   CD CA 0A               CALL   flushBuffer   
122A                          ;*Macro unroll:  expect "'\\''",$27
122A   E1                     POP   HL   
122B   E5                     PUSH   HL   
122C   11 27 00               LD   DE,$27   
122F   B7                     OR   A   
1230   ED 52                  SBC   HL,DE   
1232   7D                     LD   A,L   
1233   B4                     OR   H   
1234   CA 93 12               JP   Z,expectM_0_2699S45   
1237   CD 42 0B               CALL   printStr   
123A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1245   CD 42 0B               CALL   printStr   
1248   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1257   21 27 00               LD   hl,$27   
125A   E5                     PUSH   hl   
125B   E5                     PUSH   hl   
125C   CD 61 0C               CALL   run   
125F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1267   CD CA 0A               CALL   flushBuffer   
126A   CD 42 0B               CALL   printStr   
126D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
127A   E1                     POP   hl   
127B   E5                     PUSH   hl   
127C   E5                     PUSH   hl   
127D   CD 61 0C               CALL   run   
1280   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
128F   CD CA 0A               CALL   flushBuffer   
1292   76                     HALT      
1293                EXPECTM_0_2699S45:      
1293   E1                     POP   HL   
1294                          ;*Macro unroll:  test "#10", $10
1294   31 00 4B               LD   SP,STACK   
1297   CD 8A 0B               CALL   coldInit   
129A   CD 7A 49               CALL   execStr   
129D   23 31 30 00            .CSTR   "#10"   
12A1   CD CA 0A               CALL   flushBuffer   
12A4                          ;*Macro unroll:  expect "#10",$10
12A4   E1                     POP   HL   
12A5   E5                     PUSH   HL   
12A6   11 10 00               LD   DE,$10   
12A9   B7                     OR   A   
12AA   ED 52                  SBC   HL,DE   
12AC   7D                     LD   A,L   
12AD   B4                     OR   H   
12AE   CA 0C 13               JP   Z,expectM_0_2700S45   
12B1   CD 42 0B               CALL   printStr   
12B4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
12BE   CD 42 0B               CALL   printStr   
12C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D0   21 10 00               LD   hl,$10   
12D3   E5                     PUSH   hl   
12D4   E5                     PUSH   hl   
12D5   CD 61 0C               CALL   run   
12D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12E0   CD CA 0A               CALL   flushBuffer   
12E3   CD 42 0B               CALL   printStr   
12E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F3   E1                     POP   hl   
12F4   E5                     PUSH   hl   
12F5   E5                     PUSH   hl   
12F6   CD 61 0C               CALL   run   
12F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1308   CD CA 0A               CALL   flushBuffer   
130B   76                     HALT      
130C                EXPECTM_0_2700S45:      
130C   E1                     POP   HL   
130D                          ;*Macro unroll:  test "#FF", $FF
130D   31 00 4B               LD   SP,STACK   
1310   CD 8A 0B               CALL   coldInit   
1313   CD 7A 49               CALL   execStr   
1316   23 46 46 00            .CSTR   "#FF"   
131A   CD CA 0A               CALL   flushBuffer   
131D                          ;*Macro unroll:  expect "#FF",$FF
131D   E1                     POP   HL   
131E   E5                     PUSH   HL   
131F   11 FF 00               LD   DE,$FF   
1322   B7                     OR   A   
1323   ED 52                  SBC   HL,DE   
1325   7D                     LD   A,L   
1326   B4                     OR   H   
1327   CA 85 13               JP   Z,expectM_0_2701S45   
132A   CD 42 0B               CALL   printStr   
132D   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1337   CD 42 0B               CALL   printStr   
133A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1349   21 FF 00               LD   hl,$FF   
134C   E5                     PUSH   hl   
134D   E5                     PUSH   hl   
134E   CD 61 0C               CALL   run   
1351   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1359   CD CA 0A               CALL   flushBuffer   
135C   CD 42 0B               CALL   printStr   
135F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
136C   E1                     POP   hl   
136D   E5                     PUSH   hl   
136E   E5                     PUSH   hl   
136F   CD 61 0C               CALL   run   
1372   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1381   CD CA 0A               CALL   flushBuffer   
1384   76                     HALT      
1385                EXPECTM_0_2701S45:      
1385   E1                     POP   HL   
1386                          ;*Macro unroll:  test "-1 2 +",1
1386   31 00 4B               LD   SP,STACK   
1389   CD 8A 0B               CALL   coldInit   
138C   CD 7A 49               CALL   execStr   
138F   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1396   CD CA 0A               CALL   flushBuffer   
1399                          ;*Macro unroll:  expect "-1 2 +",1
1399   E1                     POP   HL   
139A   E5                     PUSH   HL   
139B   11 01 00               LD   DE,1   
139E   B7                     OR   A   
139F   ED 52                  SBC   HL,DE   
13A1   7D                     LD   A,L   
13A2   B4                     OR   H   
13A3   CA 04 14               JP   Z,expectM_0_2702S45   
13A6   CD 42 0B               CALL   printStr   
13A9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
13B6   CD 42 0B               CALL   printStr   
13B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C8   21 01 00               LD   hl,1   
13CB   E5                     PUSH   hl   
13CC   E5                     PUSH   hl   
13CD   CD 61 0C               CALL   run   
13D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D8   CD CA 0A               CALL   flushBuffer   
13DB   CD 42 0B               CALL   printStr   
13DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EB   E1                     POP   hl   
13EC   E5                     PUSH   hl   
13ED   E5                     PUSH   hl   
13EE   CD 61 0C               CALL   run   
13F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1400   CD CA 0A               CALL   flushBuffer   
1403   76                     HALT      
1404                EXPECTM_0_2702S45:      
1404   E1                     POP   HL   
1405                          ;*Macro unroll:  test "-1 1 +",0
1405   31 00 4B               LD   SP,STACK   
1408   CD 8A 0B               CALL   coldInit   
140B   CD 7A 49               CALL   execStr   
140E   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1415   CD CA 0A               CALL   flushBuffer   
1418                          ;*Macro unroll:  expect "-1 1 +",0
1418   E1                     POP   HL   
1419   E5                     PUSH   HL   
141A   11 00 00               LD   DE,0   
141D   B7                     OR   A   
141E   ED 52                  SBC   HL,DE   
1420   7D                     LD   A,L   
1421   B4                     OR   H   
1422   CA 83 14               JP   Z,expectM_0_2703S45   
1425   CD 42 0B               CALL   printStr   
1428   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1435   CD 42 0B               CALL   printStr   
1438   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1447   21 00 00               LD   hl,0   
144A   E5                     PUSH   hl   
144B   E5                     PUSH   hl   
144C   CD 61 0C               CALL   run   
144F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1457   CD CA 0A               CALL   flushBuffer   
145A   CD 42 0B               CALL   printStr   
145D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146A   E1                     POP   hl   
146B   E5                     PUSH   hl   
146C   E5                     PUSH   hl   
146D   CD 61 0C               CALL   run   
1470   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
147F   CD CA 0A               CALL   flushBuffer   
1482   76                     HALT      
1483                EXPECTM_0_2703S45:      
1483   E1                     POP   HL   
1484                          ;*Macro unroll:  test "1 2 +", 3
1484   31 00 4B               LD   SP,STACK   
1487   CD 8A 0B               CALL   coldInit   
148A   CD 7A 49               CALL   execStr   
148D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1493   CD CA 0A               CALL   flushBuffer   
1496                          ;*Macro unroll:  expect "1 2 +",3
1496   E1                     POP   HL   
1497   E5                     PUSH   HL   
1498   11 03 00               LD   DE,3   
149B   B7                     OR   A   
149C   ED 52                  SBC   HL,DE   
149E   7D                     LD   A,L   
149F   B4                     OR   H   
14A0   CA 00 15               JP   Z,expectM_0_2704S45   
14A3   CD 42 0B               CALL   printStr   
14A6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
14B2   CD 42 0B               CALL   printStr   
14B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C4   21 03 00               LD   hl,3   
14C7   E5                     PUSH   hl   
14C8   E5                     PUSH   hl   
14C9   CD 61 0C               CALL   run   
14CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D4   CD CA 0A               CALL   flushBuffer   
14D7   CD 42 0B               CALL   printStr   
14DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E7   E1                     POP   hl   
14E8   E5                     PUSH   hl   
14E9   E5                     PUSH   hl   
14EA   CD 61 0C               CALL   run   
14ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14FC   CD CA 0A               CALL   flushBuffer   
14FF   76                     HALT      
1500                EXPECTM_0_2704S45:      
1500   E1                     POP   HL   
1501                          ;*Macro unroll:  test "4 1 2 +", 3
1501   31 00 4B               LD   SP,STACK   
1504   CD 8A 0B               CALL   coldInit   
1507   CD 7A 49               CALL   execStr   
150A   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1512   CD CA 0A               CALL   flushBuffer   
1515                          ;*Macro unroll:  expect "4 1 2 +",3
1515   E1                     POP   HL   
1516   E5                     PUSH   HL   
1517   11 03 00               LD   DE,3   
151A   B7                     OR   A   
151B   ED 52                  SBC   HL,DE   
151D   7D                     LD   A,L   
151E   B4                     OR   H   
151F   CA 81 15               JP   Z,expectM_0_2705S45   
1522   CD 42 0B               CALL   printStr   
1525   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1533   CD 42 0B               CALL   printStr   
1536   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1545   21 03 00               LD   hl,3   
1548   E5                     PUSH   hl   
1549   E5                     PUSH   hl   
154A   CD 61 0C               CALL   run   
154D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1555   CD CA 0A               CALL   flushBuffer   
1558   CD 42 0B               CALL   printStr   
155B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1568   E1                     POP   hl   
1569   E5                     PUSH   hl   
156A   E5                     PUSH   hl   
156B   CD 61 0C               CALL   run   
156E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157D   CD CA 0A               CALL   flushBuffer   
1580   76                     HALT      
1581                EXPECTM_0_2705S45:      
1581   E1                     POP   HL   
1582                          ;*Macro unroll:  test "123 456 +", 123+456
1582   31 00 4B               LD   SP,STACK   
1585   CD 8A 0B               CALL   coldInit   
1588   CD 7A 49               CALL   execStr   
158B   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1595   CD CA 0A               CALL   flushBuffer   
1598                          ;*Macro unroll:  expect "123 456 +",123+456
1598   E1                     POP   HL   
1599   E5                     PUSH   HL   
159A   11 43 02               LD   DE,123+456   
159D   B7                     OR   A   
159E   ED 52                  SBC   HL,DE   
15A0   7D                     LD   A,L   
15A1   B4                     OR   H   
15A2   CA 06 16               JP   Z,expectM_0_2706S45   
15A5   CD 42 0B               CALL   printStr   
15A8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
15B8   CD 42 0B               CALL   printStr   
15BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15CA   21 43 02               LD   hl,123+456   
15CD   E5                     PUSH   hl   
15CE   E5                     PUSH   hl   
15CF   CD 61 0C               CALL   run   
15D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15DA   CD CA 0A               CALL   flushBuffer   
15DD   CD 42 0B               CALL   printStr   
15E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15ED   E1                     POP   hl   
15EE   E5                     PUSH   hl   
15EF   E5                     PUSH   hl   
15F0   CD 61 0C               CALL   run   
15F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1602   CD CA 0A               CALL   flushBuffer   
1605   76                     HALT      
1606                EXPECTM_0_2706S45:      
1606   E1                     POP   HL   
1607                          ;*Macro unroll:  test "64 128 +", 64+128
1607   31 00 4B               LD   SP,STACK   
160A   CD 8A 0B               CALL   coldInit   
160D   CD 7A 49               CALL   execStr   
1610   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1619   CD CA 0A               CALL   flushBuffer   
161C                          ;*Macro unroll:  expect "64 128 +",64+128
161C   E1                     POP   HL   
161D   E5                     PUSH   HL   
161E   11 C0 00               LD   DE,64+128   
1621   B7                     OR   A   
1622   ED 52                  SBC   HL,DE   
1624   7D                     LD   A,L   
1625   B4                     OR   H   
1626   CA 89 16               JP   Z,expectM_0_2707S45   
1629   CD 42 0B               CALL   printStr   
162C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
163B   CD 42 0B               CALL   printStr   
163E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164D   21 C0 00               LD   hl,64+128   
1650   E5                     PUSH   hl   
1651   E5                     PUSH   hl   
1652   CD 61 0C               CALL   run   
1655   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
165D   CD CA 0A               CALL   flushBuffer   
1660   CD 42 0B               CALL   printStr   
1663   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1670   E1                     POP   hl   
1671   E5                     PUSH   hl   
1672   E5                     PUSH   hl   
1673   CD 61 0C               CALL   run   
1676   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1685   CD CA 0A               CALL   flushBuffer   
1688   76                     HALT      
1689                EXPECTM_0_2707S45:      
1689   E1                     POP   HL   
168A                          ;*Macro unroll:  test "1 2 +", 3
168A   31 00 4B               LD   SP,STACK   
168D   CD 8A 0B               CALL   coldInit   
1690   CD 7A 49               CALL   execStr   
1693   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1699   CD CA 0A               CALL   flushBuffer   
169C                          ;*Macro unroll:  expect "1 2 +",3
169C   E1                     POP   HL   
169D   E5                     PUSH   HL   
169E   11 03 00               LD   DE,3   
16A1   B7                     OR   A   
16A2   ED 52                  SBC   HL,DE   
16A4   7D                     LD   A,L   
16A5   B4                     OR   H   
16A6   CA 06 17               JP   Z,expectM_0_2708S45   
16A9   CD 42 0B               CALL   printStr   
16AC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16B8   CD 42 0B               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 03 00               LD   hl,3   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD 61 0C               CALL   run   
16D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16DA   CD CA 0A               CALL   flushBuffer   
16DD   CD 42 0B               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD 61 0C               CALL   run   
16F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1702   CD CA 0A               CALL   flushBuffer   
1705   76                     HALT      
1706                EXPECTM_0_2708S45:      
1706   E1                     POP   HL   
1707                          ;*Macro unroll:  test "1a= a++ a",2
1707   31 00 4B               LD   SP,STACK   
170A   CD 8A 0B               CALL   coldInit   
170D   CD 7A 49               CALL   execStr   
1710   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
171A   CD CA 0A               CALL   flushBuffer   
171D                          ;*Macro unroll:  expect "1a= a++ a",2
171D   E1                     POP   HL   
171E   E5                     PUSH   HL   
171F   11 02 00               LD   DE,2   
1722   B7                     OR   A   
1723   ED 52                  SBC   HL,DE   
1725   7D                     LD   A,L   
1726   B4                     OR   H   
1727   CA 8B 17               JP   Z,expectM_0_2709S45   
172A   CD 42 0B               CALL   printStr   
172D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
173D   CD 42 0B               CALL   printStr   
1740   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174F   21 02 00               LD   hl,2   
1752   E5                     PUSH   hl   
1753   E5                     PUSH   hl   
1754   CD 61 0C               CALL   run   
1757   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175F   CD CA 0A               CALL   flushBuffer   
1762   CD 42 0B               CALL   printStr   
1765   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1772   E1                     POP   hl   
1773   E5                     PUSH   hl   
1774   E5                     PUSH   hl   
1775   CD 61 0C               CALL   run   
1778   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1787   CD CA 0A               CALL   flushBuffer   
178A   76                     HALT      
178B                EXPECTM_0_2709S45:      
178B   E1                     POP   HL   
178C                          ;*Macro unroll:  test "-1 -1 -",0
178C   31 00 4B               LD   SP,STACK   
178F   CD 8A 0B               CALL   coldInit   
1792   CD 7A 49               CALL   execStr   
1795   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
179D   CD CA 0A               CALL   flushBuffer   
17A0                          ;*Macro unroll:  expect "-1 -1 -",0
17A0   E1                     POP   HL   
17A1   E5                     PUSH   HL   
17A2   11 00 00               LD   DE,0   
17A5   B7                     OR   A   
17A6   ED 52                  SBC   HL,DE   
17A8   7D                     LD   A,L   
17A9   B4                     OR   H   
17AA   CA 0C 18               JP   Z,expectM_0_2710S45   
17AD   CD 42 0B               CALL   printStr   
17B0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
17BE   CD 42 0B               CALL   printStr   
17C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D0   21 00 00               LD   hl,0   
17D3   E5                     PUSH   hl   
17D4   E5                     PUSH   hl   
17D5   CD 61 0C               CALL   run   
17D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17E0   CD CA 0A               CALL   flushBuffer   
17E3   CD 42 0B               CALL   printStr   
17E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F3   E1                     POP   hl   
17F4   E5                     PUSH   hl   
17F5   E5                     PUSH   hl   
17F6   CD 61 0C               CALL   run   
17F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1808   CD CA 0A               CALL   flushBuffer   
180B   76                     HALT      
180C                EXPECTM_0_2710S45:      
180C   E1                     POP   HL   
180D                          ;*Macro unroll:  test "5 3 -", 2
180D   31 00 4B               LD   SP,STACK   
1810   CD 8A 0B               CALL   coldInit   
1813   CD 7A 49               CALL   execStr   
1816   35 20 33 20 2D 00      .CSTR   "5 3 -"   
181C   CD CA 0A               CALL   flushBuffer   
181F                          ;*Macro unroll:  expect "5 3 -",2
181F   E1                     POP   HL   
1820   E5                     PUSH   HL   
1821   11 02 00               LD   DE,2   
1824   B7                     OR   A   
1825   ED 52                  SBC   HL,DE   
1827   7D                     LD   A,L   
1828   B4                     OR   H   
1829   CA 89 18               JP   Z,expectM_0_2711S45   
182C   CD 42 0B               CALL   printStr   
182F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
183B   CD 42 0B               CALL   printStr   
183E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184D   21 02 00               LD   hl,2   
1850   E5                     PUSH   hl   
1851   E5                     PUSH   hl   
1852   CD 61 0C               CALL   run   
1855   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
185D   CD CA 0A               CALL   flushBuffer   
1860   CD 42 0B               CALL   printStr   
1863   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1870   E1                     POP   hl   
1871   E5                     PUSH   hl   
1872   E5                     PUSH   hl   
1873   CD 61 0C               CALL   run   
1876   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1885   CD CA 0A               CALL   flushBuffer   
1888   76                     HALT      
1889                EXPECTM_0_2711S45:      
1889   E1                     POP   HL   
188A                          ;*Macro unroll:  test "2 1 -",1
188A   31 00 4B               LD   SP,STACK   
188D   CD 8A 0B               CALL   coldInit   
1890   CD 7A 49               CALL   execStr   
1893   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1899   CD CA 0A               CALL   flushBuffer   
189C                          ;*Macro unroll:  expect "2 1 -",1
189C   E1                     POP   HL   
189D   E5                     PUSH   HL   
189E   11 01 00               LD   DE,1   
18A1   B7                     OR   A   
18A2   ED 52                  SBC   HL,DE   
18A4   7D                     LD   A,L   
18A5   B4                     OR   H   
18A6   CA 06 19               JP   Z,expectM_0_2712S45   
18A9   CD 42 0B               CALL   printStr   
18AC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
18B8   CD 42 0B               CALL   printStr   
18BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18CA   21 01 00               LD   hl,1   
18CD   E5                     PUSH   hl   
18CE   E5                     PUSH   hl   
18CF   CD 61 0C               CALL   run   
18D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18DA   CD CA 0A               CALL   flushBuffer   
18DD   CD 42 0B               CALL   printStr   
18E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18ED   E1                     POP   hl   
18EE   E5                     PUSH   hl   
18EF   E5                     PUSH   hl   
18F0   CD 61 0C               CALL   run   
18F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1902   CD CA 0A               CALL   flushBuffer   
1905   76                     HALT      
1906                EXPECTM_0_2712S45:      
1906   E1                     POP   HL   
1907                          ;*Macro unroll:  test "3a= a-- a",2
1907   31 00 4B               LD   SP,STACK   
190A   CD 8A 0B               CALL   coldInit   
190D   CD 7A 49               CALL   execStr   
1910   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
191A   CD CA 0A               CALL   flushBuffer   
191D                          ;*Macro unroll:  expect "3a= a-- a",2
191D   E1                     POP   HL   
191E   E5                     PUSH   HL   
191F   11 02 00               LD   DE,2   
1922   B7                     OR   A   
1923   ED 52                  SBC   HL,DE   
1925   7D                     LD   A,L   
1926   B4                     OR   H   
1927   CA 8B 19               JP   Z,expectM_0_2713S45   
192A   CD 42 0B               CALL   printStr   
192D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
193D   CD 42 0B               CALL   printStr   
1940   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194F   21 02 00               LD   hl,2   
1952   E5                     PUSH   hl   
1953   E5                     PUSH   hl   
1954   CD 61 0C               CALL   run   
1957   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195F   CD CA 0A               CALL   flushBuffer   
1962   CD 42 0B               CALL   printStr   
1965   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1972   E1                     POP   hl   
1973   E5                     PUSH   hl   
1974   E5                     PUSH   hl   
1975   CD 61 0C               CALL   run   
1978   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1987   CD CA 0A               CALL   flushBuffer   
198A   76                     HALT      
198B                EXPECTM_0_2713S45:      
198B   E1                     POP   HL   
198C                          ;*Macro unroll:  test "3 5 &", 1
198C   31 00 4B               LD   SP,STACK   
198F   CD 8A 0B               CALL   coldInit   
1992   CD 7A 49               CALL   execStr   
1995   33 20 35 20 26 00      .CSTR   "3 5 &"   
199B   CD CA 0A               CALL   flushBuffer   
199E                          ;*Macro unroll:  expect "3 5 &",1
199E   E1                     POP   HL   
199F   E5                     PUSH   HL   
19A0   11 01 00               LD   DE,1   
19A3   B7                     OR   A   
19A4   ED 52                  SBC   HL,DE   
19A6   7D                     LD   A,L   
19A7   B4                     OR   H   
19A8   CA 08 1A               JP   Z,expectM_0_2714S45   
19AB   CD 42 0B               CALL   printStr   
19AE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
19BA   CD 42 0B               CALL   printStr   
19BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CC   21 01 00               LD   hl,1   
19CF   E5                     PUSH   hl   
19D0   E5                     PUSH   hl   
19D1   CD 61 0C               CALL   run   
19D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19DC   CD CA 0A               CALL   flushBuffer   
19DF   CD 42 0B               CALL   printStr   
19E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19EF   E1                     POP   hl   
19F0   E5                     PUSH   hl   
19F1   E5                     PUSH   hl   
19F2   CD 61 0C               CALL   run   
19F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A04   CD CA 0A               CALL   flushBuffer   
1A07   76                     HALT      
1A08                EXPECTM_0_2714S45:      
1A08   E1                     POP   HL   
1A09                          ;*Macro unroll:  test "3 5 |", 7
1A09   31 00 4B               LD   SP,STACK   
1A0C   CD 8A 0B               CALL   coldInit   
1A0F   CD 7A 49               CALL   execStr   
1A12   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1A18   CD CA 0A               CALL   flushBuffer   
1A1B                          ;*Macro unroll:  expect "3 5 |",7
1A1B   E1                     POP   HL   
1A1C   E5                     PUSH   HL   
1A1D   11 07 00               LD   DE,7   
1A20   B7                     OR   A   
1A21   ED 52                  SBC   HL,DE   
1A23   7D                     LD   A,L   
1A24   B4                     OR   H   
1A25   CA 85 1A               JP   Z,expectM_0_2715S45   
1A28   CD 42 0B               CALL   printStr   
1A2B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1A37   CD 42 0B               CALL   printStr   
1A3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A49   21 07 00               LD   hl,7   
1A4C   E5                     PUSH   hl   
1A4D   E5                     PUSH   hl   
1A4E   CD 61 0C               CALL   run   
1A51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A59   CD CA 0A               CALL   flushBuffer   
1A5C   CD 42 0B               CALL   printStr   
1A5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A6C   E1                     POP   hl   
1A6D   E5                     PUSH   hl   
1A6E   E5                     PUSH   hl   
1A6F   CD 61 0C               CALL   run   
1A72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A81   CD CA 0A               CALL   flushBuffer   
1A84   76                     HALT      
1A85                EXPECTM_0_2715S45:      
1A85   E1                     POP   HL   
1A86                          ;*Macro unroll:  test "3 5 /x", 6
1A86   31 00 4B               LD   SP,STACK   
1A89   CD 8A 0B               CALL   coldInit   
1A8C   CD 7A 49               CALL   execStr   
1A8F   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1A96   CD CA 0A               CALL   flushBuffer   
1A99                          ;*Macro unroll:  expect "3 5 /x",6
1A99   E1                     POP   HL   
1A9A   E5                     PUSH   HL   
1A9B   11 06 00               LD   DE,6   
1A9E   B7                     OR   A   
1A9F   ED 52                  SBC   HL,DE   
1AA1   7D                     LD   A,L   
1AA2   B4                     OR   H   
1AA3   CA 04 1B               JP   Z,expectM_0_2716S45   
1AA6   CD 42 0B               CALL   printStr   
1AA9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1AB6   CD 42 0B               CALL   printStr   
1AB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC8   21 06 00               LD   hl,6   
1ACB   E5                     PUSH   hl   
1ACC   E5                     PUSH   hl   
1ACD   CD 61 0C               CALL   run   
1AD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AD8   CD CA 0A               CALL   flushBuffer   
1ADB   CD 42 0B               CALL   printStr   
1ADE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEB   E1                     POP   hl   
1AEC   E5                     PUSH   hl   
1AED   E5                     PUSH   hl   
1AEE   CD 61 0C               CALL   run   
1AF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B00   CD CA 0A               CALL   flushBuffer   
1B03   76                     HALT      
1B04                EXPECTM_0_2716S45:      
1B04   E1                     POP   HL   
1B05                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B05   31 00 4B               LD   SP,STACK   
1B08   CD 8A 0B               CALL   coldInit   
1B0B   CD 7A 49               CALL   execStr   
1B0E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1B1D   CD CA 0A               CALL   flushBuffer   
1B20                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1B20   E1                     POP   HL   
1B21   E5                     PUSH   HL   
1B22   11 06 00               LD   DE,6   
1B25   B7                     OR   A   
1B26   ED 52                  SBC   HL,DE   
1B28   7D                     LD   A,L   
1B29   B4                     OR   H   
1B2A   CA 93 1B               JP   Z,expectM_0_2717S45   
1B2D   CD 42 0B               CALL   printStr   
1B30   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1B45   CD 42 0B               CALL   printStr   
1B48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B57   21 06 00               LD   hl,6   
1B5A   E5                     PUSH   hl   
1B5B   E5                     PUSH   hl   
1B5C   CD 61 0C               CALL   run   
1B5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B67   CD CA 0A               CALL   flushBuffer   
1B6A   CD 42 0B               CALL   printStr   
1B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7A   E1                     POP   hl   
1B7B   E5                     PUSH   hl   
1B7C   E5                     PUSH   hl   
1B7D   CD 61 0C               CALL   run   
1B80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B8F   CD CA 0A               CALL   flushBuffer   
1B92   76                     HALT      
1B93                EXPECTM_0_2717S45:      
1B93   E1                     POP   HL   
1B94                          ;*Macro unroll:  test "2 3 *", 6
1B94   31 00 4B               LD   SP,STACK   
1B97   CD 8A 0B               CALL   coldInit   
1B9A   CD 7A 49               CALL   execStr   
1B9D   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1BA3   CD CA 0A               CALL   flushBuffer   
1BA6                          ;*Macro unroll:  expect "2 3 *",6
1BA6   E1                     POP   HL   
1BA7   E5                     PUSH   HL   
1BA8   11 06 00               LD   DE,6   
1BAB   B7                     OR   A   
1BAC   ED 52                  SBC   HL,DE   
1BAE   7D                     LD   A,L   
1BAF   B4                     OR   H   
1BB0   CA 10 1C               JP   Z,expectM_0_2718S45   
1BB3   CD 42 0B               CALL   printStr   
1BB6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1BC2   CD 42 0B               CALL   printStr   
1BC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BD4   21 06 00               LD   hl,6   
1BD7   E5                     PUSH   hl   
1BD8   E5                     PUSH   hl   
1BD9   CD 61 0C               CALL   run   
1BDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BE4   CD CA 0A               CALL   flushBuffer   
1BE7   CD 42 0B               CALL   printStr   
1BEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BF7   E1                     POP   hl   
1BF8   E5                     PUSH   hl   
1BF9   E5                     PUSH   hl   
1BFA   CD 61 0C               CALL   run   
1BFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C0C   CD CA 0A               CALL   flushBuffer   
1C0F   76                     HALT      
1C10                EXPECTM_0_2718S45:      
1C10   E1                     POP   HL   
1C11                          ;*Macro unroll:  test "1 2 3 + *", 5
1C11   31 00 4B               LD   SP,STACK   
1C14   CD 8A 0B               CALL   coldInit   
1C17   CD 7A 49               CALL   execStr   
1C1A   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1C24   CD CA 0A               CALL   flushBuffer   
1C27                          ;*Macro unroll:  expect "1 2 3 + *",5
1C27   E1                     POP   HL   
1C28   E5                     PUSH   HL   
1C29   11 05 00               LD   DE,5   
1C2C   B7                     OR   A   
1C2D   ED 52                  SBC   HL,DE   
1C2F   7D                     LD   A,L   
1C30   B4                     OR   H   
1C31   CA 95 1C               JP   Z,expectM_0_2719S45   
1C34   CD 42 0B               CALL   printStr   
1C37   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1C47   CD 42 0B               CALL   printStr   
1C4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C59   21 05 00               LD   hl,5   
1C5C   E5                     PUSH   hl   
1C5D   E5                     PUSH   hl   
1C5E   CD 61 0C               CALL   run   
1C61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C69   CD CA 0A               CALL   flushBuffer   
1C6C   CD 42 0B               CALL   printStr   
1C6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7C   E1                     POP   hl   
1C7D   E5                     PUSH   hl   
1C7E   E5                     PUSH   hl   
1C7F   CD 61 0C               CALL   run   
1C82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C91   CD CA 0A               CALL   flushBuffer   
1C94   76                     HALT      
1C95                EXPECTM_0_2719S45:      
1C95   E1                     POP   HL   
1C96                          ;*Macro unroll:  test "7 3 /", 2
1C96   31 00 4B               LD   SP,STACK   
1C99   CD 8A 0B               CALL   coldInit   
1C9C   CD 7A 49               CALL   execStr   
1C9F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CA5   CD CA 0A               CALL   flushBuffer   
1CA8                          ;*Macro unroll:  expect "7 3 /",2
1CA8   E1                     POP   HL   
1CA9   E5                     PUSH   HL   
1CAA   11 02 00               LD   DE,2   
1CAD   B7                     OR   A   
1CAE   ED 52                  SBC   HL,DE   
1CB0   7D                     LD   A,L   
1CB1   B4                     OR   H   
1CB2   CA 12 1D               JP   Z,expectM_0_2720S45   
1CB5   CD 42 0B               CALL   printStr   
1CB8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CC4   CD 42 0B               CALL   printStr   
1CC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD6   21 02 00               LD   hl,2   
1CD9   E5                     PUSH   hl   
1CDA   E5                     PUSH   hl   
1CDB   CD 61 0C               CALL   run   
1CDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE6   CD CA 0A               CALL   flushBuffer   
1CE9   CD 42 0B               CALL   printStr   
1CEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF9   E1                     POP   hl   
1CFA   E5                     PUSH   hl   
1CFB   E5                     PUSH   hl   
1CFC   CD 61 0C               CALL   run   
1CFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0E   CD CA 0A               CALL   flushBuffer   
1D11   76                     HALT      
1D12                EXPECTM_0_2720S45:      
1D12   E1                     POP   HL   
1D13                          ;*Macro unroll:  test "7 3 / /re", 1
1D13   31 00 4B               LD   SP,STACK   
1D16   CD 8A 0B               CALL   coldInit   
1D19   CD 7A 49               CALL   execStr   
1D1C   37 20 33 20 2F 20 2F 72 65 00 .CSTR   "7 3 / /re"   
1D26   CD CA 0A               CALL   flushBuffer   
1D29                          ;*Macro unroll:  expect "7 3 / /re",1
1D29   E1                     POP   HL   
1D2A   E5                     PUSH   HL   
1D2B   11 01 00               LD   DE,1   
1D2E   B7                     OR   A   
1D2F   ED 52                  SBC   HL,DE   
1D31   7D                     LD   A,L   
1D32   B4                     OR   H   
1D33   CA 97 1D               JP   Z,expectM_0_2721S45   
1D36   CD 42 0B               CALL   printStr   
1D39   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1D49   CD 42 0B               CALL   printStr   
1D4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5B   21 01 00               LD   hl,1   
1D5E   E5                     PUSH   hl   
1D5F   E5                     PUSH   hl   
1D60   CD 61 0C               CALL   run   
1D63   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D6B   CD CA 0A               CALL   flushBuffer   
1D6E   CD 42 0B               CALL   printStr   
1D71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7E   E1                     POP   hl   
1D7F   E5                     PUSH   hl   
1D80   E5                     PUSH   hl   
1D81   CD 61 0C               CALL   run   
1D84   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D93   CD CA 0A               CALL   flushBuffer   
1D96   76                     HALT      
1D97                EXPECTM_0_2721S45:      
1D97   E1                     POP   HL   
1D98                          ;*Macro unroll:  test "7 3 /", 2
1D98   31 00 4B               LD   SP,STACK   
1D9B   CD 8A 0B               CALL   coldInit   
1D9E   CD 7A 49               CALL   execStr   
1DA1   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1DA7   CD CA 0A               CALL   flushBuffer   
1DAA                          ;*Macro unroll:  expect "7 3 /",2
1DAA   E1                     POP   HL   
1DAB   E5                     PUSH   HL   
1DAC   11 02 00               LD   DE,2   
1DAF   B7                     OR   A   
1DB0   ED 52                  SBC   HL,DE   
1DB2   7D                     LD   A,L   
1DB3   B4                     OR   H   
1DB4   CA 14 1E               JP   Z,expectM_0_2722S45   
1DB7   CD 42 0B               CALL   printStr   
1DBA   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC6   CD 42 0B               CALL   printStr   
1DC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD8   21 02 00               LD   hl,2   
1DDB   E5                     PUSH   hl   
1DDC   E5                     PUSH   hl   
1DDD   CD 61 0C               CALL   run   
1DE0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DE8   CD CA 0A               CALL   flushBuffer   
1DEB   CD 42 0B               CALL   printStr   
1DEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DFB   E1                     POP   hl   
1DFC   E5                     PUSH   hl   
1DFD   E5                     PUSH   hl   
1DFE   CD 61 0C               CALL   run   
1E01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E10   CD CA 0A               CALL   flushBuffer   
1E13   76                     HALT      
1E14                EXPECTM_0_2722S45:      
1E14   E1                     POP   HL   
1E15                          ;*Macro unroll:  test "2 3 ==", FALSE
1E15   31 00 4B               LD   SP,STACK   
1E18   CD 8A 0B               CALL   coldInit   
1E1B   CD 7A 49               CALL   execStr   
1E1E   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1E25   CD CA 0A               CALL   flushBuffer   
1E28                          ;*Macro unroll:  expect "2 3 ==",FALSE
1E28   E1                     POP   HL   
1E29   E5                     PUSH   HL   
1E2A   11 00 00               LD   DE,FALSE   
1E2D   B7                     OR   A   
1E2E   ED 52                  SBC   HL,DE   
1E30   7D                     LD   A,L   
1E31   B4                     OR   H   
1E32   CA 93 1E               JP   Z,expectM_0_2723S45   
1E35   CD 42 0B               CALL   printStr   
1E38   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1E45   CD 42 0B               CALL   printStr   
1E48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E57   21 00 00               LD   hl,FALSE   
1E5A   E5                     PUSH   hl   
1E5B   E5                     PUSH   hl   
1E5C   CD 61 0C               CALL   run   
1E5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E67   CD CA 0A               CALL   flushBuffer   
1E6A   CD 42 0B               CALL   printStr   
1E6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7A   E1                     POP   hl   
1E7B   E5                     PUSH   hl   
1E7C   E5                     PUSH   hl   
1E7D   CD 61 0C               CALL   run   
1E80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E8F   CD CA 0A               CALL   flushBuffer   
1E92   76                     HALT      
1E93                EXPECTM_0_2723S45:      
1E93   E1                     POP   HL   
1E94                          ;*Macro unroll:  test "3 3 ==", TRUE
1E94   31 00 4B               LD   SP,STACK   
1E97   CD 8A 0B               CALL   coldInit   
1E9A   CD 7A 49               CALL   execStr   
1E9D   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1EA4   CD CA 0A               CALL   flushBuffer   
1EA7                          ;*Macro unroll:  expect "3 3 ==",TRUE
1EA7   E1                     POP   HL   
1EA8   E5                     PUSH   HL   
1EA9   11 FF FF               LD   DE,TRUE   
1EAC   B7                     OR   A   
1EAD   ED 52                  SBC   HL,DE   
1EAF   7D                     LD   A,L   
1EB0   B4                     OR   H   
1EB1   CA 12 1F               JP   Z,expectM_0_2724S45   
1EB4   CD 42 0B               CALL   printStr   
1EB7   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1EC4   CD 42 0B               CALL   printStr   
1EC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED6   21 FF FF               LD   hl,TRUE   
1ED9   E5                     PUSH   hl   
1EDA   E5                     PUSH   hl   
1EDB   CD 61 0C               CALL   run   
1EDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EE6   CD CA 0A               CALL   flushBuffer   
1EE9   CD 42 0B               CALL   printStr   
1EEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EF9   E1                     POP   hl   
1EFA   E5                     PUSH   hl   
1EFB   E5                     PUSH   hl   
1EFC   CD 61 0C               CALL   run   
1EFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F0E   CD CA 0A               CALL   flushBuffer   
1F11   76                     HALT      
1F12                EXPECTM_0_2724S45:      
1F12   E1                     POP   HL   
1F13                          ;*Macro unroll:  test "1 2 <", TRUE
1F13   31 00 4B               LD   SP,STACK   
1F16   CD 8A 0B               CALL   coldInit   
1F19   CD 7A 49               CALL   execStr   
1F1C   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1F22   CD CA 0A               CALL   flushBuffer   
1F25                          ;*Macro unroll:  expect "1 2 <",TRUE
1F25   E1                     POP   HL   
1F26   E5                     PUSH   HL   
1F27   11 FF FF               LD   DE,TRUE   
1F2A   B7                     OR   A   
1F2B   ED 52                  SBC   HL,DE   
1F2D   7D                     LD   A,L   
1F2E   B4                     OR   H   
1F2F   CA 8F 1F               JP   Z,expectM_0_2725S45   
1F32   CD 42 0B               CALL   printStr   
1F35   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1F41   CD 42 0B               CALL   printStr   
1F44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F53   21 FF FF               LD   hl,TRUE   
1F56   E5                     PUSH   hl   
1F57   E5                     PUSH   hl   
1F58   CD 61 0C               CALL   run   
1F5B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F63   CD CA 0A               CALL   flushBuffer   
1F66   CD 42 0B               CALL   printStr   
1F69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F76   E1                     POP   hl   
1F77   E5                     PUSH   hl   
1F78   E5                     PUSH   hl   
1F79   CD 61 0C               CALL   run   
1F7C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F8B   CD CA 0A               CALL   flushBuffer   
1F8E   76                     HALT      
1F8F                EXPECTM_0_2725S45:      
1F8F   E1                     POP   HL   
1F90                          ;*Macro unroll:  test "2 1 <", FALSE
1F90   31 00 4B               LD   SP,STACK   
1F93   CD 8A 0B               CALL   coldInit   
1F96   CD 7A 49               CALL   execStr   
1F99   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1F9F   CD CA 0A               CALL   flushBuffer   
1FA2                          ;*Macro unroll:  expect "2 1 <",FALSE
1FA2   E1                     POP   HL   
1FA3   E5                     PUSH   HL   
1FA4   11 00 00               LD   DE,FALSE   
1FA7   B7                     OR   A   
1FA8   ED 52                  SBC   HL,DE   
1FAA   7D                     LD   A,L   
1FAB   B4                     OR   H   
1FAC   CA 0C 20               JP   Z,expectM_0_2726S45   
1FAF   CD 42 0B               CALL   printStr   
1FB2   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1FBE   CD 42 0B               CALL   printStr   
1FC1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FD0   21 00 00               LD   hl,FALSE   
1FD3   E5                     PUSH   hl   
1FD4   E5                     PUSH   hl   
1FD5   CD 61 0C               CALL   run   
1FD8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FE0   CD CA 0A               CALL   flushBuffer   
1FE3   CD 42 0B               CALL   printStr   
1FE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF3   E1                     POP   hl   
1FF4   E5                     PUSH   hl   
1FF5   E5                     PUSH   hl   
1FF6   CD 61 0C               CALL   run   
1FF9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2008   CD CA 0A               CALL   flushBuffer   
200B   76                     HALT      
200C                EXPECTM_0_2726S45:      
200C   E1                     POP   HL   
200D                          ;*Macro unroll:  test "2 3 <", TRUE
200D   31 00 4B               LD   SP,STACK   
2010   CD 8A 0B               CALL   coldInit   
2013   CD 7A 49               CALL   execStr   
2016   32 20 33 20 3C 00      .CSTR   "2 3 <"   
201C   CD CA 0A               CALL   flushBuffer   
201F                          ;*Macro unroll:  expect "2 3 <",TRUE
201F   E1                     POP   HL   
2020   E5                     PUSH   HL   
2021   11 FF FF               LD   DE,TRUE   
2024   B7                     OR   A   
2025   ED 52                  SBC   HL,DE   
2027   7D                     LD   A,L   
2028   B4                     OR   H   
2029   CA 89 20               JP   Z,expectM_0_2727S45   
202C   CD 42 0B               CALL   printStr   
202F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
203B   CD 42 0B               CALL   printStr   
203E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
204D   21 FF FF               LD   hl,TRUE   
2050   E5                     PUSH   hl   
2051   E5                     PUSH   hl   
2052   CD 61 0C               CALL   run   
2055   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
205D   CD CA 0A               CALL   flushBuffer   
2060   CD 42 0B               CALL   printStr   
2063   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2070   E1                     POP   hl   
2071   E5                     PUSH   hl   
2072   E5                     PUSH   hl   
2073   CD 61 0C               CALL   run   
2076   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2085   CD CA 0A               CALL   flushBuffer   
2088   76                     HALT      
2089                EXPECTM_0_2727S45:      
2089   E1                     POP   HL   
208A                          ;*Macro unroll:  test "3 3 <", FALSE
208A   31 00 4B               LD   SP,STACK   
208D   CD 8A 0B               CALL   coldInit   
2090   CD 7A 49               CALL   execStr   
2093   33 20 33 20 3C 00      .CSTR   "3 3 <"   
2099   CD CA 0A               CALL   flushBuffer   
209C                          ;*Macro unroll:  expect "3 3 <",FALSE
209C   E1                     POP   HL   
209D   E5                     PUSH   HL   
209E   11 00 00               LD   DE,FALSE   
20A1   B7                     OR   A   
20A2   ED 52                  SBC   HL,DE   
20A4   7D                     LD   A,L   
20A5   B4                     OR   H   
20A6   CA 06 21               JP   Z,expectM_0_2728S45   
20A9   CD 42 0B               CALL   printStr   
20AC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
20B8   CD 42 0B               CALL   printStr   
20BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20CA   21 00 00               LD   hl,FALSE   
20CD   E5                     PUSH   hl   
20CE   E5                     PUSH   hl   
20CF   CD 61 0C               CALL   run   
20D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20DA   CD CA 0A               CALL   flushBuffer   
20DD   CD 42 0B               CALL   printStr   
20E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20ED   E1                     POP   hl   
20EE   E5                     PUSH   hl   
20EF   E5                     PUSH   hl   
20F0   CD 61 0C               CALL   run   
20F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2102   CD CA 0A               CALL   flushBuffer   
2105   76                     HALT      
2106                EXPECTM_0_2728S45:      
2106   E1                     POP   HL   
2107                          ;*Macro unroll:  test "1 2 >", FALSE
2107   31 00 4B               LD   SP,STACK   
210A   CD 8A 0B               CALL   coldInit   
210D   CD 7A 49               CALL   execStr   
2110   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2116   CD CA 0A               CALL   flushBuffer   
2119                          ;*Macro unroll:  expect "1 2 >",FALSE
2119   E1                     POP   HL   
211A   E5                     PUSH   HL   
211B   11 00 00               LD   DE,FALSE   
211E   B7                     OR   A   
211F   ED 52                  SBC   HL,DE   
2121   7D                     LD   A,L   
2122   B4                     OR   H   
2123   CA 83 21               JP   Z,expectM_0_2729S45   
2126   CD 42 0B               CALL   printStr   
2129   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2135   CD 42 0B               CALL   printStr   
2138   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2147   21 00 00               LD   hl,FALSE   
214A   E5                     PUSH   hl   
214B   E5                     PUSH   hl   
214C   CD 61 0C               CALL   run   
214F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2157   CD CA 0A               CALL   flushBuffer   
215A   CD 42 0B               CALL   printStr   
215D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
216A   E1                     POP   hl   
216B   E5                     PUSH   hl   
216C   E5                     PUSH   hl   
216D   CD 61 0C               CALL   run   
2170   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
217F   CD CA 0A               CALL   flushBuffer   
2182   76                     HALT      
2183                EXPECTM_0_2729S45:      
2183   E1                     POP   HL   
2184                          ;*Macro unroll:  test "2 1 >", TRUE
2184   31 00 4B               LD   SP,STACK   
2187   CD 8A 0B               CALL   coldInit   
218A   CD 7A 49               CALL   execStr   
218D   32 20 31 20 3E 00      .CSTR   "2 1 >"   
2193   CD CA 0A               CALL   flushBuffer   
2196                          ;*Macro unroll:  expect "2 1 >",TRUE
2196   E1                     POP   HL   
2197   E5                     PUSH   HL   
2198   11 FF FF               LD   DE,TRUE   
219B   B7                     OR   A   
219C   ED 52                  SBC   HL,DE   
219E   7D                     LD   A,L   
219F   B4                     OR   H   
21A0   CA 00 22               JP   Z,expectM_0_2730S45   
21A3   CD 42 0B               CALL   printStr   
21A6   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
21B2   CD 42 0B               CALL   printStr   
21B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C4   21 FF FF               LD   hl,TRUE   
21C7   E5                     PUSH   hl   
21C8   E5                     PUSH   hl   
21C9   CD 61 0C               CALL   run   
21CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D4   CD CA 0A               CALL   flushBuffer   
21D7   CD 42 0B               CALL   printStr   
21DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E7   E1                     POP   hl   
21E8   E5                     PUSH   hl   
21E9   E5                     PUSH   hl   
21EA   CD 61 0C               CALL   run   
21ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21FC   CD CA 0A               CALL   flushBuffer   
21FF   76                     HALT      
2200                EXPECTM_0_2730S45:      
2200   E1                     POP   HL   
2201                          ;*Macro unroll:  test "3 3 >", FALSE
2201   31 00 4B               LD   SP,STACK   
2204   CD 8A 0B               CALL   coldInit   
2207   CD 7A 49               CALL   execStr   
220A   33 20 33 20 3E 00      .CSTR   "3 3 >"   
2210   CD CA 0A               CALL   flushBuffer   
2213                          ;*Macro unroll:  expect "3 3 >",FALSE
2213   E1                     POP   HL   
2214   E5                     PUSH   HL   
2215   11 00 00               LD   DE,FALSE   
2218   B7                     OR   A   
2219   ED 52                  SBC   HL,DE   
221B   7D                     LD   A,L   
221C   B4                     OR   H   
221D   CA 7D 22               JP   Z,expectM_0_2731S45   
2220   CD 42 0B               CALL   printStr   
2223   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
222F   CD 42 0B               CALL   printStr   
2232   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2241   21 00 00               LD   hl,FALSE   
2244   E5                     PUSH   hl   
2245   E5                     PUSH   hl   
2246   CD 61 0C               CALL   run   
2249   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2251   CD CA 0A               CALL   flushBuffer   
2254   CD 42 0B               CALL   printStr   
2257   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2264   E1                     POP   hl   
2265   E5                     PUSH   hl   
2266   E5                     PUSH   hl   
2267   CD 61 0C               CALL   run   
226A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2279   CD CA 0A               CALL   flushBuffer   
227C   76                     HALT      
227D                EXPECTM_0_2731S45:      
227D   E1                     POP   HL   
227E                          ;*Macro unroll:  test "4 3 >", TRUE
227E   31 00 4B               LD   SP,STACK   
2281   CD 8A 0B               CALL   coldInit   
2284   CD 7A 49               CALL   execStr   
2287   34 20 33 20 3E 00      .CSTR   "4 3 >"   
228D   CD CA 0A               CALL   flushBuffer   
2290                          ;*Macro unroll:  expect "4 3 >",TRUE
2290   E1                     POP   HL   
2291   E5                     PUSH   HL   
2292   11 FF FF               LD   DE,TRUE   
2295   B7                     OR   A   
2296   ED 52                  SBC   HL,DE   
2298   7D                     LD   A,L   
2299   B4                     OR   H   
229A   CA FA 22               JP   Z,expectM_0_2732S45   
229D   CD 42 0B               CALL   printStr   
22A0   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
22AC   CD 42 0B               CALL   printStr   
22AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22BE   21 FF FF               LD   hl,TRUE   
22C1   E5                     PUSH   hl   
22C2   E5                     PUSH   hl   
22C3   CD 61 0C               CALL   run   
22C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22CE   CD CA 0A               CALL   flushBuffer   
22D1   CD 42 0B               CALL   printStr   
22D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E1   E1                     POP   hl   
22E2   E5                     PUSH   hl   
22E3   E5                     PUSH   hl   
22E4   CD 61 0C               CALL   run   
22E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22F6   CD CA 0A               CALL   flushBuffer   
22F9   76                     HALT      
22FA                EXPECTM_0_2732S45:      
22FA   E1                     POP   HL   
22FB                          ;*Macro unroll:  test "2 2 <=", TRUE
22FB   31 00 4B               LD   SP,STACK   
22FE   CD 8A 0B               CALL   coldInit   
2301   CD 7A 49               CALL   execStr   
2304   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
230B   CD CA 0A               CALL   flushBuffer   
230E                          ;*Macro unroll:  expect "2 2 <=",TRUE
230E   E1                     POP   HL   
230F   E5                     PUSH   HL   
2310   11 FF FF               LD   DE,TRUE   
2313   B7                     OR   A   
2314   ED 52                  SBC   HL,DE   
2316   7D                     LD   A,L   
2317   B4                     OR   H   
2318   CA 79 23               JP   Z,expectM_0_2733S45   
231B   CD 42 0B               CALL   printStr   
231E   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
232B   CD 42 0B               CALL   printStr   
232E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233D   21 FF FF               LD   hl,TRUE   
2340   E5                     PUSH   hl   
2341   E5                     PUSH   hl   
2342   CD 61 0C               CALL   run   
2345   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
234D   CD CA 0A               CALL   flushBuffer   
2350   CD 42 0B               CALL   printStr   
2353   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2360   E1                     POP   hl   
2361   E5                     PUSH   hl   
2362   E5                     PUSH   hl   
2363   CD 61 0C               CALL   run   
2366   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2375   CD CA 0A               CALL   flushBuffer   
2378   76                     HALT      
2379                EXPECTM_0_2733S45:      
2379   E1                     POP   HL   
237A                          ;*Macro unroll:  test "2 2 >=", TRUE
237A   31 00 4B               LD   SP,STACK   
237D   CD 8A 0B               CALL   coldInit   
2380   CD 7A 49               CALL   execStr   
2383   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
238A   CD CA 0A               CALL   flushBuffer   
238D                          ;*Macro unroll:  expect "2 2 >=",TRUE
238D   E1                     POP   HL   
238E   E5                     PUSH   HL   
238F   11 FF FF               LD   DE,TRUE   
2392   B7                     OR   A   
2393   ED 52                  SBC   HL,DE   
2395   7D                     LD   A,L   
2396   B4                     OR   H   
2397   CA F8 23               JP   Z,expectM_0_2734S45   
239A   CD 42 0B               CALL   printStr   
239D   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
23AA   CD 42 0B               CALL   printStr   
23AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BC   21 FF FF               LD   hl,TRUE   
23BF   E5                     PUSH   hl   
23C0   E5                     PUSH   hl   
23C1   CD 61 0C               CALL   run   
23C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23CC   CD CA 0A               CALL   flushBuffer   
23CF   CD 42 0B               CALL   printStr   
23D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23DF   E1                     POP   hl   
23E0   E5                     PUSH   hl   
23E1   E5                     PUSH   hl   
23E2   CD 61 0C               CALL   run   
23E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23F4   CD CA 0A               CALL   flushBuffer   
23F7   76                     HALT      
23F8                EXPECTM_0_2734S45:      
23F8   E1                     POP   HL   
23F9                          ;*Macro unroll:  test "3 1 <<", 6
23F9   31 00 4B               LD   SP,STACK   
23FC   CD 8A 0B               CALL   coldInit   
23FF   CD 7A 49               CALL   execStr   
2402   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
2409   CD CA 0A               CALL   flushBuffer   
240C                          ;*Macro unroll:  expect "3 1 <<",6
240C   E1                     POP   HL   
240D   E5                     PUSH   HL   
240E   11 06 00               LD   DE,6   
2411   B7                     OR   A   
2412   ED 52                  SBC   HL,DE   
2414   7D                     LD   A,L   
2415   B4                     OR   H   
2416   CA 77 24               JP   Z,expectM_0_2735S45   
2419   CD 42 0B               CALL   printStr   
241C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2429   CD 42 0B               CALL   printStr   
242C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243B   21 06 00               LD   hl,6   
243E   E5                     PUSH   hl   
243F   E5                     PUSH   hl   
2440   CD 61 0C               CALL   run   
2443   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
244B   CD CA 0A               CALL   flushBuffer   
244E   CD 42 0B               CALL   printStr   
2451   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
245E   E1                     POP   hl   
245F   E5                     PUSH   hl   
2460   E5                     PUSH   hl   
2461   CD 61 0C               CALL   run   
2464   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2473   CD CA 0A               CALL   flushBuffer   
2476   76                     HALT      
2477                EXPECTM_0_2735S45:      
2477   E1                     POP   HL   
2478                          ;*Macro unroll:  test "10 1 >>", 5
2478   31 00 4B               LD   SP,STACK   
247B   CD 8A 0B               CALL   coldInit   
247E   CD 7A 49               CALL   execStr   
2481   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2489   CD CA 0A               CALL   flushBuffer   
248C                          ;*Macro unroll:  expect "10 1 >>",5
248C   E1                     POP   HL   
248D   E5                     PUSH   HL   
248E   11 05 00               LD   DE,5   
2491   B7                     OR   A   
2492   ED 52                  SBC   HL,DE   
2494   7D                     LD   A,L   
2495   B4                     OR   H   
2496   CA F8 24               JP   Z,expectM_0_2736S45   
2499   CD 42 0B               CALL   printStr   
249C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
24AA   CD 42 0B               CALL   printStr   
24AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BC   21 05 00               LD   hl,5   
24BF   E5                     PUSH   hl   
24C0   E5                     PUSH   hl   
24C1   CD 61 0C               CALL   run   
24C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24CC   CD CA 0A               CALL   flushBuffer   
24CF   CD 42 0B               CALL   printStr   
24D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DF   E1                     POP   hl   
24E0   E5                     PUSH   hl   
24E1   E5                     PUSH   hl   
24E2   CD 61 0C               CALL   run   
24E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F4   CD CA 0A               CALL   flushBuffer   
24F7   76                     HALT      
24F8                EXPECTM_0_2736S45:      
24F8   E1                     POP   HL   
24F9                          ;*Macro unroll:  test "1 x = x", 1
24F9   31 00 4B               LD   SP,STACK   
24FC   CD 8A 0B               CALL   coldInit   
24FF   CD 7A 49               CALL   execStr   
2502   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
250A   CD CA 0A               CALL   flushBuffer   
250D                          ;*Macro unroll:  expect "1 x = x",1
250D   E1                     POP   HL   
250E   E5                     PUSH   HL   
250F   11 01 00               LD   DE,1   
2512   B7                     OR   A   
2513   ED 52                  SBC   HL,DE   
2515   7D                     LD   A,L   
2516   B4                     OR   H   
2517   CA 79 25               JP   Z,expectM_0_2737S45   
251A   CD 42 0B               CALL   printStr   
251D   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
252B   CD 42 0B               CALL   printStr   
252E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253D   21 01 00               LD   hl,1   
2540   E5                     PUSH   hl   
2541   E5                     PUSH   hl   
2542   CD 61 0C               CALL   run   
2545   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
254D   CD CA 0A               CALL   flushBuffer   
2550   CD 42 0B               CALL   printStr   
2553   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2560   E1                     POP   hl   
2561   E5                     PUSH   hl   
2562   E5                     PUSH   hl   
2563   CD 61 0C               CALL   run   
2566   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2575   CD CA 0A               CALL   flushBuffer   
2578   76                     HALT      
2579                EXPECTM_0_2737S45:      
2579   E1                     POP   HL   
257A                          ;*Macro unroll:  test "1{}^", 1
257A   31 00 4B               LD   SP,STACK   
257D   CD 8A 0B               CALL   coldInit   
2580   CD 7A 49               CALL   execStr   
2583   31 7B 7D 5E 00         .CSTR   "1{}^"   
2588   CD CA 0A               CALL   flushBuffer   
258B                          ;*Macro unroll:  expect "1{}^",1
258B   E1                     POP   HL   
258C   E5                     PUSH   HL   
258D   11 01 00               LD   DE,1   
2590   B7                     OR   A   
2591   ED 52                  SBC   HL,DE   
2593   7D                     LD   A,L   
2594   B4                     OR   H   
2595   CA F4 25               JP   Z,expectM_0_2738S45   
2598   CD 42 0B               CALL   printStr   
259B   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
25A6   CD 42 0B               CALL   printStr   
25A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B8   21 01 00               LD   hl,1   
25BB   E5                     PUSH   hl   
25BC   E5                     PUSH   hl   
25BD   CD 61 0C               CALL   run   
25C0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25C8   CD CA 0A               CALL   flushBuffer   
25CB   CD 42 0B               CALL   printStr   
25CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DB   E1                     POP   hl   
25DC   E5                     PUSH   hl   
25DD   E5                     PUSH   hl   
25DE   CD 61 0C               CALL   run   
25E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25F0   CD CA 0A               CALL   flushBuffer   
25F3   76                     HALT      
25F4                EXPECTM_0_2738S45:      
25F4   E1                     POP   HL   
25F5                          ;*Macro unroll:  test "{1}^", 1
25F5   31 00 4B               LD   SP,STACK   
25F8   CD 8A 0B               CALL   coldInit   
25FB   CD 7A 49               CALL   execStr   
25FE   7B 31 7D 5E 00         .CSTR   "{1}^"   
2603   CD CA 0A               CALL   flushBuffer   
2606                          ;*Macro unroll:  expect "{1}^",1
2606   E1                     POP   HL   
2607   E5                     PUSH   HL   
2608   11 01 00               LD   DE,1   
260B   B7                     OR   A   
260C   ED 52                  SBC   HL,DE   
260E   7D                     LD   A,L   
260F   B4                     OR   H   
2610   CA 6F 26               JP   Z,expectM_0_2739S45   
2613   CD 42 0B               CALL   printStr   
2616   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2621   CD 42 0B               CALL   printStr   
2624   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2633   21 01 00               LD   hl,1   
2636   E5                     PUSH   hl   
2637   E5                     PUSH   hl   
2638   CD 61 0C               CALL   run   
263B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2643   CD CA 0A               CALL   flushBuffer   
2646   CD 42 0B               CALL   printStr   
2649   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2656   E1                     POP   hl   
2657   E5                     PUSH   hl   
2658   E5                     PUSH   hl   
2659   CD 61 0C               CALL   run   
265C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
266B   CD CA 0A               CALL   flushBuffer   
266E   76                     HALT      
266F                EXPECTM_0_2739S45:      
266F   E1                     POP   HL   
2670                          ;*Macro unroll:  test "{{1}^}^", 1
2670   31 00 4B               LD   SP,STACK   
2673   CD 8A 0B               CALL   coldInit   
2676   CD 7A 49               CALL   execStr   
2679   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2681   CD CA 0A               CALL   flushBuffer   
2684                          ;*Macro unroll:  expect "{{1}^}^",1
2684   E1                     POP   HL   
2685   E5                     PUSH   HL   
2686   11 01 00               LD   DE,1   
2689   B7                     OR   A   
268A   ED 52                  SBC   HL,DE   
268C   7D                     LD   A,L   
268D   B4                     OR   H   
268E   CA F0 26               JP   Z,expectM_0_2740S45   
2691   CD 42 0B               CALL   printStr   
2694   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
26A2   CD 42 0B               CALL   printStr   
26A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B4   21 01 00               LD   hl,1   
26B7   E5                     PUSH   hl   
26B8   E5                     PUSH   hl   
26B9   CD 61 0C               CALL   run   
26BC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26C4   CD CA 0A               CALL   flushBuffer   
26C7   CD 42 0B               CALL   printStr   
26CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D7   E1                     POP   hl   
26D8   E5                     PUSH   hl   
26D9   E5                     PUSH   hl   
26DA   CD 61 0C               CALL   run   
26DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26EC   CD CA 0A               CALL   flushBuffer   
26EF   76                     HALT      
26F0                EXPECTM_0_2740S45:      
26F0   E1                     POP   HL   
26F1                          ;*Macro unroll:  test "{{{1}^}^}^", 1
26F1   31 00 4B               LD   SP,STACK   
26F4   CD 8A 0B               CALL   coldInit   
26F7   CD 7A 49               CALL   execStr   
26FA   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2705   CD CA 0A               CALL   flushBuffer   
2708                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2708   E1                     POP   HL   
2709   E5                     PUSH   HL   
270A   11 01 00               LD   DE,1   
270D   B7                     OR   A   
270E   ED 52                  SBC   HL,DE   
2710   7D                     LD   A,L   
2711   B4                     OR   H   
2712   CA 77 27               JP   Z,expectM_0_2741S45   
2715   CD 42 0B               CALL   printStr   
2718   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2729   CD 42 0B               CALL   printStr   
272C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
273B   21 01 00               LD   hl,1   
273E   E5                     PUSH   hl   
273F   E5                     PUSH   hl   
2740   CD 61 0C               CALL   run   
2743   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
274B   CD CA 0A               CALL   flushBuffer   
274E   CD 42 0B               CALL   printStr   
2751   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275E   E1                     POP   hl   
275F   E5                     PUSH   hl   
2760   E5                     PUSH   hl   
2761   CD 61 0C               CALL   run   
2764   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2773   CD CA 0A               CALL   flushBuffer   
2776   76                     HALT      
2777                EXPECTM_0_2741S45:      
2777   E1                     POP   HL   
2778                          ;*Macro unroll:  test "5 /f{10} ?", 5
2778   31 00 4B               LD   SP,STACK   
277B   CD 8A 0B               CALL   coldInit   
277E   CD 7A 49               CALL   execStr   
2781   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
278C   CD CA 0A               CALL   flushBuffer   
278F                          ;*Macro unroll:  expect "5 /f{10} ?",5
278F   E1                     POP   HL   
2790   E5                     PUSH   HL   
2791   11 05 00               LD   DE,5   
2794   B7                     OR   A   
2795   ED 52                  SBC   HL,DE   
2797   7D                     LD   A,L   
2798   B4                     OR   H   
2799   CA FE 27               JP   Z,expectM_0_2742S45   
279C   CD 42 0B               CALL   printStr   
279F   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
27B0   CD 42 0B               CALL   printStr   
27B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27C2   21 05 00               LD   hl,5   
27C5   E5                     PUSH   hl   
27C6   E5                     PUSH   hl   
27C7   CD 61 0C               CALL   run   
27CA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27D2   CD CA 0A               CALL   flushBuffer   
27D5   CD 42 0B               CALL   printStr   
27D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E5   E1                     POP   hl   
27E6   E5                     PUSH   hl   
27E7   E5                     PUSH   hl   
27E8   CD 61 0C               CALL   run   
27EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27FA   CD CA 0A               CALL   flushBuffer   
27FD   76                     HALT      
27FE                EXPECTM_0_2742S45:      
27FE   E1                     POP   HL   
27FF                          ;*Macro unroll:  test "5 /t{10} ? +", 15
27FF   31 00 4B               LD   SP,STACK   
2802   CD 8A 0B               CALL   coldInit   
2805   CD 7A 49               CALL   execStr   
2808   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
2815   CD CA 0A               CALL   flushBuffer   
2818                          ;*Macro unroll:  expect "5 /t{10} ? +",15
2818   E1                     POP   HL   
2819   E5                     PUSH   HL   
281A   11 0F 00               LD   DE,15   
281D   B7                     OR   A   
281E   ED 52                  SBC   HL,DE   
2820   7D                     LD   A,L   
2821   B4                     OR   H   
2822   CA 89 28               JP   Z,expectM_0_2743S45   
2825   CD 42 0B               CALL   printStr   
2828   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
283B   CD 42 0B               CALL   printStr   
283E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
284D   21 0F 00               LD   hl,15   
2850   E5                     PUSH   hl   
2851   E5                     PUSH   hl   
2852   CD 61 0C               CALL   run   
2855   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
285D   CD CA 0A               CALL   flushBuffer   
2860   CD 42 0B               CALL   printStr   
2863   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2870   E1                     POP   hl   
2871   E5                     PUSH   hl   
2872   E5                     PUSH   hl   
2873   CD 61 0C               CALL   run   
2876   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2885   CD CA 0A               CALL   flushBuffer   
2888   76                     HALT      
2889                EXPECTM_0_2743S45:      
2889   E1                     POP   HL   
288A                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
288A   31 00 4B               LD   SP,STACK   
288D   CD 8A 0B               CALL   coldInit   
2890   CD 7A 49               CALL   execStr   
2893   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
28A5   CD CA 0A               CALL   flushBuffer   
28A8                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
28A8   E1                     POP   HL   
28A9   E5                     PUSH   HL   
28AA   11 15 00               LD   DE,21   
28AD   B7                     OR   A   
28AE   ED 52                  SBC   HL,DE   
28B0   7D                     LD   A,L   
28B1   B4                     OR   H   
28B2   CA 1E 29               JP   Z,expectM_0_2744S45   
28B5   CD 42 0B               CALL   printStr   
28B8   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
28D0   CD 42 0B               CALL   printStr   
28D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E2   21 15 00               LD   hl,21   
28E5   E5                     PUSH   hl   
28E6   E5                     PUSH   hl   
28E7   CD 61 0C               CALL   run   
28EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F2   CD CA 0A               CALL   flushBuffer   
28F5   CD 42 0B               CALL   printStr   
28F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2905   E1                     POP   hl   
2906   E5                     PUSH   hl   
2907   E5                     PUSH   hl   
2908   CD 61 0C               CALL   run   
290B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291A   CD CA 0A               CALL   flushBuffer   
291D   76                     HALT      
291E                EXPECTM_0_2744S45:      
291E   E1                     POP   HL   
291F                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
291F   31 00 4B               LD   SP,STACK   
2922   CD 8A 0B               CALL   coldInit   
2925   CD 7A 49               CALL   execStr   
2928   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
293A   CD CA 0A               CALL   flushBuffer   
293D                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
293D   E1                     POP   HL   
293E   E5                     PUSH   HL   
293F   11 0B 00               LD   DE,11   
2942   B7                     OR   A   
2943   ED 52                  SBC   HL,DE   
2945   7D                     LD   A,L   
2946   B4                     OR   H   
2947   CA B3 29               JP   Z,expectM_0_2745S45   
294A   CD 42 0B               CALL   printStr   
294D   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2965   CD 42 0B               CALL   printStr   
2968   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2977   21 0B 00               LD   hl,11   
297A   E5                     PUSH   hl   
297B   E5                     PUSH   hl   
297C   CD 61 0C               CALL   run   
297F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2987   CD CA 0A               CALL   flushBuffer   
298A   CD 42 0B               CALL   printStr   
298D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299A   E1                     POP   hl   
299B   E5                     PUSH   hl   
299C   E5                     PUSH   hl   
299D   CD 61 0C               CALL   run   
29A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29AF   CD CA 0A               CALL   flushBuffer   
29B2   76                     HALT      
29B3                EXPECTM_0_2745S45:      
29B3   E1                     POP   HL   
29B4                          ;*Macro unroll:  test ": 0%", $0000
29B4   31 00 4B               LD   SP,STACK   
29B7   CD 8A 0B               CALL   coldInit   
29BA   CD 7A 49               CALL   execStr   
29BD   3A 20 30 25 00         .CSTR   ": 0%"   
29C2   CD CA 0A               CALL   flushBuffer   
29C5                          ;*Macro unroll:  expect ": 0%",$0000
29C5   E1                     POP   HL   
29C6   E5                     PUSH   HL   
29C7   11 00 00               LD   DE,$0000   
29CA   B7                     OR   A   
29CB   ED 52                  SBC   HL,DE   
29CD   7D                     LD   A,L   
29CE   B4                     OR   H   
29CF   CA 2E 2A               JP   Z,expectM_0_2746S45   
29D2   CD 42 0B               CALL   printStr   
29D5   43 6F 64 65 3A 20 3A 20 30 25 00 .CSTR   "Code: ",": 0%"   
29E0   CD 42 0B               CALL   printStr   
29E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F2   21 00 00               LD   hl,$0000   
29F5   E5                     PUSH   hl   
29F6   E5                     PUSH   hl   
29F7   CD 61 0C               CALL   run   
29FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A02   CD CA 0A               CALL   flushBuffer   
2A05   CD 42 0B               CALL   printStr   
2A08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A15   E1                     POP   hl   
2A16   E5                     PUSH   hl   
2A17   E5                     PUSH   hl   
2A18   CD 61 0C               CALL   run   
2A1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A2A   CD CA 0A               CALL   flushBuffer   
2A2D   76                     HALT      
2A2E                EXPECTM_0_2746S45:      
2A2E   E1                     POP   HL   
2A2F                          ;*Macro unroll:  test ":a 0%", $0100
2A2F   31 00 4B               LD   SP,STACK   
2A32   CD 8A 0B               CALL   coldInit   
2A35   CD 7A 49               CALL   execStr   
2A38   3A 61 20 30 25 00      .CSTR   ":a 0%"   
2A3E   CD CA 0A               CALL   flushBuffer   
2A41                          ;*Macro unroll:  expect ":a 0%",$0100
2A41   E1                     POP   HL   
2A42   E5                     PUSH   HL   
2A43   11 00 01               LD   DE,$0100   
2A46   B7                     OR   A   
2A47   ED 52                  SBC   HL,DE   
2A49   7D                     LD   A,L   
2A4A   B4                     OR   H   
2A4B   CA AB 2A               JP   Z,expectM_0_2747S45   
2A4E   CD 42 0B               CALL   printStr   
2A51   43 6F 64 65 3A 20 3A 61 20 30 25 00 .CSTR   "Code: ",":a 0%"   
2A5D   CD 42 0B               CALL   printStr   
2A60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6F   21 00 01               LD   hl,$0100   
2A72   E5                     PUSH   hl   
2A73   E5                     PUSH   hl   
2A74   CD 61 0C               CALL   run   
2A77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A7F   CD CA 0A               CALL   flushBuffer   
2A82   CD 42 0B               CALL   printStr   
2A85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A92   E1                     POP   hl   
2A93   E5                     PUSH   hl   
2A94   E5                     PUSH   hl   
2A95   CD 61 0C               CALL   run   
2A98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AA7   CD CA 0A               CALL   flushBuffer   
2AAA   76                     HALT      
2AAB                EXPECTM_0_2747S45:      
2AAB   E1                     POP   HL   
2AAC                          ;*Macro unroll:  test ":a: 0%", $0100
2AAC   31 00 4B               LD   SP,STACK   
2AAF   CD 8A 0B               CALL   coldInit   
2AB2   CD 7A 49               CALL   execStr   
2AB5   3A 61 3A 20 30 25 00   .CSTR   ":a: 0%"   
2ABC   CD CA 0A               CALL   flushBuffer   
2ABF                          ;*Macro unroll:  expect ":a: 0%",$0100
2ABF   E1                     POP   HL   
2AC0   E5                     PUSH   HL   
2AC1   11 00 01               LD   DE,$0100   
2AC4   B7                     OR   A   
2AC5   ED 52                  SBC   HL,DE   
2AC7   7D                     LD   A,L   
2AC8   B4                     OR   H   
2AC9   CA 2A 2B               JP   Z,expectM_0_2748S45   
2ACC   CD 42 0B               CALL   printStr   
2ACF   43 6F 64 65 3A 20 3A 61 3A 20 30 25 00 .CSTR   "Code: ",":a: 0%"   
2ADC   CD 42 0B               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 00 01               LD   hl,$0100   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD 61 0C               CALL   run   
2AF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFE   CD CA 0A               CALL   flushBuffer   
2B01   CD 42 0B               CALL   printStr   
2B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B11   E1                     POP   hl   
2B12   E5                     PUSH   hl   
2B13   E5                     PUSH   hl   
2B14   CD 61 0C               CALL   run   
2B17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B26   CD CA 0A               CALL   flushBuffer   
2B29   76                     HALT      
2B2A                EXPECTM_0_2748S45:      
2B2A   E1                     POP   HL   
2B2B                          ;*Macro unroll:  test ":a:b 0%", $0201
2B2B   31 00 4B               LD   SP,STACK   
2B2E   CD 8A 0B               CALL   coldInit   
2B31   CD 7A 49               CALL   execStr   
2B34   3A 61 3A 62 20 30 25 00 .CSTR   ":a:b 0%"   
2B3C   CD CA 0A               CALL   flushBuffer   
2B3F                          ;*Macro unroll:  expect ":a:b 0%",$0201
2B3F   E1                     POP   HL   
2B40   E5                     PUSH   HL   
2B41   11 01 02               LD   DE,$0201   
2B44   B7                     OR   A   
2B45   ED 52                  SBC   HL,DE   
2B47   7D                     LD   A,L   
2B48   B4                     OR   H   
2B49   CA AB 2B               JP   Z,expectM_0_2749S45   
2B4C   CD 42 0B               CALL   printStr   
2B4F   43 6F 64 65 3A 20 3A 61 3A 62 20 30 25 00 .CSTR   "Code: ",":a:b 0%"   
2B5D   CD 42 0B               CALL   printStr   
2B60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6F   21 01 02               LD   hl,$0201   
2B72   E5                     PUSH   hl   
2B73   E5                     PUSH   hl   
2B74   CD 61 0C               CALL   run   
2B77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B7F   CD CA 0A               CALL   flushBuffer   
2B82   CD 42 0B               CALL   printStr   
2B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B92   E1                     POP   hl   
2B93   E5                     PUSH   hl   
2B94   E5                     PUSH   hl   
2B95   CD 61 0C               CALL   run   
2B98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BA7   CD CA 0A               CALL   flushBuffer   
2BAA   76                     HALT      
2BAB                EXPECTM_0_2749S45:      
2BAB   E1                     POP   HL   
2BAC                          ;*Macro unroll:  test "::b 0%", $0101
2BAC   31 00 4B               LD   SP,STACK   
2BAF   CD 8A 0B               CALL   coldInit   
2BB2   CD 7A 49               CALL   execStr   
2BB5   3A 3A 62 20 30 25 00   .CSTR   "::b 0%"   
2BBC   CD CA 0A               CALL   flushBuffer   
2BBF                          ;*Macro unroll:  expect "::b 0%",$0101
2BBF   E1                     POP   HL   
2BC0   E5                     PUSH   HL   
2BC1   11 01 01               LD   DE,$0101   
2BC4   B7                     OR   A   
2BC5   ED 52                  SBC   HL,DE   
2BC7   7D                     LD   A,L   
2BC8   B4                     OR   H   
2BC9   CA 2A 2C               JP   Z,expectM_0_2750S45   
2BCC   CD 42 0B               CALL   printStr   
2BCF   43 6F 64 65 3A 20 3A 3A 62 20 30 25 00 .CSTR   "Code: ","::b 0%"   
2BDC   CD 42 0B               CALL   printStr   
2BDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEE   21 01 01               LD   hl,$0101   
2BF1   E5                     PUSH   hl   
2BF2   E5                     PUSH   hl   
2BF3   CD 61 0C               CALL   run   
2BF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BFE   CD CA 0A               CALL   flushBuffer   
2C01   CD 42 0B               CALL   printStr   
2C04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C11   E1                     POP   hl   
2C12   E5                     PUSH   hl   
2C13   E5                     PUSH   hl   
2C14   CD 61 0C               CALL   run   
2C17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C26   CD CA 0A               CALL   flushBuffer   
2C29   76                     HALT      
2C2A                EXPECTM_0_2750S45:      
2C2A   E1                     POP   HL   
2C2B                          ;*Macro unroll:  test ":{2};^", 2
2C2B   31 00 4B               LD   SP,STACK   
2C2E   CD 8A 0B               CALL   coldInit   
2C31   CD 7A 49               CALL   execStr   
2C34   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2C3B   CD CA 0A               CALL   flushBuffer   
2C3E                          ;*Macro unroll:  expect ":{2};^",2
2C3E   E1                     POP   HL   
2C3F   E5                     PUSH   HL   
2C40   11 02 00               LD   DE,2   
2C43   B7                     OR   A   
2C44   ED 52                  SBC   HL,DE   
2C46   7D                     LD   A,L   
2C47   B4                     OR   H   
2C48   CA A9 2C               JP   Z,expectM_0_2751S45   
2C4B   CD 42 0B               CALL   printStr   
2C4E   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2C5B   CD 42 0B               CALL   printStr   
2C5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C6D   21 02 00               LD   hl,2   
2C70   E5                     PUSH   hl   
2C71   E5                     PUSH   hl   
2C72   CD 61 0C               CALL   run   
2C75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C7D   CD CA 0A               CALL   flushBuffer   
2C80   CD 42 0B               CALL   printStr   
2C83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C90   E1                     POP   hl   
2C91   E5                     PUSH   hl   
2C92   E5                     PUSH   hl   
2C93   CD 61 0C               CALL   run   
2C96   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CA5   CD CA 0A               CALL   flushBuffer   
2CA8   76                     HALT      
2CA9                EXPECTM_0_2751S45:      
2CA9   E1                     POP   HL   
2CAA                          ;*Macro unroll:  test ":a{2};^", 2
2CAA   31 00 4B               LD   SP,STACK   
2CAD   CD 8A 0B               CALL   coldInit   
2CB0   CD 7A 49               CALL   execStr   
2CB3   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2CBB   CD CA 0A               CALL   flushBuffer   
2CBE                          ;*Macro unroll:  expect ":a{2};^",2
2CBE   E1                     POP   HL   
2CBF   E5                     PUSH   HL   
2CC0   11 02 00               LD   DE,2   
2CC3   B7                     OR   A   
2CC4   ED 52                  SBC   HL,DE   
2CC6   7D                     LD   A,L   
2CC7   B4                     OR   H   
2CC8   CA 2A 2D               JP   Z,expectM_0_2752S45   
2CCB   CD 42 0B               CALL   printStr   
2CCE   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2CDC   CD 42 0B               CALL   printStr   
2CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CEE   21 02 00               LD   hl,2   
2CF1   E5                     PUSH   hl   
2CF2   E5                     PUSH   hl   
2CF3   CD 61 0C               CALL   run   
2CF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CFE   CD CA 0A               CALL   flushBuffer   
2D01   CD 42 0B               CALL   printStr   
2D04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D11   E1                     POP   hl   
2D12   E5                     PUSH   hl   
2D13   E5                     PUSH   hl   
2D14   CD 61 0C               CALL   run   
2D17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D26   CD CA 0A               CALL   flushBuffer   
2D29   76                     HALT      
2D2A                EXPECTM_0_2752S45:      
2D2A   E1                     POP   HL   
2D2B                          ;*Macro unroll:  test "5 :a{$a};^", 5
2D2B   31 00 4B               LD   SP,STACK   
2D2E   CD 8A 0B               CALL   coldInit   
2D31   CD 7A 49               CALL   execStr   
2D34   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2D3F   CD CA 0A               CALL   flushBuffer   
2D42                          ;*Macro unroll:  expect "5 :a{$a};^",5
2D42   E1                     POP   HL   
2D43   E5                     PUSH   HL   
2D44   11 05 00               LD   DE,5   
2D47   B7                     OR   A   
2D48   ED 52                  SBC   HL,DE   
2D4A   7D                     LD   A,L   
2D4B   B4                     OR   H   
2D4C   CA B1 2D               JP   Z,expectM_0_2753S45   
2D4F   CD 42 0B               CALL   printStr   
2D52   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2D63   CD 42 0B               CALL   printStr   
2D66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D75   21 05 00               LD   hl,5   
2D78   E5                     PUSH   hl   
2D79   E5                     PUSH   hl   
2D7A   CD 61 0C               CALL   run   
2D7D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D85   CD CA 0A               CALL   flushBuffer   
2D88   CD 42 0B               CALL   printStr   
2D8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D98   E1                     POP   hl   
2D99   E5                     PUSH   hl   
2D9A   E5                     PUSH   hl   
2D9B   CD 61 0C               CALL   run   
2D9E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DAD   CD CA 0A               CALL   flushBuffer   
2DB0   76                     HALT      
2DB1                EXPECTM_0_2753S45:      
2DB1   E1                     POP   HL   
2DB2                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2DB2   31 00 4B               LD   SP,STACK   
2DB5   CD 8A 0B               CALL   coldInit   
2DB8   CD 7A 49               CALL   execStr   
2DBB   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2DC8   CD CA 0A               CALL   flushBuffer   
2DCB                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2DCB   E1                     POP   HL   
2DCC   E5                     PUSH   HL   
2DCD   11 05 00               LD   DE,5   
2DD0   B7                     OR   A   
2DD1   ED 52                  SBC   HL,DE   
2DD3   7D                     LD   A,L   
2DD4   B4                     OR   H   
2DD5   CA 3C 2E               JP   Z,expectM_0_2754S45   
2DD8   CD 42 0B               CALL   printStr   
2DDB   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2DEE   CD 42 0B               CALL   printStr   
2DF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E00   21 05 00               LD   hl,5   
2E03   E5                     PUSH   hl   
2E04   E5                     PUSH   hl   
2E05   CD 61 0C               CALL   run   
2E08   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E10   CD CA 0A               CALL   flushBuffer   
2E13   CD 42 0B               CALL   printStr   
2E16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E23   E1                     POP   hl   
2E24   E5                     PUSH   hl   
2E25   E5                     PUSH   hl   
2E26   CD 61 0C               CALL   run   
2E29   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E38   CD CA 0A               CALL   flushBuffer   
2E3B   76                     HALT      
2E3C                EXPECTM_0_2754S45:      
2E3C   E1                     POP   HL   
2E3D                          ;*Macro unroll:  test ":a{{2}^};^", 2
2E3D   31 00 4B               LD   SP,STACK   
2E40   CD 8A 0B               CALL   coldInit   
2E43   CD 7A 49               CALL   execStr   
2E46   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2E51   CD CA 0A               CALL   flushBuffer   
2E54                          ;*Macro unroll:  expect ":a{{2}^};^",2
2E54   E1                     POP   HL   
2E55   E5                     PUSH   HL   
2E56   11 02 00               LD   DE,2   
2E59   B7                     OR   A   
2E5A   ED 52                  SBC   HL,DE   
2E5C   7D                     LD   A,L   
2E5D   B4                     OR   H   
2E5E   CA C3 2E               JP   Z,expectM_0_2755S45   
2E61   CD 42 0B               CALL   printStr   
2E64   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2E75   CD 42 0B               CALL   printStr   
2E78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E87   21 02 00               LD   hl,2   
2E8A   E5                     PUSH   hl   
2E8B   E5                     PUSH   hl   
2E8C   CD 61 0C               CALL   run   
2E8F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E97   CD CA 0A               CALL   flushBuffer   
2E9A   CD 42 0B               CALL   printStr   
2E9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EAA   E1                     POP   hl   
2EAB   E5                     PUSH   hl   
2EAC   E5                     PUSH   hl   
2EAD   CD 61 0C               CALL   run   
2EB0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EBF   CD CA 0A               CALL   flushBuffer   
2EC2   76                     HALT      
2EC3                EXPECTM_0_2755S45:      
2EC3   E1                     POP   HL   
2EC4                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2EC4   31 00 4B               LD   SP,STACK   
2EC7   CD 8A 0B               CALL   coldInit   
2ECA   CD 7A 49               CALL   execStr   
2ECD   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2EDD   CD CA 0A               CALL   flushBuffer   
2EE0                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2EE0   E1                     POP   HL   
2EE1   E5                     PUSH   HL   
2EE2   11 05 00               LD   DE,5   
2EE5   B7                     OR   A   
2EE6   ED 52                  SBC   HL,DE   
2EE8   7D                     LD   A,L   
2EE9   B4                     OR   H   
2EEA   CA 54 2F               JP   Z,expectM_0_2756S45   
2EED   CD 42 0B               CALL   printStr   
2EF0   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2F06   CD 42 0B               CALL   printStr   
2F09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F18   21 05 00               LD   hl,5   
2F1B   E5                     PUSH   hl   
2F1C   E5                     PUSH   hl   
2F1D   CD 61 0C               CALL   run   
2F20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F28   CD CA 0A               CALL   flushBuffer   
2F2B   CD 42 0B               CALL   printStr   
2F2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F3B   E1                     POP   hl   
2F3C   E5                     PUSH   hl   
2F3D   E5                     PUSH   hl   
2F3E   CD 61 0C               CALL   run   
2F41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F50   CD CA 0A               CALL   flushBuffer   
2F53   76                     HALT      
2F54                EXPECTM_0_2756S45:      
2F54   E1                     POP   HL   
2F55                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2F55   31 00 4B               LD   SP,STACK   
2F58   CD 8A 0B               CALL   coldInit   
2F5B   CD 7A 49               CALL   execStr   
2F5E   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2F6F   CD CA 0A               CALL   flushBuffer   
2F72                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2F72   E1                     POP   HL   
2F73   E5                     PUSH   HL   
2F74   11 01 00               LD   DE,1   
2F77   B7                     OR   A   
2F78   ED 52                  SBC   HL,DE   
2F7A   7D                     LD   A,L   
2F7B   B4                     OR   H   
2F7C   CA E7 2F               JP   Z,expectM_0_2757S45   
2F7F   CD 42 0B               CALL   printStr   
2F82   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2F99   CD 42 0B               CALL   printStr   
2F9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FAB   21 01 00               LD   hl,1   
2FAE   E5                     PUSH   hl   
2FAF   E5                     PUSH   hl   
2FB0   CD 61 0C               CALL   run   
2FB3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FBB   CD CA 0A               CALL   flushBuffer   
2FBE   CD 42 0B               CALL   printStr   
2FC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FCE   E1                     POP   hl   
2FCF   E5                     PUSH   hl   
2FD0   E5                     PUSH   hl   
2FD1   CD 61 0C               CALL   run   
2FD4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FE3   CD CA 0A               CALL   flushBuffer   
2FE6   76                     HALT      
2FE7                EXPECTM_0_2757S45:      
2FE7   E1                     POP   HL   
2FE8                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2FE8   31 00 4B               LD   SP,STACK   
2FEB   CD 8A 0B               CALL   coldInit   
2FEE   CD 7A 49               CALL   execStr   
2FF1   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
3005   CD CA 0A               CALL   flushBuffer   
3008                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
3008   E1                     POP   HL   
3009   E5                     PUSH   HL   
300A   11 07 00               LD   DE,7   
300D   B7                     OR   A   
300E   ED 52                  SBC   HL,DE   
3010   7D                     LD   A,L   
3011   B4                     OR   H   
3012   CA 80 30               JP   Z,expectM_0_2758S45   
3015   CD 42 0B               CALL   printStr   
3018   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
3032   CD 42 0B               CALL   printStr   
3035   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3044   21 07 00               LD   hl,7   
3047   E5                     PUSH   hl   
3048   E5                     PUSH   hl   
3049   CD 61 0C               CALL   run   
304C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3054   CD CA 0A               CALL   flushBuffer   
3057   CD 42 0B               CALL   printStr   
305A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3067   E1                     POP   hl   
3068   E5                     PUSH   hl   
3069   E5                     PUSH   hl   
306A   CD 61 0C               CALL   run   
306D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
307C   CD CA 0A               CALL   flushBuffer   
307F   76                     HALT      
3080                EXPECTM_0_2758S45:      
3080   E1                     POP   HL   
3081                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
3081   31 00 4B               LD   SP,STACK   
3084   CD 8A 0B               CALL   coldInit   
3087   CD 7A 49               CALL   execStr   
308A   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
30A0   CD CA 0A               CALL   flushBuffer   
30A3                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
30A3   E1                     POP   HL   
30A4   E5                     PUSH   HL   
30A5   11 06 00               LD   DE,6   
30A8   B7                     OR   A   
30A9   ED 52                  SBC   HL,DE   
30AB   7D                     LD   A,L   
30AC   B4                     OR   H   
30AD   CA 1D 31               JP   Z,expectM_0_2759S45   
30B0   CD 42 0B               CALL   printStr   
30B3   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
30CF   CD 42 0B               CALL   printStr   
30D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E1   21 06 00               LD   hl,6   
30E4   E5                     PUSH   hl   
30E5   E5                     PUSH   hl   
30E6   CD 61 0C               CALL   run   
30E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F1   CD CA 0A               CALL   flushBuffer   
30F4   CD 42 0B               CALL   printStr   
30F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3104   E1                     POP   hl   
3105   E5                     PUSH   hl   
3106   E5                     PUSH   hl   
3107   CD 61 0C               CALL   run   
310A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3119   CD CA 0A               CALL   flushBuffer   
311C   76                     HALT      
311D                EXPECTM_0_2759S45:      
311D   E1                     POP   HL   
311E                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
311E   31 00 4B               LD   SP,STACK   
3121   CD 8A 0B               CALL   coldInit   
3124   CD 7A 49               CALL   execStr   
3127   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
3136   CD CA 0A               CALL   flushBuffer   
3139                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
3139   E1                     POP   HL   
313A   E5                     PUSH   HL   
313B   11 02 00               LD   DE,2   
313E   B7                     OR   A   
313F   ED 52                  SBC   HL,DE   
3141   7D                     LD   A,L   
3142   B4                     OR   H   
3143   CA AC 31               JP   Z,expectM_0_2760S45   
3146   CD 42 0B               CALL   printStr   
3149   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
315E   CD 42 0B               CALL   printStr   
3161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3170   21 02 00               LD   hl,2   
3173   E5                     PUSH   hl   
3174   E5                     PUSH   hl   
3175   CD 61 0C               CALL   run   
3178   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3180   CD CA 0A               CALL   flushBuffer   
3183   CD 42 0B               CALL   printStr   
3186   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3193   E1                     POP   hl   
3194   E5                     PUSH   hl   
3195   E5                     PUSH   hl   
3196   CD 61 0C               CALL   run   
3199   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31A8   CD CA 0A               CALL   flushBuffer   
31AB   76                     HALT      
31AC                EXPECTM_0_2760S45:      
31AC   E1                     POP   HL   
31AD                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
31AD   31 00 4B               LD   SP,STACK   
31B0   CD 8A 0B               CALL   coldInit   
31B3   CD 7A 49               CALL   execStr   
31B6   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
31C8   CD CA 0A               CALL   flushBuffer   
31CB                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
31CB   E1                     POP   HL   
31CC   E5                     PUSH   HL   
31CD   11 01 00               LD   DE,1   
31D0   B7                     OR   A   
31D1   ED 52                  SBC   HL,DE   
31D3   7D                     LD   A,L   
31D4   B4                     OR   H   
31D5   CA 41 32               JP   Z,expectM_0_2761S45   
31D8   CD 42 0B               CALL   printStr   
31DB   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
31F3   CD 42 0B               CALL   printStr   
31F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3205   21 01 00               LD   hl,1   
3208   E5                     PUSH   hl   
3209   E5                     PUSH   hl   
320A   CD 61 0C               CALL   run   
320D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3215   CD CA 0A               CALL   flushBuffer   
3218   CD 42 0B               CALL   printStr   
321B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3228   E1                     POP   hl   
3229   E5                     PUSH   hl   
322A   E5                     PUSH   hl   
322B   CD 61 0C               CALL   run   
322E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
323D   CD CA 0A               CALL   flushBuffer   
3240   76                     HALT      
3241                EXPECTM_0_2761S45:      
3241   E1                     POP   HL   
3242                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3242   31 00 4B               LD   SP,STACK   
3245   CD 8A 0B               CALL   coldInit   
3248   CD 7A 49               CALL   execStr   
324B   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
325E   CD CA 0A               CALL   flushBuffer   
3261                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
3261   E1                     POP   HL   
3262   E5                     PUSH   HL   
3263   11 02 00               LD   DE,2   
3266   B7                     OR   A   
3267   ED 52                  SBC   HL,DE   
3269   7D                     LD   A,L   
326A   B4                     OR   H   
326B   CA D8 32               JP   Z,expectM_0_2762S45   
326E   CD 42 0B               CALL   printStr   
3271   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
328A   CD 42 0B               CALL   printStr   
328D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
329C   21 02 00               LD   hl,2   
329F   E5                     PUSH   hl   
32A0   E5                     PUSH   hl   
32A1   CD 61 0C               CALL   run   
32A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32AC   CD CA 0A               CALL   flushBuffer   
32AF   CD 42 0B               CALL   printStr   
32B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32BF   E1                     POP   hl   
32C0   E5                     PUSH   hl   
32C1   E5                     PUSH   hl   
32C2   CD 61 0C               CALL   run   
32C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32D4   CD CA 0A               CALL   flushBuffer   
32D7   76                     HALT      
32D8                EXPECTM_0_2762S45:      
32D8   E1                     POP   HL   
32D9                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
32D9   31 00 4B               LD   SP,STACK   
32DC   CD 8A 0B               CALL   coldInit   
32DF   CD 7A 49               CALL   execStr   
32E2   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
32F6   CD CA 0A               CALL   flushBuffer   
32F9                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
32F9   E1                     POP   HL   
32FA   E5                     PUSH   HL   
32FB   11 02 00               LD   DE,2   
32FE   B7                     OR   A   
32FF   ED 52                  SBC   HL,DE   
3301   7D                     LD   A,L   
3302   B4                     OR   H   
3303   CA 71 33               JP   Z,expectM_0_2763S45   
3306   CD 42 0B               CALL   printStr   
3309   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3323   CD 42 0B               CALL   printStr   
3326   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3335   21 02 00               LD   hl,2   
3338   E5                     PUSH   hl   
3339   E5                     PUSH   hl   
333A   CD 61 0C               CALL   run   
333D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3345   CD CA 0A               CALL   flushBuffer   
3348   CD 42 0B               CALL   printStr   
334B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3358   E1                     POP   hl   
3359   E5                     PUSH   hl   
335A   E5                     PUSH   hl   
335B   CD 61 0C               CALL   run   
335E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
336D   CD CA 0A               CALL   flushBuffer   
3370   76                     HALT      
3371                EXPECTM_0_2763S45:      
3371   E1                     POP   HL   
3372                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3372   31 00 4B               LD   SP,STACK   
3375   CD 8A 0B               CALL   coldInit   
3378   CD 7A 49               CALL   execStr   
337B   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
338E   CD CA 0A               CALL   flushBuffer   
3391                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
3391   E1                     POP   HL   
3392   E5                     PUSH   HL   
3393   11 02 00               LD   DE,2   
3396   B7                     OR   A   
3397   ED 52                  SBC   HL,DE   
3399   7D                     LD   A,L   
339A   B4                     OR   H   
339B   CA 08 34               JP   Z,expectM_0_2764S45   
339E   CD 42 0B               CALL   printStr   
33A1   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
33BA   CD 42 0B               CALL   printStr   
33BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33CC   21 02 00               LD   hl,2   
33CF   E5                     PUSH   hl   
33D0   E5                     PUSH   hl   
33D1   CD 61 0C               CALL   run   
33D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33DC   CD CA 0A               CALL   flushBuffer   
33DF   CD 42 0B               CALL   printStr   
33E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33EF   E1                     POP   hl   
33F0   E5                     PUSH   hl   
33F1   E5                     PUSH   hl   
33F2   CD 61 0C               CALL   run   
33F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3404   CD CA 0A               CALL   flushBuffer   
3407   76                     HALT      
3408                EXPECTM_0_2764S45:      
3408   E1                     POP   HL   
3409                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
3409   31 00 4B               LD   SP,STACK   
340C   CD 8A 0B               CALL   coldInit   
340F   CD 7A 49               CALL   execStr   
3412   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
342C   CD CA 0A               CALL   flushBuffer   
342F                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
342F   E1                     POP   HL   
3430   E5                     PUSH   HL   
3431   11 05 00               LD   DE,5   
3434   B7                     OR   A   
3435   ED 52                  SBC   HL,DE   
3437   7D                     LD   A,L   
3438   B4                     OR   H   
3439   CA AD 34               JP   Z,expectM_0_2765S45   
343C   CD 42 0B               CALL   printStr   
343F   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
345F   CD 42 0B               CALL   printStr   
3462   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3471   21 05 00               LD   hl,5   
3474   E5                     PUSH   hl   
3475   E5                     PUSH   hl   
3476   CD 61 0C               CALL   run   
3479   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3481   CD CA 0A               CALL   flushBuffer   
3484   CD 42 0B               CALL   printStr   
3487   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3494   E1                     POP   hl   
3495   E5                     PUSH   hl   
3496   E5                     PUSH   hl   
3497   CD 61 0C               CALL   run   
349A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34A9   CD CA 0A               CALL   flushBuffer   
34AC   76                     HALT      
34AD                EXPECTM_0_2765S45:      
34AD   E1                     POP   HL   
34AE                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
34AE   31 00 4B               LD   SP,STACK   
34B1   CD 8A 0B               CALL   coldInit   
34B4   CD 7A 49               CALL   execStr   
34B7   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
34C8   CD CA 0A               CALL   flushBuffer   
34CB                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
34CB   E1                     POP   HL   
34CC   E5                     PUSH   HL   
34CD   11 02 00               LD   DE,2   
34D0   B7                     OR   A   
34D1   ED 52                  SBC   HL,DE   
34D3   7D                     LD   A,L   
34D4   B4                     OR   H   
34D5   CA 40 35               JP   Z,expectM_0_2766S45   
34D8   CD 42 0B               CALL   printStr   
34DB   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
34F2   CD 42 0B               CALL   printStr   
34F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3504   21 02 00               LD   hl,2   
3507   E5                     PUSH   hl   
3508   E5                     PUSH   hl   
3509   CD 61 0C               CALL   run   
350C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3514   CD CA 0A               CALL   flushBuffer   
3517   CD 42 0B               CALL   printStr   
351A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3527   E1                     POP   hl   
3528   E5                     PUSH   hl   
3529   E5                     PUSH   hl   
352A   CD 61 0C               CALL   run   
352D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
353C   CD CA 0A               CALL   flushBuffer   
353F   76                     HALT      
3540                EXPECTM_0_2766S45:      
3540   E1                     POP   HL   
3541                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
3541   31 00 4B               LD   SP,STACK   
3544   CD 8A 0B               CALL   coldInit   
3547   CD 7A 49               CALL   execStr   
354A   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
3561   CD CA 0A               CALL   flushBuffer   
3564                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
3564   E1                     POP   HL   
3565   E5                     PUSH   HL   
3566   11 64 00               LD   DE,100   
3569   B7                     OR   A   
356A   ED 52                  SBC   HL,DE   
356C   7D                     LD   A,L   
356D   B4                     OR   H   
356E   CA DF 35               JP   Z,expectM_0_2767S45   
3571   CD 42 0B               CALL   printStr   
3574   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
3591   CD 42 0B               CALL   printStr   
3594   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35A3   21 64 00               LD   hl,100   
35A6   E5                     PUSH   hl   
35A7   E5                     PUSH   hl   
35A8   CD 61 0C               CALL   run   
35AB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35B3   CD CA 0A               CALL   flushBuffer   
35B6   CD 42 0B               CALL   printStr   
35B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35C6   E1                     POP   hl   
35C7   E5                     PUSH   hl   
35C8   E5                     PUSH   hl   
35C9   CD 61 0C               CALL   run   
35CC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35DB   CD CA 0A               CALL   flushBuffer   
35DE   76                     HALT      
35DF                EXPECTM_0_2767S45:      
35DF   E1                     POP   HL   
35E0                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
35E0   31 00 4B               LD   SP,STACK   
35E3   CD 8A 0B               CALL   coldInit   
35E6   CD 7A 49               CALL   execStr   
35E9   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
3601   CD CA 0A               CALL   flushBuffer   
3604                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
3604   E1                     POP   HL   
3605   E5                     PUSH   HL   
3606   11 01 00               LD   DE,1   
3609   B7                     OR   A   
360A   ED 52                  SBC   HL,DE   
360C   7D                     LD   A,L   
360D   B4                     OR   H   
360E   CA 80 36               JP   Z,expectM_0_2768S45   
3611   CD 42 0B               CALL   printStr   
3614   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
3632   CD 42 0B               CALL   printStr   
3635   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3644   21 01 00               LD   hl,1   
3647   E5                     PUSH   hl   
3648   E5                     PUSH   hl   
3649   CD 61 0C               CALL   run   
364C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3654   CD CA 0A               CALL   flushBuffer   
3657   CD 42 0B               CALL   printStr   
365A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3667   E1                     POP   hl   
3668   E5                     PUSH   hl   
3669   E5                     PUSH   hl   
366A   CD 61 0C               CALL   run   
366D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
367C   CD CA 0A               CALL   flushBuffer   
367F   76                     HALT      
3680                EXPECTM_0_2768S45:      
3680   E1                     POP   HL   
3681                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
3681   31 00 4B               LD   SP,STACK   
3684   CD 8A 0B               CALL   coldInit   
3687   CD 7A 49               CALL   execStr   
368A   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
36A3   CD CA 0A               CALL   flushBuffer   
36A6                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
36A6   E1                     POP   HL   
36A7   E5                     PUSH   HL   
36A8   11 02 00               LD   DE,2   
36AB   B7                     OR   A   
36AC   ED 52                  SBC   HL,DE   
36AE   7D                     LD   A,L   
36AF   B4                     OR   H   
36B0   CA 23 37               JP   Z,expectM_0_2769S45   
36B3   CD 42 0B               CALL   printStr   
36B6   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
36D5   CD 42 0B               CALL   printStr   
36D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36E7   21 02 00               LD   hl,2   
36EA   E5                     PUSH   hl   
36EB   E5                     PUSH   hl   
36EC   CD 61 0C               CALL   run   
36EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36F7   CD CA 0A               CALL   flushBuffer   
36FA   CD 42 0B               CALL   printStr   
36FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
370A   E1                     POP   hl   
370B   E5                     PUSH   hl   
370C   E5                     PUSH   hl   
370D   CD 61 0C               CALL   run   
3710   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
371F   CD CA 0A               CALL   flushBuffer   
3722   76                     HALT      
3723                EXPECTM_0_2769S45:      
3723   E1                     POP   HL   
3724                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
3724   31 00 4B               LD   SP,STACK   
3727   CD 8A 0B               CALL   coldInit   
372A   CD 7A 49               CALL   execStr   
372D   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
374C   CD CA 0A               CALL   flushBuffer   
374F                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
374F   E1                     POP   HL   
3750   E5                     PUSH   HL   
3751   11 0B 00               LD   DE,11   
3754   B7                     OR   A   
3755   ED 52                  SBC   HL,DE   
3757   7D                     LD   A,L   
3758   B4                     OR   H   
3759   CA D2 37               JP   Z,expectM_0_2770S45   
375C   CD 42 0B               CALL   printStr   
375F   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3784   CD 42 0B               CALL   printStr   
3787   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3796   21 0B 00               LD   hl,11   
3799   E5                     PUSH   hl   
379A   E5                     PUSH   hl   
379B   CD 61 0C               CALL   run   
379E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37A6   CD CA 0A               CALL   flushBuffer   
37A9   CD 42 0B               CALL   printStr   
37AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37B9   E1                     POP   hl   
37BA   E5                     PUSH   hl   
37BB   E5                     PUSH   hl   
37BC   CD 61 0C               CALL   run   
37BF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37CE   CD CA 0A               CALL   flushBuffer   
37D1   76                     HALT      
37D2                EXPECTM_0_2770S45:      
37D2   E1                     POP   HL   
37D3                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
37D3   31 00 4B               LD   SP,STACK   
37D6   CD 8A 0B               CALL   coldInit   
37D9   CD 7A 49               CALL   execStr   
37DC   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
37FB   CD CA 0A               CALL   flushBuffer   
37FE                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
37FE   E1                     POP   HL   
37FF   E5                     PUSH   HL   
3800   11 15 00               LD   DE,21   
3803   B7                     OR   A   
3804   ED 52                  SBC   HL,DE   
3806   7D                     LD   A,L   
3807   B4                     OR   H   
3808   CA 81 38               JP   Z,expectM_0_2771S45   
380B   CD 42 0B               CALL   printStr   
380E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3833   CD 42 0B               CALL   printStr   
3836   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3845   21 15 00               LD   hl,21   
3848   E5                     PUSH   hl   
3849   E5                     PUSH   hl   
384A   CD 61 0C               CALL   run   
384D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3855   CD CA 0A               CALL   flushBuffer   
3858   CD 42 0B               CALL   printStr   
385B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3868   E1                     POP   hl   
3869   E5                     PUSH   hl   
386A   E5                     PUSH   hl   
386B   CD 61 0C               CALL   run   
386E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
387D   CD CA 0A               CALL   flushBuffer   
3880   76                     HALT      
3881                EXPECTM_0_2771S45:      
3881   E1                     POP   HL   
3882                          ;*Macro unroll:  test "[10 20 30] 1%", 20
3882   31 00 4B               LD   SP,STACK   
3885   CD 8A 0B               CALL   coldInit   
3888   CD 7A 49               CALL   execStr   
388B   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3899   CD CA 0A               CALL   flushBuffer   
389C                          ;*Macro unroll:  expect "[10 20 30] 1%",20
389C   E1                     POP   HL   
389D   E5                     PUSH   HL   
389E   11 14 00               LD   DE,20   
38A1   B7                     OR   A   
38A2   ED 52                  SBC   HL,DE   
38A4   7D                     LD   A,L   
38A5   B4                     OR   H   
38A6   CA 0E 39               JP   Z,expectM_0_2772S45   
38A9   CD 42 0B               CALL   printStr   
38AC   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
38C0   CD 42 0B               CALL   printStr   
38C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D2   21 14 00               LD   hl,20   
38D5   E5                     PUSH   hl   
38D6   E5                     PUSH   hl   
38D7   CD 61 0C               CALL   run   
38DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38E2   CD CA 0A               CALL   flushBuffer   
38E5   CD 42 0B               CALL   printStr   
38E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F5   E1                     POP   hl   
38F6   E5                     PUSH   hl   
38F7   E5                     PUSH   hl   
38F8   CD 61 0C               CALL   run   
38FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
390A   CD CA 0A               CALL   flushBuffer   
390D   76                     HALT      
390E                EXPECTM_0_2772S45:      
390E   E1                     POP   HL   
390F                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
390F   31 00 4B               LD   SP,STACK   
3912   CD 8A 0B               CALL   coldInit   
3915   CD 7A 49               CALL   execStr   
3918   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
3929   CD CA 0A               CALL   flushBuffer   
392C                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
392C   E1                     POP   HL   
392D   E5                     PUSH   HL   
392E   11 04 00               LD   DE,4   
3931   B7                     OR   A   
3932   ED 52                  SBC   HL,DE   
3934   7D                     LD   A,L   
3935   B4                     OR   H   
3936   CA A1 39               JP   Z,expectM_0_2773S45   
3939   CD 42 0B               CALL   printStr   
393C   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3953   CD 42 0B               CALL   printStr   
3956   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3965   21 04 00               LD   hl,4   
3968   E5                     PUSH   hl   
3969   E5                     PUSH   hl   
396A   CD 61 0C               CALL   run   
396D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3975   CD CA 0A               CALL   flushBuffer   
3978   CD 42 0B               CALL   printStr   
397B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3988   E1                     POP   hl   
3989   E5                     PUSH   hl   
398A   E5                     PUSH   hl   
398B   CD 61 0C               CALL   run   
398E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
399D   CD CA 0A               CALL   flushBuffer   
39A0   76                     HALT      
39A1                EXPECTM_0_2773S45:      
39A1   E1                     POP   HL   
39A2                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
39A2   31 00 4B               LD   SP,STACK   
39A5   CD 8A 0B               CALL   coldInit   
39A8   CD 7A 49               CALL   execStr   
39AB   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
39B9   CD CA 0A               CALL   flushBuffer   
39BC                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
39BC   E1                     POP   HL   
39BD   E5                     PUSH   HL   
39BE   11 02 00               LD   DE,2   
39C1   B7                     OR   A   
39C2   ED 52                  SBC   HL,DE   
39C4   7D                     LD   A,L   
39C5   B4                     OR   H   
39C6   CA 2E 3A               JP   Z,expectM_0_2774S45   
39C9   CD 42 0B               CALL   printStr   
39CC   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
39E0   CD 42 0B               CALL   printStr   
39E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F2   21 02 00               LD   hl,2   
39F5   E5                     PUSH   hl   
39F6   E5                     PUSH   hl   
39F7   CD 61 0C               CALL   run   
39FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A02   CD CA 0A               CALL   flushBuffer   
3A05   CD 42 0B               CALL   printStr   
3A08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A15   E1                     POP   hl   
3A16   E5                     PUSH   hl   
3A17   E5                     PUSH   hl   
3A18   CD 61 0C               CALL   run   
3A1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A2A   CD CA 0A               CALL   flushBuffer   
3A2D   76                     HALT      
3A2E                EXPECTM_0_2774S45:      
3A2E   E1                     POP   HL   
3A2F                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3A2F   31 00 4B               LD   SP,STACK   
3A32   CD 8A 0B               CALL   coldInit   
3A35   CD 7A 49               CALL   execStr   
3A38   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3A4C   CD CA 0A               CALL   flushBuffer   
3A4F                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3A4F   E1                     POP   HL   
3A50   E5                     PUSH   HL   
3A51   11 42 00               LD   DE,66   
3A54   B7                     OR   A   
3A55   ED 52                  SBC   HL,DE   
3A57   7D                     LD   A,L   
3A58   B4                     OR   H   
3A59   CA C7 3A               JP   Z,expectM_0_2775S45   
3A5C   CD 42 0B               CALL   printStr   
3A5F   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
3A79   CD 42 0B               CALL   printStr   
3A7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A8B   21 42 00               LD   hl,66   
3A8E   E5                     PUSH   hl   
3A8F   E5                     PUSH   hl   
3A90   CD 61 0C               CALL   run   
3A93   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A9B   CD CA 0A               CALL   flushBuffer   
3A9E   CD 42 0B               CALL   printStr   
3AA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AAE   E1                     POP   hl   
3AAF   E5                     PUSH   hl   
3AB0   E5                     PUSH   hl   
3AB1   CD 61 0C               CALL   run   
3AB4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AC3   CD CA 0A               CALL   flushBuffer   
3AC6   76                     HALT      
3AC7                EXPECTM_0_2775S45:      
3AC7   E1                     POP   HL   
3AC8                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3AC8   31 00 4B               LD   SP,STACK   
3ACB   CD 8A 0B               CALL   coldInit   
3ACE   CD 7A 49               CALL   execStr   
3AD1   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3AE5   CD CA 0A               CALL   flushBuffer   
3AE8                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3AE8   E1                     POP   HL   
3AE9   E5                     PUSH   HL   
3AEA   11 0A 00               LD   DE,10   
3AED   B7                     OR   A   
3AEE   ED 52                  SBC   HL,DE   
3AF0   7D                     LD   A,L   
3AF1   B4                     OR   H   
3AF2   CA 60 3B               JP   Z,expectM_0_2776S45   
3AF5   CD 42 0B               CALL   printStr   
3AF8   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3B12   CD 42 0B               CALL   printStr   
3B15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B24   21 0A 00               LD   hl,10   
3B27   E5                     PUSH   hl   
3B28   E5                     PUSH   hl   
3B29   CD 61 0C               CALL   run   
3B2C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B34   CD CA 0A               CALL   flushBuffer   
3B37   CD 42 0B               CALL   printStr   
3B3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B47   E1                     POP   hl   
3B48   E5                     PUSH   hl   
3B49   E5                     PUSH   hl   
3B4A   CD 61 0C               CALL   run   
3B4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B5C   CD CA 0A               CALL   flushBuffer   
3B5F   76                     HALT      
3B60                EXPECTM_0_2776S45:      
3B60   E1                     POP   HL   
3B61                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
3B61   31 00 4B               LD   SP,STACK   
3B64   CD 8A 0B               CALL   coldInit   
3B67   CD 7A 49               CALL   execStr   
3B6A   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3B86   CD CA 0A               CALL   flushBuffer   
3B89                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3B89   E1                     POP   HL   
3B8A   E5                     PUSH   HL   
3B8B   11 0A 00               LD   DE,10   
3B8E   B7                     OR   A   
3B8F   ED 52                  SBC   HL,DE   
3B91   7D                     LD   A,L   
3B92   B4                     OR   H   
3B93   CA 09 3C               JP   Z,expectM_0_2777S45   
3B96   CD 42 0B               CALL   printStr   
3B99   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3BBB   CD 42 0B               CALL   printStr   
3BBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BCD   21 0A 00               LD   hl,10   
3BD0   E5                     PUSH   hl   
3BD1   E5                     PUSH   hl   
3BD2   CD 61 0C               CALL   run   
3BD5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BDD   CD CA 0A               CALL   flushBuffer   
3BE0   CD 42 0B               CALL   printStr   
3BE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BF0   E1                     POP   hl   
3BF1   E5                     PUSH   hl   
3BF2   E5                     PUSH   hl   
3BF3   CD 61 0C               CALL   run   
3BF6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C05   CD CA 0A               CALL   flushBuffer   
3C08   76                     HALT      
3C09                EXPECTM_0_2777S45:      
3C09   E1                     POP   HL   
3C0A                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3C0A   31 00 4B               LD   SP,STACK   
3C0D   CD 8A 0B               CALL   coldInit   
3C10   CD 7A 49               CALL   execStr   
3C13   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3C33   CD CA 0A               CALL   flushBuffer   
3C36                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3C36   E1                     POP   HL   
3C37   E5                     PUSH   HL   
3C38   11 0A 00               LD   DE,10   
3C3B   B7                     OR   A   
3C3C   ED 52                  SBC   HL,DE   
3C3E   7D                     LD   A,L   
3C3F   B4                     OR   H   
3C40   CA BA 3C               JP   Z,expectM_0_2778S45   
3C43   CD 42 0B               CALL   printStr   
3C46   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3C6C   CD 42 0B               CALL   printStr   
3C6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C7E   21 0A 00               LD   hl,10   
3C81   E5                     PUSH   hl   
3C82   E5                     PUSH   hl   
3C83   CD 61 0C               CALL   run   
3C86   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C8E   CD CA 0A               CALL   flushBuffer   
3C91   CD 42 0B               CALL   printStr   
3C94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CA1   E1                     POP   hl   
3CA2   E5                     PUSH   hl   
3CA3   E5                     PUSH   hl   
3CA4   CD 61 0C               CALL   run   
3CA7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CB6   CD CA 0A               CALL   flushBuffer   
3CB9   76                     HALT      
3CBA                EXPECTM_0_2778S45:      
3CBA   E1                     POP   HL   
3CBB                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3CBB   31 00 4B               LD   SP,STACK   
3CBE   CD 8A 0B               CALL   coldInit   
3CC1   CD 7A 49               CALL   execStr   
3CC4   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3CE4   CD CA 0A               CALL   flushBuffer   
3CE7                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3CE7   E1                     POP   HL   
3CE8   E5                     PUSH   HL   
3CE9   11 14 00               LD   DE,20   
3CEC   B7                     OR   A   
3CED   ED 52                  SBC   HL,DE   
3CEF   7D                     LD   A,L   
3CF0   B4                     OR   H   
3CF1   CA 6B 3D               JP   Z,expectM_0_2779S45   
3CF4   CD 42 0B               CALL   printStr   
3CF7   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3D1D   CD 42 0B               CALL   printStr   
3D20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D2F   21 14 00               LD   hl,20   
3D32   E5                     PUSH   hl   
3D33   E5                     PUSH   hl   
3D34   CD 61 0C               CALL   run   
3D37   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D3F   CD CA 0A               CALL   flushBuffer   
3D42   CD 42 0B               CALL   printStr   
3D45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D52   E1                     POP   hl   
3D53   E5                     PUSH   hl   
3D54   E5                     PUSH   hl   
3D55   CD 61 0C               CALL   run   
3D58   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D67   CD CA 0A               CALL   flushBuffer   
3D6A   76                     HALT      
3D6B                EXPECTM_0_2779S45:      
3D6B   E1                     POP   HL   
3D6C                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3D6C   31 00 4B               LD   SP,STACK   
3D6F   CD 8A 0B               CALL   coldInit   
3D72   CD 7A 49               CALL   execStr   
3D75   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3D89   CD CA 0A               CALL   flushBuffer   
3D8C                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3D8C   E1                     POP   HL   
3D8D   E5                     PUSH   HL   
3D8E   11 04 00               LD   DE,4   
3D91   B7                     OR   A   
3D92   ED 52                  SBC   HL,DE   
3D94   7D                     LD   A,L   
3D95   B4                     OR   H   
3D96   CA 04 3E               JP   Z,expectM_0_2780S45   
3D99   CD 42 0B               CALL   printStr   
3D9C   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3DB6   CD 42 0B               CALL   printStr   
3DB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DC8   21 04 00               LD   hl,4   
3DCB   E5                     PUSH   hl   
3DCC   E5                     PUSH   hl   
3DCD   CD 61 0C               CALL   run   
3DD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DD8   CD CA 0A               CALL   flushBuffer   
3DDB   CD 42 0B               CALL   printStr   
3DDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DEB   E1                     POP   hl   
3DEC   E5                     PUSH   hl   
3DED   E5                     PUSH   hl   
3DEE   CD 61 0C               CALL   run   
3DF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E00   CD CA 0A               CALL   flushBuffer   
3E03   76                     HALT      
3E04                EXPECTM_0_2780S45:      
3E04   E1                     POP   HL   
3E05                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3E05   31 00 4B               LD   SP,STACK   
3E08   CD 8A 0B               CALL   coldInit   
3E0B   CD 7A 49               CALL   execStr   
3E0E   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3E28   CD CA 0A               CALL   flushBuffer   
3E2B                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3E2B   E1                     POP   HL   
3E2C   E5                     PUSH   HL   
3E2D   11 09 00               LD   DE,9   
3E30   B7                     OR   A   
3E31   ED 52                  SBC   HL,DE   
3E33   7D                     LD   A,L   
3E34   B4                     OR   H   
3E35   CA A9 3E               JP   Z,expectM_0_2781S45   
3E38   CD 42 0B               CALL   printStr   
3E3B   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3E5B   CD 42 0B               CALL   printStr   
3E5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E6D   21 09 00               LD   hl,9   
3E70   E5                     PUSH   hl   
3E71   E5                     PUSH   hl   
3E72   CD 61 0C               CALL   run   
3E75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E7D   CD CA 0A               CALL   flushBuffer   
3E80   CD 42 0B               CALL   printStr   
3E83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E90   E1                     POP   hl   
3E91   E5                     PUSH   hl   
3E92   E5                     PUSH   hl   
3E93   CD 61 0C               CALL   run   
3E96   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EA5   CD CA 0A               CALL   flushBuffer   
3EA8   76                     HALT      
3EA9                EXPECTM_0_2781S45:      
3EA9   E1                     POP   HL   
3EAA                          ;*Macro unroll:  test "5 [4] :ab{$a $b -}; /pa ^", 1
3EAA   31 00 4B               LD   SP,STACK   
3EAD   CD 8A 0B               CALL   coldInit   
3EB0   CD 7A 49               CALL   execStr   
3EB3   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b -}; /pa ^"   
3ECD   CD CA 0A               CALL   flushBuffer   
3ED0                          ;*Macro unroll:  expect "5 [4] :ab{$a $b -}; /pa ^",1
3ED0   E1                     POP   HL   
3ED1   E5                     PUSH   HL   
3ED2   11 01 00               LD   DE,1   
3ED5   B7                     OR   A   
3ED6   ED 52                  SBC   HL,DE   
3ED8   7D                     LD   A,L   
3ED9   B4                     OR   H   
3EDA   CA 4E 3F               JP   Z,expectM_0_2782S45   
3EDD   CD 42 0B               CALL   printStr   
3EE0   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b -}; /pa ^"   
3F00   CD 42 0B               CALL   printStr   
3F03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F12   21 01 00               LD   hl,1   
3F15   E5                     PUSH   hl   
3F16   E5                     PUSH   hl   
3F17   CD 61 0C               CALL   run   
3F1A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F22   CD CA 0A               CALL   flushBuffer   
3F25   CD 42 0B               CALL   printStr   
3F28   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F35   E1                     POP   hl   
3F36   E5                     PUSH   hl   
3F37   E5                     PUSH   hl   
3F38   CD 61 0C               CALL   run   
3F3B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F4A   CD CA 0A               CALL   flushBuffer   
3F4D   76                     HALT      
3F4E                EXPECTM_0_2782S45:      
3F4E   E1                     POP   HL   
3F4F                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3F4F   31 00 4B               LD   SP,STACK   
3F52   CD 8A 0B               CALL   coldInit   
3F55   CD 7A 49               CALL   execStr   
3F58   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3F70   CD CA 0A               CALL   flushBuffer   
3F73                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3F73   E1                     POP   HL   
3F74   E5                     PUSH   HL   
3F75   11 06 00               LD   DE,6   
3F78   B7                     OR   A   
3F79   ED 52                  SBC   HL,DE   
3F7B   7D                     LD   A,L   
3F7C   B4                     OR   H   
3F7D   CA EF 3F               JP   Z,expectM_0_2783S45   
3F80   CD 42 0B               CALL   printStr   
3F83   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3FA1   CD 42 0B               CALL   printStr   
3FA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FB3   21 06 00               LD   hl,6   
3FB6   E5                     PUSH   hl   
3FB7   E5                     PUSH   hl   
3FB8   CD 61 0C               CALL   run   
3FBB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FC3   CD CA 0A               CALL   flushBuffer   
3FC6   CD 42 0B               CALL   printStr   
3FC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FD6   E1                     POP   hl   
3FD7   E5                     PUSH   hl   
3FD8   E5                     PUSH   hl   
3FD9   CD 61 0C               CALL   run   
3FDC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FEB   CD CA 0A               CALL   flushBuffer   
3FEE   76                     HALT      
3FEF                EXPECTM_0_2783S45:      
3FEF   E1                     POP   HL   
3FF0                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3FF0   31 00 4B               LD   SP,STACK   
3FF3   CD 8A 0B               CALL   coldInit   
3FF6   CD 7A 49               CALL   execStr   
3FF9   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
4014   CD CA 0A               CALL   flushBuffer   
4017                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
4017   E1                     POP   HL   
4018   E5                     PUSH   HL   
4019   11 02 00               LD   DE,2   
401C   B7                     OR   A   
401D   ED 52                  SBC   HL,DE   
401F   7D                     LD   A,L   
4020   B4                     OR   H   
4021   CA 96 40               JP   Z,expectM_0_2784S45   
4024   CD 42 0B               CALL   printStr   
4027   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
4048   CD 42 0B               CALL   printStr   
404B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405A   21 02 00               LD   hl,2   
405D   E5                     PUSH   hl   
405E   E5                     PUSH   hl   
405F   CD 61 0C               CALL   run   
4062   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
406A   CD CA 0A               CALL   flushBuffer   
406D   CD 42 0B               CALL   printStr   
4070   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
407D   E1                     POP   hl   
407E   E5                     PUSH   hl   
407F   E5                     PUSH   hl   
4080   CD 61 0C               CALL   run   
4083   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4092   CD CA 0A               CALL   flushBuffer   
4095   76                     HALT      
4096                EXPECTM_0_2784S45:      
4096   E1                     POP   HL   
4097                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4097   31 00 4B               LD   SP,STACK   
409A   CD 8A 0B               CALL   coldInit   
409D   CD 7A 49               CALL   execStr   
40A0   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
40C6   CD CA 0A               CALL   flushBuffer   
40C9                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
40C9   E1                     POP   HL   
40CA   E5                     PUSH   HL   
40CB   11 0A 00               LD   DE,10   
40CE   B7                     OR   A   
40CF   ED 52                  SBC   HL,DE   
40D1   7D                     LD   A,L   
40D2   B4                     OR   H   
40D3   CA 53 41               JP   Z,expectM_0_2785S45   
40D6   CD 42 0B               CALL   printStr   
40D9   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4105   CD 42 0B               CALL   printStr   
4108   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4117   21 0A 00               LD   hl,10   
411A   E5                     PUSH   hl   
411B   E5                     PUSH   hl   
411C   CD 61 0C               CALL   run   
411F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4127   CD CA 0A               CALL   flushBuffer   
412A   CD 42 0B               CALL   printStr   
412D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
413A   E1                     POP   hl   
413B   E5                     PUSH   hl   
413C   E5                     PUSH   hl   
413D   CD 61 0C               CALL   run   
4140   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
414F   CD CA 0A               CALL   flushBuffer   
4152   76                     HALT      
4153                EXPECTM_0_2785S45:      
4153   E1                     POP   HL   
4154                          ;*Macro unroll:  test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
4154   31 00 4B               LD   SP,STACK   
4157   CD 8A 0B               CALL   coldInit   
415A   CD 7A 49               CALL   execStr   
415D   33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
4185   CD CA 0A               CALL   flushBuffer   
4188                          ;*Macro unroll:  expect "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^",6
4188   E1                     POP   HL   
4189   E5                     PUSH   HL   
418A   11 06 00               LD   DE,6   
418D   B7                     OR   A   
418E   ED 52                  SBC   HL,DE   
4190   7D                     LD   A,L   
4191   B4                     OR   H   
4192   CA 14 42               JP   Z,expectM_0_2786S45   
4195   CD 42 0B               CALL   printStr   
4198   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
41C6   CD 42 0B               CALL   printStr   
41C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41D8   21 06 00               LD   hl,6   
41DB   E5                     PUSH   hl   
41DC   E5                     PUSH   hl   
41DD   CD 61 0C               CALL   run   
41E0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41E8   CD CA 0A               CALL   flushBuffer   
41EB   CD 42 0B               CALL   printStr   
41EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41FB   E1                     POP   hl   
41FC   E5                     PUSH   hl   
41FD   E5                     PUSH   hl   
41FE   CD 61 0C               CALL   run   
4201   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4210   CD CA 0A               CALL   flushBuffer   
4213   76                     HALT      
4214                EXPECTM_0_2786S45:      
4214   E1                     POP   HL   
4215                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4215   31 00 4B               LD   SP,STACK   
4218   CD 8A 0B               CALL   coldInit   
421B   CD 7A 49               CALL   execStr   
421E   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
422A   CD CA 0A               CALL   flushBuffer   
422D                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
422D   E1                     POP   HL   
422E   E5                     PUSH   HL   
422F   11 00 00               LD   DE,NUL   
4232   B7                     OR   A   
4233   ED 52                  SBC   HL,DE   
4235   7D                     LD   A,L   
4236   B4                     OR   H   
4237   CA 9D 42               JP   Z,expectM_0_2787S45   
423A   CD 42 0B               CALL   printStr   
423D   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
424F   CD 42 0B               CALL   printStr   
4252   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4261   21 00 00               LD   hl,NUL   
4264   E5                     PUSH   hl   
4265   E5                     PUSH   hl   
4266   CD 61 0C               CALL   run   
4269   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4271   CD CA 0A               CALL   flushBuffer   
4274   CD 42 0B               CALL   printStr   
4277   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4284   E1                     POP   hl   
4285   E5                     PUSH   hl   
4286   E5                     PUSH   hl   
4287   CD 61 0C               CALL   run   
428A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4299   CD CA 0A               CALL   flushBuffer   
429C   76                     HALT      
429D                EXPECTM_0_2787S45:      
429D   E1                     POP   HL   
429E                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
429E   31 00 4B               LD   SP,STACK   
42A1   CD 8A 0B               CALL   coldInit   
42A4   CD 7A 49               CALL   execStr   
42A7   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
42B3   CD CA 0A               CALL   flushBuffer   
42B6                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
42B6   E1                     POP   HL   
42B7   E5                     PUSH   HL   
42B8   11 00 00               LD   DE,NUL   
42BB   B7                     OR   A   
42BC   ED 52                  SBC   HL,DE   
42BE   7D                     LD   A,L   
42BF   B4                     OR   H   
42C0   CA 26 43               JP   Z,expectM_0_2788S45   
42C3   CD 42 0B               CALL   printStr   
42C6   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
42D8   CD 42 0B               CALL   printStr   
42DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42EA   21 00 00               LD   hl,NUL   
42ED   E5                     PUSH   hl   
42EE   E5                     PUSH   hl   
42EF   CD 61 0C               CALL   run   
42F2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42FA   CD CA 0A               CALL   flushBuffer   
42FD   CD 42 0B               CALL   printStr   
4300   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
430D   E1                     POP   hl   
430E   E5                     PUSH   hl   
430F   E5                     PUSH   hl   
4310   CD 61 0C               CALL   run   
4313   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4322   CD CA 0A               CALL   flushBuffer   
4325   76                     HALT      
4326                EXPECTM_0_2788S45:      
4326   E1                     POP   HL   
4327                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4327   31 00 4B               LD   SP,STACK   
432A   CD 8A 0B               CALL   coldInit   
432D   CD 7A 49               CALL   execStr   
4330   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
433C   CD CA 0A               CALL   flushBuffer   
433F                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
433F   E1                     POP   HL   
4340   E5                     PUSH   HL   
4341   11 00 00               LD   DE,NUL   
4344   B7                     OR   A   
4345   ED 52                  SBC   HL,DE   
4347   7D                     LD   A,L   
4348   B4                     OR   H   
4349   CA AF 43               JP   Z,expectM_0_2789S45   
434C   CD 42 0B               CALL   printStr   
434F   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4361   CD 42 0B               CALL   printStr   
4364   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4373   21 00 00               LD   hl,NUL   
4376   E5                     PUSH   hl   
4377   E5                     PUSH   hl   
4378   CD 61 0C               CALL   run   
437B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4383   CD CA 0A               CALL   flushBuffer   
4386   CD 42 0B               CALL   printStr   
4389   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4396   E1                     POP   hl   
4397   E5                     PUSH   hl   
4398   E5                     PUSH   hl   
4399   CD 61 0C               CALL   run   
439C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43AB   CD CA 0A               CALL   flushBuffer   
43AE   76                     HALT      
43AF                EXPECTM_0_2789S45:      
43AF   E1                     POP   HL   
43B0                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
43B0   31 00 4B               LD   SP,STACK   
43B3   CD 8A 0B               CALL   coldInit   
43B6   CD 7A 49               CALL   execStr   
43B9   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
43C5   CD CA 0A               CALL   flushBuffer   
43C8                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
43C8   E1                     POP   HL   
43C9   E5                     PUSH   HL   
43CA   11 00 00               LD   DE,NUL   
43CD   B7                     OR   A   
43CE   ED 52                  SBC   HL,DE   
43D0   7D                     LD   A,L   
43D1   B4                     OR   H   
43D2   CA 38 44               JP   Z,expectM_0_2790S45   
43D5   CD 42 0B               CALL   printStr   
43D8   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
43EA   CD 42 0B               CALL   printStr   
43ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43FC   21 00 00               LD   hl,NUL   
43FF   E5                     PUSH   hl   
4400   E5                     PUSH   hl   
4401   CD 61 0C               CALL   run   
4404   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
440C   CD CA 0A               CALL   flushBuffer   
440F   CD 42 0B               CALL   printStr   
4412   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
441F   E1                     POP   hl   
4420   E5                     PUSH   hl   
4421   E5                     PUSH   hl   
4422   CD 61 0C               CALL   run   
4425   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4434   CD CA 0A               CALL   flushBuffer   
4437   76                     HALT      
4438                EXPECTM_0_2790S45:      
4438   E1                     POP   HL   
4439                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4439   31 00 4B               LD   SP,STACK   
443C   CD 8A 0B               CALL   coldInit   
443F   CD 7A 49               CALL   execStr   
4442   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
444A   CD CA 0A               CALL   flushBuffer   
444D                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
444D   E1                     POP   HL   
444E   E5                     PUSH   HL   
444F   11 66 4D               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4452   B7                     OR   A   
4453   ED 52                  SBC   HL,DE   
4455   7D                     LD   A,L   
4456   B4                     OR   H   
4457   CA B9 44               JP   Z,expectM_0_2791S45   
445A   CD 42 0B               CALL   printStr   
445D   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
446B   CD 42 0B               CALL   printStr   
446E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
447D   21 66 4D               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4480   E5                     PUSH   hl   
4481   E5                     PUSH   hl   
4482   CD 61 0C               CALL   run   
4485   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
448D   CD CA 0A               CALL   flushBuffer   
4490   CD 42 0B               CALL   printStr   
4493   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44A0   E1                     POP   hl   
44A1   E5                     PUSH   hl   
44A2   E5                     PUSH   hl   
44A3   CD 61 0C               CALL   run   
44A6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44B5   CD CA 0A               CALL   flushBuffer   
44B8   76                     HALT      
44B9                EXPECTM_0_2791S45:      
44B9   E1                     POP   HL   
44BA                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
44BA   31 00 4B               LD   SP,STACK   
44BD   CD 8A 0B               CALL   coldInit   
44C0   CD 7A 49               CALL   execStr   
44C3   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
44CB   CD CA 0A               CALL   flushBuffer   
44CE                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
44CE   E1                     POP   HL   
44CF   E5                     PUSH   HL   
44D0   11 34 4D               LD   DE,VARS + ("Z"-"A"+1)*2   
44D3   B7                     OR   A   
44D4   ED 52                  SBC   HL,DE   
44D6   7D                     LD   A,L   
44D7   B4                     OR   H   
44D8   CA 3A 45               JP   Z,expectM_0_2792S45   
44DB   CD 42 0B               CALL   printStr   
44DE   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
44EC   CD 42 0B               CALL   printStr   
44EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44FE   21 34 4D               LD   hl,VARS + ("Z"-"A"+1)*2   
4501   E5                     PUSH   hl   
4502   E5                     PUSH   hl   
4503   CD 61 0C               CALL   run   
4506   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
450E   CD CA 0A               CALL   flushBuffer   
4511   CD 42 0B               CALL   printStr   
4514   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4521   E1                     POP   hl   
4522   E5                     PUSH   hl   
4523   E5                     PUSH   hl   
4524   CD 61 0C               CALL   run   
4527   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4536   CD CA 0A               CALL   flushBuffer   
4539   76                     HALT      
453A                EXPECTM_0_2792S45:      
453A   E1                     POP   HL   
453B                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
453B   31 00 4B               LD   SP,STACK   
453E   CD 8A 0B               CALL   coldInit   
4541   CD 7A 49               CALL   execStr   
4544   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
454C   CD CA 0A               CALL   flushBuffer   
454F                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
454F   E1                     POP   HL   
4550   E5                     PUSH   HL   
4551   11 32 4D               LD   DE,VARS + ("Z"-"A")*2   
4554   B7                     OR   A   
4555   ED 52                  SBC   HL,DE   
4557   7D                     LD   A,L   
4558   B4                     OR   H   
4559   CA BB 45               JP   Z,expectM_0_2793S45   
455C   CD 42 0B               CALL   printStr   
455F   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
456D   CD 42 0B               CALL   printStr   
4570   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
457F   21 32 4D               LD   hl,VARS + ("Z"-"A")*2   
4582   E5                     PUSH   hl   
4583   E5                     PUSH   hl   
4584   CD 61 0C               CALL   run   
4587   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
458F   CD CA 0A               CALL   flushBuffer   
4592   CD 42 0B               CALL   printStr   
4595   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45A2   E1                     POP   hl   
45A3   E5                     PUSH   hl   
45A4   E5                     PUSH   hl   
45A5   CD 61 0C               CALL   run   
45A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45B7   CD CA 0A               CALL   flushBuffer   
45BA   76                     HALT      
45BB                EXPECTM_0_2793S45:      
45BB   E1                     POP   HL   
45BC                          ;*Macro unroll:  test "'A' /ad", VARS
45BC   31 00 4B               LD   SP,STACK   
45BF   CD 8A 0B               CALL   coldInit   
45C2   CD 7A 49               CALL   execStr   
45C5   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
45CD   CD CA 0A               CALL   flushBuffer   
45D0                          ;*Macro unroll:  expect "'A' /ad",VARS
45D0   E1                     POP   HL   
45D1   E5                     PUSH   HL   
45D2   11 00 4D               LD   DE,VARS   
45D5   B7                     OR   A   
45D6   ED 52                  SBC   HL,DE   
45D8   7D                     LD   A,L   
45D9   B4                     OR   H   
45DA   CA 3C 46               JP   Z,expectM_0_2794S45   
45DD   CD 42 0B               CALL   printStr   
45E0   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
45EE   CD 42 0B               CALL   printStr   
45F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4600   21 00 4D               LD   hl,VARS   
4603   E5                     PUSH   hl   
4604   E5                     PUSH   hl   
4605   CD 61 0C               CALL   run   
4608   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4610   CD CA 0A               CALL   flushBuffer   
4613   CD 42 0B               CALL   printStr   
4616   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4623   E1                     POP   hl   
4624   E5                     PUSH   hl   
4625   E5                     PUSH   hl   
4626   CD 61 0C               CALL   run   
4629   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4638   CD CA 0A               CALL   flushBuffer   
463B   76                     HALT      
463C                EXPECTM_0_2794S45:      
463C   E1                     POP   HL   
463D                          ;*Macro unroll:  test "-1. /c/vB 0%", $2D
463D   31 00 4B               LD   SP,STACK   
4640   CD 8A 0B               CALL   coldInit   
4643   CD 7A 49               CALL   execStr   
4646   2D 31 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "-1. /c/vB 0%"   
4653   CD CA 0A               CALL   flushBuffer   
4656                          ;*Macro unroll:  expect "-1. /c/vB 0%",$2D
4656   E1                     POP   HL   
4657   E5                     PUSH   HL   
4658   11 2D 00               LD   DE,$2D   
465B   B7                     OR   A   
465C   ED 52                  SBC   HL,DE   
465E   7D                     LD   A,L   
465F   B4                     OR   H   
4660   CA C7 46               JP   Z,expectM_0_2795S45   
4663   CD 42 0B               CALL   printStr   
4666   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","-1. /c/vB 0%"   
4679   CD 42 0B               CALL   printStr   
467C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
468B   21 2D 00               LD   hl,$2D   
468E   E5                     PUSH   hl   
468F   E5                     PUSH   hl   
4690   CD 61 0C               CALL   run   
4693   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
469B   CD CA 0A               CALL   flushBuffer   
469E   CD 42 0B               CALL   printStr   
46A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46AE   E1                     POP   hl   
46AF   E5                     PUSH   hl   
46B0   E5                     PUSH   hl   
46B1   CD 61 0C               CALL   run   
46B4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46C3   CD CA 0A               CALL   flushBuffer   
46C6   76                     HALT      
46C7                EXPECTM_0_2795S45:      
46C7   E1                     POP   HL   
46C8                          ;*Macro unroll:  test "`A`.s /c/vB 0%", 65
46C8   31 00 4B               LD   SP,STACK   
46CB   CD 8A 0B               CALL   coldInit   
46CE   CD 7A 49               CALL   execStr   
46D1   60 41 60 2E 73 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "`A`.s /c/vB 0%"   
46E0   CD CA 0A               CALL   flushBuffer   
46E3                          ;*Macro unroll:  expect "`A`.s /c/vB 0%",65
46E3   E1                     POP   HL   
46E4   E5                     PUSH   HL   
46E5   11 41 00               LD   DE,65   
46E8   B7                     OR   A   
46E9   ED 52                  SBC   HL,DE   
46EB   7D                     LD   A,L   
46EC   B4                     OR   H   
46ED   CA 56 47               JP   Z,expectM_0_2796S45   
46F0   CD 42 0B               CALL   printStr   
46F3   43 6F 64 65 3A 20 60 41 60 2E 73 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","`A`.s /c/vB 0%"   
4708   CD 42 0B               CALL   printStr   
470B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
471A   21 41 00               LD   hl,65   
471D   E5                     PUSH   hl   
471E   E5                     PUSH   hl   
471F   CD 61 0C               CALL   run   
4722   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
472A   CD CA 0A               CALL   flushBuffer   
472D   CD 42 0B               CALL   printStr   
4730   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
473D   E1                     POP   hl   
473E   E5                     PUSH   hl   
473F   E5                     PUSH   hl   
4740   CD 61 0C               CALL   run   
4743   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4752   CD CA 0A               CALL   flushBuffer   
4755   76                     HALT      
4756                EXPECTM_0_2796S45:      
4756   E1                     POP   HL   
4757                          ;*Macro unroll:  test "123. /c/vB 1%", $32
4757   31 00 4B               LD   SP,STACK   
475A   CD 8A 0B               CALL   coldInit   
475D   CD 7A 49               CALL   execStr   
4760   31 32 33 2E 20 2F 63 2F 76 42 20 31 25 00 .CSTR   "123. /c/vB 1%"   
476E   CD CA 0A               CALL   flushBuffer   
4771                          ;*Macro unroll:  expect "123. /c/vB 1%",$32
4771   E1                     POP   HL   
4772   E5                     PUSH   HL   
4773   11 32 00               LD   DE,$32   
4776   B7                     OR   A   
4777   ED 52                  SBC   HL,DE   
4779   7D                     LD   A,L   
477A   B4                     OR   H   
477B   CA E3 47               JP   Z,expectM_0_2797S45   
477E   CD 42 0B               CALL   printStr   
4781   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 25 00 .CSTR   "Code: ","123. /c/vB 1%"   
4795   CD 42 0B               CALL   printStr   
4798   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A7   21 32 00               LD   hl,$32   
47AA   E5                     PUSH   hl   
47AB   E5                     PUSH   hl   
47AC   CD 61 0C               CALL   run   
47AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47B7   CD CA 0A               CALL   flushBuffer   
47BA   CD 42 0B               CALL   printStr   
47BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47CA   E1                     POP   hl   
47CB   E5                     PUSH   hl   
47CC   E5                     PUSH   hl   
47CD   CD 61 0C               CALL   run   
47D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47DF   CD CA 0A               CALL   flushBuffer   
47E2   76                     HALT      
47E3                EXPECTM_0_2797S45:      
47E3   E1                     POP   HL   
47E4                          ;*Macro unroll:  test "#4321 /h. /c/vB 0%", $23
47E4   31 00 4B               LD   SP,STACK   
47E7   CD 8A 0B               CALL   coldInit   
47EA   CD 7A 49               CALL   execStr   
47ED   23 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "#4321 /h. /c/vB 0%"   
4800   CD CA 0A               CALL   flushBuffer   
4803                          ;*Macro unroll:  expect "#4321 /h. /c/vB 0%",$23
4803   E1                     POP   HL   
4804   E5                     PUSH   HL   
4805   11 23 00               LD   DE,$23   
4808   B7                     OR   A   
4809   ED 52                  SBC   HL,DE   
480B   7D                     LD   A,L   
480C   B4                     OR   H   
480D   CA 7A 48               JP   Z,expectM_0_2798S45   
4810   CD 42 0B               CALL   printStr   
4813   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","#4321 /h. /c/vB 0%"   
482C   CD 42 0B               CALL   printStr   
482F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
483E   21 23 00               LD   hl,$23   
4841   E5                     PUSH   hl   
4842   E5                     PUSH   hl   
4843   CD 61 0C               CALL   run   
4846   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
484E   CD CA 0A               CALL   flushBuffer   
4851   CD 42 0B               CALL   printStr   
4854   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4861   E1                     POP   hl   
4862   E5                     PUSH   hl   
4863   E5                     PUSH   hl   
4864   CD 61 0C               CALL   run   
4867   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4876   CD CA 0A               CALL   flushBuffer   
4879   76                     HALT      
487A                EXPECTM_0_2798S45:      
487A   E1                     POP   HL   
487B                          ;*Macro unroll:  test "[1 2 3]:a:bc{`[ `.s $a/s$c= 0$b= ($a$b%. $b++ $b$c</br)^ `]`.s};^",0
487B   31 00 4B               LD   SP,STACK   
487E   CD 8A 0B               CALL   coldInit   
4881   CD 7A 49               CALL   execStr   
4884   5B 31 20 32 20 33 5D 3A 61 3A 62 63 7B 60 5B 20 60 2E 73 20 24 61 2F 73 24 63 3D 20 30 24 62 3D 20 28 24 61 24 62 25 2E 20 24 62 2B 2B 20 24 62 24 63 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 7D 3B 5E 00 .CSTR   "[1 2 3]:a:bc{`[ `.s $a/s$c= 0$b= ($a$b%. $b++ $b$c</br)^ `]`.s};^"   
48C6   CD CA 0A               CALL   flushBuffer   
48C9                          ;*Macro unroll:  expect "[1 2 3]:a:bc{`[ `.s $a/s$c= 0$b= ($a$b%. $b++ $b$c</br)^ `]`.s};^",0
48C9   E1                     POP   HL   
48CA   E5                     PUSH   HL   
48CB   11 00 00               LD   DE,0   
48CE   B7                     OR   A   
48CF   ED 52                  SBC   HL,DE   
48D1   7D                     LD   A,L   
48D2   B4                     OR   H   
48D3   CA 6F 49               JP   Z,expectM_0_2799S45   
48D6   CD 42 0B               CALL   printStr   
48D9   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 3A 61 3A 62 63 7B 60 5B 20 60 2E 73 20 24 61 2F 73 24 63 3D 20 30 24 62 3D 20 28 24 61 24 62 25 2E 20 24 62 2B 2B 20 24 62 24 63 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 7D 3B 5E 00 .CSTR   "Code: ","[1 2 3]:a:bc{`[ `.s $a/s$c= 0$b= ($a$b%. $b++ $b$c</br)^ `]`.s};^"   
4921   CD 42 0B               CALL   printStr   
4924   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4933   21 00 00               LD   hl,0   
4936   E5                     PUSH   hl   
4937   E5                     PUSH   hl   
4938   CD 61 0C               CALL   run   
493B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4943   CD CA 0A               CALL   flushBuffer   
4946   CD 42 0B               CALL   printStr   
4949   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4956   E1                     POP   hl   
4957   E5                     PUSH   hl   
4958   E5                     PUSH   hl   
4959   CD 61 0C               CALL   run   
495C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
496B   CD CA 0A               CALL   flushBuffer   
496E   76                     HALT      
496F                EXPECTM_0_2799S45:      
496F   E1                     POP   HL   
4970                             ; 
4970   CD 42 0B               CALL   printStr   
4973   44 6F 6E 65 21 00      .CSTR   "Done!"   
4979   76                     HALT      
497A                             ; executes a null teminated string (null executes exit_)
497A                             ; the string should be immedaitely following the call
497A                EXECSTR:      ; create a root stack frame
497A   C1                     POP   bc   ; bc = code*
497B   0B                     DEC   bc   ; dec to prepare for next routine
497C   11 00 00               LD   de,0   
497F   D5                     PUSH   de   ; push fake IP
4980   D5                     PUSH   de   ; push null arg_list*
4981   D5                     PUSH   de   ; push null first_arg*
4982   D5                     PUSH   de   ; push fake BP
4983   DD E9                  JP   (ix)   
4985                STKSIZE:   EQU   $100   ; Stack size
4985                TIBSIZE:   EQU   $100   ; 256 bytes
4985                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4985                          ALIGN   $100   
4A00                          DS   STKSIZE   
4B00                STACK:       
4B00                          ALIGN   $100   
4B00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                VARS:        
4D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4DD0                RESTARTS:      
4DD0                RST08:    DS   2   
4DD2                RST10:    DS   2   
4DD4                RST18:    DS   2   
4DD6                RST20:    DS   2   
4DD8                RST28:    DS   2   
4DDA                RST30:    DS   2   ; 
4DDC                BAUD:     DS   2   ; 
4DDE                INTVEC:   DS   2   ; 
4DE0                NMIVEC:   DS   2   ; 
4DE2                GETCVEC:   DS   2   ; 
4DE4                PUTCVEC:   DS   2   ; 
4DE6                SYSVARS:      
4DE6                             ; initialised sys variables (preserved)
4DE6                VDATAWIDTH:   DS   2   ; 
4DE8                VNUMBASE:   DS   2   ; 
4DEA                VTIBPTR:   DS   2   ; 
4DEC                VBUFPTR:   DS   2   ; 
4DEE                VNEXT:    DS   2   ; 
4DF0                VHEAPPTR:   DS   2   ; 
4DF2                             ; uninitialised sys variables (preserved)
4DF2                VPOINTER:   DS   2   ; 
4DF4                VREMAIN:   DS   2   ; 
4DF6                VSAVEDIP:   DS   2   ; 
4DF8                VSAVEDSP:   DS   2   ; 
4DFA                VSAVEDNEXT:   DS   2   ; 
4DFC                VSAVEDBP:   DS   2   ; 
4DFE                VCHECKSUM:   DS   2   ; 
4E00                             ; uninitialised sys variables (unpreserved)
4E00                VTEMP1:   DS   2   ; 
4E02                VTEMP2:   DS   2   ; 
4E04                VLASTDEF:   DS   2   ; 
4E06                VHASHSTR:   DS   2   ; 
4E08                TBPTR:    DS   2   ; reserved for tests
4E0A                TITLEBUF:   DS   20   
4E1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB8 DEFINED AT LINE 1717 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 415 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 412 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 198 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 200 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 202 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 204 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 208 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 213 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 215 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 217 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 219 IN MAIN.asm
DBLQUOTE_:          034A DEFINED AT LINE 221 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 223 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 225 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
GT_:                035F DEFINED AT LINE 238 IN MAIN.asm
LT_:                036A DEFINED AT LINE 246 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 258 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 260 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 262 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 269 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 289 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 295 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 309 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
DOLLAR:             03C4 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 339 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 381 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 396 IN MAIN.asm
ARRAYEND1:          0439 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
ARRAYEND2:          0449 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 425 IN MAIN.asm
ARRAYEND3:          044E DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 418 IN MAIN.asm
ARRINDEX:           046F DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          0477 DEFINED AT LINE 465 IN MAIN.asm
ARRINDEX1:          0478 DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
ARRINDEX2:          0484 DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
ASSIGN:             0487 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
ASSIGN0:            0489 DEFINED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
ASSIGNX:            048A DEFINED AT LINE 486 IN MAIN.asm
ASSIGN1:            0496 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
COLON:              0498 DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
ARGLIST:            0498 DEFINED AT LINE 502 IN MAIN.asm
ARGLIST1:           04A2 DEFINED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
ARGLIST1A:          04AA DEFINED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
ARGLIST2:           04B2 DEFINED AT LINE 520 IN MAIN.asm
ARGLIST3:           04BA DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 526 IN MAIN.asm
ARGLIST4:           04BD DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
ARGLIST5:           04C3 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
LBRACE:             04CE DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04CE DEFINED AT LINE 548 IN MAIN.asm
BLOCKSTART1:        04D2 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
BLOCKSTART2:        04FE DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
BLOCKSTART3:        0501 DEFINED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
BLOCKSTART4:        0509 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
BLOCKSTART5:        050C DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
BLOCKSTART6:        0534 DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
RBRACE:             0537 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           0537 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
BLOCKEND1:          0569 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
BLOCKEND2:          0575 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCKEND3:          0587 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
TICK:               0593 DEFINED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0593 DEFINED AT LINE 666 IN MAIN.asm
CHAR1:              0596 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
CHAR2:              05A2 DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
CHAR3:              05A5 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
BACKSLASH:          05A8 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05AA DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
DISCARD:            05AA DEFINED AT LINE 690 IN MAIN.asm
DISCARD1:           05B7 DEFINED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 697 IN MAIN.asm
SLASH:              05B9 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
COMMAND:            05B9 DEFINED AT LINE 703 IN MAIN.asm
DIV:                05F2 DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
DOT:                0603 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0615 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
DIVIDE1:            061A DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
DIVIDE2:            0627 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DIVIDE3:            0628 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
EQUALS:             062E DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
LESSTHANEQ:         0636 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           063B DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0640 DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
TRUE1:              0643 DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
NULL1:              0649 DEFINED AT LINE 817 IN MAIN.asm
FALSE1:             0649 DEFINED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
CARET:              064F DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
GO:                 064F DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
GO1:                0650 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
GO2:                0656 DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK:            0661 DEFINED AT LINE 842 IN MAIN.asm
GOBLOCK1:           0661 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
GOBLOCK2:           0686 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
GOLAMBDA:           0694 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
GOLAMBDA1:          06B1 DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
GOLAMBDA2:          06B7 DEFINED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
GOLAMBDA3:          06C2 DEFINED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
GOLAMBDA4:          06DA DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
GOLAMBDA5:          06DD DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
GOLAMBDA6:          06E0 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
GOLAMBDA7:          06E3 DEFINED AT LINE 932 IN MAIN.asm
GOLAMBDA8:          06E7 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
HASH:               06F2 DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
HEXNUM:             06F2 DEFINED AT LINE 947 IN MAIN.asm
HEXNUM1:            06F5 DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
HEXNUM2:            06FD DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
UPCASE:             070F DEFINED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
LOWCASE:            0714 DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
IDENT1:             0719 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
QUESTION:           0726 DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IF:                 0726 DEFINED AT LINE 989 IN MAIN.asm
IFTE:               0732 DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
IFTE1:              0733 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
STAR:               073F DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
MUL:                073F DEFINED AT LINE 1012 IN MAIN.asm
MUL2:               0741 DEFINED AT LINE 1015 IN MAIN.asm
MUL3:               0749 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
NUM:                075B DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
NUM0:               0764 DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
NUM1:               0765 DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
NUM2:               077D DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
NUM3:               0788 DEFINED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
RPAREN:             078B DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
SEMICOLON:          0793 DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07AF DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT1:         07B7 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
SHIFTLEFT2:         07B8 DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
SHIFTRIGHT:         07BF DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTRIGHT1:        07C7 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
SHIFTRIGHT2:        07CB DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
DBLQUOTE:           07D2 DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
STRING:             07D2 DEFINED AT LINE 1138 IN MAIN.asm
STRING1:            07DB DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
STRING2:            07DE DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
STRING3:            07E7 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
MINUS:              07FA DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
SUB:                0806 DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
SUB1:               0810 DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
ERROR1:             0819 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
COMMENT:            0820 DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
COMMAND_A:          0829 DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
ABSOLUTE:           0835 DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
ADDROF:             0842 DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
ADDROF1:            0856 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
ADDROF2:            0861 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
COMMAND_B:          0863 DEFINED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
BUFFERARRAY:        087E DEFINED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
BUFFERNUMBER:       08B2 DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
BUFFERDEC:          08B9 DEFINED AT LINE 1295 IN MAIN.asm
BUFFERDEC0:         08D3 DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
BUFFERDEC1:         08E3 DEFINED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC2:         0903 DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
BUFFERDEC3:         0905 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
BUFFERDEC4:         0915 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
BUFFERDEC5:         0916 DEFINED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERHEX:          091F DEFINED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
BUFFERHEX1:         0940 DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
BUFFERHEX2:         0949 DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
BREAK:              0957 DEFINED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
BREAK1:             095E DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
BUFFERSTRING:       0971 DEFINED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
BUFFERSTRING0:      0978 DEFINED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
BUFFERSTRING1:      097E DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
BUFFERCHAR:         098B DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
BUFFERXCHARS:       0990 DEFINED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
BUFFERXCHARS0:      0991 DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
BUFFERXCHARS1:      099A DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
BUFFERXCHARS2:      09A2 DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
COMMAND_I:          09AC DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
COMMAND_P:          09B8 DEFINED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
PARTIAL:            09CA DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
PRINTBUFFER:        09EA DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
PRINTCHARS:         0A0D DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
PRINTCHARS1:        0A14 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
PRINTCHARS2:        0A1A DEFINED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
PRINTSTACK:         0A1F DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
COMMAND_R:          0A21 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
REMAIN:             0A2A DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
SIZE:               0A30 DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
COMMAND_V:          0A3A DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
CONSTBUFSTART:      0A4F DEFINED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
CONSTHEAPSTART:     0A54 DEFINED AT LINE 1615 IN MAIN.asm
CONSTTIBSTART:      0A59 DEFINED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
VARBUFPTR:          0A5E DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
VARHEAPPTR:         0A67 DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
VARTIBPTR:          0A70 DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
VARIABLE:           0A79 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
CONSTANT:           0A7C DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
CHARS:              0A7F DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
CHARS1:             0A82 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
DECIMAL:            0A87 DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
DECIMAL1:           0A8A DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
HEXADECIMAL:        0A8F DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
INPUT:              0A95 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
KEY:                0AA0 DEFINED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
OUTPUT:             0AA9 DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
NUMBERS:            0AB2 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
FILTER:             0AB8 DEFINED AT LINE 1715 IN MAIN.asm
MAP:                0AB8 DEFINED AT LINE 1716 IN MAIN.asm
ARGSX1A0L_:         0ABA DEFINED AT LINE 1726 IN MAIN.asm
ARGSX0A2L_:         0ABD DEFINED AT LINE 1730 IN MAIN.asm
ARGS1A0L:           0AC2 DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
ARGS1A2L:           0AC5 DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
FLUSHBUFFER:        0ACA DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
JUMPTABLE:          0AE1 DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
JUMPTABLE0:         0AE3 DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
JUMPTABLE1:         0AF0 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
JUMPTABLE2:         0AF1 DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
PRTSTR0:            0AF7 DEFINED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
PRTSTR:             0AFB DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
NESTING:            0B00 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
NESTING0:           0B0A DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
NESTING1A:          0B11 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
NESTING1:           0B14 DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
NESTING2:           0B23 DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
NESTING3:           0B25 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
NESTING4:           0B30 DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
PROMPT:             0B32 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
CRLF:               0B3B DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
PRINTSTR:           0B42 DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 162
TITLESTR:           0B49 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
INIT:               0B5D DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
INIT1:              0B65 DEFINED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
WARMINIT:           0B6D DEFINED AT LINE 1884 IN MAIN.asm
COLDBOOT0:          0B80 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
COLDINIT:           0B8A DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
COLDBOOT1:          0B9B DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
COLDSTART:          0BA8 DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
START:              0BB1 DEFINED AT LINE 1919 IN MAIN.asm
START1:             0BB7 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
INTERPRET:          0BBD DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
INTERPRET2:         0BCC DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
INTERPRET3:         0BD4 DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
INTERPRET4:         0BDF DEFINED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
INTERPRET5:         0BE4 DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
INTERPRET5A:        0C07 DEFINED AT LINE 1996 IN MAIN.asm
INTERPRET6:         0C09 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
INTERPRET7:         0C17 DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
INTERPRET8:         0C2A DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
NEXT:               0C45 DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
NEXT1:              0C56 DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
EXIT:               0C5D DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
RUN:                0C61 DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
ERROR:              0C65 DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
BACKSPACE_:         0C78 DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
EDIT_:              0C88 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
REEDIT_:            0CA0 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
PRINTSTACK_:        0CA3 DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_0_2688S45:  0D76 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2689S45:  0DED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2690S45:  0E62 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2691S45:  0ED7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2692S45:  0F4C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2693S45:  0FC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2694S45:  1038 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2695S45:  10B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2696S45:  1128 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2697S45:  119F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2698S45:  1218 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2699S45:  1293 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2700S45:  130C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2701S45:  1385 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2702S45:  1404 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2703S45:  1483 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2704S45:  1500 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2705S45:  1581 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2706S45:  1606 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2707S45:  1689 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2708S45:  1706 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2709S45:  178B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2710S45:  180C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2711S45:  1889 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2712S45:  1906 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2713S45:  198B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2714S45:  1A08 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2715S45:  1A85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2716S45:  1B04 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2717S45:  1B93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2718S45:  1C10 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2719S45:  1C95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2720S45:  1D12 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2721S45:  1D97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2722S45:  1E14 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2723S45:  1E93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2724S45:  1F12 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2725S45:  1F8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2726S45:  200C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2727S45:  2089 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2728S45:  2106 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2729S45:  2183 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2730S45:  2200 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2731S45:  227D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2732S45:  22FA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2733S45:  2379 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2734S45:  23F8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2735S45:  2477 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2736S45:  24F8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2737S45:  2579 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2738S45:  25F4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2739S45:  266F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2740S45:  26F0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2741S45:  2777 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2742S45:  27FE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2743S45:  2889 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2744S45:  291E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2745S45:  29B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2746S45:  2A2E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2747S45:  2AAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2748S45:  2B2A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2749S45:  2BAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2750S45:  2C2A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2751S45:  2CA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2752S45:  2D2A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2753S45:  2DB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2754S45:  2E3C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2755S45:  2EC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2756S45:  2F54 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2757S45:  2FE7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2758S45:  3080 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2759S45:  311D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2760S45:  31AC DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2761S45:  3241 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2762S45:  32D8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2763S45:  3371 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2764S45:  3408 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2765S45:  34AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2766S45:  3540 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2767S45:  35DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2768S45:  3680 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2769S45:  3723 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2770S45:  37D2 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2771S45:  3881 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2772S45:  390E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2773S45:  39A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2774S45:  3A2E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2775S45:  3AC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2776S45:  3B60 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2777S45:  3C09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2778S45:  3CBA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2779S45:  3D6B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2780S45:  3E04 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2781S45:  3EA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2782S45:  3F4E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2783S45:  3FEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2784S45:  4096 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2785S45:  4153 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2786S45:  4214 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2787S45:  429D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2788S45:  4326 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2789S45:  43AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2790S45:  4438 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2791S45:  44B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2792S45:  453A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2793S45:  45BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2794S45:  463C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2795S45:  46C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2796S45:  4756 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2797S45:  47E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2798S45:  487A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2799S45:  496F DEFINED AT LINE 34
                    > USED AT LINE 10
EXECSTR:            497A DEFINED AT LINE 168
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4B00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TIB:                4B00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
BUF:                4C00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
VARS:               4D00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           4DD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4DD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4DD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4DD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4DD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4DD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4DDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4DDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4DDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4DE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4DE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4DE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4DE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1899 IN MAIN.asm
VDATAWIDTH:         4DE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
VNUMBASE:           4DE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
VTIBPTR:            4DEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
VBUFPTR:            4DEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
VNEXT:              4DEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1911 IN MAIN.asm
VHEAPPTR:           4DF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
VPOINTER:           4DF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
VREMAIN:            4DF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
VSAVEDIP:           4DF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
VSAVEDSP:           4DF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
VSAVEDNEXT:         4DFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
VSAVEDBP:           4DFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
VCHECKSUM:          4DFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4E00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
VTEMP2:             4E02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
VLASTDEF:           4E04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4E06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4E08 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           4E0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
HEAP:               4E1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
