0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4E               LD   (RST08),HL   
0094   22 D2 4E               LD   (RST10),HL   
0097   22 D4 4E               LD   (RST18),HL   
009A   22 D6 4E               LD   (RST20),HL   
009D   22 D8 4E               LD   (RST28),HL   
00A0   22 DA 4E               LD   (RST30),HL   
00A3   22 DE 4E               LD   (INTVEC),HL   
00A6   22 E0 4E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0D               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4C                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4D                  DW   BUF   ; vBUFPtr pointer into BUF
0188   93 0C                  DW   next   ; nNext
018A   1E 4F                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 E4 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 9E 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 C4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 2D 05               JP   rbrace   
031E                TICK_:       
031E   C3 89 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 85 07               JP   semicolon   
0324                DOT_:        
0324   C3 F9 05               JP   dot   
0327                COLON_:      
0327   C3 8E 04               JP   colon   
032A                UPCASE_:      
032A   C3 01 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 06 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 18 07               JP   question   
0333                STAR_:       
0333   C3 31 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 4D 07               JP   num   
033E                HASH_:       
033E   C3 65 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 45 06               JP   caret   
0347                COMMA_:      
0347   C3 A0 05               JP   comma   
034A                DQUOTE_:      
034A   C3 44 08               JP   dquote   
034D                MINUS_:      
034D   C3 6C 08               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 7D 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 24 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA 31 08               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA 21 08               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 2C 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 31 06               JP   lessthan   
037C                SLASH_:      
037C   C3 AF 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 7D 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 7F 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 4E            LD   de,(vPointer)   
039A   21 F2 4E               LD   hl,vPointer   
039D   C3 CF 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 4E               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   18 15                  JR   arrayEnd3   
0431                ARRAYEND1:      
0431   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0434   77                     LD   (hl),a   ; write lsb of array item
0435   23                     INC   hl   ; move to msb of array item
0436   3A E6 4E               LD   a,(vDataWidth)   ; vDataWidth=1?
0439   3D                     DEC   a   
043A   28 05                  JR   z,arrayEnd2   
043C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043F   77                     LD   (hl),a   ; write msb of array item
0440   23                     INC   hl   ; move to next word in array
0441                ARRAYEND2:      
0441   FD 2B                  DEC   iy   ; move to next word on stack
0443   FD 2B                  DEC   iy   
0445   0B                     DEC   bc   ; dec items count
0446                ARRAYEND3:      
0446   79                     LD   a,c   ; if not zero loop
0447   B0                     OR   b   
0448   20 E7                  JR   nz,arrayEnd1   
044A   EB                     EX   de,hl   ; de = end of array, hl = BP
044B   F9                     LD   sp,hl   ; sp = BP
044C   E1                     POP   hl   ; de = end of array, hl = old BP
044D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044E   FD 62                  LD   iyh,d   
0450   FD 6B                  LD   iyl,e   
0452   D1                     POP   de   ; pop arg_list (discard)
0453   D1                     POP   de   ; pop first_arg* (discard)
0454   D1                     POP   de   ; pop IP (discard)
0455   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = array[-2]
0459   13                     INC   de   
045A   13                     INC   de   
045B   D5                     PUSH   de   ; return array[0]
045C   22 F0 4E               LD   (vHeapPtr),hl   ; move heap* to end of array
045F   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
0463   DD E9                  JP   (ix)   
0465                             ; index of an array, based on vDataWidth
0465                             ; array num -- value    ; also sets vPointer to address
0465                HASH:        
0465                ARRAYINDEX:      
0465   E1                     POP   hl   ; hl = index
0466   D1                     POP   de   ; de = array
0467   3A E6 4E               LD   a,(vDataWidth)   ; a = data width
046A   3D                     DEC   a   
046B   28 01                  JR   z,arrayIndex1   
046D                ARRAYINDEX0:      
046D   29                     ADD   hl,hl   ; if data width = 2 then double
046E                ARRAYINDEX1:      
046E   19                     ADD   hl,de   ; add addr
046F   22 F2 4E               LD   (vPointer),hl   ; store address in setter
0472   16 00                  LD   d,0   
0474   5E                     LD   e,(hl)   
0475   B7                     OR   a   ; check data width again
0476   28 02                  JR   z,arrayIndex2   
0478   23                     INC   hl   
0479   56                     LD   d,(hl)   
047A                ARRAYINDEX2:      
047A   D5                     PUSH   de   
047B   DD E9                  JP   (ix)   
047D                             ; value _oldValue --            ; uses address in vPointer
047D                ASSIGN:      
047D   E1                     POP   hl   ; discard last accessed value
047E   E1                     POP   hl   ; hl = new value
047F                ASSIGN0:      
047F   EB                     EX   de,hl   ; de = new value
0480                ASSIGNX:      
0480   2A F2 4E               LD   hl,(vPointer)   
0483   73                     LD   (hl),e   
0484   3A E6 4E               LD   a,(vDataWidth)   
0487   3D                     DEC   a   ; is it byte?
0488   28 02                  JR   z,assign1   
048A   23                     INC   hl   
048B   72                     LD   (hl),d   
048C                ASSIGN1:      
048C   DD E9                  JP   (ix)   
048E                             ; arg_list - parses input (ab:c)
048E                             ; names after the : represent uninitialised locals
048E                             ; return values are the state of the stack after the block ends
048E                             ; format: numLocals totNumArgs argChars...
048E                COLON:       
048E                ARGLIST:      
048E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0491   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0494   E5                     PUSH   hl   ; save start of arg_list
0495   23                     INC   hl   ; skip length fields to start of string
0496   23                     INC   hl   
0497   03                     INC   bc   ; point to next char
0498                ARGLIST1:      
0498   0A                     LD   a,(bc)   
0499   FE 3A                  CP   ":"   ; ":" switches from args to locals
049B   20 03                  JR   nz,arglist1a   
049D   14                     INC   d   ; non zero value local count acts as flag
049E   18 10                  JR   arglist3   
04A0                ARGLIST1A:      
04A0   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A2   38 0F                  JR   c,arglist4   
04A4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04A6   30 0B                  JR   nc,arglist4   
04A8                ARGLIST2:      
04A8   77                     LD   (hl),a   
04A9   23                     INC   hl   
04AA   1C                     INC   e   ; increase arg count
04AB   AF                     XOR   a   
04AC   B2                     OR   d   
04AD   28 01                  JR   z,arglist3   
04AF   14                     INC   d   ; if d > 0 increase local count
04B0                ARGLIST3:      
04B0   03                     INC   bc   ; point to next char
04B1   18 E5                  JR   arglist1   
04B3                ARGLIST4:      
04B3   0B                     DEC   bc   
04B4   AF                     XOR   a   
04B5   B2                     OR   d   
04B6   28 01                  JR   z,arglist5   
04B8   15                     DEC   d   ; remove initial inc
04B9                ARGLIST5:      
04B9   23                     INC   hl   
04BA   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04BD   E1                     POP   hl   ; hl = start of arg_list
04BE   E5                     PUSH   hl   ; return start of arg_list
04BF   72                     LD   (hl),d   ; write number of locals at start - 1
04C0   23                     INC   hl   
04C1   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C2   DD E9                  JP   (ix)   
04C4                LBRACE:      
04C4                BLOCKSTART:      
04C4   C5                     PUSH   bc   ; return pointer to first { of block
04C5   03                     INC   bc   
04C6   16 01                  LD   d,1   ; nesting: count first parenthesis
04C8                BLOCKSTART1:      ; Skip to end of definition
04C8   0A                     LD   a,(bc)   ; Get the next character
04C9   03                     INC   bc   ; Point to next character
04CA   FE 21                  CP   " " + 1   ; ignore whitespace
04CC   38 FA                  JR   c,blockStart1   
04CE   FE 29                  CP   ")"   
04D0   28 2D                  JR   z,blockStart4   
04D2   FE 7D                  CP   "}"   
04D4   28 29                  JR   z,blockStart4   
04D6   FE 5D                  CP   "]"   
04D8   28 25                  JR   z,blockStart4   
04DA   FE 28                  CP   "("   
04DC   28 16                  JR   z,blockStart2   
04DE   FE 7B                  CP   "{"   
04E0   28 12                  JR   z,blockStart2   
04E2   FE 5B                  CP   "["   
04E4   28 0E                  JR   z,blockStart2   
04E6   FE 27                  CP   "'"   
04E8   28 0D                  JR   z,blockStart3   
04EA   FE 60                  CP   "`"   
04EC   28 09                  JR   z,blockStart3   
04EE   FE 22                  CP   DQ   
04F0   28 05                  JR   z,blockStart3   
04F2   18 D4                  JR   blockStart1   
04F4                BLOCKSTART2:      
04F4   14                     INC   d   
04F5   18 D1                  JR   blockStart1   
04F7                BLOCKSTART3:      
04F7   3E 80                  LD   a,$80   
04F9   AA                     XOR   d   
04FA   57                     LD   d,a   
04FB   20 CB                  JR   nz,blockStart1   
04FD   18 03                  JR   blockStart5   
04FF                BLOCKSTART4:      
04FF   15                     DEC   d   
0500   20 C6                  JR   nz,blockStart1   ; get the next element
0502                BLOCKSTART5:      
0502   60 69                  LD   hl,bc   ; hl = IP
0504   11 1E 4F               LD   de,HEAP   ; is IP pointing to object in heap
0507   B7                     OR   a   ; IP - HEAP
0508   ED 52                  SBC   hl,de   
050A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050C   28 1C                  JR   z,blockStart6   
050E   60 69                  LD   hl,bc   ; hl = IP
0510   D1                     POP   de   ; de = block*
0511   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
0515   B7                     OR   a   ; bc = size
0516   ED 52                  SBC   hl,de   
0518   44 4D                  LD   bc,hl   
051A   EB                     EX   de,hl   ; hl = block* de = heap*
051B   ED 5B F0 4E            LD   de,(vHeapPtr)   
051F   D5                     PUSH   de   ; return hblock*
0520   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0522   ED 53 F0 4E            LD   (vHeapPtr),de   ; heap* += size
0526   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
052A                BLOCKSTART6:      
052A   0B                     DEC   bc   ; balanced, exit
052B   DD E9                  JP   (ix)   
052D                RBRACE:      
052D                BLOCKEND:      
052D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0530   FD 56 01               LD   d,(iy+1)   
0533   ED 53 00 4F            LD   (vTemp1),de   
0537   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
053A   FD 56 07               LD   d,(iy+7)   
053D   ED 53 02 4F            LD   (vTemp2),de   
0541   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0544   FD 56 03               LD   d,(iy+3)   
0547   EB                     EX   de,hl   
0548   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054B   FD 56 01               LD   d,(iy+1)   
054E   13                     INC   de   ; for carry flag <=
054F   B7                     OR   a   
0550   ED 52                  SBC   hl,de   
0552   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0554   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0556   FD 5D                  LD   e,iyl   
0558   21 08 00               LD   hl,8   
055B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055D   18 0C                  JR   blockEnd2   
055F                BLOCKEND1:      ; same scope
055F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0562   FD 56 03               LD   d,(iy+3)   
0565   EB                     EX   de,hl   
0566   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0568   FD 5D                  LD   e,iyl   
056A   EB                     EX   de,hl   
056B                BLOCKEND2:      
056B   44 4D                  LD   bc,hl   ; bc = hl = BP
056D   B7                     OR   a   ; hl = BP - SP = count
056E   ED 72                  SBC   hl,sp   
0570   7D                     LD   a,l   
0571   B4                     OR   h   
0572   28 09                  JR   z,blockEnd3   
0574   C5                     PUSH   bc   ; bc = count, hl = BP
0575   44 4D                  LD   bc,hl   
0577   E1                     POP   hl   
0578   2B                     DEC   hl   ; hl = BP-1
0579   1B                     DEC   de   ; de = args*-1
057A   ED B8                  LDDR      
057C   13                     INC   de   
057D                BLOCKEND3:      
057D   EB                     EX   de,hl   ; sp = de = new tos*
057E   F9                     LD   sp,hl   
057F   ED 4B 02 4F            LD   bc,(vTemp2)   
0583   FD 2A 00 4F            LD   iy,(vTemp1)   
0587   DD E9                  JP   (ix)   
0589                TICK:        
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                BACKSLASH:      
059E   DD E9                  JP   (ix)   
05A0                             ; , discard stack item
05A0                             ; x y -- x
05A0                COMMA:       
05A0                DISCARD:      
05A0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A2   FD 5D                  LD   e,iyl   
05A4   EB                     EX   de,hl   
05A5   B7                     OR   a   
05A6   ED 72                  SBC   hl,sp   
05A8   CB 7C                  BIT   7,h   
05AA   20 01                  JR   nz,discard1   
05AC   E1                     POP   hl   
05AD                DISCARD1:      
05AD   DD E9                  JP   (ix)   
05AF                SLASH:       
05AF                COMMAND:      
05AF   CD 2F 0B               CALL   jumpTable   
05B2   2F                     DB   "/"   ; // comment
05B3   92 08                  DW   comment   
05B5   61                     DB   "a"   
05B6   9B 08                  DW   command_a   
05B8   62                     DB   "b"   
05B9   D5 08                  DW   command_b   
05BB   63                     DB   "c"   ; /c chars
05BC   D5 0A                  DW   chars   
05BE   64                     DB   "d"   ; /d decimal
05BF   DD 0A                  DW   decimal   
05C1   66                     DB   "f"   ; /f false
05C2   3F 06                  DW   false1   
05C4   68                     DB   "h"   ; /h hexadecimal
05C5   E5 0A                  DW   hexadecimal   
05C7   69                     DB   "i"   
05C8   24 0A                  DW   command_i   
05CA   6B                     DB   "k"   ; /k key
05CB   F6 0A                  DW   key   
05CD   6E                     DB   "n"   ; /n numbers
05CE   08 0B                  DW   numbers   
05D0   6F                     DB   "o"   ; /o output
05D1   FF 0A                  DW   output   
05D3   70                     DB   "p"   
05D4   30 0A                  DW   command_p   
05D6   72                     DB   "r"   
05D7   79 0A                  DW   command_r   
05D9   73                     DB   "s"   ; /s size
05DA   88 0A                  DW   size   
05DC   74                     DB   "t"   ; /t true
05DD   39 06                  DW   true1   
05DF   76                     DB   "v"   
05E0   90 0A                  DW   command_v   
05E2   78                     DB   "x"   ; /x xor
05E3   B4 03                  DW   xor   
05E5   00                     DB   NUL   
05E6   E8 05                  DW   div   
05E8                DIV:         
05E8   D1                     POP   de   
05E9   E1                     POP   hl   
05EA   C5                     PUSH   bc   ; preserve the IP
05EB   44 4D                  LD   bc,hl   
05ED   CD 0B 06               CALL   divide   
05F0   EB                     EX   de,hl   
05F1   ED 53 F4 4E            LD   (vRemain),de   
05F5   C1                     POP   bc   
05F6   C3 93 03               JP   add3   
05F9                DOT:         
05F9   CD 2F 0B               CALL   jumpTable   
05FC   61                     DB   "a"   ; .a print array
05FD   E1 08                  DW   bufferArray   
05FF   63                     DB   "c"   ; .c print char
0600   03 0A                  DW   bufferChar   
0602   73                     DB   "s"   ; .s print string
0603   E9 09                  DW   bufferString   
0605   78                     DB   "x"   ; .x print x chars
0606   08 0A                  DW   bufferXChars   
0608   00                     DB   NUL   ; .  print number
0609   2A 09                  DW   bufferNumber   
060B                             ; division subroutine.
060B                             ; bc: divisor, de: dividend, hl: remainder
060B                DIVIDE:      
060B   21 00 00               LD   hl,0   ; zero the remainder
060E   3E 10                  LD   a,16   ; loop counter
0610                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0610   CB 21                  SLA   c   
0612   CB 10                  RL   b   
0614   ED 6A                  ADC   hl,hl   
0616   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0618   38 03                  JR   c,divide2   
061A   0C                     INC   c   
061B   18 01                  JR   divide3   
061D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061D   19                     ADD   hl,de   
061E                DIVIDE3:      
061E   3D                     DEC   a   
061F   20 EF                  JR   nz,divide1   
0621   50 59                  LD   de,bc   ; result from bc to de
0623   C9                     RET      
0624                             ; hl = value1, de = value2
0624                             ; hl = result
0624                EQUALS:      
0624   B7                     OR   a   ; reset the carry flag
0625   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0627   28 10                  JR   z,true1   
0629   C3 3F 06               JP   false1   
062C                             ; hl = value1 de = value2
062C                             ; hl = result
062C                LESSTHANEQ:      
062C   B7                     OR   a   
062D   ED 52                  SBC   hl,de   
062F   18 05                  JR   lessthan1   
0631                             ; hl = value1 de = value2
0631                             ; hl = result
0631                LESSTHAN:      
0631   B7                     OR   a   
0632   ED 52                  SBC   hl,de   
0634   28 09                  JR   z,false1   
0636                LESSTHAN1:      
0636   FA 3F 06               JP   m,false1   
0639                TRUE1:       
0639   21 FF FF               LD   hl,TRUE   
063C   E5                     PUSH   hl   
063D   DD E9                  JP   (ix)   
063F                NULL1:       
063F                FALSE1:      
063F   21 00 00               LD   hl,FALSE   
0642   E5                     PUSH   hl   
0643   DD E9                  JP   (ix)   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 06                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8A 06               JP   nz,goFunc   
0656                             ; inc de                      ; de is the address to jump back to
0656   D5                     PUSH   de   ; push de just before stack frame
0657                GOBLOCK:      
0657                GOBLOCK1:      
0657   ED 53 00 4F            LD   (vTemp1),de   ; save de
065B   21 00 4C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065E   FD 54                  LD   d,iyh   
0660   FD 5D                  LD   e,iyl   
0662   B7                     OR   a   ; if stack* == BP then this is the root_scope
0663   ED 52                  SBC   hl,de   
0665   ED 5B 00 4F            LD   de,(vTemp1)   ; restore de
0669   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066A   B4                     OR   h   
066B   3E 00                  LD   a,0   
066D   28 6A                  JR   z,goFunc8   
066F   C5                     PUSH   bc   ; push IP
0670   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0673   FD 46 05               LD   b,(iy+5)   
0676   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0679   FD 66 03               LD   h,(iy+3)   
067C                GOBLOCK2:      
067C   C5                     PUSH   bc   ; arg_list*
067D   E5                     PUSH   hl   ; first_arg*
067E   FD E5                  PUSH   iy   ; push BP
0680   FD 21 00 00            LD   iy,0   ; BP = SP
0684   FD 39                  ADD   iy,sp   
0686   42 4B                  LD   bc,de   ; bc = de = block*-1
0688   DD E9                  JP   (ix)   
068A                GOFUNC:      ; execute func
068A   EB                     EX   de,hl   ; hl = func*
068B   5E                     LD   e,(hl)   ; de = partial_array*
068C   23                     INC   hl   
068D   56                     LD   d,(hl)   
068E   23                     INC   hl   
068F   7B                     LD   a,e   ; if partial_array* == null skip
0690   B2                     OR   d   
0691   28 21                  JR   z,goFunc3   
0693   ED 43 00 4F            LD   (vTemp1),bc   
0697   22 02 4F               LD   (vTemp2),hl   ; save bc,hl
069A   EB                     EX   de,hl   ; hl = partial_array*
069B   2B                     DEC   hl   ; bc = count
069C   46                     LD   b,(hl)   
069D   2B                     DEC   hl   
069E   4E                     LD   c,(hl)   
069F   23                     INC   hl   ; hl = array data*
06A0   23                     INC   hl   
06A1   18 06                  JR   goFunc2   ; push each item on stack
06A3                GOFUNC1:      
06A3   5E                     LD   e,(hl)   ; de = partial item
06A4   23                     INC   hl   
06A5   56                     LD   d,(hl)   
06A6   23                     INC   hl   
06A7   D5                     PUSH   de   ; push on stack
06A8   0B                     DEC   bc   
06A9                GOFUNC2:      
06A9   79                     LD   a,c   ; if count != 0 then loop
06AA   B0                     OR   b   
06AB   20 F6                  JR   nz,goFunc1   
06AD   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore bc
06B1   2A 02 4F               LD   hl,(vTemp2)   ; restore hl
06B4                GOFUNC3:      
06B4   5E                     LD   e,(hl)   ; de = block*
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   ED 53 00 4F            LD   (vTemp1),de   ; save block*
06BC   5E                     LD   e,(hl)   ; de = arg_list*
06BD   23                     INC   hl   
06BE   56                     LD   d,(hl)   
06BF   23                     INC   hl   
06C0   EB                     EX   de,hl   ; hl = arg_list*
06C1   ED 5B 00 4F            LD   de,(vTemp1)   ; restore de = block*
06C5   7D                     LD   a,l   ; if arg_list* == null a = 0
06C6   B4                     OR   h   
06C7   20 03                  JR   nz,goFunc4   
06C9   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
06CA   18 0D                  JR   goFunc8   
06CC                GOFUNC4:      ; allocate locals
06CC   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06CD   18 03                  JR   goFunc6   
06CF                GOFUNC5:      ; loop
06CF   3B                     DEC   sp   
06D0   3B                     DEC   sp   
06D1   3D                     DEC   a   
06D2                GOFUNC6:      
06D2   B7                     OR   a   
06D3   20 FA                  JR   nz,goFunc5   ; end loop
06D5                GOFUNC7:      
06D5   23                     INC   hl   ; a = num_args* x 2
06D6   7E                     LD   a,(hl)   
06D7   2B                     DEC   hl   
06D8   87                     ADD   a,a   ; a *= 2
06D9                GOFUNC8:      
06D9   C5                     PUSH   bc   ; push IP
06DA   44 4D                  LD   bc,hl   
06DC   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DF   85                     ADD   a,l   
06E0   6F                     LD   l,a   
06E1   39                     ADD   hl,sp   
06E2   18 98                  JR   goBlock2   
06E4                DOLLAR:      
06E4                HEXNUM:      
06E4   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E7                HEXNUM1:      
06E7   03                     INC   bc   
06E8   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E9   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EB   28 02                  JR   z,hexnum2   ; no a decimal
06ED   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EF                HEXNUM2:      
06EF   D6 30                  SUB   $30   ; form decimal digit
06F1   DA 6F 07               JP   c,num2   
06F4   FE 10                  CP   $0F+1   
06F6   D2 6F 07               JP   nc,num2   
06F9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FA   29                     ADD   hl,hl   ; 4X
06FB   29                     ADD   hl,hl   ; 8X
06FC   29                     ADD   hl,hl   ; 16X
06FD   85                     ADD   a,l   ; add into bottom of hl
06FE   6F                     LD   l,a   
06FF   18 E6                  JR   hexnum1   
0701                UPCASE:      
0701   0A                     LD   a,(bc)   ; a = identifier char
0702   D6 41                  SUB   "A"   ; "A" = 0
0704   18 05                  JR   ident1   
0706                LOWCASE:      
0706   0A                     LD   a,(bc)   
0707   D6 61                  SUB   "a"   
0709   C6 1A                  ADD   a,26   
070B                IDENT1:      
070B   87                     ADD   a,a   ; l = a * 2
070C   6F                     LD   l,a   
070D   26 4E                  LD   h,msb(vars)   
070F   22 F2 4E               LD   (vPointer),hl   ; store address in setter
0712   5E                     LD   e,(hl)   
0713   23                     INC   hl   
0714   56                     LD   d,(hl)   
0715   D5                     PUSH   de   
0716   DD E9                  JP   (ix)   
0718                             ; if
0718                             ; condition then -- value
0718                QUESTION:      
0718                IF:          
0718   03                     INC   bc   
0719   0A                     LD   a,(bc)   
071A   FE 3F                  CP   "?"   
071C   28 06                  JR   z,ifte   
071E   0B                     DEC   bc   
071F   11 00 00               LD   de,NUL   ; NUL pointer for else
0722   18 01                  JR   ifte1   
0724                             ; ifte
0724                             ; condition then else -- value
0724                IFTE:        
0724   D1                     POP   de   ; de = else
0725                IFTE1:       
0725   E1                     POP   hl   ; hl = then
0726   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0727   7C                     LD   a,h   
0728   B5                     OR   l   
0729   E1                     POP   hl   ; hl = then
072A   CA 46 06               JP   z,go1   ; if z de = else
072D   EB                     EX   de,hl   ; condition = false, de = then
072E   C3 46 06               JP   go1   
0731                STAR:        
0731                MUL:         
0731   D1                     POP   de   ; get first value
0732   E1                     POP   hl   
0733                MUL2:        
0733   C5                     PUSH   bc   ; Preserve the IP
0734   44 4D                  LD   bc,hl   ; bc = 2nd value
0736   21 00 00               LD   hl,0   
0739   3E 10                  LD   a,16   
073B                MUL3:        
073B   29                     ADD   hl,hl   
073C   CB 13                  RL   e   
073E   CB 12                  RL   d   
0740   30 04                  JR   nc,$+6   
0742   09                     ADD   hl,bc   
0743   30 01                  JR   nc,$+3   
0745   13                     INC   de   
0746   3D                     DEC   a   
0747   20 F2                  JR   nz,mul3   
0749   C1                     POP   bc   ; Restore the IP
074A   C3 93 03               JP   add3   
074D                NUM:         
074D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0750   0A                     LD   a,(bc)   ; Get numeral or -
0751   FE 2D                  CP   "-"   
0753   20 01                  JR   nz,num0   
0755   03                     INC   bc   ; move to next char, no flags affected
0756                NUM0:        
0756   08                     EX   af,af'   ; save zero flag = 0 for later
0757                NUM1:        
0757   0A                     LD   a,(bc)   ; read digit
0758   D6 30                  SUB   "0"   ; less than 0?
075A   38 13                  JR   c,num2   ; not a digit, exit loop
075C   FE 0A                  CP   10   ; greater that 9?
075E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0760   03                     INC   bc   ; inc IP
0761   54 5D                  LD   de,hl   ; multiply hl * 10
0763   29                     ADD   hl,hl   
0764   29                     ADD   hl,hl   
0765   19                     ADD   hl,de   
0766   29                     ADD   hl,hl   
0767   85                     ADD   a,l   ; add digit in a to hl
0768   6F                     LD   l,a   
0769   3E 00                  LD   a,0   
076B   8C                     ADC   a,h   
076C   67                     LD   h,a   
076D   18 E8                  JR   num1   
076F                NUM2:        
076F   0B                     DEC   bc   
0770   08                     EX   af,af'   ; restore zero flag
0771   20 07                  JR   nz,num3   
0773   EB                     EX   de,hl   ; negate the value of hl
0774   21 00 00               LD   hl,0   
0777   B7                     OR   a   ; jump to sub2
0778   ED 52                  SBC   hl,de   
077A                NUM3:        
077A   E5                     PUSH   hl   ; Put the number on the stack
077B   DD E9                  JP   (ix)   ; and process the next character
077D                RPAREN:      
077D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0780   FD 46 09               LD   b,(iy+9)   
0783   DD E9                  JP   (ix)   
0785                             ; ";" createFunc
0785                             ; arg_list* block* -- func*
0785                SEMICOLON:      
0785                CREATEFUNC:      
0785   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
0789   E1                     POP   hl   ; hl = block*
078A   22 02 4F               LD   (vTemp2),hl   ; save block*
078D   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0790   FD 56 05               LD   d,(iy+5)   
0793   7B                     LD   a,e   ; if arg_list == null then make a func
0794   B2                     OR   d   
0795   20 09                  JR   nz,createFunc0   
0797   21 00 00               LD   hl,0   ; partial_array = null
079A   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
079E   18 65                  JR   createFunc5   
07A0                CREATEFUNC0:      
07A0   E1                     POP   hl   ; hl = inner_arg_list*
07A1   E5                     PUSH   hl   ; save inner_arg_list
07A2   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
07A6   7E                     LD   a,(hl)   ; compile inner_num_locals
07A7   4F                     LD   c,a   ; b = inner_num_locals
07A8   12                     LD   (de),a   
07A9   23                     INC   hl   
07AA   13                     INC   de   
07AB   7E                     LD   a,(hl)   ; compile inner_length
07AC   12                     LD   (de),a   
07AD   91                     SUB   c   ; a = inner_num args
07AE   23                     INC   hl   
07AF   13                     INC   de   
07B0   B7                     OR   a   ; compile args if inner_length > 0
07B1   28 05                  JR   z,createFunc1   
07B3   4F                     LD   c,a   ; bc = a
07B4   06 00                  LD   b,0   
07B6   ED B0                  LDIR      
07B8                CREATEFUNC1:      
07B8   EB                     EX   de,hl   ; hl = outer_arg_list
07B9   FD 5E 04               LD   e,(iy+4)   
07BC   FD 56 05               LD   d,(iy+5)   
07BF   EB                     EX   de,hl   
07C0   23                     INC   hl   ; a = outer_length
07C1   7E                     LD   a,(hl)   
07C2   23                     INC   hl   
07C3   B7                     OR   a   
07C4   28 05                  JR   z,createFunc2   
07C6   4F                     LD   c,a   
07C7   06 00                  LD   b,0   
07C9   ED B0                  LDIR      ; append outer_args
07CB                CREATEFUNC2:      ; a = outer_length
07CB   47                     LD   b,a   ; b = a = outer_length
07CC   2A F0 4E               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
07CF   23                     INC   hl   
07D0   7E                     LD   a,(hl)   ; add outer_length to new length
07D1   80                     ADD   a,b   
07D2   77                     LD   (hl),a   
07D3   2B                     DEC   hl   
07D4   78                     LD   a,b   ; save outer_length in a'
07D5   08                     EX   af,af'   
07D6   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
07D7   7E                     LD   a,(hl)   ; c = a = inner_num_locals
07D8   B7                     OR   a   
07D9   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
07DB   4F                     LD   c,a   ; c = inner_num_locals
07DC   06 00                  LD   b,0   ; bc = inner_num_locals
07DE   23                     INC   hl   ; a = inner_length
07DF   7E                     LD   a,(hl)   
07E0   91                     SUB   c   ; a = inner_num_args
07E1   23                     INC   hl   ; hl = inner_arg_chars
07E2   85                     ADD   a,l   ; hl += a
07E3   6F                     LD   l,a   
07E4   3E 00                  LD   a,0   
07E6   84                     ADD   a,h   
07E7   67                     LD   h,a   
07E8   ED B0                  LDIR      ; append inner_locals
07EA                CREATEFUNC2A:      
07EA   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
07EB   12                     LD   (de),a   ; compile partial_array length field
07EC   13                     INC   de   
07ED   AF                     XOR   a   
07EE   12                     LD   (de),a   
07EF   13                     INC   de   
07F0   D5                     PUSH   de   ; push partial_array*
07F1   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
07F2   FD 5E 02               LD   e,(iy+2)   
07F5   FD 56 03               LD   d,(iy+3)   
07F8   EB                     EX   de,hl   
07F9                CREATEFUNC3:      
07F9   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
07FA   4E                     LD   c,(hl)   
07FB   2B                     DEC   hl   
07FC   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
07FD   12                     LD   (de),a   ; write LSB and MSB to partial_array*
07FE   13                     INC   de   
07FF   79                     LD   a,c   
0800   12                     LD   (de),a   
0801   13                     INC   de   
0802   10 F5                  DJNZ   createFunc3   ; b = outer_length
0804                CREATEFUNC4:      
0804   E1                     POP   hl   ; hl = partial_array*
0805                CREATEFUNC5:      
0805   C1                     POP   bc   ; bc = new_arg_list*
0806   D5                     PUSH   de   ; return new func*
0807   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0808   73                     LD   (hl),e   ; compile partial_array* to func
0809   23                     INC   hl   
080A   72                     LD   (hl),d   
080B   23                     INC   hl   
080C   ED 5B 02 4F            LD   de,(vTemp2)   ; de = block*
0810   73                     LD   (hl),e   ; compile block* to func
0811   23                     INC   hl   
0812   72                     LD   (hl),d   
0813   23                     INC   hl   
0814   71                     LD   (hl),c   ; compile new_arg_list* to func
0815   23                     INC   hl   
0816   70                     LD   (hl),b   
0817   23                     INC   hl   
0818   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap ptr
081B   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
081F   DD E9                  JP   (ix)   
0821                             ; shiftLeft
0821                             ; value count -- value2          shift left count places
0821                SHIFTLEFT:      
0821   50 59                  LD   de,bc   ; save IP
0823   C1                     POP   bc   ; bc = count
0824   41                     LD   b,c   ; b = loop counter
0825   E1                     POP   hl   
0826   04                     INC   b   ; test for counter=0 case
0827   18 01                  JR   shiftLeft2   
0829                SHIFTLEFT1:      
0829   29                     ADD   hl,hl   ; left shift hl
082A                SHIFTLEFT2:      
082A   10 FD                  DJNZ   shiftLeft1   
082C   E5                     PUSH   hl   
082D   42 4B                  LD   bc,de   ; restore IP
082F   DD E9                  JP   (ix)   
0831                             ; shiftRight
0831                             ; value count -- value2          shift left count places
0831                SHIFTRIGHT:      
0831   50 59                  LD   de,bc   ; save IP
0833   C1                     POP   bc   ; bc = count
0834   41                     LD   b,c   ; b = loop counter
0835   E1                     POP   hl   
0836   04                     INC   b   ; test for counter=0 case
0837   18 04                  JR   shiftRight2   
0839                SHIFTRIGHT1:      
0839   CB 3C                  SRL   h   ; right shift hl
083B   CB 1D                  RR   l   
083D                SHIFTRIGHT2:      
083D   10 FA                  DJNZ   shiftRight1   
083F   E5                     PUSH   hl   
0840   42 4B                  LD   bc,de   ; restore IP
0842   DD E9                  JP   (ix)   
0844                             ; string
0844                             ; -- ptr                        ; points to start of string chars,
0844                             ; length is stored at start - 2 bytes
0844                DQUOTE:      
0844                STRING:      
0844   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0847   23                     INC   hl   ; skip length field to start
0848   23                     INC   hl   
0849   E5                     PUSH   hl   ; save start of string
084A   03                     INC   bc   ; point to next char
084B   18 03                  JR   string2   
084D                STRING1:      
084D   77                     LD   (hl),a   
084E   23                     INC   hl   ; increase count
084F   03                     INC   bc   ; point to next char
0850                STRING2:      
0850   0A                     LD   a,(bc)   
0851   FE 22                  CP   DQ   ; " is the string terminator
0853   28 04                  JR   z,string3   
0855   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0857   20 F4                  JR   nz,string1   
0859                STRING3:      
0859   AF                     XOR   a   ; write NUL to terminate string
085A   77                     LD   (hl),a   ; hl = end of string
085B   23                     INC   hl   
085C   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
085F   2B                     DEC   hl   ; hl = end of string without terminator
0860   D1                     POP   de   ; de = start of string
0861   D5                     PUSH   de   ; return start of string
0862   B7                     OR   a   ; hl = length bytes, de = start of string
0863   ED 52                  SBC   hl,de   
0865   EB                     EX   de,hl   
0866   2B                     DEC   hl   ; write length bytes to length field at start - 2
0867   72                     LD   (hl),d   
0868   2B                     DEC   hl   
0869   73                     LD   (hl),e   
086A   DD E9                  JP   (ix)   
086C                MINUS:       ; negative sign or subtract
086C   03                     INC   bc   ; check if sign of a number
086D   0A                     LD   a,(bc)   
086E   0B                     DEC   bc   
086F   FE 30                  CP   "0"   
0871   38 05                  JR   c,sub   
0873   FE 3A                  CP   "9"+1   
0875   DA 3B 03               JP   c,num_   
0878                SUB:         ; Subtract the value 2nd on stack from top of stack
0878   03                     INC   bc   
0879   FE 2D                  CP   "-"   
087B   20 05                  JR   nz,sub1   
087D   E1                     POP   hl   
087E   2B                     DEC   hl   
087F   C3 7F 04               JP   assign0   
0882                SUB1:        
0882   0B                     DEC   bc   
0883   D1                     POP   de   
0884   E1                     POP   hl   
0885   B7                     OR   a   
0886   ED 52                  SBC   hl,de   
0888   C3 93 03               JP   add3   
088B                ERROR1:      
088B   21 01 00               LD   hl,1   ; error 1: unknown command
088E   E5                     PUSH   hl   
088F   C3 B3 0C               JP   error   
0892                COMMENT:      
0892   03                     INC   bc   ; point to next char
0893   0A                     LD   a,(bc)   
0894   FE 20                  CP   " "   ; terminate on any char less than SP
0896   30 FA                  JR   nc,comment   
0898   0B                     DEC   bc   
0899   DD E9                  JP   (ix)   
089B                COMMAND_A:      
089B   CD 2F 0B               CALL   jumpTable   
089E   62                     DB   "b"   ; /ab absolute
089F   A7 08                  DW   absolute   
08A1   64                     DB   "d"   ; /ad address of
08A2   B4 08                  DW   addrOf   
08A4   00                     DB   NUL   
08A5   8B 08                  DW   error1   
08A7                             ; /ab absolute
08A7                             ; num -- num
08A7                ABSOLUTE:      
08A7   E1                     POP   hl   
08A8   CB 7C                  BIT   7,h   
08AA   C8                     RET   z   
08AB   AF                     XOR   a   
08AC   95                     SUB   l   
08AD   6F                     LD   l,a   
08AE   9F                     SBC   a,a   
08AF   94                     SUB   h   
08B0   67                     LD   h,a   
08B1   E5                     PUSH   hl   
08B2   DD E9                  JP   (ix)   
08B4                             ; /ad addrOf
08B4                             ; char -- addr
08B4                ADDROF:      
08B4   E1                     POP   hl   ; a = char
08B5   7D                     LD   a,l   
08B6   FE 7B                  CP   "z"+1   ; if a > z then exit
08B8   30 19                  JR   nc,addrOf2   
08BA   D6 41                  SUB   "A"   ; a - 65
08BC   38 15                  JR   c,addrOf2   ; if < A then exit
08BE   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08C0   38 06                  JR   c,addrOf1   
08C2   D6 06                  SUB   "a"-("Z"+1)   
08C4   FE 1A                  CP   "Z"-"A"+1   
08C6   38 0B                  JR   c,addrOf2   ; if < a then exit
08C8                ADDROF1:      
08C8   87                     ADD   a,a   ; double a
08C9   21 00 4E               LD   hl,VARS   ; hl = VARS + a
08CC   85                     ADD   a,l   
08CD   6F                     LD   l,a   
08CE   3E 00                  LD   a,0   
08D0   8C                     ADC   a,h   
08D1   67                     LD   h,a   
08D2   E5                     PUSH   hl   
08D3                ADDROF2:      
08D3   DD E9                  JP   (ix)   
08D5                COMMAND_B:      
08D5   CD 2F 0B               CALL   jumpTable   
08D8   72                     DB   "r"   ; /br break
08D9   CF 09                  DW   break   
08DB   79                     DB   "y"   ; /by cold boot
08DC   F6 0B                  DW   coldStart   
08DE   00                     DB   NUL   
08DF   8B 08                  DW   error1   
08E1                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
08E1                BUFFERARRAY:      
08E1   CD 45 06               CALL   go   
08E4   00 00                  DW   NUL   
08E6   EF 08                  DW   bufferArrayM_1859S1354   
08E8   EA 08                  DW   $+2   
08EA   02                     DB   2   
08EB   03 61 62 63            .PSTR   "abc"   
08EF                BUFFERARRAYM_1859S1354:      
08EF   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
092A                             ; .cstr "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}" ; block
092A                             ; /bd buffer decimal
092A                             ; value --
092A                BUFFERNUMBER:      
092A   3A E8 4E               LD   a,(vNumBase)   
092D   FE 10                  CP   16   
092F   28 66                  JR   z,bufferHex   ; else falls through
0931                             ; /bd buffer decimal
0931                             ; value --
0931                BUFFERDEC:      
0931   ED 5B EC 4E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0935   D9                     EXX      
0936   E1                     POP   hl   ; hl = value
0937   CD 4B 09               CALL   bufferDec0   
093A   D9                     EXX      ; de = buffer*' bc = IP
093B   3E 20                  LD   a," "   ; append space to buffer
093D   12                     LD   (de),a   
093E   1C                     INC   e   ; buffer*++, wraparound
093F   CC 18 0B               CALL   z,flushBuffer   
0942   2A EC 4E               LD   hl,(vBufPtr)   ; hl = buffer*
0945   ED 53 EC 4E            LD   (vBufPtr),de   ; update buffer* with buffer*'
0949   DD E9                  JP   (ix)   
094B                             ; hl = value
094B                             ; de' = buffer*
094B                             ; a, bc, de, hl destroyed
094B                BUFFERDEC0:      
094B   CB 7C                  BIT   7,h   
094D   28 0C                  JR   z,bufferDec1   
094F   D9                     EXX      
0950   3E 2D                  LD   a,"-"   
0952   12                     LD   (de),a   
0953   13                     INC   de   
0954   D9                     EXX      
0955   AF                     XOR   a   
0956   95                     SUB   l   
0957   6F                     LD   l,a   
0958   9F                     SBC   a,a   
0959   94                     SUB   h   
095A   67                     LD   h,a   
095B                BUFFERDEC1:      
095B   0E 00                  LD   c,0   ; leading zeros flag = false
095D   11 F0 D8               LD   de,-10000   
0960   CD 7B 09               CALL   bufferDec2   
0963   11 18 FC               LD   de,-1000   
0966   CD 7B 09               CALL   bufferDec2   
0969   11 9C FF               LD   de,-100   
096C   CD 7B 09               CALL   bufferDec2   
096F   1E F6                  LD   e,-10   
0971   CD 7B 09               CALL   bufferDec2   
0974   0C                     INC   c   ; flag = true for at least digit
0975   1E FF                  LD   e,-1   
0977   CD 7B 09               CALL   bufferDec2   
097A   C9                     RET      
097B                BUFFERDEC2:      
097B   06 2F                  LD   b,"0"-1   
097D                BUFFERDEC3:      
097D   04                     INC   b   
097E   19                     ADD   hl,de   
097F   38 FC                  JR   c,bufferDec3   
0981   ED 52                  SBC   hl,de   
0983   3E 30                  LD   a,"0"   
0985   B8                     CP   b   
0986   20 05                  JR   nz,bufferDec4   
0988   AF                     XOR   a   
0989   B1                     OR   c   
098A   C8                     RET   z   
098B   18 01                  JR   bufferDec5   
098D                BUFFERDEC4:      
098D   0C                     INC   c   
098E                BUFFERDEC5:      
098E   78                     LD   a,b   
098F   D9                     EXX      
0990   12                     LD   (de),a   
0991   1C                     INC   e   
0992   CC 18 0B               CALL   z,flushBuffer   
0995   D9                     EXX      
0996   C9                     RET      
0997                             ; /bh buffer hex
0997                             ; value --
0997                BUFFERHEX:      
0997   E1                     POP   hl   ; hl = value
0998   ED 5B EC 4E            LD   de,(vBufPtr)   
099C   3E 24                  LD   a,"$"   ; # prefix
099E   12                     LD   (de),a   
099F   1C                     INC   e   ; buffer*++, wraparound
09A0   CC 18 0B               CALL   z,flushBuffer   
09A3   7C                     LD   a,h   
09A4   CD B8 09               CALL   bufferHex1   
09A7   7D                     LD   a,l   
09A8   CD B8 09               CALL   bufferHex1   
09AB   3E 20                  LD   a," "   ; append space to buffer
09AD   12                     LD   (de),a   
09AE   1C                     INC   e   ; buffer*++, wraparound
09AF   CC 18 0B               CALL   z,flushBuffer   
09B2   ED 53 EC 4E            LD   (vBufPtr),de   
09B6   DD E9                  JP   (ix)   
09B8                BUFFERHEX1:      
09B8   F5                     PUSH   af   
09B9   1F                     RRA      
09BA   1F                     RRA      
09BB   1F                     RRA      
09BC   1F                     RRA      
09BD   CD C1 09               CALL   bufferHex2   
09C0   F1                     POP   af   
09C1                BUFFERHEX2:      
09C1   E6 0F                  AND   0x0F   
09C3   C6 90                  ADD   a,0x90   
09C5   27                     DAA      
09C6   CE 40                  ADC   a,0x40   
09C8   27                     DAA      
09C9   12                     LD   (de),a   
09CA   1C                     INC   e   ; buffer*++, wraparound
09CB   CC 18 0B               CALL   z,flushBuffer   
09CE   C9                     RET      
09CF                             ; /br break from loop
09CF                             ; --
09CF                BREAK:       
09CF   E1                     POP   hl   
09D0   7D                     LD   a,l   
09D1   B4                     OR   h   
09D2   28 02                  JR   z,break1   
09D4   DD E9                  JP   (ix)   
09D6                BREAK1:      
09D6   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09D8   FD 54                  LD   d,iyh   
09DA   21 08 00               LD   hl,8   
09DD   19                     ADD   hl,de   
09DE   23                     INC   hl   
09DF   23                     INC   hl   
09E0   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09E3   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09E6   C3 2D 05               JP   blockEnd   
09E9                             ; /bs buffered string
09E9                             ; string* --
09E9                BUFFERSTRING:      
09E9   E1                     POP   hl   ; hl = string*
09EA   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
09EE   18 06                  JR   bufferString1   
09F0                BUFFERSTRING0:      
09F0   12                     LD   (de),a   ; a -> buffer*
09F1   1C                     INC   e   ; buffer*++, wraparound
09F2   CC 18 0B               CALL   z,flushBuffer   
09F5   23                     INC   hl   
09F6                BUFFERSTRING1:      
09F6   7E                     LD   a,(hl)   ; a <- string*
09F7   B7                     OR   a   ; if NUL exit loop
09F8   20 F6                  JR   nz,bufferString0   
09FA   2A EC 4E               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09FD   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
0A01   DD E9                  JP   (ix)   
0A03                             ; /bc buffer char
0A03                             ; char --
0A03                BUFFERCHAR:      
0A03   21 01 00               LD   hl,1   
0A06   18 01                  JR   bufferXChars0   
0A08                             ; /bx buffered x chars
0A08                             ; char length --
0A08                BUFFERXCHARS:      
0A08   E1                     POP   hl   ; hl = length
0A09                BUFFERXCHARS0:      
0A09   D1                     POP   de   ; a' = char
0A0A   7B                     LD   a,e   
0A0B   08                     EX   af,af'   
0A0C   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
0A10   18 08                  JR   bufferXChars2   
0A12                BUFFERXCHARS1:      
0A12   08                     EX   af,af'   
0A13   12                     LD   (de),a   
0A14   08                     EX   af,af'   
0A15   1C                     INC   e   ; buffer*++, wraparound
0A16   CC 18 0B               CALL   z,flushBuffer   
0A19   2B                     DEC   hl   
0A1A                BUFFERXCHARS2:      
0A1A   7D                     LD   a,l   
0A1B   B4                     OR   h   
0A1C   20 F4                  JR   nz,bufferXChars1   
0A1E   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*'
0A22   DD E9                  JP   (ix)   
0A24                COMMAND_I:      
0A24   CD 2F 0B               CALL   jumpTable   
0A27   6E                     DB   "n"   ; /in input
0A28   EB 0A                  DW   input   
0A2A   76                     DB   "v"   ; /iv invert
0A2B   BF 03                  DW   invert   
0A2D   00                     DB   NUL   
0A2E   8B 08                  DW   error1   
0A30                COMMAND_P:      
0A30   CD 2F 0B               CALL   jumpTable   
0A33   62                     DB   "b"   ; /pb print buffer
0A34   3F 0A                  DW   printBuffer   
0A36   63                     DB   "c"   ; /pc print chars
0A37   65 0A                  DW   printChars   
0A39   6B                     DB   "k"   ; /pk print stack
0A3A   77 0A                  DW   printStack   
0A3C   00                     DB   NUL   
0A3D   8B 08                  DW   error1   
0A3F                             ; /pb printBuffer
0A3F                             ; --
0A3F                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0A3F                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0A3F                PRINTBUFFER:      
0A3F   CD 45 06               CALL   go   
0A42   00 00                  DW   NUL   
0A44   4B 0A                  DW   printBufferM_2060S1568   
0A46   48 0A                  DW   $+2   
0A48   00                     DB   0   
0A49   01 61                  .PSTR   "a"   
0A4B                PRINTBUFFERM_2060S1568:      
0A4B   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A65                             ; printChars
0A65                             ; char* len --
0A65                PRINTCHARS:      
0A65   E1                     POP   hl   ; hl = count
0A66   D1                     POP   de   ; de = char*
0A67   CD 72 0A               CALL   printChars2   
0A6A   DD E9                  JP   (ix)   
0A6C                PRINTCHARS1:      
0A6C   1A                     LD   a,(de)   ; print char at char*
0A6D   CD 85 00               CALL   putchar   
0A70   13                     INC   de   ; char*++
0A71   2B                     DEC   hl   ; count--
0A72                PRINTCHARS2:      
0A72   7D                     LD   a,l   ; count == 0?
0A73   B4                     OR   h   
0A74   C8                     RET   z   
0A75   18 F5                  JR   printChars1   ; if not loop
0A77                             ; /pk print stack
0A77                             ; --
0A77                PRINTSTACK:      
0A77                             ;     ld (vTemp1),bc
0A77                             ;     call printStr
0A77                             ;     .cstr "=> "
0A77                             ;     ld hl,STACK
0A77                             ;     sbc hl,sp
0A77                             ;     srl h
0A77                             ;     rr l
0A77                             ;     ld bc,hl
0A77                             ;     ld hl,STACK
0A77                             ;     jr printStack2
0A77                             ; printStack1:
0A77                             ;     dec bc
0A77                             ;     dec hl
0A77                             ;     ld d,(hl)
0A77                             ;     dec hl
0A77                             ;     ld e,(hl)
0A77                             ;     ex de,hl
0A77                             ;     call prthex
0A77                             ;     ex de,hl
0A77                             ;     ld a," "
0A77                             ;     call putchar
0A77                             ; printStack2:
0A77                             ;     ld a,c
0A77                             ;     or b
0A77                             ;     jr nz,printStack1
0A77                             ;     call prompt
0A77                             ;     ld bc,(vTemp1)
0A77   DD E9                  JP   (ix)   
0A79                COMMAND_R:      
0A79   CD 2F 0B               CALL   jumpTable   
0A7C   65                     DB   "e"   ; /re remainder
0A7D   82 0A                  DW   remain   
0A7F   00                     DB   NUL   
0A80   8B 08                  DW   error1   
0A82                REMAIN:      
0A82   2A F4 4E               LD   hl,(vRemain)   
0A85   E5                     PUSH   hl   
0A86   DD E9                  JP   (ix)   
0A88                SIZE:        
0A88   E1                     POP   hl   
0A89   2B                     DEC   hl   ; msb size
0A8A   56                     LD   d,(hl)   
0A8B   2B                     DEC   hl   ; lsb size
0A8C   5E                     LD   e,(hl)   
0A8D   D5                     PUSH   de   
0A8E   DD E9                  JP   (ix)   
0A90                COMMAND_V:      
0A90   CD 2F 0B               CALL   jumpTable   
0A93   62                     DB   "b"   
0A94   B4 0A                  DW   varBufPtr   
0A96   68                     DB   "h"   
0A97   BD 0A                  DW   varHeapPtr   
0A99   74                     DB   "t"   
0A9A   C6 0A                  DW   varTIBPtr   
0A9C   42                     DB   "B"   
0A9D   A5 0A                  DW   constBufStart   
0A9F   54                     DB   "T"   
0AA0   AF 0A                  DW   constTIBStart   
0AA2   00                     DB   NUL   
0AA3   8B 08                  DW   error1   
0AA5                CONSTBUFSTART:      
0AA5   11 00 4D               LD   de,BUF   
0AA8   18 28                  JR   constant   
0AAA                CONSTHEAPSTART:      
0AAA   11 1E 4F               LD   de,HEAP   
0AAD   18 23                  JR   constant   
0AAF                CONSTTIBSTART:      
0AAF   11 00 4C               LD   de,TIB   
0AB2   18 1E                  JR   constant   
0AB4                VARBUFPTR:      
0AB4   ED 5B EC 4E            LD   de,(vBufPtr)   
0AB8   21 EC 4E               LD   hl,vBufPtr   
0ABB   18 12                  JR   variable   
0ABD                VARHEAPPTR:      
0ABD   ED 5B F0 4E            LD   de,(vHeapPtr)   
0AC1   21 F0 4E               LD   hl,vHeapPtr   
0AC4   18 09                  JR   variable   
0AC6                VARTIBPTR:      
0AC6   ED 5B EA 4E            LD   de,(vTIBPtr)   
0ACA   21 EA 4E               LD   hl,vTIBPtr   
0ACD   18 00                  JR   variable   
0ACF                VARIABLE:      
0ACF   22 F2 4E               LD   (vPointer),hl   
0AD2                CONSTANT:      
0AD2   D5                     PUSH   de   
0AD3   DD E9                  JP   (ix)   
0AD5                CHARS:       
0AD5   21 01 00               LD   hl,1   
0AD8                CHARS1:      
0AD8   22 E6 4E               LD   (vDataWidth),hl   
0ADB   DD E9                  JP   (ix)   
0ADD                DECIMAL:      
0ADD   21 0A 00               LD   hl,10   
0AE0                DECIMAL1:      
0AE0   22 E8 4E               LD   (vNumBase),hl   
0AE3   DD E9                  JP   (ix)   
0AE5                HEXADECIMAL:      
0AE5   21 10 00               LD   hl,16   
0AE8   C3 E0 0A               JP   decimal1   
0AEB                             ; Z80 port input
0AEB                             ; port -- value
0AEB                INPUT:       
0AEB   E1                     POP   hl   
0AEC   59                     LD   e,c   ; save IP
0AED   4D                     LD   c,l   
0AEE   ED 68                  IN   l,(c)   
0AF0   26 00                  LD   h,0   
0AF2   4B                     LD   c,e   ; restore IP
0AF3   E5                     PUSH   hl   
0AF4   DD E9                  JP   (ix)   
0AF6                KEY:         
0AF6   CD 81 00               CALL   getchar   
0AF9   26 00                  LD   h,0   
0AFB   6F                     LD   l,a   
0AFC   E5                     PUSH   hl   
0AFD   DD E9                  JP   (ix)   
0AFF                             ; Z80 port output
0AFF                             ; value port --
0AFF                OUTPUT:      
0AFF   E1                     POP   hl   
0B00   59                     LD   e,c   ; save IP
0B01   4D                     LD   c,l   
0B02   E1                     POP   hl   
0B03   ED 69                  OUT   (c),l   
0B05   4B                     LD   c,e   ; restore IP
0B06   DD E9                  JP   (ix)   
0B08                NUMBERS:      
0B08   21 02 00               LD   hl,2   
0B0B   C3 D8 0A               JP   chars1   
0B0E                             ; 
0B0E                             ; keyIter:
0B0E                             ;     call go
0B0E                             ;     .cstr "{/k /t}"             ; block
0B0E                             ; fromIter:
0B0E                             ;     call go
0B0E                             ;     dw NUL                      ; NUL closure
0B0E                             ;     dw $+4
0B0E                             ;     dw args1A0L
0B0E                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B0E                             ; fromIter1:
0B0E                             ;     call go
0B0E                             ;     dw NUL                      ; NUL closure
0B0E                             ;     dw $+4
0B0E                             ;     dw args2A0L
0B0E                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B0E                FILTER:      
0B0E                MAP:         
0B0E                SCAN:        
0B0E   DD E9                  JP   (ix)   
0B10                             ;*******************************************************************
0B10                             ; reusable arglists
0B10                             ;*******************************************************************
0B10                ARGS1A0L:      ; one arg zero locals
0B10   00                     DB   0   
0B11   01 61                  .PSTR   "a"   
0B13                ARGS1A2L:      ; one arg two locals
0B13   02                     DB   2   
0B14   03 61 62 63            .PSTR   "abc"   
0B18                             ;*******************************************************************
0B18                             ; general routines
0B18                             ;*******************************************************************
0B18                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0B18                FLUSHBUFFER:      
0B18   F5                     PUSH   af   
0B19   D5                     PUSH   de   
0B1A   E5                     PUSH   hl   
0B1B   2A EC 4E               LD   hl,(vBufPtr)   
0B1E   11 00 4D               LD   de,BUF   
0B21   ED 53 EC 4E            LD   (vBufPtr),de   
0B25   B7                     OR   a   
0B26   ED 52                  SBC   hl,de   
0B28   CD 72 0A               CALL   printChars2   
0B2B   E1                     POP   hl   
0B2C   D1                     POP   de   
0B2D   F1                     POP   af   
0B2E   C9                     RET      
0B2F                             ; followed by a table
0B2F                             ; db char
0B2F                             ; dw addr
0B2F                             ; the final item must have char == NUL
0B2F                JUMPTABLE:      
0B2F   03                     INC   bc   
0B30   E1                     POP   hl   
0B31                JUMPTABLE0:      
0B31   AF                     XOR   a   
0B32   BE                     CP   (hl)   
0B33   28 09                  JR   z,jumpTable1   
0B35   0A                     LD   a,(bc)   
0B36   BE                     CP   (hl)   
0B37   28 06                  JR   z,jumpTable2   
0B39   23                     INC   hl   
0B3A   23                     INC   hl   
0B3B   23                     INC   hl   
0B3C   18 F3                  JR   jumpTable0   
0B3E                JUMPTABLE1:      
0B3E   0B                     DEC   bc   
0B3F                JUMPTABLE2:      
0B3F   23                     INC   hl   
0B40   5E                     LD   e,(hl)   
0B41   23                     INC   hl   
0B42   56                     LD   d,(hl)   
0B43   EB                     EX   de,hl   
0B44   E9                     JP   (hl)   
0B45                PRTSTR0:      
0B45   CD 85 00               CALL   putchar   
0B48   23                     INC   hl   
0B49                PRTSTR:      
0B49   7E                     LD   a,(hl)   
0B4A   B7                     OR   a   
0B4B   20 F8                  JR   nz,prtstr0   
0B4D   C9                     RET      
0B4E                             ; **************************************************************************
0B4E                             ; calculate nesting value
0B4E                             ; a is char to be tested,
0B4E                             ; e is the nesting value (initially 0)
0B4E                             ; e is increased by ( and [
0B4E                             ; e is decreased by ) and ]
0B4E                             ; e has its bit 7 toggled by `
0B4E                             ; limited to 127 levels
0B4E                             ; **************************************************************************
0B4E                NESTING:      
0B4E   FE 22                  CP   DQ   ; quote char
0B50   28 06                  JR   z,nesting0   
0B52   FE 60                  CP   "`"   ; quote char
0B54   28 02                  JR   z,nesting0   
0B56   18 0A                  JR   nesting1   
0B58                NESTING0:      
0B58   CB 7B                  BIT   7,e   
0B5A   28 03                  JR   z,nesting1a   
0B5C   CB BB                  RES   7,e   
0B5E   C9                     RET      
0B5F                NESTING1A:      
0B5F   CB FB                  SET   7,e   
0B61   C9                     RET      
0B62                NESTING1:      
0B62   CB 7B                  BIT   7,e   
0B64   C0                     RET   nz   
0B65   FE 7B                  CP   "{"   
0B67   28 08                  JR   z,nesting2   
0B69   FE 5B                  CP   "["   
0B6B   28 04                  JR   z,nesting2   
0B6D   FE 28                  CP   "("   
0B6F   20 02                  JR   nz,nesting3   
0B71                NESTING2:      
0B71   1C                     INC   e   
0B72   C9                     RET      
0B73                NESTING3:      
0B73   FE 7D                  CP   "}"   
0B75   28 07                  JR   z,nesting4   
0B77   FE 5D                  CP   "]"   
0B79   28 03                  JR   z,nesting4   
0B7B   FE 29                  CP   ")"   
0B7D   C0                     RET   nz   
0B7E                NESTING4:      
0B7E   1D                     DEC   e   
0B7F   C9                     RET      
0B80                PROMPT:      
0B80   CD 90 0B               CALL   printStr   
0B83   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B88   C9                     RET      
0B89                CRLF:        
0B89   CD 90 0B               CALL   printStr   
0B8C   0D 0A 00               .CSTR   "\r\n"   
0B8F   C9                     RET      
0B90                             ; prints a null teminated string
0B90                             ; the string should be immediately following the call
0B90                PRINTSTR:      
0B90   E3                     EX   (sp),hl   ; swap			
0B91   CD 49 0B               CALL   prtstr   
0B94   23                     INC   hl   ; inc past NUL
0B95   E3                     EX   (sp),hl   ; put it back	
0B96   C9                     RET      
0B97                TITLESTR:      
0B97   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0BAB                INIT:        
0BAB   21 97 0B               LD   hl,titleStr   
0BAE   11 0A 4F               LD   de,titleBuf   
0BB1   06 14                  LD   b,20   
0BB3                INIT1:       
0BB3   1A                     LD   a,(de)   
0BB4   BE                     CP   (hl)   
0BB5   20 17                  JR   nz,coldBoot0   
0BB7   13                     INC   de   
0BB8   23                     INC   hl   
0BB9   10 F8                  DJNZ   init1   
0BBB                WARMINIT:      
0BBB   ED 4B F6 4E            LD   bc,(vSavedIP)   ; restore IP
0BBF   ED 7B F8 4E            LD   sp,(vSavedSP)   ; restore SP
0BC3   DD 2A FA 4E            LD   ix,(vSavedNext)   ; restore Next
0BC7   FD 2A FC 4E            LD   iy,(vSavedBP)   ; restore BP
0BCB   C3 05 0C               JP   start1   
0BCE                COLDBOOT0:      
0BCE   21 97 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0BD1   11 0A 4F               LD   de,titleBuf   
0BD4   06 14                  LD   b,20   
0BD6   ED B0                  LDIR      
0BD8                COLDINIT:      
0BD8   21 80 01               LD   hl,isysVars   
0BDB   11 E6 4E               LD   de,sysVars   
0BDE   01 10 00               LD   bc,8 * 2   
0BE1   ED B0                  LDIR      
0BE3   21 00 4E               LD   hl,vars   ; 52 vars LO HI
0BE6   06 34                  LD   b,26*2   
0BE8   AF                     XOR   a   
0BE9                COLDBOOT1:      
0BE9   77                     LD   (hl),a   
0BEA   23                     INC   hl   
0BEB   10 FC                  DJNZ   coldBoot1   
0BED   DD 2A EE 4E            LD   ix,(vNext)   
0BF1   FD 21 00 4C            LD   iy,STACK   
0BF5   C9                     RET      
0BF6                COLDSTART:      
0BF6   31 00 4C               LD   sp,STACK   
0BF9   CD CE 0B               CALL   coldBoot0   
0BFC   C3 05 0C               JP   start1   
0BFF                START:       
0BFF   31 00 4C               LD   sp,STACK   ; start Monty
0C02   CD AB 0B               CALL   init   ; setups
0C05                START1:      
0C05   21 0A 4F               LD   hl,titleBuf   
0C08   CD 49 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0C0B                INTERPRET:      
0C0B   CD 18 0B               CALL   flushBuffer   
0C0E   CD 80 0B               CALL   prompt   
0C11   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C14   21 00 4C               LD   hl,TIB   
0C17   22 EA 4E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C1A                INTERPRET2:      ; calculate nesting
0C1A   1E 00                  LD   e,0   ; initilize nesting value
0C1C   C5                     PUSH   bc   ; save offset into TIB,
0C1D                             ; bc is also the count of chars in TIB
0C1D   21 00 4C               LD   hl,TIB   ; hl is start of TIB
0C20   18 0B                  JR   interpret4   
0C22                INTERPRET3:      
0C22   3E 33                  LD   a,"3"   
0C24   CD 85 00               CALL   putchar   
0C27   7E                     LD   a,(hl)   ; a = char in TIB
0C28   23                     INC   hl   ; inc pointer into TIB
0C29   0B                     DEC   bc   ; dec count of chars in TIB
0C2A   CD 4E 0B               CALL   nesting   ; update nesting value
0C2D                INTERPRET4:      
0C2D   79                     LD   a,c   ; is count zero?
0C2E   B0                     OR   b   
0C2F   20 F1                  JR   nz,interpret3   ; if not loop
0C31   C1                     POP   bc   ; restore offset into TIB
0C32                INTERPRET5:      
0C32   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C35   FE 20                  CP   $20   ; compare to space
0C37   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C39   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C3B                             ; ???? NEEDED?
0C3B   28 3B                  JR   z,interpret8   
0C3D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C3F   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C41   FE 05                  CP   CTRL_E   
0C43   CA D6 0C               JP   z,edit_   
0C46   FE 08                  CP   CTRL_H   
0C48   CA C6 0C               JP   z,backSpace_   
0C4B   FE 0A                  CP   CTRL_J   
0C4D   CA EE 0C               JP   z,reEdit_   
0C50   FE 13                  CP   CTRL_S   
0C52   CA F1 0C               JP   z,printStack_   
0C55                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C55                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C55                             ; DB     lsb(list_)       ; FF  ^L 12
0C55                             ; DB     lsb(printStack_) ; DLE ^P 16
0C55                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C55                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C55                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C55                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C55                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C55                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C55                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C55                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C55                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C55                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C55                INTERPRET5A:      
0C55                             ; ld (vTIBPtr),bc
0C55                             ; ld bc,(vTIBPtr)
0C55   18 C3                  JR   interpret2   
0C57                INTERPRET6:      
0C57   21 00 4C               LD   hl,TIB   
0C5A   09                     ADD   hl,bc   
0C5B   77                     LD   (hl),a   ; store the character in textbuf
0C5C   03                     INC   bc   
0C5D   CD 85 00               CALL   putchar   ; echo character to screen
0C60   CD 4E 0B               CALL   nesting   
0C63   18 CD                  JR   interpret5   ; wait for next character
0C65                INTERPRET7:      
0C65   21 00 4C               LD   hl,TIB   
0C68   09                     ADD   hl,bc   
0C69   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C6B   23                     INC   hl   
0C6C   36 0A                  LD   (hl),"\n"   
0C6E   23                     INC   hl   
0C6F   03                     INC   bc   
0C70   03                     INC   bc   
0C71   CD 89 0B               CALL   crlf   ; echo character to screen
0C74   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C75   B7                     OR   a   
0C76   20 BA                  JR   nz,interpret5   
0C78                INTERPRET8:      
0C78   21 00 4C               LD   hl,TIB   
0C7B   09                     ADD   hl,bc   
0C7C   22 EA 4E               LD   (vTIBPtr),hl   
0C7F   01 00 4C               LD   bc,TIB   
0C82   ED 43 F6 4E            LD   (vSavedIP),bc   ; save IP
0C86   ED 73 F8 4E            LD   (vSavedSP),sp   ; save SP
0C8A   DD 22 FA 4E            LD   (vSavedNext),ix   ; save Next
0C8E   FD 22 FC 4E            LD   (vSavedBP),iy   ; save BP
0C92   0B                     DEC   bc   
0C93                NEXT:        
0C93   03                     INC   bc   ; Increment the IP
0C94   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C95   FE 20                  CP   " "   ; whitespace?
0C97   28 FA                  JR   z,next   ; space? ignore
0C99   38 09                  JR   c,next1   
0C9B   D6 20                  SUB   " "   
0C9D   6F                     LD   l,a   ; index into table
0C9E   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CA0   6E                     LD   l,(hl)   ; get low jump address
0CA1   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CA3   E9                     JP   (hl)   ; Jump to routine
0CA4                NEXT1:       
0CA4   FE 00                  CP   NUL   ; end of input string?
0CA6   28 03                  JR   z,exit   
0CA8   C3 0B 0C               JP   interpret   ; no, other whitespace, macros?
0CAB                EXIT:        
0CAB   03                     INC   bc   
0CAC   60 69                  LD   hl,bc   
0CAE   E9                     JP   (hl)   
0CAF                RUN:         
0CAF   C1                     POP   bc   
0CB0   0B                     DEC   bc   
0CB1   DD E9                  JP   (ix)   
0CB3                ERROR:       
0CB3   CD AF 0C               CALL   run   
0CB6   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0CC3   C3 0B 0C               JP   interpret   
0CC6                BACKSPACE_:      
0CC6   79                     LD   a,c   
0CC7   B0                     OR   b   
0CC8   CA 1A 0C               JP   z,interpret2   
0CCB   0B                     DEC   bc   
0CCC   CD 90 0B               CALL   printStr   
0CCF   08 20 08 00            .CSTR   "\b \b"   
0CD3   C3 1A 0C               JP   interpret2   
0CD6                             ; edit
0CD6                EDIT_:       
0CD6   CD AF 0C               CALL   run   
0CD9   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0CEB   C3 0B 0C               JP   interpret   
0CEE                REEDIT_:      
0CEE   C3 0B 0C               JP   interpret   
0CF1                PRINTSTACK_:      
0CF1   CD AF 0C               CALL   run   
0CF4   2F 70 6B 00            .CSTR   "/pk"   
0CF8   C3 0B 0C               JP   interpret   
0CFB                             ; editDef:
0CFB                             ;     pop hl                      ; pop ret address
0CFB                             ;     ex (sp),hl                  ; swap with TOS
0CFB                             ;     push hl                     ; dup TOS
0CFB                             ;     ld a,l                      ; a = ident
0CFB                             ;     ld de,TIB                   ; de = start of TIB
0CFB                             ;     ld (vTIBPtr),de             ; update TIB*
0CFB                             ;     push ix                     ; save NEXT
0CFB                             ;     ld ix,editDef0              ; NEXT = editDef0
0CFB                             ;     jp lookupRef                ; convert letter into address
0CFB                             ; editDef0:
0CFB                             ;     ld e,(hl)                   ; de = (hl++)
0CFB                             ;     inc hl
0CFB                             ;     ld d,(hl)
0CFB                             ;     ld a,d                      ; de == 0 ?
0CFB                             ;     or e
0CFB                             ;     jr z,editDef4
0CFB                             ;     ld ix,editDef3              ; NEXT = editDef3
0CFB                             ;     ex de,hl
0CFB                             ;     ld a,(hl)
0CFB                             ;     cp "{"
0CFB                             ;     jr nz,editDef1
0CFB                             ;     jp editBlock0               ; convert letter into address
0CFB                             ; editDef1:
0CFB                             ;     cp "("
0CFB                             ;     jr nz,editDef2
0CFB                             ;     jp editBlock0               ; convert letter into address
0CFB                             ; editDef2:
0CFB                             ;     jp editFunc
0CFB                             ; editDef3:
0CFB                             ;     ld a," "                    ; write assign
0CFB                             ;     call writeChar
0CFB                             ;     pop hl                      ; a = ident
0CFB                             ;     ld a,l
0CFB                             ;     call writeChar
0CFB                             ;     ld a,"="                    ; write assign
0CFB                             ;     call writeChar
0CFB                             ;     ld ix,editDef4              ; NEXT = editDef4
0CFB                             ;     jp printTIB
0CFB                             ; editDef4:
0CFB                             ;     pop ix                      ; restore NEXT
0CFB                             ;     jp (ix)
0CFB                             ; writeChar:
0CFB                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CFB                             ;     ld (de),a                   ; write ident
0CFB                             ;     inc de
0CFB                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CFB                             ;     ret
0CFB                             ; ; printTIB
0CFB                             ; printTIB:
0CFB                             ;     ld hl,(vTIBPtr)
0CFB                             ;     ld de,TIB
0CFB                             ;     or a
0CFB                             ;     sbc hl,de
0CFB                             ;     jp printTIB2
0CFB                             ; printTIB1:
0CFB                             ;     ld a,(de)
0CFB                             ;     call putchar
0CFB                             ; printTIB2:
0CFB                             ;     ld a,l
0CFB                             ;     or h
0CFB                             ;     jr nz,printTIB1
0CFB                             ;     jp (ix)
0CFB                             ; editBlock:
0CFB                             ;     pop hl                      ; hl = block*
0CFB                             ; editBlock0:
0CFB                             ;     push ix                     ; save next
0CFB                             ;     push hl                     ; push block*
0CFB                             ;     push hl                     ; push block*
0CFB                             ;     ld ix,(editBlock2)
0CFB                             ;     jp blockLength
0CFB                             ; editBlock1:
0CFB                             ;     pop hl                      ; bc = length, (sp) = IP
0CFB                             ;     pop de                      ; de = block*
0CFB                             ;     ld a,l
0CFB                             ;     or h
0CFB                             ;     jr z,editBlock2
0CFB                             ;     push bc
0CFB                             ;     ld bc,hl
0CFB                             ;     ex de,hl                    ; hl = block*
0CFB                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CFB                             ;     ldir                        ; copy block to TIB
0CFB                             ;     ld (vTIBPtr),de              ; save TIB*
0CFB                             ;     pop bc
0CFB                             ; editBlock2:
0CFB                             ;     pop ix                      ; restore next
0CFB                             ;     jp (ix)
0CFB                             ; editFunc:
0CFB                             ;     jp (ix)
0CFB                             ; editArray:
0CFB                             ;     jp (ix)
0CFB                             ; editArglist:
0CFB                             ;     jp (ix)
0CFB                             ; ; blockLength
0CFB                             ; ; addr1 -- length
0CFB                             ; blockLength:
0CFB                             ;     pop hl                      ; block*
0CFB                             ;     push hl                     ; save block*
0CFB                             ;     inc hl                      ; skip first char
0CFB                             ;     ld d,1                      ; increase nesting
0CFB                             ; blockLength1:                   ; Skip to end of definition
0CFB                             ;     ld a,(hl)                   ; Get the next character
0CFB                             ;     inc hl                      ; Point to next character
0CFB                             ;     cp " " + 1                  ; ignore whitespace
0CFB                             ;     jr c,blockLength1
0CFB                             ;     cp ")"
0CFB                             ;     jr z,blockLength4
0CFB                             ;     cp "}"
0CFB                             ;     jr z,blockLength4
0CFB                             ;     cp "]"
0CFB                             ;     jr z,blockLength4
0CFB                             ;     cp "("
0CFB                             ;     jr z,blockLength2
0CFB                             ;     cp "{"
0CFB                             ;     jr z,blockLength2
0CFB                             ;     cp "["
0CFB                             ;     jr z,blockLength2
0CFB                             ;     cp "'"
0CFB                             ;     jr z,blockLength3
0CFB                             ;     cp "`"
0CFB                             ;     jr z,blockLength3
0CFB                             ;     cp DQ
0CFB                             ;     jr z,blockLength3
0CFB                             ;     jr blockLength1
0CFB                             ; blockLength2:
0CFB                             ;     inc d
0CFB                             ;     jr blockLength1
0CFB                             ; blockLength4:
0CFB                             ;     dec d
0CFB                             ;     jr nz, blockLength1         ; get the next element
0CFB                             ; blockLength3:
0CFB                             ;     ld a,$80
0CFB                             ;     xor d
0CFB                             ;     ld d,a
0CFB                             ;     jr nz, blockLength1
0CFB                             ;     pop hl                      ; hl = block*
0CFB                             ;     or a
0CFB                             ;     sbc hl,de
0CFB                             ;     push hl
0CFB                             ;     jp (ix)
0CFB                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CFB                             ; \a start of stack \#3 depth \b base \$ prompt
0CFB                             ; DW dStack               ; a vS0 start of datastack			
0CFB                             ; DW FALSE                ; b vBase16
0CFB                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CFB                             ; DW 0                    ; d
0CFB                             ; DW 65                   ; e vLastDef "A" last command u defined
0CFB                             ; DW 0                    ; f
0CFB                             ; DW page6                ; g 256 bytes limits
0CFB                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CFB                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                             ; test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
0D00                             ; call printStr
0D00                             ; .cstr "Done!"
0D00                             ; HALT
0D00                             ; 
0D00                          ;*Macro unroll:  test "/f", false
0D00   31 00 4C               LD   SP,STACK   
0D03   CD D8 0B               CALL   coldInit   
0D06   CD 39 4A               CALL   execStr   
0D09   2F 66 00               DB   "/f",0   
0D0C   CD 18 0B               CALL   flushBuffer   
0D0F   E1                     POP   HL   
0D10   E5                     PUSH   HL   
0D11   11 00 00               LD   DE,false   
0D14   B7                     OR   A   
0D15   ED 52                  SBC   HL,DE   
0D17   7D                     LD   A,L   
0D18   B4                     OR   H   
0D19   CA 76 0D               JP   Z,expectM_2697S22   
0D1C   CD 90 0B               CALL   printStr   
0D1F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D28   CD 90 0B               CALL   printStr   
0D2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D3A   21 00 00               LD   hl,false   
0D3D   E5                     PUSH   hl   
0D3E   E5                     PUSH   hl   
0D3F   CD AF 0C               CALL   run   
0D42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0D4A   CD 18 0B               CALL   flushBuffer   
0D4D   CD 90 0B               CALL   printStr   
0D50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D5D   E1                     POP   hl   
0D5E   E5                     PUSH   hl   
0D5F   E5                     PUSH   hl   
0D60   CD AF 0C               CALL   run   
0D63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0D72   CD 18 0B               CALL   flushBuffer   
0D75   76                     HALT      
0D76                EXPECTM_2697S22:      
0D76   E1                     POP   HL   
0D77                          ;*Macro unroll:  test "/t", true
0D77   31 00 4C               LD   SP,STACK   
0D7A   CD D8 0B               CALL   coldInit   
0D7D   CD 39 4A               CALL   execStr   
0D80   2F 74 00               DB   "/t",0   
0D83   CD 18 0B               CALL   flushBuffer   
0D86   E1                     POP   HL   
0D87   E5                     PUSH   HL   
0D88   11 FF FF               LD   DE,true   
0D8B   B7                     OR   A   
0D8C   ED 52                  SBC   HL,DE   
0D8E   7D                     LD   A,L   
0D8F   B4                     OR   H   
0D90   CA ED 0D               JP   Z,expectM_2698S23   
0D93   CD 90 0B               CALL   printStr   
0D96   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0D9F   CD 90 0B               CALL   printStr   
0DA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DB1   21 FF FF               LD   hl,true   
0DB4   E5                     PUSH   hl   
0DB5   E5                     PUSH   hl   
0DB6   CD AF 0C               CALL   run   
0DB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0DC1   CD 18 0B               CALL   flushBuffer   
0DC4   CD 90 0B               CALL   printStr   
0DC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DD4   E1                     POP   hl   
0DD5   E5                     PUSH   hl   
0DD6   E5                     PUSH   hl   
0DD7   CD AF 0C               CALL   run   
0DDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0DE9   CD 18 0B               CALL   flushBuffer   
0DEC   76                     HALT      
0DED                EXPECTM_2698S23:      
0DED   E1                     POP   HL   
0DEE                          ;*Macro unroll:  test "1", 1
0DEE   31 00 4C               LD   SP,STACK   
0DF1   CD D8 0B               CALL   coldInit   
0DF4   CD 39 4A               CALL   execStr   
0DF7   31 00                  DB   "1",0   
0DF9   CD 18 0B               CALL   flushBuffer   
0DFC   E1                     POP   HL   
0DFD   E5                     PUSH   HL   
0DFE   11 01 00               LD   DE,1   
0E01   B7                     OR   A   
0E02   ED 52                  SBC   HL,DE   
0E04   7D                     LD   A,L   
0E05   B4                     OR   H   
0E06   CA 62 0E               JP   Z,expectM_2699S24   
0E09   CD 90 0B               CALL   printStr   
0E0C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E14   CD 90 0B               CALL   printStr   
0E17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E26   21 01 00               LD   hl,1   
0E29   E5                     PUSH   hl   
0E2A   E5                     PUSH   hl   
0E2B   CD AF 0C               CALL   run   
0E2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E36   CD 18 0B               CALL   flushBuffer   
0E39   CD 90 0B               CALL   printStr   
0E3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E49   E1                     POP   hl   
0E4A   E5                     PUSH   hl   
0E4B   E5                     PUSH   hl   
0E4C   CD AF 0C               CALL   run   
0E4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E5E   CD 18 0B               CALL   flushBuffer   
0E61   76                     HALT      
0E62                EXPECTM_2699S24:      
0E62   E1                     POP   HL   
0E63                          ;*Macro unroll:  test "2", 2
0E63   31 00 4C               LD   SP,STACK   
0E66   CD D8 0B               CALL   coldInit   
0E69   CD 39 4A               CALL   execStr   
0E6C   32 00                  DB   "2",0   
0E6E   CD 18 0B               CALL   flushBuffer   
0E71   E1                     POP   HL   
0E72   E5                     PUSH   HL   
0E73   11 02 00               LD   DE,2   
0E76   B7                     OR   A   
0E77   ED 52                  SBC   HL,DE   
0E79   7D                     LD   A,L   
0E7A   B4                     OR   H   
0E7B   CA D7 0E               JP   Z,expectM_2700S25   
0E7E   CD 90 0B               CALL   printStr   
0E81   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0E89   CD 90 0B               CALL   printStr   
0E8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E9B   21 02 00               LD   hl,2   
0E9E   E5                     PUSH   hl   
0E9F   E5                     PUSH   hl   
0EA0   CD AF 0C               CALL   run   
0EA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EAB   CD 18 0B               CALL   flushBuffer   
0EAE   CD 90 0B               CALL   printStr   
0EB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EBE   E1                     POP   hl   
0EBF   E5                     PUSH   hl   
0EC0   E5                     PUSH   hl   
0EC1   CD AF 0C               CALL   run   
0EC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0ED3   CD 18 0B               CALL   flushBuffer   
0ED6   76                     HALT      
0ED7                EXPECTM_2700S25:      
0ED7   E1                     POP   HL   
0ED8                          ;*Macro unroll:  test "1", 1
0ED8   31 00 4C               LD   SP,STACK   
0EDB   CD D8 0B               CALL   coldInit   
0EDE   CD 39 4A               CALL   execStr   
0EE1   31 00                  DB   "1",0   
0EE3   CD 18 0B               CALL   flushBuffer   
0EE6   E1                     POP   HL   
0EE7   E5                     PUSH   HL   
0EE8   11 01 00               LD   DE,1   
0EEB   B7                     OR   A   
0EEC   ED 52                  SBC   HL,DE   
0EEE   7D                     LD   A,L   
0EEF   B4                     OR   H   
0EF0   CA 4C 0F               JP   Z,expectM_2701S26   
0EF3   CD 90 0B               CALL   printStr   
0EF6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0EFE   CD 90 0B               CALL   printStr   
0F01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F10   21 01 00               LD   hl,1   
0F13   E5                     PUSH   hl   
0F14   E5                     PUSH   hl   
0F15   CD AF 0C               CALL   run   
0F18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F20   CD 18 0B               CALL   flushBuffer   
0F23   CD 90 0B               CALL   printStr   
0F26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F33   E1                     POP   hl   
0F34   E5                     PUSH   hl   
0F35   E5                     PUSH   hl   
0F36   CD AF 0C               CALL   run   
0F39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F48   CD 18 0B               CALL   flushBuffer   
0F4B   76                     HALT      
0F4C                EXPECTM_2701S26:      
0F4C   E1                     POP   HL   
0F4D                          ;*Macro unroll:  test "0", 0
0F4D   31 00 4C               LD   SP,STACK   
0F50   CD D8 0B               CALL   coldInit   
0F53   CD 39 4A               CALL   execStr   
0F56   30 00                  DB   "0",0   
0F58   CD 18 0B               CALL   flushBuffer   
0F5B   E1                     POP   HL   
0F5C   E5                     PUSH   HL   
0F5D   11 00 00               LD   DE,0   
0F60   B7                     OR   A   
0F61   ED 52                  SBC   HL,DE   
0F63   7D                     LD   A,L   
0F64   B4                     OR   H   
0F65   CA C1 0F               JP   Z,expectM_2702S27   
0F68   CD 90 0B               CALL   printStr   
0F6B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0F73   CD 90 0B               CALL   printStr   
0F76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F85   21 00 00               LD   hl,0   
0F88   E5                     PUSH   hl   
0F89   E5                     PUSH   hl   
0F8A   CD AF 0C               CALL   run   
0F8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F95   CD 18 0B               CALL   flushBuffer   
0F98   CD 90 0B               CALL   printStr   
0F9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FA8   E1                     POP   hl   
0FA9   E5                     PUSH   hl   
0FAA   E5                     PUSH   hl   
0FAB   CD AF 0C               CALL   run   
0FAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FBD   CD 18 0B               CALL   flushBuffer   
0FC0   76                     HALT      
0FC1                EXPECTM_2702S27:      
0FC1   E1                     POP   HL   
0FC2                          ;*Macro unroll:  test "10", 10
0FC2   31 00 4C               LD   SP,STACK   
0FC5   CD D8 0B               CALL   coldInit   
0FC8   CD 39 4A               CALL   execStr   
0FCB   31 30 00               DB   "10",0   
0FCE   CD 18 0B               CALL   flushBuffer   
0FD1   E1                     POP   HL   
0FD2   E5                     PUSH   HL   
0FD3   11 0A 00               LD   DE,10   
0FD6   B7                     OR   A   
0FD7   ED 52                  SBC   HL,DE   
0FD9   7D                     LD   A,L   
0FDA   B4                     OR   H   
0FDB   CA 38 10               JP   Z,expectM_2703S28   
0FDE   CD 90 0B               CALL   printStr   
0FE1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0FEA   CD 90 0B               CALL   printStr   
0FED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FFC   21 0A 00               LD   hl,10   
0FFF   E5                     PUSH   hl   
1000   E5                     PUSH   hl   
1001   CD AF 0C               CALL   run   
1004   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
100C   CD 18 0B               CALL   flushBuffer   
100F   CD 90 0B               CALL   printStr   
1012   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
101F   E1                     POP   hl   
1020   E5                     PUSH   hl   
1021   E5                     PUSH   hl   
1022   CD AF 0C               CALL   run   
1025   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1034   CD 18 0B               CALL   flushBuffer   
1037   76                     HALT      
1038                EXPECTM_2703S28:      
1038   E1                     POP   HL   
1039                          ;*Macro unroll:  test "123", 123
1039   31 00 4C               LD   SP,STACK   
103C   CD D8 0B               CALL   coldInit   
103F   CD 39 4A               CALL   execStr   
1042   31 32 33 00            DB   "123",0   
1046   CD 18 0B               CALL   flushBuffer   
1049   E1                     POP   HL   
104A   E5                     PUSH   HL   
104B   11 7B 00               LD   DE,123   
104E   B7                     OR   A   
104F   ED 52                  SBC   HL,DE   
1051   7D                     LD   A,L   
1052   B4                     OR   H   
1053   CA B1 10               JP   Z,expectM_2704S29   
1056   CD 90 0B               CALL   printStr   
1059   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1063   CD 90 0B               CALL   printStr   
1066   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1075   21 7B 00               LD   hl,123   
1078   E5                     PUSH   hl   
1079   E5                     PUSH   hl   
107A   CD AF 0C               CALL   run   
107D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1085   CD 18 0B               CALL   flushBuffer   
1088   CD 90 0B               CALL   printStr   
108B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1098   E1                     POP   hl   
1099   E5                     PUSH   hl   
109A   E5                     PUSH   hl   
109B   CD AF 0C               CALL   run   
109E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10AD   CD 18 0B               CALL   flushBuffer   
10B0   76                     HALT      
10B1                EXPECTM_2704S29:      
10B1   E1                     POP   HL   
10B2                          ;*Macro unroll:  test "-1",-1
10B2   31 00 4C               LD   SP,STACK   
10B5   CD D8 0B               CALL   coldInit   
10B8   CD 39 4A               CALL   execStr   
10BB   2D 31 00               DB   "-1",0   
10BE   CD 18 0B               CALL   flushBuffer   
10C1   E1                     POP   HL   
10C2   E5                     PUSH   HL   
10C3   11 FF FF               LD   DE,-1   
10C6   B7                     OR   A   
10C7   ED 52                  SBC   HL,DE   
10C9   7D                     LD   A,L   
10CA   B4                     OR   H   
10CB   CA 28 11               JP   Z,expectM_2705S30   
10CE   CD 90 0B               CALL   printStr   
10D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
10DA   CD 90 0B               CALL   printStr   
10DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10EC   21 FF FF               LD   hl,-1   
10EF   E5                     PUSH   hl   
10F0   E5                     PUSH   hl   
10F1   CD AF 0C               CALL   run   
10F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10FC   CD 18 0B               CALL   flushBuffer   
10FF   CD 90 0B               CALL   printStr   
1102   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
110F   E1                     POP   hl   
1110   E5                     PUSH   hl   
1111   E5                     PUSH   hl   
1112   CD AF 0C               CALL   run   
1115   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1124   CD 18 0B               CALL   flushBuffer   
1127   76                     HALT      
1128                EXPECTM_2705S30:      
1128   E1                     POP   HL   
1129                          ;*Macro unroll:  test "''", 0
1129   31 00 4C               LD   SP,STACK   
112C   CD D8 0B               CALL   coldInit   
112F   CD 39 4A               CALL   execStr   
1132   27 27 00               DB   "''",0   
1135   CD 18 0B               CALL   flushBuffer   
1138   E1                     POP   HL   
1139   E5                     PUSH   HL   
113A   11 00 00               LD   DE,0   
113D   B7                     OR   A   
113E   ED 52                  SBC   HL,DE   
1140   7D                     LD   A,L   
1141   B4                     OR   H   
1142   CA 9F 11               JP   Z,expectM_2706S31   
1145   CD 90 0B               CALL   printStr   
1148   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1151   CD 90 0B               CALL   printStr   
1154   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1163   21 00 00               LD   hl,0   
1166   E5                     PUSH   hl   
1167   E5                     PUSH   hl   
1168   CD AF 0C               CALL   run   
116B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1173   CD 18 0B               CALL   flushBuffer   
1176   CD 90 0B               CALL   printStr   
1179   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1186   E1                     POP   hl   
1187   E5                     PUSH   hl   
1188   E5                     PUSH   hl   
1189   CD AF 0C               CALL   run   
118C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
119B   CD 18 0B               CALL   flushBuffer   
119E   76                     HALT      
119F                EXPECTM_2706S31:      
119F   E1                     POP   HL   
11A0                          ;*Macro unroll:  test "'a'", $61
11A0   31 00 4C               LD   SP,STACK   
11A3   CD D8 0B               CALL   coldInit   
11A6   CD 39 4A               CALL   execStr   
11A9   27 61 27 00            DB   "'a'",0   
11AD   CD 18 0B               CALL   flushBuffer   
11B0   E1                     POP   HL   
11B1   E5                     PUSH   HL   
11B2   11 61 00               LD   DE,$61   
11B5   B7                     OR   A   
11B6   ED 52                  SBC   HL,DE   
11B8   7D                     LD   A,L   
11B9   B4                     OR   H   
11BA   CA 18 12               JP   Z,expectM_2707S32   
11BD   CD 90 0B               CALL   printStr   
11C0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
11CA   CD 90 0B               CALL   printStr   
11CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11DC   21 61 00               LD   hl,$61   
11DF   E5                     PUSH   hl   
11E0   E5                     PUSH   hl   
11E1   CD AF 0C               CALL   run   
11E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11EC   CD 18 0B               CALL   flushBuffer   
11EF   CD 90 0B               CALL   printStr   
11F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FF   E1                     POP   hl   
1200   E5                     PUSH   hl   
1201   E5                     PUSH   hl   
1202   CD AF 0C               CALL   run   
1205   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1214   CD 18 0B               CALL   flushBuffer   
1217   76                     HALT      
1218                EXPECTM_2707S32:      
1218   E1                     POP   HL   
1219                          ;*Macro unroll:  test "'\\''", $27
1219   31 00 4C               LD   SP,STACK   
121C   CD D8 0B               CALL   coldInit   
121F   CD 39 4A               CALL   execStr   
1222   27 5C 27 27 00         DB   "'\\''",0   
1227   CD 18 0B               CALL   flushBuffer   
122A   E1                     POP   HL   
122B   E5                     PUSH   HL   
122C   11 27 00               LD   DE,$27   
122F   B7                     OR   A   
1230   ED 52                  SBC   HL,DE   
1232   7D                     LD   A,L   
1233   B4                     OR   H   
1234   CA 93 12               JP   Z,expectM_2708S33   
1237   CD 90 0B               CALL   printStr   
123A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1245   CD 90 0B               CALL   printStr   
1248   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1257   21 27 00               LD   hl,$27   
125A   E5                     PUSH   hl   
125B   E5                     PUSH   hl   
125C   CD AF 0C               CALL   run   
125F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1267   CD 18 0B               CALL   flushBuffer   
126A   CD 90 0B               CALL   printStr   
126D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
127A   E1                     POP   hl   
127B   E5                     PUSH   hl   
127C   E5                     PUSH   hl   
127D   CD AF 0C               CALL   run   
1280   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
128F   CD 18 0B               CALL   flushBuffer   
1292   76                     HALT      
1293                EXPECTM_2708S33:      
1293   E1                     POP   HL   
1294                          ;*Macro unroll:  test "$10", $10
1294   31 00 4C               LD   SP,STACK   
1297   CD D8 0B               CALL   coldInit   
129A   CD 39 4A               CALL   execStr   
129D   24 31 30 00            DB   "$10",0   
12A1   CD 18 0B               CALL   flushBuffer   
12A4   E1                     POP   HL   
12A5   E5                     PUSH   HL   
12A6   11 10 00               LD   DE,$10   
12A9   B7                     OR   A   
12AA   ED 52                  SBC   HL,DE   
12AC   7D                     LD   A,L   
12AD   B4                     OR   H   
12AE   CA 0C 13               JP   Z,expectM_2709S34   
12B1   CD 90 0B               CALL   printStr   
12B4   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
12BE   CD 90 0B               CALL   printStr   
12C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D0   21 10 00               LD   hl,$10   
12D3   E5                     PUSH   hl   
12D4   E5                     PUSH   hl   
12D5   CD AF 0C               CALL   run   
12D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12E0   CD 18 0B               CALL   flushBuffer   
12E3   CD 90 0B               CALL   printStr   
12E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F3   E1                     POP   hl   
12F4   E5                     PUSH   hl   
12F5   E5                     PUSH   hl   
12F6   CD AF 0C               CALL   run   
12F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1308   CD 18 0B               CALL   flushBuffer   
130B   76                     HALT      
130C                EXPECTM_2709S34:      
130C   E1                     POP   HL   
130D                          ;*Macro unroll:  test "$FF", $FF
130D   31 00 4C               LD   SP,STACK   
1310   CD D8 0B               CALL   coldInit   
1313   CD 39 4A               CALL   execStr   
1316   24 46 46 00            DB   "$FF",0   
131A   CD 18 0B               CALL   flushBuffer   
131D   E1                     POP   HL   
131E   E5                     PUSH   HL   
131F   11 FF 00               LD   DE,$FF   
1322   B7                     OR   A   
1323   ED 52                  SBC   HL,DE   
1325   7D                     LD   A,L   
1326   B4                     OR   H   
1327   CA 85 13               JP   Z,expectM_2710S35   
132A   CD 90 0B               CALL   printStr   
132D   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1337   CD 90 0B               CALL   printStr   
133A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1349   21 FF 00               LD   hl,$FF   
134C   E5                     PUSH   hl   
134D   E5                     PUSH   hl   
134E   CD AF 0C               CALL   run   
1351   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1359   CD 18 0B               CALL   flushBuffer   
135C   CD 90 0B               CALL   printStr   
135F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
136C   E1                     POP   hl   
136D   E5                     PUSH   hl   
136E   E5                     PUSH   hl   
136F   CD AF 0C               CALL   run   
1372   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1381   CD 18 0B               CALL   flushBuffer   
1384   76                     HALT      
1385                EXPECTM_2710S35:      
1385   E1                     POP   HL   
1386                          ;*Macro unroll:  test "-1 2 +",1
1386   31 00 4C               LD   SP,STACK   
1389   CD D8 0B               CALL   coldInit   
138C   CD 39 4A               CALL   execStr   
138F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1396   CD 18 0B               CALL   flushBuffer   
1399   E1                     POP   HL   
139A   E5                     PUSH   HL   
139B   11 01 00               LD   DE,1   
139E   B7                     OR   A   
139F   ED 52                  SBC   HL,DE   
13A1   7D                     LD   A,L   
13A2   B4                     OR   H   
13A3   CA 04 14               JP   Z,expectM_2711S36   
13A6   CD 90 0B               CALL   printStr   
13A9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
13B6   CD 90 0B               CALL   printStr   
13B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C8   21 01 00               LD   hl,1   
13CB   E5                     PUSH   hl   
13CC   E5                     PUSH   hl   
13CD   CD AF 0C               CALL   run   
13D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D8   CD 18 0B               CALL   flushBuffer   
13DB   CD 90 0B               CALL   printStr   
13DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EB   E1                     POP   hl   
13EC   E5                     PUSH   hl   
13ED   E5                     PUSH   hl   
13EE   CD AF 0C               CALL   run   
13F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1400   CD 18 0B               CALL   flushBuffer   
1403   76                     HALT      
1404                EXPECTM_2711S36:      
1404   E1                     POP   HL   
1405                          ;*Macro unroll:  test "-1 1 +",0
1405   31 00 4C               LD   SP,STACK   
1408   CD D8 0B               CALL   coldInit   
140B   CD 39 4A               CALL   execStr   
140E   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1415   CD 18 0B               CALL   flushBuffer   
1418   E1                     POP   HL   
1419   E5                     PUSH   HL   
141A   11 00 00               LD   DE,0   
141D   B7                     OR   A   
141E   ED 52                  SBC   HL,DE   
1420   7D                     LD   A,L   
1421   B4                     OR   H   
1422   CA 83 14               JP   Z,expectM_2712S37   
1425   CD 90 0B               CALL   printStr   
1428   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1435   CD 90 0B               CALL   printStr   
1438   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1447   21 00 00               LD   hl,0   
144A   E5                     PUSH   hl   
144B   E5                     PUSH   hl   
144C   CD AF 0C               CALL   run   
144F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1457   CD 18 0B               CALL   flushBuffer   
145A   CD 90 0B               CALL   printStr   
145D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146A   E1                     POP   hl   
146B   E5                     PUSH   hl   
146C   E5                     PUSH   hl   
146D   CD AF 0C               CALL   run   
1470   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
147F   CD 18 0B               CALL   flushBuffer   
1482   76                     HALT      
1483                EXPECTM_2712S37:      
1483   E1                     POP   HL   
1484                          ;*Macro unroll:  test "1 2 +", 3
1484   31 00 4C               LD   SP,STACK   
1487   CD D8 0B               CALL   coldInit   
148A   CD 39 4A               CALL   execStr   
148D   31 20 32 20 2B 00      DB   "1 2 +",0   
1493   CD 18 0B               CALL   flushBuffer   
1496   E1                     POP   HL   
1497   E5                     PUSH   HL   
1498   11 03 00               LD   DE,3   
149B   B7                     OR   A   
149C   ED 52                  SBC   HL,DE   
149E   7D                     LD   A,L   
149F   B4                     OR   H   
14A0   CA 00 15               JP   Z,expectM_2713S38   
14A3   CD 90 0B               CALL   printStr   
14A6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
14B2   CD 90 0B               CALL   printStr   
14B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C4   21 03 00               LD   hl,3   
14C7   E5                     PUSH   hl   
14C8   E5                     PUSH   hl   
14C9   CD AF 0C               CALL   run   
14CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D4   CD 18 0B               CALL   flushBuffer   
14D7   CD 90 0B               CALL   printStr   
14DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E7   E1                     POP   hl   
14E8   E5                     PUSH   hl   
14E9   E5                     PUSH   hl   
14EA   CD AF 0C               CALL   run   
14ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14FC   CD 18 0B               CALL   flushBuffer   
14FF   76                     HALT      
1500                EXPECTM_2713S38:      
1500   E1                     POP   HL   
1501                          ;*Macro unroll:  test "4 1 2 +", 3
1501   31 00 4C               LD   SP,STACK   
1504   CD D8 0B               CALL   coldInit   
1507   CD 39 4A               CALL   execStr   
150A   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1512   CD 18 0B               CALL   flushBuffer   
1515   E1                     POP   HL   
1516   E5                     PUSH   HL   
1517   11 03 00               LD   DE,3   
151A   B7                     OR   A   
151B   ED 52                  SBC   HL,DE   
151D   7D                     LD   A,L   
151E   B4                     OR   H   
151F   CA 81 15               JP   Z,expectM_2714S39   
1522   CD 90 0B               CALL   printStr   
1525   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1533   CD 90 0B               CALL   printStr   
1536   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1545   21 03 00               LD   hl,3   
1548   E5                     PUSH   hl   
1549   E5                     PUSH   hl   
154A   CD AF 0C               CALL   run   
154D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1555   CD 18 0B               CALL   flushBuffer   
1558   CD 90 0B               CALL   printStr   
155B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1568   E1                     POP   hl   
1569   E5                     PUSH   hl   
156A   E5                     PUSH   hl   
156B   CD AF 0C               CALL   run   
156E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157D   CD 18 0B               CALL   flushBuffer   
1580   76                     HALT      
1581                EXPECTM_2714S39:      
1581   E1                     POP   HL   
1582                          ;*Macro unroll:  test "123 456 +", 123+456
1582   31 00 4C               LD   SP,STACK   
1585   CD D8 0B               CALL   coldInit   
1588   CD 39 4A               CALL   execStr   
158B   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1595   CD 18 0B               CALL   flushBuffer   
1598   E1                     POP   HL   
1599   E5                     PUSH   HL   
159A   11 43 02               LD   DE,123+456   
159D   B7                     OR   A   
159E   ED 52                  SBC   HL,DE   
15A0   7D                     LD   A,L   
15A1   B4                     OR   H   
15A2   CA 06 16               JP   Z,expectM_2715S40   
15A5   CD 90 0B               CALL   printStr   
15A8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
15B8   CD 90 0B               CALL   printStr   
15BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15CA   21 43 02               LD   hl,123+456   
15CD   E5                     PUSH   hl   
15CE   E5                     PUSH   hl   
15CF   CD AF 0C               CALL   run   
15D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15DA   CD 18 0B               CALL   flushBuffer   
15DD   CD 90 0B               CALL   printStr   
15E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15ED   E1                     POP   hl   
15EE   E5                     PUSH   hl   
15EF   E5                     PUSH   hl   
15F0   CD AF 0C               CALL   run   
15F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1602   CD 18 0B               CALL   flushBuffer   
1605   76                     HALT      
1606                EXPECTM_2715S40:      
1606   E1                     POP   HL   
1607                          ;*Macro unroll:  test "64 128 +", 64+128
1607   31 00 4C               LD   SP,STACK   
160A   CD D8 0B               CALL   coldInit   
160D   CD 39 4A               CALL   execStr   
1610   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1619   CD 18 0B               CALL   flushBuffer   
161C   E1                     POP   HL   
161D   E5                     PUSH   HL   
161E   11 C0 00               LD   DE,64+128   
1621   B7                     OR   A   
1622   ED 52                  SBC   HL,DE   
1624   7D                     LD   A,L   
1625   B4                     OR   H   
1626   CA 89 16               JP   Z,expectM_2716S41   
1629   CD 90 0B               CALL   printStr   
162C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
163B   CD 90 0B               CALL   printStr   
163E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164D   21 C0 00               LD   hl,64+128   
1650   E5                     PUSH   hl   
1651   E5                     PUSH   hl   
1652   CD AF 0C               CALL   run   
1655   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
165D   CD 18 0B               CALL   flushBuffer   
1660   CD 90 0B               CALL   printStr   
1663   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1670   E1                     POP   hl   
1671   E5                     PUSH   hl   
1672   E5                     PUSH   hl   
1673   CD AF 0C               CALL   run   
1676   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1685   CD 18 0B               CALL   flushBuffer   
1688   76                     HALT      
1689                EXPECTM_2716S41:      
1689   E1                     POP   HL   
168A                          ;*Macro unroll:  test "1 2 +", 3
168A   31 00 4C               LD   SP,STACK   
168D   CD D8 0B               CALL   coldInit   
1690   CD 39 4A               CALL   execStr   
1693   31 20 32 20 2B 00      DB   "1 2 +",0   
1699   CD 18 0B               CALL   flushBuffer   
169C   E1                     POP   HL   
169D   E5                     PUSH   HL   
169E   11 03 00               LD   DE,3   
16A1   B7                     OR   A   
16A2   ED 52                  SBC   HL,DE   
16A4   7D                     LD   A,L   
16A5   B4                     OR   H   
16A6   CA 06 17               JP   Z,expectM_2717S42   
16A9   CD 90 0B               CALL   printStr   
16AC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16B8   CD 90 0B               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 03 00               LD   hl,3   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD AF 0C               CALL   run   
16D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16DA   CD 18 0B               CALL   flushBuffer   
16DD   CD 90 0B               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD AF 0C               CALL   run   
16F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1702   CD 18 0B               CALL   flushBuffer   
1705   76                     HALT      
1706                EXPECTM_2717S42:      
1706   E1                     POP   HL   
1707                          ;*Macro unroll:  test "1a= a++ a",2
1707   31 00 4C               LD   SP,STACK   
170A   CD D8 0B               CALL   coldInit   
170D   CD 39 4A               CALL   execStr   
1710   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
171A   CD 18 0B               CALL   flushBuffer   
171D   E1                     POP   HL   
171E   E5                     PUSH   HL   
171F   11 02 00               LD   DE,2   
1722   B7                     OR   A   
1723   ED 52                  SBC   HL,DE   
1725   7D                     LD   A,L   
1726   B4                     OR   H   
1727   CA 8B 17               JP   Z,expectM_2718S43   
172A   CD 90 0B               CALL   printStr   
172D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
173D   CD 90 0B               CALL   printStr   
1740   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174F   21 02 00               LD   hl,2   
1752   E5                     PUSH   hl   
1753   E5                     PUSH   hl   
1754   CD AF 0C               CALL   run   
1757   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175F   CD 18 0B               CALL   flushBuffer   
1762   CD 90 0B               CALL   printStr   
1765   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1772   E1                     POP   hl   
1773   E5                     PUSH   hl   
1774   E5                     PUSH   hl   
1775   CD AF 0C               CALL   run   
1778   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1787   CD 18 0B               CALL   flushBuffer   
178A   76                     HALT      
178B                EXPECTM_2718S43:      
178B   E1                     POP   HL   
178C                          ;*Macro unroll:  test "-1 -1 -",0
178C   31 00 4C               LD   SP,STACK   
178F   CD D8 0B               CALL   coldInit   
1792   CD 39 4A               CALL   execStr   
1795   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
179D   CD 18 0B               CALL   flushBuffer   
17A0   E1                     POP   HL   
17A1   E5                     PUSH   HL   
17A2   11 00 00               LD   DE,0   
17A5   B7                     OR   A   
17A6   ED 52                  SBC   HL,DE   
17A8   7D                     LD   A,L   
17A9   B4                     OR   H   
17AA   CA 0C 18               JP   Z,expectM_2719S44   
17AD   CD 90 0B               CALL   printStr   
17B0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
17BE   CD 90 0B               CALL   printStr   
17C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D0   21 00 00               LD   hl,0   
17D3   E5                     PUSH   hl   
17D4   E5                     PUSH   hl   
17D5   CD AF 0C               CALL   run   
17D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17E0   CD 18 0B               CALL   flushBuffer   
17E3   CD 90 0B               CALL   printStr   
17E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F3   E1                     POP   hl   
17F4   E5                     PUSH   hl   
17F5   E5                     PUSH   hl   
17F6   CD AF 0C               CALL   run   
17F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1808   CD 18 0B               CALL   flushBuffer   
180B   76                     HALT      
180C                EXPECTM_2719S44:      
180C   E1                     POP   HL   
180D                          ;*Macro unroll:  test "5 3 -", 2
180D   31 00 4C               LD   SP,STACK   
1810   CD D8 0B               CALL   coldInit   
1813   CD 39 4A               CALL   execStr   
1816   35 20 33 20 2D 00      DB   "5 3 -",0   
181C   CD 18 0B               CALL   flushBuffer   
181F   E1                     POP   HL   
1820   E5                     PUSH   HL   
1821   11 02 00               LD   DE,2   
1824   B7                     OR   A   
1825   ED 52                  SBC   HL,DE   
1827   7D                     LD   A,L   
1828   B4                     OR   H   
1829   CA 89 18               JP   Z,expectM_2720S45   
182C   CD 90 0B               CALL   printStr   
182F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
183B   CD 90 0B               CALL   printStr   
183E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184D   21 02 00               LD   hl,2   
1850   E5                     PUSH   hl   
1851   E5                     PUSH   hl   
1852   CD AF 0C               CALL   run   
1855   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
185D   CD 18 0B               CALL   flushBuffer   
1860   CD 90 0B               CALL   printStr   
1863   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1870   E1                     POP   hl   
1871   E5                     PUSH   hl   
1872   E5                     PUSH   hl   
1873   CD AF 0C               CALL   run   
1876   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1885   CD 18 0B               CALL   flushBuffer   
1888   76                     HALT      
1889                EXPECTM_2720S45:      
1889   E1                     POP   HL   
188A                          ;*Macro unroll:  test "2 1 -",1
188A   31 00 4C               LD   SP,STACK   
188D   CD D8 0B               CALL   coldInit   
1890   CD 39 4A               CALL   execStr   
1893   32 20 31 20 2D 00      DB   "2 1 -",0   
1899   CD 18 0B               CALL   flushBuffer   
189C   E1                     POP   HL   
189D   E5                     PUSH   HL   
189E   11 01 00               LD   DE,1   
18A1   B7                     OR   A   
18A2   ED 52                  SBC   HL,DE   
18A4   7D                     LD   A,L   
18A5   B4                     OR   H   
18A6   CA 06 19               JP   Z,expectM_2721S46   
18A9   CD 90 0B               CALL   printStr   
18AC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
18B8   CD 90 0B               CALL   printStr   
18BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18CA   21 01 00               LD   hl,1   
18CD   E5                     PUSH   hl   
18CE   E5                     PUSH   hl   
18CF   CD AF 0C               CALL   run   
18D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18DA   CD 18 0B               CALL   flushBuffer   
18DD   CD 90 0B               CALL   printStr   
18E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18ED   E1                     POP   hl   
18EE   E5                     PUSH   hl   
18EF   E5                     PUSH   hl   
18F0   CD AF 0C               CALL   run   
18F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1902   CD 18 0B               CALL   flushBuffer   
1905   76                     HALT      
1906                EXPECTM_2721S46:      
1906   E1                     POP   HL   
1907                          ;*Macro unroll:  test "3a= a-- a",2
1907   31 00 4C               LD   SP,STACK   
190A   CD D8 0B               CALL   coldInit   
190D   CD 39 4A               CALL   execStr   
1910   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
191A   CD 18 0B               CALL   flushBuffer   
191D   E1                     POP   HL   
191E   E5                     PUSH   HL   
191F   11 02 00               LD   DE,2   
1922   B7                     OR   A   
1923   ED 52                  SBC   HL,DE   
1925   7D                     LD   A,L   
1926   B4                     OR   H   
1927   CA 8B 19               JP   Z,expectM_2722S47   
192A   CD 90 0B               CALL   printStr   
192D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
193D   CD 90 0B               CALL   printStr   
1940   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194F   21 02 00               LD   hl,2   
1952   E5                     PUSH   hl   
1953   E5                     PUSH   hl   
1954   CD AF 0C               CALL   run   
1957   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195F   CD 18 0B               CALL   flushBuffer   
1962   CD 90 0B               CALL   printStr   
1965   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1972   E1                     POP   hl   
1973   E5                     PUSH   hl   
1974   E5                     PUSH   hl   
1975   CD AF 0C               CALL   run   
1978   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1987   CD 18 0B               CALL   flushBuffer   
198A   76                     HALT      
198B                EXPECTM_2722S47:      
198B   E1                     POP   HL   
198C                          ;*Macro unroll:  test "3 5 &", 1
198C   31 00 4C               LD   SP,STACK   
198F   CD D8 0B               CALL   coldInit   
1992   CD 39 4A               CALL   execStr   
1995   33 20 35 20 26 00      DB   "3 5 &",0   
199B   CD 18 0B               CALL   flushBuffer   
199E   E1                     POP   HL   
199F   E5                     PUSH   HL   
19A0   11 01 00               LD   DE,1   
19A3   B7                     OR   A   
19A4   ED 52                  SBC   HL,DE   
19A6   7D                     LD   A,L   
19A7   B4                     OR   H   
19A8   CA 08 1A               JP   Z,expectM_2723S48   
19AB   CD 90 0B               CALL   printStr   
19AE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
19BA   CD 90 0B               CALL   printStr   
19BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CC   21 01 00               LD   hl,1   
19CF   E5                     PUSH   hl   
19D0   E5                     PUSH   hl   
19D1   CD AF 0C               CALL   run   
19D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19DC   CD 18 0B               CALL   flushBuffer   
19DF   CD 90 0B               CALL   printStr   
19E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19EF   E1                     POP   hl   
19F0   E5                     PUSH   hl   
19F1   E5                     PUSH   hl   
19F2   CD AF 0C               CALL   run   
19F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A04   CD 18 0B               CALL   flushBuffer   
1A07   76                     HALT      
1A08                EXPECTM_2723S48:      
1A08   E1                     POP   HL   
1A09                          ;*Macro unroll:  test "3 5 |", 7
1A09   31 00 4C               LD   SP,STACK   
1A0C   CD D8 0B               CALL   coldInit   
1A0F   CD 39 4A               CALL   execStr   
1A12   33 20 35 20 7C 00      DB   "3 5 |",0   
1A18   CD 18 0B               CALL   flushBuffer   
1A1B   E1                     POP   HL   
1A1C   E5                     PUSH   HL   
1A1D   11 07 00               LD   DE,7   
1A20   B7                     OR   A   
1A21   ED 52                  SBC   HL,DE   
1A23   7D                     LD   A,L   
1A24   B4                     OR   H   
1A25   CA 85 1A               JP   Z,expectM_2724S49   
1A28   CD 90 0B               CALL   printStr   
1A2B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1A37   CD 90 0B               CALL   printStr   
1A3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A49   21 07 00               LD   hl,7   
1A4C   E5                     PUSH   hl   
1A4D   E5                     PUSH   hl   
1A4E   CD AF 0C               CALL   run   
1A51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A59   CD 18 0B               CALL   flushBuffer   
1A5C   CD 90 0B               CALL   printStr   
1A5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A6C   E1                     POP   hl   
1A6D   E5                     PUSH   hl   
1A6E   E5                     PUSH   hl   
1A6F   CD AF 0C               CALL   run   
1A72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A81   CD 18 0B               CALL   flushBuffer   
1A84   76                     HALT      
1A85                EXPECTM_2724S49:      
1A85   E1                     POP   HL   
1A86                          ;*Macro unroll:  test "3 5 /x", 6
1A86   31 00 4C               LD   SP,STACK   
1A89   CD D8 0B               CALL   coldInit   
1A8C   CD 39 4A               CALL   execStr   
1A8F   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1A96   CD 18 0B               CALL   flushBuffer   
1A99   E1                     POP   HL   
1A9A   E5                     PUSH   HL   
1A9B   11 06 00               LD   DE,6   
1A9E   B7                     OR   A   
1A9F   ED 52                  SBC   HL,DE   
1AA1   7D                     LD   A,L   
1AA2   B4                     OR   H   
1AA3   CA 04 1B               JP   Z,expectM_2725S50   
1AA6   CD 90 0B               CALL   printStr   
1AA9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1AB6   CD 90 0B               CALL   printStr   
1AB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC8   21 06 00               LD   hl,6   
1ACB   E5                     PUSH   hl   
1ACC   E5                     PUSH   hl   
1ACD   CD AF 0C               CALL   run   
1AD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AD8   CD 18 0B               CALL   flushBuffer   
1ADB   CD 90 0B               CALL   printStr   
1ADE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEB   E1                     POP   hl   
1AEC   E5                     PUSH   hl   
1AED   E5                     PUSH   hl   
1AEE   CD AF 0C               CALL   run   
1AF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B00   CD 18 0B               CALL   flushBuffer   
1B03   76                     HALT      
1B04                EXPECTM_2725S50:      
1B04   E1                     POP   HL   
1B05                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B05   31 00 4C               LD   SP,STACK   
1B08   CD D8 0B               CALL   coldInit   
1B0B   CD 39 4A               CALL   execStr   
1B0E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1B1D   CD 18 0B               CALL   flushBuffer   
1B20   E1                     POP   HL   
1B21   E5                     PUSH   HL   
1B22   11 06 00               LD   DE,6   
1B25   B7                     OR   A   
1B26   ED 52                  SBC   HL,DE   
1B28   7D                     LD   A,L   
1B29   B4                     OR   H   
1B2A   CA 93 1B               JP   Z,expectM_2726S51   
1B2D   CD 90 0B               CALL   printStr   
1B30   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1B45   CD 90 0B               CALL   printStr   
1B48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B57   21 06 00               LD   hl,6   
1B5A   E5                     PUSH   hl   
1B5B   E5                     PUSH   hl   
1B5C   CD AF 0C               CALL   run   
1B5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B67   CD 18 0B               CALL   flushBuffer   
1B6A   CD 90 0B               CALL   printStr   
1B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7A   E1                     POP   hl   
1B7B   E5                     PUSH   hl   
1B7C   E5                     PUSH   hl   
1B7D   CD AF 0C               CALL   run   
1B80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B8F   CD 18 0B               CALL   flushBuffer   
1B92   76                     HALT      
1B93                EXPECTM_2726S51:      
1B93   E1                     POP   HL   
1B94                          ;*Macro unroll:  test "2 3 *", 6
1B94   31 00 4C               LD   SP,STACK   
1B97   CD D8 0B               CALL   coldInit   
1B9A   CD 39 4A               CALL   execStr   
1B9D   32 20 33 20 2A 00      DB   "2 3 *",0   
1BA3   CD 18 0B               CALL   flushBuffer   
1BA6   E1                     POP   HL   
1BA7   E5                     PUSH   HL   
1BA8   11 06 00               LD   DE,6   
1BAB   B7                     OR   A   
1BAC   ED 52                  SBC   HL,DE   
1BAE   7D                     LD   A,L   
1BAF   B4                     OR   H   
1BB0   CA 10 1C               JP   Z,expectM_2727S52   
1BB3   CD 90 0B               CALL   printStr   
1BB6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1BC2   CD 90 0B               CALL   printStr   
1BC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BD4   21 06 00               LD   hl,6   
1BD7   E5                     PUSH   hl   
1BD8   E5                     PUSH   hl   
1BD9   CD AF 0C               CALL   run   
1BDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BE4   CD 18 0B               CALL   flushBuffer   
1BE7   CD 90 0B               CALL   printStr   
1BEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BF7   E1                     POP   hl   
1BF8   E5                     PUSH   hl   
1BF9   E5                     PUSH   hl   
1BFA   CD AF 0C               CALL   run   
1BFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C0C   CD 18 0B               CALL   flushBuffer   
1C0F   76                     HALT      
1C10                EXPECTM_2727S52:      
1C10   E1                     POP   HL   
1C11                          ;*Macro unroll:  test "1 2 3 + *", 5
1C11   31 00 4C               LD   SP,STACK   
1C14   CD D8 0B               CALL   coldInit   
1C17   CD 39 4A               CALL   execStr   
1C1A   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1C24   CD 18 0B               CALL   flushBuffer   
1C27   E1                     POP   HL   
1C28   E5                     PUSH   HL   
1C29   11 05 00               LD   DE,5   
1C2C   B7                     OR   A   
1C2D   ED 52                  SBC   HL,DE   
1C2F   7D                     LD   A,L   
1C30   B4                     OR   H   
1C31   CA 95 1C               JP   Z,expectM_2728S53   
1C34   CD 90 0B               CALL   printStr   
1C37   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1C47   CD 90 0B               CALL   printStr   
1C4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C59   21 05 00               LD   hl,5   
1C5C   E5                     PUSH   hl   
1C5D   E5                     PUSH   hl   
1C5E   CD AF 0C               CALL   run   
1C61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C69   CD 18 0B               CALL   flushBuffer   
1C6C   CD 90 0B               CALL   printStr   
1C6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7C   E1                     POP   hl   
1C7D   E5                     PUSH   hl   
1C7E   E5                     PUSH   hl   
1C7F   CD AF 0C               CALL   run   
1C82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C91   CD 18 0B               CALL   flushBuffer   
1C94   76                     HALT      
1C95                EXPECTM_2728S53:      
1C95   E1                     POP   HL   
1C96                          ;*Macro unroll:  test "7 3 /", 2
1C96   31 00 4C               LD   SP,STACK   
1C99   CD D8 0B               CALL   coldInit   
1C9C   CD 39 4A               CALL   execStr   
1C9F   37 20 33 20 2F 00      DB   "7 3 /",0   
1CA5   CD 18 0B               CALL   flushBuffer   
1CA8   E1                     POP   HL   
1CA9   E5                     PUSH   HL   
1CAA   11 02 00               LD   DE,2   
1CAD   B7                     OR   A   
1CAE   ED 52                  SBC   HL,DE   
1CB0   7D                     LD   A,L   
1CB1   B4                     OR   H   
1CB2   CA 12 1D               JP   Z,expectM_2729S54   
1CB5   CD 90 0B               CALL   printStr   
1CB8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CC4   CD 90 0B               CALL   printStr   
1CC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD6   21 02 00               LD   hl,2   
1CD9   E5                     PUSH   hl   
1CDA   E5                     PUSH   hl   
1CDB   CD AF 0C               CALL   run   
1CDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE6   CD 18 0B               CALL   flushBuffer   
1CE9   CD 90 0B               CALL   printStr   
1CEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF9   E1                     POP   hl   
1CFA   E5                     PUSH   hl   
1CFB   E5                     PUSH   hl   
1CFC   CD AF 0C               CALL   run   
1CFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0E   CD 18 0B               CALL   flushBuffer   
1D11   76                     HALT      
1D12                EXPECTM_2729S54:      
1D12   E1                     POP   HL   
1D13                          ;*Macro unroll:  test "7 3 / /re", 1
1D13   31 00 4C               LD   SP,STACK   
1D16   CD D8 0B               CALL   coldInit   
1D19   CD 39 4A               CALL   execStr   
1D1C   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
1D26   CD 18 0B               CALL   flushBuffer   
1D29   E1                     POP   HL   
1D2A   E5                     PUSH   HL   
1D2B   11 01 00               LD   DE,1   
1D2E   B7                     OR   A   
1D2F   ED 52                  SBC   HL,DE   
1D31   7D                     LD   A,L   
1D32   B4                     OR   H   
1D33   CA 97 1D               JP   Z,expectM_2730S55   
1D36   CD 90 0B               CALL   printStr   
1D39   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1D49   CD 90 0B               CALL   printStr   
1D4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5B   21 01 00               LD   hl,1   
1D5E   E5                     PUSH   hl   
1D5F   E5                     PUSH   hl   
1D60   CD AF 0C               CALL   run   
1D63   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D6B   CD 18 0B               CALL   flushBuffer   
1D6E   CD 90 0B               CALL   printStr   
1D71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7E   E1                     POP   hl   
1D7F   E5                     PUSH   hl   
1D80   E5                     PUSH   hl   
1D81   CD AF 0C               CALL   run   
1D84   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D93   CD 18 0B               CALL   flushBuffer   
1D96   76                     HALT      
1D97                EXPECTM_2730S55:      
1D97   E1                     POP   HL   
1D98                          ;*Macro unroll:  test "7 3 /", 2
1D98   31 00 4C               LD   SP,STACK   
1D9B   CD D8 0B               CALL   coldInit   
1D9E   CD 39 4A               CALL   execStr   
1DA1   37 20 33 20 2F 00      DB   "7 3 /",0   
1DA7   CD 18 0B               CALL   flushBuffer   
1DAA   E1                     POP   HL   
1DAB   E5                     PUSH   HL   
1DAC   11 02 00               LD   DE,2   
1DAF   B7                     OR   A   
1DB0   ED 52                  SBC   HL,DE   
1DB2   7D                     LD   A,L   
1DB3   B4                     OR   H   
1DB4   CA 14 1E               JP   Z,expectM_2731S56   
1DB7   CD 90 0B               CALL   printStr   
1DBA   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC6   CD 90 0B               CALL   printStr   
1DC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD8   21 02 00               LD   hl,2   
1DDB   E5                     PUSH   hl   
1DDC   E5                     PUSH   hl   
1DDD   CD AF 0C               CALL   run   
1DE0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DE8   CD 18 0B               CALL   flushBuffer   
1DEB   CD 90 0B               CALL   printStr   
1DEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DFB   E1                     POP   hl   
1DFC   E5                     PUSH   hl   
1DFD   E5                     PUSH   hl   
1DFE   CD AF 0C               CALL   run   
1E01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E10   CD 18 0B               CALL   flushBuffer   
1E13   76                     HALT      
1E14                EXPECTM_2731S56:      
1E14   E1                     POP   HL   
1E15                          ;*Macro unroll:  test "2 3 ==", FALSE
1E15   31 00 4C               LD   SP,STACK   
1E18   CD D8 0B               CALL   coldInit   
1E1B   CD 39 4A               CALL   execStr   
1E1E   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
1E25   CD 18 0B               CALL   flushBuffer   
1E28   E1                     POP   HL   
1E29   E5                     PUSH   HL   
1E2A   11 00 00               LD   DE,FALSE   
1E2D   B7                     OR   A   
1E2E   ED 52                  SBC   HL,DE   
1E30   7D                     LD   A,L   
1E31   B4                     OR   H   
1E32   CA 93 1E               JP   Z,expectM_2732S57   
1E35   CD 90 0B               CALL   printStr   
1E38   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1E45   CD 90 0B               CALL   printStr   
1E48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E57   21 00 00               LD   hl,FALSE   
1E5A   E5                     PUSH   hl   
1E5B   E5                     PUSH   hl   
1E5C   CD AF 0C               CALL   run   
1E5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E67   CD 18 0B               CALL   flushBuffer   
1E6A   CD 90 0B               CALL   printStr   
1E6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7A   E1                     POP   hl   
1E7B   E5                     PUSH   hl   
1E7C   E5                     PUSH   hl   
1E7D   CD AF 0C               CALL   run   
1E80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E8F   CD 18 0B               CALL   flushBuffer   
1E92   76                     HALT      
1E93                EXPECTM_2732S57:      
1E93   E1                     POP   HL   
1E94                          ;*Macro unroll:  test "3 3 ==", TRUE
1E94   31 00 4C               LD   SP,STACK   
1E97   CD D8 0B               CALL   coldInit   
1E9A   CD 39 4A               CALL   execStr   
1E9D   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
1EA4   CD 18 0B               CALL   flushBuffer   
1EA7   E1                     POP   HL   
1EA8   E5                     PUSH   HL   
1EA9   11 FF FF               LD   DE,TRUE   
1EAC   B7                     OR   A   
1EAD   ED 52                  SBC   HL,DE   
1EAF   7D                     LD   A,L   
1EB0   B4                     OR   H   
1EB1   CA 12 1F               JP   Z,expectM_2733S58   
1EB4   CD 90 0B               CALL   printStr   
1EB7   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1EC4   CD 90 0B               CALL   printStr   
1EC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED6   21 FF FF               LD   hl,TRUE   
1ED9   E5                     PUSH   hl   
1EDA   E5                     PUSH   hl   
1EDB   CD AF 0C               CALL   run   
1EDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EE6   CD 18 0B               CALL   flushBuffer   
1EE9   CD 90 0B               CALL   printStr   
1EEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EF9   E1                     POP   hl   
1EFA   E5                     PUSH   hl   
1EFB   E5                     PUSH   hl   
1EFC   CD AF 0C               CALL   run   
1EFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F0E   CD 18 0B               CALL   flushBuffer   
1F11   76                     HALT      
1F12                EXPECTM_2733S58:      
1F12   E1                     POP   HL   
1F13                          ;*Macro unroll:  test "1 2 <", TRUE
1F13   31 00 4C               LD   SP,STACK   
1F16   CD D8 0B               CALL   coldInit   
1F19   CD 39 4A               CALL   execStr   
1F1C   31 20 32 20 3C 00      DB   "1 2 <",0   
1F22   CD 18 0B               CALL   flushBuffer   
1F25   E1                     POP   HL   
1F26   E5                     PUSH   HL   
1F27   11 FF FF               LD   DE,TRUE   
1F2A   B7                     OR   A   
1F2B   ED 52                  SBC   HL,DE   
1F2D   7D                     LD   A,L   
1F2E   B4                     OR   H   
1F2F   CA 8F 1F               JP   Z,expectM_2734S59   
1F32   CD 90 0B               CALL   printStr   
1F35   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1F41   CD 90 0B               CALL   printStr   
1F44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F53   21 FF FF               LD   hl,TRUE   
1F56   E5                     PUSH   hl   
1F57   E5                     PUSH   hl   
1F58   CD AF 0C               CALL   run   
1F5B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F63   CD 18 0B               CALL   flushBuffer   
1F66   CD 90 0B               CALL   printStr   
1F69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F76   E1                     POP   hl   
1F77   E5                     PUSH   hl   
1F78   E5                     PUSH   hl   
1F79   CD AF 0C               CALL   run   
1F7C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F8B   CD 18 0B               CALL   flushBuffer   
1F8E   76                     HALT      
1F8F                EXPECTM_2734S59:      
1F8F   E1                     POP   HL   
1F90                          ;*Macro unroll:  test "2 1 <", FALSE
1F90   31 00 4C               LD   SP,STACK   
1F93   CD D8 0B               CALL   coldInit   
1F96   CD 39 4A               CALL   execStr   
1F99   32 20 31 20 3C 00      DB   "2 1 <",0   
1F9F   CD 18 0B               CALL   flushBuffer   
1FA2   E1                     POP   HL   
1FA3   E5                     PUSH   HL   
1FA4   11 00 00               LD   DE,FALSE   
1FA7   B7                     OR   A   
1FA8   ED 52                  SBC   HL,DE   
1FAA   7D                     LD   A,L   
1FAB   B4                     OR   H   
1FAC   CA 0C 20               JP   Z,expectM_2735S60   
1FAF   CD 90 0B               CALL   printStr   
1FB2   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1FBE   CD 90 0B               CALL   printStr   
1FC1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FD0   21 00 00               LD   hl,FALSE   
1FD3   E5                     PUSH   hl   
1FD4   E5                     PUSH   hl   
1FD5   CD AF 0C               CALL   run   
1FD8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FE0   CD 18 0B               CALL   flushBuffer   
1FE3   CD 90 0B               CALL   printStr   
1FE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF3   E1                     POP   hl   
1FF4   E5                     PUSH   hl   
1FF5   E5                     PUSH   hl   
1FF6   CD AF 0C               CALL   run   
1FF9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2008   CD 18 0B               CALL   flushBuffer   
200B   76                     HALT      
200C                EXPECTM_2735S60:      
200C   E1                     POP   HL   
200D                          ;*Macro unroll:  test "2 3 <", TRUE
200D   31 00 4C               LD   SP,STACK   
2010   CD D8 0B               CALL   coldInit   
2013   CD 39 4A               CALL   execStr   
2016   32 20 33 20 3C 00      DB   "2 3 <",0   
201C   CD 18 0B               CALL   flushBuffer   
201F   E1                     POP   HL   
2020   E5                     PUSH   HL   
2021   11 FF FF               LD   DE,TRUE   
2024   B7                     OR   A   
2025   ED 52                  SBC   HL,DE   
2027   7D                     LD   A,L   
2028   B4                     OR   H   
2029   CA 89 20               JP   Z,expectM_2736S61   
202C   CD 90 0B               CALL   printStr   
202F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
203B   CD 90 0B               CALL   printStr   
203E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
204D   21 FF FF               LD   hl,TRUE   
2050   E5                     PUSH   hl   
2051   E5                     PUSH   hl   
2052   CD AF 0C               CALL   run   
2055   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
205D   CD 18 0B               CALL   flushBuffer   
2060   CD 90 0B               CALL   printStr   
2063   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2070   E1                     POP   hl   
2071   E5                     PUSH   hl   
2072   E5                     PUSH   hl   
2073   CD AF 0C               CALL   run   
2076   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2085   CD 18 0B               CALL   flushBuffer   
2088   76                     HALT      
2089                EXPECTM_2736S61:      
2089   E1                     POP   HL   
208A                          ;*Macro unroll:  test "3 3 <", FALSE
208A   31 00 4C               LD   SP,STACK   
208D   CD D8 0B               CALL   coldInit   
2090   CD 39 4A               CALL   execStr   
2093   33 20 33 20 3C 00      DB   "3 3 <",0   
2099   CD 18 0B               CALL   flushBuffer   
209C   E1                     POP   HL   
209D   E5                     PUSH   HL   
209E   11 00 00               LD   DE,FALSE   
20A1   B7                     OR   A   
20A2   ED 52                  SBC   HL,DE   
20A4   7D                     LD   A,L   
20A5   B4                     OR   H   
20A6   CA 06 21               JP   Z,expectM_2737S62   
20A9   CD 90 0B               CALL   printStr   
20AC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
20B8   CD 90 0B               CALL   printStr   
20BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20CA   21 00 00               LD   hl,FALSE   
20CD   E5                     PUSH   hl   
20CE   E5                     PUSH   hl   
20CF   CD AF 0C               CALL   run   
20D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20DA   CD 18 0B               CALL   flushBuffer   
20DD   CD 90 0B               CALL   printStr   
20E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20ED   E1                     POP   hl   
20EE   E5                     PUSH   hl   
20EF   E5                     PUSH   hl   
20F0   CD AF 0C               CALL   run   
20F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2102   CD 18 0B               CALL   flushBuffer   
2105   76                     HALT      
2106                EXPECTM_2737S62:      
2106   E1                     POP   HL   
2107                          ;*Macro unroll:  test "1 2 >", FALSE
2107   31 00 4C               LD   SP,STACK   
210A   CD D8 0B               CALL   coldInit   
210D   CD 39 4A               CALL   execStr   
2110   31 20 32 20 3E 00      DB   "1 2 >",0   
2116   CD 18 0B               CALL   flushBuffer   
2119   E1                     POP   HL   
211A   E5                     PUSH   HL   
211B   11 00 00               LD   DE,FALSE   
211E   B7                     OR   A   
211F   ED 52                  SBC   HL,DE   
2121   7D                     LD   A,L   
2122   B4                     OR   H   
2123   CA 83 21               JP   Z,expectM_2738S63   
2126   CD 90 0B               CALL   printStr   
2129   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2135   CD 90 0B               CALL   printStr   
2138   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2147   21 00 00               LD   hl,FALSE   
214A   E5                     PUSH   hl   
214B   E5                     PUSH   hl   
214C   CD AF 0C               CALL   run   
214F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2157   CD 18 0B               CALL   flushBuffer   
215A   CD 90 0B               CALL   printStr   
215D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
216A   E1                     POP   hl   
216B   E5                     PUSH   hl   
216C   E5                     PUSH   hl   
216D   CD AF 0C               CALL   run   
2170   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
217F   CD 18 0B               CALL   flushBuffer   
2182   76                     HALT      
2183                EXPECTM_2738S63:      
2183   E1                     POP   HL   
2184                          ;*Macro unroll:  test "2 1 >", TRUE
2184   31 00 4C               LD   SP,STACK   
2187   CD D8 0B               CALL   coldInit   
218A   CD 39 4A               CALL   execStr   
218D   32 20 31 20 3E 00      DB   "2 1 >",0   
2193   CD 18 0B               CALL   flushBuffer   
2196   E1                     POP   HL   
2197   E5                     PUSH   HL   
2198   11 FF FF               LD   DE,TRUE   
219B   B7                     OR   A   
219C   ED 52                  SBC   HL,DE   
219E   7D                     LD   A,L   
219F   B4                     OR   H   
21A0   CA 00 22               JP   Z,expectM_2739S64   
21A3   CD 90 0B               CALL   printStr   
21A6   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
21B2   CD 90 0B               CALL   printStr   
21B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C4   21 FF FF               LD   hl,TRUE   
21C7   E5                     PUSH   hl   
21C8   E5                     PUSH   hl   
21C9   CD AF 0C               CALL   run   
21CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D4   CD 18 0B               CALL   flushBuffer   
21D7   CD 90 0B               CALL   printStr   
21DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E7   E1                     POP   hl   
21E8   E5                     PUSH   hl   
21E9   E5                     PUSH   hl   
21EA   CD AF 0C               CALL   run   
21ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21FC   CD 18 0B               CALL   flushBuffer   
21FF   76                     HALT      
2200                EXPECTM_2739S64:      
2200   E1                     POP   HL   
2201                          ;*Macro unroll:  test "3 3 >", FALSE
2201   31 00 4C               LD   SP,STACK   
2204   CD D8 0B               CALL   coldInit   
2207   CD 39 4A               CALL   execStr   
220A   33 20 33 20 3E 00      DB   "3 3 >",0   
2210   CD 18 0B               CALL   flushBuffer   
2213   E1                     POP   HL   
2214   E5                     PUSH   HL   
2215   11 00 00               LD   DE,FALSE   
2218   B7                     OR   A   
2219   ED 52                  SBC   HL,DE   
221B   7D                     LD   A,L   
221C   B4                     OR   H   
221D   CA 7D 22               JP   Z,expectM_2740S65   
2220   CD 90 0B               CALL   printStr   
2223   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
222F   CD 90 0B               CALL   printStr   
2232   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2241   21 00 00               LD   hl,FALSE   
2244   E5                     PUSH   hl   
2245   E5                     PUSH   hl   
2246   CD AF 0C               CALL   run   
2249   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2251   CD 18 0B               CALL   flushBuffer   
2254   CD 90 0B               CALL   printStr   
2257   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2264   E1                     POP   hl   
2265   E5                     PUSH   hl   
2266   E5                     PUSH   hl   
2267   CD AF 0C               CALL   run   
226A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2279   CD 18 0B               CALL   flushBuffer   
227C   76                     HALT      
227D                EXPECTM_2740S65:      
227D   E1                     POP   HL   
227E                          ;*Macro unroll:  test "4 3 >", TRUE
227E   31 00 4C               LD   SP,STACK   
2281   CD D8 0B               CALL   coldInit   
2284   CD 39 4A               CALL   execStr   
2287   34 20 33 20 3E 00      DB   "4 3 >",0   
228D   CD 18 0B               CALL   flushBuffer   
2290   E1                     POP   HL   
2291   E5                     PUSH   HL   
2292   11 FF FF               LD   DE,TRUE   
2295   B7                     OR   A   
2296   ED 52                  SBC   HL,DE   
2298   7D                     LD   A,L   
2299   B4                     OR   H   
229A   CA FA 22               JP   Z,expectM_2741S66   
229D   CD 90 0B               CALL   printStr   
22A0   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
22AC   CD 90 0B               CALL   printStr   
22AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22BE   21 FF FF               LD   hl,TRUE   
22C1   E5                     PUSH   hl   
22C2   E5                     PUSH   hl   
22C3   CD AF 0C               CALL   run   
22C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22CE   CD 18 0B               CALL   flushBuffer   
22D1   CD 90 0B               CALL   printStr   
22D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E1   E1                     POP   hl   
22E2   E5                     PUSH   hl   
22E3   E5                     PUSH   hl   
22E4   CD AF 0C               CALL   run   
22E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22F6   CD 18 0B               CALL   flushBuffer   
22F9   76                     HALT      
22FA                EXPECTM_2741S66:      
22FA   E1                     POP   HL   
22FB                          ;*Macro unroll:  test "2 2 <=", TRUE
22FB   31 00 4C               LD   SP,STACK   
22FE   CD D8 0B               CALL   coldInit   
2301   CD 39 4A               CALL   execStr   
2304   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
230B   CD 18 0B               CALL   flushBuffer   
230E   E1                     POP   HL   
230F   E5                     PUSH   HL   
2310   11 FF FF               LD   DE,TRUE   
2313   B7                     OR   A   
2314   ED 52                  SBC   HL,DE   
2316   7D                     LD   A,L   
2317   B4                     OR   H   
2318   CA 79 23               JP   Z,expectM_2742S67   
231B   CD 90 0B               CALL   printStr   
231E   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
232B   CD 90 0B               CALL   printStr   
232E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233D   21 FF FF               LD   hl,TRUE   
2340   E5                     PUSH   hl   
2341   E5                     PUSH   hl   
2342   CD AF 0C               CALL   run   
2345   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
234D   CD 18 0B               CALL   flushBuffer   
2350   CD 90 0B               CALL   printStr   
2353   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2360   E1                     POP   hl   
2361   E5                     PUSH   hl   
2362   E5                     PUSH   hl   
2363   CD AF 0C               CALL   run   
2366   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2375   CD 18 0B               CALL   flushBuffer   
2378   76                     HALT      
2379                EXPECTM_2742S67:      
2379   E1                     POP   HL   
237A                          ;*Macro unroll:  test "2 2 >=", TRUE
237A   31 00 4C               LD   SP,STACK   
237D   CD D8 0B               CALL   coldInit   
2380   CD 39 4A               CALL   execStr   
2383   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
238A   CD 18 0B               CALL   flushBuffer   
238D   E1                     POP   HL   
238E   E5                     PUSH   HL   
238F   11 FF FF               LD   DE,TRUE   
2392   B7                     OR   A   
2393   ED 52                  SBC   HL,DE   
2395   7D                     LD   A,L   
2396   B4                     OR   H   
2397   CA F8 23               JP   Z,expectM_2743S68   
239A   CD 90 0B               CALL   printStr   
239D   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
23AA   CD 90 0B               CALL   printStr   
23AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BC   21 FF FF               LD   hl,TRUE   
23BF   E5                     PUSH   hl   
23C0   E5                     PUSH   hl   
23C1   CD AF 0C               CALL   run   
23C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23CC   CD 18 0B               CALL   flushBuffer   
23CF   CD 90 0B               CALL   printStr   
23D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23DF   E1                     POP   hl   
23E0   E5                     PUSH   hl   
23E1   E5                     PUSH   hl   
23E2   CD AF 0C               CALL   run   
23E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23F4   CD 18 0B               CALL   flushBuffer   
23F7   76                     HALT      
23F8                EXPECTM_2743S68:      
23F8   E1                     POP   HL   
23F9                          ;*Macro unroll:  test "3 1 <<", 6
23F9   31 00 4C               LD   SP,STACK   
23FC   CD D8 0B               CALL   coldInit   
23FF   CD 39 4A               CALL   execStr   
2402   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2409   CD 18 0B               CALL   flushBuffer   
240C   E1                     POP   HL   
240D   E5                     PUSH   HL   
240E   11 06 00               LD   DE,6   
2411   B7                     OR   A   
2412   ED 52                  SBC   HL,DE   
2414   7D                     LD   A,L   
2415   B4                     OR   H   
2416   CA 77 24               JP   Z,expectM_2744S69   
2419   CD 90 0B               CALL   printStr   
241C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2429   CD 90 0B               CALL   printStr   
242C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243B   21 06 00               LD   hl,6   
243E   E5                     PUSH   hl   
243F   E5                     PUSH   hl   
2440   CD AF 0C               CALL   run   
2443   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
244B   CD 18 0B               CALL   flushBuffer   
244E   CD 90 0B               CALL   printStr   
2451   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
245E   E1                     POP   hl   
245F   E5                     PUSH   hl   
2460   E5                     PUSH   hl   
2461   CD AF 0C               CALL   run   
2464   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2473   CD 18 0B               CALL   flushBuffer   
2476   76                     HALT      
2477                EXPECTM_2744S69:      
2477   E1                     POP   HL   
2478                          ;*Macro unroll:  test "10 1 >>", 5
2478   31 00 4C               LD   SP,STACK   
247B   CD D8 0B               CALL   coldInit   
247E   CD 39 4A               CALL   execStr   
2481   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2489   CD 18 0B               CALL   flushBuffer   
248C   E1                     POP   HL   
248D   E5                     PUSH   HL   
248E   11 05 00               LD   DE,5   
2491   B7                     OR   A   
2492   ED 52                  SBC   HL,DE   
2494   7D                     LD   A,L   
2495   B4                     OR   H   
2496   CA F8 24               JP   Z,expectM_2745S70   
2499   CD 90 0B               CALL   printStr   
249C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
24AA   CD 90 0B               CALL   printStr   
24AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BC   21 05 00               LD   hl,5   
24BF   E5                     PUSH   hl   
24C0   E5                     PUSH   hl   
24C1   CD AF 0C               CALL   run   
24C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24CC   CD 18 0B               CALL   flushBuffer   
24CF   CD 90 0B               CALL   printStr   
24D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DF   E1                     POP   hl   
24E0   E5                     PUSH   hl   
24E1   E5                     PUSH   hl   
24E2   CD AF 0C               CALL   run   
24E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F4   CD 18 0B               CALL   flushBuffer   
24F7   76                     HALT      
24F8                EXPECTM_2745S70:      
24F8   E1                     POP   HL   
24F9                          ;*Macro unroll:  test "1 x = x", 1
24F9   31 00 4C               LD   SP,STACK   
24FC   CD D8 0B               CALL   coldInit   
24FF   CD 39 4A               CALL   execStr   
2502   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
250A   CD 18 0B               CALL   flushBuffer   
250D   E1                     POP   HL   
250E   E5                     PUSH   HL   
250F   11 01 00               LD   DE,1   
2512   B7                     OR   A   
2513   ED 52                  SBC   HL,DE   
2515   7D                     LD   A,L   
2516   B4                     OR   H   
2517   CA 79 25               JP   Z,expectM_2746S71   
251A   CD 90 0B               CALL   printStr   
251D   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
252B   CD 90 0B               CALL   printStr   
252E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253D   21 01 00               LD   hl,1   
2540   E5                     PUSH   hl   
2541   E5                     PUSH   hl   
2542   CD AF 0C               CALL   run   
2545   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
254D   CD 18 0B               CALL   flushBuffer   
2550   CD 90 0B               CALL   printStr   
2553   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2560   E1                     POP   hl   
2561   E5                     PUSH   hl   
2562   E5                     PUSH   hl   
2563   CD AF 0C               CALL   run   
2566   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2575   CD 18 0B               CALL   flushBuffer   
2578   76                     HALT      
2579                EXPECTM_2746S71:      
2579   E1                     POP   HL   
257A                          ;*Macro unroll:  test "1{}^", 1
257A   31 00 4C               LD   SP,STACK   
257D   CD D8 0B               CALL   coldInit   
2580   CD 39 4A               CALL   execStr   
2583   31 7B 7D 5E 00         DB   "1{}^",0   
2588   CD 18 0B               CALL   flushBuffer   
258B   E1                     POP   HL   
258C   E5                     PUSH   HL   
258D   11 01 00               LD   DE,1   
2590   B7                     OR   A   
2591   ED 52                  SBC   HL,DE   
2593   7D                     LD   A,L   
2594   B4                     OR   H   
2595   CA F4 25               JP   Z,expectM_2747S72   
2598   CD 90 0B               CALL   printStr   
259B   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
25A6   CD 90 0B               CALL   printStr   
25A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B8   21 01 00               LD   hl,1   
25BB   E5                     PUSH   hl   
25BC   E5                     PUSH   hl   
25BD   CD AF 0C               CALL   run   
25C0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25C8   CD 18 0B               CALL   flushBuffer   
25CB   CD 90 0B               CALL   printStr   
25CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DB   E1                     POP   hl   
25DC   E5                     PUSH   hl   
25DD   E5                     PUSH   hl   
25DE   CD AF 0C               CALL   run   
25E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25F0   CD 18 0B               CALL   flushBuffer   
25F3   76                     HALT      
25F4                EXPECTM_2747S72:      
25F4   E1                     POP   HL   
25F5                          ;*Macro unroll:  test "{1}^", 1
25F5   31 00 4C               LD   SP,STACK   
25F8   CD D8 0B               CALL   coldInit   
25FB   CD 39 4A               CALL   execStr   
25FE   7B 31 7D 5E 00         DB   "{1}^",0   
2603   CD 18 0B               CALL   flushBuffer   
2606   E1                     POP   HL   
2607   E5                     PUSH   HL   
2608   11 01 00               LD   DE,1   
260B   B7                     OR   A   
260C   ED 52                  SBC   HL,DE   
260E   7D                     LD   A,L   
260F   B4                     OR   H   
2610   CA 6F 26               JP   Z,expectM_2748S73   
2613   CD 90 0B               CALL   printStr   
2616   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2621   CD 90 0B               CALL   printStr   
2624   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2633   21 01 00               LD   hl,1   
2636   E5                     PUSH   hl   
2637   E5                     PUSH   hl   
2638   CD AF 0C               CALL   run   
263B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2643   CD 18 0B               CALL   flushBuffer   
2646   CD 90 0B               CALL   printStr   
2649   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2656   E1                     POP   hl   
2657   E5                     PUSH   hl   
2658   E5                     PUSH   hl   
2659   CD AF 0C               CALL   run   
265C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
266B   CD 18 0B               CALL   flushBuffer   
266E   76                     HALT      
266F                EXPECTM_2748S73:      
266F   E1                     POP   HL   
2670                          ;*Macro unroll:  test "{{1}^}^", 1
2670   31 00 4C               LD   SP,STACK   
2673   CD D8 0B               CALL   coldInit   
2676   CD 39 4A               CALL   execStr   
2679   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2681   CD 18 0B               CALL   flushBuffer   
2684   E1                     POP   HL   
2685   E5                     PUSH   HL   
2686   11 01 00               LD   DE,1   
2689   B7                     OR   A   
268A   ED 52                  SBC   HL,DE   
268C   7D                     LD   A,L   
268D   B4                     OR   H   
268E   CA F0 26               JP   Z,expectM_2749S74   
2691   CD 90 0B               CALL   printStr   
2694   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
26A2   CD 90 0B               CALL   printStr   
26A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B4   21 01 00               LD   hl,1   
26B7   E5                     PUSH   hl   
26B8   E5                     PUSH   hl   
26B9   CD AF 0C               CALL   run   
26BC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26C4   CD 18 0B               CALL   flushBuffer   
26C7   CD 90 0B               CALL   printStr   
26CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D7   E1                     POP   hl   
26D8   E5                     PUSH   hl   
26D9   E5                     PUSH   hl   
26DA   CD AF 0C               CALL   run   
26DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26EC   CD 18 0B               CALL   flushBuffer   
26EF   76                     HALT      
26F0                EXPECTM_2749S74:      
26F0   E1                     POP   HL   
26F1                          ;*Macro unroll:  test "{{{1}^}^}^", 1
26F1   31 00 4C               LD   SP,STACK   
26F4   CD D8 0B               CALL   coldInit   
26F7   CD 39 4A               CALL   execStr   
26FA   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2705   CD 18 0B               CALL   flushBuffer   
2708   E1                     POP   HL   
2709   E5                     PUSH   HL   
270A   11 01 00               LD   DE,1   
270D   B7                     OR   A   
270E   ED 52                  SBC   HL,DE   
2710   7D                     LD   A,L   
2711   B4                     OR   H   
2712   CA 77 27               JP   Z,expectM_2750S75   
2715   CD 90 0B               CALL   printStr   
2718   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2729   CD 90 0B               CALL   printStr   
272C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
273B   21 01 00               LD   hl,1   
273E   E5                     PUSH   hl   
273F   E5                     PUSH   hl   
2740   CD AF 0C               CALL   run   
2743   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
274B   CD 18 0B               CALL   flushBuffer   
274E   CD 90 0B               CALL   printStr   
2751   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275E   E1                     POP   hl   
275F   E5                     PUSH   hl   
2760   E5                     PUSH   hl   
2761   CD AF 0C               CALL   run   
2764   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2773   CD 18 0B               CALL   flushBuffer   
2776   76                     HALT      
2777                EXPECTM_2750S75:      
2777   E1                     POP   HL   
2778                          ;*Macro unroll:  test "5 /f{10} ?", 5
2778   31 00 4C               LD   SP,STACK   
277B   CD D8 0B               CALL   coldInit   
277E   CD 39 4A               CALL   execStr   
2781   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
278C   CD 18 0B               CALL   flushBuffer   
278F   E1                     POP   HL   
2790   E5                     PUSH   HL   
2791   11 05 00               LD   DE,5   
2794   B7                     OR   A   
2795   ED 52                  SBC   HL,DE   
2797   7D                     LD   A,L   
2798   B4                     OR   H   
2799   CA FE 27               JP   Z,expectM_2751S76   
279C   CD 90 0B               CALL   printStr   
279F   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
27B0   CD 90 0B               CALL   printStr   
27B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27C2   21 05 00               LD   hl,5   
27C5   E5                     PUSH   hl   
27C6   E5                     PUSH   hl   
27C7   CD AF 0C               CALL   run   
27CA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27D2   CD 18 0B               CALL   flushBuffer   
27D5   CD 90 0B               CALL   printStr   
27D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E5   E1                     POP   hl   
27E6   E5                     PUSH   hl   
27E7   E5                     PUSH   hl   
27E8   CD AF 0C               CALL   run   
27EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27FA   CD 18 0B               CALL   flushBuffer   
27FD   76                     HALT      
27FE                EXPECTM_2751S76:      
27FE   E1                     POP   HL   
27FF                          ;*Macro unroll:  test "5 /t{10} ? +", 15
27FF   31 00 4C               LD   SP,STACK   
2802   CD D8 0B               CALL   coldInit   
2805   CD 39 4A               CALL   execStr   
2808   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2815   CD 18 0B               CALL   flushBuffer   
2818   E1                     POP   HL   
2819   E5                     PUSH   HL   
281A   11 0F 00               LD   DE,15   
281D   B7                     OR   A   
281E   ED 52                  SBC   HL,DE   
2820   7D                     LD   A,L   
2821   B4                     OR   H   
2822   CA 89 28               JP   Z,expectM_2752S77   
2825   CD 90 0B               CALL   printStr   
2828   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
283B   CD 90 0B               CALL   printStr   
283E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
284D   21 0F 00               LD   hl,15   
2850   E5                     PUSH   hl   
2851   E5                     PUSH   hl   
2852   CD AF 0C               CALL   run   
2855   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
285D   CD 18 0B               CALL   flushBuffer   
2860   CD 90 0B               CALL   printStr   
2863   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2870   E1                     POP   hl   
2871   E5                     PUSH   hl   
2872   E5                     PUSH   hl   
2873   CD AF 0C               CALL   run   
2876   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2885   CD 18 0B               CALL   flushBuffer   
2888   76                     HALT      
2889                EXPECTM_2752S77:      
2889   E1                     POP   HL   
288A                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
288A   31 00 4C               LD   SP,STACK   
288D   CD D8 0B               CALL   coldInit   
2890   CD 39 4A               CALL   execStr   
2893   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
28A5   CD 18 0B               CALL   flushBuffer   
28A8   E1                     POP   HL   
28A9   E5                     PUSH   HL   
28AA   11 15 00               LD   DE,21   
28AD   B7                     OR   A   
28AE   ED 52                  SBC   HL,DE   
28B0   7D                     LD   A,L   
28B1   B4                     OR   H   
28B2   CA 1E 29               JP   Z,expectM_2753S78   
28B5   CD 90 0B               CALL   printStr   
28B8   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
28D0   CD 90 0B               CALL   printStr   
28D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E2   21 15 00               LD   hl,21   
28E5   E5                     PUSH   hl   
28E6   E5                     PUSH   hl   
28E7   CD AF 0C               CALL   run   
28EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F2   CD 18 0B               CALL   flushBuffer   
28F5   CD 90 0B               CALL   printStr   
28F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2905   E1                     POP   hl   
2906   E5                     PUSH   hl   
2907   E5                     PUSH   hl   
2908   CD AF 0C               CALL   run   
290B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291A   CD 18 0B               CALL   flushBuffer   
291D   76                     HALT      
291E                EXPECTM_2753S78:      
291E   E1                     POP   HL   
291F                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
291F   31 00 4C               LD   SP,STACK   
2922   CD D8 0B               CALL   coldInit   
2925   CD 39 4A               CALL   execStr   
2928   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
293A   CD 18 0B               CALL   flushBuffer   
293D   E1                     POP   HL   
293E   E5                     PUSH   HL   
293F   11 0B 00               LD   DE,11   
2942   B7                     OR   A   
2943   ED 52                  SBC   HL,DE   
2945   7D                     LD   A,L   
2946   B4                     OR   H   
2947   CA B3 29               JP   Z,expectM_2754S79   
294A   CD 90 0B               CALL   printStr   
294D   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2965   CD 90 0B               CALL   printStr   
2968   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2977   21 0B 00               LD   hl,11   
297A   E5                     PUSH   hl   
297B   E5                     PUSH   hl   
297C   CD AF 0C               CALL   run   
297F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2987   CD 18 0B               CALL   flushBuffer   
298A   CD 90 0B               CALL   printStr   
298D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299A   E1                     POP   hl   
299B   E5                     PUSH   hl   
299C   E5                     PUSH   hl   
299D   CD AF 0C               CALL   run   
29A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29AF   CD 18 0B               CALL   flushBuffer   
29B2   76                     HALT      
29B3                EXPECTM_2754S79:      
29B3   E1                     POP   HL   
29B4                          ;*Macro unroll:  test ": 0#", $0000
29B4   31 00 4C               LD   SP,STACK   
29B7   CD D8 0B               CALL   coldInit   
29BA   CD 39 4A               CALL   execStr   
29BD   3A 20 30 23 00         DB   ": 0#",0   
29C2   CD 18 0B               CALL   flushBuffer   
29C5   E1                     POP   HL   
29C6   E5                     PUSH   HL   
29C7   11 00 00               LD   DE,$0000   
29CA   B7                     OR   A   
29CB   ED 52                  SBC   HL,DE   
29CD   7D                     LD   A,L   
29CE   B4                     OR   H   
29CF   CA 2E 2A               JP   Z,expectM_2755S80   
29D2   CD 90 0B               CALL   printStr   
29D5   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
29E0   CD 90 0B               CALL   printStr   
29E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F2   21 00 00               LD   hl,$0000   
29F5   E5                     PUSH   hl   
29F6   E5                     PUSH   hl   
29F7   CD AF 0C               CALL   run   
29FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A02   CD 18 0B               CALL   flushBuffer   
2A05   CD 90 0B               CALL   printStr   
2A08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A15   E1                     POP   hl   
2A16   E5                     PUSH   hl   
2A17   E5                     PUSH   hl   
2A18   CD AF 0C               CALL   run   
2A1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A2A   CD 18 0B               CALL   flushBuffer   
2A2D   76                     HALT      
2A2E                EXPECTM_2755S80:      
2A2E   E1                     POP   HL   
2A2F                          ;*Macro unroll:  test ":a 0#", $0100
2A2F   31 00 4C               LD   SP,STACK   
2A32   CD D8 0B               CALL   coldInit   
2A35   CD 39 4A               CALL   execStr   
2A38   3A 61 20 30 23 00      DB   ":a 0#",0   
2A3E   CD 18 0B               CALL   flushBuffer   
2A41   E1                     POP   HL   
2A42   E5                     PUSH   HL   
2A43   11 00 01               LD   DE,$0100   
2A46   B7                     OR   A   
2A47   ED 52                  SBC   HL,DE   
2A49   7D                     LD   A,L   
2A4A   B4                     OR   H   
2A4B   CA AB 2A               JP   Z,expectM_2756S81   
2A4E   CD 90 0B               CALL   printStr   
2A51   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2A5D   CD 90 0B               CALL   printStr   
2A60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6F   21 00 01               LD   hl,$0100   
2A72   E5                     PUSH   hl   
2A73   E5                     PUSH   hl   
2A74   CD AF 0C               CALL   run   
2A77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A7F   CD 18 0B               CALL   flushBuffer   
2A82   CD 90 0B               CALL   printStr   
2A85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A92   E1                     POP   hl   
2A93   E5                     PUSH   hl   
2A94   E5                     PUSH   hl   
2A95   CD AF 0C               CALL   run   
2A98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AA7   CD 18 0B               CALL   flushBuffer   
2AAA   76                     HALT      
2AAB                EXPECTM_2756S81:      
2AAB   E1                     POP   HL   
2AAC                          ;*Macro unroll:  test ":a: 0#", $0100
2AAC   31 00 4C               LD   SP,STACK   
2AAF   CD D8 0B               CALL   coldInit   
2AB2   CD 39 4A               CALL   execStr   
2AB5   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2ABC   CD 18 0B               CALL   flushBuffer   
2ABF   E1                     POP   HL   
2AC0   E5                     PUSH   HL   
2AC1   11 00 01               LD   DE,$0100   
2AC4   B7                     OR   A   
2AC5   ED 52                  SBC   HL,DE   
2AC7   7D                     LD   A,L   
2AC8   B4                     OR   H   
2AC9   CA 2A 2B               JP   Z,expectM_2757S82   
2ACC   CD 90 0B               CALL   printStr   
2ACF   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2ADC   CD 90 0B               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 00 01               LD   hl,$0100   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD AF 0C               CALL   run   
2AF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFE   CD 18 0B               CALL   flushBuffer   
2B01   CD 90 0B               CALL   printStr   
2B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B11   E1                     POP   hl   
2B12   E5                     PUSH   hl   
2B13   E5                     PUSH   hl   
2B14   CD AF 0C               CALL   run   
2B17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B26   CD 18 0B               CALL   flushBuffer   
2B29   76                     HALT      
2B2A                EXPECTM_2757S82:      
2B2A   E1                     POP   HL   
2B2B                          ;*Macro unroll:  test ":a:b 0#", $0201
2B2B   31 00 4C               LD   SP,STACK   
2B2E   CD D8 0B               CALL   coldInit   
2B31   CD 39 4A               CALL   execStr   
2B34   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
2B3C   CD 18 0B               CALL   flushBuffer   
2B3F   E1                     POP   HL   
2B40   E5                     PUSH   HL   
2B41   11 01 02               LD   DE,$0201   
2B44   B7                     OR   A   
2B45   ED 52                  SBC   HL,DE   
2B47   7D                     LD   A,L   
2B48   B4                     OR   H   
2B49   CA AB 2B               JP   Z,expectM_2758S83   
2B4C   CD 90 0B               CALL   printStr   
2B4F   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2B5D   CD 90 0B               CALL   printStr   
2B60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6F   21 01 02               LD   hl,$0201   
2B72   E5                     PUSH   hl   
2B73   E5                     PUSH   hl   
2B74   CD AF 0C               CALL   run   
2B77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B7F   CD 18 0B               CALL   flushBuffer   
2B82   CD 90 0B               CALL   printStr   
2B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B92   E1                     POP   hl   
2B93   E5                     PUSH   hl   
2B94   E5                     PUSH   hl   
2B95   CD AF 0C               CALL   run   
2B98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BA7   CD 18 0B               CALL   flushBuffer   
2BAA   76                     HALT      
2BAB                EXPECTM_2758S83:      
2BAB   E1                     POP   HL   
2BAC                          ;*Macro unroll:  test "::b 0#", $0101
2BAC   31 00 4C               LD   SP,STACK   
2BAF   CD D8 0B               CALL   coldInit   
2BB2   CD 39 4A               CALL   execStr   
2BB5   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
2BBC   CD 18 0B               CALL   flushBuffer   
2BBF   E1                     POP   HL   
2BC0   E5                     PUSH   HL   
2BC1   11 01 01               LD   DE,$0101   
2BC4   B7                     OR   A   
2BC5   ED 52                  SBC   HL,DE   
2BC7   7D                     LD   A,L   
2BC8   B4                     OR   H   
2BC9   CA 2A 2C               JP   Z,expectM_2759S84   
2BCC   CD 90 0B               CALL   printStr   
2BCF   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2BDC   CD 90 0B               CALL   printStr   
2BDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEE   21 01 01               LD   hl,$0101   
2BF1   E5                     PUSH   hl   
2BF2   E5                     PUSH   hl   
2BF3   CD AF 0C               CALL   run   
2BF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BFE   CD 18 0B               CALL   flushBuffer   
2C01   CD 90 0B               CALL   printStr   
2C04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C11   E1                     POP   hl   
2C12   E5                     PUSH   hl   
2C13   E5                     PUSH   hl   
2C14   CD AF 0C               CALL   run   
2C17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C26   CD 18 0B               CALL   flushBuffer   
2C29   76                     HALT      
2C2A                EXPECTM_2759S84:      
2C2A   E1                     POP   HL   
2C2B                          ;*Macro unroll:  test ":{2};^", 2
2C2B   31 00 4C               LD   SP,STACK   
2C2E   CD D8 0B               CALL   coldInit   
2C31   CD 39 4A               CALL   execStr   
2C34   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
2C3B   CD 18 0B               CALL   flushBuffer   
2C3E   E1                     POP   HL   
2C3F   E5                     PUSH   HL   
2C40   11 02 00               LD   DE,2   
2C43   B7                     OR   A   
2C44   ED 52                  SBC   HL,DE   
2C46   7D                     LD   A,L   
2C47   B4                     OR   H   
2C48   CA A9 2C               JP   Z,expectM_2760S85   
2C4B   CD 90 0B               CALL   printStr   
2C4E   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2C5B   CD 90 0B               CALL   printStr   
2C5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C6D   21 02 00               LD   hl,2   
2C70   E5                     PUSH   hl   
2C71   E5                     PUSH   hl   
2C72   CD AF 0C               CALL   run   
2C75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C7D   CD 18 0B               CALL   flushBuffer   
2C80   CD 90 0B               CALL   printStr   
2C83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C90   E1                     POP   hl   
2C91   E5                     PUSH   hl   
2C92   E5                     PUSH   hl   
2C93   CD AF 0C               CALL   run   
2C96   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CA5   CD 18 0B               CALL   flushBuffer   
2CA8   76                     HALT      
2CA9                EXPECTM_2760S85:      
2CA9   E1                     POP   HL   
2CAA                          ;*Macro unroll:  test ":a{2};^", 2
2CAA   31 00 4C               LD   SP,STACK   
2CAD   CD D8 0B               CALL   coldInit   
2CB0   CD 39 4A               CALL   execStr   
2CB3   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
2CBB   CD 18 0B               CALL   flushBuffer   
2CBE   E1                     POP   HL   
2CBF   E5                     PUSH   HL   
2CC0   11 02 00               LD   DE,2   
2CC3   B7                     OR   A   
2CC4   ED 52                  SBC   HL,DE   
2CC6   7D                     LD   A,L   
2CC7   B4                     OR   H   
2CC8   CA 2A 2D               JP   Z,expectM_2761S86   
2CCB   CD 90 0B               CALL   printStr   
2CCE   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2CDC   CD 90 0B               CALL   printStr   
2CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CEE   21 02 00               LD   hl,2   
2CF1   E5                     PUSH   hl   
2CF2   E5                     PUSH   hl   
2CF3   CD AF 0C               CALL   run   
2CF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CFE   CD 18 0B               CALL   flushBuffer   
2D01   CD 90 0B               CALL   printStr   
2D04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D11   E1                     POP   hl   
2D12   E5                     PUSH   hl   
2D13   E5                     PUSH   hl   
2D14   CD AF 0C               CALL   run   
2D17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D26   CD 18 0B               CALL   flushBuffer   
2D29   76                     HALT      
2D2A                EXPECTM_2761S86:      
2D2A   E1                     POP   HL   
2D2B                          ;*Macro unroll:  test "5 :a{%a};^", 5
2D2B   31 00 4C               LD   SP,STACK   
2D2E   CD D8 0B               CALL   coldInit   
2D31   CD 39 4A               CALL   execStr   
2D34   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
2D3F   CD 18 0B               CALL   flushBuffer   
2D42   E1                     POP   HL   
2D43   E5                     PUSH   HL   
2D44   11 05 00               LD   DE,5   
2D47   B7                     OR   A   
2D48   ED 52                  SBC   HL,DE   
2D4A   7D                     LD   A,L   
2D4B   B4                     OR   H   
2D4C   CA B1 2D               JP   Z,expectM_2762S87   
2D4F   CD 90 0B               CALL   printStr   
2D52   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
2D63   CD 90 0B               CALL   printStr   
2D66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D75   21 05 00               LD   hl,5   
2D78   E5                     PUSH   hl   
2D79   E5                     PUSH   hl   
2D7A   CD AF 0C               CALL   run   
2D7D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D85   CD 18 0B               CALL   flushBuffer   
2D88   CD 90 0B               CALL   printStr   
2D8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D98   E1                     POP   hl   
2D99   E5                     PUSH   hl   
2D9A   E5                     PUSH   hl   
2D9B   CD AF 0C               CALL   run   
2D9E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DAD   CD 18 0B               CALL   flushBuffer   
2DB0   76                     HALT      
2DB1                EXPECTM_2762S87:      
2DB1   E1                     POP   HL   
2DB2                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
2DB2   31 00 4C               LD   SP,STACK   
2DB5   CD D8 0B               CALL   coldInit   
2DB8   CD 39 4A               CALL   execStr   
2DBB   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
2DC8   CD 18 0B               CALL   flushBuffer   
2DCB   E1                     POP   HL   
2DCC   E5                     PUSH   HL   
2DCD   11 05 00               LD   DE,5   
2DD0   B7                     OR   A   
2DD1   ED 52                  SBC   HL,DE   
2DD3   7D                     LD   A,L   
2DD4   B4                     OR   H   
2DD5   CA 3C 2E               JP   Z,expectM_2763S88   
2DD8   CD 90 0B               CALL   printStr   
2DDB   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
2DEE   CD 90 0B               CALL   printStr   
2DF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E00   21 05 00               LD   hl,5   
2E03   E5                     PUSH   hl   
2E04   E5                     PUSH   hl   
2E05   CD AF 0C               CALL   run   
2E08   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E10   CD 18 0B               CALL   flushBuffer   
2E13   CD 90 0B               CALL   printStr   
2E16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E23   E1                     POP   hl   
2E24   E5                     PUSH   hl   
2E25   E5                     PUSH   hl   
2E26   CD AF 0C               CALL   run   
2E29   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E38   CD 18 0B               CALL   flushBuffer   
2E3B   76                     HALT      
2E3C                EXPECTM_2763S88:      
2E3C   E1                     POP   HL   
2E3D                          ;*Macro unroll:  test ":a{{2}^};^", 2
2E3D   31 00 4C               LD   SP,STACK   
2E40   CD D8 0B               CALL   coldInit   
2E43   CD 39 4A               CALL   execStr   
2E46   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
2E51   CD 18 0B               CALL   flushBuffer   
2E54   E1                     POP   HL   
2E55   E5                     PUSH   HL   
2E56   11 02 00               LD   DE,2   
2E59   B7                     OR   A   
2E5A   ED 52                  SBC   HL,DE   
2E5C   7D                     LD   A,L   
2E5D   B4                     OR   H   
2E5E   CA C3 2E               JP   Z,expectM_2764S89   
2E61   CD 90 0B               CALL   printStr   
2E64   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2E75   CD 90 0B               CALL   printStr   
2E78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E87   21 02 00               LD   hl,2   
2E8A   E5                     PUSH   hl   
2E8B   E5                     PUSH   hl   
2E8C   CD AF 0C               CALL   run   
2E8F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E97   CD 18 0B               CALL   flushBuffer   
2E9A   CD 90 0B               CALL   printStr   
2E9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EAA   E1                     POP   hl   
2EAB   E5                     PUSH   hl   
2EAC   E5                     PUSH   hl   
2EAD   CD AF 0C               CALL   run   
2EB0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EBF   CD 18 0B               CALL   flushBuffer   
2EC2   76                     HALT      
2EC3                EXPECTM_2764S89:      
2EC3   E1                     POP   HL   
2EC4                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
2EC4   31 00 4C               LD   SP,STACK   
2EC7   CD D8 0B               CALL   coldInit   
2ECA   CD 39 4A               CALL   execStr   
2ECD   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
2EDD   CD 18 0B               CALL   flushBuffer   
2EE0   E1                     POP   HL   
2EE1   E5                     PUSH   HL   
2EE2   11 05 00               LD   DE,5   
2EE5   B7                     OR   A   
2EE6   ED 52                  SBC   HL,DE   
2EE8   7D                     LD   A,L   
2EE9   B4                     OR   H   
2EEA   CA 54 2F               JP   Z,expectM_2765S90   
2EED   CD 90 0B               CALL   printStr   
2EF0   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
2F06   CD 90 0B               CALL   printStr   
2F09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F18   21 05 00               LD   hl,5   
2F1B   E5                     PUSH   hl   
2F1C   E5                     PUSH   hl   
2F1D   CD AF 0C               CALL   run   
2F20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F28   CD 18 0B               CALL   flushBuffer   
2F2B   CD 90 0B               CALL   printStr   
2F2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F3B   E1                     POP   hl   
2F3C   E5                     PUSH   hl   
2F3D   E5                     PUSH   hl   
2F3E   CD AF 0C               CALL   run   
2F41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F50   CD 18 0B               CALL   flushBuffer   
2F53   76                     HALT      
2F54                EXPECTM_2765S90:      
2F54   E1                     POP   HL   
2F55                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
2F55   31 00 4C               LD   SP,STACK   
2F58   CD D8 0B               CALL   coldInit   
2F5B   CD 39 4A               CALL   execStr   
2F5E   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
2F6F   CD 18 0B               CALL   flushBuffer   
2F72   E1                     POP   HL   
2F73   E5                     PUSH   HL   
2F74   11 01 00               LD   DE,1   
2F77   B7                     OR   A   
2F78   ED 52                  SBC   HL,DE   
2F7A   7D                     LD   A,L   
2F7B   B4                     OR   H   
2F7C   CA E7 2F               JP   Z,expectM_2766S91   
2F7F   CD 90 0B               CALL   printStr   
2F82   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
2F99   CD 90 0B               CALL   printStr   
2F9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FAB   21 01 00               LD   hl,1   
2FAE   E5                     PUSH   hl   
2FAF   E5                     PUSH   hl   
2FB0   CD AF 0C               CALL   run   
2FB3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FBB   CD 18 0B               CALL   flushBuffer   
2FBE   CD 90 0B               CALL   printStr   
2FC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FCE   E1                     POP   hl   
2FCF   E5                     PUSH   hl   
2FD0   E5                     PUSH   hl   
2FD1   CD AF 0C               CALL   run   
2FD4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FE3   CD 18 0B               CALL   flushBuffer   
2FE6   76                     HALT      
2FE7                EXPECTM_2766S91:      
2FE7   E1                     POP   HL   
2FE8                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
2FE8   31 00 4C               LD   SP,STACK   
2FEB   CD D8 0B               CALL   coldInit   
2FEE   CD 39 4A               CALL   execStr   
2FF1   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
3005   CD 18 0B               CALL   flushBuffer   
3008   E1                     POP   HL   
3009   E5                     PUSH   HL   
300A   11 07 00               LD   DE,7   
300D   B7                     OR   A   
300E   ED 52                  SBC   HL,DE   
3010   7D                     LD   A,L   
3011   B4                     OR   H   
3012   CA 80 30               JP   Z,expectM_2767S92   
3015   CD 90 0B               CALL   printStr   
3018   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3032   CD 90 0B               CALL   printStr   
3035   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3044   21 07 00               LD   hl,7   
3047   E5                     PUSH   hl   
3048   E5                     PUSH   hl   
3049   CD AF 0C               CALL   run   
304C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3054   CD 18 0B               CALL   flushBuffer   
3057   CD 90 0B               CALL   printStr   
305A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3067   E1                     POP   hl   
3068   E5                     PUSH   hl   
3069   E5                     PUSH   hl   
306A   CD AF 0C               CALL   run   
306D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
307C   CD 18 0B               CALL   flushBuffer   
307F   76                     HALT      
3080                EXPECTM_2767S92:      
3080   E1                     POP   HL   
3081                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3081   31 00 4C               LD   SP,STACK   
3084   CD D8 0B               CALL   coldInit   
3087   CD 39 4A               CALL   execStr   
308A   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
30A0   CD 18 0B               CALL   flushBuffer   
30A3   E1                     POP   HL   
30A4   E5                     PUSH   HL   
30A5   11 06 00               LD   DE,6   
30A8   B7                     OR   A   
30A9   ED 52                  SBC   HL,DE   
30AB   7D                     LD   A,L   
30AC   B4                     OR   H   
30AD   CA 1D 31               JP   Z,expectM_2768S93   
30B0   CD 90 0B               CALL   printStr   
30B3   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
30CF   CD 90 0B               CALL   printStr   
30D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E1   21 06 00               LD   hl,6   
30E4   E5                     PUSH   hl   
30E5   E5                     PUSH   hl   
30E6   CD AF 0C               CALL   run   
30E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F1   CD 18 0B               CALL   flushBuffer   
30F4   CD 90 0B               CALL   printStr   
30F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3104   E1                     POP   hl   
3105   E5                     PUSH   hl   
3106   E5                     PUSH   hl   
3107   CD AF 0C               CALL   run   
310A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3119   CD 18 0B               CALL   flushBuffer   
311C   76                     HALT      
311D                EXPECTM_2768S93:      
311D   E1                     POP   HL   
311E                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
311E   31 00 4C               LD   SP,STACK   
3121   CD D8 0B               CALL   coldInit   
3124   CD 39 4A               CALL   execStr   
3127   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
3136   CD 18 0B               CALL   flushBuffer   
3139   E1                     POP   HL   
313A   E5                     PUSH   HL   
313B   11 02 00               LD   DE,2   
313E   B7                     OR   A   
313F   ED 52                  SBC   HL,DE   
3141   7D                     LD   A,L   
3142   B4                     OR   H   
3143   CA AC 31               JP   Z,expectM_2769S94   
3146   CD 90 0B               CALL   printStr   
3149   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
315E   CD 90 0B               CALL   printStr   
3161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3170   21 02 00               LD   hl,2   
3173   E5                     PUSH   hl   
3174   E5                     PUSH   hl   
3175   CD AF 0C               CALL   run   
3178   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3180   CD 18 0B               CALL   flushBuffer   
3183   CD 90 0B               CALL   printStr   
3186   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3193   E1                     POP   hl   
3194   E5                     PUSH   hl   
3195   E5                     PUSH   hl   
3196   CD AF 0C               CALL   run   
3199   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31A8   CD 18 0B               CALL   flushBuffer   
31AB   76                     HALT      
31AC                EXPECTM_2769S94:      
31AC   E1                     POP   HL   
31AD                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
31AD   31 00 4C               LD   SP,STACK   
31B0   CD D8 0B               CALL   coldInit   
31B3   CD 39 4A               CALL   execStr   
31B6   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
31C8   CD 18 0B               CALL   flushBuffer   
31CB   E1                     POP   HL   
31CC   E5                     PUSH   HL   
31CD   11 01 00               LD   DE,1   
31D0   B7                     OR   A   
31D1   ED 52                  SBC   HL,DE   
31D3   7D                     LD   A,L   
31D4   B4                     OR   H   
31D5   CA 41 32               JP   Z,expectM_2770S95   
31D8   CD 90 0B               CALL   printStr   
31DB   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
31F3   CD 90 0B               CALL   printStr   
31F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3205   21 01 00               LD   hl,1   
3208   E5                     PUSH   hl   
3209   E5                     PUSH   hl   
320A   CD AF 0C               CALL   run   
320D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3215   CD 18 0B               CALL   flushBuffer   
3218   CD 90 0B               CALL   printStr   
321B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3228   E1                     POP   hl   
3229   E5                     PUSH   hl   
322A   E5                     PUSH   hl   
322B   CD AF 0C               CALL   run   
322E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
323D   CD 18 0B               CALL   flushBuffer   
3240   76                     HALT      
3241                EXPECTM_2770S95:      
3241   E1                     POP   HL   
3242                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3242   31 00 4C               LD   SP,STACK   
3245   CD D8 0B               CALL   coldInit   
3248   CD 39 4A               CALL   execStr   
324B   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
325E   CD 18 0B               CALL   flushBuffer   
3261   E1                     POP   HL   
3262   E5                     PUSH   HL   
3263   11 02 00               LD   DE,2   
3266   B7                     OR   A   
3267   ED 52                  SBC   HL,DE   
3269   7D                     LD   A,L   
326A   B4                     OR   H   
326B   CA D8 32               JP   Z,expectM_2771S96   
326E   CD 90 0B               CALL   printStr   
3271   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
328A   CD 90 0B               CALL   printStr   
328D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
329C   21 02 00               LD   hl,2   
329F   E5                     PUSH   hl   
32A0   E5                     PUSH   hl   
32A1   CD AF 0C               CALL   run   
32A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32AC   CD 18 0B               CALL   flushBuffer   
32AF   CD 90 0B               CALL   printStr   
32B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32BF   E1                     POP   hl   
32C0   E5                     PUSH   hl   
32C1   E5                     PUSH   hl   
32C2   CD AF 0C               CALL   run   
32C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32D4   CD 18 0B               CALL   flushBuffer   
32D7   76                     HALT      
32D8                EXPECTM_2771S96:      
32D8   E1                     POP   HL   
32D9                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
32D9   31 00 4C               LD   SP,STACK   
32DC   CD D8 0B               CALL   coldInit   
32DF   CD 39 4A               CALL   execStr   
32E2   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
32F6   CD 18 0B               CALL   flushBuffer   
32F9   E1                     POP   HL   
32FA   E5                     PUSH   HL   
32FB   11 02 00               LD   DE,2   
32FE   B7                     OR   A   
32FF   ED 52                  SBC   HL,DE   
3301   7D                     LD   A,L   
3302   B4                     OR   H   
3303   CA 71 33               JP   Z,expectM_2772S97   
3306   CD 90 0B               CALL   printStr   
3309   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
3323   CD 90 0B               CALL   printStr   
3326   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3335   21 02 00               LD   hl,2   
3338   E5                     PUSH   hl   
3339   E5                     PUSH   hl   
333A   CD AF 0C               CALL   run   
333D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3345   CD 18 0B               CALL   flushBuffer   
3348   CD 90 0B               CALL   printStr   
334B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3358   E1                     POP   hl   
3359   E5                     PUSH   hl   
335A   E5                     PUSH   hl   
335B   CD AF 0C               CALL   run   
335E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
336D   CD 18 0B               CALL   flushBuffer   
3370   76                     HALT      
3371                EXPECTM_2772S97:      
3371   E1                     POP   HL   
3372                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3372   31 00 4C               LD   SP,STACK   
3375   CD D8 0B               CALL   coldInit   
3378   CD 39 4A               CALL   execStr   
337B   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
338E   CD 18 0B               CALL   flushBuffer   
3391   E1                     POP   HL   
3392   E5                     PUSH   HL   
3393   11 02 00               LD   DE,2   
3396   B7                     OR   A   
3397   ED 52                  SBC   HL,DE   
3399   7D                     LD   A,L   
339A   B4                     OR   H   
339B   CA 08 34               JP   Z,expectM_2773S98   
339E   CD 90 0B               CALL   printStr   
33A1   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
33BA   CD 90 0B               CALL   printStr   
33BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33CC   21 02 00               LD   hl,2   
33CF   E5                     PUSH   hl   
33D0   E5                     PUSH   hl   
33D1   CD AF 0C               CALL   run   
33D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33DC   CD 18 0B               CALL   flushBuffer   
33DF   CD 90 0B               CALL   printStr   
33E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33EF   E1                     POP   hl   
33F0   E5                     PUSH   hl   
33F1   E5                     PUSH   hl   
33F2   CD AF 0C               CALL   run   
33F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3404   CD 18 0B               CALL   flushBuffer   
3407   76                     HALT      
3408                EXPECTM_2773S98:      
3408   E1                     POP   HL   
3409                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
3409   31 00 4C               LD   SP,STACK   
340C   CD D8 0B               CALL   coldInit   
340F   CD 39 4A               CALL   execStr   
3412   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
342C   CD 18 0B               CALL   flushBuffer   
342F   E1                     POP   HL   
3430   E5                     PUSH   HL   
3431   11 05 00               LD   DE,5   
3434   B7                     OR   A   
3435   ED 52                  SBC   HL,DE   
3437   7D                     LD   A,L   
3438   B4                     OR   H   
3439   CA AD 34               JP   Z,expectM_2774S99   
343C   CD 90 0B               CALL   printStr   
343F   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
345F   CD 90 0B               CALL   printStr   
3462   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3471   21 05 00               LD   hl,5   
3474   E5                     PUSH   hl   
3475   E5                     PUSH   hl   
3476   CD AF 0C               CALL   run   
3479   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3481   CD 18 0B               CALL   flushBuffer   
3484   CD 90 0B               CALL   printStr   
3487   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3494   E1                     POP   hl   
3495   E5                     PUSH   hl   
3496   E5                     PUSH   hl   
3497   CD AF 0C               CALL   run   
349A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34A9   CD 18 0B               CALL   flushBuffer   
34AC   76                     HALT      
34AD                EXPECTM_2774S99:      
34AD   E1                     POP   HL   
34AE                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
34AE   31 00 4C               LD   SP,STACK   
34B1   CD D8 0B               CALL   coldInit   
34B4   CD 39 4A               CALL   execStr   
34B7   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
34C8   CD 18 0B               CALL   flushBuffer   
34CB   E1                     POP   HL   
34CC   E5                     PUSH   HL   
34CD   11 02 00               LD   DE,2   
34D0   B7                     OR   A   
34D1   ED 52                  SBC   HL,DE   
34D3   7D                     LD   A,L   
34D4   B4                     OR   H   
34D5   CA 40 35               JP   Z,expectM_2775S100   
34D8   CD 90 0B               CALL   printStr   
34DB   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
34F2   CD 90 0B               CALL   printStr   
34F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3504   21 02 00               LD   hl,2   
3507   E5                     PUSH   hl   
3508   E5                     PUSH   hl   
3509   CD AF 0C               CALL   run   
350C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3514   CD 18 0B               CALL   flushBuffer   
3517   CD 90 0B               CALL   printStr   
351A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3527   E1                     POP   hl   
3528   E5                     PUSH   hl   
3529   E5                     PUSH   hl   
352A   CD AF 0C               CALL   run   
352D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
353C   CD 18 0B               CALL   flushBuffer   
353F   76                     HALT      
3540                EXPECTM_2775S100:      
3540   E1                     POP   HL   
3541                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3541   31 00 4C               LD   SP,STACK   
3544   CD D8 0B               CALL   coldInit   
3547   CD 39 4A               CALL   execStr   
354A   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3562   CD 18 0B               CALL   flushBuffer   
3565   E1                     POP   HL   
3566   E5                     PUSH   HL   
3567   11 64 00               LD   DE,100   
356A   B7                     OR   A   
356B   ED 52                  SBC   HL,DE   
356D   7D                     LD   A,L   
356E   B4                     OR   H   
356F   CA E1 35               JP   Z,expectM_2776S101   
3572   CD 90 0B               CALL   printStr   
3575   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3593   CD 90 0B               CALL   printStr   
3596   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35A5   21 64 00               LD   hl,100   
35A8   E5                     PUSH   hl   
35A9   E5                     PUSH   hl   
35AA   CD AF 0C               CALL   run   
35AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35B5   CD 18 0B               CALL   flushBuffer   
35B8   CD 90 0B               CALL   printStr   
35BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35C8   E1                     POP   hl   
35C9   E5                     PUSH   hl   
35CA   E5                     PUSH   hl   
35CB   CD AF 0C               CALL   run   
35CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35DD   CD 18 0B               CALL   flushBuffer   
35E0   76                     HALT      
35E1                EXPECTM_2776S101:      
35E1   E1                     POP   HL   
35E2                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
35E2   31 00 4C               LD   SP,STACK   
35E5   CD D8 0B               CALL   coldInit   
35E8   CD 39 4A               CALL   execStr   
35EB   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3604   CD 18 0B               CALL   flushBuffer   
3607   E1                     POP   HL   
3608   E5                     PUSH   HL   
3609   11 01 00               LD   DE,1   
360C   B7                     OR   A   
360D   ED 52                  SBC   HL,DE   
360F   7D                     LD   A,L   
3610   B4                     OR   H   
3611   CA 84 36               JP   Z,expectM_2777S102   
3614   CD 90 0B               CALL   printStr   
3617   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3636   CD 90 0B               CALL   printStr   
3639   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3648   21 01 00               LD   hl,1   
364B   E5                     PUSH   hl   
364C   E5                     PUSH   hl   
364D   CD AF 0C               CALL   run   
3650   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3658   CD 18 0B               CALL   flushBuffer   
365B   CD 90 0B               CALL   printStr   
365E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
366B   E1                     POP   hl   
366C   E5                     PUSH   hl   
366D   E5                     PUSH   hl   
366E   CD AF 0C               CALL   run   
3671   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3680   CD 18 0B               CALL   flushBuffer   
3683   76                     HALT      
3684                EXPECTM_2777S102:      
3684   E1                     POP   HL   
3685                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3685   31 00 4C               LD   SP,STACK   
3688   CD D8 0B               CALL   coldInit   
368B   CD 39 4A               CALL   execStr   
368E   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
36A8   CD 18 0B               CALL   flushBuffer   
36AB   E1                     POP   HL   
36AC   E5                     PUSH   HL   
36AD   11 02 00               LD   DE,2   
36B0   B7                     OR   A   
36B1   ED 52                  SBC   HL,DE   
36B3   7D                     LD   A,L   
36B4   B4                     OR   H   
36B5   CA 29 37               JP   Z,expectM_2778S103   
36B8   CD 90 0B               CALL   printStr   
36BB   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
36DB   CD 90 0B               CALL   printStr   
36DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36ED   21 02 00               LD   hl,2   
36F0   E5                     PUSH   hl   
36F1   E5                     PUSH   hl   
36F2   CD AF 0C               CALL   run   
36F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36FD   CD 18 0B               CALL   flushBuffer   
3700   CD 90 0B               CALL   printStr   
3703   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3710   E1                     POP   hl   
3711   E5                     PUSH   hl   
3712   E5                     PUSH   hl   
3713   CD AF 0C               CALL   run   
3716   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3725   CD 18 0B               CALL   flushBuffer   
3728   76                     HALT      
3729                EXPECTM_2778S103:      
3729   E1                     POP   HL   
372A                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
372A   31 00 4C               LD   SP,STACK   
372D   CD D8 0B               CALL   coldInit   
3730   CD 39 4A               CALL   execStr   
3733   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3752   CD 18 0B               CALL   flushBuffer   
3755   E1                     POP   HL   
3756   E5                     PUSH   HL   
3757   11 0B 00               LD   DE,11   
375A   B7                     OR   A   
375B   ED 52                  SBC   HL,DE   
375D   7D                     LD   A,L   
375E   B4                     OR   H   
375F   CA D8 37               JP   Z,expectM_2779S104   
3762   CD 90 0B               CALL   printStr   
3765   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
378A   CD 90 0B               CALL   printStr   
378D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
379C   21 0B 00               LD   hl,11   
379F   E5                     PUSH   hl   
37A0   E5                     PUSH   hl   
37A1   CD AF 0C               CALL   run   
37A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37AC   CD 18 0B               CALL   flushBuffer   
37AF   CD 90 0B               CALL   printStr   
37B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37BF   E1                     POP   hl   
37C0   E5                     PUSH   hl   
37C1   E5                     PUSH   hl   
37C2   CD AF 0C               CALL   run   
37C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37D4   CD 18 0B               CALL   flushBuffer   
37D7   76                     HALT      
37D8                EXPECTM_2779S104:      
37D8   E1                     POP   HL   
37D9                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
37D9   31 00 4C               LD   SP,STACK   
37DC   CD D8 0B               CALL   coldInit   
37DF   CD 39 4A               CALL   execStr   
37E2   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3801   CD 18 0B               CALL   flushBuffer   
3804   E1                     POP   HL   
3805   E5                     PUSH   HL   
3806   11 15 00               LD   DE,21   
3809   B7                     OR   A   
380A   ED 52                  SBC   HL,DE   
380C   7D                     LD   A,L   
380D   B4                     OR   H   
380E   CA 87 38               JP   Z,expectM_2780S105   
3811   CD 90 0B               CALL   printStr   
3814   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3839   CD 90 0B               CALL   printStr   
383C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
384B   21 15 00               LD   hl,21   
384E   E5                     PUSH   hl   
384F   E5                     PUSH   hl   
3850   CD AF 0C               CALL   run   
3853   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
385B   CD 18 0B               CALL   flushBuffer   
385E   CD 90 0B               CALL   printStr   
3861   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
386E   E1                     POP   hl   
386F   E5                     PUSH   hl   
3870   E5                     PUSH   hl   
3871   CD AF 0C               CALL   run   
3874   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3883   CD 18 0B               CALL   flushBuffer   
3886   76                     HALT      
3887                EXPECTM_2780S105:      
3887   E1                     POP   HL   
3888                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3888   31 00 4C               LD   SP,STACK   
388B   CD D8 0B               CALL   coldInit   
388E   CD 39 4A               CALL   execStr   
3891   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
389F   CD 18 0B               CALL   flushBuffer   
38A2   E1                     POP   HL   
38A3   E5                     PUSH   HL   
38A4   11 14 00               LD   DE,20   
38A7   B7                     OR   A   
38A8   ED 52                  SBC   HL,DE   
38AA   7D                     LD   A,L   
38AB   B4                     OR   H   
38AC   CA 14 39               JP   Z,expectM_2781S106   
38AF   CD 90 0B               CALL   printStr   
38B2   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
38C6   CD 90 0B               CALL   printStr   
38C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D8   21 14 00               LD   hl,20   
38DB   E5                     PUSH   hl   
38DC   E5                     PUSH   hl   
38DD   CD AF 0C               CALL   run   
38E0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38E8   CD 18 0B               CALL   flushBuffer   
38EB   CD 90 0B               CALL   printStr   
38EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38FB   E1                     POP   hl   
38FC   E5                     PUSH   hl   
38FD   E5                     PUSH   hl   
38FE   CD AF 0C               CALL   run   
3901   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3910   CD 18 0B               CALL   flushBuffer   
3913   76                     HALT      
3914                EXPECTM_2781S106:      
3914   E1                     POP   HL   
3915                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3915   31 00 4C               LD   SP,STACK   
3918   CD D8 0B               CALL   coldInit   
391B   CD 39 4A               CALL   execStr   
391E   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
392F   CD 18 0B               CALL   flushBuffer   
3932   E1                     POP   HL   
3933   E5                     PUSH   HL   
3934   11 04 00               LD   DE,4   
3937   B7                     OR   A   
3938   ED 52                  SBC   HL,DE   
393A   7D                     LD   A,L   
393B   B4                     OR   H   
393C   CA A7 39               JP   Z,expectM_2782S107   
393F   CD 90 0B               CALL   printStr   
3942   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3959   CD 90 0B               CALL   printStr   
395C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
396B   21 04 00               LD   hl,4   
396E   E5                     PUSH   hl   
396F   E5                     PUSH   hl   
3970   CD AF 0C               CALL   run   
3973   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
397B   CD 18 0B               CALL   flushBuffer   
397E   CD 90 0B               CALL   printStr   
3981   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
398E   E1                     POP   hl   
398F   E5                     PUSH   hl   
3990   E5                     PUSH   hl   
3991   CD AF 0C               CALL   run   
3994   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39A3   CD 18 0B               CALL   flushBuffer   
39A6   76                     HALT      
39A7                EXPECTM_2782S107:      
39A7   E1                     POP   HL   
39A8                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
39A8   31 00 4C               LD   SP,STACK   
39AB   CD D8 0B               CALL   coldInit   
39AE   CD 39 4A               CALL   execStr   
39B1   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
39BF   CD 18 0B               CALL   flushBuffer   
39C2   E1                     POP   HL   
39C3   E5                     PUSH   HL   
39C4   11 02 00               LD   DE,2   
39C7   B7                     OR   A   
39C8   ED 52                  SBC   HL,DE   
39CA   7D                     LD   A,L   
39CB   B4                     OR   H   
39CC   CA 34 3A               JP   Z,expectM_2783S108   
39CF   CD 90 0B               CALL   printStr   
39D2   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
39E6   CD 90 0B               CALL   printStr   
39E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F8   21 02 00               LD   hl,2   
39FB   E5                     PUSH   hl   
39FC   E5                     PUSH   hl   
39FD   CD AF 0C               CALL   run   
3A00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A08   CD 18 0B               CALL   flushBuffer   
3A0B   CD 90 0B               CALL   printStr   
3A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A1B   E1                     POP   hl   
3A1C   E5                     PUSH   hl   
3A1D   E5                     PUSH   hl   
3A1E   CD AF 0C               CALL   run   
3A21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A30   CD 18 0B               CALL   flushBuffer   
3A33   76                     HALT      
3A34                EXPECTM_2783S108:      
3A34   E1                     POP   HL   
3A35                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3A35   31 00 4C               LD   SP,STACK   
3A38   CD D8 0B               CALL   coldInit   
3A3B   CD 39 4A               CALL   execStr   
3A3E   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
3A52   CD 18 0B               CALL   flushBuffer   
3A55   E1                     POP   HL   
3A56   E5                     PUSH   HL   
3A57   11 42 00               LD   DE,66   
3A5A   B7                     OR   A   
3A5B   ED 52                  SBC   HL,DE   
3A5D   7D                     LD   A,L   
3A5E   B4                     OR   H   
3A5F   CA CD 3A               JP   Z,expectM_2784S109   
3A62   CD 90 0B               CALL   printStr   
3A65   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3A7F   CD 90 0B               CALL   printStr   
3A82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A91   21 42 00               LD   hl,66   
3A94   E5                     PUSH   hl   
3A95   E5                     PUSH   hl   
3A96   CD AF 0C               CALL   run   
3A99   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AA1   CD 18 0B               CALL   flushBuffer   
3AA4   CD 90 0B               CALL   printStr   
3AA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AB4   E1                     POP   hl   
3AB5   E5                     PUSH   hl   
3AB6   E5                     PUSH   hl   
3AB7   CD AF 0C               CALL   run   
3ABA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AC9   CD 18 0B               CALL   flushBuffer   
3ACC   76                     HALT      
3ACD                EXPECTM_2784S109:      
3ACD   E1                     POP   HL   
3ACE                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3ACE   31 00 4C               LD   SP,STACK   
3AD1   CD D8 0B               CALL   coldInit   
3AD4   CD 39 4A               CALL   execStr   
3AD7   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3AEB   CD 18 0B               CALL   flushBuffer   
3AEE   E1                     POP   HL   
3AEF   E5                     PUSH   HL   
3AF0   11 0A 00               LD   DE,10   
3AF3   B7                     OR   A   
3AF4   ED 52                  SBC   HL,DE   
3AF6   7D                     LD   A,L   
3AF7   B4                     OR   H   
3AF8   CA 66 3B               JP   Z,expectM_2785S110   
3AFB   CD 90 0B               CALL   printStr   
3AFE   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3B18   CD 90 0B               CALL   printStr   
3B1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B2A   21 0A 00               LD   hl,10   
3B2D   E5                     PUSH   hl   
3B2E   E5                     PUSH   hl   
3B2F   CD AF 0C               CALL   run   
3B32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B3A   CD 18 0B               CALL   flushBuffer   
3B3D   CD 90 0B               CALL   printStr   
3B40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B4D   E1                     POP   hl   
3B4E   E5                     PUSH   hl   
3B4F   E5                     PUSH   hl   
3B50   CD AF 0C               CALL   run   
3B53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B62   CD 18 0B               CALL   flushBuffer   
3B65   76                     HALT      
3B66                EXPECTM_2785S110:      
3B66   E1                     POP   HL   
3B67                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3B67   31 00 4C               LD   SP,STACK   
3B6A   CD D8 0B               CALL   coldInit   
3B6D   CD 39 4A               CALL   execStr   
3B70   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
3B8D   CD 18 0B               CALL   flushBuffer   
3B90   E1                     POP   HL   
3B91   E5                     PUSH   HL   
3B92   11 0A 00               LD   DE,10   
3B95   B7                     OR   A   
3B96   ED 52                  SBC   HL,DE   
3B98   7D                     LD   A,L   
3B99   B4                     OR   H   
3B9A   CA 11 3C               JP   Z,expectM_2786S111   
3B9D   CD 90 0B               CALL   printStr   
3BA0   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3BC3   CD 90 0B               CALL   printStr   
3BC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BD5   21 0A 00               LD   hl,10   
3BD8   E5                     PUSH   hl   
3BD9   E5                     PUSH   hl   
3BDA   CD AF 0C               CALL   run   
3BDD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BE5   CD 18 0B               CALL   flushBuffer   
3BE8   CD 90 0B               CALL   printStr   
3BEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BF8   E1                     POP   hl   
3BF9   E5                     PUSH   hl   
3BFA   E5                     PUSH   hl   
3BFB   CD AF 0C               CALL   run   
3BFE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C0D   CD 18 0B               CALL   flushBuffer   
3C10   76                     HALT      
3C11                EXPECTM_2786S111:      
3C11   E1                     POP   HL   
3C12                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3C12   31 00 4C               LD   SP,STACK   
3C15   CD D8 0B               CALL   coldInit   
3C18   CD 39 4A               CALL   execStr   
3C1B   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3C3C   CD 18 0B               CALL   flushBuffer   
3C3F   E1                     POP   HL   
3C40   E5                     PUSH   HL   
3C41   11 0A 00               LD   DE,10   
3C44   B7                     OR   A   
3C45   ED 52                  SBC   HL,DE   
3C47   7D                     LD   A,L   
3C48   B4                     OR   H   
3C49   CA C4 3C               JP   Z,expectM_2787S112   
3C4C   CD 90 0B               CALL   printStr   
3C4F   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3C76   CD 90 0B               CALL   printStr   
3C79   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C88   21 0A 00               LD   hl,10   
3C8B   E5                     PUSH   hl   
3C8C   E5                     PUSH   hl   
3C8D   CD AF 0C               CALL   run   
3C90   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C98   CD 18 0B               CALL   flushBuffer   
3C9B   CD 90 0B               CALL   printStr   
3C9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CAB   E1                     POP   hl   
3CAC   E5                     PUSH   hl   
3CAD   E5                     PUSH   hl   
3CAE   CD AF 0C               CALL   run   
3CB1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CC0   CD 18 0B               CALL   flushBuffer   
3CC3   76                     HALT      
3CC4                EXPECTM_2787S112:      
3CC4   E1                     POP   HL   
3CC5                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3CC5   31 00 4C               LD   SP,STACK   
3CC8   CD D8 0B               CALL   coldInit   
3CCB   CD 39 4A               CALL   execStr   
3CCE   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3CEF   CD 18 0B               CALL   flushBuffer   
3CF2   E1                     POP   HL   
3CF3   E5                     PUSH   HL   
3CF4   11 14 00               LD   DE,20   
3CF7   B7                     OR   A   
3CF8   ED 52                  SBC   HL,DE   
3CFA   7D                     LD   A,L   
3CFB   B4                     OR   H   
3CFC   CA 77 3D               JP   Z,expectM_2788S113   
3CFF   CD 90 0B               CALL   printStr   
3D02   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3D29   CD 90 0B               CALL   printStr   
3D2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D3B   21 14 00               LD   hl,20   
3D3E   E5                     PUSH   hl   
3D3F   E5                     PUSH   hl   
3D40   CD AF 0C               CALL   run   
3D43   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D4B   CD 18 0B               CALL   flushBuffer   
3D4E   CD 90 0B               CALL   printStr   
3D51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D5E   E1                     POP   hl   
3D5F   E5                     PUSH   hl   
3D60   E5                     PUSH   hl   
3D61   CD AF 0C               CALL   run   
3D64   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D73   CD 18 0B               CALL   flushBuffer   
3D76   76                     HALT      
3D77                EXPECTM_2788S113:      
3D77   E1                     POP   HL   
3D78                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3D78   31 00 4C               LD   SP,STACK   
3D7B   CD D8 0B               CALL   coldInit   
3D7E   CD 39 4A               CALL   execStr   
3D81   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3D99   CD 18 0B               CALL   flushBuffer   
3D9C   E1                     POP   HL   
3D9D   E5                     PUSH   HL   
3D9E   11 06 00               LD   DE,6   
3DA1   B7                     OR   A   
3DA2   ED 52                  SBC   HL,DE   
3DA4   7D                     LD   A,L   
3DA5   B4                     OR   H   
3DA6   CA 18 3E               JP   Z,expectM_2789S114   
3DA9   CD 90 0B               CALL   printStr   
3DAC   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3DCA   CD 90 0B               CALL   printStr   
3DCD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DDC   21 06 00               LD   hl,6   
3DDF   E5                     PUSH   hl   
3DE0   E5                     PUSH   hl   
3DE1   CD AF 0C               CALL   run   
3DE4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DEC   CD 18 0B               CALL   flushBuffer   
3DEF   CD 90 0B               CALL   printStr   
3DF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DFF   E1                     POP   hl   
3E00   E5                     PUSH   hl   
3E01   E5                     PUSH   hl   
3E02   CD AF 0C               CALL   run   
3E05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E14   CD 18 0B               CALL   flushBuffer   
3E17   76                     HALT      
3E18                EXPECTM_2789S114:      
3E18   E1                     POP   HL   
3E19                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3E19   31 00 4C               LD   SP,STACK   
3E1C   CD D8 0B               CALL   coldInit   
3E1F   CD 39 4A               CALL   execStr   
3E22   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3E3D   CD 18 0B               CALL   flushBuffer   
3E40   E1                     POP   HL   
3E41   E5                     PUSH   HL   
3E42   11 02 00               LD   DE,2   
3E45   B7                     OR   A   
3E46   ED 52                  SBC   HL,DE   
3E48   7D                     LD   A,L   
3E49   B4                     OR   H   
3E4A   CA BF 3E               JP   Z,expectM_2790S115   
3E4D   CD 90 0B               CALL   printStr   
3E50   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3E71   CD 90 0B               CALL   printStr   
3E74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E83   21 02 00               LD   hl,2   
3E86   E5                     PUSH   hl   
3E87   E5                     PUSH   hl   
3E88   CD AF 0C               CALL   run   
3E8B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E93   CD 18 0B               CALL   flushBuffer   
3E96   CD 90 0B               CALL   printStr   
3E99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EA6   E1                     POP   hl   
3EA7   E5                     PUSH   hl   
3EA8   E5                     PUSH   hl   
3EA9   CD AF 0C               CALL   run   
3EAC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EBB   CD 18 0B               CALL   flushBuffer   
3EBE   76                     HALT      
3EBF                EXPECTM_2790S115:      
3EBF   E1                     POP   HL   
3EC0                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3EC0   31 00 4C               LD   SP,STACK   
3EC3   CD D8 0B               CALL   coldInit   
3EC6   CD 39 4A               CALL   execStr   
3EC9   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3EEF   CD 18 0B               CALL   flushBuffer   
3EF2   E1                     POP   HL   
3EF3   E5                     PUSH   HL   
3EF4   11 0A 00               LD   DE,10   
3EF7   B7                     OR   A   
3EF8   ED 52                  SBC   HL,DE   
3EFA   7D                     LD   A,L   
3EFB   B4                     OR   H   
3EFC   CA 7C 3F               JP   Z,expectM_2791S116   
3EFF   CD 90 0B               CALL   printStr   
3F02   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3F2E   CD 90 0B               CALL   printStr   
3F31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F40   21 0A 00               LD   hl,10   
3F43   E5                     PUSH   hl   
3F44   E5                     PUSH   hl   
3F45   CD AF 0C               CALL   run   
3F48   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F50   CD 18 0B               CALL   flushBuffer   
3F53   CD 90 0B               CALL   printStr   
3F56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F63   E1                     POP   hl   
3F64   E5                     PUSH   hl   
3F65   E5                     PUSH   hl   
3F66   CD AF 0C               CALL   run   
3F69   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F78   CD 18 0B               CALL   flushBuffer   
3F7B   76                     HALT      
3F7C                EXPECTM_2791S116:      
3F7C   E1                     POP   HL   
3F7D                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
3F7D   31 00 4C               LD   SP,STACK   
3F80   CD D8 0B               CALL   coldInit   
3F83   CD 39 4A               CALL   execStr   
3F86   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
3FB3   CD 18 0B               CALL   flushBuffer   
3FB6   E1                     POP   HL   
3FB7   E5                     PUSH   HL   
3FB8   11 06 00               LD   DE,6   
3FBB   B7                     OR   A   
3FBC   ED 52                  SBC   HL,DE   
3FBE   7D                     LD   A,L   
3FBF   B4                     OR   H   
3FC0   CA 47 40               JP   Z,expectM_2792S117   
3FC3   CD 90 0B               CALL   printStr   
3FC6   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
3FF9   CD 90 0B               CALL   printStr   
3FFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
400B   21 06 00               LD   hl,6   
400E   E5                     PUSH   hl   
400F   E5                     PUSH   hl   
4010   CD AF 0C               CALL   run   
4013   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
401B   CD 18 0B               CALL   flushBuffer   
401E   CD 90 0B               CALL   printStr   
4021   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
402E   E1                     POP   hl   
402F   E5                     PUSH   hl   
4030   E5                     PUSH   hl   
4031   CD AF 0C               CALL   run   
4034   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4043   CD 18 0B               CALL   flushBuffer   
4046   76                     HALT      
4047                EXPECTM_2792S117:      
4047   E1                     POP   HL   
4048                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4048   31 00 4C               LD   SP,STACK   
404B   CD D8 0B               CALL   coldInit   
404E   CD 39 4A               CALL   execStr   
4051   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
405D   CD 18 0B               CALL   flushBuffer   
4060   E1                     POP   HL   
4061   E5                     PUSH   HL   
4062   11 00 00               LD   DE,NUL   
4065   B7                     OR   A   
4066   ED 52                  SBC   HL,DE   
4068   7D                     LD   A,L   
4069   B4                     OR   H   
406A   CA D0 40               JP   Z,expectM_2793S118   
406D   CD 90 0B               CALL   printStr   
4070   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4082   CD 90 0B               CALL   printStr   
4085   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4094   21 00 00               LD   hl,NUL   
4097   E5                     PUSH   hl   
4098   E5                     PUSH   hl   
4099   CD AF 0C               CALL   run   
409C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40A4   CD 18 0B               CALL   flushBuffer   
40A7   CD 90 0B               CALL   printStr   
40AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40B7   E1                     POP   hl   
40B8   E5                     PUSH   hl   
40B9   E5                     PUSH   hl   
40BA   CD AF 0C               CALL   run   
40BD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40CC   CD 18 0B               CALL   flushBuffer   
40CF   76                     HALT      
40D0                EXPECTM_2793S118:      
40D0   E1                     POP   HL   
40D1                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
40D1   31 00 4C               LD   SP,STACK   
40D4   CD D8 0B               CALL   coldInit   
40D7   CD 39 4A               CALL   execStr   
40DA   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
40E6   CD 18 0B               CALL   flushBuffer   
40E9   E1                     POP   HL   
40EA   E5                     PUSH   HL   
40EB   11 00 00               LD   DE,NUL   
40EE   B7                     OR   A   
40EF   ED 52                  SBC   HL,DE   
40F1   7D                     LD   A,L   
40F2   B4                     OR   H   
40F3   CA 59 41               JP   Z,expectM_2794S119   
40F6   CD 90 0B               CALL   printStr   
40F9   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
410B   CD 90 0B               CALL   printStr   
410E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
411D   21 00 00               LD   hl,NUL   
4120   E5                     PUSH   hl   
4121   E5                     PUSH   hl   
4122   CD AF 0C               CALL   run   
4125   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
412D   CD 18 0B               CALL   flushBuffer   
4130   CD 90 0B               CALL   printStr   
4133   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4140   E1                     POP   hl   
4141   E5                     PUSH   hl   
4142   E5                     PUSH   hl   
4143   CD AF 0C               CALL   run   
4146   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4155   CD 18 0B               CALL   flushBuffer   
4158   76                     HALT      
4159                EXPECTM_2794S119:      
4159   E1                     POP   HL   
415A                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
415A   31 00 4C               LD   SP,STACK   
415D   CD D8 0B               CALL   coldInit   
4160   CD 39 4A               CALL   execStr   
4163   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
416F   CD 18 0B               CALL   flushBuffer   
4172   E1                     POP   HL   
4173   E5                     PUSH   HL   
4174   11 00 00               LD   DE,NUL   
4177   B7                     OR   A   
4178   ED 52                  SBC   HL,DE   
417A   7D                     LD   A,L   
417B   B4                     OR   H   
417C   CA E2 41               JP   Z,expectM_2795S120   
417F   CD 90 0B               CALL   printStr   
4182   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4194   CD 90 0B               CALL   printStr   
4197   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41A6   21 00 00               LD   hl,NUL   
41A9   E5                     PUSH   hl   
41AA   E5                     PUSH   hl   
41AB   CD AF 0C               CALL   run   
41AE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41B6   CD 18 0B               CALL   flushBuffer   
41B9   CD 90 0B               CALL   printStr   
41BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41C9   E1                     POP   hl   
41CA   E5                     PUSH   hl   
41CB   E5                     PUSH   hl   
41CC   CD AF 0C               CALL   run   
41CF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41DE   CD 18 0B               CALL   flushBuffer   
41E1   76                     HALT      
41E2                EXPECTM_2795S120:      
41E2   E1                     POP   HL   
41E3                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
41E3   31 00 4C               LD   SP,STACK   
41E6   CD D8 0B               CALL   coldInit   
41E9   CD 39 4A               CALL   execStr   
41EC   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
41F8   CD 18 0B               CALL   flushBuffer   
41FB   E1                     POP   HL   
41FC   E5                     PUSH   HL   
41FD   11 00 00               LD   DE,NUL   
4200   B7                     OR   A   
4201   ED 52                  SBC   HL,DE   
4203   7D                     LD   A,L   
4204   B4                     OR   H   
4205   CA 6B 42               JP   Z,expectM_2796S121   
4208   CD 90 0B               CALL   printStr   
420B   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
421D   CD 90 0B               CALL   printStr   
4220   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
422F   21 00 00               LD   hl,NUL   
4232   E5                     PUSH   hl   
4233   E5                     PUSH   hl   
4234   CD AF 0C               CALL   run   
4237   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
423F   CD 18 0B               CALL   flushBuffer   
4242   CD 90 0B               CALL   printStr   
4245   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4252   E1                     POP   hl   
4253   E5                     PUSH   hl   
4254   E5                     PUSH   hl   
4255   CD AF 0C               CALL   run   
4258   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4267   CD 18 0B               CALL   flushBuffer   
426A   76                     HALT      
426B                EXPECTM_2796S121:      
426B   E1                     POP   HL   
426C                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
426C   31 00 4C               LD   SP,STACK   
426F   CD D8 0B               CALL   coldInit   
4272   CD 39 4A               CALL   execStr   
4275   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
427D   CD 18 0B               CALL   flushBuffer   
4280   E1                     POP   HL   
4281   E5                     PUSH   HL   
4282   11 66 4E               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4285   B7                     OR   A   
4286   ED 52                  SBC   HL,DE   
4288   7D                     LD   A,L   
4289   B4                     OR   H   
428A   CA EC 42               JP   Z,expectM_2797S122   
428D   CD 90 0B               CALL   printStr   
4290   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
429E   CD 90 0B               CALL   printStr   
42A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42B0   21 66 4E               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
42B3   E5                     PUSH   hl   
42B4   E5                     PUSH   hl   
42B5   CD AF 0C               CALL   run   
42B8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42C0   CD 18 0B               CALL   flushBuffer   
42C3   CD 90 0B               CALL   printStr   
42C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42D3   E1                     POP   hl   
42D4   E5                     PUSH   hl   
42D5   E5                     PUSH   hl   
42D6   CD AF 0C               CALL   run   
42D9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42E8   CD 18 0B               CALL   flushBuffer   
42EB   76                     HALT      
42EC                EXPECTM_2797S122:      
42EC   E1                     POP   HL   
42ED                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
42ED   31 00 4C               LD   SP,STACK   
42F0   CD D8 0B               CALL   coldInit   
42F3   CD 39 4A               CALL   execStr   
42F6   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
42FE   CD 18 0B               CALL   flushBuffer   
4301   E1                     POP   HL   
4302   E5                     PUSH   HL   
4303   11 34 4E               LD   DE,VARS + ("Z"-"A"+1)*2   
4306   B7                     OR   A   
4307   ED 52                  SBC   HL,DE   
4309   7D                     LD   A,L   
430A   B4                     OR   H   
430B   CA 6D 43               JP   Z,expectM_2798S123   
430E   CD 90 0B               CALL   printStr   
4311   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
431F   CD 90 0B               CALL   printStr   
4322   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4331   21 34 4E               LD   hl,VARS + ("Z"-"A"+1)*2   
4334   E5                     PUSH   hl   
4335   E5                     PUSH   hl   
4336   CD AF 0C               CALL   run   
4339   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4341   CD 18 0B               CALL   flushBuffer   
4344   CD 90 0B               CALL   printStr   
4347   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4354   E1                     POP   hl   
4355   E5                     PUSH   hl   
4356   E5                     PUSH   hl   
4357   CD AF 0C               CALL   run   
435A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4369   CD 18 0B               CALL   flushBuffer   
436C   76                     HALT      
436D                EXPECTM_2798S123:      
436D   E1                     POP   HL   
436E                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
436E   31 00 4C               LD   SP,STACK   
4371   CD D8 0B               CALL   coldInit   
4374   CD 39 4A               CALL   execStr   
4377   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
437F   CD 18 0B               CALL   flushBuffer   
4382   E1                     POP   HL   
4383   E5                     PUSH   HL   
4384   11 32 4E               LD   DE,VARS + ("Z"-"A")*2   
4387   B7                     OR   A   
4388   ED 52                  SBC   HL,DE   
438A   7D                     LD   A,L   
438B   B4                     OR   H   
438C   CA EE 43               JP   Z,expectM_2799S124   
438F   CD 90 0B               CALL   printStr   
4392   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
43A0   CD 90 0B               CALL   printStr   
43A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43B2   21 32 4E               LD   hl,VARS + ("Z"-"A")*2   
43B5   E5                     PUSH   hl   
43B6   E5                     PUSH   hl   
43B7   CD AF 0C               CALL   run   
43BA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43C2   CD 18 0B               CALL   flushBuffer   
43C5   CD 90 0B               CALL   printStr   
43C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43D5   E1                     POP   hl   
43D6   E5                     PUSH   hl   
43D7   E5                     PUSH   hl   
43D8   CD AF 0C               CALL   run   
43DB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43EA   CD 18 0B               CALL   flushBuffer   
43ED   76                     HALT      
43EE                EXPECTM_2799S124:      
43EE   E1                     POP   HL   
43EF                          ;*Macro unroll:  test "'A' /ad", VARS
43EF   31 00 4C               LD   SP,STACK   
43F2   CD D8 0B               CALL   coldInit   
43F5   CD 39 4A               CALL   execStr   
43F8   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4400   CD 18 0B               CALL   flushBuffer   
4403   E1                     POP   HL   
4404   E5                     PUSH   HL   
4405   11 00 4E               LD   DE,VARS   
4408   B7                     OR   A   
4409   ED 52                  SBC   HL,DE   
440B   7D                     LD   A,L   
440C   B4                     OR   H   
440D   CA 6F 44               JP   Z,expectM_2800S125   
4410   CD 90 0B               CALL   printStr   
4413   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4421   CD 90 0B               CALL   printStr   
4424   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4433   21 00 4E               LD   hl,VARS   
4436   E5                     PUSH   hl   
4437   E5                     PUSH   hl   
4438   CD AF 0C               CALL   run   
443B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4443   CD 18 0B               CALL   flushBuffer   
4446   CD 90 0B               CALL   printStr   
4449   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4456   E1                     POP   hl   
4457   E5                     PUSH   hl   
4458   E5                     PUSH   hl   
4459   CD AF 0C               CALL   run   
445C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
446B   CD 18 0B               CALL   flushBuffer   
446E   76                     HALT      
446F                EXPECTM_2800S125:      
446F   E1                     POP   HL   
4470                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4470   31 00 4C               LD   SP,STACK   
4473   CD D8 0B               CALL   coldInit   
4476   CD 39 4A               CALL   execStr   
4479   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
4486   CD 18 0B               CALL   flushBuffer   
4489   E1                     POP   HL   
448A   E5                     PUSH   HL   
448B   11 2D 00               LD   DE,$2D   
448E   B7                     OR   A   
448F   ED 52                  SBC   HL,DE   
4491   7D                     LD   A,L   
4492   B4                     OR   H   
4493   CA FA 44               JP   Z,expectM_2801S126   
4496   CD 90 0B               CALL   printStr   
4499   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
44AC   CD 90 0B               CALL   printStr   
44AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44BE   21 2D 00               LD   hl,$2D   
44C1   E5                     PUSH   hl   
44C2   E5                     PUSH   hl   
44C3   CD AF 0C               CALL   run   
44C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44CE   CD 18 0B               CALL   flushBuffer   
44D1   CD 90 0B               CALL   printStr   
44D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44E1   E1                     POP   hl   
44E2   E5                     PUSH   hl   
44E3   E5                     PUSH   hl   
44E4   CD AF 0C               CALL   run   
44E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44F6   CD 18 0B               CALL   flushBuffer   
44F9   76                     HALT      
44FA                EXPECTM_2801S126:      
44FA   E1                     POP   HL   
44FB                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
44FB   31 00 4C               LD   SP,STACK   
44FE   CD D8 0B               CALL   coldInit   
4501   CD 39 4A               CALL   execStr   
4504   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
4513   CD 18 0B               CALL   flushBuffer   
4516   E1                     POP   HL   
4517   E5                     PUSH   HL   
4518   11 41 00               LD   DE,65   
451B   B7                     OR   A   
451C   ED 52                  SBC   HL,DE   
451E   7D                     LD   A,L   
451F   B4                     OR   H   
4520   CA 89 45               JP   Z,expectM_2802S127   
4523   CD 90 0B               CALL   printStr   
4526   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
453B   CD 90 0B               CALL   printStr   
453E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
454D   21 41 00               LD   hl,65   
4550   E5                     PUSH   hl   
4551   E5                     PUSH   hl   
4552   CD AF 0C               CALL   run   
4555   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
455D   CD 18 0B               CALL   flushBuffer   
4560   CD 90 0B               CALL   printStr   
4563   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4570   E1                     POP   hl   
4571   E5                     PUSH   hl   
4572   E5                     PUSH   hl   
4573   CD AF 0C               CALL   run   
4576   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4585   CD 18 0B               CALL   flushBuffer   
4588   76                     HALT      
4589                EXPECTM_2802S127:      
4589   E1                     POP   HL   
458A                          ;*Macro unroll:  test "123. /c/vB 1#", $32
458A   31 00 4C               LD   SP,STACK   
458D   CD D8 0B               CALL   coldInit   
4590   CD 39 4A               CALL   execStr   
4593   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
45A1   CD 18 0B               CALL   flushBuffer   
45A4   E1                     POP   HL   
45A5   E5                     PUSH   HL   
45A6   11 32 00               LD   DE,$32   
45A9   B7                     OR   A   
45AA   ED 52                  SBC   HL,DE   
45AC   7D                     LD   A,L   
45AD   B4                     OR   H   
45AE   CA 16 46               JP   Z,expectM_2803S128   
45B1   CD 90 0B               CALL   printStr   
45B4   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
45C8   CD 90 0B               CALL   printStr   
45CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45DA   21 32 00               LD   hl,$32   
45DD   E5                     PUSH   hl   
45DE   E5                     PUSH   hl   
45DF   CD AF 0C               CALL   run   
45E2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45EA   CD 18 0B               CALL   flushBuffer   
45ED   CD 90 0B               CALL   printStr   
45F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45FD   E1                     POP   hl   
45FE   E5                     PUSH   hl   
45FF   E5                     PUSH   hl   
4600   CD AF 0C               CALL   run   
4603   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4612   CD 18 0B               CALL   flushBuffer   
4615   76                     HALT      
4616                EXPECTM_2803S128:      
4616   E1                     POP   HL   
4617                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4617   31 00 4C               LD   SP,STACK   
461A   CD D8 0B               CALL   coldInit   
461D   CD 39 4A               CALL   execStr   
4620   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
462E   CD 18 0B               CALL   flushBuffer   
4631   E1                     POP   HL   
4632   E5                     PUSH   HL   
4633   11 01 00               LD   DE,1   
4636   B7                     OR   A   
4637   ED 52                  SBC   HL,DE   
4639   7D                     LD   A,L   
463A   B4                     OR   H   
463B   CA A3 46               JP   Z,expectM_2804S129   
463E   CD 90 0B               CALL   printStr   
4641   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4655   CD 90 0B               CALL   printStr   
4658   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4667   21 01 00               LD   hl,1   
466A   E5                     PUSH   hl   
466B   E5                     PUSH   hl   
466C   CD AF 0C               CALL   run   
466F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4677   CD 18 0B               CALL   flushBuffer   
467A   CD 90 0B               CALL   printStr   
467D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
468A   E1                     POP   hl   
468B   E5                     PUSH   hl   
468C   E5                     PUSH   hl   
468D   CD AF 0C               CALL   run   
4690   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
469F   CD 18 0B               CALL   flushBuffer   
46A2   76                     HALT      
46A3                EXPECTM_2804S129:      
46A3   E1                     POP   HL   
46A4                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
46A4   31 00 4C               LD   SP,STACK   
46A7   CD D8 0B               CALL   coldInit   
46AA   CD 39 4A               CALL   execStr   
46AD   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
46C3   CD 18 0B               CALL   flushBuffer   
46C6   E1                     POP   HL   
46C7   E5                     PUSH   HL   
46C8   11 03 00               LD   DE,3   
46CB   B7                     OR   A   
46CC   ED 52                  SBC   HL,DE   
46CE   7D                     LD   A,L   
46CF   B4                     OR   H   
46D0   CA 40 47               JP   Z,expectM_2805S130   
46D3   CD 90 0B               CALL   printStr   
46D6   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
46F2   CD 90 0B               CALL   printStr   
46F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4704   21 03 00               LD   hl,3   
4707   E5                     PUSH   hl   
4708   E5                     PUSH   hl   
4709   CD AF 0C               CALL   run   
470C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4714   CD 18 0B               CALL   flushBuffer   
4717   CD 90 0B               CALL   printStr   
471A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4727   E1                     POP   hl   
4728   E5                     PUSH   hl   
4729   E5                     PUSH   hl   
472A   CD AF 0C               CALL   run   
472D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
473C   CD 18 0B               CALL   flushBuffer   
473F   76                     HALT      
4740                EXPECTM_2805S130:      
4740   E1                     POP   HL   
4741                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4741   31 00 4C               LD   SP,STACK   
4744   CD D8 0B               CALL   coldInit   
4747   CD 39 4A               CALL   execStr   
474A   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4763   CD 18 0B               CALL   flushBuffer   
4766   E1                     POP   HL   
4767   E5                     PUSH   HL   
4768   11 02 00               LD   DE,2   
476B   B7                     OR   A   
476C   ED 52                  SBC   HL,DE   
476E   7D                     LD   A,L   
476F   B4                     OR   H   
4770   CA E3 47               JP   Z,expectM_2806S131   
4773   CD 90 0B               CALL   printStr   
4776   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4795   CD 90 0B               CALL   printStr   
4798   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A7   21 02 00               LD   hl,2   
47AA   E5                     PUSH   hl   
47AB   E5                     PUSH   hl   
47AC   CD AF 0C               CALL   run   
47AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47B7   CD 18 0B               CALL   flushBuffer   
47BA   CD 90 0B               CALL   printStr   
47BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47CA   E1                     POP   hl   
47CB   E5                     PUSH   hl   
47CC   E5                     PUSH   hl   
47CD   CD AF 0C               CALL   run   
47D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47DF   CD 18 0B               CALL   flushBuffer   
47E2   76                     HALT      
47E3                EXPECTM_2806S131:      
47E3   E1                     POP   HL   
47E4                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
47E4   31 00 4C               LD   SP,STACK   
47E7   CD D8 0B               CALL   coldInit   
47EA   CD 39 4A               CALL   execStr   
47ED   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4812   CD 18 0B               CALL   flushBuffer   
4815   E1                     POP   HL   
4816   E5                     PUSH   HL   
4817   11 01 00               LD   DE,1   
481A   B7                     OR   A   
481B   ED 52                  SBC   HL,DE   
481D   7D                     LD   A,L   
481E   B4                     OR   H   
481F   CA 9E 48               JP   Z,expectM_2807S132   
4822   CD 90 0B               CALL   printStr   
4825   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4850   CD 90 0B               CALL   printStr   
4853   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4862   21 01 00               LD   hl,1   
4865   E5                     PUSH   hl   
4866   E5                     PUSH   hl   
4867   CD AF 0C               CALL   run   
486A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4872   CD 18 0B               CALL   flushBuffer   
4875   CD 90 0B               CALL   printStr   
4878   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4885   E1                     POP   hl   
4886   E5                     PUSH   hl   
4887   E5                     PUSH   hl   
4888   CD AF 0C               CALL   run   
488B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
489A   CD 18 0B               CALL   flushBuffer   
489D   76                     HALT      
489E                EXPECTM_2807S132:      
489E   E1                     POP   HL   
489F                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
489F   31 00 4C               LD   SP,STACK   
48A2   CD D8 0B               CALL   coldInit   
48A5   CD 39 4A               CALL   execStr   
48A8   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
48CD   CD 18 0B               CALL   flushBuffer   
48D0   E1                     POP   HL   
48D1   E5                     PUSH   HL   
48D2   11 01 00               LD   DE,1   
48D5   B7                     OR   A   
48D6   ED 52                  SBC   HL,DE   
48D8   7D                     LD   A,L   
48D9   B4                     OR   H   
48DA   CA 59 49               JP   Z,expectM_2808S133   
48DD   CD 90 0B               CALL   printStr   
48E0   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
490B   CD 90 0B               CALL   printStr   
490E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
491D   21 01 00               LD   hl,1   
4920   E5                     PUSH   hl   
4921   E5                     PUSH   hl   
4922   CD AF 0C               CALL   run   
4925   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
492D   CD 18 0B               CALL   flushBuffer   
4930   CD 90 0B               CALL   printStr   
4933   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4940   E1                     POP   hl   
4941   E5                     PUSH   hl   
4942   E5                     PUSH   hl   
4943   CD AF 0C               CALL   run   
4946   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4955   CD 18 0B               CALL   flushBuffer   
4958   76                     HALT      
4959                EXPECTM_2808S133:      
4959   E1                     POP   HL   
495A                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
495A   31 00 4C               LD   SP,STACK   
495D   CD D8 0B               CALL   coldInit   
4960   CD 39 4A               CALL   execStr   
4963   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
4995   CD 18 0B               CALL   flushBuffer   
4998   E1                     POP   HL   
4999   E5                     PUSH   HL   
499A   11 02 00               LD   DE,2   
499D   B7                     OR   A   
499E   ED 52                  SBC   HL,DE   
49A0   7D                     LD   A,L   
49A1   B4                     OR   H   
49A2   CA 2E 4A               JP   Z,expectM_2809S134   
49A5   CD 90 0B               CALL   printStr   
49A8   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
49E0   CD 90 0B               CALL   printStr   
49E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49F2   21 02 00               LD   hl,2   
49F5   E5                     PUSH   hl   
49F6   E5                     PUSH   hl   
49F7   CD AF 0C               CALL   run   
49FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A02   CD 18 0B               CALL   flushBuffer   
4A05   CD 90 0B               CALL   printStr   
4A08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A15   E1                     POP   hl   
4A16   E5                     PUSH   hl   
4A17   E5                     PUSH   hl   
4A18   CD AF 0C               CALL   run   
4A1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A2A   CD 18 0B               CALL   flushBuffer   
4A2D   76                     HALT      
4A2E                EXPECTM_2809S134:      
4A2E   E1                     POP   HL   
4A2F                             ; 
4A2F   CD 90 0B               CALL   printStr   
4A32   44 6F 6E 65 21 00      .CSTR   "Done!"   
4A38   76                     HALT      
4A39                             ; executes a null teminated string (null executes exit_)
4A39                             ; the string should be immedaitely following the call
4A39                EXECSTR:      ; create a root stack frame
4A39   C1                     POP   bc   ; bc = code*
4A3A   0B                     DEC   bc   ; dec to prepare for next routine
4A3B   11 00 00               LD   de,0   
4A3E   D5                     PUSH   de   ; push fake IP
4A3F   D5                     PUSH   de   ; push null arg_list*
4A40   D5                     PUSH   de   ; push null first_arg*
4A41   D5                     PUSH   de   ; push fake BP
4A42   DD E9                  JP   (ix)   
4A44                STKSIZE:   EQU   $100   ; Stack size
4A44                TIBSIZE:   EQU   $100   ; 256 bytes
4A44                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4A44                          ALIGN   $100   
4B00                          DS   STKSIZE   
4C00                STACK:       
4C00                          ALIGN   $100   
4C00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                VARS:        
4E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4ED0                RESTARTS:      
4ED0                RST08:    DS   2   
4ED2                RST10:    DS   2   
4ED4                RST18:    DS   2   
4ED6                RST20:    DS   2   
4ED8                RST28:    DS   2   
4EDA                RST30:    DS   2   ; 
4EDC                BAUD:     DS   2   ; 
4EDE                INTVEC:   DS   2   ; 
4EE0                NMIVEC:   DS   2   ; 
4EE2                GETCVEC:   DS   2   ; 
4EE4                PUTCVEC:   DS   2   ; 
4EE6                SYSVARS:      
4EE6                             ; initialised sys variables (preserved)
4EE6                VDATAWIDTH:   DS   2   ; 
4EE8                VNUMBASE:   DS   2   ; 
4EEA                VTIBPTR:   DS   2   ; 
4EEC                VBUFPTR:   DS   2   ; 
4EEE                VNEXT:    DS   2   ; 
4EF0                VHEAPPTR:   DS   2   ; 
4EF2                             ; uninitialised sys variables (preserved)
4EF2                VPOINTER:   DS   2   ; 
4EF4                VREMAIN:   DS   2   ; 
4EF6                VSAVEDIP:   DS   2   ; 
4EF8                VSAVEDSP:   DS   2   ; 
4EFA                VSAVEDNEXT:   DS   2   ; 
4EFC                VSAVEDBP:   DS   2   ; 
4EFE                VCHECKSUM:   DS   2   ; 
4F00                             ; uninitialised sys variables (unpreserved)
4F00                VTEMP1:   DS   2   ; 
4F02                VTEMP2:   DS   2   ; 
4F04                VLASTDEF:   DS   2   ; 
4F06                VHASHSTR:   DS   2   ; 
4F08                TBPTR:    DS   2   ; reserved for tests
4F0A                TITLEBUF:   DS   20   
4F1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B0E DEFINED AT LINE 1764 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 2114 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 189 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 192 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 194 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 221 IN MAIN.asm
DQUOTE_:            034A DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                035F DEFINED AT LINE 240 IN MAIN.asm
LT_:                036A DEFINED AT LINE 248 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 260 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 383 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 398 IN MAIN.asm
ARRAYEND1:          0431 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRAYEND2:          0441 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARRAYEND3:          0446 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
HASH:               0465 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
ARRAYINDEX:         0465 DEFINED AT LINE 454 IN MAIN.asm
ARRAYINDEX0:        046D DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX1:        046E DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
ARRAYINDEX2:        047A DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ASSIGN:             047D DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            047F DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
ASSIGNX:            0480 DEFINED AT LINE 481 IN MAIN.asm
ASSIGN1:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
COLON:              048E DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            048E DEFINED AT LINE 497 IN MAIN.asm
ARGLIST1:           0498 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST1A:          04A0 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARGLIST2:           04A8 DEFINED AT LINE 515 IN MAIN.asm
ARGLIST3:           04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST4:           04B3 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST5:           04B9 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
LBRACE:             04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKSTART:         04C4 DEFINED AT LINE 543 IN MAIN.asm
BLOCKSTART1:        04C8 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
BLOCKSTART2:        04F4 DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
BLOCKSTART3:        04F7 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
BLOCKSTART4:        04FF DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
BLOCKSTART5:        0502 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART6:        052A DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
RBRACE:             052D DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
BLOCKEND:           052D DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
BLOCKEND1:          055F DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKEND2:          056B DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND3:          057D DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
TICK:               0589 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CHAR:               0589 DEFINED AT LINE 661 IN MAIN.asm
CHAR1:              058C DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
CHAR2:              0598 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CHAR3:              059B DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
BACKSLASH:          059E DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
COMMA:              05A0 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05A0 DEFINED AT LINE 685 IN MAIN.asm
DISCARD1:           05AD DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
SLASH:              05AF DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
COMMAND:            05AF DEFINED AT LINE 698 IN MAIN.asm
DIV:                05E8 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
DOT:                05F9 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DIVIDE:             060B DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DIVIDE1:            0610 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE2:            061D DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DIVIDE3:            061E DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
EQUALS:             0624 DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         062C DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           0631 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0636 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
TRUE1:              0639 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
NULL1:              063F DEFINED AT LINE 812 IN MAIN.asm
FALSE1:             063F DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0646 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
GO2:                064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
GOBLOCK:            0657 DEFINED AT LINE 837 IN MAIN.asm
GOBLOCK1:           0657 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK2:           067C DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOFUNC:             068A DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOFUNC1:            06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOFUNC2:            06A9 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOFUNC3:            06B4 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOFUNC4:            06CC DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
GOFUNC5:            06CF DEFINED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOFUNC6:            06D2 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
GOFUNC7:            06D5 DEFINED AT LINE 923 IN MAIN.asm
GOFUNC8:            06D9 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
DOLLAR:             06E4 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             06E4 DEFINED AT LINE 938 IN MAIN.asm
HEXNUM1:            06E7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
HEXNUM2:            06EF DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
UPCASE:             0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0706 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             070B DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
QUESTION:           0718 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0718 DEFINED AT LINE 980 IN MAIN.asm
IFTE:               0724 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
IFTE1:              0725 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
STAR:               0731 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0731 DEFINED AT LINE 1003 IN MAIN.asm
MUL2:               0733 DEFINED AT LINE 1006 IN MAIN.asm
MUL3:               073B DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
NUM:                074D DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0756 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
NUM1:               0757 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
NUM2:               076F DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
NUM3:               077A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
RPAREN:             077D DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          0785 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
CREATEFUNC:         0785 DEFINED AT LINE 1070 IN MAIN.asm
CREATEFUNC0:        07A0 DEFINED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
CREATEFUNC1:        07B8 DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
CREATEFUNC2:        07CB DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
CREATEFUNC2A:       07EA DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
CREATEFUNC3:        07F9 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
CREATEFUNC4:        0804 DEFINED AT LINE 1163 IN MAIN.asm
CREATEFUNC5:        0805 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
SHIFTLEFT:          0821 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         0829 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
SHIFTLEFT2:         082A DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
SHIFTRIGHT:         0831 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        0839 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
SHIFTRIGHT2:        083D DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
DQUOTE:             0844 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             0844 DEFINED AT LINE 1225 IN MAIN.asm
STRING1:            084D DEFINED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
STRING2:            0850 DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
STRING3:            0859 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
MINUS:              086C DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0878 DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
SUB1:               0882 DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
ERROR1:             088B DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
COMMENT:            0892 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
COMMAND_A:          089B DEFINED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
ABSOLUTE:           08A7 DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
ADDROF:             08B4 DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
ADDROF1:            08C8 DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
ADDROF2:            08D3 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
COMMAND_B:          08D5 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BUFFERARRAY:        08E1 DEFINED AT LINE 32
                    > USED AT LINE 751 IN MAIN.asm
BUFFERARRAYM_1859S1354: 08EF DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       092A DEFINED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
BUFFERDEC:          0931 DEFINED AT LINE 1367 IN MAIN.asm
BUFFERDEC0:         094B DEFINED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
BUFFERDEC1:         095B DEFINED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BUFFERDEC2:         097B DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
BUFFERDEC3:         097D DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
BUFFERDEC4:         098D DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
BUFFERDEC5:         098E DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
BUFFERHEX:          0997 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
BUFFERHEX1:         09B8 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
BUFFERHEX2:         09C1 DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
BREAK:              09CF DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
BREAK1:             09D6 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
BUFFERSTRING:       09E9 DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
BUFFERSTRING0:      09F0 DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
BUFFERSTRING1:      09F6 DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
BUFFERCHAR:         0A03 DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
BUFFERXCHARS:       0A08 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
BUFFERXCHARS0:      0A09 DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
BUFFERXCHARS1:      0A12 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
BUFFERXCHARS2:      0A1A DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
COMMAND_I:          0A24 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
COMMAND_P:          0A30 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PRINTBUFFER:        0A3F DEFINED AT LINE 32
                    > USED AT LINE 1556 IN MAIN.asm
PRINTBUFFERM_2060S1568: 0A4B DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0A65 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
PRINTCHARS1:        0A6C DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
PRINTCHARS2:        0A72 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
PRINTSTACK:         0A77 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
COMMAND_R:          0A79 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
REMAIN:             0A82 DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
SIZE:               0A88 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
COMMAND_V:          0A90 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
CONSTBUFSTART:      0AA5 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
CONSTHEAPSTART:     0AAA DEFINED AT LINE 1662 IN MAIN.asm
CONSTTIBSTART:      0AAF DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
VARBUFPTR:          0AB4 DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
VARHEAPPTR:         0ABD DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
VARTIBPTR:          0AC6 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
VARIABLE:           0ACF DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
CONSTANT:           0AD2 DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
CHARS:              0AD5 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
CHARS1:             0AD8 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
DECIMAL:            0ADD DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
DECIMAL1:           0AE0 DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
HEXADECIMAL:        0AE5 DEFINED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
INPUT:              0AEB DEFINED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
KEY:                0AF6 DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
OUTPUT:             0AFF DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
NUMBERS:            0B08 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
FILTER:             0B0E DEFINED AT LINE 1762 IN MAIN.asm
MAP:                0B0E DEFINED AT LINE 1763 IN MAIN.asm
ARGS1A0L:           0B10 DEFINED AT LINE 1771 IN MAIN.asm
ARGS1A2L:           0B13 DEFINED AT LINE 1775 IN MAIN.asm
FLUSHBUFFER:        0B18 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0B2F DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
JUMPTABLE0:         0B31 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
JUMPTABLE1:         0B3E DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
JUMPTABLE2:         0B3F DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
PRTSTR0:            0B45 DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
PRTSTR:             0B49 DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
NESTING:            0B4E DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
NESTING0:           0B58 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
NESTING1A:          0B5F DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
NESTING1:           0B62 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
NESTING2:           0B71 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
NESTING3:           0B73 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
NESTING4:           0B7E DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
PROMPT:             0B80 DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
CRLF:               0B89 DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
PRINTSTR:           0B90 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 139
TITLESTR:           0B97 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
INIT:               0BAB DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
INIT1:              0BB3 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
WARMINIT:           0BBB DEFINED AT LINE 1917 IN MAIN.asm
COLDBOOT0:          0BCE DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
COLDINIT:           0BD8 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0BE9 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
COLDSTART:          0BF6 DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
START:              0BFF DEFINED AT LINE 1952 IN MAIN.asm
START1:             0C05 DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
INTERPRET:          0C0B DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
INTERPRET2:         0C1A DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
INTERPRET3:         0C22 DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
INTERPRET4:         0C2D DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
INTERPRET5:         0C32 DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
INTERPRET5A:        0C55 DEFINED AT LINE 2029 IN MAIN.asm
INTERPRET6:         0C57 DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
INTERPRET7:         0C65 DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
INTERPRET8:         0C78 DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
NEXT:               0C93 DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
NEXT1:              0CA4 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
EXIT:               0CAB DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
RUN:                0CAF DEFINED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0CB3 DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
BACKSPACE_:         0CC6 DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
EDIT_:              0CD6 DEFINED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
REEDIT_:            0CEE DEFINED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PRINTSTACK_:        0CF1 DEFINED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_2697S22:    0D76 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2698S23:    0DED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2699S24:    0E62 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2700S25:    0ED7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2701S26:    0F4C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2702S27:    0FC1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2703S28:    1038 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2704S29:    10B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2705S30:    1128 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2706S31:    119F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2707S32:    1218 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2708S33:    1293 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2709S34:    130C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2710S35:    1385 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2711S36:    1404 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2712S37:    1483 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2713S38:    1500 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2714S39:    1581 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2715S40:    1606 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2716S41:    1689 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2717S42:    1706 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2718S43:    178B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2719S44:    180C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2720S45:    1889 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2721S46:    1906 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2722S47:    198B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2723S48:    1A08 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2724S49:    1A85 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2725S50:    1B04 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2726S51:    1B93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2727S52:    1C10 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2728S53:    1C95 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2729S54:    1D12 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2730S55:    1D97 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2731S56:    1E14 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2732S57:    1E93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2733S58:    1F12 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2734S59:    1F8F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2735S60:    200C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2736S61:    2089 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2737S62:    2106 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2738S63:    2183 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2739S64:    2200 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2740S65:    227D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2741S66:    22FA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2742S67:    2379 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2743S68:    23F8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2744S69:    2477 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2745S70:    24F8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2746S71:    2579 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2747S72:    25F4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2748S73:    266F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2749S74:    26F0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2750S75:    2777 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2751S76:    27FE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2752S77:    2889 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2753S78:    291E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2754S79:    29B3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2755S80:    2A2E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2756S81:    2AAB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2757S82:    2B2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2758S83:    2BAB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2759S84:    2C2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2760S85:    2CA9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2761S86:    2D2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2762S87:    2DB1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2763S88:    2E3C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2764S89:    2EC3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2765S90:    2F54 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2766S91:    2FE7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2767S92:    3080 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2768S93:    311D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2769S94:    31AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2770S95:    3241 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2771S96:    32D8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2772S97:    3371 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2773S98:    3408 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2774S99:    34AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2775S100:   3540 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2776S101:   35E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2777S102:   3684 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2778S103:   3729 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2779S104:   37D8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2780S105:   3887 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2781S106:   3914 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2782S107:   39A7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2783S108:   3A34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2784S109:   3ACD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2785S110:   3B66 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2786S111:   3C11 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2787S112:   3CC4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2788S113:   3D77 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2789S114:   3E18 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2790S115:   3EBF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2791S116:   3F7C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2792S117:   4047 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2793S118:   40D0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2794S119:   4159 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2795S120:   41E2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2796S121:   426B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2797S122:   42EC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2798S123:   436D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2799S124:   43EE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2800S125:   446F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2801S126:   44FA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2802S127:   4589 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2803S128:   4616 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2804S129:   46A3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2805S130:   4740 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2806S131:   47E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2807S132:   489E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2808S133:   4959 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2809S134:   4A2E DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4A39 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4C00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4C00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
BUF:                4D00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
VARS:               4E00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           4ED0 DEFINED AT LINE 18 IN ram.asm
RST08:              4ED0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4ED2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4ED4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4ED6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4ED8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4EDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4EDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4EDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4EE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4EE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4EE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4EE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1932 IN MAIN.asm
VDATAWIDTH:         4EE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
VNUMBASE:           4EE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
VTIBPTR:            4EEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
VBUFPTR:            4EEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
VNEXT:              4EEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1944 IN MAIN.asm
VHEAPPTR:           4EF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
VPOINTER:           4EF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
VREMAIN:            4EF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
VSAVEDIP:           4EF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
VSAVEDSP:           4EF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
VSAVEDNEXT:         4EFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
VSAVEDBP:           4EFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
VCHECKSUM:          4EFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4F00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
VTEMP2:             4F02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
VLASTDEF:           4F04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4F06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4F08 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           4F0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
HEAP:               4F1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
