0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; call prtdec
0000                             ; push hl
0000                             ; call prtdec
0000                             ; pop hl
0000                             ; call printStr
0000                             ; .cstr " (#"
0000                             ; call prthex
0000                             ; call printStr
0000                             ; .cstr ")\r\n"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 call run
0000                 .cstr "."
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". `(#`.s .h `)\r\n`.s"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 48               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 48               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 48               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 48               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 48               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 48               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 48               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 48               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 48               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 48               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 47               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 48               LD   (RST08),HL   
0094   22 D2 48               LD   (RST10),HL   
0097   22 D4 48               LD   (RST18),HL   
009A   22 D6 48               LD   (RST20),HL   
009D   22 D8 48               LD   (RST28),HL   
00A0   22 DA 48               LD   (RST30),HL   
00A3   22 DE 48               LD   (INTVEC),HL   
00A6   22 E0 48               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 48               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 48               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 47               LD   SP,STACK   
00C6   CD F3 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                STKSIZE:   EQU   $80   ; Stack size
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TMAGIC:   EQU   $AA   ; magic number
00CC                TRESERV:   EQU   $A0   ; reserved
00CC                TNUMBER:   EQU   $A1   ; number
00CC                TSTRING:   EQU   $A2   ; string
00CC                TPOINTER:   EQU   $A3   ; pointer
00CC                TARRAY:   EQU   $A4   ; array
00CC                TBLOCK:   EQU   $A5   ; block
00CC                TLAMBDA:   EQU   $A6   ; lambda
00CC                TARGLST:   EQU   $A7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4A                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4B                  DW   BUF   ; vBUFPtr pointer into BUF
0188   97 0C                  DW   next   ; nNext
018A   00 4D                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 01 08               JP   semicolon   
0324                DOT_:        
0324   C3 04 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 F3 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 77 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 7C 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 8E 07               JP   question   
0336                STAR_:       
0336   C3 A7 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 C3 07               JP   num   
0341                HASH_:       
0341   C3 5A 07               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 B4 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 40 08               JP   dblquote   
0350                MINUS_:      
0350   C3 68 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 93 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA 2D 08               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA 1D 08               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 9B 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 A0 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 F9 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 48            LD   de,(vPointer)   
039D   21 F2 48               LD   hl,vPointer   
03A0   C3 03 0B               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 48               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 FE 48            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 48               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 48               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 48            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 48               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FE 48            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 48               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 48               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 48               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 48               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 48               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 48               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   57                     LD   d,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 00 4D               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 FE 48            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 48            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 48            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B FE 48            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 FE 48            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 00 49            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 00 49            LD   bc,(vTemp2)   
0591   FD 2A FE 48            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   CD 8B 0B               CALL   jumpTable   
05C0   2F                     DB   "/"   
05C1   8E 08                  DW   comment   
05C3   61                     DB   "a"   
05C4   97 08                  DW   command_a   
05C6   62                     DB   "b"   
05C7   D1 08                  DW   command_b   
05C9   63                     DB   "c"   
05CA   09 0B                  DW   chars   
05CC   64                     DB   "d"   
05CD   11 0B                  DW   decimal   
05CF   66                     DB   "f"   
05D0   AE 06                  DW   false1   
05D2   68                     DB   "h"   
05D3   19 0B                  DW   hexadecimal   
05D5   69                     DB   "i"   
05D6   21 0A                  DW   command_i   
05D8   6B                     DB   "k"   
05D9   2A 0B                  DW   key   
05DB   6E                     DB   "n"   
05DC   3C 0B                  DW   numbers   
05DE   6F                     DB   "o"   
05DF   33 0B                  DW   output   
05E1   70                     DB   "p"   
05E2   2D 0A                  DW   command_p   
05E4   73                     DB   "s"   
05E5   BA 0A                  DW   size   
05E7   74                     DB   "t"   
05E8   A8 06                  DW   true1   
05EA   76                     DB   "v"   
05EB   C4 0A                  DW   command_v   
05ED   78                     DB   "x"   
05EE   B7 03                  DW   xor   
05F0   00                     DB   NUL   
05F1   F3 05                  DW   div   
05F3                DIV:         
05F3   D1                     POP   de   
05F4   E1                     POP   hl   
05F5   C5                     PUSH   bc   ; preserve the IP
05F6   44 4D                  LD   bc,hl   
05F8   CD 7A 06               CALL   divide   
05FB   EB                     EX   de,hl   
05FC   ED 53 F4 48            LD   (vRemain),de   
0600   C1                     POP   bc   
0601   C3 96 03               JP   add3   
0604                DOT:         
0604   CD 8B 0B               CALL   jumpTable   
0607   61                     DB   "a"   
0608   16 06                  DW   dotArray   
060A   68                     DB   "h"   
060B   2A 06                  DW   dotHex   
060D   73                     DB   "s"   
060E   3E 06                  DW   dotStr   
0610   63                     DB   "c"   
0611   52 06                  DW   dotChar   
0613   00                     DB   NUL   
0614   66 06                  DW   dotDec   
0616                DOTARRAY:      
0616   CD B4 06               CALL   go   
0619   00 00                  DW   NUL   ; null closure
061B   1F 06                  DW   dotArray_block   
061D   7D 0B                  DW   args1A0L   
061F                DOTARRAY_BLOCK:      
061F   7B 24 61 2F 62 61 2F 70 78 7D 00 .CSTR   "{$a/ba/px}"   ; block
062A                DOTHEX:      
062A   CD B4 06               CALL   go   
062D   00 00                  DW   NUL   ; null closure
062F   33 06                  DW   dotHex_block   
0631   7D 0B                  DW   args1A0L   
0633                DOTHEX_BLOCK:      
0633   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
063E                DOTSTR:      
063E   CD B4 06               CALL   go   
0641   00 00                  DW   NUL   ; null closure
0643   47 06                  DW   dotStr_block   
0645   7D 0B                  DW   args1A0L   
0647                DOTSTR_BLOCK:      
0647   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
0652                DOTCHAR:      
0652   CD B4 06               CALL   go   
0655   00 00                  DW   NUL   ; null closure
0657   5B 06                  DW   dotChar_block   
0659   7D 0B                  DW   args1A0L   
065B                DOTCHAR_BLOCK:      
065B   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0666                DOTDEC:      
0666   CD B4 06               CALL   go   
0669   00 00                  DW   NUL   ; closure
066B   6F 06                  DW   dotDec_block   
066D   7D 0B                  DW   args1A0L   
066F                DOTDEC_BLOCK:      
066F   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
067A                             ; division subroutine.
067A                             ; bc: divisor, de: dividend, hl: remainder
067A                DIVIDE:      
067A   21 00 00               LD   hl,0   ; zero the remainder
067D   3E 10                  LD   a,16   ; loop counter
067F                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
067F   CB 21                  SLA   c   
0681   CB 10                  RL   b   
0683   ED 6A                  ADC   hl,hl   
0685   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0687   38 03                  JR   c,divide2   
0689   0C                     INC   c   
068A   18 01                  JR   divide3   
068C                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
068C   19                     ADD   hl,de   
068D                DIVIDE3:      
068D   3D                     DEC   a   
068E   20 EF                  JR   nz,divide1   
0690   50 59                  LD   de,bc   ; result from bc to de
0692   C9                     RET      
0693                             ; hl = value1, de = value2
0693                             ; hl = result
0693                EQUALS:      
0693   B7                     OR   a   ; reset the carry flag
0694   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0696   28 10                  JR   z,true1   
0698   C3 AE 06               JP   false1   
069B                             ; hl = value1 de = value2
069B                             ; hl = result
069B                LESSTHANEQ:      
069B   B7                     OR   a   
069C   ED 52                  SBC   hl,de   
069E   18 05                  JR   lessthan1   
06A0                             ; hl = value1 de = value2
06A0                             ; hl = result
06A0                LESSTHAN:      
06A0   B7                     OR   a   
06A1   ED 52                  SBC   hl,de   
06A3   28 09                  JR   z,false1   
06A5                LESSTHAN1:      
06A5   FA AE 06               JP   m,false1   
06A8                TRUE1:       
06A8   21 FF FF               LD   hl,TRUE   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                NULL1:       
06AE                FALSE1:      
06AE   21 00 00               LD   hl,FALSE   
06B1   E5                     PUSH   hl   
06B2   DD E9                  JP   (ix)   
06B4                             ; execute a block of code which ends with }
06B4                             ; creates a root scope if BP == stack
06B4                             ; else uses outer scope
06B4                CARET:       
06B4                GO:          
06B4   D1                     POP   de   ; de = block*
06B5                GO1:         
06B5   7B                     LD   a,e   ; if block* == null, exit
06B6   B2                     OR   d   
06B7   20 02                  JR   nz,go2   
06B9   DD E9                  JP   (ix)   
06BB                GO2:         
06BB   1A                     LD   a,(de)   
06BC   FE 7B                  CP   "{"   
06BE   28 07                  JR   z,goBlock1   
06C0   FE 28                  CP   "("   
06C2   C2 FA 06               JP   nz,goLambda   
06C5   13                     INC   de   ; de is the address to jump back to
06C6   D5                     PUSH   de   ; push de just before stack frame
06C7                GOBLOCK:      
06C7                GOBLOCK1:      
06C7   ED 53 FE 48            LD   (vTemp1),de   ; save de
06CB   21 80 47               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
06CE   FD 54                  LD   d,iyh   
06D0   FD 5D                  LD   e,iyl   
06D2   B7                     OR   a   ; if stack* == BP then this is the root_scope
06D3   ED 52                  SBC   hl,de   
06D5   ED 5B FE 48            LD   de,(vTemp1)   ; restore de
06D9   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06DA   B4                     OR   h   
06DB   3E 00                  LD   a,0   
06DD   28 70                  JR   z,goLambda8   
06DF   C5                     PUSH   bc   ; push IP
06E0   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06E3   FD 46 05               LD   b,(iy+5)   
06E6   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06E9   FD 66 03               LD   h,(iy+3)   
06EC                GOBLOCK2:      
06EC   C5                     PUSH   bc   ; arg_list*
06ED   E5                     PUSH   hl   ; first_arg*
06EE   FD E5                  PUSH   iy   ; push BP
06F0   FD 21 00 00            LD   iy,0   ; BP = SP
06F4   FD 39                  ADD   iy,sp   
06F6   42 4B                  LD   bc,de   ; bc = de = block*-1
06F8   DD E9                  JP   (ix)   
06FA                GOLAMBDA:      ; execute lambda
06FA   EB                     EX   de,hl   ; hl = lambda*
06FB   5E                     LD   e,(hl)   ; de = partial_array*
06FC   23                     INC   hl   
06FD   56                     LD   d,(hl)   
06FE   23                     INC   hl   
06FF   7B                     LD   a,e   ; if partial_array* == null skip
0700   B2                     OR   d   
0701   28 25                  JR   z,goLambda3   
0703   ED 43 FE 48            LD   (vTemp1),bc   
0707   22 00 49               LD   (vTemp2),hl   ; save bc,hl
070A   EB                     EX   de,hl   ; hl = partial_array*
070B   2B                     DEC   hl   ; skip type byte
070C   2B                     DEC   hl   ; skip magic byte
070D   2B                     DEC   hl   ; bc = count
070E   46                     LD   b,(hl)   
070F   2B                     DEC   hl   
0710   4E                     LD   c,(hl)   
0711   23                     INC   hl   ; hl = array data*
0712   23                     INC   hl   
0713   23                     INC   hl   
0714   23                     INC   hl   
0715   18 06                  JR   goLambda2   ; push each item on stack
0717                GOLAMBDA1:      
0717   5E                     LD   e,(hl)   ; de = partial item
0718   23                     INC   hl   
0719   56                     LD   d,(hl)   
071A   23                     INC   hl   
071B   D5                     PUSH   de   ; push on stack
071C   0B                     DEC   bc   
071D                GOLAMBDA2:      
071D   79                     LD   a,c   ; if count != 0 then loop
071E   B0                     OR   b   
071F   20 F6                  JR   nz,goLambda1   
0721   ED 4B FE 48            LD   bc,(vTemp1)   ; restore bc
0725   2A 00 49               LD   hl,(vTemp2)   ; restore hl
0728                GOLAMBDA3:      
0728   5E                     LD   e,(hl)   ; de = block*
0729   23                     INC   hl   
072A   56                     LD   d,(hl)   
072B   23                     INC   hl   
072C   ED 53 FE 48            LD   (vTemp1),de   ; save block*
0730   5E                     LD   e,(hl)   ; de = arg_list*
0731   23                     INC   hl   
0732   56                     LD   d,(hl)   
0733   23                     INC   hl   
0734   EB                     EX   de,hl   ; hl = arg_list*
0735   ED 5B FE 48            LD   de,(vTemp1)   ; restore de = block*
0739   7D                     LD   a,l   ; if arg_list* == null a = 0
073A   B4                     OR   h   
073B   20 03                  JR   nz,goLambda4   
073D   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
073E   18 0F                  JR   goLambda8   
0740                GOLAMBDA4:      ; allocate locals
0740   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0741   7E                     LD   a,(hl)   
0742   18 03                  JR   goLambda6   
0744                GOLAMBDA5:      ; loop
0744   3B                     DEC   sp   
0745   3B                     DEC   sp   
0746   3D                     DEC   a   
0747                GOLAMBDA6:      
0747   B7                     OR   a   
0748   20 FA                  JR   nz,goLambda5   ; end loop
074A                GOLAMBDA7:      
074A   2B                     DEC   hl   ; a = num_args* x 2
074B   7E                     LD   a,(hl)   
074C   23                     INC   hl   
074D   23                     INC   hl   
074E   87                     ADD   a,a   ; a *= 2
074F                GOLAMBDA8:      
074F   C5                     PUSH   bc   ; push IP
0750   44 4D                  LD   bc,hl   
0752   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0755   85                     ADD   a,l   
0756   6F                     LD   l,a   
0757   39                     ADD   hl,sp   
0758   18 92                  JR   goBlock2   
075A                HASH:        
075A                HEXNUM:      
075A   21 00 00               LD   hl,0   ; Clear hl to accept the number
075D                HEXNUM1:      
075D   03                     INC   bc   
075E   0A                     LD   a,(bc)   ; Get the character which is a numeral
075F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0761   28 02                  JR   z,hexnum2   ; no a decimal
0763   D6 07                  SUB   7   ; sub 7  to make $a - $F
0765                HEXNUM2:      
0765   D6 30                  SUB   $30   ; form decimal digit
0767   DA E5 07               JP   c,num2   
076A   FE 10                  CP   $0F+1   
076C   D2 E5 07               JP   nc,num2   
076F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0770   29                     ADD   hl,hl   ; 4X
0771   29                     ADD   hl,hl   ; 8X
0772   29                     ADD   hl,hl   ; 16X
0773   85                     ADD   a,l   ; add into bottom of hl
0774   6F                     LD   l,a   
0775   18 E6                  JR   hexnum1   
0777                UPCASE:      
0777   0A                     LD   a,(bc)   ; a = identifier char
0778   D6 41                  SUB   "A"   ; "A" = 0
077A   18 05                  JR   ident1   
077C                LOWCASE:      
077C   0A                     LD   a,(bc)   
077D   D6 61                  SUB   "a"   
077F   C6 1A                  ADD   a,26   
0781                IDENT1:      
0781   87                     ADD   a,a   ; l = a * 2
0782   6F                     LD   l,a   
0783   26 48                  LD   h,msb(vars)   
0785   22 F2 48               LD   (vPointer),hl   ; store address in setter
0788   5E                     LD   e,(hl)   
0789   23                     INC   hl   
078A   56                     LD   d,(hl)   
078B   D5                     PUSH   de   
078C   DD E9                  JP   (ix)   
078E                             ; if
078E                             ; condition then -- value
078E                QUESTION:      
078E                IF:          
078E   03                     INC   bc   
078F   0A                     LD   a,(bc)   
0790   FE 3F                  CP   "?"   
0792   28 06                  JR   z,ifte   
0794   0B                     DEC   bc   
0795   11 00 00               LD   de,NUL   ; NUL pointer for else
0798   18 01                  JR   ifte1   
079A                             ; ifte
079A                             ; condition then else -- value
079A                IFTE:        
079A   D1                     POP   de   ; de = else
079B                IFTE1:       
079B   E1                     POP   hl   ; hl = then
079C   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
079D   7C                     LD   a,h   
079E   B5                     OR   l   
079F   E1                     POP   hl   ; hl = then
07A0   CA B5 06               JP   z,go1   ; if z de = else
07A3   EB                     EX   de,hl   ; condition = false, de = then
07A4   C3 B5 06               JP   go1   
07A7                STAR:        
07A7                MUL:         
07A7   D1                     POP   de   ; get first value
07A8   E1                     POP   hl   
07A9                MUL2:        
07A9   C5                     PUSH   bc   ; Preserve the IP
07AA   44 4D                  LD   bc,hl   ; bc = 2nd value
07AC   21 00 00               LD   hl,0   
07AF   3E 10                  LD   a,16   
07B1                MUL3:        
07B1   29                     ADD   hl,hl   
07B2   CB 13                  RL   e   
07B4   CB 12                  RL   d   
07B6   30 04                  JR   nc,$+6   
07B8   09                     ADD   hl,bc   
07B9   30 01                  JR   nc,$+3   
07BB   13                     INC   de   
07BC   3D                     DEC   a   
07BD   20 F2                  JR   nz,mul3   
07BF   C1                     POP   bc   ; Restore the IP
07C0   C3 96 03               JP   add3   
07C3                NUM:         
07C3   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07C6   0A                     LD   a,(bc)   ; Get numeral or -
07C7   FE 2D                  CP   "-"   
07C9   20 01                  JR   nz,num0   
07CB   03                     INC   bc   ; move to next char, no flags affected
07CC                NUM0:        
07CC   08                     EX   af,af'   ; save zero flag = 0 for later
07CD                NUM1:        
07CD   0A                     LD   a,(bc)   ; read digit
07CE   D6 30                  SUB   "0"   ; less than 0?
07D0   38 13                  JR   c,num2   ; not a digit, exit loop
07D2   FE 0A                  CP   10   ; greater that 9?
07D4   30 0F                  JR   nc,num2   ; not a digit, exit loop
07D6   03                     INC   bc   ; inc IP
07D7   54 5D                  LD   de,hl   ; multiply hl * 10
07D9   29                     ADD   hl,hl   
07DA   29                     ADD   hl,hl   
07DB   19                     ADD   hl,de   
07DC   29                     ADD   hl,hl   
07DD   85                     ADD   a,l   ; add digit in a to hl
07DE   6F                     LD   l,a   
07DF   3E 00                  LD   a,0   
07E1   8C                     ADC   a,h   
07E2   67                     LD   h,a   
07E3   18 E8                  JR   num1   
07E5                NUM2:        
07E5   0B                     DEC   bc   
07E6   08                     EX   af,af'   ; restore zero flag
07E7   20 07                  JR   nz,num3   
07E9   EB                     EX   de,hl   ; negate the value of hl
07EA   21 00 00               LD   hl,0   
07ED   B7                     OR   a   ; jump to sub2
07EE   ED 52                  SBC   hl,de   
07F0                NUM3:        
07F0   E5                     PUSH   hl   ; Put the number on the stack
07F1   DD E9                  JP   (ix)   ; and process the next character
07F3                UNDERSCORE:      
07F3                REMAIN:      
07F3   2A F4 48               LD   hl,(vRemain)   
07F6   E5                     PUSH   hl   
07F7   DD E9                  JP   (ix)   
07F9                RPAREN:      
07F9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07FC   FD 46 09               LD   b,(iy+9)   
07FF   DD E9                  JP   (ix)   
0801                             ; arg_list* block* -- ptr
0801                SEMICOLON:      
0801   D1                     POP   de   ; de = block* hl = heap*
0802   2A F0 48               LD   hl,(vHeapPtr)   
0805   AF                     XOR   a   
0806   77                     LD   (hl),a   ; compile null partial_array*
0807   23                     INC   hl   
0808   77                     LD   (hl),a   
0809   23                     INC   hl   
080A   73                     LD   (hl),e   ; compile block*
080B   23                     INC   hl   
080C   72                     LD   (hl),d   
080D   23                     INC   hl   
080E   D1                     POP   de   ; de = block*
080F   73                     LD   (hl),e   ; compile arg_list*
0810   23                     INC   hl   
0811   72                     LD   (hl),d   
0812   23                     INC   hl   
0813   ED 5B F0 48            LD   de,(vHeapPtr)   ; return lambda*
0817   D5                     PUSH   de   
0818   22 F0 48               LD   (vHeapPtr),hl   ; heap* += 4
081B   DD E9                  JP   (ix)   
081D                             ; shiftLeft
081D                             ; value count -- value2          shift left count places
081D                SHIFTLEFT:      
081D   50 59                  LD   de,bc   ; save IP
081F   C1                     POP   bc   ; bc = count
0820   41                     LD   b,c   ; b = loop counter
0821   E1                     POP   hl   
0822   04                     INC   b   ; test for counter=0 case
0823   18 01                  JR   shiftLeft2   
0825                SHIFTLEFT1:      
0825   29                     ADD   hl,hl   ; left shift hl
0826                SHIFTLEFT2:      
0826   10 FD                  DJNZ   shiftLeft1   
0828   E5                     PUSH   hl   
0829   42 4B                  LD   bc,de   ; restore IP
082B   DD E9                  JP   (ix)   
082D                             ; shiftRight
082D                             ; value count -- value2          shift left count places
082D                SHIFTRIGHT:      
082D   50 59                  LD   de,bc   ; save IP
082F   C1                     POP   bc   ; bc = count
0830   41                     LD   b,c   ; b = loop counter
0831   E1                     POP   hl   
0832   04                     INC   b   ; test for counter=0 case
0833   18 04                  JR   shiftRight2   
0835                SHIFTRIGHT1:      
0835   CB 3C                  SRL   h   ; right shift hl
0837   CB 1D                  RR   l   
0839                SHIFTRIGHT2:      
0839   10 FA                  DJNZ   shiftRight1   
083B   E5                     PUSH   hl   
083C   42 4B                  LD   bc,de   ; restore IP
083E   DD E9                  JP   (ix)   
0840                             ; string
0840                             ; -- ptr                        ; points to start of string chars,
0840                             ; length is stored at start - 2 bytes
0840                DBLQUOTE:      
0840                STRING:      
0840   2A F0 48               LD   hl,(vHeapPtr)   ; hl = heap*
0843   23                     INC   hl   ; skip length field to start
0844   23                     INC   hl   
0845   E5                     PUSH   hl   ; save start of string
0846   03                     INC   bc   ; point to next char
0847   18 03                  JR   string2   
0849                STRING1:      
0849   77                     LD   (hl),a   
084A   23                     INC   hl   ; increase count
084B   03                     INC   bc   ; point to next char
084C                STRING2:      
084C   0A                     LD   a,(bc)   
084D   FE 22                  CP   DQUOTE   ; " is the string terminator
084F   28 04                  JR   z,string3   
0851   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0853   20 F4                  JR   nz,string1   
0855                STRING3:      
0855   AF                     XOR   a   ; write NUL to terminate string
0856   77                     LD   (hl),a   ; hl = end of string
0857   23                     INC   hl   
0858   22 F0 48               LD   (vHeapPtr),hl   ; bump heap* to after end of string
085B   2B                     DEC   hl   ; hl = end of string without terminator
085C   D1                     POP   de   ; de = start of string
085D   D5                     PUSH   de   ; return start of string
085E   B7                     OR   a   ; hl = length bytes, de = start of string
085F   ED 52                  SBC   hl,de   
0861   EB                     EX   de,hl   
0862   2B                     DEC   hl   ; write length bytes to length field at start - 2
0863   72                     LD   (hl),d   
0864   2B                     DEC   hl   
0865   73                     LD   (hl),e   
0866   DD E9                  JP   (ix)   
0868                MINUS:       ; negative sign or subtract
0868   03                     INC   bc   ; check if sign of a number
0869   0A                     LD   a,(bc)   
086A   0B                     DEC   bc   
086B   FE 30                  CP   "0"   
086D   38 05                  JR   c,sub   
086F   FE 3A                  CP   "9"+1   
0871   DA 3E 03               JP   c,num_   
0874                SUB:         ; Subtract the value 2nd on stack from top of stack
0874   03                     INC   bc   
0875   FE 2D                  CP   "-"   
0877   20 05                  JR   nz,sub1   
0879   E1                     POP   hl   
087A   2B                     DEC   hl   
087B   C3 8C 04               JP   assign0   
087E                SUB1:        
087E   0B                     DEC   bc   
087F   D1                     POP   de   
0880   E1                     POP   hl   
0881   B7                     OR   a   
0882   ED 52                  SBC   hl,de   
0884   C3 96 03               JP   add3   
0887                ERROR1:      
0887   21 01 00               LD   hl,1   ; error 1: unknown command
088A   E5                     PUSH   hl   
088B   C3 B7 0C               JP   error   
088E                COMMENT:      
088E   03                     INC   bc   ; point to next char
088F   0A                     LD   a,(bc)   
0890   FE 20                  CP   " "   ; terminate on any char less than SP
0892   30 FA                  JR   nc,comment   
0894   0B                     DEC   bc   
0895   DD E9                  JP   (ix)   
0897                COMMAND_A:      
0897   CD 8B 0B               CALL   jumpTable   
089A   62                     DB   "b"   
089B   A3 08                  DW   absolute   
089D   64                     DB   "d"   
089E   B0 08                  DW   addrOf   
08A0   00                     DB   NUL   
08A1   87 08                  DW   error1   
08A3                             ; /ab absolute
08A3                             ; num -- num
08A3                ABSOLUTE:      
08A3   E1                     POP   hl   
08A4   CB 7C                  BIT   7,h   
08A6   C8                     RET   z   
08A7   AF                     XOR   a   
08A8   95                     SUB   l   
08A9   6F                     LD   l,a   
08AA   9F                     SBC   a,a   
08AB   94                     SUB   h   
08AC   67                     LD   h,a   
08AD   E5                     PUSH   hl   
08AE   DD E9                  JP   (ix)   
08B0                             ; /ad addrOf
08B0                             ; char -- addr
08B0                ADDROF:      
08B0   E1                     POP   hl   ; a = char
08B1   7D                     LD   a,l   
08B2   FE 7B                  CP   "z"+1   ; if a > z then exit
08B4   30 19                  JR   nc,addrOf2   
08B6   D6 41                  SUB   "A"   ; a - 65
08B8   38 15                  JR   c,addrOf2   ; if < A then exit
08BA   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08BC   38 06                  JR   c,addrOf1   
08BE   D6 06                  SUB   "a"-("Z"+1)   
08C0   FE 1A                  CP   "Z"-"A"+1   
08C2   38 0B                  JR   c,addrOf2   ; if < a then exit
08C4                ADDROF1:      
08C4   87                     ADD   a,a   ; double a
08C5   21 00 48               LD   hl,VARS   ; hl = VARS + a
08C8   85                     ADD   a,l   
08C9   6F                     LD   l,a   
08CA   3E 00                  LD   a,0   
08CC   8C                     ADC   a,h   
08CD   67                     LD   h,a   
08CE   E5                     PUSH   hl   
08CF                ADDROF2:      
08CF   DD E9                  JP   (ix)   
08D1                COMMAND_B:      
08D1   CD 8B 0B               CALL   jumpTable   
08D4   61                     DB   "a"   
08D5   EF 08                  DW   bufferArray   
08D7   63                     DB   "c"   
08D8   26 09                  DW   bufferChar   
08DA   64                     DB   "d"   
08DB   35 09                  DW   bufferDec   
08DD   68                     DB   "h"   
08DE   9A 09                  DW   bufferHex   
08E0   69                     DB   "i"   
08E1   CD 09                  DW   bufPtrInc   
08E3   72                     DB   "r"   
08E4   D7 09                  DW   break   
08E6   73                     DB   "s"   
08E7   F1 09                  DW   bufferString   
08E9   78                     DB   "x"   
08EA   0D 0A                  DW   bufferXSpaces   
08EC   00                     DB   NUL   
08ED   87 08                  DW   error1   
08EF                BUFFERARRAY:      
08EF   CD B4 06               CALL   go   
08F2   00 00                  DW   NUL   ; closure
08F4   F8 08                  DW   bufferArray_block   
08F6   88 0B                  DW   args1A2L   
08F8                BUFFERARRAY_BLOCK:      
08F8   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 2F 62 69 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd/bi $b++ $b $c</br )^}"   ; block
0926                             ;     ld (vTemp1),bc
0926                             ;     ld (vTemp2),ix
0926                             ;     ld de,(vBufPtr)
0926                             ;     ld a,"["
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld a," "
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld (vBufPtr),de
0926                             ;     pop hl
0926                             ;     dec hl
0926                             ;     dec hl
0926                             ;     dec hl
0926                             ;     ld b,(hl)
0926                             ;     dec hl
0926                             ;     ld c,(hl)
0926                             ;     inc hl
0926                             ;     inc hl
0926                             ;     inc hl
0926                             ;     push hl
0926                             ;     ld ix,bufferArray3
0926                             ;     jp (ix)
0926                             ; bufferArray2:
0926                             ;     dec bc
0926                             ;     ld e,(hl)
0926                             ;     inc hl
0926                             ;     ld d,(hl)
0926                             ;     inc hl
0926                             ;     push hl
0926                             ;     push de
0926                             ;     jp bufferDec
0926                             ; bufferArray3:
0926                             ;     pop hl
0926                             ;     ld a,c
0926                             ;     or b
0926                             ;     jr nz,bufferArray2
0926                             ;     ld de,(vBufPtr)
0926                             ;     ld a," "
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld a,"]"
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld (vBufPtr),de
0926                             ;     ld bc,(vTemp1)
0926                             ;     ld ix,(vTemp2)
0926                             ;     jp (ix)
0926                             ; /bc buffer char
0926                             ; char -- length
0926                BUFFERCHAR:      
0926   D1                     POP   de   ; e = char
0927   2A EC 48               LD   hl,(vBufPtr)   ; hl = buffer*
092A   73                     LD   (hl),e   ; e -> buffer*
092B   23                     INC   hl   ; buffer*++
092C   22 EC 48               LD   (vBufPtr),hl   ; save buffer*' in pointer
092F   11 01 00               LD   de,1   ; return 1 byte
0932   D5                     PUSH   de   
0933   DD E9                  JP   (ix)   
0935                             ; /bd buffer decimal
0935                             ; value -- length               ; length can be used to rewind buffer*
0935                BUFFERDEC:      
0935   ED 5B EC 48            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0939   D9                     EXX      
093A   E1                     POP   hl   ; hl = value
093B   CD 51 09               CALL   bufferDec0   
093E   D9                     EXX      ; de = buffer*' bc = IP
093F   3E 20                  LD   a," "   ; append space to buffer
0941   12                     LD   (de),a   
0942   13                     INC   de   
0943   2A EC 48               LD   hl,(vBufPtr)   ; hl = buffer*
0946   ED 53 EC 48            LD   (vBufPtr),de   ; update buffer* with buffer*'
094A   EB                     EX   de,hl   ; hl = length
094B   B7                     OR   a   
094C   ED 52                  SBC   hl,de   
094E   E5                     PUSH   hl   ; return length
094F   DD E9                  JP   (ix)   
0951                             ; hl = value
0951                             ; de' = buffer*
0951                             ; a, bc, de, hl destroyed
0951                BUFFERDEC0:      
0951   CB 7C                  BIT   7,h   
0953   28 0C                  JR   z,bufferDec1   
0955   D9                     EXX      
0956   3E 2D                  LD   a,"-"   
0958   12                     LD   (de),a   
0959   13                     INC   de   
095A   D9                     EXX      
095B   AF                     XOR   a   
095C   95                     SUB   l   
095D   6F                     LD   l,a   
095E   9F                     SBC   a,a   
095F   94                     SUB   h   
0960   67                     LD   h,a   
0961                BUFFERDEC1:      
0961   0E 00                  LD   c,0   ; leading zeros flag = false
0963   11 F0 D8               LD   de,-10000   
0966   CD 81 09               CALL   bufferDec2   
0969   11 18 FC               LD   de,-1000   
096C   CD 81 09               CALL   bufferDec2   
096F   11 9C FF               LD   de,-100   
0972   CD 81 09               CALL   bufferDec2   
0975   1E F6                  LD   e,-10   
0977   CD 81 09               CALL   bufferDec2   
097A   0C                     INC   c   ; flag = true for at least digit
097B   1E FF                  LD   e,-1   
097D   CD 81 09               CALL   bufferDec2   
0980   C9                     RET      
0981                BUFFERDEC2:      
0981   06 2F                  LD   b,"0"-1   
0983                BUFFERDEC3:      
0983   04                     INC   b   
0984   19                     ADD   hl,de   
0985   38 FC                  JR   c,bufferDec3   
0987   ED 52                  SBC   hl,de   
0989   3E 30                  LD   a,"0"   
098B   B8                     CP   b   
098C   20 05                  JR   nz,bufferDec4   
098E   AF                     XOR   a   
098F   B1                     OR   c   
0990   C8                     RET   z   
0991   18 01                  JR   bufferDec5   
0993                BUFFERDEC4:      
0993   0C                     INC   c   
0994                BUFFERDEC5:      
0994   78                     LD   a,b   
0995   D9                     EXX      
0996   12                     LD   (de),a   
0997   13                     INC   de   
0998   D9                     EXX      
0999   C9                     RET      
099A                             ; /bh buffer hex
099A                             ; value -- length               ; length can be used to rewind buffer*
099A                BUFFERHEX:      
099A   E1                     POP   hl   ; hl = value
099B   ED 5B EC 48            LD   de,(vBufPtr)   
099F   7C                     LD   a,h   
09A0   CD B9 09               CALL   bufferHex1   
09A3   7D                     LD   a,l   
09A4   CD B9 09               CALL   bufferHex1   
09A7   3E 20                  LD   a," "   ; append space to buffer
09A9   12                     LD   (de),a   
09AA   13                     INC   de   
09AB   EB                     EX   de,hl   
09AC   ED 5B EC 48            LD   de,(vBufPtr)   
09B0   22 EC 48               LD   (vBufPtr),hl   
09B3   B7                     OR   a   
09B4   ED 52                  SBC   hl,de   
09B6   E5                     PUSH   hl   
09B7   DD E9                  JP   (ix)   
09B9                BUFFERHEX1:      
09B9   F5                     PUSH   af   
09BA   1F                     RRA      
09BB   1F                     RRA      
09BC   1F                     RRA      
09BD   1F                     RRA      
09BE   CD C2 09               CALL   bufferHex2   
09C1   F1                     POP   af   
09C2                BUFFERHEX2:      
09C2   E6 0F                  AND   0x0F   
09C4   C6 90                  ADD   a,0x90   
09C6   27                     DAA      
09C7   CE 40                  ADC   a,0x40   
09C9   27                     DAA      
09CA   12                     LD   (de),a   
09CB   13                     INC   de   
09CC   C9                     RET      
09CD                             ; /bi buf pointer increment
09CD                             ; length --
09CD                BUFPTRINC:      
09CD   D1                     POP   de   ; de = length
09CE   2A EC 48               LD   hl,(vBufPtr)   
09D1   19                     ADD   hl,de   
09D2   22 EC 48               LD   (vBufPtr),hl   
09D5   DD E9                  JP   (ix)   
09D7                             ; /br break from loop
09D7                             ; --
09D7                BREAK:       
09D7   E1                     POP   hl   
09D8   7D                     LD   a,l   
09D9   B4                     OR   h   
09DA   28 02                  JR   z,break1   
09DC   DD E9                  JP   (ix)   
09DE                BREAK1:      
09DE   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09E0   FD 54                  LD   d,iyh   
09E2   21 08 00               LD   hl,8   
09E5   19                     ADD   hl,de   
09E6   23                     INC   hl   
09E7   23                     INC   hl   
09E8   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09EB   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09EE   C3 3B 05               JP   blockEnd   
09F1                             ; /bs buffered string
09F1                             ; string* -- length
09F1                BUFFERSTRING:      
09F1   E1                     POP   hl   ; hl = string*
09F2   ED 5B EC 48            LD   de,(vBufPtr)   ; de = buffer*
09F6   18 03                  JR   bufferString1   
09F8                BUFFERSTRING0:      
09F8   12                     LD   (de),a   ; a -> buffer*
09F9   13                     INC   de   ; string*++ buffer++
09FA   23                     INC   hl   
09FB                BUFFERSTRING1:      
09FB   7E                     LD   a,(hl)   ; a <- string*
09FC   B7                     OR   a   ; if NUL exit loop
09FD   20 F9                  JR   nz,bufferString0   
09FF   2A EC 48               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0A02   ED 53 EC 48            LD   (vBufPtr),de   ; save buffer*' in pointer
0A06   EB                     EX   de,hl   ; hl = length
0A07   B7                     OR   a   
0A08   ED 52                  SBC   hl,de   
0A0A   E5                     PUSH   hl   ; return length
0A0B   DD E9                  JP   (ix)   
0A0D                             ; /bx buffered x spaces
0A0D                             ; length -- length
0A0D                BUFFERXSPACES:      
0A0D   D1                     POP   de   ; bc = length
0A0E   D5                     PUSH   de   ; return length
0A0F   2A EC 48               LD   hl,(vBufPtr)   ; hl = buffer*
0A12   18 04                  JR   bufferXSpaces2   
0A14                BUFFERXSPACES1:      
0A14   36 20                  LD   (hl)," "   
0A16   23                     INC   hl   
0A17   1B                     DEC   de   
0A18                BUFFERXSPACES2:      
0A18   7B                     LD   a,e   
0A19   B2                     OR   d   
0A1A   20 F8                  JR   nz,bufferXSpaces1   
0A1C   22 EC 48               LD   (vBufPtr),hl   ; save buffer*'
0A1F   DD E9                  JP   (ix)   
0A21                COMMAND_I:      
0A21   CD 8B 0B               CALL   jumpTable   
0A24   6E                     DB   "n"   
0A25   1F 0B                  DW   input   
0A27   76                     DB   "v"   
0A28   C2 03                  DW   invert   
0A2A   00                     DB   NUL   
0A2B   87 08                  DW   error1   
0A2D                COMMAND_P:      
0A2D   CD 8B 0B               CALL   jumpTable   
0A30   61                     DB   "a"   
0A31   42 0A                  DW   partial   
0A33   62                     DB   "b"   
0A34   62 0A                  DW   printBuffer   
0A36   63                     DB   "c"   
0A37   85 0A                  DW   printChars   
0A39   6B                     DB   "k"   
0A3A   97 0A                  DW   printStack   
0A3C   78                     DB   "x"   
0A3D   99 0A                  DW   printX   
0A3F   00                     DB   NUL   
0A40   87 08                  DW   error1   
0A42                             ; partial
0A42                             ; array* lambda* -- lambda1*
0A42                PARTIAL:      
0A42   E1                     POP   hl   ; h1 = lambda*
0A43   ED 5B F0 48            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A47   ED 43 FE 48            LD   (vTemp1),bc   ; save IP
0A4B   01 06 00               LD   bc,6   ; bc = count
0A4E   ED B0                  LDIR      ; clone lambda
0A50   ED 4B FE 48            LD   bc,(vTemp1)   ; restore IP
0A54   2A F0 48               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A57   ED 53 F0 48            LD   (vHeapPtr),de   ; heap* += 6
0A5B   D1                     POP   de   ; de = array*
0A5C   E5                     PUSH   hl   ; return partial_array*
0A5D   73                     LD   (hl),e   ; compile array*
0A5E   23                     INC   hl   
0A5F   72                     LD   (hl),d   
0A60   DD E9                  JP   (ix)   
0A62                             ; printBuffer
0A62                             ; --
0A62                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0A62                PRINTBUFFER:      
0A62   CD B4 06               CALL   go   
0A65   00 00                  DW   NUL   ; NUL closure
0A67   6B 0A                  DW   printBuffer_block   ; $+4?
0A69   7D 0B                  DW   args1A0L   
0A6B                PRINTBUFFER_BLOCK:      
0A6B   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A85                             ; printChars
0A85                             ; char* len --
0A85                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A85                PRINTCHARS:      
0A85   E1                     POP   hl   ; hl = count - 1
0A86   2B                     DEC   hl   
0A87   D1                     POP   de   ; de = char*
0A88   C3 8D 0A               JP   printChars2   
0A8B                PRINTCHARS1:      
0A8B   13                     INC   de   ; char*++
0A8C   2B                     DEC   hl   ; count--
0A8D                PRINTCHARS2:      
0A8D   1A                     LD   a,(de)   ; print char at char*
0A8E   CD 85 00               CALL   putchar   
0A91   7D                     LD   a,l   ; count == 0?
0A92   B4                     OR   h   
0A93   20 F6                  JR   nz,printChars1   ; if not loop
0A95   DD E9                  JP   (ix)   
0A97                             ; /pk print stack
0A97                             ; --
0A97                PRINTSTACK:      
0A97                             ;     ld (vTemp1),bc
0A97                             ;     call printStr
0A97                             ;     .cstr "=> "
0A97                             ;     ld hl,STACK
0A97                             ;     sbc hl,sp
0A97                             ;     srl h
0A97                             ;     rr l
0A97                             ;     ld bc,hl
0A97                             ;     ld hl,STACK
0A97                             ;     jr printStack2
0A97                             ; printStack1:
0A97                             ;     dec bc
0A97                             ;     dec hl
0A97                             ;     ld d,(hl)
0A97                             ;     dec hl
0A97                             ;     ld e,(hl)
0A97                             ;     ex de,hl
0A97                             ;     call prthex
0A97                             ;     ex de,hl
0A97                             ;     ld a," "
0A97                             ;     call putchar
0A97                             ; printStack2:
0A97                             ;     ld a,c
0A97                             ;     or b
0A97                             ;     jr nz,printStack1
0A97                             ;     call prompt
0A97                             ;     ld bc,(vTemp1)
0A97   DD E9                  JP   (ix)   
0A99                PRINTX:      
0A99   CD B4 06               CALL   go   
0A9C   00 00                  DW   NUL   ; NUL closure
0A9E   A2 0A                  DW   printX_block   
0AA0   7D 0B                  DW   args1A0L   
0AA2                PRINTX_BLOCK:      
0AA2   7B 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 20 24 61 20 2F 70 63 7D 00 .CSTR   "{/vb$a-/vb= /vb $a /pc}"   ; block
0ABA                SIZE:        
0ABA   E1                     POP   hl   
0ABB   2B                     DEC   hl   ; skip magic byte
0ABC   2B                     DEC   hl   ; skip type tag
0ABD   2B                     DEC   hl   ; msb size
0ABE   56                     LD   d,(hl)   
0ABF   2B                     DEC   hl   ; lsb size
0AC0   5E                     LD   e,(hl)   
0AC1   D5                     PUSH   de   
0AC2   DD E9                  JP   (ix)   
0AC4                COMMAND_V:      
0AC4   CD 8B 0B               CALL   jumpTable   
0AC7   62                     DB   "b"   
0AC8   E8 0A                  DW   varBufPtr   
0ACA   68                     DB   "h"   
0ACB   F1 0A                  DW   varHeapPtr   
0ACD   74                     DB   "t"   
0ACE   FA 0A                  DW   varTIBPtr   
0AD0   42                     DB   "B"   
0AD1   D9 0A                  DW   constBufStart   
0AD3   54                     DB   "T"   
0AD4   E3 0A                  DW   constTIBStart   
0AD6   00                     DB   NUL   
0AD7   87 08                  DW   error1   
0AD9                CONSTBUFSTART:      
0AD9   11 00 4B               LD   de,BUF   
0ADC   18 28                  JR   constant   
0ADE                CONSTHEAPSTART:      
0ADE   11 00 4D               LD   de,HEAP   
0AE1   18 23                  JR   constant   
0AE3                CONSTTIBSTART:      
0AE3   11 00 4A               LD   de,TIB   
0AE6   18 1E                  JR   constant   
0AE8                VARBUFPTR:      
0AE8   ED 5B EC 48            LD   de,(vBufPtr)   
0AEC   21 EC 48               LD   hl,vBufPtr   
0AEF   18 12                  JR   variable   
0AF1                VARHEAPPTR:      
0AF1   ED 5B F0 48            LD   de,(vHeapPtr)   
0AF5   21 F0 48               LD   hl,vHeapPtr   
0AF8   18 09                  JR   variable   
0AFA                VARTIBPTR:      
0AFA   ED 5B EA 48            LD   de,(vTIBPtr)   
0AFE   21 EA 48               LD   hl,vTIBPtr   
0B01   18 00                  JR   variable   
0B03                VARIABLE:      
0B03   22 F2 48               LD   (vPointer),hl   
0B06                CONSTANT:      
0B06   D5                     PUSH   de   
0B07   DD E9                  JP   (ix)   
0B09                CHARS:       
0B09   21 01 00               LD   hl,1   
0B0C                CHARS1:      
0B0C   22 E6 48               LD   (vDataWidth),hl   
0B0F   DD E9                  JP   (ix)   
0B11                DECIMAL:      
0B11   21 0A 00               LD   hl,10   
0B14                DECIMAL1:      
0B14   22 E8 48               LD   (vNumBase),hl   
0B17   DD E9                  JP   (ix)   
0B19                HEXADECIMAL:      
0B19   21 10 00               LD   hl,16   
0B1C   C3 14 0B               JP   decimal1   
0B1F                             ; Z80 port input
0B1F                             ; port -- value
0B1F                INPUT:       
0B1F   E1                     POP   hl   
0B20   59                     LD   e,c   ; save IP
0B21   4D                     LD   c,l   
0B22   ED 68                  IN   l,(c)   
0B24   26 00                  LD   h,0   
0B26   4B                     LD   c,e   ; restore IP
0B27   E5                     PUSH   hl   
0B28   DD E9                  JP   (ix)   
0B2A                KEY:         
0B2A   CD 81 00               CALL   getchar   
0B2D   26 00                  LD   h,0   
0B2F   6F                     LD   l,a   
0B30   E5                     PUSH   hl   
0B31   DD E9                  JP   (ix)   
0B33                             ; Z80 port output
0B33                             ; value port --
0B33                OUTPUT:      
0B33   E1                     POP   hl   
0B34   59                     LD   e,c   ; save IP
0B35   4D                     LD   c,l   
0B36   E1                     POP   hl   
0B37   ED 69                  OUT   (c),l   
0B39   4B                     LD   c,e   ; restore IP
0B3A   DD E9                  JP   (ix)   
0B3C                NUMBERS:      
0B3C   21 02 00               LD   hl,2   
0B3F   C3 0C 0B               JP   chars1   
0B42                             ; 
0B42                             ; 
0B42                             ; 
0B42                             ; 
0B42                FILTER:      
0B42                MAP:         
0B42                SCAN:        
0B42   DD E9                  JP   (ix)   
0B44                ZPRT:        
0B44   CD B4 06               CALL   go   
0B47   00 00                  DW   NUL   ; closure
0B49   51 0B                  DW   zprt_block   
0B4B   4F 0B                  DW   zprt_args   
0B4D   02                     DB   2   ; num args + locals
0B4E   01                     DB   1   ; num locals
0B4F                ZPRT_ARGS:      
0B4F   6E 73                  DB   "ns"   
0B51                ZPRT_BLOCK:      
0B51   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B78                             ;*******************************************************************
0B78                             ; reusable arglists
0B78                             ;*******************************************************************
0B78                ARGS0A1L_:      ; zero args one local
0B78   01                     DB   1   ; num args + locals
0B79   01                     DB   1   ; num locals
0B7A                ARGS0A1L:      
0B7A   61                     DB   "a"   
0B7B                ARGS1A0L_:      ; one arg zero locals
0B7B   01                     DB   1   ; num args + locals
0B7C   00                     DB   0   ; num locals
0B7D                ARGS1A0L:      
0B7D   61                     DB   "a"   
0B7E                ARGS1A1L_:      ; one arg one local
0B7E   02                     DB   2   ; num args + locals
0B7F   01                     DB   1   ; num locals
0B80                ARGS1A1L:      
0B80   61 62                  DB   "ab"   
0B82                ARGS2A0L_:      ; two args zero locals
0B82   02                     DB   2   ; num args + locals
0B83   00                     DB   0   ; num locals
0B84                ARGS2A0L:      
0B84   61 62                  DB   "ab"   
0B86                ARGS1A2L_:      ; one arg two locals
0B86   03                     DB   3   ; num args + locals
0B87   02                     DB   2   ; num locals
0B88                ARGS1A2L:      
0B88   61 62 63               DB   "abc"   
0B8B                             ;*******************************************************************
0B8B                             ; general routines
0B8B                             ;*******************************************************************
0B8B                             ; followed by a table
0B8B                             ; db char
0B8B                             ; dw addr
0B8B                             ; the final item must have char == NUL
0B8B                JUMPTABLE:      
0B8B   03                     INC   bc   
0B8C   E1                     POP   hl   
0B8D                JUMPTABLE0:      
0B8D   AF                     XOR   a   
0B8E   BE                     CP   (hl)   
0B8F   28 09                  JR   z,jumpTable1   
0B91   0A                     LD   a,(bc)   
0B92   BE                     CP   (hl)   
0B93   28 06                  JR   z,jumpTable2   
0B95   23                     INC   hl   
0B96   23                     INC   hl   
0B97   23                     INC   hl   
0B98   18 F3                  JR   jumpTable0   
0B9A                JUMPTABLE1:      
0B9A   0B                     DEC   bc   
0B9B                JUMPTABLE2:      
0B9B   23                     INC   hl   
0B9C   5E                     LD   e,(hl)   
0B9D   23                     INC   hl   
0B9E   56                     LD   d,(hl)   
0B9F   EB                     EX   de,hl   
0BA0   E9                     JP   (hl)   
0BA1                PRTSTR0:      
0BA1   CD 85 00               CALL   putchar   
0BA4   23                     INC   hl   
0BA5                PRTSTR:      
0BA5   7E                     LD   a,(hl)   
0BA6   B7                     OR   a   
0BA7   20 F8                  JR   nz,prtstr0   
0BA9   C9                     RET      
0BAA                             ; **************************************************************************
0BAA                             ; calculate nesting value
0BAA                             ; a is char to be tested,
0BAA                             ; e is the nesting value (initially 0)
0BAA                             ; e is increased by ( and [
0BAA                             ; e is decreased by ) and ]
0BAA                             ; e has its bit 7 toggled by `
0BAA                             ; limited to 127 levels
0BAA                             ; **************************************************************************
0BAA                NESTING:      
0BAA   FE 22                  CP   DQUOTE   ; quote char
0BAC   28 06                  JR   z,nesting0   
0BAE   FE 60                  CP   "`"   ; quote char
0BB0   28 02                  JR   z,nesting0   
0BB2   18 0A                  JR   nesting1   
0BB4                NESTING0:      
0BB4   CB 7B                  BIT   7,e   
0BB6   28 03                  JR   z,nesting1a   
0BB8   CB BB                  RES   7,e   
0BBA   C9                     RET      
0BBB                NESTING1A:      
0BBB   CB FB                  SET   7,e   
0BBD   C9                     RET      
0BBE                NESTING1:      
0BBE   CB 7B                  BIT   7,e   
0BC0   C0                     RET   nz   
0BC1   FE 7B                  CP   "{"   
0BC3   28 08                  JR   z,nesting2   
0BC5   FE 5B                  CP   "["   
0BC7   28 04                  JR   z,nesting2   
0BC9   FE 28                  CP   "("   
0BCB   20 02                  JR   nz,nesting3   
0BCD                NESTING2:      
0BCD   1C                     INC   e   
0BCE   C9                     RET      
0BCF                NESTING3:      
0BCF   FE 7D                  CP   "}"   
0BD1   28 07                  JR   z,nesting4   
0BD3   FE 5D                  CP   "]"   
0BD5   28 03                  JR   z,nesting4   
0BD7   FE 29                  CP   ")"   
0BD9   C0                     RET   nz   
0BDA                NESTING4:      
0BDA   1D                     DEC   e   
0BDB   C9                     RET      
0BDC                PROMPT:      
0BDC   CD EC 0B               CALL   printStr   
0BDF   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BE4   C9                     RET      
0BE5                CRLF:        
0BE5   CD EC 0B               CALL   printStr   
0BE8   0D 0A 00               .CSTR   "\r\n"   
0BEB   C9                     RET      
0BEC                             ; prints a null teminated string
0BEC                             ; the string should be immediately following the call
0BEC                PRINTSTR:      
0BEC   E3                     EX   (sp),hl   ; swap			
0BED   CD A5 0B               CALL   prtstr   
0BF0   23                     INC   hl   ; inc past NUL
0BF1   E3                     EX   (sp),hl   ; put it back	
0BF2   C9                     RET      
0BF3                INIT:        
0BF3   DD 2A EE 48            LD   ix,(vNext)   
0BF7   FD 21 80 47            LD   iy,STACK   
0BFB   21 80 01               LD   hl,isysVars   
0BFE   11 E6 48               LD   de,sysVars   
0C01   01 10 00               LD   bc,8 * 2   
0C04   ED B0                  LDIR      
0C06   21 00 48               LD   hl,vars   ; 52 vars LO HI
0C09   06 34                  LD   b,26*2   
0C0B   AF                     XOR   a   
0C0C                INIT0:       
0C0C   77                     LD   (hl),a   
0C0D   23                     INC   hl   
0C0E   10 FC                  DJNZ   init0   
0C10   C9                     RET      
0C11                START:       
0C11   31 80 47               LD   sp,STACK   ; start Monty
0C14   CD F3 0B               CALL   init   ; setups
0C17   CD EC 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0C1A   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0C27                INTERPRET:      
0C27   CD DC 0B               CALL   prompt   
0C2A   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C2D   21 00 4A               LD   hl,TIB   
0C30   22 EA 48               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C33                INTERPRET2:      ; calculate nesting
0C33   1E 00                  LD   e,0   ; initilize nesting value
0C35   C5                     PUSH   bc   ; save offset into TIB,
0C36                             ; bc is also the count of chars in TIB
0C36   21 00 4A               LD   hl,TIB   ; hl is start of TIB
0C39   18 06                  JR   interpret4   
0C3B                INTERPRET3:      
0C3B   7E                     LD   a,(hl)   ; a = char in TIB
0C3C   23                     INC   hl   ; inc pointer into TIB
0C3D   0B                     DEC   bc   ; dec count of chars in TIB
0C3E   CD AA 0B               CALL   nesting   ; update nesting value
0C41                INTERPRET4:      
0C41   79                     LD   a,c   ; is count zero?
0C42   B0                     OR   b   
0C43   20 F6                  JR   nz,interpret3   ; if not loop
0C45   C1                     POP   bc   ; restore offset into TIB
0C46                INTERPRET5:      
0C46   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C49   FE 20                  CP   $20   ; compare to space
0C4B   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C4D   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C4F                             ; ???? NEEDED?
0C4F   28 3B                  JR   z,interpret8   
0C51   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C53   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C55   FE 05                  CP   CTRL_E   
0C57   CA DA 0C               JP   z,edit_   
0C5A   FE 08                  CP   CTRL_H   
0C5C   CA CA 0C               JP   z,backSpace_   
0C5F   FE 0A                  CP   CTRL_J   
0C61   CA F2 0C               JP   z,reEdit_   
0C64   FE 13                  CP   CTRL_S   
0C66   CA F5 0C               JP   z,printStack_   
0C69                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C69                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C69                             ; DB     lsb(list_)       ; FF  ^L 12
0C69                             ; DB     lsb(printStack_) ; DLE ^P 16
0C69                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C69                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C69                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C69                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C69                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C69                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C69                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C69                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C69                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C69                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C69                INTERPRET5A:      
0C69                             ; ld (vTIBPtr),bc
0C69                             ; ld bc,(vTIBPtr)
0C69   18 C8                  JR   interpret2   
0C6B                INTERPRET6:      
0C6B   21 00 4A               LD   hl,TIB   
0C6E   09                     ADD   hl,bc   
0C6F   77                     LD   (hl),a   ; store the character in textbuf
0C70   03                     INC   bc   
0C71   CD 85 00               CALL   putchar   ; echo character to screen
0C74   CD AA 0B               CALL   nesting   
0C77   18 CD                  JR   interpret5   ; wait for next character
0C79                INTERPRET7:      
0C79   21 00 4A               LD   hl,TIB   
0C7C   09                     ADD   hl,bc   
0C7D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C7F   23                     INC   hl   
0C80   36 0A                  LD   (hl),"\n"   
0C82   23                     INC   hl   
0C83   03                     INC   bc   
0C84   03                     INC   bc   
0C85   CD E5 0B               CALL   crlf   ; echo character to screen
0C88   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C89   B7                     OR   a   
0C8A   20 BA                  JR   nz,interpret5   
0C8C                INTERPRET8:      
0C8C   21 00 4A               LD   hl,TIB   
0C8F   09                     ADD   hl,bc   
0C90   22 EA 48               LD   (vTIBPtr),hl   
0C93   01 00 4A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C96                             ; we pressed enter
0C96   0B                     DEC   bc   
0C97                NEXT:        
0C97   03                     INC   bc   ; Increment the IP
0C98   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C99   FE 20                  CP   " "   ; whitespace?
0C9B   28 FA                  JR   z,next   ; space? ignore
0C9D   38 09                  JR   c,next1   
0C9F   D6 20                  SUB   " "   
0CA1   6F                     LD   l,a   ; index into table
0CA2   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CA4   6E                     LD   l,(hl)   ; get low jump address
0CA5   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CA7   E9                     JP   (hl)   ; Jump to routine
0CA8                NEXT1:       
0CA8   FE 00                  CP   NUL   ; end of input string?
0CAA   28 03                  JR   z,exit   
0CAC   C3 27 0C               JP   interpret   ; no, other whitespace, macros?
0CAF                EXIT:        
0CAF   03                     INC   bc   
0CB0   60 69                  LD   hl,bc   
0CB2   E9                     JP   (hl)   
0CB3                RUN:         
0CB3   C1                     POP   bc   
0CB4   0B                     DEC   bc   
0CB5   DD E9                  JP   (ix)   
0CB7                ERROR:       
0CB7   CD B3 0C               CALL   run   
0CBA   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0CC7   C3 27 0C               JP   interpret   
0CCA                BACKSPACE_:      
0CCA   79                     LD   a,c   
0CCB   B0                     OR   b   
0CCC   CA 33 0C               JP   z,interpret2   
0CCF   0B                     DEC   bc   
0CD0   CD EC 0B               CALL   printStr   
0CD3   08 20 08 00            .CSTR   "\b \b"   
0CD7   C3 33 0C               JP   interpret2   
0CDA                             ; edit
0CDA                EDIT_:       
0CDA   CD B3 0C               CALL   run   
0CDD   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0CEF   C3 27 0C               JP   interpret   
0CF2                REEDIT_:      
0CF2   C3 27 0C               JP   interpret   
0CF5                PRINTSTACK_:      
0CF5   CD B3 0C               CALL   run   
0CF8   2F 70 6B 00            .CSTR   "/pk"   
0CFC   C3 27 0C               JP   interpret   
0CFF                             ; editDef:
0CFF                             ;     pop hl                      ; pop ret address
0CFF                             ;     ex (sp),hl                  ; swap with TOS
0CFF                             ;     push hl                     ; dup TOS
0CFF                             ;     ld a,l                      ; a = ident
0CFF                             ;     ld de,TIB                   ; de = start of TIB
0CFF                             ;     ld (vTIBPtr),de             ; update TIB*
0CFF                             ;     push ix                     ; save NEXT
0CFF                             ;     ld ix,editDef0              ; NEXT = editDef0
0CFF                             ;     jp lookupRef                ; convert letter into address
0CFF                             ; editDef0:
0CFF                             ;     ld e,(hl)                   ; de = (hl++)
0CFF                             ;     inc hl
0CFF                             ;     ld d,(hl)
0CFF                             ;     ld a,d                      ; de == 0 ?
0CFF                             ;     or e
0CFF                             ;     jr z,editDef4
0CFF                             ;     ld ix,editDef3              ; NEXT = editDef3
0CFF                             ;     ex de,hl
0CFF                             ;     ld a,(hl)
0CFF                             ;     cp "{"
0CFF                             ;     jr nz,editDef1
0CFF                             ;     jp editBlock0               ; convert letter into address
0CFF                             ; editDef1:
0CFF                             ;     cp "("
0CFF                             ;     jr nz,editDef2
0CFF                             ;     jp editBlock0               ; convert letter into address
0CFF                             ; editDef2:
0CFF                             ;     jp editLambda
0CFF                             ; editDef3:
0CFF                             ;     ld a," "                    ; write assign
0CFF                             ;     call writeChar
0CFF                             ;     pop hl                      ; a = ident
0CFF                             ;     ld a,l
0CFF                             ;     call writeChar
0CFF                             ;     ld a,"="                    ; write assign
0CFF                             ;     call writeChar
0CFF                             ;     ld ix,editDef4              ; NEXT = editDef4
0CFF                             ;     jp printTIB
0CFF                             ; editDef4:
0CFF                             ;     pop ix                      ; restore NEXT
0CFF                             ;     jp (ix)
0CFF                             ; writeChar:
0CFF                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CFF                             ;     ld (de),a                   ; write ident
0CFF                             ;     inc de
0CFF                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CFF                             ;     ret
0CFF                             ; ; printTIB
0CFF                             ; printTIB:
0CFF                             ;     ld hl,(vTIBPtr)
0CFF                             ;     ld de,TIB
0CFF                             ;     or a
0CFF                             ;     sbc hl,de
0CFF                             ;     jp printTIB2
0CFF                             ; printTIB1:
0CFF                             ;     ld a,(de)
0CFF                             ;     call putchar
0CFF                             ; printTIB2:
0CFF                             ;     ld a,l
0CFF                             ;     or h
0CFF                             ;     jr nz,printTIB1
0CFF                             ;     jp (ix)
0CFF                             ; editBlock:
0CFF                             ;     pop hl                      ; hl = block*
0CFF                             ; editBlock0:
0CFF                             ;     push ix                     ; save next
0CFF                             ;     push hl                     ; push block*
0CFF                             ;     push hl                     ; push block*
0CFF                             ;     ld ix,(editBlock2)
0CFF                             ;     jp blockLength
0CFF                             ; editBlock1:
0CFF                             ;     pop hl                      ; bc = length, (sp) = IP
0CFF                             ;     pop de                      ; de = block*
0CFF                             ;     ld a,l
0CFF                             ;     or h
0CFF                             ;     jr z,editBlock2
0CFF                             ;     push bc
0CFF                             ;     ld bc,hl
0CFF                             ;     ex de,hl                    ; hl = block*
0CFF                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CFF                             ;     ldir                        ; copy block to TIB
0CFF                             ;     ld (vTIBPtr),de              ; save TIB*
0CFF                             ;     pop bc
0CFF                             ; editBlock2:
0CFF                             ;     pop ix                      ; restore next
0CFF                             ;     jp (ix)
0CFF                             ; editLambda:
0CFF                             ;     jp (ix)
0CFF                             ; editArray:
0CFF                             ;     jp (ix)
0CFF                             ; editArglist:
0CFF                             ;     jp (ix)
0CFF                             ; ; blockLength
0CFF                             ; ; addr1 -- length
0CFF                             ; blockLength:
0CFF                             ;     pop hl                      ; block*
0CFF                             ;     push hl                     ; save block*
0CFF                             ;     inc hl                      ; skip first char
0CFF                             ;     ld d,1                      ; increase nesting
0CFF                             ; blockLength1:                   ; Skip to end of definition
0CFF                             ;     ld a,(hl)                   ; Get the next character
0CFF                             ;     inc hl                      ; Point to next character
0CFF                             ;     cp " " + 1                  ; ignore whitespace
0CFF                             ;     jr c,blockLength1
0CFF                             ;     cp ")"
0CFF                             ;     jr z,blockLength4
0CFF                             ;     cp "}"
0CFF                             ;     jr z,blockLength4
0CFF                             ;     cp "]"
0CFF                             ;     jr z,blockLength4
0CFF                             ;     cp "("
0CFF                             ;     jr z,blockLength2
0CFF                             ;     cp "{"
0CFF                             ;     jr z,blockLength2
0CFF                             ;     cp "["
0CFF                             ;     jr z,blockLength2
0CFF                             ;     cp "'"
0CFF                             ;     jr z,blockLength3
0CFF                             ;     cp "`"
0CFF                             ;     jr z,blockLength3
0CFF                             ;     cp DQUOTE
0CFF                             ;     jr z,blockLength3
0CFF                             ;     jr blockLength1
0CFF                             ; blockLength2:
0CFF                             ;     inc d
0CFF                             ;     jr blockLength1
0CFF                             ; blockLength4:
0CFF                             ;     dec d
0CFF                             ;     jr nz, blockLength1         ; get the next element
0CFF                             ; blockLength3:
0CFF                             ;     ld a,$80
0CFF                             ;     xor d
0CFF                             ;     ld d,a
0CFF                             ;     jr nz, blockLength1
0CFF                             ;     pop hl                      ; hl = block*
0CFF                             ;     or a
0CFF                             ;     sbc hl,de
0CFF                             ;     push hl
0CFF                             ;     jp (ix)
0CFF                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CFF                             ; \a start of stack \#3 depth \b base \$ prompt
0CFF                             ; DW dStack               ; a vS0 start of datastack			
0CFF                             ; DW FALSE                ; b vBase16
0CFF                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CFF                             ; DW 0                    ; d
0CFF                             ; DW 65                   ; e vLastDef "A" last command u defined
0CFF                             ; DW 0                    ; f
0CFF                             ; DW page6                ; g 256 bytes limits
0CFF                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CFF                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "100 :a:bc{`[ `/bs 10 /bd 20 /bd 30 /bd `]`/bs}; ^ /pb", 0
0D00   31 80 47               LD   SP,STACK   
0D03   CD F3 0B               CALL   init   
0D06   CD 10 46               CALL   execStr   
0D09   31 30 30 20 3A 61 3A 62 63 7B 60 5B 20 60 2F 62 73 20 31 30 20 2F 62 64 20 32 30 20 2F 62 64 20 33 30 20 2F 62 64 20 60 5D 60 2F 62 73 7D 3B 20 5E 20 2F 70 62 00 .CSTR   "100 :a:bc{`[ `/bs 10 /bd 20 /bd 30 /bd `]`/bs}; ^ /pb"   
0D3F                          ;*Macro unroll:  expect "100 :a:bc{`[ `/bs 10 /bd 20 /bd 30 /bd `]`/bs}; ^ /pb",0
0D3F   E1                     POP   HL   
0D40   E5                     PUSH   HL   
0D41   11 00 00               LD   DE,0   
0D44   B7                     OR   A   
0D45   ED 52                  SBC   HL,DE   
0D47   7D                     LD   A,L   
0D48   B4                     OR   H   
0D49   CA D2 0D               JP   Z,expectM_0_2725S50   
0D4C   CD EC 0B               CALL   printStr   
0D4F   43 6F 64 65 3A 20 31 30 30 20 3A 61 3A 62 63 7B 60 5B 20 60 2F 62 73 20 31 30 20 2F 62 64 20 32 30 20 2F 62 64 20 33 30 20 2F 62 64 20 60 5D 60 2F 62 73 7D 3B 20 5E 20 2F 70 62 00 .CSTR   "Code: ","100 :a:bc{`[ `/bs 10 /bd 20 /bd 30 /bd `]`/bs}; ^ /pb"   
0D8B   CD EC 0B               CALL   printStr   
0D8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D9D   21 00 00               LD   hl,0   
0DA0   E5                     PUSH   hl   
0DA1   CD B3 0C               CALL   run   
0DA4   2E 00                  .CSTR   "."   
0DA6   CD EC 0B               CALL   printStr   
0DA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DB6   E1                     POP   hl   
0DB7   E5                     PUSH   hl   
0DB8   E5                     PUSH   hl   
0DB9   CD B3 0C               CALL   run   
0DBC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0DD0   76                     HALT      
0DD1   00                     .CSTR      
0DD2                EXPECTM_0_2725S50:      
0DD2   E1                     POP   HL   
0DD3                             ; test "[10 20 30 40] :a:bc{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}; ^ /px", 0
0DD3                             ; test "[10 20 30] `[`.s :a:bc{$a/s$c= 0$b=( $a$b%. $b++ $b $c</br )^};^ `]`.s", 0
0DD3   CD EC 0B               CALL   printStr   
0DD6   44 6F 6E 65 21 00      .CSTR   "Done!"   
0DDC   76                     HALT      
0DDD                             ; 
0DDD                          ;*Macro unroll:  test "/f", false
0DDD   31 80 47               LD   SP,STACK   
0DE0   CD F3 0B               CALL   init   
0DE3   CD 10 46               CALL   execStr   
0DE6   2F 66 00               .CSTR   "/f"   
0DE9                          ;*Macro unroll:  expect "/f",false
0DE9   E1                     POP   HL   
0DEA   E5                     PUSH   HL   
0DEB   11 00 00               LD   DE,false   
0DEE   B7                     OR   A   
0DEF   ED 52                  SBC   HL,DE   
0DF1   7D                     LD   A,L   
0DF2   B4                     OR   H   
0DF3   CA 49 0E               JP   Z,expectM_0_2732S50   
0DF6   CD EC 0B               CALL   printStr   
0DF9   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0E02   CD EC 0B               CALL   printStr   
0E05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E14   21 00 00               LD   hl,false   
0E17   E5                     PUSH   hl   
0E18   CD B3 0C               CALL   run   
0E1B   2E 00                  .CSTR   "."   
0E1D   CD EC 0B               CALL   printStr   
0E20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E2D   E1                     POP   hl   
0E2E   E5                     PUSH   hl   
0E2F   E5                     PUSH   hl   
0E30   CD B3 0C               CALL   run   
0E33   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E47   76                     HALT      
0E48   00                     .CSTR      
0E49                EXPECTM_0_2732S50:      
0E49   E1                     POP   HL   
0E4A                          ;*Macro unroll:  test "/t", true
0E4A   31 80 47               LD   SP,STACK   
0E4D   CD F3 0B               CALL   init   
0E50   CD 10 46               CALL   execStr   
0E53   2F 74 00               .CSTR   "/t"   
0E56                          ;*Macro unroll:  expect "/t",true
0E56   E1                     POP   HL   
0E57   E5                     PUSH   HL   
0E58   11 FF FF               LD   DE,true   
0E5B   B7                     OR   A   
0E5C   ED 52                  SBC   HL,DE   
0E5E   7D                     LD   A,L   
0E5F   B4                     OR   H   
0E60   CA B6 0E               JP   Z,expectM_0_2733S50   
0E63   CD EC 0B               CALL   printStr   
0E66   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E6F   CD EC 0B               CALL   printStr   
0E72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E81   21 FF FF               LD   hl,true   
0E84   E5                     PUSH   hl   
0E85   CD B3 0C               CALL   run   
0E88   2E 00                  .CSTR   "."   
0E8A   CD EC 0B               CALL   printStr   
0E8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E9A   E1                     POP   hl   
0E9B   E5                     PUSH   hl   
0E9C   E5                     PUSH   hl   
0E9D   CD B3 0C               CALL   run   
0EA0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0EB4   76                     HALT      
0EB5   00                     .CSTR      
0EB6                EXPECTM_0_2733S50:      
0EB6   E1                     POP   HL   
0EB7                          ;*Macro unroll:  test "1", 1
0EB7   31 80 47               LD   SP,STACK   
0EBA   CD F3 0B               CALL   init   
0EBD   CD 10 46               CALL   execStr   
0EC0   31 00                  .CSTR   "1"   
0EC2                          ;*Macro unroll:  expect "1",1
0EC2   E1                     POP   HL   
0EC3   E5                     PUSH   HL   
0EC4   11 01 00               LD   DE,1   
0EC7   B7                     OR   A   
0EC8   ED 52                  SBC   HL,DE   
0ECA   7D                     LD   A,L   
0ECB   B4                     OR   H   
0ECC   CA 21 0F               JP   Z,expectM_0_2734S50   
0ECF   CD EC 0B               CALL   printStr   
0ED2   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0EDA   CD EC 0B               CALL   printStr   
0EDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EEC   21 01 00               LD   hl,1   
0EEF   E5                     PUSH   hl   
0EF0   CD B3 0C               CALL   run   
0EF3   2E 00                  .CSTR   "."   
0EF5   CD EC 0B               CALL   printStr   
0EF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F05   E1                     POP   hl   
0F06   E5                     PUSH   hl   
0F07   E5                     PUSH   hl   
0F08   CD B3 0C               CALL   run   
0F0B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F1F   76                     HALT      
0F20   00                     .CSTR      
0F21                EXPECTM_0_2734S50:      
0F21   E1                     POP   HL   
0F22                          ;*Macro unroll:  test "2", 2
0F22   31 80 47               LD   SP,STACK   
0F25   CD F3 0B               CALL   init   
0F28   CD 10 46               CALL   execStr   
0F2B   32 00                  .CSTR   "2"   
0F2D                          ;*Macro unroll:  expect "2",2
0F2D   E1                     POP   HL   
0F2E   E5                     PUSH   HL   
0F2F   11 02 00               LD   DE,2   
0F32   B7                     OR   A   
0F33   ED 52                  SBC   HL,DE   
0F35   7D                     LD   A,L   
0F36   B4                     OR   H   
0F37   CA 8C 0F               JP   Z,expectM_0_2735S50   
0F3A   CD EC 0B               CALL   printStr   
0F3D   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F45   CD EC 0B               CALL   printStr   
0F48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F57   21 02 00               LD   hl,2   
0F5A   E5                     PUSH   hl   
0F5B   CD B3 0C               CALL   run   
0F5E   2E 00                  .CSTR   "."   
0F60   CD EC 0B               CALL   printStr   
0F63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F70   E1                     POP   hl   
0F71   E5                     PUSH   hl   
0F72   E5                     PUSH   hl   
0F73   CD B3 0C               CALL   run   
0F76   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F8A   76                     HALT      
0F8B   00                     .CSTR      
0F8C                EXPECTM_0_2735S50:      
0F8C   E1                     POP   HL   
0F8D                          ;*Macro unroll:  test "1", 1
0F8D   31 80 47               LD   SP,STACK   
0F90   CD F3 0B               CALL   init   
0F93   CD 10 46               CALL   execStr   
0F96   31 00                  .CSTR   "1"   
0F98                          ;*Macro unroll:  expect "1",1
0F98   E1                     POP   HL   
0F99   E5                     PUSH   HL   
0F9A   11 01 00               LD   DE,1   
0F9D   B7                     OR   A   
0F9E   ED 52                  SBC   HL,DE   
0FA0   7D                     LD   A,L   
0FA1   B4                     OR   H   
0FA2   CA F7 0F               JP   Z,expectM_0_2736S50   
0FA5   CD EC 0B               CALL   printStr   
0FA8   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FB0   CD EC 0B               CALL   printStr   
0FB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FC2   21 01 00               LD   hl,1   
0FC5   E5                     PUSH   hl   
0FC6   CD B3 0C               CALL   run   
0FC9   2E 00                  .CSTR   "."   
0FCB   CD EC 0B               CALL   printStr   
0FCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FDB   E1                     POP   hl   
0FDC   E5                     PUSH   hl   
0FDD   E5                     PUSH   hl   
0FDE   CD B3 0C               CALL   run   
0FE1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0FF5   76                     HALT      
0FF6   00                     .CSTR      
0FF7                EXPECTM_0_2736S50:      
0FF7   E1                     POP   HL   
0FF8                          ;*Macro unroll:  test "0", 0
0FF8   31 80 47               LD   SP,STACK   
0FFB   CD F3 0B               CALL   init   
0FFE   CD 10 46               CALL   execStr   
1001   30 00                  .CSTR   "0"   
1003                          ;*Macro unroll:  expect "0",0
1003   E1                     POP   HL   
1004   E5                     PUSH   HL   
1005   11 00 00               LD   DE,0   
1008   B7                     OR   A   
1009   ED 52                  SBC   HL,DE   
100B   7D                     LD   A,L   
100C   B4                     OR   H   
100D   CA 62 10               JP   Z,expectM_0_2737S50   
1010   CD EC 0B               CALL   printStr   
1013   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
101B   CD EC 0B               CALL   printStr   
101E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
102D   21 00 00               LD   hl,0   
1030   E5                     PUSH   hl   
1031   CD B3 0C               CALL   run   
1034   2E 00                  .CSTR   "."   
1036   CD EC 0B               CALL   printStr   
1039   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1046   E1                     POP   hl   
1047   E5                     PUSH   hl   
1048   E5                     PUSH   hl   
1049   CD B3 0C               CALL   run   
104C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1060   76                     HALT      
1061   00                     .CSTR      
1062                EXPECTM_0_2737S50:      
1062   E1                     POP   HL   
1063                          ;*Macro unroll:  test "10", 10
1063   31 80 47               LD   SP,STACK   
1066   CD F3 0B               CALL   init   
1069   CD 10 46               CALL   execStr   
106C   31 30 00               .CSTR   "10"   
106F                          ;*Macro unroll:  expect "10",10
106F   E1                     POP   HL   
1070   E5                     PUSH   HL   
1071   11 0A 00               LD   DE,10   
1074   B7                     OR   A   
1075   ED 52                  SBC   HL,DE   
1077   7D                     LD   A,L   
1078   B4                     OR   H   
1079   CA CF 10               JP   Z,expectM_0_2738S50   
107C   CD EC 0B               CALL   printStr   
107F   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1088   CD EC 0B               CALL   printStr   
108B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
109A   21 0A 00               LD   hl,10   
109D   E5                     PUSH   hl   
109E   CD B3 0C               CALL   run   
10A1   2E 00                  .CSTR   "."   
10A3   CD EC 0B               CALL   printStr   
10A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10B3   E1                     POP   hl   
10B4   E5                     PUSH   hl   
10B5   E5                     PUSH   hl   
10B6   CD B3 0C               CALL   run   
10B9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
10CD   76                     HALT      
10CE   00                     .CSTR      
10CF                EXPECTM_0_2738S50:      
10CF   E1                     POP   HL   
10D0                          ;*Macro unroll:  test "123", 123
10D0   31 80 47               LD   SP,STACK   
10D3   CD F3 0B               CALL   init   
10D6   CD 10 46               CALL   execStr   
10D9   31 32 33 00            .CSTR   "123"   
10DD                          ;*Macro unroll:  expect "123",123
10DD   E1                     POP   HL   
10DE   E5                     PUSH   HL   
10DF   11 7B 00               LD   DE,123   
10E2   B7                     OR   A   
10E3   ED 52                  SBC   HL,DE   
10E5   7D                     LD   A,L   
10E6   B4                     OR   H   
10E7   CA 3E 11               JP   Z,expectM_0_2739S50   
10EA   CD EC 0B               CALL   printStr   
10ED   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
10F7   CD EC 0B               CALL   printStr   
10FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1109   21 7B 00               LD   hl,123   
110C   E5                     PUSH   hl   
110D   CD B3 0C               CALL   run   
1110   2E 00                  .CSTR   "."   
1112   CD EC 0B               CALL   printStr   
1115   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1122   E1                     POP   hl   
1123   E5                     PUSH   hl   
1124   E5                     PUSH   hl   
1125   CD B3 0C               CALL   run   
1128   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
113C   76                     HALT      
113D   00                     .CSTR      
113E                EXPECTM_0_2739S50:      
113E   E1                     POP   HL   
113F                          ;*Macro unroll:  test "-1",-1
113F   31 80 47               LD   SP,STACK   
1142   CD F3 0B               CALL   init   
1145   CD 10 46               CALL   execStr   
1148   2D 31 00               .CSTR   "-1"   
114B                          ;*Macro unroll:  expect "-1",-1
114B   E1                     POP   HL   
114C   E5                     PUSH   HL   
114D   11 FF FF               LD   DE,-1   
1150   B7                     OR   A   
1151   ED 52                  SBC   HL,DE   
1153   7D                     LD   A,L   
1154   B4                     OR   H   
1155   CA AB 11               JP   Z,expectM_0_2740S50   
1158   CD EC 0B               CALL   printStr   
115B   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1164   CD EC 0B               CALL   printStr   
1167   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1176   21 FF FF               LD   hl,-1   
1179   E5                     PUSH   hl   
117A   CD B3 0C               CALL   run   
117D   2E 00                  .CSTR   "."   
117F   CD EC 0B               CALL   printStr   
1182   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
118F   E1                     POP   hl   
1190   E5                     PUSH   hl   
1191   E5                     PUSH   hl   
1192   CD B3 0C               CALL   run   
1195   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
11A9   76                     HALT      
11AA   00                     .CSTR      
11AB                EXPECTM_0_2740S50:      
11AB   E1                     POP   HL   
11AC                          ;*Macro unroll:  test "''", 0
11AC   31 80 47               LD   SP,STACK   
11AF   CD F3 0B               CALL   init   
11B2   CD 10 46               CALL   execStr   
11B5   27 27 00               .CSTR   "''"   
11B8                          ;*Macro unroll:  expect "''",0
11B8   E1                     POP   HL   
11B9   E5                     PUSH   HL   
11BA   11 00 00               LD   DE,0   
11BD   B7                     OR   A   
11BE   ED 52                  SBC   HL,DE   
11C0   7D                     LD   A,L   
11C1   B4                     OR   H   
11C2   CA 18 12               JP   Z,expectM_0_2741S50   
11C5   CD EC 0B               CALL   printStr   
11C8   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
11D1   CD EC 0B               CALL   printStr   
11D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E3   21 00 00               LD   hl,0   
11E6   E5                     PUSH   hl   
11E7   CD B3 0C               CALL   run   
11EA   2E 00                  .CSTR   "."   
11EC   CD EC 0B               CALL   printStr   
11EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FC   E1                     POP   hl   
11FD   E5                     PUSH   hl   
11FE   E5                     PUSH   hl   
11FF   CD B3 0C               CALL   run   
1202   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1216   76                     HALT      
1217   00                     .CSTR      
1218                EXPECTM_0_2741S50:      
1218   E1                     POP   HL   
1219                          ;*Macro unroll:  test "'a'", $61
1219   31 80 47               LD   SP,STACK   
121C   CD F3 0B               CALL   init   
121F   CD 10 46               CALL   execStr   
1222   27 61 27 00            .CSTR   "'a'"   
1226                          ;*Macro unroll:  expect "'a'",$61
1226   E1                     POP   HL   
1227   E5                     PUSH   HL   
1228   11 61 00               LD   DE,$61   
122B   B7                     OR   A   
122C   ED 52                  SBC   HL,DE   
122E   7D                     LD   A,L   
122F   B4                     OR   H   
1230   CA 87 12               JP   Z,expectM_0_2742S50   
1233   CD EC 0B               CALL   printStr   
1236   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1240   CD EC 0B               CALL   printStr   
1243   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1252   21 61 00               LD   hl,$61   
1255   E5                     PUSH   hl   
1256   CD B3 0C               CALL   run   
1259   2E 00                  .CSTR   "."   
125B   CD EC 0B               CALL   printStr   
125E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
126B   E1                     POP   hl   
126C   E5                     PUSH   hl   
126D   E5                     PUSH   hl   
126E   CD B3 0C               CALL   run   
1271   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1285   76                     HALT      
1286   00                     .CSTR      
1287                EXPECTM_0_2742S50:      
1287   E1                     POP   HL   
1288                          ;*Macro unroll:  test "'\\''", $27
1288   31 80 47               LD   SP,STACK   
128B   CD F3 0B               CALL   init   
128E   CD 10 46               CALL   execStr   
1291   27 5C 27 27 00         .CSTR   "'\\''"   
1296                          ;*Macro unroll:  expect "'\\''",$27
1296   E1                     POP   HL   
1297   E5                     PUSH   HL   
1298   11 27 00               LD   DE,$27   
129B   B7                     OR   A   
129C   ED 52                  SBC   HL,DE   
129E   7D                     LD   A,L   
129F   B4                     OR   H   
12A0   CA F8 12               JP   Z,expectM_0_2743S50   
12A3   CD EC 0B               CALL   printStr   
12A6   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
12B1   CD EC 0B               CALL   printStr   
12B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12C3   21 27 00               LD   hl,$27   
12C6   E5                     PUSH   hl   
12C7   CD B3 0C               CALL   run   
12CA   2E 00                  .CSTR   "."   
12CC   CD EC 0B               CALL   printStr   
12CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12DC   E1                     POP   hl   
12DD   E5                     PUSH   hl   
12DE   E5                     PUSH   hl   
12DF   CD B3 0C               CALL   run   
12E2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
12F6   76                     HALT      
12F7   00                     .CSTR      
12F8                EXPECTM_0_2743S50:      
12F8   E1                     POP   HL   
12F9                          ;*Macro unroll:  test "#10", $10
12F9   31 80 47               LD   SP,STACK   
12FC   CD F3 0B               CALL   init   
12FF   CD 10 46               CALL   execStr   
1302   23 31 30 00            .CSTR   "#10"   
1306                          ;*Macro unroll:  expect "#10",$10
1306   E1                     POP   HL   
1307   E5                     PUSH   HL   
1308   11 10 00               LD   DE,$10   
130B   B7                     OR   A   
130C   ED 52                  SBC   HL,DE   
130E   7D                     LD   A,L   
130F   B4                     OR   H   
1310   CA 67 13               JP   Z,expectM_0_2744S50   
1313   CD EC 0B               CALL   printStr   
1316   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1320   CD EC 0B               CALL   printStr   
1323   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1332   21 10 00               LD   hl,$10   
1335   E5                     PUSH   hl   
1336   CD B3 0C               CALL   run   
1339   2E 00                  .CSTR   "."   
133B   CD EC 0B               CALL   printStr   
133E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
134B   E1                     POP   hl   
134C   E5                     PUSH   hl   
134D   E5                     PUSH   hl   
134E   CD B3 0C               CALL   run   
1351   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1365   76                     HALT      
1366   00                     .CSTR      
1367                EXPECTM_0_2744S50:      
1367   E1                     POP   HL   
1368                          ;*Macro unroll:  test "#FF", $FF
1368   31 80 47               LD   SP,STACK   
136B   CD F3 0B               CALL   init   
136E   CD 10 46               CALL   execStr   
1371   23 46 46 00            .CSTR   "#FF"   
1375                          ;*Macro unroll:  expect "#FF",$FF
1375   E1                     POP   HL   
1376   E5                     PUSH   HL   
1377   11 FF 00               LD   DE,$FF   
137A   B7                     OR   A   
137B   ED 52                  SBC   HL,DE   
137D   7D                     LD   A,L   
137E   B4                     OR   H   
137F   CA D6 13               JP   Z,expectM_0_2745S50   
1382   CD EC 0B               CALL   printStr   
1385   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
138F   CD EC 0B               CALL   printStr   
1392   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13A1   21 FF 00               LD   hl,$FF   
13A4   E5                     PUSH   hl   
13A5   CD B3 0C               CALL   run   
13A8   2E 00                  .CSTR   "."   
13AA   CD EC 0B               CALL   printStr   
13AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13BA   E1                     POP   hl   
13BB   E5                     PUSH   hl   
13BC   E5                     PUSH   hl   
13BD   CD B3 0C               CALL   run   
13C0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
13D4   76                     HALT      
13D5   00                     .CSTR      
13D6                EXPECTM_0_2745S50:      
13D6   E1                     POP   HL   
13D7                          ;*Macro unroll:  test "-1 2 +",1
13D7   31 80 47               LD   SP,STACK   
13DA   CD F3 0B               CALL   init   
13DD   CD 10 46               CALL   execStr   
13E0   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
13E7                          ;*Macro unroll:  expect "-1 2 +",1
13E7   E1                     POP   HL   
13E8   E5                     PUSH   HL   
13E9   11 01 00               LD   DE,1   
13EC   B7                     OR   A   
13ED   ED 52                  SBC   HL,DE   
13EF   7D                     LD   A,L   
13F0   B4                     OR   H   
13F1   CA 4B 14               JP   Z,expectM_0_2746S50   
13F4   CD EC 0B               CALL   printStr   
13F7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1404   CD EC 0B               CALL   printStr   
1407   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1416   21 01 00               LD   hl,1   
1419   E5                     PUSH   hl   
141A   CD B3 0C               CALL   run   
141D   2E 00                  .CSTR   "."   
141F   CD EC 0B               CALL   printStr   
1422   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
142F   E1                     POP   hl   
1430   E5                     PUSH   hl   
1431   E5                     PUSH   hl   
1432   CD B3 0C               CALL   run   
1435   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1449   76                     HALT      
144A   00                     .CSTR      
144B                EXPECTM_0_2746S50:      
144B   E1                     POP   HL   
144C                          ;*Macro unroll:  test "-1 1 +",0
144C   31 80 47               LD   SP,STACK   
144F   CD F3 0B               CALL   init   
1452   CD 10 46               CALL   execStr   
1455   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
145C                          ;*Macro unroll:  expect "-1 1 +",0
145C   E1                     POP   HL   
145D   E5                     PUSH   HL   
145E   11 00 00               LD   DE,0   
1461   B7                     OR   A   
1462   ED 52                  SBC   HL,DE   
1464   7D                     LD   A,L   
1465   B4                     OR   H   
1466   CA C0 14               JP   Z,expectM_0_2747S50   
1469   CD EC 0B               CALL   printStr   
146C   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1479   CD EC 0B               CALL   printStr   
147C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
148B   21 00 00               LD   hl,0   
148E   E5                     PUSH   hl   
148F   CD B3 0C               CALL   run   
1492   2E 00                  .CSTR   "."   
1494   CD EC 0B               CALL   printStr   
1497   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14A4   E1                     POP   hl   
14A5   E5                     PUSH   hl   
14A6   E5                     PUSH   hl   
14A7   CD B3 0C               CALL   run   
14AA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
14BE   76                     HALT      
14BF   00                     .CSTR      
14C0                EXPECTM_0_2747S50:      
14C0   E1                     POP   HL   
14C1                          ;*Macro unroll:  test "1 2 +", 3
14C1   31 80 47               LD   SP,STACK   
14C4   CD F3 0B               CALL   init   
14C7   CD 10 46               CALL   execStr   
14CA   31 20 32 20 2B 00      .CSTR   "1 2 +"   
14D0                          ;*Macro unroll:  expect "1 2 +",3
14D0   E1                     POP   HL   
14D1   E5                     PUSH   HL   
14D2   11 03 00               LD   DE,3   
14D5   B7                     OR   A   
14D6   ED 52                  SBC   HL,DE   
14D8   7D                     LD   A,L   
14D9   B4                     OR   H   
14DA   CA 33 15               JP   Z,expectM_0_2748S50   
14DD   CD EC 0B               CALL   printStr   
14E0   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
14EC   CD EC 0B               CALL   printStr   
14EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14FE   21 03 00               LD   hl,3   
1501   E5                     PUSH   hl   
1502   CD B3 0C               CALL   run   
1505   2E 00                  .CSTR   "."   
1507   CD EC 0B               CALL   printStr   
150A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1517   E1                     POP   hl   
1518   E5                     PUSH   hl   
1519   E5                     PUSH   hl   
151A   CD B3 0C               CALL   run   
151D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1531   76                     HALT      
1532   00                     .CSTR      
1533                EXPECTM_0_2748S50:      
1533   E1                     POP   HL   
1534                          ;*Macro unroll:  test "4 1 2 +", 3
1534   31 80 47               LD   SP,STACK   
1537   CD F3 0B               CALL   init   
153A   CD 10 46               CALL   execStr   
153D   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1545                          ;*Macro unroll:  expect "4 1 2 +",3
1545   E1                     POP   HL   
1546   E5                     PUSH   HL   
1547   11 03 00               LD   DE,3   
154A   B7                     OR   A   
154B   ED 52                  SBC   HL,DE   
154D   7D                     LD   A,L   
154E   B4                     OR   H   
154F   CA AA 15               JP   Z,expectM_0_2749S50   
1552   CD EC 0B               CALL   printStr   
1555   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1563   CD EC 0B               CALL   printStr   
1566   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1575   21 03 00               LD   hl,3   
1578   E5                     PUSH   hl   
1579   CD B3 0C               CALL   run   
157C   2E 00                  .CSTR   "."   
157E   CD EC 0B               CALL   printStr   
1581   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
158E   E1                     POP   hl   
158F   E5                     PUSH   hl   
1590   E5                     PUSH   hl   
1591   CD B3 0C               CALL   run   
1594   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
15A8   76                     HALT      
15A9   00                     .CSTR      
15AA                EXPECTM_0_2749S50:      
15AA   E1                     POP   HL   
15AB                          ;*Macro unroll:  test "123 456 +", 123+456
15AB   31 80 47               LD   SP,STACK   
15AE   CD F3 0B               CALL   init   
15B1   CD 10 46               CALL   execStr   
15B4   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
15BE                          ;*Macro unroll:  expect "123 456 +",123+456
15BE   E1                     POP   HL   
15BF   E5                     PUSH   HL   
15C0   11 43 02               LD   DE,123+456   
15C3   B7                     OR   A   
15C4   ED 52                  SBC   HL,DE   
15C6   7D                     LD   A,L   
15C7   B4                     OR   H   
15C8   CA 25 16               JP   Z,expectM_0_2750S50   
15CB   CD EC 0B               CALL   printStr   
15CE   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
15DE   CD EC 0B               CALL   printStr   
15E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15F0   21 43 02               LD   hl,123+456   
15F3   E5                     PUSH   hl   
15F4   CD B3 0C               CALL   run   
15F7   2E 00                  .CSTR   "."   
15F9   CD EC 0B               CALL   printStr   
15FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1609   E1                     POP   hl   
160A   E5                     PUSH   hl   
160B   E5                     PUSH   hl   
160C   CD B3 0C               CALL   run   
160F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1623   76                     HALT      
1624   00                     .CSTR      
1625                EXPECTM_0_2750S50:      
1625   E1                     POP   HL   
1626                          ;*Macro unroll:  test "64 128 +", 64+128
1626   31 80 47               LD   SP,STACK   
1629   CD F3 0B               CALL   init   
162C   CD 10 46               CALL   execStr   
162F   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1638                          ;*Macro unroll:  expect "64 128 +",64+128
1638   E1                     POP   HL   
1639   E5                     PUSH   HL   
163A   11 C0 00               LD   DE,64+128   
163D   B7                     OR   A   
163E   ED 52                  SBC   HL,DE   
1640   7D                     LD   A,L   
1641   B4                     OR   H   
1642   CA 9E 16               JP   Z,expectM_0_2751S50   
1645   CD EC 0B               CALL   printStr   
1648   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1657   CD EC 0B               CALL   printStr   
165A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1669   21 C0 00               LD   hl,64+128   
166C   E5                     PUSH   hl   
166D   CD B3 0C               CALL   run   
1670   2E 00                  .CSTR   "."   
1672   CD EC 0B               CALL   printStr   
1675   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1682   E1                     POP   hl   
1683   E5                     PUSH   hl   
1684   E5                     PUSH   hl   
1685   CD B3 0C               CALL   run   
1688   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
169C   76                     HALT      
169D   00                     .CSTR      
169E                EXPECTM_0_2751S50:      
169E   E1                     POP   HL   
169F                          ;*Macro unroll:  test "1 2 +", 3
169F   31 80 47               LD   SP,STACK   
16A2   CD F3 0B               CALL   init   
16A5   CD 10 46               CALL   execStr   
16A8   31 20 32 20 2B 00      .CSTR   "1 2 +"   
16AE                          ;*Macro unroll:  expect "1 2 +",3
16AE   E1                     POP   HL   
16AF   E5                     PUSH   HL   
16B0   11 03 00               LD   DE,3   
16B3   B7                     OR   A   
16B4   ED 52                  SBC   HL,DE   
16B6   7D                     LD   A,L   
16B7   B4                     OR   H   
16B8   CA 11 17               JP   Z,expectM_0_2752S50   
16BB   CD EC 0B               CALL   printStr   
16BE   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16CA   CD EC 0B               CALL   printStr   
16CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16DC   21 03 00               LD   hl,3   
16DF   E5                     PUSH   hl   
16E0   CD B3 0C               CALL   run   
16E3   2E 00                  .CSTR   "."   
16E5   CD EC 0B               CALL   printStr   
16E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F5   E1                     POP   hl   
16F6   E5                     PUSH   hl   
16F7   E5                     PUSH   hl   
16F8   CD B3 0C               CALL   run   
16FB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
170F   76                     HALT      
1710   00                     .CSTR      
1711                EXPECTM_0_2752S50:      
1711   E1                     POP   HL   
1712                          ;*Macro unroll:  test "1a= a++ a",2
1712   31 80 47               LD   SP,STACK   
1715   CD F3 0B               CALL   init   
1718   CD 10 46               CALL   execStr   
171B   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
1725                          ;*Macro unroll:  expect "1a= a++ a",2
1725   E1                     POP   HL   
1726   E5                     PUSH   HL   
1727   11 02 00               LD   DE,2   
172A   B7                     OR   A   
172B   ED 52                  SBC   HL,DE   
172D   7D                     LD   A,L   
172E   B4                     OR   H   
172F   CA 8C 17               JP   Z,expectM_0_2753S50   
1732   CD EC 0B               CALL   printStr   
1735   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1745   CD EC 0B               CALL   printStr   
1748   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1757   21 02 00               LD   hl,2   
175A   E5                     PUSH   hl   
175B   CD B3 0C               CALL   run   
175E   2E 00                  .CSTR   "."   
1760   CD EC 0B               CALL   printStr   
1763   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1770   E1                     POP   hl   
1771   E5                     PUSH   hl   
1772   E5                     PUSH   hl   
1773   CD B3 0C               CALL   run   
1776   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
178A   76                     HALT      
178B   00                     .CSTR      
178C                EXPECTM_0_2753S50:      
178C   E1                     POP   HL   
178D                          ;*Macro unroll:  test "-1 -1 -",0
178D   31 80 47               LD   SP,STACK   
1790   CD F3 0B               CALL   init   
1793   CD 10 46               CALL   execStr   
1796   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
179E                          ;*Macro unroll:  expect "-1 -1 -",0
179E   E1                     POP   HL   
179F   E5                     PUSH   HL   
17A0   11 00 00               LD   DE,0   
17A3   B7                     OR   A   
17A4   ED 52                  SBC   HL,DE   
17A6   7D                     LD   A,L   
17A7   B4                     OR   H   
17A8   CA 03 18               JP   Z,expectM_0_2754S50   
17AB   CD EC 0B               CALL   printStr   
17AE   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
17BC   CD EC 0B               CALL   printStr   
17BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17CE   21 00 00               LD   hl,0   
17D1   E5                     PUSH   hl   
17D2   CD B3 0C               CALL   run   
17D5   2E 00                  .CSTR   "."   
17D7   CD EC 0B               CALL   printStr   
17DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17E7   E1                     POP   hl   
17E8   E5                     PUSH   hl   
17E9   E5                     PUSH   hl   
17EA   CD B3 0C               CALL   run   
17ED   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1801   76                     HALT      
1802   00                     .CSTR      
1803                EXPECTM_0_2754S50:      
1803   E1                     POP   HL   
1804                          ;*Macro unroll:  test "5 3 -", 2
1804   31 80 47               LD   SP,STACK   
1807   CD F3 0B               CALL   init   
180A   CD 10 46               CALL   execStr   
180D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1813                          ;*Macro unroll:  expect "5 3 -",2
1813   E1                     POP   HL   
1814   E5                     PUSH   HL   
1815   11 02 00               LD   DE,2   
1818   B7                     OR   A   
1819   ED 52                  SBC   HL,DE   
181B   7D                     LD   A,L   
181C   B4                     OR   H   
181D   CA 76 18               JP   Z,expectM_0_2755S50   
1820   CD EC 0B               CALL   printStr   
1823   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
182F   CD EC 0B               CALL   printStr   
1832   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1841   21 02 00               LD   hl,2   
1844   E5                     PUSH   hl   
1845   CD B3 0C               CALL   run   
1848   2E 00                  .CSTR   "."   
184A   CD EC 0B               CALL   printStr   
184D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
185A   E1                     POP   hl   
185B   E5                     PUSH   hl   
185C   E5                     PUSH   hl   
185D   CD B3 0C               CALL   run   
1860   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1874   76                     HALT      
1875   00                     .CSTR      
1876                EXPECTM_0_2755S50:      
1876   E1                     POP   HL   
1877                          ;*Macro unroll:  test "2 1 -",1
1877   31 80 47               LD   SP,STACK   
187A   CD F3 0B               CALL   init   
187D   CD 10 46               CALL   execStr   
1880   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1886                          ;*Macro unroll:  expect "2 1 -",1
1886   E1                     POP   HL   
1887   E5                     PUSH   HL   
1888   11 01 00               LD   DE,1   
188B   B7                     OR   A   
188C   ED 52                  SBC   HL,DE   
188E   7D                     LD   A,L   
188F   B4                     OR   H   
1890   CA E9 18               JP   Z,expectM_0_2756S50   
1893   CD EC 0B               CALL   printStr   
1896   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
18A2   CD EC 0B               CALL   printStr   
18A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18B4   21 01 00               LD   hl,1   
18B7   E5                     PUSH   hl   
18B8   CD B3 0C               CALL   run   
18BB   2E 00                  .CSTR   "."   
18BD   CD EC 0B               CALL   printStr   
18C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18CD   E1                     POP   hl   
18CE   E5                     PUSH   hl   
18CF   E5                     PUSH   hl   
18D0   CD B3 0C               CALL   run   
18D3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
18E7   76                     HALT      
18E8   00                     .CSTR      
18E9                EXPECTM_0_2756S50:      
18E9   E1                     POP   HL   
18EA                          ;*Macro unroll:  test "3a= a-- a",2
18EA   31 80 47               LD   SP,STACK   
18ED   CD F3 0B               CALL   init   
18F0   CD 10 46               CALL   execStr   
18F3   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
18FD                          ;*Macro unroll:  expect "3a= a-- a",2
18FD   E1                     POP   HL   
18FE   E5                     PUSH   HL   
18FF   11 02 00               LD   DE,2   
1902   B7                     OR   A   
1903   ED 52                  SBC   HL,DE   
1905   7D                     LD   A,L   
1906   B4                     OR   H   
1907   CA 64 19               JP   Z,expectM_0_2757S50   
190A   CD EC 0B               CALL   printStr   
190D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
191D   CD EC 0B               CALL   printStr   
1920   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
192F   21 02 00               LD   hl,2   
1932   E5                     PUSH   hl   
1933   CD B3 0C               CALL   run   
1936   2E 00                  .CSTR   "."   
1938   CD EC 0B               CALL   printStr   
193B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1948   E1                     POP   hl   
1949   E5                     PUSH   hl   
194A   E5                     PUSH   hl   
194B   CD B3 0C               CALL   run   
194E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1962   76                     HALT      
1963   00                     .CSTR      
1964                EXPECTM_0_2757S50:      
1964   E1                     POP   HL   
1965                          ;*Macro unroll:  test "3 5 &", 1
1965   31 80 47               LD   SP,STACK   
1968   CD F3 0B               CALL   init   
196B   CD 10 46               CALL   execStr   
196E   33 20 35 20 26 00      .CSTR   "3 5 &"   
1974                          ;*Macro unroll:  expect "3 5 &",1
1974   E1                     POP   HL   
1975   E5                     PUSH   HL   
1976   11 01 00               LD   DE,1   
1979   B7                     OR   A   
197A   ED 52                  SBC   HL,DE   
197C   7D                     LD   A,L   
197D   B4                     OR   H   
197E   CA D7 19               JP   Z,expectM_0_2758S50   
1981   CD EC 0B               CALL   printStr   
1984   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1990   CD EC 0B               CALL   printStr   
1993   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19A2   21 01 00               LD   hl,1   
19A5   E5                     PUSH   hl   
19A6   CD B3 0C               CALL   run   
19A9   2E 00                  .CSTR   "."   
19AB   CD EC 0B               CALL   printStr   
19AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19BB   E1                     POP   hl   
19BC   E5                     PUSH   hl   
19BD   E5                     PUSH   hl   
19BE   CD B3 0C               CALL   run   
19C1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
19D5   76                     HALT      
19D6   00                     .CSTR      
19D7                EXPECTM_0_2758S50:      
19D7   E1                     POP   HL   
19D8                          ;*Macro unroll:  test "3 5 |", 7
19D8   31 80 47               LD   SP,STACK   
19DB   CD F3 0B               CALL   init   
19DE   CD 10 46               CALL   execStr   
19E1   33 20 35 20 7C 00      .CSTR   "3 5 |"   
19E7                          ;*Macro unroll:  expect "3 5 |",7
19E7   E1                     POP   HL   
19E8   E5                     PUSH   HL   
19E9   11 07 00               LD   DE,7   
19EC   B7                     OR   A   
19ED   ED 52                  SBC   HL,DE   
19EF   7D                     LD   A,L   
19F0   B4                     OR   H   
19F1   CA 4A 1A               JP   Z,expectM_0_2759S50   
19F4   CD EC 0B               CALL   printStr   
19F7   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1A03   CD EC 0B               CALL   printStr   
1A06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A15   21 07 00               LD   hl,7   
1A18   E5                     PUSH   hl   
1A19   CD B3 0C               CALL   run   
1A1C   2E 00                  .CSTR   "."   
1A1E   CD EC 0B               CALL   printStr   
1A21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A2E   E1                     POP   hl   
1A2F   E5                     PUSH   hl   
1A30   E5                     PUSH   hl   
1A31   CD B3 0C               CALL   run   
1A34   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A48   76                     HALT      
1A49   00                     .CSTR      
1A4A                EXPECTM_0_2759S50:      
1A4A   E1                     POP   HL   
1A4B                          ;*Macro unroll:  test "3 5 /x", 6
1A4B   31 80 47               LD   SP,STACK   
1A4E   CD F3 0B               CALL   init   
1A51   CD 10 46               CALL   execStr   
1A54   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1A5B                          ;*Macro unroll:  expect "3 5 /x",6
1A5B   E1                     POP   HL   
1A5C   E5                     PUSH   HL   
1A5D   11 06 00               LD   DE,6   
1A60   B7                     OR   A   
1A61   ED 52                  SBC   HL,DE   
1A63   7D                     LD   A,L   
1A64   B4                     OR   H   
1A65   CA BF 1A               JP   Z,expectM_0_2760S50   
1A68   CD EC 0B               CALL   printStr   
1A6B   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1A78   CD EC 0B               CALL   printStr   
1A7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A8A   21 06 00               LD   hl,6   
1A8D   E5                     PUSH   hl   
1A8E   CD B3 0C               CALL   run   
1A91   2E 00                  .CSTR   "."   
1A93   CD EC 0B               CALL   printStr   
1A96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AA3   E1                     POP   hl   
1AA4   E5                     PUSH   hl   
1AA5   E5                     PUSH   hl   
1AA6   CD B3 0C               CALL   run   
1AA9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1ABD   76                     HALT      
1ABE   00                     .CSTR      
1ABF                EXPECTM_0_2760S50:      
1ABF   E1                     POP   HL   
1AC0                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1AC0   31 80 47               LD   SP,STACK   
1AC3   CD F3 0B               CALL   init   
1AC6   CD 10 46               CALL   execStr   
1AC9   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1AD8                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1AD8   E1                     POP   HL   
1AD9   E5                     PUSH   HL   
1ADA   11 06 00               LD   DE,6   
1ADD   B7                     OR   A   
1ADE   ED 52                  SBC   HL,DE   
1AE0   7D                     LD   A,L   
1AE1   B4                     OR   H   
1AE2   CA 44 1B               JP   Z,expectM_0_2761S50   
1AE5   CD EC 0B               CALL   printStr   
1AE8   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1AFD   CD EC 0B               CALL   printStr   
1B00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B0F   21 06 00               LD   hl,6   
1B12   E5                     PUSH   hl   
1B13   CD B3 0C               CALL   run   
1B16   2E 00                  .CSTR   "."   
1B18   CD EC 0B               CALL   printStr   
1B1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B28   E1                     POP   hl   
1B29   E5                     PUSH   hl   
1B2A   E5                     PUSH   hl   
1B2B   CD B3 0C               CALL   run   
1B2E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B42   76                     HALT      
1B43   00                     .CSTR      
1B44                EXPECTM_0_2761S50:      
1B44   E1                     POP   HL   
1B45                          ;*Macro unroll:  test "2 3 *", 6
1B45   31 80 47               LD   SP,STACK   
1B48   CD F3 0B               CALL   init   
1B4B   CD 10 46               CALL   execStr   
1B4E   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1B54                          ;*Macro unroll:  expect "2 3 *",6
1B54   E1                     POP   HL   
1B55   E5                     PUSH   HL   
1B56   11 06 00               LD   DE,6   
1B59   B7                     OR   A   
1B5A   ED 52                  SBC   HL,DE   
1B5C   7D                     LD   A,L   
1B5D   B4                     OR   H   
1B5E   CA B7 1B               JP   Z,expectM_0_2762S50   
1B61   CD EC 0B               CALL   printStr   
1B64   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1B70   CD EC 0B               CALL   printStr   
1B73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B82   21 06 00               LD   hl,6   
1B85   E5                     PUSH   hl   
1B86   CD B3 0C               CALL   run   
1B89   2E 00                  .CSTR   "."   
1B8B   CD EC 0B               CALL   printStr   
1B8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B9B   E1                     POP   hl   
1B9C   E5                     PUSH   hl   
1B9D   E5                     PUSH   hl   
1B9E   CD B3 0C               CALL   run   
1BA1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1BB5   76                     HALT      
1BB6   00                     .CSTR      
1BB7                EXPECTM_0_2762S50:      
1BB7   E1                     POP   HL   
1BB8                          ;*Macro unroll:  test "1 2 3 + *", 5
1BB8   31 80 47               LD   SP,STACK   
1BBB   CD F3 0B               CALL   init   
1BBE   CD 10 46               CALL   execStr   
1BC1   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1BCB                          ;*Macro unroll:  expect "1 2 3 + *",5
1BCB   E1                     POP   HL   
1BCC   E5                     PUSH   HL   
1BCD   11 05 00               LD   DE,5   
1BD0   B7                     OR   A   
1BD1   ED 52                  SBC   HL,DE   
1BD3   7D                     LD   A,L   
1BD4   B4                     OR   H   
1BD5   CA 32 1C               JP   Z,expectM_0_2763S50   
1BD8   CD EC 0B               CALL   printStr   
1BDB   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1BEB   CD EC 0B               CALL   printStr   
1BEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BFD   21 05 00               LD   hl,5   
1C00   E5                     PUSH   hl   
1C01   CD B3 0C               CALL   run   
1C04   2E 00                  .CSTR   "."   
1C06   CD EC 0B               CALL   printStr   
1C09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C16   E1                     POP   hl   
1C17   E5                     PUSH   hl   
1C18   E5                     PUSH   hl   
1C19   CD B3 0C               CALL   run   
1C1C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C30   76                     HALT      
1C31   00                     .CSTR      
1C32                EXPECTM_0_2763S50:      
1C32   E1                     POP   HL   
1C33                          ;*Macro unroll:  test "7 3 /", 2
1C33   31 80 47               LD   SP,STACK   
1C36   CD F3 0B               CALL   init   
1C39   CD 10 46               CALL   execStr   
1C3C   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C42                          ;*Macro unroll:  expect "7 3 /",2
1C42   E1                     POP   HL   
1C43   E5                     PUSH   HL   
1C44   11 02 00               LD   DE,2   
1C47   B7                     OR   A   
1C48   ED 52                  SBC   HL,DE   
1C4A   7D                     LD   A,L   
1C4B   B4                     OR   H   
1C4C   CA A5 1C               JP   Z,expectM_0_2764S50   
1C4F   CD EC 0B               CALL   printStr   
1C52   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C5E   CD EC 0B               CALL   printStr   
1C61   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C70   21 02 00               LD   hl,2   
1C73   E5                     PUSH   hl   
1C74   CD B3 0C               CALL   run   
1C77   2E 00                  .CSTR   "."   
1C79   CD EC 0B               CALL   printStr   
1C7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C89   E1                     POP   hl   
1C8A   E5                     PUSH   hl   
1C8B   E5                     PUSH   hl   
1C8C   CD B3 0C               CALL   run   
1C8F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1CA3   76                     HALT      
1CA4   00                     .CSTR      
1CA5                EXPECTM_0_2764S50:      
1CA5   E1                     POP   HL   
1CA6                          ;*Macro unroll:  test "7 3 / _", 1
1CA6   31 80 47               LD   SP,STACK   
1CA9   CD F3 0B               CALL   init   
1CAC   CD 10 46               CALL   execStr   
1CAF   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1CB7                          ;*Macro unroll:  expect "7 3 / _",1
1CB7   E1                     POP   HL   
1CB8   E5                     PUSH   HL   
1CB9   11 01 00               LD   DE,1   
1CBC   B7                     OR   A   
1CBD   ED 52                  SBC   HL,DE   
1CBF   7D                     LD   A,L   
1CC0   B4                     OR   H   
1CC1   CA 1C 1D               JP   Z,expectM_0_2765S50   
1CC4   CD EC 0B               CALL   printStr   
1CC7   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1CD5   CD EC 0B               CALL   printStr   
1CD8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CE7   21 01 00               LD   hl,1   
1CEA   E5                     PUSH   hl   
1CEB   CD B3 0C               CALL   run   
1CEE   2E 00                  .CSTR   "."   
1CF0   CD EC 0B               CALL   printStr   
1CF3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D00   E1                     POP   hl   
1D01   E5                     PUSH   hl   
1D02   E5                     PUSH   hl   
1D03   CD B3 0C               CALL   run   
1D06   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D1A   76                     HALT      
1D1B   00                     .CSTR      
1D1C                EXPECTM_0_2765S50:      
1D1C   E1                     POP   HL   
1D1D                          ;*Macro unroll:  test "7 3 /", 2
1D1D   31 80 47               LD   SP,STACK   
1D20   CD F3 0B               CALL   init   
1D23   CD 10 46               CALL   execStr   
1D26   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1D2C                          ;*Macro unroll:  expect "7 3 /",2
1D2C   E1                     POP   HL   
1D2D   E5                     PUSH   HL   
1D2E   11 02 00               LD   DE,2   
1D31   B7                     OR   A   
1D32   ED 52                  SBC   HL,DE   
1D34   7D                     LD   A,L   
1D35   B4                     OR   H   
1D36   CA 8F 1D               JP   Z,expectM_0_2766S50   
1D39   CD EC 0B               CALL   printStr   
1D3C   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D48   CD EC 0B               CALL   printStr   
1D4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5A   21 02 00               LD   hl,2   
1D5D   E5                     PUSH   hl   
1D5E   CD B3 0C               CALL   run   
1D61   2E 00                  .CSTR   "."   
1D63   CD EC 0B               CALL   printStr   
1D66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D73   E1                     POP   hl   
1D74   E5                     PUSH   hl   
1D75   E5                     PUSH   hl   
1D76   CD B3 0C               CALL   run   
1D79   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D8D   76                     HALT      
1D8E   00                     .CSTR      
1D8F                EXPECTM_0_2766S50:      
1D8F   E1                     POP   HL   
1D90                          ;*Macro unroll:  test "2 3 ==", FALSE
1D90   31 80 47               LD   SP,STACK   
1D93   CD F3 0B               CALL   init   
1D96   CD 10 46               CALL   execStr   
1D99   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1DA0                          ;*Macro unroll:  expect "2 3 ==",FALSE
1DA0   E1                     POP   HL   
1DA1   E5                     PUSH   HL   
1DA2   11 00 00               LD   DE,FALSE   
1DA5   B7                     OR   A   
1DA6   ED 52                  SBC   HL,DE   
1DA8   7D                     LD   A,L   
1DA9   B4                     OR   H   
1DAA   CA 04 1E               JP   Z,expectM_0_2767S50   
1DAD   CD EC 0B               CALL   printStr   
1DB0   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1DBD   CD EC 0B               CALL   printStr   
1DC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DCF   21 00 00               LD   hl,FALSE   
1DD2   E5                     PUSH   hl   
1DD3   CD B3 0C               CALL   run   
1DD6   2E 00                  .CSTR   "."   
1DD8   CD EC 0B               CALL   printStr   
1DDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DE8   E1                     POP   hl   
1DE9   E5                     PUSH   hl   
1DEA   E5                     PUSH   hl   
1DEB   CD B3 0C               CALL   run   
1DEE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E02   76                     HALT      
1E03   00                     .CSTR      
1E04                EXPECTM_0_2767S50:      
1E04   E1                     POP   HL   
1E05                          ;*Macro unroll:  test "3 3 ==", TRUE
1E05   31 80 47               LD   SP,STACK   
1E08   CD F3 0B               CALL   init   
1E0B   CD 10 46               CALL   execStr   
1E0E   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1E15                          ;*Macro unroll:  expect "3 3 ==",TRUE
1E15   E1                     POP   HL   
1E16   E5                     PUSH   HL   
1E17   11 FF FF               LD   DE,TRUE   
1E1A   B7                     OR   A   
1E1B   ED 52                  SBC   HL,DE   
1E1D   7D                     LD   A,L   
1E1E   B4                     OR   H   
1E1F   CA 79 1E               JP   Z,expectM_0_2768S50   
1E22   CD EC 0B               CALL   printStr   
1E25   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1E32   CD EC 0B               CALL   printStr   
1E35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E44   21 FF FF               LD   hl,TRUE   
1E47   E5                     PUSH   hl   
1E48   CD B3 0C               CALL   run   
1E4B   2E 00                  .CSTR   "."   
1E4D   CD EC 0B               CALL   printStr   
1E50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E5D   E1                     POP   hl   
1E5E   E5                     PUSH   hl   
1E5F   E5                     PUSH   hl   
1E60   CD B3 0C               CALL   run   
1E63   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E77   76                     HALT      
1E78   00                     .CSTR      
1E79                EXPECTM_0_2768S50:      
1E79   E1                     POP   HL   
1E7A                          ;*Macro unroll:  test "1 2 <", TRUE
1E7A   31 80 47               LD   SP,STACK   
1E7D   CD F3 0B               CALL   init   
1E80   CD 10 46               CALL   execStr   
1E83   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1E89                          ;*Macro unroll:  expect "1 2 <",TRUE
1E89   E1                     POP   HL   
1E8A   E5                     PUSH   HL   
1E8B   11 FF FF               LD   DE,TRUE   
1E8E   B7                     OR   A   
1E8F   ED 52                  SBC   HL,DE   
1E91   7D                     LD   A,L   
1E92   B4                     OR   H   
1E93   CA EC 1E               JP   Z,expectM_0_2769S50   
1E96   CD EC 0B               CALL   printStr   
1E99   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1EA5   CD EC 0B               CALL   printStr   
1EA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EB7   21 FF FF               LD   hl,TRUE   
1EBA   E5                     PUSH   hl   
1EBB   CD B3 0C               CALL   run   
1EBE   2E 00                  .CSTR   "."   
1EC0   CD EC 0B               CALL   printStr   
1EC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED0   E1                     POP   hl   
1ED1   E5                     PUSH   hl   
1ED2   E5                     PUSH   hl   
1ED3   CD B3 0C               CALL   run   
1ED6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1EEA   76                     HALT      
1EEB   00                     .CSTR      
1EEC                EXPECTM_0_2769S50:      
1EEC   E1                     POP   HL   
1EED                          ;*Macro unroll:  test "2 1 <", FALSE
1EED   31 80 47               LD   SP,STACK   
1EF0   CD F3 0B               CALL   init   
1EF3   CD 10 46               CALL   execStr   
1EF6   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1EFC                          ;*Macro unroll:  expect "2 1 <",FALSE
1EFC   E1                     POP   HL   
1EFD   E5                     PUSH   HL   
1EFE   11 00 00               LD   DE,FALSE   
1F01   B7                     OR   A   
1F02   ED 52                  SBC   HL,DE   
1F04   7D                     LD   A,L   
1F05   B4                     OR   H   
1F06   CA 5F 1F               JP   Z,expectM_0_2770S50   
1F09   CD EC 0B               CALL   printStr   
1F0C   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1F18   CD EC 0B               CALL   printStr   
1F1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F2A   21 00 00               LD   hl,FALSE   
1F2D   E5                     PUSH   hl   
1F2E   CD B3 0C               CALL   run   
1F31   2E 00                  .CSTR   "."   
1F33   CD EC 0B               CALL   printStr   
1F36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F43   E1                     POP   hl   
1F44   E5                     PUSH   hl   
1F45   E5                     PUSH   hl   
1F46   CD B3 0C               CALL   run   
1F49   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F5D   76                     HALT      
1F5E   00                     .CSTR      
1F5F                EXPECTM_0_2770S50:      
1F5F   E1                     POP   HL   
1F60                          ;*Macro unroll:  test "2 3 <", TRUE
1F60   31 80 47               LD   SP,STACK   
1F63   CD F3 0B               CALL   init   
1F66   CD 10 46               CALL   execStr   
1F69   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1F6F                          ;*Macro unroll:  expect "2 3 <",TRUE
1F6F   E1                     POP   HL   
1F70   E5                     PUSH   HL   
1F71   11 FF FF               LD   DE,TRUE   
1F74   B7                     OR   A   
1F75   ED 52                  SBC   HL,DE   
1F77   7D                     LD   A,L   
1F78   B4                     OR   H   
1F79   CA D2 1F               JP   Z,expectM_0_2771S50   
1F7C   CD EC 0B               CALL   printStr   
1F7F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1F8B   CD EC 0B               CALL   printStr   
1F8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F9D   21 FF FF               LD   hl,TRUE   
1FA0   E5                     PUSH   hl   
1FA1   CD B3 0C               CALL   run   
1FA4   2E 00                  .CSTR   "."   
1FA6   CD EC 0B               CALL   printStr   
1FA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB6   E1                     POP   hl   
1FB7   E5                     PUSH   hl   
1FB8   E5                     PUSH   hl   
1FB9   CD B3 0C               CALL   run   
1FBC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1FD0   76                     HALT      
1FD1   00                     .CSTR      
1FD2                EXPECTM_0_2771S50:      
1FD2   E1                     POP   HL   
1FD3                          ;*Macro unroll:  test "3 3 <", FALSE
1FD3   31 80 47               LD   SP,STACK   
1FD6   CD F3 0B               CALL   init   
1FD9   CD 10 46               CALL   execStr   
1FDC   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1FE2                          ;*Macro unroll:  expect "3 3 <",FALSE
1FE2   E1                     POP   HL   
1FE3   E5                     PUSH   HL   
1FE4   11 00 00               LD   DE,FALSE   
1FE7   B7                     OR   A   
1FE8   ED 52                  SBC   HL,DE   
1FEA   7D                     LD   A,L   
1FEB   B4                     OR   H   
1FEC   CA 45 20               JP   Z,expectM_0_2772S50   
1FEF   CD EC 0B               CALL   printStr   
1FF2   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1FFE   CD EC 0B               CALL   printStr   
2001   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2010   21 00 00               LD   hl,FALSE   
2013   E5                     PUSH   hl   
2014   CD B3 0C               CALL   run   
2017   2E 00                  .CSTR   "."   
2019   CD EC 0B               CALL   printStr   
201C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2029   E1                     POP   hl   
202A   E5                     PUSH   hl   
202B   E5                     PUSH   hl   
202C   CD B3 0C               CALL   run   
202F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2043   76                     HALT      
2044   00                     .CSTR      
2045                EXPECTM_0_2772S50:      
2045   E1                     POP   HL   
2046                          ;*Macro unroll:  test "1 2 >", FALSE
2046   31 80 47               LD   SP,STACK   
2049   CD F3 0B               CALL   init   
204C   CD 10 46               CALL   execStr   
204F   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2055                          ;*Macro unroll:  expect "1 2 >",FALSE
2055   E1                     POP   HL   
2056   E5                     PUSH   HL   
2057   11 00 00               LD   DE,FALSE   
205A   B7                     OR   A   
205B   ED 52                  SBC   HL,DE   
205D   7D                     LD   A,L   
205E   B4                     OR   H   
205F   CA B8 20               JP   Z,expectM_0_2773S50   
2062   CD EC 0B               CALL   printStr   
2065   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2071   CD EC 0B               CALL   printStr   
2074   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2083   21 00 00               LD   hl,FALSE   
2086   E5                     PUSH   hl   
2087   CD B3 0C               CALL   run   
208A   2E 00                  .CSTR   "."   
208C   CD EC 0B               CALL   printStr   
208F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
209C   E1                     POP   hl   
209D   E5                     PUSH   hl   
209E   E5                     PUSH   hl   
209F   CD B3 0C               CALL   run   
20A2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
20B6   76                     HALT      
20B7   00                     .CSTR      
20B8                EXPECTM_0_2773S50:      
20B8   E1                     POP   HL   
20B9                          ;*Macro unroll:  test "2 1 >", TRUE
20B9   31 80 47               LD   SP,STACK   
20BC   CD F3 0B               CALL   init   
20BF   CD 10 46               CALL   execStr   
20C2   32 20 31 20 3E 00      .CSTR   "2 1 >"   
20C8                          ;*Macro unroll:  expect "2 1 >",TRUE
20C8   E1                     POP   HL   
20C9   E5                     PUSH   HL   
20CA   11 FF FF               LD   DE,TRUE   
20CD   B7                     OR   A   
20CE   ED 52                  SBC   HL,DE   
20D0   7D                     LD   A,L   
20D1   B4                     OR   H   
20D2   CA 2B 21               JP   Z,expectM_0_2774S50   
20D5   CD EC 0B               CALL   printStr   
20D8   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
20E4   CD EC 0B               CALL   printStr   
20E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20F6   21 FF FF               LD   hl,TRUE   
20F9   E5                     PUSH   hl   
20FA   CD B3 0C               CALL   run   
20FD   2E 00                  .CSTR   "."   
20FF   CD EC 0B               CALL   printStr   
2102   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
210F   E1                     POP   hl   
2110   E5                     PUSH   hl   
2111   E5                     PUSH   hl   
2112   CD B3 0C               CALL   run   
2115   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2129   76                     HALT      
212A   00                     .CSTR      
212B                EXPECTM_0_2774S50:      
212B   E1                     POP   HL   
212C                          ;*Macro unroll:  test "3 3 >", FALSE
212C   31 80 47               LD   SP,STACK   
212F   CD F3 0B               CALL   init   
2132   CD 10 46               CALL   execStr   
2135   33 20 33 20 3E 00      .CSTR   "3 3 >"   
213B                          ;*Macro unroll:  expect "3 3 >",FALSE
213B   E1                     POP   HL   
213C   E5                     PUSH   HL   
213D   11 00 00               LD   DE,FALSE   
2140   B7                     OR   A   
2141   ED 52                  SBC   HL,DE   
2143   7D                     LD   A,L   
2144   B4                     OR   H   
2145   CA 9E 21               JP   Z,expectM_0_2775S50   
2148   CD EC 0B               CALL   printStr   
214B   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2157   CD EC 0B               CALL   printStr   
215A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2169   21 00 00               LD   hl,FALSE   
216C   E5                     PUSH   hl   
216D   CD B3 0C               CALL   run   
2170   2E 00                  .CSTR   "."   
2172   CD EC 0B               CALL   printStr   
2175   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2182   E1                     POP   hl   
2183   E5                     PUSH   hl   
2184   E5                     PUSH   hl   
2185   CD B3 0C               CALL   run   
2188   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
219C   76                     HALT      
219D   00                     .CSTR      
219E                EXPECTM_0_2775S50:      
219E   E1                     POP   HL   
219F                          ;*Macro unroll:  test "4 3 >", TRUE
219F   31 80 47               LD   SP,STACK   
21A2   CD F3 0B               CALL   init   
21A5   CD 10 46               CALL   execStr   
21A8   34 20 33 20 3E 00      .CSTR   "4 3 >"   
21AE                          ;*Macro unroll:  expect "4 3 >",TRUE
21AE   E1                     POP   HL   
21AF   E5                     PUSH   HL   
21B0   11 FF FF               LD   DE,TRUE   
21B3   B7                     OR   A   
21B4   ED 52                  SBC   HL,DE   
21B6   7D                     LD   A,L   
21B7   B4                     OR   H   
21B8   CA 11 22               JP   Z,expectM_0_2776S50   
21BB   CD EC 0B               CALL   printStr   
21BE   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
21CA   CD EC 0B               CALL   printStr   
21CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21DC   21 FF FF               LD   hl,TRUE   
21DF   E5                     PUSH   hl   
21E0   CD B3 0C               CALL   run   
21E3   2E 00                  .CSTR   "."   
21E5   CD EC 0B               CALL   printStr   
21E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21F5   E1                     POP   hl   
21F6   E5                     PUSH   hl   
21F7   E5                     PUSH   hl   
21F8   CD B3 0C               CALL   run   
21FB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
220F   76                     HALT      
2210   00                     .CSTR      
2211                EXPECTM_0_2776S50:      
2211   E1                     POP   HL   
2212                          ;*Macro unroll:  test "2 2 <=", TRUE
2212   31 80 47               LD   SP,STACK   
2215   CD F3 0B               CALL   init   
2218   CD 10 46               CALL   execStr   
221B   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
2222                          ;*Macro unroll:  expect "2 2 <=",TRUE
2222   E1                     POP   HL   
2223   E5                     PUSH   HL   
2224   11 FF FF               LD   DE,TRUE   
2227   B7                     OR   A   
2228   ED 52                  SBC   HL,DE   
222A   7D                     LD   A,L   
222B   B4                     OR   H   
222C   CA 86 22               JP   Z,expectM_0_2777S50   
222F   CD EC 0B               CALL   printStr   
2232   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
223F   CD EC 0B               CALL   printStr   
2242   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2251   21 FF FF               LD   hl,TRUE   
2254   E5                     PUSH   hl   
2255   CD B3 0C               CALL   run   
2258   2E 00                  .CSTR   "."   
225A   CD EC 0B               CALL   printStr   
225D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
226A   E1                     POP   hl   
226B   E5                     PUSH   hl   
226C   E5                     PUSH   hl   
226D   CD B3 0C               CALL   run   
2270   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2284   76                     HALT      
2285   00                     .CSTR      
2286                EXPECTM_0_2777S50:      
2286   E1                     POP   HL   
2287                          ;*Macro unroll:  test "2 2 >=", TRUE
2287   31 80 47               LD   SP,STACK   
228A   CD F3 0B               CALL   init   
228D   CD 10 46               CALL   execStr   
2290   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2297                          ;*Macro unroll:  expect "2 2 >=",TRUE
2297   E1                     POP   HL   
2298   E5                     PUSH   HL   
2299   11 FF FF               LD   DE,TRUE   
229C   B7                     OR   A   
229D   ED 52                  SBC   HL,DE   
229F   7D                     LD   A,L   
22A0   B4                     OR   H   
22A1   CA FB 22               JP   Z,expectM_0_2778S50   
22A4   CD EC 0B               CALL   printStr   
22A7   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
22B4   CD EC 0B               CALL   printStr   
22B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22C6   21 FF FF               LD   hl,TRUE   
22C9   E5                     PUSH   hl   
22CA   CD B3 0C               CALL   run   
22CD   2E 00                  .CSTR   "."   
22CF   CD EC 0B               CALL   printStr   
22D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22DF   E1                     POP   hl   
22E0   E5                     PUSH   hl   
22E1   E5                     PUSH   hl   
22E2   CD B3 0C               CALL   run   
22E5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
22F9   76                     HALT      
22FA   00                     .CSTR      
22FB                EXPECTM_0_2778S50:      
22FB   E1                     POP   HL   
22FC                          ;*Macro unroll:  test "3 1 <<", 6
22FC   31 80 47               LD   SP,STACK   
22FF   CD F3 0B               CALL   init   
2302   CD 10 46               CALL   execStr   
2305   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
230C                          ;*Macro unroll:  expect "3 1 <<",6
230C   E1                     POP   HL   
230D   E5                     PUSH   HL   
230E   11 06 00               LD   DE,6   
2311   B7                     OR   A   
2312   ED 52                  SBC   HL,DE   
2314   7D                     LD   A,L   
2315   B4                     OR   H   
2316   CA 70 23               JP   Z,expectM_0_2779S50   
2319   CD EC 0B               CALL   printStr   
231C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2329   CD EC 0B               CALL   printStr   
232C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233B   21 06 00               LD   hl,6   
233E   E5                     PUSH   hl   
233F   CD B3 0C               CALL   run   
2342   2E 00                  .CSTR   "."   
2344   CD EC 0B               CALL   printStr   
2347   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2354   E1                     POP   hl   
2355   E5                     PUSH   hl   
2356   E5                     PUSH   hl   
2357   CD B3 0C               CALL   run   
235A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
236E   76                     HALT      
236F   00                     .CSTR      
2370                EXPECTM_0_2779S50:      
2370   E1                     POP   HL   
2371                          ;*Macro unroll:  test "10 1 >>", 5
2371   31 80 47               LD   SP,STACK   
2374   CD F3 0B               CALL   init   
2377   CD 10 46               CALL   execStr   
237A   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2382                          ;*Macro unroll:  expect "10 1 >>",5
2382   E1                     POP   HL   
2383   E5                     PUSH   HL   
2384   11 05 00               LD   DE,5   
2387   B7                     OR   A   
2388   ED 52                  SBC   HL,DE   
238A   7D                     LD   A,L   
238B   B4                     OR   H   
238C   CA E7 23               JP   Z,expectM_0_2780S50   
238F   CD EC 0B               CALL   printStr   
2392   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
23A0   CD EC 0B               CALL   printStr   
23A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B2   21 05 00               LD   hl,5   
23B5   E5                     PUSH   hl   
23B6   CD B3 0C               CALL   run   
23B9   2E 00                  .CSTR   "."   
23BB   CD EC 0B               CALL   printStr   
23BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23CB   E1                     POP   hl   
23CC   E5                     PUSH   hl   
23CD   E5                     PUSH   hl   
23CE   CD B3 0C               CALL   run   
23D1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
23E5   76                     HALT      
23E6   00                     .CSTR      
23E7                EXPECTM_0_2780S50:      
23E7   E1                     POP   HL   
23E8                          ;*Macro unroll:  test "1 x = x", 1
23E8   31 80 47               LD   SP,STACK   
23EB   CD F3 0B               CALL   init   
23EE   CD 10 46               CALL   execStr   
23F1   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
23F9                          ;*Macro unroll:  expect "1 x = x",1
23F9   E1                     POP   HL   
23FA   E5                     PUSH   HL   
23FB   11 01 00               LD   DE,1   
23FE   B7                     OR   A   
23FF   ED 52                  SBC   HL,DE   
2401   7D                     LD   A,L   
2402   B4                     OR   H   
2403   CA 5E 24               JP   Z,expectM_0_2781S50   
2406   CD EC 0B               CALL   printStr   
2409   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2417   CD EC 0B               CALL   printStr   
241A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2429   21 01 00               LD   hl,1   
242C   E5                     PUSH   hl   
242D   CD B3 0C               CALL   run   
2430   2E 00                  .CSTR   "."   
2432   CD EC 0B               CALL   printStr   
2435   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2442   E1                     POP   hl   
2443   E5                     PUSH   hl   
2444   E5                     PUSH   hl   
2445   CD B3 0C               CALL   run   
2448   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
245C   76                     HALT      
245D   00                     .CSTR      
245E                EXPECTM_0_2781S50:      
245E   E1                     POP   HL   
245F                          ;*Macro unroll:  test "1{}^", 1
245F   31 80 47               LD   SP,STACK   
2462   CD F3 0B               CALL   init   
2465   CD 10 46               CALL   execStr   
2468   31 7B 7D 5E 00         .CSTR   "1{}^"   
246D                          ;*Macro unroll:  expect "1{}^",1
246D   E1                     POP   HL   
246E   E5                     PUSH   HL   
246F   11 01 00               LD   DE,1   
2472   B7                     OR   A   
2473   ED 52                  SBC   HL,DE   
2475   7D                     LD   A,L   
2476   B4                     OR   H   
2477   CA CF 24               JP   Z,expectM_0_2782S50   
247A   CD EC 0B               CALL   printStr   
247D   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2488   CD EC 0B               CALL   printStr   
248B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
249A   21 01 00               LD   hl,1   
249D   E5                     PUSH   hl   
249E   CD B3 0C               CALL   run   
24A1   2E 00                  .CSTR   "."   
24A3   CD EC 0B               CALL   printStr   
24A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24B3   E1                     POP   hl   
24B4   E5                     PUSH   hl   
24B5   E5                     PUSH   hl   
24B6   CD B3 0C               CALL   run   
24B9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
24CD   76                     HALT      
24CE   00                     .CSTR      
24CF                EXPECTM_0_2782S50:      
24CF   E1                     POP   HL   
24D0                          ;*Macro unroll:  test "{1}^", 1
24D0   31 80 47               LD   SP,STACK   
24D3   CD F3 0B               CALL   init   
24D6   CD 10 46               CALL   execStr   
24D9   7B 31 7D 5E 00         .CSTR   "{1}^"   
24DE                          ;*Macro unroll:  expect "{1}^",1
24DE   E1                     POP   HL   
24DF   E5                     PUSH   HL   
24E0   11 01 00               LD   DE,1   
24E3   B7                     OR   A   
24E4   ED 52                  SBC   HL,DE   
24E6   7D                     LD   A,L   
24E7   B4                     OR   H   
24E8   CA 40 25               JP   Z,expectM_0_2783S50   
24EB   CD EC 0B               CALL   printStr   
24EE   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
24F9   CD EC 0B               CALL   printStr   
24FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
250B   21 01 00               LD   hl,1   
250E   E5                     PUSH   hl   
250F   CD B3 0C               CALL   run   
2512   2E 00                  .CSTR   "."   
2514   CD EC 0B               CALL   printStr   
2517   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2524   E1                     POP   hl   
2525   E5                     PUSH   hl   
2526   E5                     PUSH   hl   
2527   CD B3 0C               CALL   run   
252A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
253E   76                     HALT      
253F   00                     .CSTR      
2540                EXPECTM_0_2783S50:      
2540   E1                     POP   HL   
2541                          ;*Macro unroll:  test "{{1}^}^", 1
2541   31 80 47               LD   SP,STACK   
2544   CD F3 0B               CALL   init   
2547   CD 10 46               CALL   execStr   
254A   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2552                          ;*Macro unroll:  expect "{{1}^}^",1
2552   E1                     POP   HL   
2553   E5                     PUSH   HL   
2554   11 01 00               LD   DE,1   
2557   B7                     OR   A   
2558   ED 52                  SBC   HL,DE   
255A   7D                     LD   A,L   
255B   B4                     OR   H   
255C   CA B7 25               JP   Z,expectM_0_2784S50   
255F   CD EC 0B               CALL   printStr   
2562   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2570   CD EC 0B               CALL   printStr   
2573   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2582   21 01 00               LD   hl,1   
2585   E5                     PUSH   hl   
2586   CD B3 0C               CALL   run   
2589   2E 00                  .CSTR   "."   
258B   CD EC 0B               CALL   printStr   
258E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
259B   E1                     POP   hl   
259C   E5                     PUSH   hl   
259D   E5                     PUSH   hl   
259E   CD B3 0C               CALL   run   
25A1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
25B5   76                     HALT      
25B6   00                     .CSTR      
25B7                EXPECTM_0_2784S50:      
25B7   E1                     POP   HL   
25B8                          ;*Macro unroll:  test "{{{1}^}^}^", 1
25B8   31 80 47               LD   SP,STACK   
25BB   CD F3 0B               CALL   init   
25BE   CD 10 46               CALL   execStr   
25C1   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
25CC                          ;*Macro unroll:  expect "{{{1}^}^}^",1
25CC   E1                     POP   HL   
25CD   E5                     PUSH   HL   
25CE   11 01 00               LD   DE,1   
25D1   B7                     OR   A   
25D2   ED 52                  SBC   HL,DE   
25D4   7D                     LD   A,L   
25D5   B4                     OR   H   
25D6   CA 34 26               JP   Z,expectM_0_2785S50   
25D9   CD EC 0B               CALL   printStr   
25DC   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
25ED   CD EC 0B               CALL   printStr   
25F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25FF   21 01 00               LD   hl,1   
2602   E5                     PUSH   hl   
2603   CD B3 0C               CALL   run   
2606   2E 00                  .CSTR   "."   
2608   CD EC 0B               CALL   printStr   
260B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2618   E1                     POP   hl   
2619   E5                     PUSH   hl   
261A   E5                     PUSH   hl   
261B   CD B3 0C               CALL   run   
261E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2632   76                     HALT      
2633   00                     .CSTR      
2634                EXPECTM_0_2785S50:      
2634   E1                     POP   HL   
2635                          ;*Macro unroll:  test "5 /f{10} ?", 5
2635   31 80 47               LD   SP,STACK   
2638   CD F3 0B               CALL   init   
263B   CD 10 46               CALL   execStr   
263E   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
2649                          ;*Macro unroll:  expect "5 /f{10} ?",5
2649   E1                     POP   HL   
264A   E5                     PUSH   HL   
264B   11 05 00               LD   DE,5   
264E   B7                     OR   A   
264F   ED 52                  SBC   HL,DE   
2651   7D                     LD   A,L   
2652   B4                     OR   H   
2653   CA B1 26               JP   Z,expectM_0_2786S50   
2656   CD EC 0B               CALL   printStr   
2659   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
266A   CD EC 0B               CALL   printStr   
266D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
267C   21 05 00               LD   hl,5   
267F   E5                     PUSH   hl   
2680   CD B3 0C               CALL   run   
2683   2E 00                  .CSTR   "."   
2685   CD EC 0B               CALL   printStr   
2688   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2695   E1                     POP   hl   
2696   E5                     PUSH   hl   
2697   E5                     PUSH   hl   
2698   CD B3 0C               CALL   run   
269B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
26AF   76                     HALT      
26B0   00                     .CSTR      
26B1                EXPECTM_0_2786S50:      
26B1   E1                     POP   HL   
26B2                          ;*Macro unroll:  test "5 /t{10} ? +", 15
26B2   31 80 47               LD   SP,STACK   
26B5   CD F3 0B               CALL   init   
26B8   CD 10 46               CALL   execStr   
26BB   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
26C8                          ;*Macro unroll:  expect "5 /t{10} ? +",15
26C8   E1                     POP   HL   
26C9   E5                     PUSH   HL   
26CA   11 0F 00               LD   DE,15   
26CD   B7                     OR   A   
26CE   ED 52                  SBC   HL,DE   
26D0   7D                     LD   A,L   
26D1   B4                     OR   H   
26D2   CA 32 27               JP   Z,expectM_0_2787S50   
26D5   CD EC 0B               CALL   printStr   
26D8   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
26EB   CD EC 0B               CALL   printStr   
26EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26FD   21 0F 00               LD   hl,15   
2700   E5                     PUSH   hl   
2701   CD B3 0C               CALL   run   
2704   2E 00                  .CSTR   "."   
2706   CD EC 0B               CALL   printStr   
2709   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2716   E1                     POP   hl   
2717   E5                     PUSH   hl   
2718   E5                     PUSH   hl   
2719   CD B3 0C               CALL   run   
271C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2730   76                     HALT      
2731   00                     .CSTR      
2732                EXPECTM_0_2787S50:      
2732   E1                     POP   HL   
2733                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2733   31 80 47               LD   SP,STACK   
2736   CD F3 0B               CALL   init   
2739   CD 10 46               CALL   execStr   
273C   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
274E                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
274E   E1                     POP   HL   
274F   E5                     PUSH   HL   
2750   11 15 00               LD   DE,21   
2753   B7                     OR   A   
2754   ED 52                  SBC   HL,DE   
2756   7D                     LD   A,L   
2757   B4                     OR   H   
2758   CA BD 27               JP   Z,expectM_0_2788S50   
275B   CD EC 0B               CALL   printStr   
275E   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2776   CD EC 0B               CALL   printStr   
2779   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2788   21 15 00               LD   hl,21   
278B   E5                     PUSH   hl   
278C   CD B3 0C               CALL   run   
278F   2E 00                  .CSTR   "."   
2791   CD EC 0B               CALL   printStr   
2794   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27A1   E1                     POP   hl   
27A2   E5                     PUSH   hl   
27A3   E5                     PUSH   hl   
27A4   CD B3 0C               CALL   run   
27A7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
27BB   76                     HALT      
27BC   00                     .CSTR      
27BD                EXPECTM_0_2788S50:      
27BD   E1                     POP   HL   
27BE                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
27BE   31 80 47               LD   SP,STACK   
27C1   CD F3 0B               CALL   init   
27C4   CD 10 46               CALL   execStr   
27C7   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
27D9                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
27D9   E1                     POP   HL   
27DA   E5                     PUSH   HL   
27DB   11 0B 00               LD   DE,11   
27DE   B7                     OR   A   
27DF   ED 52                  SBC   HL,DE   
27E1   7D                     LD   A,L   
27E2   B4                     OR   H   
27E3   CA 48 28               JP   Z,expectM_0_2789S50   
27E6   CD EC 0B               CALL   printStr   
27E9   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2801   CD EC 0B               CALL   printStr   
2804   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2813   21 0B 00               LD   hl,11   
2816   E5                     PUSH   hl   
2817   CD B3 0C               CALL   run   
281A   2E 00                  .CSTR   "."   
281C   CD EC 0B               CALL   printStr   
281F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
282C   E1                     POP   hl   
282D   E5                     PUSH   hl   
282E   E5                     PUSH   hl   
282F   CD B3 0C               CALL   run   
2832   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2846   76                     HALT      
2847   00                     .CSTR      
2848                EXPECTM_0_2789S50:      
2848   E1                     POP   HL   
2849                          ;*Macro unroll:  test ": -2%", $0000
2849   31 80 47               LD   SP,STACK   
284C   CD F3 0B               CALL   init   
284F   CD 10 46               CALL   execStr   
2852   3A 20 2D 32 25 00      .CSTR   ": -2%"   
2858                          ;*Macro unroll:  expect ": -2%",$0000
2858   E1                     POP   HL   
2859   E5                     PUSH   HL   
285A   11 00 00               LD   DE,$0000   
285D   B7                     OR   A   
285E   ED 52                  SBC   HL,DE   
2860   7D                     LD   A,L   
2861   B4                     OR   H   
2862   CA BB 28               JP   Z,expectM_0_2790S50   
2865   CD EC 0B               CALL   printStr   
2868   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2874   CD EC 0B               CALL   printStr   
2877   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2886   21 00 00               LD   hl,$0000   
2889   E5                     PUSH   hl   
288A   CD B3 0C               CALL   run   
288D   2E 00                  .CSTR   "."   
288F   CD EC 0B               CALL   printStr   
2892   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
289F   E1                     POP   hl   
28A0   E5                     PUSH   hl   
28A1   E5                     PUSH   hl   
28A2   CD B3 0C               CALL   run   
28A5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
28B9   76                     HALT      
28BA   00                     .CSTR      
28BB                EXPECTM_0_2790S50:      
28BB   E1                     POP   HL   
28BC                          ;*Macro unroll:  test ":a -1%", $0001
28BC   31 80 47               LD   SP,STACK   
28BF   CD F3 0B               CALL   init   
28C2   CD 10 46               CALL   execStr   
28C5   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
28CC                          ;*Macro unroll:  expect ":a -1%",$0001
28CC   E1                     POP   HL   
28CD   E5                     PUSH   HL   
28CE   11 01 00               LD   DE,$0001   
28D1   B7                     OR   A   
28D2   ED 52                  SBC   HL,DE   
28D4   7D                     LD   A,L   
28D5   B4                     OR   H   
28D6   CA 30 29               JP   Z,expectM_0_2791S50   
28D9   CD EC 0B               CALL   printStr   
28DC   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
28E9   CD EC 0B               CALL   printStr   
28EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28FB   21 01 00               LD   hl,$0001   
28FE   E5                     PUSH   hl   
28FF   CD B3 0C               CALL   run   
2902   2E 00                  .CSTR   "."   
2904   CD EC 0B               CALL   printStr   
2907   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2914   E1                     POP   hl   
2915   E5                     PUSH   hl   
2916   E5                     PUSH   hl   
2917   CD B3 0C               CALL   run   
291A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
292E   76                     HALT      
292F   00                     .CSTR      
2930                EXPECTM_0_2791S50:      
2930   E1                     POP   HL   
2931                          ;*Macro unroll:  test ":a: -1%", $0001
2931   31 80 47               LD   SP,STACK   
2934   CD F3 0B               CALL   init   
2937   CD 10 46               CALL   execStr   
293A   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2942                          ;*Macro unroll:  expect ":a: -1%",$0001
2942   E1                     POP   HL   
2943   E5                     PUSH   HL   
2944   11 01 00               LD   DE,$0001   
2947   B7                     OR   A   
2948   ED 52                  SBC   HL,DE   
294A   7D                     LD   A,L   
294B   B4                     OR   H   
294C   CA A7 29               JP   Z,expectM_0_2792S50   
294F   CD EC 0B               CALL   printStr   
2952   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2960   CD EC 0B               CALL   printStr   
2963   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2972   21 01 00               LD   hl,$0001   
2975   E5                     PUSH   hl   
2976   CD B3 0C               CALL   run   
2979   2E 00                  .CSTR   "."   
297B   CD EC 0B               CALL   printStr   
297E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
298B   E1                     POP   hl   
298C   E5                     PUSH   hl   
298D   E5                     PUSH   hl   
298E   CD B3 0C               CALL   run   
2991   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
29A5   76                     HALT      
29A6   00                     .CSTR      
29A7                EXPECTM_0_2792S50:      
29A7   E1                     POP   HL   
29A8                          ;*Macro unroll:  test ":a:b -1%", $0102
29A8   31 80 47               LD   SP,STACK   
29AB   CD F3 0B               CALL   init   
29AE   CD 10 46               CALL   execStr   
29B1   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
29BA                          ;*Macro unroll:  expect ":a:b -1%",$0102
29BA   E1                     POP   HL   
29BB   E5                     PUSH   HL   
29BC   11 02 01               LD   DE,$0102   
29BF   B7                     OR   A   
29C0   ED 52                  SBC   HL,DE   
29C2   7D                     LD   A,L   
29C3   B4                     OR   H   
29C4   CA 20 2A               JP   Z,expectM_0_2793S50   
29C7   CD EC 0B               CALL   printStr   
29CA   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
29D9   CD EC 0B               CALL   printStr   
29DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29EB   21 02 01               LD   hl,$0102   
29EE   E5                     PUSH   hl   
29EF   CD B3 0C               CALL   run   
29F2   2E 00                  .CSTR   "."   
29F4   CD EC 0B               CALL   printStr   
29F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A04   E1                     POP   hl   
2A05   E5                     PUSH   hl   
2A06   E5                     PUSH   hl   
2A07   CD B3 0C               CALL   run   
2A0A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A1E   76                     HALT      
2A1F   00                     .CSTR      
2A20                EXPECTM_0_2793S50:      
2A20   E1                     POP   HL   
2A21                          ;*Macro unroll:  test "::b -1%", $0101
2A21   31 80 47               LD   SP,STACK   
2A24   CD F3 0B               CALL   init   
2A27   CD 10 46               CALL   execStr   
2A2A   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2A32                          ;*Macro unroll:  expect "::b -1%",$0101
2A32   E1                     POP   HL   
2A33   E5                     PUSH   HL   
2A34   11 01 01               LD   DE,$0101   
2A37   B7                     OR   A   
2A38   ED 52                  SBC   HL,DE   
2A3A   7D                     LD   A,L   
2A3B   B4                     OR   H   
2A3C   CA 97 2A               JP   Z,expectM_0_2794S50   
2A3F   CD EC 0B               CALL   printStr   
2A42   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2A50   CD EC 0B               CALL   printStr   
2A53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A62   21 01 01               LD   hl,$0101   
2A65   E5                     PUSH   hl   
2A66   CD B3 0C               CALL   run   
2A69   2E 00                  .CSTR   "."   
2A6B   CD EC 0B               CALL   printStr   
2A6E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A7B   E1                     POP   hl   
2A7C   E5                     PUSH   hl   
2A7D   E5                     PUSH   hl   
2A7E   CD B3 0C               CALL   run   
2A81   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A95   76                     HALT      
2A96   00                     .CSTR      
2A97                EXPECTM_0_2794S50:      
2A97   E1                     POP   HL   
2A98                          ;*Macro unroll:  test ":{2};^", 2
2A98   31 80 47               LD   SP,STACK   
2A9B   CD F3 0B               CALL   init   
2A9E   CD 10 46               CALL   execStr   
2AA1   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2AA8                          ;*Macro unroll:  expect ":{2};^",2
2AA8   E1                     POP   HL   
2AA9   E5                     PUSH   HL   
2AAA   11 02 00               LD   DE,2   
2AAD   B7                     OR   A   
2AAE   ED 52                  SBC   HL,DE   
2AB0   7D                     LD   A,L   
2AB1   B4                     OR   H   
2AB2   CA 0C 2B               JP   Z,expectM_0_2795S50   
2AB5   CD EC 0B               CALL   printStr   
2AB8   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2AC5   CD EC 0B               CALL   printStr   
2AC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AD7   21 02 00               LD   hl,2   
2ADA   E5                     PUSH   hl   
2ADB   CD B3 0C               CALL   run   
2ADE   2E 00                  .CSTR   "."   
2AE0   CD EC 0B               CALL   printStr   
2AE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AF0   E1                     POP   hl   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD B3 0C               CALL   run   
2AF6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B0A   76                     HALT      
2B0B   00                     .CSTR      
2B0C                EXPECTM_0_2795S50:      
2B0C   E1                     POP   HL   
2B0D                          ;*Macro unroll:  test ":a{2};^", 2
2B0D   31 80 47               LD   SP,STACK   
2B10   CD F3 0B               CALL   init   
2B13   CD 10 46               CALL   execStr   
2B16   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2B1E                          ;*Macro unroll:  expect ":a{2};^",2
2B1E   E1                     POP   HL   
2B1F   E5                     PUSH   HL   
2B20   11 02 00               LD   DE,2   
2B23   B7                     OR   A   
2B24   ED 52                  SBC   HL,DE   
2B26   7D                     LD   A,L   
2B27   B4                     OR   H   
2B28   CA 83 2B               JP   Z,expectM_0_2796S50   
2B2B   CD EC 0B               CALL   printStr   
2B2E   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2B3C   CD EC 0B               CALL   printStr   
2B3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B4E   21 02 00               LD   hl,2   
2B51   E5                     PUSH   hl   
2B52   CD B3 0C               CALL   run   
2B55   2E 00                  .CSTR   "."   
2B57   CD EC 0B               CALL   printStr   
2B5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B67   E1                     POP   hl   
2B68   E5                     PUSH   hl   
2B69   E5                     PUSH   hl   
2B6A   CD B3 0C               CALL   run   
2B6D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B81   76                     HALT      
2B82   00                     .CSTR      
2B83                EXPECTM_0_2796S50:      
2B83   E1                     POP   HL   
2B84                          ;*Macro unroll:  test "5 :a{$a};^", 5
2B84   31 80 47               LD   SP,STACK   
2B87   CD F3 0B               CALL   init   
2B8A   CD 10 46               CALL   execStr   
2B8D   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2B98                          ;*Macro unroll:  expect "5 :a{$a};^",5
2B98   E1                     POP   HL   
2B99   E5                     PUSH   HL   
2B9A   11 05 00               LD   DE,5   
2B9D   B7                     OR   A   
2B9E   ED 52                  SBC   HL,DE   
2BA0   7D                     LD   A,L   
2BA1   B4                     OR   H   
2BA2   CA 00 2C               JP   Z,expectM_0_2797S50   
2BA5   CD EC 0B               CALL   printStr   
2BA8   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2BB9   CD EC 0B               CALL   printStr   
2BBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BCB   21 05 00               LD   hl,5   
2BCE   E5                     PUSH   hl   
2BCF   CD B3 0C               CALL   run   
2BD2   2E 00                  .CSTR   "."   
2BD4   CD EC 0B               CALL   printStr   
2BD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BE4   E1                     POP   hl   
2BE5   E5                     PUSH   hl   
2BE6   E5                     PUSH   hl   
2BE7   CD B3 0C               CALL   run   
2BEA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2BFE   76                     HALT      
2BFF   00                     .CSTR      
2C00                EXPECTM_0_2797S50:      
2C00   E1                     POP   HL   
2C01                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2C01   31 80 47               LD   SP,STACK   
2C04   CD F3 0B               CALL   init   
2C07   CD 10 46               CALL   execStr   
2C0A   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2C17                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2C17   E1                     POP   HL   
2C18   E5                     PUSH   HL   
2C19   11 05 00               LD   DE,5   
2C1C   B7                     OR   A   
2C1D   ED 52                  SBC   HL,DE   
2C1F   7D                     LD   A,L   
2C20   B4                     OR   H   
2C21   CA 81 2C               JP   Z,expectM_0_2798S50   
2C24   CD EC 0B               CALL   printStr   
2C27   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2C3A   CD EC 0B               CALL   printStr   
2C3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C4C   21 05 00               LD   hl,5   
2C4F   E5                     PUSH   hl   
2C50   CD B3 0C               CALL   run   
2C53   2E 00                  .CSTR   "."   
2C55   CD EC 0B               CALL   printStr   
2C58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C65   E1                     POP   hl   
2C66   E5                     PUSH   hl   
2C67   E5                     PUSH   hl   
2C68   CD B3 0C               CALL   run   
2C6B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C7F   76                     HALT      
2C80   00                     .CSTR      
2C81                EXPECTM_0_2798S50:      
2C81   E1                     POP   HL   
2C82                          ;*Macro unroll:  test ":a{{2}^};^", 2
2C82   31 80 47               LD   SP,STACK   
2C85   CD F3 0B               CALL   init   
2C88   CD 10 46               CALL   execStr   
2C8B   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2C96                          ;*Macro unroll:  expect ":a{{2}^};^",2
2C96   E1                     POP   HL   
2C97   E5                     PUSH   HL   
2C98   11 02 00               LD   DE,2   
2C9B   B7                     OR   A   
2C9C   ED 52                  SBC   HL,DE   
2C9E   7D                     LD   A,L   
2C9F   B4                     OR   H   
2CA0   CA FE 2C               JP   Z,expectM_0_2799S50   
2CA3   CD EC 0B               CALL   printStr   
2CA6   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2CB7   CD EC 0B               CALL   printStr   
2CBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CC9   21 02 00               LD   hl,2   
2CCC   E5                     PUSH   hl   
2CCD   CD B3 0C               CALL   run   
2CD0   2E 00                  .CSTR   "."   
2CD2   CD EC 0B               CALL   printStr   
2CD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CE2   E1                     POP   hl   
2CE3   E5                     PUSH   hl   
2CE4   E5                     PUSH   hl   
2CE5   CD B3 0C               CALL   run   
2CE8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2CFC   76                     HALT      
2CFD   00                     .CSTR      
2CFE                EXPECTM_0_2799S50:      
2CFE   E1                     POP   HL   
2CFF                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2CFF   31 80 47               LD   SP,STACK   
2D02   CD F3 0B               CALL   init   
2D05   CD 10 46               CALL   execStr   
2D08   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2D18                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2D18   E1                     POP   HL   
2D19   E5                     PUSH   HL   
2D1A   11 05 00               LD   DE,5   
2D1D   B7                     OR   A   
2D1E   ED 52                  SBC   HL,DE   
2D20   7D                     LD   A,L   
2D21   B4                     OR   H   
2D22   CA 85 2D               JP   Z,expectM_0_2800S50   
2D25   CD EC 0B               CALL   printStr   
2D28   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2D3E   CD EC 0B               CALL   printStr   
2D41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D50   21 05 00               LD   hl,5   
2D53   E5                     PUSH   hl   
2D54   CD B3 0C               CALL   run   
2D57   2E 00                  .CSTR   "."   
2D59   CD EC 0B               CALL   printStr   
2D5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D69   E1                     POP   hl   
2D6A   E5                     PUSH   hl   
2D6B   E5                     PUSH   hl   
2D6C   CD B3 0C               CALL   run   
2D6F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2D83   76                     HALT      
2D84   00                     .CSTR      
2D85                EXPECTM_0_2800S50:      
2D85   E1                     POP   HL   
2D86                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2D86   31 80 47               LD   SP,STACK   
2D89   CD F3 0B               CALL   init   
2D8C   CD 10 46               CALL   execStr   
2D8F   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2DA0                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2DA0   E1                     POP   HL   
2DA1   E5                     PUSH   HL   
2DA2   11 01 00               LD   DE,1   
2DA5   B7                     OR   A   
2DA6   ED 52                  SBC   HL,DE   
2DA8   7D                     LD   A,L   
2DA9   B4                     OR   H   
2DAA   CA 0E 2E               JP   Z,expectM_0_2801S50   
2DAD   CD EC 0B               CALL   printStr   
2DB0   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2DC7   CD EC 0B               CALL   printStr   
2DCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DD9   21 01 00               LD   hl,1   
2DDC   E5                     PUSH   hl   
2DDD   CD B3 0C               CALL   run   
2DE0   2E 00                  .CSTR   "."   
2DE2   CD EC 0B               CALL   printStr   
2DE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DF2   E1                     POP   hl   
2DF3   E5                     PUSH   hl   
2DF4   E5                     PUSH   hl   
2DF5   CD B3 0C               CALL   run   
2DF8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E0C   76                     HALT      
2E0D   00                     .CSTR      
2E0E                EXPECTM_0_2801S50:      
2E0E   E1                     POP   HL   
2E0F                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2E0F   31 80 47               LD   SP,STACK   
2E12   CD F3 0B               CALL   init   
2E15   CD 10 46               CALL   execStr   
2E18   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2E2C                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2E2C   E1                     POP   HL   
2E2D   E5                     PUSH   HL   
2E2E   11 07 00               LD   DE,7   
2E31   B7                     OR   A   
2E32   ED 52                  SBC   HL,DE   
2E34   7D                     LD   A,L   
2E35   B4                     OR   H   
2E36   CA 9D 2E               JP   Z,expectM_0_2802S50   
2E39   CD EC 0B               CALL   printStr   
2E3C   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2E56   CD EC 0B               CALL   printStr   
2E59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E68   21 07 00               LD   hl,7   
2E6B   E5                     PUSH   hl   
2E6C   CD B3 0C               CALL   run   
2E6F   2E 00                  .CSTR   "."   
2E71   CD EC 0B               CALL   printStr   
2E74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E81   E1                     POP   hl   
2E82   E5                     PUSH   hl   
2E83   E5                     PUSH   hl   
2E84   CD B3 0C               CALL   run   
2E87   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E9B   76                     HALT      
2E9C   00                     .CSTR      
2E9D                EXPECTM_0_2802S50:      
2E9D   E1                     POP   HL   
2E9E                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2E9E   31 80 47               LD   SP,STACK   
2EA1   CD F3 0B               CALL   init   
2EA4   CD 10 46               CALL   execStr   
2EA7   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2EBD                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2EBD   E1                     POP   HL   
2EBE   E5                     PUSH   HL   
2EBF   11 06 00               LD   DE,6   
2EC2   B7                     OR   A   
2EC3   ED 52                  SBC   HL,DE   
2EC5   7D                     LD   A,L   
2EC6   B4                     OR   H   
2EC7   CA 30 2F               JP   Z,expectM_0_2803S50   
2ECA   CD EC 0B               CALL   printStr   
2ECD   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2EE9   CD EC 0B               CALL   printStr   
2EEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EFB   21 06 00               LD   hl,6   
2EFE   E5                     PUSH   hl   
2EFF   CD B3 0C               CALL   run   
2F02   2E 00                  .CSTR   "."   
2F04   CD EC 0B               CALL   printStr   
2F07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F14   E1                     POP   hl   
2F15   E5                     PUSH   hl   
2F16   E5                     PUSH   hl   
2F17   CD B3 0C               CALL   run   
2F1A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2F2E   76                     HALT      
2F2F   00                     .CSTR      
2F30                EXPECTM_0_2803S50:      
2F30   E1                     POP   HL   
2F31                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2F31   31 80 47               LD   SP,STACK   
2F34   CD F3 0B               CALL   init   
2F37   CD 10 46               CALL   execStr   
2F3A   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2F49                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2F49   E1                     POP   HL   
2F4A   E5                     PUSH   HL   
2F4B   11 02 00               LD   DE,2   
2F4E   B7                     OR   A   
2F4F   ED 52                  SBC   HL,DE   
2F51   7D                     LD   A,L   
2F52   B4                     OR   H   
2F53   CA B5 2F               JP   Z,expectM_0_2804S50   
2F56   CD EC 0B               CALL   printStr   
2F59   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2F6E   CD EC 0B               CALL   printStr   
2F71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F80   21 02 00               LD   hl,2   
2F83   E5                     PUSH   hl   
2F84   CD B3 0C               CALL   run   
2F87   2E 00                  .CSTR   "."   
2F89   CD EC 0B               CALL   printStr   
2F8C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F99   E1                     POP   hl   
2F9A   E5                     PUSH   hl   
2F9B   E5                     PUSH   hl   
2F9C   CD B3 0C               CALL   run   
2F9F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2FB3   76                     HALT      
2FB4   00                     .CSTR      
2FB5                EXPECTM_0_2804S50:      
2FB5   E1                     POP   HL   
2FB6                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2FB6   31 80 47               LD   SP,STACK   
2FB9   CD F3 0B               CALL   init   
2FBC   CD 10 46               CALL   execStr   
2FBF   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2FD1                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2FD1   E1                     POP   HL   
2FD2   E5                     PUSH   HL   
2FD3   11 01 00               LD   DE,1   
2FD6   B7                     OR   A   
2FD7   ED 52                  SBC   HL,DE   
2FD9   7D                     LD   A,L   
2FDA   B4                     OR   H   
2FDB   CA 40 30               JP   Z,expectM_0_2805S50   
2FDE   CD EC 0B               CALL   printStr   
2FE1   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2FF9   CD EC 0B               CALL   printStr   
2FFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
300B   21 01 00               LD   hl,1   
300E   E5                     PUSH   hl   
300F   CD B3 0C               CALL   run   
3012   2E 00                  .CSTR   "."   
3014   CD EC 0B               CALL   printStr   
3017   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3024   E1                     POP   hl   
3025   E5                     PUSH   hl   
3026   E5                     PUSH   hl   
3027   CD B3 0C               CALL   run   
302A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
303E   76                     HALT      
303F   00                     .CSTR      
3040                EXPECTM_0_2805S50:      
3040   E1                     POP   HL   
3041                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3041   31 80 47               LD   SP,STACK   
3044   CD F3 0B               CALL   init   
3047   CD 10 46               CALL   execStr   
304A   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
305D                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
305D   E1                     POP   HL   
305E   E5                     PUSH   HL   
305F   11 02 00               LD   DE,2   
3062   B7                     OR   A   
3063   ED 52                  SBC   HL,DE   
3065   7D                     LD   A,L   
3066   B4                     OR   H   
3067   CA CD 30               JP   Z,expectM_0_2806S50   
306A   CD EC 0B               CALL   printStr   
306D   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3086   CD EC 0B               CALL   printStr   
3089   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3098   21 02 00               LD   hl,2   
309B   E5                     PUSH   hl   
309C   CD B3 0C               CALL   run   
309F   2E 00                  .CSTR   "."   
30A1   CD EC 0B               CALL   printStr   
30A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30B1   E1                     POP   hl   
30B2   E5                     PUSH   hl   
30B3   E5                     PUSH   hl   
30B4   CD B3 0C               CALL   run   
30B7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
30CB   76                     HALT      
30CC   00                     .CSTR      
30CD                EXPECTM_0_2806S50:      
30CD   E1                     POP   HL   
30CE                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
30CE   31 80 47               LD   SP,STACK   
30D1   CD F3 0B               CALL   init   
30D4   CD 10 46               CALL   execStr   
30D7   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
30EB                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
30EB   E1                     POP   HL   
30EC   E5                     PUSH   HL   
30ED   11 02 00               LD   DE,2   
30F0   B7                     OR   A   
30F1   ED 52                  SBC   HL,DE   
30F3   7D                     LD   A,L   
30F4   B4                     OR   H   
30F5   CA 5C 31               JP   Z,expectM_0_2807S50   
30F8   CD EC 0B               CALL   printStr   
30FB   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3115   CD EC 0B               CALL   printStr   
3118   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3127   21 02 00               LD   hl,2   
312A   E5                     PUSH   hl   
312B   CD B3 0C               CALL   run   
312E   2E 00                  .CSTR   "."   
3130   CD EC 0B               CALL   printStr   
3133   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3140   E1                     POP   hl   
3141   E5                     PUSH   hl   
3142   E5                     PUSH   hl   
3143   CD B3 0C               CALL   run   
3146   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
315A   76                     HALT      
315B   00                     .CSTR      
315C                EXPECTM_0_2807S50:      
315C   E1                     POP   HL   
315D                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
315D   31 80 47               LD   SP,STACK   
3160   CD F3 0B               CALL   init   
3163   CD 10 46               CALL   execStr   
3166   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
3179                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
3179   E1                     POP   HL   
317A   E5                     PUSH   HL   
317B   11 02 00               LD   DE,2   
317E   B7                     OR   A   
317F   ED 52                  SBC   HL,DE   
3181   7D                     LD   A,L   
3182   B4                     OR   H   
3183   CA E9 31               JP   Z,expectM_0_2808S50   
3186   CD EC 0B               CALL   printStr   
3189   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
31A2   CD EC 0B               CALL   printStr   
31A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B4   21 02 00               LD   hl,2   
31B7   E5                     PUSH   hl   
31B8   CD B3 0C               CALL   run   
31BB   2E 00                  .CSTR   "."   
31BD   CD EC 0B               CALL   printStr   
31C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31CD   E1                     POP   hl   
31CE   E5                     PUSH   hl   
31CF   E5                     PUSH   hl   
31D0   CD B3 0C               CALL   run   
31D3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
31E7   76                     HALT      
31E8   00                     .CSTR      
31E9                EXPECTM_0_2808S50:      
31E9   E1                     POP   HL   
31EA                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
31EA   31 80 47               LD   SP,STACK   
31ED   CD F3 0B               CALL   init   
31F0   CD 10 46               CALL   execStr   
31F3   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
320D                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
320D   E1                     POP   HL   
320E   E5                     PUSH   HL   
320F   11 05 00               LD   DE,5   
3212   B7                     OR   A   
3213   ED 52                  SBC   HL,DE   
3215   7D                     LD   A,L   
3216   B4                     OR   H   
3217   CA 84 32               JP   Z,expectM_0_2809S50   
321A   CD EC 0B               CALL   printStr   
321D   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
323D   CD EC 0B               CALL   printStr   
3240   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
324F   21 05 00               LD   hl,5   
3252   E5                     PUSH   hl   
3253   CD B3 0C               CALL   run   
3256   2E 00                  .CSTR   "."   
3258   CD EC 0B               CALL   printStr   
325B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3268   E1                     POP   hl   
3269   E5                     PUSH   hl   
326A   E5                     PUSH   hl   
326B   CD B3 0C               CALL   run   
326E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3282   76                     HALT      
3283   00                     .CSTR      
3284                EXPECTM_0_2809S50:      
3284   E1                     POP   HL   
3285                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3285   31 80 47               LD   SP,STACK   
3288   CD F3 0B               CALL   init   
328B   CD 10 46               CALL   execStr   
328E   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
329F                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
329F   E1                     POP   HL   
32A0   E5                     PUSH   HL   
32A1   11 02 00               LD   DE,2   
32A4   B7                     OR   A   
32A5   ED 52                  SBC   HL,DE   
32A7   7D                     LD   A,L   
32A8   B4                     OR   H   
32A9   CA 0D 33               JP   Z,expectM_0_2810S50   
32AC   CD EC 0B               CALL   printStr   
32AF   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
32C6   CD EC 0B               CALL   printStr   
32C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32D8   21 02 00               LD   hl,2   
32DB   E5                     PUSH   hl   
32DC   CD B3 0C               CALL   run   
32DF   2E 00                  .CSTR   "."   
32E1   CD EC 0B               CALL   printStr   
32E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32F1   E1                     POP   hl   
32F2   E5                     PUSH   hl   
32F3   E5                     PUSH   hl   
32F4   CD B3 0C               CALL   run   
32F7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
330B   76                     HALT      
330C   00                     .CSTR      
330D                EXPECTM_0_2810S50:      
330D   E1                     POP   HL   
330E                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
330E   31 80 47               LD   SP,STACK   
3311   CD F3 0B               CALL   init   
3314   CD 10 46               CALL   execStr   
3317   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
332E                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
332E   E1                     POP   HL   
332F   E5                     PUSH   HL   
3330   11 64 00               LD   DE,100   
3333   B7                     OR   A   
3334   ED 52                  SBC   HL,DE   
3336   7D                     LD   A,L   
3337   B4                     OR   H   
3338   CA A2 33               JP   Z,expectM_0_2811S50   
333B   CD EC 0B               CALL   printStr   
333E   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
335B   CD EC 0B               CALL   printStr   
335E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
336D   21 64 00               LD   hl,100   
3370   E5                     PUSH   hl   
3371   CD B3 0C               CALL   run   
3374   2E 00                  .CSTR   "."   
3376   CD EC 0B               CALL   printStr   
3379   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3386   E1                     POP   hl   
3387   E5                     PUSH   hl   
3388   E5                     PUSH   hl   
3389   CD B3 0C               CALL   run   
338C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
33A0   76                     HALT      
33A1   00                     .CSTR      
33A2                EXPECTM_0_2811S50:      
33A2   E1                     POP   HL   
33A3                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
33A3   31 80 47               LD   SP,STACK   
33A6   CD F3 0B               CALL   init   
33A9   CD 10 46               CALL   execStr   
33AC   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
33C4                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
33C4   E1                     POP   HL   
33C5   E5                     PUSH   HL   
33C6   11 01 00               LD   DE,1   
33C9   B7                     OR   A   
33CA   ED 52                  SBC   HL,DE   
33CC   7D                     LD   A,L   
33CD   B4                     OR   H   
33CE   CA 39 34               JP   Z,expectM_0_2812S50   
33D1   CD EC 0B               CALL   printStr   
33D4   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
33F2   CD EC 0B               CALL   printStr   
33F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3404   21 01 00               LD   hl,1   
3407   E5                     PUSH   hl   
3408   CD B3 0C               CALL   run   
340B   2E 00                  .CSTR   "."   
340D   CD EC 0B               CALL   printStr   
3410   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
341D   E1                     POP   hl   
341E   E5                     PUSH   hl   
341F   E5                     PUSH   hl   
3420   CD B3 0C               CALL   run   
3423   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3437   76                     HALT      
3438   00                     .CSTR      
3439                EXPECTM_0_2812S50:      
3439   E1                     POP   HL   
343A                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
343A   31 80 47               LD   SP,STACK   
343D   CD F3 0B               CALL   init   
3440   CD 10 46               CALL   execStr   
3443   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
345C                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
345C   E1                     POP   HL   
345D   E5                     PUSH   HL   
345E   11 02 00               LD   DE,2   
3461   B7                     OR   A   
3462   ED 52                  SBC   HL,DE   
3464   7D                     LD   A,L   
3465   B4                     OR   H   
3466   CA D2 34               JP   Z,expectM_0_2813S50   
3469   CD EC 0B               CALL   printStr   
346C   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
348B   CD EC 0B               CALL   printStr   
348E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
349D   21 02 00               LD   hl,2   
34A0   E5                     PUSH   hl   
34A1   CD B3 0C               CALL   run   
34A4   2E 00                  .CSTR   "."   
34A6   CD EC 0B               CALL   printStr   
34A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34B6   E1                     POP   hl   
34B7   E5                     PUSH   hl   
34B8   E5                     PUSH   hl   
34B9   CD B3 0C               CALL   run   
34BC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
34D0   76                     HALT      
34D1   00                     .CSTR      
34D2                EXPECTM_0_2813S50:      
34D2   E1                     POP   HL   
34D3                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
34D3   31 80 47               LD   SP,STACK   
34D6   CD F3 0B               CALL   init   
34D9   CD 10 46               CALL   execStr   
34DC   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
34FB                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
34FB   E1                     POP   HL   
34FC   E5                     PUSH   HL   
34FD   11 0B 00               LD   DE,11   
3500   B7                     OR   A   
3501   ED 52                  SBC   HL,DE   
3503   7D                     LD   A,L   
3504   B4                     OR   H   
3505   CA 77 35               JP   Z,expectM_0_2814S50   
3508   CD EC 0B               CALL   printStr   
350B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3530   CD EC 0B               CALL   printStr   
3533   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3542   21 0B 00               LD   hl,11   
3545   E5                     PUSH   hl   
3546   CD B3 0C               CALL   run   
3549   2E 00                  .CSTR   "."   
354B   CD EC 0B               CALL   printStr   
354E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
355B   E1                     POP   hl   
355C   E5                     PUSH   hl   
355D   E5                     PUSH   hl   
355E   CD B3 0C               CALL   run   
3561   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3575   76                     HALT      
3576   00                     .CSTR      
3577                EXPECTM_0_2814S50:      
3577   E1                     POP   HL   
3578                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3578   31 80 47               LD   SP,STACK   
357B   CD F3 0B               CALL   init   
357E   CD 10 46               CALL   execStr   
3581   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
35A0                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
35A0   E1                     POP   HL   
35A1   E5                     PUSH   HL   
35A2   11 15 00               LD   DE,21   
35A5   B7                     OR   A   
35A6   ED 52                  SBC   HL,DE   
35A8   7D                     LD   A,L   
35A9   B4                     OR   H   
35AA   CA 1C 36               JP   Z,expectM_0_2815S50   
35AD   CD EC 0B               CALL   printStr   
35B0   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
35D5   CD EC 0B               CALL   printStr   
35D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35E7   21 15 00               LD   hl,21   
35EA   E5                     PUSH   hl   
35EB   CD B3 0C               CALL   run   
35EE   2E 00                  .CSTR   "."   
35F0   CD EC 0B               CALL   printStr   
35F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3600   E1                     POP   hl   
3601   E5                     PUSH   hl   
3602   E5                     PUSH   hl   
3603   CD B3 0C               CALL   run   
3606   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
361A   76                     HALT      
361B   00                     .CSTR      
361C                EXPECTM_0_2815S50:      
361C   E1                     POP   HL   
361D                          ;*Macro unroll:  test "[10 20 30] 1%", 20
361D   31 80 47               LD   SP,STACK   
3620   CD F3 0B               CALL   init   
3623   CD 10 46               CALL   execStr   
3626   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3634                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3634   E1                     POP   HL   
3635   E5                     PUSH   HL   
3636   11 14 00               LD   DE,20   
3639   B7                     OR   A   
363A   ED 52                  SBC   HL,DE   
363C   7D                     LD   A,L   
363D   B4                     OR   H   
363E   CA 9F 36               JP   Z,expectM_0_2816S50   
3641   CD EC 0B               CALL   printStr   
3644   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
3658   CD EC 0B               CALL   printStr   
365B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
366A   21 14 00               LD   hl,20   
366D   E5                     PUSH   hl   
366E   CD B3 0C               CALL   run   
3671   2E 00                  .CSTR   "."   
3673   CD EC 0B               CALL   printStr   
3676   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3683   E1                     POP   hl   
3684   E5                     PUSH   hl   
3685   E5                     PUSH   hl   
3686   CD B3 0C               CALL   run   
3689   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
369D   76                     HALT      
369E   00                     .CSTR      
369F                EXPECTM_0_2816S50:      
369F   E1                     POP   HL   
36A0                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
36A0   31 80 47               LD   SP,STACK   
36A3   CD F3 0B               CALL   init   
36A6   CD 10 46               CALL   execStr   
36A9   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
36BA                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
36BA   E1                     POP   HL   
36BB   E5                     PUSH   HL   
36BC   11 04 00               LD   DE,4   
36BF   B7                     OR   A   
36C0   ED 52                  SBC   HL,DE   
36C2   7D                     LD   A,L   
36C3   B4                     OR   H   
36C4   CA 28 37               JP   Z,expectM_0_2817S50   
36C7   CD EC 0B               CALL   printStr   
36CA   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
36E1   CD EC 0B               CALL   printStr   
36E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36F3   21 04 00               LD   hl,4   
36F6   E5                     PUSH   hl   
36F7   CD B3 0C               CALL   run   
36FA   2E 00                  .CSTR   "."   
36FC   CD EC 0B               CALL   printStr   
36FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
370C   E1                     POP   hl   
370D   E5                     PUSH   hl   
370E   E5                     PUSH   hl   
370F   CD B3 0C               CALL   run   
3712   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3726   76                     HALT      
3727   00                     .CSTR      
3728                EXPECTM_0_2817S50:      
3728   E1                     POP   HL   
3729                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
3729   31 80 47               LD   SP,STACK   
372C   CD F3 0B               CALL   init   
372F   CD 10 46               CALL   execStr   
3732   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3740                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3740   E1                     POP   HL   
3741   E5                     PUSH   HL   
3742   11 02 00               LD   DE,2   
3745   B7                     OR   A   
3746   ED 52                  SBC   HL,DE   
3748   7D                     LD   A,L   
3749   B4                     OR   H   
374A   CA AB 37               JP   Z,expectM_0_2818S50   
374D   CD EC 0B               CALL   printStr   
3750   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3764   CD EC 0B               CALL   printStr   
3767   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3776   21 02 00               LD   hl,2   
3779   E5                     PUSH   hl   
377A   CD B3 0C               CALL   run   
377D   2E 00                  .CSTR   "."   
377F   CD EC 0B               CALL   printStr   
3782   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
378F   E1                     POP   hl   
3790   E5                     PUSH   hl   
3791   E5                     PUSH   hl   
3792   CD B3 0C               CALL   run   
3795   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
37A9   76                     HALT      
37AA   00                     .CSTR      
37AB                EXPECTM_0_2818S50:      
37AB   E1                     POP   HL   
37AC                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
37AC   31 80 47               LD   SP,STACK   
37AF   CD F3 0B               CALL   init   
37B2   CD 10 46               CALL   execStr   
37B5   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
37C9                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
37C9   E1                     POP   HL   
37CA   E5                     PUSH   HL   
37CB   11 42 00               LD   DE,66   
37CE   B7                     OR   A   
37CF   ED 52                  SBC   HL,DE   
37D1   7D                     LD   A,L   
37D2   B4                     OR   H   
37D3   CA 3A 38               JP   Z,expectM_0_2819S50   
37D6   CD EC 0B               CALL   printStr   
37D9   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
37F3   CD EC 0B               CALL   printStr   
37F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3805   21 42 00               LD   hl,66   
3808   E5                     PUSH   hl   
3809   CD B3 0C               CALL   run   
380C   2E 00                  .CSTR   "."   
380E   CD EC 0B               CALL   printStr   
3811   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
381E   E1                     POP   hl   
381F   E5                     PUSH   hl   
3820   E5                     PUSH   hl   
3821   CD B3 0C               CALL   run   
3824   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3838   76                     HALT      
3839   00                     .CSTR      
383A                EXPECTM_0_2819S50:      
383A   E1                     POP   HL   
383B                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
383B   31 80 47               LD   SP,STACK   
383E   CD F3 0B               CALL   init   
3841   CD 10 46               CALL   execStr   
3844   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3858                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3858   E1                     POP   HL   
3859   E5                     PUSH   HL   
385A   11 0A 00               LD   DE,10   
385D   B7                     OR   A   
385E   ED 52                  SBC   HL,DE   
3860   7D                     LD   A,L   
3861   B4                     OR   H   
3862   CA C9 38               JP   Z,expectM_0_2820S50   
3865   CD EC 0B               CALL   printStr   
3868   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3882   CD EC 0B               CALL   printStr   
3885   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3894   21 0A 00               LD   hl,10   
3897   E5                     PUSH   hl   
3898   CD B3 0C               CALL   run   
389B   2E 00                  .CSTR   "."   
389D   CD EC 0B               CALL   printStr   
38A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38AD   E1                     POP   hl   
38AE   E5                     PUSH   hl   
38AF   E5                     PUSH   hl   
38B0   CD B3 0C               CALL   run   
38B3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
38C7   76                     HALT      
38C8   00                     .CSTR      
38C9                EXPECTM_0_2820S50:      
38C9   E1                     POP   HL   
38CA                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
38CA   31 80 47               LD   SP,STACK   
38CD   CD F3 0B               CALL   init   
38D0   CD 10 46               CALL   execStr   
38D3   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
38EF                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
38EF   E1                     POP   HL   
38F0   E5                     PUSH   HL   
38F1   11 0A 00               LD   DE,10   
38F4   B7                     OR   A   
38F5   ED 52                  SBC   HL,DE   
38F7   7D                     LD   A,L   
38F8   B4                     OR   H   
38F9   CA 68 39               JP   Z,expectM_0_2821S50   
38FC   CD EC 0B               CALL   printStr   
38FF   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3921   CD EC 0B               CALL   printStr   
3924   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3933   21 0A 00               LD   hl,10   
3936   E5                     PUSH   hl   
3937   CD B3 0C               CALL   run   
393A   2E 00                  .CSTR   "."   
393C   CD EC 0B               CALL   printStr   
393F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
394C   E1                     POP   hl   
394D   E5                     PUSH   hl   
394E   E5                     PUSH   hl   
394F   CD B3 0C               CALL   run   
3952   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3966   76                     HALT      
3967   00                     .CSTR      
3968                EXPECTM_0_2821S50:      
3968   E1                     POP   HL   
3969                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3969   31 80 47               LD   SP,STACK   
396C   CD F3 0B               CALL   init   
396F   CD 10 46               CALL   execStr   
3972   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3992                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3992   E1                     POP   HL   
3993   E5                     PUSH   HL   
3994   11 0A 00               LD   DE,10   
3997   B7                     OR   A   
3998   ED 52                  SBC   HL,DE   
399A   7D                     LD   A,L   
399B   B4                     OR   H   
399C   CA 0F 3A               JP   Z,expectM_0_2822S50   
399F   CD EC 0B               CALL   printStr   
39A2   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
39C8   CD EC 0B               CALL   printStr   
39CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39DA   21 0A 00               LD   hl,10   
39DD   E5                     PUSH   hl   
39DE   CD B3 0C               CALL   run   
39E1   2E 00                  .CSTR   "."   
39E3   CD EC 0B               CALL   printStr   
39E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39F3   E1                     POP   hl   
39F4   E5                     PUSH   hl   
39F5   E5                     PUSH   hl   
39F6   CD B3 0C               CALL   run   
39F9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3A0D   76                     HALT      
3A0E   00                     .CSTR      
3A0F                EXPECTM_0_2822S50:      
3A0F   E1                     POP   HL   
3A10                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3A10   31 80 47               LD   SP,STACK   
3A13   CD F3 0B               CALL   init   
3A16   CD 10 46               CALL   execStr   
3A19   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3A39                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3A39   E1                     POP   HL   
3A3A   E5                     PUSH   HL   
3A3B   11 14 00               LD   DE,20   
3A3E   B7                     OR   A   
3A3F   ED 52                  SBC   HL,DE   
3A41   7D                     LD   A,L   
3A42   B4                     OR   H   
3A43   CA B6 3A               JP   Z,expectM_0_2823S50   
3A46   CD EC 0B               CALL   printStr   
3A49   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3A6F   CD EC 0B               CALL   printStr   
3A72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A81   21 14 00               LD   hl,20   
3A84   E5                     PUSH   hl   
3A85   CD B3 0C               CALL   run   
3A88   2E 00                  .CSTR   "."   
3A8A   CD EC 0B               CALL   printStr   
3A8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A9A   E1                     POP   hl   
3A9B   E5                     PUSH   hl   
3A9C   E5                     PUSH   hl   
3A9D   CD B3 0C               CALL   run   
3AA0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3AB4   76                     HALT      
3AB5   00                     .CSTR      
3AB6                EXPECTM_0_2823S50:      
3AB6   E1                     POP   HL   
3AB7                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3AB7   31 80 47               LD   SP,STACK   
3ABA   CD F3 0B               CALL   init   
3ABD   CD 10 46               CALL   execStr   
3AC0   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3AD4                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3AD4   E1                     POP   HL   
3AD5   E5                     PUSH   HL   
3AD6   11 04 00               LD   DE,4   
3AD9   B7                     OR   A   
3ADA   ED 52                  SBC   HL,DE   
3ADC   7D                     LD   A,L   
3ADD   B4                     OR   H   
3ADE   CA 45 3B               JP   Z,expectM_0_2824S50   
3AE1   CD EC 0B               CALL   printStr   
3AE4   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3AFE   CD EC 0B               CALL   printStr   
3B01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B10   21 04 00               LD   hl,4   
3B13   E5                     PUSH   hl   
3B14   CD B3 0C               CALL   run   
3B17   2E 00                  .CSTR   "."   
3B19   CD EC 0B               CALL   printStr   
3B1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B29   E1                     POP   hl   
3B2A   E5                     PUSH   hl   
3B2B   E5                     PUSH   hl   
3B2C   CD B3 0C               CALL   run   
3B2F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B43   76                     HALT      
3B44   00                     .CSTR      
3B45                EXPECTM_0_2824S50:      
3B45   E1                     POP   HL   
3B46                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3B46   31 80 47               LD   SP,STACK   
3B49   CD F3 0B               CALL   init   
3B4C   CD 10 46               CALL   execStr   
3B4F   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3B69                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3B69   E1                     POP   HL   
3B6A   E5                     PUSH   HL   
3B6B   11 09 00               LD   DE,9   
3B6E   B7                     OR   A   
3B6F   ED 52                  SBC   HL,DE   
3B71   7D                     LD   A,L   
3B72   B4                     OR   H   
3B73   CA E0 3B               JP   Z,expectM_0_2825S50   
3B76   CD EC 0B               CALL   printStr   
3B79   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3B99   CD EC 0B               CALL   printStr   
3B9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BAB   21 09 00               LD   hl,9   
3BAE   E5                     PUSH   hl   
3BAF   CD B3 0C               CALL   run   
3BB2   2E 00                  .CSTR   "."   
3BB4   CD EC 0B               CALL   printStr   
3BB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BC4   E1                     POP   hl   
3BC5   E5                     PUSH   hl   
3BC6   E5                     PUSH   hl   
3BC7   CD B3 0C               CALL   run   
3BCA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3BDE   76                     HALT      
3BDF   00                     .CSTR      
3BE0                EXPECTM_0_2825S50:      
3BE0   E1                     POP   HL   
3BE1                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3BE1   31 80 47               LD   SP,STACK   
3BE4   CD F3 0B               CALL   init   
3BE7   CD 10 46               CALL   execStr   
3BEA   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3C02                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3C02   E1                     POP   HL   
3C03   E5                     PUSH   HL   
3C04   11 06 00               LD   DE,6   
3C07   B7                     OR   A   
3C08   ED 52                  SBC   HL,DE   
3C0A   7D                     LD   A,L   
3C0B   B4                     OR   H   
3C0C   CA 77 3C               JP   Z,expectM_0_2826S50   
3C0F   CD EC 0B               CALL   printStr   
3C12   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3C30   CD EC 0B               CALL   printStr   
3C33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C42   21 06 00               LD   hl,6   
3C45   E5                     PUSH   hl   
3C46   CD B3 0C               CALL   run   
3C49   2E 00                  .CSTR   "."   
3C4B   CD EC 0B               CALL   printStr   
3C4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C5B   E1                     POP   hl   
3C5C   E5                     PUSH   hl   
3C5D   E5                     PUSH   hl   
3C5E   CD B3 0C               CALL   run   
3C61   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C75   76                     HALT      
3C76   00                     .CSTR      
3C77                EXPECTM_0_2826S50:      
3C77   E1                     POP   HL   
3C78                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3C78   31 80 47               LD   SP,STACK   
3C7B   CD F3 0B               CALL   init   
3C7E   CD 10 46               CALL   execStr   
3C81   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3C9C                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3C9C   E1                     POP   HL   
3C9D   E5                     PUSH   HL   
3C9E   11 02 00               LD   DE,2   
3CA1   B7                     OR   A   
3CA2   ED 52                  SBC   HL,DE   
3CA4   7D                     LD   A,L   
3CA5   B4                     OR   H   
3CA6   CA 14 3D               JP   Z,expectM_0_2827S50   
3CA9   CD EC 0B               CALL   printStr   
3CAC   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3CCD   CD EC 0B               CALL   printStr   
3CD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CDF   21 02 00               LD   hl,2   
3CE2   E5                     PUSH   hl   
3CE3   CD B3 0C               CALL   run   
3CE6   2E 00                  .CSTR   "."   
3CE8   CD EC 0B               CALL   printStr   
3CEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF8   E1                     POP   hl   
3CF9   E5                     PUSH   hl   
3CFA   E5                     PUSH   hl   
3CFB   CD B3 0C               CALL   run   
3CFE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3D12   76                     HALT      
3D13   00                     .CSTR      
3D14                EXPECTM_0_2827S50:      
3D14   E1                     POP   HL   
3D15                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3D15   31 80 47               LD   SP,STACK   
3D18   CD F3 0B               CALL   init   
3D1B   CD 10 46               CALL   execStr   
3D1E   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3D44                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3D44   E1                     POP   HL   
3D45   E5                     PUSH   HL   
3D46   11 0A 00               LD   DE,10   
3D49   B7                     OR   A   
3D4A   ED 52                  SBC   HL,DE   
3D4C   7D                     LD   A,L   
3D4D   B4                     OR   H   
3D4E   CA C7 3D               JP   Z,expectM_0_2828S50   
3D51   CD EC 0B               CALL   printStr   
3D54   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3D80   CD EC 0B               CALL   printStr   
3D83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D92   21 0A 00               LD   hl,10   
3D95   E5                     PUSH   hl   
3D96   CD B3 0C               CALL   run   
3D99   2E 00                  .CSTR   "."   
3D9B   CD EC 0B               CALL   printStr   
3D9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DAB   E1                     POP   hl   
3DAC   E5                     PUSH   hl   
3DAD   E5                     PUSH   hl   
3DAE   CD B3 0C               CALL   run   
3DB1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3DC5   76                     HALT      
3DC6   00                     .CSTR      
3DC7                EXPECTM_0_2828S50:      
3DC7   E1                     POP   HL   
3DC8                          ;*Macro unroll:  test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
3DC8   31 80 47               LD   SP,STACK   
3DCB   CD F3 0B               CALL   init   
3DCE   CD 10 46               CALL   execStr   
3DD1   33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
3DF9                          ;*Macro unroll:  expect "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^",6
3DF9   E1                     POP   HL   
3DFA   E5                     PUSH   HL   
3DFB   11 06 00               LD   DE,6   
3DFE   B7                     OR   A   
3DFF   ED 52                  SBC   HL,DE   
3E01   7D                     LD   A,L   
3E02   B4                     OR   H   
3E03   CA 7E 3E               JP   Z,expectM_0_2829S50   
3E06   CD EC 0B               CALL   printStr   
3E09   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
3E37   CD EC 0B               CALL   printStr   
3E3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E49   21 06 00               LD   hl,6   
3E4C   E5                     PUSH   hl   
3E4D   CD B3 0C               CALL   run   
3E50   2E 00                  .CSTR   "."   
3E52   CD EC 0B               CALL   printStr   
3E55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E62   E1                     POP   hl   
3E63   E5                     PUSH   hl   
3E64   E5                     PUSH   hl   
3E65   CD B3 0C               CALL   run   
3E68   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E7C   76                     HALT      
3E7D   00                     .CSTR      
3E7E                EXPECTM_0_2829S50:      
3E7E   E1                     POP   HL   
3E7F                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
3E7F   31 80 47               LD   SP,STACK   
3E82   CD F3 0B               CALL   init   
3E85   CD 10 46               CALL   execStr   
3E88   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
3E94                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
3E94   E1                     POP   HL   
3E95   E5                     PUSH   HL   
3E96   11 00 00               LD   DE,NUL   
3E99   B7                     OR   A   
3E9A   ED 52                  SBC   HL,DE   
3E9C   7D                     LD   A,L   
3E9D   B4                     OR   H   
3E9E   CA FD 3E               JP   Z,expectM_0_2830S50   
3EA1   CD EC 0B               CALL   printStr   
3EA4   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
3EB6   CD EC 0B               CALL   printStr   
3EB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EC8   21 00 00               LD   hl,NUL   
3ECB   E5                     PUSH   hl   
3ECC   CD B3 0C               CALL   run   
3ECF   2E 00                  .CSTR   "."   
3ED1   CD EC 0B               CALL   printStr   
3ED4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EE1   E1                     POP   hl   
3EE2   E5                     PUSH   hl   
3EE3   E5                     PUSH   hl   
3EE4   CD B3 0C               CALL   run   
3EE7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3EFB   76                     HALT      
3EFC   00                     .CSTR      
3EFD                EXPECTM_0_2830S50:      
3EFD   E1                     POP   HL   
3EFE                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3EFE   31 80 47               LD   SP,STACK   
3F01   CD F3 0B               CALL   init   
3F04   CD 10 46               CALL   execStr   
3F07   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3F13                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3F13   E1                     POP   HL   
3F14   E5                     PUSH   HL   
3F15   11 00 00               LD   DE,NUL   
3F18   B7                     OR   A   
3F19   ED 52                  SBC   HL,DE   
3F1B   7D                     LD   A,L   
3F1C   B4                     OR   H   
3F1D   CA 7C 3F               JP   Z,expectM_0_2831S50   
3F20   CD EC 0B               CALL   printStr   
3F23   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3F35   CD EC 0B               CALL   printStr   
3F38   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F47   21 00 00               LD   hl,NUL   
3F4A   E5                     PUSH   hl   
3F4B   CD B3 0C               CALL   run   
3F4E   2E 00                  .CSTR   "."   
3F50   CD EC 0B               CALL   printStr   
3F53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F60   E1                     POP   hl   
3F61   E5                     PUSH   hl   
3F62   E5                     PUSH   hl   
3F63   CD B3 0C               CALL   run   
3F66   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3F7A   76                     HALT      
3F7B   00                     .CSTR      
3F7C                EXPECTM_0_2831S50:      
3F7C   E1                     POP   HL   
3F7D                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3F7D   31 80 47               LD   SP,STACK   
3F80   CD F3 0B               CALL   init   
3F83   CD 10 46               CALL   execStr   
3F86   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3F92                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3F92   E1                     POP   HL   
3F93   E5                     PUSH   HL   
3F94   11 00 00               LD   DE,NUL   
3F97   B7                     OR   A   
3F98   ED 52                  SBC   HL,DE   
3F9A   7D                     LD   A,L   
3F9B   B4                     OR   H   
3F9C   CA FB 3F               JP   Z,expectM_0_2832S50   
3F9F   CD EC 0B               CALL   printStr   
3FA2   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3FB4   CD EC 0B               CALL   printStr   
3FB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FC6   21 00 00               LD   hl,NUL   
3FC9   E5                     PUSH   hl   
3FCA   CD B3 0C               CALL   run   
3FCD   2E 00                  .CSTR   "."   
3FCF   CD EC 0B               CALL   printStr   
3FD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FDF   E1                     POP   hl   
3FE0   E5                     PUSH   hl   
3FE1   E5                     PUSH   hl   
3FE2   CD B3 0C               CALL   run   
3FE5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3FF9   76                     HALT      
3FFA   00                     .CSTR      
3FFB                EXPECTM_0_2832S50:      
3FFB   E1                     POP   HL   
3FFC                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
3FFC   31 80 47               LD   SP,STACK   
3FFF   CD F3 0B               CALL   init   
4002   CD 10 46               CALL   execStr   
4005   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
4011                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
4011   E1                     POP   HL   
4012   E5                     PUSH   HL   
4013   11 00 00               LD   DE,NUL   
4016   B7                     OR   A   
4017   ED 52                  SBC   HL,DE   
4019   7D                     LD   A,L   
401A   B4                     OR   H   
401B   CA 7A 40               JP   Z,expectM_0_2833S50   
401E   CD EC 0B               CALL   printStr   
4021   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4033   CD EC 0B               CALL   printStr   
4036   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4045   21 00 00               LD   hl,NUL   
4048   E5                     PUSH   hl   
4049   CD B3 0C               CALL   run   
404C   2E 00                  .CSTR   "."   
404E   CD EC 0B               CALL   printStr   
4051   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
405E   E1                     POP   hl   
405F   E5                     PUSH   hl   
4060   E5                     PUSH   hl   
4061   CD B3 0C               CALL   run   
4064   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4078   76                     HALT      
4079   00                     .CSTR      
407A                EXPECTM_0_2833S50:      
407A   E1                     POP   HL   
407B                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
407B   31 80 47               LD   SP,STACK   
407E   CD F3 0B               CALL   init   
4081   CD 10 46               CALL   execStr   
4084   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
408C                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
408C   E1                     POP   HL   
408D   E5                     PUSH   HL   
408E   11 66 48               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4091   B7                     OR   A   
4092   ED 52                  SBC   HL,DE   
4094   7D                     LD   A,L   
4095   B4                     OR   H   
4096   CA F1 40               JP   Z,expectM_0_2834S50   
4099   CD EC 0B               CALL   printStr   
409C   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
40AA   CD EC 0B               CALL   printStr   
40AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40BC   21 66 48               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
40BF   E5                     PUSH   hl   
40C0   CD B3 0C               CALL   run   
40C3   2E 00                  .CSTR   "."   
40C5   CD EC 0B               CALL   printStr   
40C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40D5   E1                     POP   hl   
40D6   E5                     PUSH   hl   
40D7   E5                     PUSH   hl   
40D8   CD B3 0C               CALL   run   
40DB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
40EF   76                     HALT      
40F0   00                     .CSTR      
40F1                EXPECTM_0_2834S50:      
40F1   E1                     POP   HL   
40F2                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
40F2   31 80 47               LD   SP,STACK   
40F5   CD F3 0B               CALL   init   
40F8   CD 10 46               CALL   execStr   
40FB   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
4103                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
4103   E1                     POP   HL   
4104   E5                     PUSH   HL   
4105   11 34 48               LD   DE,VARS + ("Z"-"A"+1)*2   
4108   B7                     OR   A   
4109   ED 52                  SBC   HL,DE   
410B   7D                     LD   A,L   
410C   B4                     OR   H   
410D   CA 68 41               JP   Z,expectM_0_2835S50   
4110   CD EC 0B               CALL   printStr   
4113   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4121   CD EC 0B               CALL   printStr   
4124   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4133   21 34 48               LD   hl,VARS + ("Z"-"A"+1)*2   
4136   E5                     PUSH   hl   
4137   CD B3 0C               CALL   run   
413A   2E 00                  .CSTR   "."   
413C   CD EC 0B               CALL   printStr   
413F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
414C   E1                     POP   hl   
414D   E5                     PUSH   hl   
414E   E5                     PUSH   hl   
414F   CD B3 0C               CALL   run   
4152   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4166   76                     HALT      
4167   00                     .CSTR      
4168                EXPECTM_0_2835S50:      
4168   E1                     POP   HL   
4169                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4169   31 80 47               LD   SP,STACK   
416C   CD F3 0B               CALL   init   
416F   CD 10 46               CALL   execStr   
4172   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
417A                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
417A   E1                     POP   HL   
417B   E5                     PUSH   HL   
417C   11 32 48               LD   DE,VARS + ("Z"-"A")*2   
417F   B7                     OR   A   
4180   ED 52                  SBC   HL,DE   
4182   7D                     LD   A,L   
4183   B4                     OR   H   
4184   CA DF 41               JP   Z,expectM_0_2836S50   
4187   CD EC 0B               CALL   printStr   
418A   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4198   CD EC 0B               CALL   printStr   
419B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41AA   21 32 48               LD   hl,VARS + ("Z"-"A")*2   
41AD   E5                     PUSH   hl   
41AE   CD B3 0C               CALL   run   
41B1   2E 00                  .CSTR   "."   
41B3   CD EC 0B               CALL   printStr   
41B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41C3   E1                     POP   hl   
41C4   E5                     PUSH   hl   
41C5   E5                     PUSH   hl   
41C6   CD B3 0C               CALL   run   
41C9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
41DD   76                     HALT      
41DE   00                     .CSTR      
41DF                EXPECTM_0_2836S50:      
41DF   E1                     POP   HL   
41E0                          ;*Macro unroll:  test "'A' /ad", VARS
41E0   31 80 47               LD   SP,STACK   
41E3   CD F3 0B               CALL   init   
41E6   CD 10 46               CALL   execStr   
41E9   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
41F1                          ;*Macro unroll:  expect "'A' /ad",VARS
41F1   E1                     POP   HL   
41F2   E5                     PUSH   HL   
41F3   11 00 48               LD   DE,VARS   
41F6   B7                     OR   A   
41F7   ED 52                  SBC   HL,DE   
41F9   7D                     LD   A,L   
41FA   B4                     OR   H   
41FB   CA 56 42               JP   Z,expectM_0_2837S50   
41FE   CD EC 0B               CALL   printStr   
4201   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
420F   CD EC 0B               CALL   printStr   
4212   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4221   21 00 48               LD   hl,VARS   
4224   E5                     PUSH   hl   
4225   CD B3 0C               CALL   run   
4228   2E 00                  .CSTR   "."   
422A   CD EC 0B               CALL   printStr   
422D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
423A   E1                     POP   hl   
423B   E5                     PUSH   hl   
423C   E5                     PUSH   hl   
423D   CD B3 0C               CALL   run   
4240   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4254   76                     HALT      
4255   00                     .CSTR      
4256                EXPECTM_0_2837S50:      
4256   E1                     POP   HL   
4257                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
4257   31 80 47               LD   SP,STACK   
425A   CD F3 0B               CALL   init   
425D   CD 10 46               CALL   execStr   
4260   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
426F                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
426F   E1                     POP   HL   
4270   E5                     PUSH   HL   
4271   11 2D 00               LD   DE,$2D   
4274   B7                     OR   A   
4275   ED 52                  SBC   HL,DE   
4277   7D                     LD   A,L   
4278   B4                     OR   H   
4279   CA DB 42               JP   Z,expectM_0_2838S50   
427C   CD EC 0B               CALL   printStr   
427F   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
4294   CD EC 0B               CALL   printStr   
4297   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42A6   21 2D 00               LD   hl,$2D   
42A9   E5                     PUSH   hl   
42AA   CD B3 0C               CALL   run   
42AD   2E 00                  .CSTR   "."   
42AF   CD EC 0B               CALL   printStr   
42B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42BF   E1                     POP   hl   
42C0   E5                     PUSH   hl   
42C1   E5                     PUSH   hl   
42C2   CD B3 0C               CALL   run   
42C5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
42D9   76                     HALT      
42DA   00                     .CSTR      
42DB                EXPECTM_0_2838S50:      
42DB   E1                     POP   HL   
42DC                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
42DC   31 80 47               LD   SP,STACK   
42DF   CD F3 0B               CALL   init   
42E2   CD 10 46               CALL   execStr   
42E5   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
42F5                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
42F5   E1                     POP   HL   
42F6   E5                     PUSH   HL   
42F7   11 41 00               LD   DE,65   
42FA   B7                     OR   A   
42FB   ED 52                  SBC   HL,DE   
42FD   7D                     LD   A,L   
42FE   B4                     OR   H   
42FF   CA 62 43               JP   Z,expectM_0_2839S50   
4302   CD EC 0B               CALL   printStr   
4305   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
431B   CD EC 0B               CALL   printStr   
431E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
432D   21 41 00               LD   hl,65   
4330   E5                     PUSH   hl   
4331   CD B3 0C               CALL   run   
4334   2E 00                  .CSTR   "."   
4336   CD EC 0B               CALL   printStr   
4339   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4346   E1                     POP   hl   
4347   E5                     PUSH   hl   
4348   E5                     PUSH   hl   
4349   CD B3 0C               CALL   run   
434C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4360   76                     HALT      
4361   00                     .CSTR      
4362                EXPECTM_0_2839S50:      
4362   E1                     POP   HL   
4363                          ;*Macro unroll:  test "123 /bd", 3
4363   31 80 47               LD   SP,STACK   
4366   CD F3 0B               CALL   init   
4369   CD 10 46               CALL   execStr   
436C   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
4374                          ;*Macro unroll:  expect "123 /bd",3
4374   E1                     POP   HL   
4375   E5                     PUSH   HL   
4376   11 03 00               LD   DE,3   
4379   B7                     OR   A   
437A   ED 52                  SBC   HL,DE   
437C   7D                     LD   A,L   
437D   B4                     OR   H   
437E   CA D9 43               JP   Z,expectM_0_2840S50   
4381   CD EC 0B               CALL   printStr   
4384   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
4392   CD EC 0B               CALL   printStr   
4395   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43A4   21 03 00               LD   hl,3   
43A7   E5                     PUSH   hl   
43A8   CD B3 0C               CALL   run   
43AB   2E 00                  .CSTR   "."   
43AD   CD EC 0B               CALL   printStr   
43B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43BD   E1                     POP   hl   
43BE   E5                     PUSH   hl   
43BF   E5                     PUSH   hl   
43C0   CD B3 0C               CALL   run   
43C3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
43D7   76                     HALT      
43D8   00                     .CSTR      
43D9                EXPECTM_0_2840S50:      
43D9   E1                     POP   HL   
43DA                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
43DA   31 80 47               LD   SP,STACK   
43DD   CD F3 0B               CALL   init   
43E0   CD 10 46               CALL   execStr   
43E3   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
43F3                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
43F3   E1                     POP   HL   
43F4   E5                     PUSH   HL   
43F5   11 32 00               LD   DE,$32   
43F8   B7                     OR   A   
43F9   ED 52                  SBC   HL,DE   
43FB   7D                     LD   A,L   
43FC   B4                     OR   H   
43FD   CA 60 44               JP   Z,expectM_0_2841S50   
4400   CD EC 0B               CALL   printStr   
4403   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
4419   CD EC 0B               CALL   printStr   
441C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
442B   21 32 00               LD   hl,$32   
442E   E5                     PUSH   hl   
442F   CD B3 0C               CALL   run   
4432   2E 00                  .CSTR   "."   
4434   CD EC 0B               CALL   printStr   
4437   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4444   E1                     POP   hl   
4445   E5                     PUSH   hl   
4446   E5                     PUSH   hl   
4447   CD B3 0C               CALL   run   
444A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
445E   76                     HALT      
445F   00                     .CSTR      
4460                EXPECTM_0_2841S50:      
4460   E1                     POP   HL   
4461                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
4461   31 80 47               LD   SP,STACK   
4464   CD F3 0B               CALL   init   
4467   CD 10 46               CALL   execStr   
446A   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
4486                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
4486   E1                     POP   HL   
4487   E5                     PUSH   HL   
4488   11 09 00               LD   DE,9   
448B   B7                     OR   A   
448C   ED 52                  SBC   HL,DE   
448E   7D                     LD   A,L   
448F   B4                     OR   H   
4490   CA FF 44               JP   Z,expectM_0_2842S50   
4493   CD EC 0B               CALL   printStr   
4496   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
44B8   CD EC 0B               CALL   printStr   
44BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44CA   21 09 00               LD   hl,9   
44CD   E5                     PUSH   hl   
44CE   CD B3 0C               CALL   run   
44D1   2E 00                  .CSTR   "."   
44D3   CD EC 0B               CALL   printStr   
44D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44E3   E1                     POP   hl   
44E4   E5                     PUSH   hl   
44E5   E5                     PUSH   hl   
44E6   CD B3 0C               CALL   run   
44E9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
44FD   76                     HALT      
44FE   00                     .CSTR      
44FF                EXPECTM_0_2842S50:      
44FF   E1                     POP   HL   
4500                          ;*Macro unroll:  test "#4321 /bh", 4
4500   31 80 47               LD   SP,STACK   
4503   CD F3 0B               CALL   init   
4506   CD 10 46               CALL   execStr   
4509   23 34 33 32 31 20 2F 62 68 00 .CSTR   "#4321 /bh"   
4513                          ;*Macro unroll:  expect "#4321 /bh",4
4513   E1                     POP   HL   
4514   E5                     PUSH   HL   
4515   11 04 00               LD   DE,4   
4518   B7                     OR   A   
4519   ED 52                  SBC   HL,DE   
451B   7D                     LD   A,L   
451C   B4                     OR   H   
451D   CA 7A 45               JP   Z,expectM_0_2843S50   
4520   CD EC 0B               CALL   printStr   
4523   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 00 .CSTR   "Code: ","#4321 /bh"   
4533   CD EC 0B               CALL   printStr   
4536   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4545   21 04 00               LD   hl,4   
4548   E5                     PUSH   hl   
4549   CD B3 0C               CALL   run   
454C   2E 00                  .CSTR   "."   
454E   CD EC 0B               CALL   printStr   
4551   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
455E   E1                     POP   hl   
455F   E5                     PUSH   hl   
4560   E5                     PUSH   hl   
4561   CD B3 0C               CALL   run   
4564   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4578   76                     HALT      
4579   00                     .CSTR      
457A                EXPECTM_0_2843S50:      
457A   E1                     POP   HL   
457B                          ;*Macro unroll:  test "#4321 /bh/vB/c 0%", $34
457B   31 80 47               LD   SP,STACK   
457E   CD F3 0B               CALL   init   
4581   CD 10 46               CALL   execStr   
4584   23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "#4321 /bh/vB/c 0%"   
4596                          ;*Macro unroll:  expect "#4321 /bh/vB/c 0%",$34
4596   E1                     POP   HL   
4597   E5                     PUSH   HL   
4598   11 34 00               LD   DE,$34   
459B   B7                     OR   A   
459C   ED 52                  SBC   HL,DE   
459E   7D                     LD   A,L   
459F   B4                     OR   H   
45A0   CA 05 46               JP   Z,expectM_0_2844S50   
45A3   CD EC 0B               CALL   printStr   
45A6   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","#4321 /bh/vB/c 0%"   
45BE   CD EC 0B               CALL   printStr   
45C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45D0   21 34 00               LD   hl,$34   
45D3   E5                     PUSH   hl   
45D4   CD B3 0C               CALL   run   
45D7   2E 00                  .CSTR   "."   
45D9   CD EC 0B               CALL   printStr   
45DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45E9   E1                     POP   hl   
45EA   E5                     PUSH   hl   
45EB   E5                     PUSH   hl   
45EC   CD B3 0C               CALL   run   
45EF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4603   76                     HALT      
4604   00                     .CSTR      
4605                EXPECTM_0_2844S50:      
4605   E1                     POP   HL   
4606                             ; 
4606   CD EC 0B               CALL   printStr   
4609   44 6F 6E 65 21 00      .CSTR   "Done!"   
460F   76                     HALT      
4610                          ALIGN   2   
4610                             ; printer:
4610                             ;     pop hl
4610                             ;     call prtdec
4610                             ;     jp (ix)
4610                             ; executes a null teminated string (null executes exit_)
4610                             ; the string should be immedaitely following the call
4610                EXECSTR:      ; create a root stack frame
4610   C1                     POP   bc   ; bc = code*
4611   0B                     DEC   bc   ; dec to prepare for next routine
4612   11 00 00               LD   de,0   
4615   D5                     PUSH   de   ; push fake IP
4616   D5                     PUSH   de   ; push null arg_list*
4617   D5                     PUSH   de   ; push null first_arg*
4618   D5                     PUSH   de   ; push fake BP
4619   DD E9                  JP   (ix)   
461B                          ALIGN   $100   
4700                          DS   STKSIZE   
4780                STACK:       
4780                          ALIGN   $100   
4800                VARS:        
4800                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
48D0                RESTARTS:      
48D0                RST08:    DS   2   
48D2                RST10:    DS   2   
48D4                RST18:    DS   2   
48D6                RST20:    DS   2   
48D8                RST28:    DS   2   
48DA                RST30:    DS   2   ; 
48DC                BAUD:     DS   2   ; 
48DE                INTVEC:   DS   2   ; 
48E0                NMIVEC:   DS   2   ; 
48E2                GETCVEC:   DS   2   ; 
48E4                PUTCVEC:   DS   2   ; 
48E6                SYSVARS:      
48E6                             ; initialised sys variables (preserved)
48E6                VDATAWIDTH:   DS   2   ; 
48E8                VNUMBASE:   DS   2   ; 
48EA                VTIBPTR:   DS   2   ; 
48EC                VBUFPTR:   DS   2   ; 
48EE                VNEXT:    DS   2   ; 
48F0                VHEAPPTR:   DS   2   ; 
48F2                             ; uninitialised sys variables (preserved)
48F2                VPOINTER:   DS   2   ; 
48F4                VREMAIN:   DS   2   ; 
48F6                VSAVEDIP:   DS   2   ; 
48F8                VSAVEDSP:   DS   2   ; 
48FA                VSAVEDBP:   DS   2   ; 
48FC                VCHECKSUM:   DS   2   ; 
48FE                             ; uninitialised sys variables (unpreserved)
48FE                VTEMP1:   DS   2   ; 
4900                VTEMP2:   DS   2   ; 
4902                VLASTDEF:   DS   2   ; 
4904                VHASHSTR:   DS   2   ; 
4906                TBPTR:    DS   2   ; reserved for tests
4908                          ALIGN   $100   
4A00                TIB:      DS   TIBSIZE   
4B00                BUF:      DS   BUFSIZE   
4C00                          ALIGN   $100   
4C00                PAD:      DS   $100   
4D00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 49 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B42 DEFINED AT LINE 1810 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
STKSIZE:            0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 32 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 33 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 34 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 35 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 36 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 37 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 38 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 39 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 40 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 54 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 188 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 190 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 193 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 197 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 199 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 201 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 203 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 205 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 207 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 209 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 211 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 213 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 218 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 220 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 222 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 224 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 226 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 228 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 230 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 237 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 243 IN MAIN.asm
LT_:                036D DEFINED AT LINE 251 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 263 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 265 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 267 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 274 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 294 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 300 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 314 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 338 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 344 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 388 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 403 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 470 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 491 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
COLON:              049B DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 507 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 525 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 554 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 672 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 696 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
DIV:                05F3 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
DOT:                0604 DEFINED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
DOTARRAY:           0616 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
DOTARRAY_BLOCK:     061F DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DOTHEX:             062A DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
DOTHEX_BLOCK:       0633 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
DOTSTR:             063E DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
DOTSTR_BLOCK:       0647 DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
DOTCHAR:            0652 DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
DOTCHAR_BLOCK:      065B DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
DOTDEC:             0666 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
DOTDEC_BLOCK:       066F DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
DIVIDE:             067A DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
DIVIDE1:            067F DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
DIVIDE2:            068C DEFINED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
DIVIDE3:            068D DEFINED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
EQUALS:             0693 DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
LESSTHANEQ:         069B DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
LESSTHAN:           06A0 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
LESSTHAN1:          06A5 DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
TRUE1:              06A8 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
NULL1:              06AE DEFINED AT LINE 860 IN MAIN.asm
FALSE1:             06AE DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
CARET:              06B4 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
GO:                 06B4 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
GO1:                06B5 DEFINED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
GO2:                06BB DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
GOBLOCK:            06C7 DEFINED AT LINE 885 IN MAIN.asm
GOBLOCK1:           06C7 DEFINED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
GOBLOCK2:           06EC DEFINED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
GOLAMBDA:           06FA DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA1:          0717 DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
GOLAMBDA2:          071D DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
GOLAMBDA3:          0728 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
GOLAMBDA4:          0740 DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
GOLAMBDA5:          0744 DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
GOLAMBDA6:          0747 DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
GOLAMBDA7:          074A DEFINED AT LINE 976 IN MAIN.asm
GOLAMBDA8:          074F DEFINED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
HASH:               075A DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
HEXNUM:             075A DEFINED AT LINE 992 IN MAIN.asm
HEXNUM1:            075D DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
HEXNUM2:            0765 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
UPCASE:             0777 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
LOWCASE:            077C DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
IDENT1:             0781 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
QUESTION:           078E DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
IF:                 078E DEFINED AT LINE 1034 IN MAIN.asm
IFTE:               079A DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
IFTE1:              079B DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
STAR:               07A7 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
MUL:                07A7 DEFINED AT LINE 1057 IN MAIN.asm
MUL2:               07A9 DEFINED AT LINE 1060 IN MAIN.asm
MUL3:               07B1 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
NUM:                07C3 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
NUM0:               07CC DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
NUM1:               07CD DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
NUM2:               07E5 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
NUM3:               07F0 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
UNDERSCORE:         07F3 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
REMAIN:             07F3 DEFINED AT LINE 1117 IN MAIN.asm
RPAREN:             07F9 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
SEMICOLON:          0801 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
SHIFTLEFT:          081D DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
SHIFTLEFT1:         0825 DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
SHIFTLEFT2:         0826 DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
SHIFTRIGHT:         082D DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SHIFTRIGHT1:        0835 DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
SHIFTRIGHT2:        0839 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
DBLQUOTE:           0840 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
STRING:             0840 DEFINED AT LINE 1189 IN MAIN.asm
STRING1:            0849 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
STRING2:            084C DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
STRING3:            0855 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
MINUS:              0868 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
SUB:                0874 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
SUB1:               087E DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
ERROR1:             0887 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
COMMENT:            088E DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
COMMAND_A:          0897 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
ABSOLUTE:           08A3 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
ADDROF:             08B0 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
ADDROF1:            08C4 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
ADDROF2:            08CF DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
COMMAND_B:          08D1 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
BUFFERARRAY:        08EF DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
BUFFERARRAY_BLOCK:  08F8 DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
BUFFERCHAR:         0926 DEFINED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC:          0935 DEFINED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
BUFFERDEC0:         0951 DEFINED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
BUFFERDEC1:         0961 DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
BUFFERDEC2:         0981 DEFINED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
BUFFERDEC3:         0983 DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
BUFFERDEC4:         0993 DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
BUFFERDEC5:         0994 DEFINED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
BUFFERHEX:          099A DEFINED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
BUFFERHEX1:         09B9 DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
BUFFERHEX2:         09C2 DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
BUFPTRINC:          09CD DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
BREAK:              09D7 DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
BREAK1:             09DE DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
BUFFERSTRING:       09F1 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
BUFFERSTRING0:      09F8 DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
BUFFERSTRING1:      09FB DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
BUFFERXSPACES:      0A0D DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
BUFFERXSPACES1:     0A14 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
BUFFERXSPACES2:     0A18 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
COMMAND_I:          0A21 DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
COMMAND_P:          0A2D DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
PARTIAL:            0A42 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
PRINTBUFFER:        0A62 DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
PRINTBUFFER_BLOCK:  0A6B DEFINED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
PRINTCHARS:         0A85 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
PRINTCHARS1:        0A8B DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
PRINTCHARS2:        0A8D DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
PRINTSTACK:         0A97 DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
PRINTX:             0A99 DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
PRINTX_BLOCK:       0AA2 DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
SIZE:               0ABA DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
COMMAND_V:          0AC4 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
CONSTBUFSTART:      0AD9 DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
CONSTHEAPSTART:     0ADE DEFINED AT LINE 1724 IN MAIN.asm
CONSTTIBSTART:      0AE3 DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
VARBUFPTR:          0AE8 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
VARHEAPPTR:         0AF1 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
VARTIBPTR:          0AFA DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
VARIABLE:           0B03 DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
CONSTANT:           0B06 DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
CHARS:              0B09 DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
CHARS1:             0B0C DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
DECIMAL:            0B11 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
DECIMAL1:           0B14 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
HEXADECIMAL:        0B19 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
INPUT:              0B1F DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
KEY:                0B2A DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
OUTPUT:             0B33 DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
NUMBERS:            0B3C DEFINED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
FILTER:             0B42 DEFINED AT LINE 1808 IN MAIN.asm
MAP:                0B42 DEFINED AT LINE 1809 IN MAIN.asm
ZPRT:               0B44 DEFINED AT LINE 1813 IN MAIN.asm
ZPRT_ARGS:          0B4F DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
ZPRT_BLOCK:         0B51 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
ARGS0A1L_:          0B78 DEFINED AT LINE 1828 IN MAIN.asm
ARGS0A1L:           0B7A DEFINED AT LINE 1831 IN MAIN.asm
ARGS1A0L_:          0B7B DEFINED AT LINE 1834 IN MAIN.asm
ARGS1A0L:           0B7D DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
ARGS1A1L_:          0B7E DEFINED AT LINE 1840 IN MAIN.asm
ARGS1A1L:           0B80 DEFINED AT LINE 1843 IN MAIN.asm
ARGS2A0L_:          0B82 DEFINED AT LINE 1846 IN MAIN.asm
ARGS2A0L:           0B84 DEFINED AT LINE 1849 IN MAIN.asm
ARGS1A2L_:          0B86 DEFINED AT LINE 1852 IN MAIN.asm
ARGS1A2L:           0B88 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
JUMPTABLE:          0B8B DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
JUMPTABLE0:         0B8D DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
JUMPTABLE1:         0B9A DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
JUMPTABLE2:         0B9B DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
PRTSTR0:            0BA1 DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
PRTSTR:             0BA5 DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
NESTING:            0BAA DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
NESTING0:           0BB4 DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
NESTING1A:          0BBB DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
NESTING1:           0BBE DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
NESTING2:           0BCD DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
NESTING3:           0BCF DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
NESTING4:           0BDA DEFINED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
PROMPT:             0BDC DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
CRLF:               0BE5 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
PRINTSTR:           0BEC DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 20
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 142
INIT:               0BF3 DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
INIT0:              0C0C DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
START:              0C11 DEFINED AT LINE 1981 IN MAIN.asm
INTERPRET:          0C27 DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
INTERPRET2:         0C33 DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
INTERPRET3:         0C3B DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
INTERPRET4:         0C41 DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
INTERPRET5:         0C46 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
INTERPRET5A:        0C69 DEFINED AT LINE 2049 IN MAIN.asm
INTERPRET6:         0C6B DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
INTERPRET7:         0C79 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
INTERPRET8:         0C8C DEFINED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
NEXT:               0C97 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
NEXT1:              0CA8 DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
EXIT:               0CAF DEFINED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
RUN:                0CB3 DEFINED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0CB7 DEFINED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
BACKSPACE_:         0CCA DEFINED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
EDIT_:              0CDA DEFINED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
REEDIT_:            0CF2 DEFINED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
PRINTSTACK_:        0CF5 DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2725S50:  0DD2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2732S50:  0E49 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2733S50:  0EB6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2734S50:  0F21 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2735S50:  0F8C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2736S50:  0FF7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2737S50:  1062 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2738S50:  10CF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2739S50:  113E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2740S50:  11AB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2741S50:  1218 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2742S50:  1287 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2743S50:  12F8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2744S50:  1367 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2745S50:  13D6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2746S50:  144B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2747S50:  14C0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2748S50:  1533 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2749S50:  15AA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2750S50:  1625 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2751S50:  169E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2752S50:  1711 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2753S50:  178C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2754S50:  1803 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2755S50:  1876 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2756S50:  18E9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2757S50:  1964 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2758S50:  19D7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2759S50:  1A4A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2760S50:  1ABF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2761S50:  1B44 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2762S50:  1BB7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2763S50:  1C32 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2764S50:  1CA5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2765S50:  1D1C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2766S50:  1D8F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2767S50:  1E04 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2768S50:  1E79 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2769S50:  1EEC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2770S50:  1F5F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2771S50:  1FD2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2772S50:  2045 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2773S50:  20B8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2774S50:  212B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2775S50:  219E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2776S50:  2211 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2777S50:  2286 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2778S50:  22FB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2779S50:  2370 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2780S50:  23E7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2781S50:  245E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2782S50:  24CF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2783S50:  2540 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2784S50:  25B7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2785S50:  2634 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2786S50:  26B1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2787S50:  2732 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2788S50:  27BD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2789S50:  2848 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2790S50:  28BB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2791S50:  2930 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2792S50:  29A7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2793S50:  2A20 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2794S50:  2A97 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2795S50:  2B0C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2796S50:  2B83 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2797S50:  2C00 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2798S50:  2C81 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2799S50:  2CFE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2800S50:  2D85 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2801S50:  2E0E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2802S50:  2E9D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2803S50:  2F30 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2804S50:  2FB5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2805S50:  3040 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2806S50:  30CD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2807S50:  315C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2808S50:  31E9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2809S50:  3284 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2810S50:  330D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2811S50:  33A2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2812S50:  3439 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2813S50:  34D2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2814S50:  3577 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2815S50:  361C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2816S50:  369F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2817S50:  3728 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2818S50:  37AB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2819S50:  383A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2820S50:  38C9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2821S50:  3968 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2822S50:  3A0F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2823S50:  3AB6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2824S50:  3B45 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2825S50:  3BE0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2826S50:  3C77 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2827S50:  3D14 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2828S50:  3DC7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2829S50:  3E7E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2830S50:  3EFD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2831S50:  3F7C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2832S50:  3FFB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2833S50:  407A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2834S50:  40F1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2835S50:  4168 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2836S50:  41DF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2837S50:  4256 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2838S50:  42DB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2839S50:  4362 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2840S50:  43D9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2841S50:  4460 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2842S50:  44FF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2843S50:  457A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2844S50:  4605 DEFINED AT LINE 41
                    > USED AT LINE 10
EXECSTR:            4610 DEFINED AT LINE 154
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
STACK:              4780 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
VARS:               4800 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           48D0 DEFINED AT LINE 10 IN ram.asm
RST08:              48D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              48D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              48D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              48D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              48D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              48DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               48DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             48DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             48E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            48E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            48E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            48E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1969 IN MAIN.asm
VDATAWIDTH:         48E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
VNUMBASE:           48E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1763 IN MAIN.asm
VTIBPTR:            48EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
VBUFPTR:            48EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
VNEXT:              48EE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1966 IN MAIN.asm
VHEAPPTR:           48F0 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
VPOINTER:           48F2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
VREMAIN:            48F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
VSAVEDIP:           48F6 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           48F8 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           48FA DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          48FC DEFINED AT LINE 43 IN ram.asm
VTEMP1:             48FE DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
VTEMP2:             4900 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
VLASTDEF:           4902 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           4904 DEFINED AT LINE 50 IN ram.asm
TBPTR:              4906 DEFINED AT LINE 51 IN ram.asm
TIB:                4A00 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
BUF:                4B00 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
PAD:                4C00 DEFINED AT LINE 58 IN ram.asm
HEAP:               4D00 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 65 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
