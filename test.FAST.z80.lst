0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 38               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 38               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 38               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 38               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 38               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 38               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 38               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 38               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 38               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 38               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 37               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 38               LD   (RST08),HL   
0094   22 D2 38               LD   (RST10),HL   
0097   22 D4 38               LD   (RST18),HL   
009A   22 D6 38               LD   (RST20),HL   
009D   22 D8 38               LD   (RST28),HL   
00A0   22 DA 38               LD   (RST30),HL   
00A3   22 DE 38               LD   (INTVEC),HL   
00A6   22 E0 38               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 38               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 38               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 37               LD   SP,STACK   
00C6   CD 3E 09               CALL   init   
00C9   C3 00 0A               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   C9 09                  DW   next   ; g nNext
0186   00 3B                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   85                     DB   lsb(nop_)   ; SP
0221   3F                     DB   lsb(not_)   ; !
0222   50                     DB   lsb(string_)   ; "
0223   47                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   85                     DB   lsb(nop_)   ; )
022A   3C                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   85                     DB   lsb(nop_)   ; ,
022D   53                     DB   lsb(sub_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(div_)   ; /	
0230   44                     DB   lsb(num_)   ; 0
0231   44                     DB   lsb(num_)   ; 1
0232   44                     DB   lsb(num_)   ; 2
0233   44                     DB   lsb(num_)   ; 3
0234   44                     DB   lsb(num_)   ; 4
0235   44                     DB   lsb(num_)   ; 5
0236   44                     DB   lsb(num_)   ; 6
0237   44                     DB   lsb(num_)   ; 7
0238   44                     DB   lsb(num_)   ; 8
0239   44                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(go_)   ; :
023B   85                     DB   lsb(nop_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   56                     DB   lsb(eq_)   ; =
023E   65                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   2D                     DB   lsb(identU_)   ; A
0242   2D                     DB   lsb(identU_)   ; B
0243   2D                     DB   lsb(identU_)   ; C
0244   2D                     DB   lsb(identU_)   ; D
0245   2D                     DB   lsb(identU_)   ; E
0246   2D                     DB   lsb(identU_)   ; F
0247   2D                     DB   lsb(identU_)   ; G
0248   2D                     DB   lsb(identU_)   ; h
0249   2D                     DB   lsb(identU_)   ; I
024A   2D                     DB   lsb(identU_)   ; J
024B   2D                     DB   lsb(identU_)   ; K
024C   2D                     DB   lsb(identU_)   ; L
024D   2D                     DB   lsb(identU_)   ; M
024E   2D                     DB   lsb(identU_)   ; N
024F   2D                     DB   lsb(identU_)   ; O
0250   2D                     DB   lsb(identU_)   ; p
0251   2D                     DB   lsb(identU_)   ; Q
0252   2D                     DB   lsb(identU_)   ; R
0253   2D                     DB   lsb(identU_)   ; S
0254   2D                     DB   lsb(identU_)   ; T
0255   2D                     DB   lsb(identU_)   ; U
0256   2D                     DB   lsb(identU_)   ; V
0257   2D                     DB   lsb(identU_)   ; W
0258   2D                     DB   lsb(identU_)   ; X
0259   2D                     DB   lsb(identU_)   ; Y
025A   2D                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   4D                     DB   lsb(xor_)   ; ^
025F   27                     DB   lsb(remain_)   ; _
0260   50                     DB   lsb(string_)   ; `     used for testing string   	
0261   30                     DB   lsb(identL_)   ; a
0262   30                     DB   lsb(identL_)   ; b
0263   30                     DB   lsb(identL_)   ; c
0264   30                     DB   lsb(identL_)   ; d
0265   30                     DB   lsb(identL_)   ; e
0266   30                     DB   lsb(identL_)   ; f
0267   30                     DB   lsb(identL_)   ; g
0268   30                     DB   lsb(identL_)   ; h
0269   30                     DB   lsb(identL_)   ; i
026A   30                     DB   lsb(identL_)   ; j
026B   30                     DB   lsb(identL_)   ; k
026C   30                     DB   lsb(identL_)   ; l
026D   30                     DB   lsb(identL_)   ; m
026E   30                     DB   lsb(identL_)   ; n
026F   30                     DB   lsb(identL_)   ; o
0270   30                     DB   lsb(identL_)   ; p
0271   30                     DB   lsb(identL_)   ; q
0272   30                     DB   lsb(identL_)   ; r
0273   30                     DB   lsb(identL_)   ; s
0274   30                     DB   lsb(identL_)   ; t
0275   30                     DB   lsb(identL_)   ; u
0276   30                     DB   lsb(identL_)   ; v
0277   30                     DB   lsb(identL_)   ; w
0278   30                     DB   lsb(identL_)   ; x
0279   30                     DB   lsb(identL_)   ; y
027A   30                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4A                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   36                     DB   lsb(inv_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 87 03               JP   add   
0303                ADDR_:       
0303   C3 A0 03               JP   addr   
0306                AND_:        
0306   C3 AC 03               JP   and   
0309                ARG_:        
0309   C3 C9 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 00 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 32 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 4E 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 9C 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 C5 04               JP   block   
031B                BLOCKEND_:      
031B   C3 2E 05               JP   blockend   
031E                CHAR_:       
031E   C3 83 05               JP   char   
0321                COMMAND_:      
0321   C3 8A 07               JP   command   
0324                DOT_:        
0324   C3 AB 05               JP   dot   
0327                REMAIN_:      
0327   C3 19 07               JP   remain   
032A                GO_:         
032A   C3 0F 06               JP   go   
032D                IDENTU_:      
032D   C3 9B 06               JP   identU   
0330                IDENTL_:      
0330   C3 A0 06               JP   identL   
0333                IF_:         
0333   C3 B2 06               JP   if   
0336                INV_:        ; Bitwise INVert the top member of the stack
0336   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0339   C3 C1 03               JP   xor1   
033C                MUL_:        
033C   C3 CB 06               JP   mul   
033F                NOT_:        ; logical invert, any non zero value
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1D                  JR   eq1   
0344                NUM_:        
0344   C3 E9 06               JP   num   
0347                HEXNUM_:      
0347   C3 7E 06               JP   hexnum   
034A                OR_:         
034A   C3 B7 03               JP   or   
034D                XOR_:        
034D   C3 C0 03               JP   xor   
0350                STRING_:      
0350   C3 42 07               JP   string   
0353                SUB_:        
0353   C3 6A 07               JP   sub   
0356                EQ_:         
0356   03                     INC   bc   
0357   0A                     LD   a,(bc)   ; is it == ?
0358   FE 3D                  CP   "="   
035A   28 04                  JR   z,eq0   ; no its equality
035C   0B                     DEC   bc   
035D   C3 B4 04               JP   assign   ; no its assignment
0360                EQ0:         
0360   E1                     POP   hl   
0361                EQ1:         
0361   D1                     POP   de   
0362   C3 EE 05               JP   equals   
0365                GT_:         
0365   03                     INC   bc   
0366   0A                     LD   a,(bc)   
0367   FE 3E                  CP   ">"   
0369   CA 2F 07               JP   z,shiftRight   
036C   D1                     POP   de   
036D   E1                     POP   hl   
036E   18 09                  JR   lt1   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA 1F 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA F6 05               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 FB 05               JP   lessthan   
0382                DIV_:        
0382   C3 98 05               JP   div   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                             ;*******************************************************************
0387                             ; word operators
0387                             ;*******************************************************************
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 07                  JR   nz,add1   
038D   11 01 00               LD   de,1   
0390   3E 3D                  LD   a,"="   
0392   18 01                  JR   add2   
0394                ADD1:        
0394   D1                     POP   de   ; second term
0395                ADD2:        
0395   E1                     POP   hl   ; first term
0396   19                     ADD   hl,de   
0397                ADD3:        
0397   FE 3D                  CP   "="   ; += add to variable
0399   CA B6 04               JP   z,assign0   
039C   E5                     PUSH   hl   
039D   0B                     DEC   bc   
039E   DD E9                  JP   (ix)   
03A0                             ; -- ptr
03A0                ADDR:        
03A0   2A F0 38               LD   hl,(vPointer)   
03A3   E5                     PUSH   hl   
03A4   21 F0 38               LD   hl,vPointer   
03A7   22 F0 38               LD   (vPointer),hl   
03AA   DD E9                  JP   (ix)   
03AC                AND:         
03AC   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03AD   E1                     POP   hl   
03AE   7B                     LD   a,e   
03AF   A5                     AND   l   
03B0   6F                     LD   l,a   
03B1   7A                     LD   a,d   
03B2   A4                     AND   h   
03B3                AND1:        
03B3   67                     LD   h,a   
03B4   E5                     PUSH   hl   
03B5   DD E9                  JP   (ix)   
03B7                OR:          
03B7   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   B5                     OR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   B4                     OR   h   
03BE   18 F3                  JR   and1   
03C0                XOR:         
03C0   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C1                XOR1:        
03C1   E1                     POP   hl   
03C2   7B                     LD   a,e   
03C3   AD                     XOR   l   
03C4   6F                     LD   l,a   
03C5   7A                     LD   a,d   
03C6   AC                     XOR   h   
03C7   18 EA                  JR   and1   
03C9                             ; $a .. $z
03C9                             ; -- value
03C9                             ; returns value of arg
03C9                ARG:         
03C9   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CC   FD 56 05               LD   d,(iy+5)   
03CF   EB                     EX   de,hl   
03D0   7D                     LD   a,l   ; arg_list* == null, skip
03D1   B4                     OR   h   
03D2   28 1C                  JR   z,arg0a   
03D4   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D5   2B                     DEC   hl   
03D6   7E                     LD   a,(hl)   
03D7   23                     INC   hl   
03D8   23                     INC   hl   
03D9   B7                     OR   a   
03DA   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DC   5F                     LD   e,a   ; e = a = num_args
03DD   03                     INC   bc   ; a = next char = arg_name
03DE   0A                     LD   a,(bc)   
03DF   C5                     PUSH   bc   ; save IP
03E0   43                     LD   b,e   ; b = e = num_args
03E1   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E4   FD 56 03               LD   d,(iy+3)   
03E7                ARG0:        
03E7   1B                     DEC   de   ; a = arg_name, de = next arg*
03E8   1B                     DEC   de   
03E9   BE                     CP   (hl)   
03EA   28 09                  JR   z,arg1   
03EC   23                     INC   hl   ; hl = next arg_list*
03ED   10 F8                  DJNZ   arg0   
03EF   C1                     POP   bc   ; no match, restore IP
03F0                ARG0A:       
03F0   11 00 00               LD   de,0   ; return 0
03F3   18 08                  JR   arg1a   
03F5                ARG1:        
03F5   C1                     POP   bc   ; restore IP
03F6   EB                     EX   de,hl   ; hl = arg*
03F7   22 F0 38               LD   (vPointer),hl   ; store arg* in setter
03FA   5E                     LD   e,(hl)   
03FB   23                     INC   hl   
03FC   56                     LD   d,(hl)   ; de = arg
03FD                ARG1A:       
03FD   D5                     PUSH   de   ; push arg
03FE   DD E9                  JP   (ix)   
0400                             ; arg_list - parses input (ab:c)
0400                             ; names after the : represent uninitialised locals
0400                             ; return values are the state of the stack after the block ends
0400                ARG_LIST:      
0400   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0403   2A EC 38               LD   hl,(vHeapPtr)   ; hl = heap*
0406   23                     INC   hl   ; skip length field to start
0407   23                     INC   hl   
0408   E5                     PUSH   hl   ; save start of arg_list
0409   03                     INC   bc   ; point to next char
040A                ARG_LIST1:      
040A   0A                     LD   a,(bc)   
040B   FE 29                  CP   ")"   ; ) is the arg_list terminator
040D   28 12                  JR   z,arg_list4   
040F   FE 3A                  CP   ":"   
0411   20 03                  JR   nz,arg_list2   
0413   14                     INC   d   ; non zero value local count acts as flag
0414   20 08                  JR   nz,arg_list3   
0416                ARG_LIST2:      
0416   77                     LD   (hl),a   
0417   23                     INC   hl   
0418   1C                     INC   e   ; increase arg count
0419   AF                     XOR   a   
041A   B2                     OR   d   
041B   28 01                  JR   z,arg_list3   
041D   14                     INC   d   ; if d > 0 increase local count
041E                ARG_LIST3:      
041E   03                     INC   bc   ; point to next char
041F   18 E9                  JR   arg_list1   
0421                ARG_LIST4:      
0421   AF                     XOR   a   
0422   B2                     OR   d   
0423   28 01                  JR   z,arg_list5   
0425   15                     DEC   d   ; remove initial inc
0426                ARG_LIST5:      
0426   23                     INC   hl   
0427   22 EC 38               LD   (vHeapPtr),hl   ; bump heap* to after end of string
042A   E1                     POP   hl   ; hl = start of arg_list
042B   E5                     PUSH   hl   ; return start of string
042C   2B                     DEC   hl   ; write length bytes to length field at start - 2
042D   72                     LD   (hl),d   
042E   2B                     DEC   hl   
042F   73                     LD   (hl),e   
0430   DD E9                  JP   (ix)   
0432                ARRBEGIN:      
0432   11 00 00               LD   de,0   ; create stack frame
0435   D5                     PUSH   de   ; push null for IP
0436   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0439   FD 56 05               LD   d,(iy+5)   ; 
043C   D5                     PUSH   de   ; 
043D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0440   FD 56 03               LD   d,(iy+3)   ; 
0443   D5                     PUSH   de   ; 
0444   FD E5                  PUSH   iy   ; push BP
0446   FD 21 00 00            LD   iy,0   ; BP = SP
044A   FD 39                  ADD   iy,sp   
044C   DD E9                  JP   (ix)   
044E                ARREND:      
044E   FD 54                  LD   d,iyh   ; de = BP
0450   FD 5D                  LD   e,iyl   
0452   ED 43 F8 38            LD   (vTemp1),bc   ; save IP
0456   62 6B                  LD   hl,de   ; hl = de = BP
0458   B7                     OR   a   
0459   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
045B   CB 3C                  SRL   h   ; 
045D   CB 1D                  RR   l   
045F   44 4D                  LD   bc,hl   ; bc = count
0461   2A EC 38               LD   hl,(vHeapPtr)   ; hl = array[-2]
0464   71                     LD   (hl),c   ; write num items in length word
0465   23                     INC   hl   
0466   70                     LD   (hl),b   
0467   23                     INC   hl   ; hl = array[0], bc = count
0468                             ; de = BP, hl = array[0], bc = count
0468                ARREND1:      
0468   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
046B   77                     LD   (hl),a   ; write lsb of array item
046C   23                     INC   hl   ; move to msb of array item
046D   3A E6 38               LD   a,(vDataWidth)   ; vDataWidth=1?
0470   3D                     DEC   a   
0471   28 05                  JR   z,arrEnd2   
0473   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0476   77                     LD   (hl),a   ; write msb of array item
0477   23                     INC   hl   ; move to next word in array
0478                ARREND2:      
0478   FD 2B                  DEC   iy   ; move to next word on stack
047A   FD 2B                  DEC   iy   
047C   0B                     DEC   bc   ; dec items count
047D   79                     LD   a,c   ; if not zero loop
047E   B0                     OR   b   
047F   20 E7                  JR   nz,arrEnd1   
0481   EB                     EX   de,hl   ; de = end of array, hl = BP
0482   F9                     LD   sp,hl   ; sp = BP
0483   E1                     POP   hl   ; de = end of array, hl = old BP
0484   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0485   FD 62                  LD   iyh,d   
0487   FD 6B                  LD   iyl,e   
0489   D1                     POP   de   ; pop arg_list (discard)
048A   D1                     POP   de   ; pop first_arg* (discard)
048B   D1                     POP   de   ; pop IP (discard)
048C   ED 5B EC 38            LD   de,(vHeapPtr)   ; de = array[-2]
0490   22 EC 38               LD   (vHeapPtr),hl   ; move heap* to end of array
0493   ED 4B F8 38            LD   bc,(vTemp1)   ; restore IP
0497   13                     INC   de   ; de = array[0]
0498   13                     INC   de   
0499   D5                     PUSH   de   ; return array[0]
049A   DD E9                  JP   (ix)   
049C                             ; index of an array, based on vDataWidth
049C                             ; array num -- value    ; also sets vPointer to address
049C                ARRINDEX:      
049C   E1                     POP   hl   ; hl = index
049D   D1                     POP   de   ; de = array
049E   3A E6 38               LD   a,(vDataWidth)   ; a = data width
04A1   3D                     DEC   a   
04A2   28 01                  JR   z,arrIndex1   
04A4                ARRINDEX0:      
04A4   29                     ADD   hl,hl   ; if data width = 2 then double
04A5                ARRINDEX1:      
04A5   19                     ADD   hl,de   ; add addr
04A6   22 F0 38               LD   (vPointer),hl   ; store address in setter
04A9   16 00                  LD   d,0   
04AB   5E                     LD   e,(hl)   
04AC   B7                     OR   a   ; check data width again
04AD   28 02                  JR   z,arrIndex2   
04AF   23                     INC   hl   
04B0   56                     LD   d,(hl)   
04B1                ARRINDEX2:      
04B1   D5                     PUSH   de   
04B2   DD E9                  JP   (ix)   
04B4                             ; value _oldValue --            ; uses address in vPointer
04B4                ASSIGN:      
04B4   E1                     POP   hl   ; discard last accessed value
04B5   E1                     POP   hl   ; hl = new value
04B6                ASSIGN0:      
04B6   EB                     EX   de,hl   ; de = new value
04B7                ASSIGNX:      
04B7   2A F0 38               LD   hl,(vPointer)   
04BA   73                     LD   (hl),e   
04BB   3A E6 38               LD   a,(vDataWidth)   
04BE   3D                     DEC   a   ; is it byte?
04BF   28 02                  JR   z,assign1   
04C1   23                     INC   hl   
04C2   72                     LD   (hl),d   
04C3                ASSIGN1:      
04C3   DD E9                  JP   (ix)   
04C5                BLOCK:       
04C5   C5                     PUSH   bc   ; return pointer to first { of block
04C6   03                     INC   bc   
04C7   16 01                  LD   d,1   ; nesting: count first parenthesis
04C9                BLOCK1:      ; Skip to end of definition
04C9   0A                     LD   a,(bc)   ; Get the next character
04CA   03                     INC   bc   ; Point to next character
04CB   FE 21                  CP   " " + 1   ; ignore whitespace
04CD   38 FA                  JR   c,block1   
04CF   FE 29                  CP   ")"   
04D1   28 2D                  JR   z,block4   
04D3   FE 7D                  CP   "}"   
04D5   28 29                  JR   z,block4   
04D7   FE 5D                  CP   "]"   
04D9   28 25                  JR   z,block4   
04DB   FE 28                  CP   "("   
04DD   28 16                  JR   z,block2   
04DF   FE 7B                  CP   "{"   
04E1   28 12                  JR   z,block2   
04E3   FE 5B                  CP   "["   
04E5   28 0E                  JR   z,block2   
04E7   FE 27                  CP   "'"   
04E9   28 0D                  JR   z,block3   
04EB   FE 60                  CP   "`"   
04ED   28 09                  JR   z,block3   
04EF   FE 22                  CP   $22   
04F1   28 05                  JR   z,block3   
04F3   18 D4                  JR   block1   
04F5                BLOCK2:      
04F5   14                     INC   d   
04F6   18 D1                  JR   block1   
04F8                BLOCK3:      
04F8   3E 80                  LD   a,$80   
04FA   AA                     XOR   d   
04FB   47                     LD   b,a   
04FC   20 CB                  JR   nz,block1   
04FE   18 03                  JR   block5   
0500                BLOCK4:      
0500   15                     DEC   d   
0501   20 C6                  JR   nz,block1   ; get the next element
0503                BLOCK5:      
0503   60 69                  LD   hl,bc   ; hl = IP
0505   11 00 3B               LD   de,HEAP   ; is IP pointing to object in heap
0508   B7                     OR   a   ; IP - HEAP
0509   ED 52                  SBC   hl,de   
050B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050D   28 1C                  JR   z,block6   
050F   60 69                  LD   hl,bc   ; hl = IP
0511   D1                     POP   de   ; de = block*
0512   ED 43 F8 38            LD   (vTemp1),bc   ; save IP
0516   B7                     OR   a   ; bc = size
0517   ED 52                  SBC   hl,de   
0519   44 4D                  LD   bc,hl   
051B   EB                     EX   de,hl   ; hl = block* de = heap*
051C   ED 5B EC 38            LD   de,(vHeapPtr)   
0520   D5                     PUSH   de   ; return hblock*
0521   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0523   ED 53 EC 38            LD   (vHeapPtr),de   ; heap* += size
0527   ED 4B F8 38            LD   bc,(vTemp1)   ; restore IP
052B                BLOCK6:      
052B   0B                     DEC   bc   ; balanced, exit
052C   DD E9                  JP   (ix)   
052E                BLOCKEND:      
052E   D9                     EXX      ; de" = oldBP bc" = oldIP
052F   FD 5E 00               LD   e,(iy+0)   
0532   FD 56 01               LD   d,(iy+1)   
0535   FD 4E 06               LD   c,(iy+6)   
0538   FD 46 07               LD   b,(iy+7)   
053B   D9                     EXX      
053C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
053F   FD 56 03               LD   d,(iy+3)   
0542   EB                     EX   de,hl   
0543   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0546   FD 56 01               LD   d,(iy+1)   
0549   13                     INC   de   ; for carry flag <=
054A   B7                     OR   a   
054B   ED 52                  SBC   hl,de   
054D   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
054F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0551   FD 5D                  LD   e,iyl   
0553   21 08 00               LD   hl,8   
0556   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0557   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0558   18 0C                  JR   blockend2   
055A                BLOCKEND1:      ; same scope
055A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
055D   FD 56 03               LD   d,(iy+3)   
0560   EB                     EX   de,hl   
0561   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0563   FD 5D                  LD   e,iyl   
0565   EB                     EX   de,hl   
0566                BLOCKEND2:      
0566   44 4D                  LD   bc,hl   ; bc = hl = BP
0568   B7                     OR   a   ; hl = BP - SP = count
0569   ED 72                  SBC   hl,sp   
056B   7D                     LD   a,l   
056C   B4                     OR   h   
056D   28 09                  JR   z,blockend3   
056F   C5                     PUSH   bc   ; bc = count, hl = BP
0570   44 4D                  LD   bc,hl   
0572   E1                     POP   hl   
0573   2B                     DEC   hl   ; hl = BP-1
0574   1B                     DEC   de   ; de = args*-1
0575   ED B8                  LDDR      
0577   13                     INC   de   
0578                BLOCKEND3:      
0578   EB                     EX   de,hl   ; hl = new tos
0579   F9                     LD   sp,hl   ; sp = new tos
057A   D9                     EXX      ; bc = IP, iy = oldBP
057B   D5                     PUSH   de   
057C   C5                     PUSH   bc   
057D   D9                     EXX      
057E   C1                     POP   bc   
057F   FD E1                  POP   iy   
0581   DD E9                  JP   (ix)   
0583                CHAR:        
0583   21 00 00               LD   hl,0   ; if "" is empty or null
0586                CHAR1:       
0586   03                     INC   bc   ; point to next char
0587   0A                     LD   a,(bc)   
0588   FE 27                  CP   "'"   ; ' is the terminator
058A   28 09                  JR   z,char3   
058C   FE 5C                  CP   $5c   ; \ is the escape
058E   20 02                  JR   nz,char2   
0590   03                     INC   bc   
0591   0A                     LD   a,(bc)   
0592                CHAR2:       
0592   6F                     LD   l,a   
0593   18 F1                  JR   char1   
0595                CHAR3:       
0595   E5                     PUSH   hl   
0596   DD E9                  JP   (ix)   
0598                DIV:         
0598   D1                     POP   de   
0599   E1                     POP   hl   
059A   C5                     PUSH   bc   ; preserve the IP
059B   44 4D                  LD   bc,hl   
059D   CD D5 05               CALL   divide   
05A0   EB                     EX   de,hl   
05A1   ED 53 F6 38            LD   (vRemain),de   
05A5   C1                     POP   bc   
05A6   03                     INC   bc   
05A7   0A                     LD   a,(bc)   
05A8   C3 97 03               JP   add3   
05AB                DOT:         
05AB   E1                     POP   hl   
05AC   03                     INC   bc   
05AD   0A                     LD   a,(bc)   
05AE   FE 68                  CP   "h"   
05B0   20 05                  JR   nz,dot1   
05B2   CD B2 08               CALL   prthex   
05B5   18 17                  JR   dot4   
05B7                DOT1:        
05B7   FE 73                  CP   "s"   
05B9   20 05                  JR   nz,dot2   
05BB   CD D5 08               CALL   prtstr   
05BE   18 0E                  JR   dot4   
05C0                DOT2:        
05C0   FE 63                  CP   "c"   
05C2   20 06                  JR   nz,dot3   
05C4   7D                     LD   a,l   
05C5   CD 85 00               CALL   putchar   
05C8   18 04                  JR   dot4   
05CA                DOT3:        
05CA   0B                     DEC   bc   
05CB   CD 6A 08               CALL   prtdec   
05CE                DOT4:        
05CE   3E 20                  LD   a," "   
05D0   CD 85 00               CALL   putchar   
05D3   DD E9                  JP   (ix)   
05D5                             ; division subroutine.
05D5                             ; bc: divisor, de: dividend, hl: remainder
05D5                DIVIDE:      
05D5   21 00 00               LD   hl,0   ; zero the remainder
05D8   3E 10                  LD   a,16   ; loop counter
05DA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05DA   CB 21                  SLA   c   
05DC   CB 10                  RL   b   
05DE   ED 6A                  ADC   hl,hl   
05E0   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E2   38 03                  JR   c,divide2   
05E4   0C                     INC   c   
05E5   18 01                  JR   divide3   
05E7                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E7   19                     ADD   hl,de   
05E8                DIVIDE3:      
05E8   3D                     DEC   a   
05E9   20 EF                  JR   nz,divide1   
05EB   50 59                  LD   de,bc   ; result from bc to de
05ED   C9                     RET      
05EE                             ; hl = value1, de = value2
05EE                             ; hl = result
05EE                EQUALS:      
05EE   B7                     OR   a   ; reset the carry flag
05EF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05F1   28 10                  JR   z,true1   
05F3   C3 09 06               JP   false1   
05F6                             ; hl = value1 de = value2
05F6                             ; hl = result
05F6                LESSTHANEQ:      
05F6   B7                     OR   a   
05F7   ED 52                  SBC   hl,de   
05F9   18 05                  JR   lessthan1   
05FB                             ; hl = value1 de = value2
05FB                             ; hl = result
05FB                LESSTHAN:      
05FB   B7                     OR   a   
05FC   ED 52                  SBC   hl,de   
05FE   28 09                  JR   z,false1   
0600                LESSTHAN1:      
0600   FA 09 06               JP   m,false1   
0603                TRUE1:       
0603   21 FF FF               LD   hl,TRUE   
0606   E5                     PUSH   hl   
0607   DD E9                  JP   (ix)   
0609                NULL1:       
0609                FALSE1:      
0609   21 00 00               LD   hl,FALSE   
060C   E5                     PUSH   hl   
060D   DD E9                  JP   (ix)   
060F                             ; execute a block of code which ends with }
060F                             ; creates a root scope if BP == stack
060F                             ; else uses outer scope
060F                GO:          
060F   D1                     POP   de   ; de = block*
0610                GO1:         
0610   7B                     LD   a,e   ; if block* == null, exit
0611   B2                     OR   d   
0612   20 02                  JR   nz,go2   
0614   DD E9                  JP   (ix)   
0616                GO2:         
0616   1A                     LD   a,(de)   
0617   FE 7B                  CP   "{"   
0619   CA 4A 06               JP   z,goBlock   
061C                GOFUNC:      ; execute code at pointer
061C   EB                     EX   de,hl   ; hl = func*
061D   23                     INC   hl   ; skip closure
061E   23                     INC   hl   
061F   5E                     LD   e,(hl)   ; de = hblock*
0620   23                     INC   hl   
0621   56                     LD   d,(hl)   
0622   23                     INC   hl   
0623   D5                     PUSH   de   ; save hblock*
0624   5E                     LD   e,(hl)   ; de = arg_list*
0625   23                     INC   hl   
0626   56                     LD   d,(hl)   
0627   23                     INC   hl   
0628   EB                     EX   de,hl   ; hl = arg_list*
0629   D1                     POP   de   ; restore hblock*
062A   7D                     LD   a,l   ; if arg_list* != null skip
062B   B4                     OR   h   
062C   20 03                  JR   nz,goFunc1   
062E   C5                     PUSH   bc   ; push IP
062F   18 3A                  JR   goBlock2   
0631                GOFUNC1:      
0631   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0632   7E                     LD   a,(hl)   
0633   23                     INC   hl   
0634   B7                     OR   a   
0635   28 05                  JR   z,goFunc3   
0637                GOFUNC2:      
0637   3B                     DEC   sp   
0638   3B                     DEC   sp   
0639   3D                     DEC   a   
063A   20 FB                  JR   nz,goFunc2   
063C                GOFUNC3:      
063C   C5                     PUSH   bc   ; push IP
063D   E5                     PUSH   hl   ; push arg_list*
063E   2B                     DEC   hl   ; hl = num_args*
063F   2B                     DEC   hl   
0640   7E                     LD   a,(hl)   ; hl = num_args * 2
0641   87                     ADD   a,a   
0642   C6 04                  ADD   a,4   ; offset for IP and arg_list
0644   6F                     LD   l,a   
0645   26 00                  LD   h,$0   
0647   39                     ADD   hl,sp   ; hl = first_arg*
0648   18 27                  JR   goBlock4   
064A                GOBLOCK:      
064A   13                     INC   de   
064B   C5                     PUSH   bc   ; push IP
064C   21 80 37               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
064F   FD 44                  LD   b,iyh   
0651   FD 4D                  LD   c,iyl   
0653   B7                     OR   a   ; hl = stack - BP = root_scope
0654   ED 42                  SBC   hl,bc   
0656   7D                     LD   a,l   ; if root_scope, skip
0657   B4                     OR   h   
0658   28 11                  JR   z,goBlock2   
065A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
065D   FD 46 05               LD   b,(iy+5)   
0660   C5                     PUSH   bc   
0661   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0664   FD 46 03               LD   b,(iy+3)   
0667   60 69                  LD   hl,bc   
0669   18 05                  JR   goBlock3   
066B                GOBLOCK2:      
066B   E5                     PUSH   hl   ; push arg_list (null)
066C   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
066F   39                     ADD   hl,sp   
0670                GOBLOCK3:      
0670   1B                     DEC   de   
0671                GOBLOCK4:      
0671   E5                     PUSH   hl   ; push first_arg
0672   FD E5                  PUSH   iy   ; push BP
0674   FD 21 00 00            LD   iy,0   ; BP = SP
0678   FD 39                  ADD   iy,sp   
067A   42 4B                  LD   bc,de   ; bc = de = block*-1
067C   DD E9                  JP   (ix)   
067E                HEXNUM:      
067E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0681                HEXNUM1:      
0681   03                     INC   bc   
0682   0A                     LD   a,(bc)   ; Get the character which is a numeral
0683   CB 77                  BIT   6,a   ; is it uppercase alpha?
0685   28 02                  JR   z,hexnum2   ; no a decimal
0687   D6 07                  SUB   7   ; sub 7  to make $a - $F
0689                HEXNUM2:      
0689   D6 30                  SUB   $30   ; form decimal digit
068B   DA 0B 07               JP   c,num2   
068E   FE 10                  CP   $0F+1   
0690   D2 0B 07               JP   nc,num2   
0693   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0694   29                     ADD   hl,hl   ; 4X
0695   29                     ADD   hl,hl   ; 8X
0696   29                     ADD   hl,hl   ; 16X
0697   85                     ADD   a,l   ; add into bottom of hl
0698   6F                     LD   l,a   
0699   18 E6                  JR   hexnum1   
069B                IDENTU:      
069B   0A                     LD   a,(bc)   ; a = identifier char
069C   D6 41                  SUB   "A"   ; "A" = 0
069E   18 05                  JR   ident1   
06A0                IDENTL:      
06A0   0A                     LD   a,(bc)   
06A1   D6 61                  SUB   "a"   
06A3   C6 1A                  ADD   a,26   
06A5                IDENT1:      
06A5   87                     ADD   a,a   ; l = a * 2
06A6   6F                     LD   l,a   
06A7   26 38                  LD   h,msb(vars)   
06A9   22 F0 38               LD   (vPointer),hl   ; store address in setter
06AC   5E                     LD   e,(hl)   
06AD   23                     INC   hl   
06AE   56                     LD   d,(hl)   
06AF   D5                     PUSH   de   
06B0   DD E9                  JP   (ix)   
06B2                             ; if
06B2                             ; condition then -- value
06B2                IF:          
06B2   03                     INC   bc   
06B3   0A                     LD   a,(bc)   
06B4   FE 3F                  CP   "?"   
06B6   28 06                  JR   z,ifte   
06B8   0B                     DEC   bc   
06B9   11 00 00               LD   de,0   ; NUL pointer for else
06BC   18 01                  JR   ifte1   
06BE                             ; ifte
06BE                             ; condition then else -- value
06BE                IFTE:        
06BE   D1                     POP   de   ; de = else
06BF                IFTE1:       
06BF   E1                     POP   hl   ; hl = then
06C0   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06C1   7C                     LD   a,h   
06C2   B5                     OR   l   
06C3   E1                     POP   hl   ; hl = then
06C4   CA 10 06               JP   z,go1   ; if z de = else
06C7   EB                     EX   de,hl   ; condition = false, de = then
06C8   C3 10 06               JP   go1   
06CB                MUL:         
06CB   D1                     POP   de   ; get first value
06CC   E1                     POP   hl   
06CD                MUL2:        
06CD   C5                     PUSH   bc   ; Preserve the IP
06CE   44 4D                  LD   bc,hl   ; bc = 2nd value
06D0   21 00 00               LD   hl,0   
06D3   3E 10                  LD   a,16   
06D5                MUL3:        
06D5   29                     ADD   hl,hl   
06D6   CB 13                  RL   e   
06D8   CB 12                  RL   d   
06DA   30 04                  JR   nc,$+6   
06DC   09                     ADD   hl,bc   
06DD   30 01                  JR   nc,$+3   
06DF   13                     INC   de   
06E0   3D                     DEC   a   
06E1   20 F2                  JR   nz,mul3   
06E3   C1                     POP   bc   ; Restore the IP
06E4   03                     INC   bc   
06E5   0A                     LD   a,(bc)   
06E6   C3 97 03               JP   add3   
06E9                NUM:         
06E9   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06EC   0A                     LD   a,(bc)   ; Get numeral or -
06ED   FE 2D                  CP   "-"   
06EF   20 01                  JR   nz,num0   
06F1   03                     INC   bc   ; move to next char, no flags affected
06F2                NUM0:        
06F2   08                     EX   af,af'   ; save zero flag = 0 for later
06F3                NUM1:        
06F3   0A                     LD   a,(bc)   ; read digit
06F4   D6 30                  SUB   "0"   ; less than 0?
06F6   38 13                  JR   c,num2   ; not a digit, exit loop
06F8   FE 0A                  CP   10   ; greater that 9?
06FA   30 0F                  JR   nc,num2   ; not a digit, exit loop
06FC   03                     INC   bc   ; inc IP
06FD   54 5D                  LD   de,hl   ; multiply hl * 10
06FF   29                     ADD   hl,hl   
0700   29                     ADD   hl,hl   
0701   19                     ADD   hl,de   
0702   29                     ADD   hl,hl   
0703   85                     ADD   a,l   ; add digit in a to hl
0704   6F                     LD   l,a   
0705   3E 00                  LD   a,0   
0707   8C                     ADC   a,h   
0708   67                     LD   h,a   
0709   18 E8                  JR   num1   
070B                NUM2:        
070B   0B                     DEC   bc   
070C   08                     EX   af,af'   ; restore zero flag
070D   20 07                  JR   nz,num3   
070F   EB                     EX   de,hl   ; negate the value of hl
0710   21 00 00               LD   hl,0   
0713   B7                     OR   a   ; jump to sub2
0714   ED 52                  SBC   hl,de   
0716                NUM3:        
0716   E5                     PUSH   hl   ; Put the number on the stack
0717   DD E9                  JP   (ix)   ; and process the next character
0719                REMAIN:      
0719   2A F6 38               LD   hl,(vRemain)   
071C   E5                     PUSH   hl   
071D   DD E9                  JP   (ix)   
071F                             ; shiftLeft
071F                             ; value count -- value2          shift left count places
071F                SHIFTLEFT:      
071F   50 59                  LD   de,bc   ; save IP
0721   C1                     POP   bc   ; bc = count
0722   41                     LD   b,c   ; b = loop counter
0723   E1                     POP   hl   
0724   04                     INC   b   ; test for counter=0 case
0725   18 01                  JR   shiftLeft2   
0727                SHIFTLEFT1:      
0727   29                     ADD   hl,hl   ; left shift hl
0728                SHIFTLEFT2:      
0728   10 FD                  DJNZ   shiftLeft1   
072A   E5                     PUSH   hl   
072B   42 4B                  LD   bc,de   ; restore IP
072D   DD E9                  JP   (ix)   
072F                             ; shiftRight
072F                             ; value count -- value2          shift left count places
072F                SHIFTRIGHT:      
072F   50 59                  LD   de,bc   ; save IP
0731   C1                     POP   bc   ; bc = count
0732   41                     LD   b,c   ; b = loop counter
0733   E1                     POP   hl   
0734   04                     INC   b   ; test for counter=0 case
0735   18 04                  JR   shiftRight2   
0737                SHIFTRIGHT1:      
0737   CB 3C                  SRL   h   ; right shift hl
0739   CB 1D                  RR   l   
073B                SHIFTRIGHT2:      
073B   10 FA                  DJNZ   shiftRight1   
073D   E5                     PUSH   hl   
073E   42 4B                  LD   bc,de   ; restore IP
0740   DD E9                  JP   (ix)   
0742                             ; string
0742                             ; -- ptr                        ; points to start of string chars,
0742                             ; length is stored at start - 2 bytes
0742                STRING:      
0742   2A EC 38               LD   hl,(vHeapPtr)   ; hl = heap*
0745   23                     INC   hl   ; skip length field to start
0746   23                     INC   hl   
0747   E5                     PUSH   hl   ; save start of string
0748   03                     INC   bc   ; point to next char
0749   18 03                  JR   string2   
074B                STRING1:      
074B   77                     LD   (hl),a   
074C   23                     INC   hl   ; increase count
074D   03                     INC   bc   ; point to next char
074E                STRING2:      
074E   0A                     LD   a,(bc)   
074F   FE 22                  CP   DQUOTE   ; " is the string terminator
0751   20 F8                  JR   nz,string1   
0753   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0755   20 F4                  JR   nz,string1   
0757   AF                     XOR   a   ; write NUL to terminate string
0758   77                     LD   (hl),a   ; hl = end of string
0759   23                     INC   hl   
075A   22 EC 38               LD   (vHeapPtr),hl   ; bump heap* to after end of string
075D   2B                     DEC   hl   ; hl = end of string without terminator
075E   D1                     POP   de   ; de = start of string
075F   D5                     PUSH   de   ; return start of string
0760   B7                     OR   a   ; hl = length bytes, de = start of string
0761   ED 52                  SBC   hl,de   
0763   EB                     EX   de,hl   
0764   2B                     DEC   hl   ; write length bytes to length field at start - 2
0765   72                     LD   (hl),d   
0766   2B                     DEC   hl   
0767   73                     LD   (hl),e   
0768   DD E9                  JP   (ix)   
076A                SUB:         ; negative sign or subtract
076A   03                     INC   bc   ; check if sign of a number
076B   0A                     LD   a,(bc)   
076C   0B                     DEC   bc   
076D   FE 30                  CP   "0"   
076F   38 05                  JR   c,sub0   
0771   FE 3A                  CP   "9"+1   
0773   DA 44 03               JP   c,num_   
0776                SUB0:        ; Subtract the value 2nd on stack from top of stack
0776   03                     INC   bc   
0777   FE 2D                  CP   "-"   
0779   20 07                  JR   nz,sub1   
077B   11 01 00               LD   de,1   
077E   3E 3D                  LD   a,"="   
0780   18 01                  JR   sub3   
0782                SUB1:        
0782   D1                     POP   de   
0783                SUB3:        
0783   E1                     POP   hl   
0784   B7                     OR   a   
0785   ED 52                  SBC   hl,de   
0787   C3 97 03               JP   add3   
078A                             ;*******************************************************************
078A                             ; commands
078A                             ;*******************************************************************
078A                COMMAND:      
078A   03                     INC   bc   
078B   0A                     LD   a,(bc)   
078C   FE 5C                  CP   $5C   ; \\ comment
078E   CA E0 07               JP   z,comment   
0791   FE 61                  CP   "a"   ; \a absolute
0793   CA D3 07               JP   z,abs1   
0796   FE 62                  CP   "b"   ; \b bytes
0798   CA E9 07               JP   z,bytes   
079B   FE 66                  CP   "f"   ; \f func
079D   CA F1 07               JP   z,func   
07A0   FE 46                  CP   "F"   ; \F false
07A2   CA 09 06               JP   z,false1   
07A5   FE 69                  CP   "i"   ; \i input
07A7   CA 0D 08               JP   z,input   
07AA   FE 6B                  CP   "k"   ; \k key
07AC   CA 18 08               JP   z,key   
07AF   FE 6F                  CP   "o"   ; \o output
07B1   CA 21 08               JP   z,output   
07B4   FE 72                  CP   "r"   ; \r repeat
07B6   CA 2A 08               JP   z,repeat   
07B9   FE 73                  CP   "s"   ; \s select
07BB   CA 32 08               JP   z,select   
07BE   FE 54                  CP   "T"   ; \T true
07C0   CA 03 06               JP   z,true1   
07C3   FE 77                  CP   "w"   ; \w words
07C5   CA 3C 08               JP   z,words   
07C8   FE 78                  CP   "x"   ; \x exit loop or block
07CA   CA 42 08               JP   z,blockExit   
07CD   21 01 00               LD   hl,1   ; error 1: unknown command
07D0   C3 E2 09               JP   error   
07D3                ABS1:        
07D3   E1                     POP   hl   
07D4   CB 7C                  BIT   7,h   
07D6   C8                     RET   z   
07D7   AF                     XOR   a   
07D8   95                     SUB   l   
07D9   6F                     LD   l,a   
07DA   9F                     SBC   a,a   
07DB   94                     SUB   h   
07DC   67                     LD   h,a   
07DD   E5                     PUSH   hl   
07DE   DD E9                  JP   (ix)   
07E0                COMMENT:      
07E0   03                     INC   bc   ; point to next char
07E1   0A                     LD   a,(bc)   
07E2   FE 20                  CP   " "   ; terminate on any char less than SP
07E4   30 FA                  JR   nc,comment   
07E6   0B                     DEC   bc   
07E7   DD E9                  JP   (ix)   
07E9                BYTES:       
07E9   21 01 00               LD   hl,1   
07EC                BYTES1:      
07EC   22 E6 38               LD   (vDataWidth),hl   
07EF   DD E9                  JP   (ix)   
07F1                             ; arg_list* block* -- ptr
07F1                FUNC:        
07F1   D1                     POP   de   ; de = block* hl = heap*
07F2   2A EC 38               LD   hl,(vHeapPtr)   
07F5   AF                     XOR   a   
07F6   77                     LD   (hl),a   ; compile null closure*
07F7   23                     INC   hl   
07F8   77                     LD   (hl),a   
07F9   23                     INC   hl   
07FA   73                     LD   (hl),e   ; compile block*
07FB   23                     INC   hl   
07FC   72                     LD   (hl),d   
07FD   23                     INC   hl   
07FE   D1                     POP   de   ; de = block*
07FF   73                     LD   (hl),e   ; compile arg_list*
0800   23                     INC   hl   
0801   72                     LD   (hl),d   
0802   23                     INC   hl   
0803   ED 5B EC 38            LD   de,(vHeapPtr)   ; return func*
0807   D5                     PUSH   de   
0808   22 EC 38               LD   (vHeapPtr),hl   ; heap* += 4
080B   DD E9                  JP   (ix)   
080D                             ; Z80 port input
080D                             ; port -- value
080D                INPUT:       
080D   E1                     POP   hl   
080E   59                     LD   e,c   ; save IP
080F   4D                     LD   c,l   
0810   ED 68                  IN   l,(c)   
0812   26 00                  LD   h,0   
0814   4B                     LD   c,e   ; restore IP
0815   E5                     PUSH   hl   
0816   DD E9                  JP   (ix)   
0818                KEY:         
0818   CD 81 00               CALL   getchar   
081B   26 00                  LD   h,0   
081D   6F                     LD   l,a   
081E   E5                     PUSH   hl   
081F   DD E9                  JP   (ix)   
0821                             ; Z80 port output
0821                             ; value port --
0821                OUTPUT:      
0821   E1                     POP   hl   
0822   59                     LD   e,c   ; save IP
0823   4D                     LD   c,l   
0824   E1                     POP   hl   
0825   ED 69                  OUT   (c),l   
0827   4B                     LD   c,e   ; restore IP
0828   DD E9                  JP   (ix)   
082A                             ; repeat
082A                             ; block* --
082A                REPEAT:      
082A   0B                     DEC   bc   ; rewind IP to before \r
082B   0B                     DEC   bc   
082C   E1                     POP   hl   
082D   E5                     PUSH   hl   
082E   E5                     PUSH   hl   
082F   C3 0F 06               JP   go   
0832                             ; select
0832                             ; index array -- value
0832                SELECT:      
0832   D1                     POP   de   ; de = array
0833   E1                     POP   hl   ; hl = index
0834   29                     ADD   hl,hl   ; if data width = 2 then double
0835   19                     ADD   hl,de   ; add addr
0836   5E                     LD   e,(hl)   
0837   23                     INC   hl   
0838   56                     LD   d,(hl)   
0839   C3 10 06               JP   go1   
083C                WORDS:       
083C   21 02 00               LD   hl,2   
083F   C3 EC 07               JP   bytes1   
0842                BLOCKEXIT:      
0842   E1                     POP   hl   
0843   7D                     LD   a,l   
0844   B4                     OR   h   
0845   28 02                  JR   z,blockExit1   
0847   DD E9                  JP   (ix)   
0849                BLOCKEXIT1:      
0849   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
084C   FD 66 07               LD   h,(iy+7)   
084F   23                     INC   hl   ; forward IP on stack to after \r
0850   23                     INC   hl   
0851   FD 75 06               LD   (iy+6),l   
0854   FD 74 07               LD   (iy+7),h   
0857   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
085A   FD 56 03               LD   d,(iy+3)   
085D   13                     INC   de   
085E   13                     INC   de   
085F   FD 73 02               LD   (iy+2),e   ; hl = first_arg*, is it in this scope?
0862   FD 72 03               LD   (iy+3),d   
0865   C3 2E 05               JP   blockEnd   
0868                             ; 
0868                             ; 
0868                             ; 
0868                             ; 
0868                FILTER:      
0868                MAP:         
0868                SCAN:        
0868   DD E9                  JP   (ix)   
086A                             ; print decimal
086A                             ; hl = value
086A                PRTDEC:      
086A   CB 7C                  BIT   7,h   
086C   28 0B                  JR   z,prtdec0   
086E   3E 2D                  LD   a,"-"   
0870   CD 85 00               CALL   putchar   
0873   AF                     XOR   a   
0874   95                     SUB   l   
0875   6F                     LD   l,a   
0876   9F                     SBC   a,a   
0877   94                     SUB   h   
0878   67                     LD   h,a   
0879                PRTDEC0:      
0879   C5                     PUSH   bc   
087A   0E 00                  LD   c,0   ; leading zeros flag = false
087C   11 F0 D8               LD   de,-10000   
087F   CD 9B 08               CALL   prtdec1   
0882   11 18 FC               LD   de,-1000   
0885   CD 9B 08               CALL   prtdec1   
0888   11 9C FF               LD   de,-100   
088B   CD 9B 08               CALL   prtdec1   
088E   1E F6                  LD   e,-10   
0890   CD 9B 08               CALL   prtdec1   
0893   0C                     INC   c   ; flag = true for at least digit
0894   1E FF                  LD   e,-1   
0896   CD 9B 08               CALL   prtdec1   
0899   C1                     POP   bc   
089A   C9                     RET      
089B                PRTDEC1:      
089B   06 2F                  LD   b,"0"-1   
089D                PRTDEC2:      
089D   04                     INC   b   
089E   19                     ADD   hl,de   
089F   38 FC                  JR   c,prtdec2   
08A1   ED 52                  SBC   hl,de   
08A3   3E 30                  LD   a,"0"   
08A5   B8                     CP   b   
08A6   20 05                  JR   nz,prtdec3   
08A8   AF                     XOR   a   
08A9   B1                     OR   c   
08AA   C8                     RET   z   
08AB   18 01                  JR   prtdec4   
08AD                PRTDEC3:      
08AD   0C                     INC   c   
08AE                PRTDEC4:      
08AE   78                     LD   a,b   
08AF   C3 85 00               JP   putchar   
08B2                PRTHEX:      ; display hl as a 16-bit number in hex.
08B2   C5                     PUSH   bc   ; preserve the IP
08B3   7C                     LD   a,h   
08B4   CD BD 08               CALL   prthex2   
08B7   7D                     LD   a,l   
08B8   CD BD 08               CALL   prthex2   
08BB   C1                     POP   bc   
08BC   C9                     RET      
08BD                PRTHEX2:      
08BD   4F                     LD   c,a   
08BE   1F                     RRA      
08BF   1F                     RRA      
08C0   1F                     RRA      
08C1   1F                     RRA      
08C2   CD C6 08               CALL   prthex3   
08C5   79                     LD   a,c   
08C6                PRTHEX3:      
08C6   E6 0F                  AND   0x0F   
08C8   C6 90                  ADD   a,0x90   
08CA   27                     DAA      
08CB   CE 40                  ADC   a,0x40   
08CD   27                     DAA      
08CE   C3 85 00               JP   putchar   
08D1                PRTSTR0:      
08D1   CD 85 00               CALL   putchar   
08D4   23                     INC   hl   
08D5                PRTSTR:      
08D5   7E                     LD   a,(hl)   
08D6   B7                     OR   a   
08D7   20 F8                  JR   nz,prtstr0   
08D9   C9                     RET      
08DA                             ; **************************************************************************
08DA                             ; calculate nesting value
08DA                             ; a is char to be tested,
08DA                             ; e is the nesting value (initially 0)
08DA                             ; e is increased by ( and [
08DA                             ; e is decreased by ) and ]
08DA                             ; e has its bit 7 toggled by `
08DA                             ; limited to 127 levels
08DA                             ; **************************************************************************
08DA                NESTING:      
08DA   FE 22                  CP   DQUOTE   ; quote char
08DC   28 06                  JR   z,nesting0   
08DE   FE 60                  CP   "`"   ; quote char
08E0   28 02                  JR   z,nesting0   
08E2   18 0A                  JR   nesting1   
08E4                NESTING0:      
08E4   CB 7B                  BIT   7,e   
08E6   28 03                  JR   z,nesting1a   
08E8   CB BB                  RES   7,e   
08EA   C9                     RET      
08EB                NESTING1A:      
08EB   CB FB                  SET   7,e   
08ED   C9                     RET      
08EE                NESTING1:      
08EE   CB 7B                  BIT   7,e   
08F0   C0                     RET   nz   
08F1   FE 7B                  CP   "{"   
08F3   28 08                  JR   z,nesting2   
08F5   FE 5B                  CP   "["   
08F7   28 04                  JR   z,nesting2   
08F9   FE 28                  CP   "("   
08FB   20 02                  JR   nz,nesting3   
08FD                NESTING2:      
08FD   1C                     INC   e   
08FE   C9                     RET      
08FF                NESTING3:      
08FF   FE 7D                  CP   "}"   
0901   28 07                  JR   z,nesting4   
0903   FE 5D                  CP   "]"   
0905   28 03                  JR   z,nesting4   
0907   FE 29                  CP   ")"   
0909   C0                     RET   nz   
090A                NESTING4:      
090A   1D                     DEC   e   
090B   C9                     RET      
090C                PROMPT:      
090C   CD 1C 09               CALL   printStr   
090F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0914   C9                     RET      
0915                CRLF:        
0915   CD 1C 09               CALL   printStr   
0918   0D 0A 00               .CSTR   "\r\n"   
091B   C9                     RET      
091C                             ; prints a null teminated string
091C                             ; the string should be immedaitely following the call
091C                PRINTSTR:      
091C   E3                     EX   (sp),hl   ; swap			
091D   CD D5 08               CALL   prtstr   
0920   23                     INC   hl   ; inc past NUL
0921   E3                     EX   (sp),hl   ; put it back	
0922   C9                     RET      
0923                             ; push contents of array on stack
0923                             ; hl = array*
0923                PUSHARRAY:      
0923   ED 43 F8 38            LD   (vTemp1),bc   ; save IP
0927   2B                     DEC   hl   ; bc = count
0928   46                     LD   b,(hl)   
0929   2B                     DEC   hl   
092A   4E                     LD   c,(hl)   
092B   23                     INC   hl   ; push each item on stack
092C   23                     INC   hl   
092D   18 06                  JR   pushArray2   
092F                PUSHARRAY1:      
092F   5E                     LD   e,(hl)   
0930   23                     INC   hl   
0931   56                     LD   d,(hl)   
0932   23                     INC   hl   
0933   D5                     PUSH   de   
0934   0B                     DEC   bc   
0935                PUSHARRAY2:      
0935   79                     LD   a,c   
0936   B0                     OR   b   
0937   20 F6                  JR   nz,pushArray1   
0939   ED 4B F8 38            LD   bc,(vTemp1)   ; restore IP
093D   C9                     RET      
093E                INIT:        
093E   DD 2A EA 38            LD   ix,(vNext)   
0942   FD 21 80 37            LD   iy,STACK   
0946   21 80 01               LD   hl,isysVars   
0949   11 E6 38               LD   de,sysVars   
094C   01 10 00               LD   bc,8 * 2   
094F   ED B0                  LDIR      
0951   21 00 38               LD   hl,vars   ; 52 vars LO HI
0954   06 34                  LD   b,26*2   
0956   AF                     XOR   a   
0957                INIT0:       
0957   77                     LD   (hl),a   
0958   23                     INC   hl   
0959   10 FC                  DJNZ   init0   
095B   C9                     RET      
095C                START:       
095C   31 80 37               LD   sp,STACK   ; start of monty
095F   CD 3E 09               CALL   init   ; setups
0962   CD 1C 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0965   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0972                INTERPRET:      
0972   CD 0C 09               CALL   prompt   
0975   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0978   ED 43 E8 38            LD   (vTIBPtr),bc   
097C                INTERPRET2:      ; calc nesting (a macro might have changed it)
097C   1E 00                  LD   e,0   ; initilize nesting value
097E   C5                     PUSH   bc   ; save offset into TIB,
097F                             ; bc is also the count of chars in TIB
097F   21 00 39               LD   hl,TIB   ; hl is start of TIB
0982   18 06                  JR   interpret4   
0984                INTERPRET3:      
0984   7E                     LD   a,(hl)   ; a = char in TIB
0985   23                     INC   hl   ; inc pointer into TIB
0986   0B                     DEC   bc   ; dec count of chars in TIB
0987   CD DA 08               CALL   nesting   ; update nesting value
098A                INTERPRET4:      
098A   79                     LD   a,c   ; is count zero?
098B   B0                     OR   b   
098C   20 F6                  JR   nz,interpret3   ; if not loop
098E   C1                     POP   bc   ; restore offset into TIB
098F                INTERPRET5:      
098F   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0992   FE 20                  CP   $20   ; compare to space
0994   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0996   FE 00                  CP   $0   ; is it end of string? NUL end of string
0998                             ; ???? NEEDED?
0998   28 27                  JR   z,interpret8   
099A   FE 0D                  CP   "\r"   ; carriage return? ascii 13
099C   28 10                  JR   z,interpret7   ; if anything else its macro/control
099E                             ; macro
099E                             ;  ld (vTIBPtr),bc
099E                             ;  ld hl,ctrlCodes
099E                             ;  add a,l			            ; look up key of macros
099E                             ;  ld l,a
099E                             ;  ld e,(hl)
099E                             ;  ld a,e
099E                             ;  or a
099E                             ;  jr z,macro1
099E                             ;  ld d,msb(macros)
099E                             ;  push de
099E                             ;  call call		            ; monty exec_ operation and jump to it
099E                             ;  db DC1,0
099E                             ; macro1:
099E                             ;  ld bc,(vTIBPtr)
099E   18 DC                  JR   interpret2   
09A0                INTERPRET6:      
09A0   21 00 39               LD   hl,TIB   
09A3   09                     ADD   hl,bc   
09A4   77                     LD   (hl),a   ; store the character in textbuf
09A5   03                     INC   bc   
09A6   CD 85 00               CALL   putchar   ; echo character to screen
09A9   CD DA 08               CALL   nesting   
09AC   18 E1                  JR   interpret5   ; wait for next character
09AE                INTERPRET7:      
09AE   21 00 39               LD   hl,TIB   
09B1   09                     ADD   hl,bc   
09B2   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09B4   23                     INC   hl   
09B5   36 0A                  LD   (hl),"\n"   
09B7   23                     INC   hl   
09B8   03                     INC   bc   
09B9   03                     INC   bc   
09BA   CD 15 09               CALL   crlf   ; echo character to screen
09BD   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09BE   B7                     OR   a   
09BF   20 CE                  JR   nz,interpret5   
09C1                INTERPRET8:      
09C1   ED 43 E8 38            LD   (vTIBPtr),bc   
09C5   01 00 39               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09C8                             ; we pressed enter
09C8   0B                     DEC   bc   
09C9                NEXT:        
09C9   03                     INC   bc   ; Increment the IP
09CA   0A                     LD   a,(bc)   ; Get the next character and dispatch
09CB   FE 20                  CP   " "   ; whitespace?
09CD   28 FA                  JR   z,next   ; space? ignore
09CF   38 07                  JR   c,next1   
09D1   6F                     LD   l,a   ; index into table
09D2   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09D4   6E                     LD   l,(hl)   ; get low jump address
09D5   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09D7   E9                     JP   (hl)   ; Jump to routine
09D8                NEXT1:       
09D8   FE 00                  CP   NUL   ; end of input string?
09DA   28 03                  JR   z,exit_   
09DC   C3 72 09               JP   interpret   ; no, other whitespace, macros?
09DF                EXIT_:       
09DF   60 69                  LD   hl,bc   
09E1   E9                     JP   (hl)   
09E2                ERROR:       
09E2   CD 1C 09               CALL   printStr   
09E5   45 72 72 6F 72 20 00   .CSTR   "Error "   
09EC   CD 6A 08               CALL   prtdec   
09EF   C3 72 09               JP   interpret   
09F2                          ALIGN   $100   
0A00                TESTSSTART:      
0A00                             ; call printStr
0A00                             ; .cstr "Done!"
0A00                             ; HALT
0A00                             ; 
0A00                          ;*Macro unroll:  test "\\F", false
0A00   31 80 37               LD   SP,STACK   
0A03   CD 3E 09               CALL   init   
0A06   CD 8E 36               CALL   execStr   
0A09   5C 46 00               .CSTR   "\\F"   
0A0C                          ;*Macro unroll:  expect "\\F",false
0A0C   E1                     POP   HL   
0A0D   E5                     PUSH   HL   
0A0E   11 00 00               LD   DE,false   
0A11   B7                     OR   A   
0A12   ED 52                  SBC   HL,DE   
0A14   7D                     LD   A,L   
0A15   B4                     OR   H   
0A16   28 4D                  JR   Z,expectM_0_2080S43   
0A18   CD 1C 09               CALL   printStr   
0A1B   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0A24   CD 1C 09               CALL   printStr   
0A27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0A36   21 00 00               LD   HL,false   
0A39   CD 6A 08               CALL   prtdec   
0A3C   CD 1C 09               CALL   printStr   
0A3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0A4C   E1                     POP   hl   
0A4D   E5                     PUSH   hl   
0A4E   CD 6A 08               CALL   prtdec   
0A51   E1                     POP   hl   
0A52   CD 1C 09               CALL   printStr   
0A55   20 28 23 00            .CSTR   " (#"   
0A59   CD B2 08               CALL   prthex   
0A5C   CD 1C 09               CALL   printStr   
0A5F   29 0D 0A 00            .CSTR   ")\r\n"   
0A63   76                     HALT      
0A64   00                     .CSTR      
0A65                EXPECTM_0_2080S43:      
0A65   E1                     POP   HL   
0A66                          ;*Macro unroll:  test "\\T", true
0A66   31 80 37               LD   SP,STACK   
0A69   CD 3E 09               CALL   init   
0A6C   CD 8E 36               CALL   execStr   
0A6F   5C 54 00               .CSTR   "\\T"   
0A72                          ;*Macro unroll:  expect "\\T",true
0A72   E1                     POP   HL   
0A73   E5                     PUSH   HL   
0A74   11 FF FF               LD   DE,true   
0A77   B7                     OR   A   
0A78   ED 52                  SBC   HL,DE   
0A7A   7D                     LD   A,L   
0A7B   B4                     OR   H   
0A7C   28 4D                  JR   Z,expectM_0_2081S43   
0A7E   CD 1C 09               CALL   printStr   
0A81   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0A8A   CD 1C 09               CALL   printStr   
0A8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0A9C   21 FF FF               LD   HL,true   
0A9F   CD 6A 08               CALL   prtdec   
0AA2   CD 1C 09               CALL   printStr   
0AA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0AB2   E1                     POP   hl   
0AB3   E5                     PUSH   hl   
0AB4   CD 6A 08               CALL   prtdec   
0AB7   E1                     POP   hl   
0AB8   CD 1C 09               CALL   printStr   
0ABB   20 28 23 00            .CSTR   " (#"   
0ABF   CD B2 08               CALL   prthex   
0AC2   CD 1C 09               CALL   printStr   
0AC5   29 0D 0A 00            .CSTR   ")\r\n"   
0AC9   76                     HALT      
0ACA   00                     .CSTR      
0ACB                EXPECTM_0_2081S43:      
0ACB   E1                     POP   HL   
0ACC                          ;*Macro unroll:  test "1", 1
0ACC   31 80 37               LD   SP,STACK   
0ACF   CD 3E 09               CALL   init   
0AD2   CD 8E 36               CALL   execStr   
0AD5   31 00                  .CSTR   "1"   
0AD7                          ;*Macro unroll:  expect "1",1
0AD7   E1                     POP   HL   
0AD8   E5                     PUSH   HL   
0AD9   11 01 00               LD   DE,1   
0ADC   B7                     OR   A   
0ADD   ED 52                  SBC   HL,DE   
0ADF   7D                     LD   A,L   
0AE0   B4                     OR   H   
0AE1   28 4C                  JR   Z,expectM_0_2082S43   
0AE3   CD 1C 09               CALL   printStr   
0AE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0AEE   CD 1C 09               CALL   printStr   
0AF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B00   21 01 00               LD   HL,1   
0B03   CD 6A 08               CALL   prtdec   
0B06   CD 1C 09               CALL   printStr   
0B09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B16   E1                     POP   hl   
0B17   E5                     PUSH   hl   
0B18   CD 6A 08               CALL   prtdec   
0B1B   E1                     POP   hl   
0B1C   CD 1C 09               CALL   printStr   
0B1F   20 28 23 00            .CSTR   " (#"   
0B23   CD B2 08               CALL   prthex   
0B26   CD 1C 09               CALL   printStr   
0B29   29 0D 0A 00            .CSTR   ")\r\n"   
0B2D   76                     HALT      
0B2E   00                     .CSTR      
0B2F                EXPECTM_0_2082S43:      
0B2F   E1                     POP   HL   
0B30                          ;*Macro unroll:  test "2", 2
0B30   31 80 37               LD   SP,STACK   
0B33   CD 3E 09               CALL   init   
0B36   CD 8E 36               CALL   execStr   
0B39   32 00                  .CSTR   "2"   
0B3B                          ;*Macro unroll:  expect "2",2
0B3B   E1                     POP   HL   
0B3C   E5                     PUSH   HL   
0B3D   11 02 00               LD   DE,2   
0B40   B7                     OR   A   
0B41   ED 52                  SBC   HL,DE   
0B43   7D                     LD   A,L   
0B44   B4                     OR   H   
0B45   28 4C                  JR   Z,expectM_0_2083S43   
0B47   CD 1C 09               CALL   printStr   
0B4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0B52   CD 1C 09               CALL   printStr   
0B55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B64   21 02 00               LD   HL,2   
0B67   CD 6A 08               CALL   prtdec   
0B6A   CD 1C 09               CALL   printStr   
0B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B7A   E1                     POP   hl   
0B7B   E5                     PUSH   hl   
0B7C   CD 6A 08               CALL   prtdec   
0B7F   E1                     POP   hl   
0B80   CD 1C 09               CALL   printStr   
0B83   20 28 23 00            .CSTR   " (#"   
0B87   CD B2 08               CALL   prthex   
0B8A   CD 1C 09               CALL   printStr   
0B8D   29 0D 0A 00            .CSTR   ")\r\n"   
0B91   76                     HALT      
0B92   00                     .CSTR      
0B93                EXPECTM_0_2083S43:      
0B93   E1                     POP   HL   
0B94                          ;*Macro unroll:  test "1", 1
0B94   31 80 37               LD   SP,STACK   
0B97   CD 3E 09               CALL   init   
0B9A   CD 8E 36               CALL   execStr   
0B9D   31 00                  .CSTR   "1"   
0B9F                          ;*Macro unroll:  expect "1",1
0B9F   E1                     POP   HL   
0BA0   E5                     PUSH   HL   
0BA1   11 01 00               LD   DE,1   
0BA4   B7                     OR   A   
0BA5   ED 52                  SBC   HL,DE   
0BA7   7D                     LD   A,L   
0BA8   B4                     OR   H   
0BA9   28 4C                  JR   Z,expectM_0_2084S43   
0BAB   CD 1C 09               CALL   printStr   
0BAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BB6   CD 1C 09               CALL   printStr   
0BB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BC8   21 01 00               LD   HL,1   
0BCB   CD 6A 08               CALL   prtdec   
0BCE   CD 1C 09               CALL   printStr   
0BD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BDE   E1                     POP   hl   
0BDF   E5                     PUSH   hl   
0BE0   CD 6A 08               CALL   prtdec   
0BE3   E1                     POP   hl   
0BE4   CD 1C 09               CALL   printStr   
0BE7   20 28 23 00            .CSTR   " (#"   
0BEB   CD B2 08               CALL   prthex   
0BEE   CD 1C 09               CALL   printStr   
0BF1   29 0D 0A 00            .CSTR   ")\r\n"   
0BF5   76                     HALT      
0BF6   00                     .CSTR      
0BF7                EXPECTM_0_2084S43:      
0BF7   E1                     POP   HL   
0BF8                          ;*Macro unroll:  test "0", 0
0BF8   31 80 37               LD   SP,STACK   
0BFB   CD 3E 09               CALL   init   
0BFE   CD 8E 36               CALL   execStr   
0C01   30 00                  .CSTR   "0"   
0C03                          ;*Macro unroll:  expect "0",0
0C03   E1                     POP   HL   
0C04   E5                     PUSH   HL   
0C05   11 00 00               LD   DE,0   
0C08   B7                     OR   A   
0C09   ED 52                  SBC   HL,DE   
0C0B   7D                     LD   A,L   
0C0C   B4                     OR   H   
0C0D   28 4C                  JR   Z,expectM_0_2085S43   
0C0F   CD 1C 09               CALL   printStr   
0C12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0C1A   CD 1C 09               CALL   printStr   
0C1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C2C   21 00 00               LD   HL,0   
0C2F   CD 6A 08               CALL   prtdec   
0C32   CD 1C 09               CALL   printStr   
0C35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C42   E1                     POP   hl   
0C43   E5                     PUSH   hl   
0C44   CD 6A 08               CALL   prtdec   
0C47   E1                     POP   hl   
0C48   CD 1C 09               CALL   printStr   
0C4B   20 28 23 00            .CSTR   " (#"   
0C4F   CD B2 08               CALL   prthex   
0C52   CD 1C 09               CALL   printStr   
0C55   29 0D 0A 00            .CSTR   ")\r\n"   
0C59   76                     HALT      
0C5A   00                     .CSTR      
0C5B                EXPECTM_0_2085S43:      
0C5B   E1                     POP   HL   
0C5C                          ;*Macro unroll:  test "10", 10
0C5C   31 80 37               LD   SP,STACK   
0C5F   CD 3E 09               CALL   init   
0C62   CD 8E 36               CALL   execStr   
0C65   31 30 00               .CSTR   "10"   
0C68                          ;*Macro unroll:  expect "10",10
0C68   E1                     POP   HL   
0C69   E5                     PUSH   HL   
0C6A   11 0A 00               LD   DE,10   
0C6D   B7                     OR   A   
0C6E   ED 52                  SBC   HL,DE   
0C70   7D                     LD   A,L   
0C71   B4                     OR   H   
0C72   28 4D                  JR   Z,expectM_0_2086S43   
0C74   CD 1C 09               CALL   printStr   
0C77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0C80   CD 1C 09               CALL   printStr   
0C83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C92   21 0A 00               LD   HL,10   
0C95   CD 6A 08               CALL   prtdec   
0C98   CD 1C 09               CALL   printStr   
0C9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CA8   E1                     POP   hl   
0CA9   E5                     PUSH   hl   
0CAA   CD 6A 08               CALL   prtdec   
0CAD   E1                     POP   hl   
0CAE   CD 1C 09               CALL   printStr   
0CB1   20 28 23 00            .CSTR   " (#"   
0CB5   CD B2 08               CALL   prthex   
0CB8   CD 1C 09               CALL   printStr   
0CBB   29 0D 0A 00            .CSTR   ")\r\n"   
0CBF   76                     HALT      
0CC0   00                     .CSTR      
0CC1                EXPECTM_0_2086S43:      
0CC1   E1                     POP   HL   
0CC2                          ;*Macro unroll:  test "123", 123
0CC2   31 80 37               LD   SP,STACK   
0CC5   CD 3E 09               CALL   init   
0CC8   CD 8E 36               CALL   execStr   
0CCB   31 32 33 00            .CSTR   "123"   
0CCF                          ;*Macro unroll:  expect "123",123
0CCF   E1                     POP   HL   
0CD0   E5                     PUSH   HL   
0CD1   11 7B 00               LD   DE,123   
0CD4   B7                     OR   A   
0CD5   ED 52                  SBC   HL,DE   
0CD7   7D                     LD   A,L   
0CD8   B4                     OR   H   
0CD9   28 4E                  JR   Z,expectM_0_2087S43   
0CDB   CD 1C 09               CALL   printStr   
0CDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0CE8   CD 1C 09               CALL   printStr   
0CEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CFA   21 7B 00               LD   HL,123   
0CFD   CD 6A 08               CALL   prtdec   
0D00   CD 1C 09               CALL   printStr   
0D03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D10   E1                     POP   hl   
0D11   E5                     PUSH   hl   
0D12   CD 6A 08               CALL   prtdec   
0D15   E1                     POP   hl   
0D16   CD 1C 09               CALL   printStr   
0D19   20 28 23 00            .CSTR   " (#"   
0D1D   CD B2 08               CALL   prthex   
0D20   CD 1C 09               CALL   printStr   
0D23   29 0D 0A 00            .CSTR   ")\r\n"   
0D27   76                     HALT      
0D28   00                     .CSTR      
0D29                EXPECTM_0_2087S43:      
0D29   E1                     POP   HL   
0D2A                          ;*Macro unroll:  test "-1",-1
0D2A   31 80 37               LD   SP,STACK   
0D2D   CD 3E 09               CALL   init   
0D30   CD 8E 36               CALL   execStr   
0D33   2D 31 00               .CSTR   "-1"   
0D36                          ;*Macro unroll:  expect "-1",-1
0D36   E1                     POP   HL   
0D37   E5                     PUSH   HL   
0D38   11 FF FF               LD   DE,-1   
0D3B   B7                     OR   A   
0D3C   ED 52                  SBC   HL,DE   
0D3E   7D                     LD   A,L   
0D3F   B4                     OR   H   
0D40   28 4D                  JR   Z,expectM_0_2088S43   
0D42   CD 1C 09               CALL   printStr   
0D45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0D4E   CD 1C 09               CALL   printStr   
0D51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D60   21 FF FF               LD   HL,-1   
0D63   CD 6A 08               CALL   prtdec   
0D66   CD 1C 09               CALL   printStr   
0D69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D76   E1                     POP   hl   
0D77   E5                     PUSH   hl   
0D78   CD 6A 08               CALL   prtdec   
0D7B   E1                     POP   hl   
0D7C   CD 1C 09               CALL   printStr   
0D7F   20 28 23 00            .CSTR   " (#"   
0D83   CD B2 08               CALL   prthex   
0D86   CD 1C 09               CALL   printStr   
0D89   29 0D 0A 00            .CSTR   ")\r\n"   
0D8D   76                     HALT      
0D8E   00                     .CSTR      
0D8F                EXPECTM_0_2088S43:      
0D8F   E1                     POP   HL   
0D90                          ;*Macro unroll:  test "''", 0
0D90   31 80 37               LD   SP,STACK   
0D93   CD 3E 09               CALL   init   
0D96   CD 8E 36               CALL   execStr   
0D99   27 27 00               .CSTR   "''"   
0D9C                          ;*Macro unroll:  expect "''",0
0D9C   E1                     POP   HL   
0D9D   E5                     PUSH   HL   
0D9E   11 00 00               LD   DE,0   
0DA1   B7                     OR   A   
0DA2   ED 52                  SBC   HL,DE   
0DA4   7D                     LD   A,L   
0DA5   B4                     OR   H   
0DA6   28 4D                  JR   Z,expectM_0_2089S43   
0DA8   CD 1C 09               CALL   printStr   
0DAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0DB4   CD 1C 09               CALL   printStr   
0DB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DC6   21 00 00               LD   HL,0   
0DC9   CD 6A 08               CALL   prtdec   
0DCC   CD 1C 09               CALL   printStr   
0DCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DDC   E1                     POP   hl   
0DDD   E5                     PUSH   hl   
0DDE   CD 6A 08               CALL   prtdec   
0DE1   E1                     POP   hl   
0DE2   CD 1C 09               CALL   printStr   
0DE5   20 28 23 00            .CSTR   " (#"   
0DE9   CD B2 08               CALL   prthex   
0DEC   CD 1C 09               CALL   printStr   
0DEF   29 0D 0A 00            .CSTR   ")\r\n"   
0DF3   76                     HALT      
0DF4   00                     .CSTR      
0DF5                EXPECTM_0_2089S43:      
0DF5   E1                     POP   HL   
0DF6                          ;*Macro unroll:  test "'a'", $61
0DF6   31 80 37               LD   SP,STACK   
0DF9   CD 3E 09               CALL   init   
0DFC   CD 8E 36               CALL   execStr   
0DFF   27 61 27 00            .CSTR   "'a'"   
0E03                          ;*Macro unroll:  expect "'a'",$61
0E03   E1                     POP   HL   
0E04   E5                     PUSH   HL   
0E05   11 61 00               LD   DE,$61   
0E08   B7                     OR   A   
0E09   ED 52                  SBC   HL,DE   
0E0B   7D                     LD   A,L   
0E0C   B4                     OR   H   
0E0D   28 4E                  JR   Z,expectM_0_2090S43   
0E0F   CD 1C 09               CALL   printStr   
0E12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0E1C   CD 1C 09               CALL   printStr   
0E1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E2E   21 61 00               LD   HL,$61   
0E31   CD 6A 08               CALL   prtdec   
0E34   CD 1C 09               CALL   printStr   
0E37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E44   E1                     POP   hl   
0E45   E5                     PUSH   hl   
0E46   CD 6A 08               CALL   prtdec   
0E49   E1                     POP   hl   
0E4A   CD 1C 09               CALL   printStr   
0E4D   20 28 23 00            .CSTR   " (#"   
0E51   CD B2 08               CALL   prthex   
0E54   CD 1C 09               CALL   printStr   
0E57   29 0D 0A 00            .CSTR   ")\r\n"   
0E5B   76                     HALT      
0E5C   00                     .CSTR      
0E5D                EXPECTM_0_2090S43:      
0E5D   E1                     POP   HL   
0E5E                          ;*Macro unroll:  test "'\\''", $27
0E5E   31 80 37               LD   SP,STACK   
0E61   CD 3E 09               CALL   init   
0E64   CD 8E 36               CALL   execStr   
0E67   27 5C 27 27 00         .CSTR   "'\\''"   
0E6C                          ;*Macro unroll:  expect "'\\''",$27
0E6C   E1                     POP   HL   
0E6D   E5                     PUSH   HL   
0E6E   11 27 00               LD   DE,$27   
0E71   B7                     OR   A   
0E72   ED 52                  SBC   HL,DE   
0E74   7D                     LD   A,L   
0E75   B4                     OR   H   
0E76   28 4F                  JR   Z,expectM_0_2091S43   
0E78   CD 1C 09               CALL   printStr   
0E7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0E86   CD 1C 09               CALL   printStr   
0E89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E98   21 27 00               LD   HL,$27   
0E9B   CD 6A 08               CALL   prtdec   
0E9E   CD 1C 09               CALL   printStr   
0EA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EAE   E1                     POP   hl   
0EAF   E5                     PUSH   hl   
0EB0   CD 6A 08               CALL   prtdec   
0EB3   E1                     POP   hl   
0EB4   CD 1C 09               CALL   printStr   
0EB7   20 28 23 00            .CSTR   " (#"   
0EBB   CD B2 08               CALL   prthex   
0EBE   CD 1C 09               CALL   printStr   
0EC1   29 0D 0A 00            .CSTR   ")\r\n"   
0EC5   76                     HALT      
0EC6   00                     .CSTR      
0EC7                EXPECTM_0_2091S43:      
0EC7   E1                     POP   HL   
0EC8                          ;*Macro unroll:  test "#10", $10
0EC8   31 80 37               LD   SP,STACK   
0ECB   CD 3E 09               CALL   init   
0ECE   CD 8E 36               CALL   execStr   
0ED1   23 31 30 00            .CSTR   "#10"   
0ED5                          ;*Macro unroll:  expect "#10",$10
0ED5   E1                     POP   HL   
0ED6   E5                     PUSH   HL   
0ED7   11 10 00               LD   DE,$10   
0EDA   B7                     OR   A   
0EDB   ED 52                  SBC   HL,DE   
0EDD   7D                     LD   A,L   
0EDE   B4                     OR   H   
0EDF   28 4E                  JR   Z,expectM_0_2092S43   
0EE1   CD 1C 09               CALL   printStr   
0EE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0EEE   CD 1C 09               CALL   printStr   
0EF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F00   21 10 00               LD   HL,$10   
0F03   CD 6A 08               CALL   prtdec   
0F06   CD 1C 09               CALL   printStr   
0F09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F16   E1                     POP   hl   
0F17   E5                     PUSH   hl   
0F18   CD 6A 08               CALL   prtdec   
0F1B   E1                     POP   hl   
0F1C   CD 1C 09               CALL   printStr   
0F1F   20 28 23 00            .CSTR   " (#"   
0F23   CD B2 08               CALL   prthex   
0F26   CD 1C 09               CALL   printStr   
0F29   29 0D 0A 00            .CSTR   ")\r\n"   
0F2D   76                     HALT      
0F2E   00                     .CSTR      
0F2F                EXPECTM_0_2092S43:      
0F2F   E1                     POP   HL   
0F30                          ;*Macro unroll:  test "#FF", $FF
0F30   31 80 37               LD   SP,STACK   
0F33   CD 3E 09               CALL   init   
0F36   CD 8E 36               CALL   execStr   
0F39   23 46 46 00            .CSTR   "#FF"   
0F3D                          ;*Macro unroll:  expect "#FF",$FF
0F3D   E1                     POP   HL   
0F3E   E5                     PUSH   HL   
0F3F   11 FF 00               LD   DE,$FF   
0F42   B7                     OR   A   
0F43   ED 52                  SBC   HL,DE   
0F45   7D                     LD   A,L   
0F46   B4                     OR   H   
0F47   28 4E                  JR   Z,expectM_0_2093S43   
0F49   CD 1C 09               CALL   printStr   
0F4C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
0F56   CD 1C 09               CALL   printStr   
0F59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F68   21 FF 00               LD   HL,$FF   
0F6B   CD 6A 08               CALL   prtdec   
0F6E   CD 1C 09               CALL   printStr   
0F71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F7E   E1                     POP   hl   
0F7F   E5                     PUSH   hl   
0F80   CD 6A 08               CALL   prtdec   
0F83   E1                     POP   hl   
0F84   CD 1C 09               CALL   printStr   
0F87   20 28 23 00            .CSTR   " (#"   
0F8B   CD B2 08               CALL   prthex   
0F8E   CD 1C 09               CALL   printStr   
0F91   29 0D 0A 00            .CSTR   ")\r\n"   
0F95   76                     HALT      
0F96   00                     .CSTR      
0F97                EXPECTM_0_2093S43:      
0F97   E1                     POP   HL   
0F98                          ;*Macro unroll:  test "-1 2 +",1
0F98   31 80 37               LD   SP,STACK   
0F9B   CD 3E 09               CALL   init   
0F9E   CD 8E 36               CALL   execStr   
0FA1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
0FA8                          ;*Macro unroll:  expect "-1 2 +",1
0FA8   E1                     POP   HL   
0FA9   E5                     PUSH   HL   
0FAA   11 01 00               LD   DE,1   
0FAD   B7                     OR   A   
0FAE   ED 52                  SBC   HL,DE   
0FB0   7D                     LD   A,L   
0FB1   B4                     OR   H   
0FB2   28 51                  JR   Z,expectM_0_2094S43   
0FB4   CD 1C 09               CALL   printStr   
0FB7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
0FC4   CD 1C 09               CALL   printStr   
0FC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FD6   21 01 00               LD   HL,1   
0FD9   CD 6A 08               CALL   prtdec   
0FDC   CD 1C 09               CALL   printStr   
0FDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FEC   E1                     POP   hl   
0FED   E5                     PUSH   hl   
0FEE   CD 6A 08               CALL   prtdec   
0FF1   E1                     POP   hl   
0FF2   CD 1C 09               CALL   printStr   
0FF5   20 28 23 00            .CSTR   " (#"   
0FF9   CD B2 08               CALL   prthex   
0FFC   CD 1C 09               CALL   printStr   
0FFF   29 0D 0A 00            .CSTR   ")\r\n"   
1003   76                     HALT      
1004   00                     .CSTR      
1005                EXPECTM_0_2094S43:      
1005   E1                     POP   HL   
1006                          ;*Macro unroll:  test "-1 1 +",0
1006   31 80 37               LD   SP,STACK   
1009   CD 3E 09               CALL   init   
100C   CD 8E 36               CALL   execStr   
100F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1016                          ;*Macro unroll:  expect "-1 1 +",0
1016   E1                     POP   HL   
1017   E5                     PUSH   HL   
1018   11 00 00               LD   DE,0   
101B   B7                     OR   A   
101C   ED 52                  SBC   HL,DE   
101E   7D                     LD   A,L   
101F   B4                     OR   H   
1020   28 51                  JR   Z,expectM_0_2095S43   
1022   CD 1C 09               CALL   printStr   
1025   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1032   CD 1C 09               CALL   printStr   
1035   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1044   21 00 00               LD   HL,0   
1047   CD 6A 08               CALL   prtdec   
104A   CD 1C 09               CALL   printStr   
104D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
105A   E1                     POP   hl   
105B   E5                     PUSH   hl   
105C   CD 6A 08               CALL   prtdec   
105F   E1                     POP   hl   
1060   CD 1C 09               CALL   printStr   
1063   20 28 23 00            .CSTR   " (#"   
1067   CD B2 08               CALL   prthex   
106A   CD 1C 09               CALL   printStr   
106D   29 0D 0A 00            .CSTR   ")\r\n"   
1071   76                     HALT      
1072   00                     .CSTR      
1073                EXPECTM_0_2095S43:      
1073   E1                     POP   HL   
1074                          ;*Macro unroll:  test "1 2 +", 3
1074   31 80 37               LD   SP,STACK   
1077   CD 3E 09               CALL   init   
107A   CD 8E 36               CALL   execStr   
107D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1083                          ;*Macro unroll:  expect "1 2 +",3
1083   E1                     POP   HL   
1084   E5                     PUSH   HL   
1085   11 03 00               LD   DE,3   
1088   B7                     OR   A   
1089   ED 52                  SBC   HL,DE   
108B   7D                     LD   A,L   
108C   B4                     OR   H   
108D   28 50                  JR   Z,expectM_0_2096S43   
108F   CD 1C 09               CALL   printStr   
1092   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
109E   CD 1C 09               CALL   printStr   
10A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10B0   21 03 00               LD   HL,3   
10B3   CD 6A 08               CALL   prtdec   
10B6   CD 1C 09               CALL   printStr   
10B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10C6   E1                     POP   hl   
10C7   E5                     PUSH   hl   
10C8   CD 6A 08               CALL   prtdec   
10CB   E1                     POP   hl   
10CC   CD 1C 09               CALL   printStr   
10CF   20 28 23 00            .CSTR   " (#"   
10D3   CD B2 08               CALL   prthex   
10D6   CD 1C 09               CALL   printStr   
10D9   29 0D 0A 00            .CSTR   ")\r\n"   
10DD   76                     HALT      
10DE   00                     .CSTR      
10DF                EXPECTM_0_2096S43:      
10DF   E1                     POP   HL   
10E0                          ;*Macro unroll:  test "4 1 2 +", 3
10E0   31 80 37               LD   SP,STACK   
10E3   CD 3E 09               CALL   init   
10E6   CD 8E 36               CALL   execStr   
10E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
10F1                          ;*Macro unroll:  expect "4 1 2 +",3
10F1   E1                     POP   HL   
10F2   E5                     PUSH   HL   
10F3   11 03 00               LD   DE,3   
10F6   B7                     OR   A   
10F7   ED 52                  SBC   HL,DE   
10F9   7D                     LD   A,L   
10FA   B4                     OR   H   
10FB   28 52                  JR   Z,expectM_0_2097S43   
10FD   CD 1C 09               CALL   printStr   
1100   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
110E   CD 1C 09               CALL   printStr   
1111   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1120   21 03 00               LD   HL,3   
1123   CD 6A 08               CALL   prtdec   
1126   CD 1C 09               CALL   printStr   
1129   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1136   E1                     POP   hl   
1137   E5                     PUSH   hl   
1138   CD 6A 08               CALL   prtdec   
113B   E1                     POP   hl   
113C   CD 1C 09               CALL   printStr   
113F   20 28 23 00            .CSTR   " (#"   
1143   CD B2 08               CALL   prthex   
1146   CD 1C 09               CALL   printStr   
1149   29 0D 0A 00            .CSTR   ")\r\n"   
114D   76                     HALT      
114E   00                     .CSTR      
114F                EXPECTM_0_2097S43:      
114F   E1                     POP   HL   
1150                          ;*Macro unroll:  test "123 456 +", 123+456
1150   31 80 37               LD   SP,STACK   
1153   CD 3E 09               CALL   init   
1156   CD 8E 36               CALL   execStr   
1159   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1163                          ;*Macro unroll:  expect "123 456 +",123+456
1163   E1                     POP   HL   
1164   E5                     PUSH   HL   
1165   11 43 02               LD   DE,123+456   
1168   B7                     OR   A   
1169   ED 52                  SBC   HL,DE   
116B   7D                     LD   A,L   
116C   B4                     OR   H   
116D   28 54                  JR   Z,expectM_0_2098S43   
116F   CD 1C 09               CALL   printStr   
1172   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1182   CD 1C 09               CALL   printStr   
1185   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1194   21 43 02               LD   HL,123+456   
1197   CD 6A 08               CALL   prtdec   
119A   CD 1C 09               CALL   printStr   
119D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11AA   E1                     POP   hl   
11AB   E5                     PUSH   hl   
11AC   CD 6A 08               CALL   prtdec   
11AF   E1                     POP   hl   
11B0   CD 1C 09               CALL   printStr   
11B3   20 28 23 00            .CSTR   " (#"   
11B7   CD B2 08               CALL   prthex   
11BA   CD 1C 09               CALL   printStr   
11BD   29 0D 0A 00            .CSTR   ")\r\n"   
11C1   76                     HALT      
11C2   00                     .CSTR      
11C3                EXPECTM_0_2098S43:      
11C3   E1                     POP   HL   
11C4                          ;*Macro unroll:  test "64 128 +", 64+128
11C4   31 80 37               LD   SP,STACK   
11C7   CD 3E 09               CALL   init   
11CA   CD 8E 36               CALL   execStr   
11CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
11D6                          ;*Macro unroll:  expect "64 128 +",64+128
11D6   E1                     POP   HL   
11D7   E5                     PUSH   HL   
11D8   11 C0 00               LD   DE,64+128   
11DB   B7                     OR   A   
11DC   ED 52                  SBC   HL,DE   
11DE   7D                     LD   A,L   
11DF   B4                     OR   H   
11E0   28 53                  JR   Z,expectM_0_2099S43   
11E2   CD 1C 09               CALL   printStr   
11E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
11F4   CD 1C 09               CALL   printStr   
11F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1206   21 C0 00               LD   HL,64+128   
1209   CD 6A 08               CALL   prtdec   
120C   CD 1C 09               CALL   printStr   
120F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
121C   E1                     POP   hl   
121D   E5                     PUSH   hl   
121E   CD 6A 08               CALL   prtdec   
1221   E1                     POP   hl   
1222   CD 1C 09               CALL   printStr   
1225   20 28 23 00            .CSTR   " (#"   
1229   CD B2 08               CALL   prthex   
122C   CD 1C 09               CALL   printStr   
122F   29 0D 0A 00            .CSTR   ")\r\n"   
1233   76                     HALT      
1234   00                     .CSTR      
1235                EXPECTM_0_2099S43:      
1235   E1                     POP   HL   
1236                          ;*Macro unroll:  test "1 2 +", 3
1236   31 80 37               LD   SP,STACK   
1239   CD 3E 09               CALL   init   
123C   CD 8E 36               CALL   execStr   
123F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1245                          ;*Macro unroll:  expect "1 2 +",3
1245   E1                     POP   HL   
1246   E5                     PUSH   HL   
1247   11 03 00               LD   DE,3   
124A   B7                     OR   A   
124B   ED 52                  SBC   HL,DE   
124D   7D                     LD   A,L   
124E   B4                     OR   H   
124F   28 50                  JR   Z,expectM_0_2100S43   
1251   CD 1C 09               CALL   printStr   
1254   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1260   CD 1C 09               CALL   printStr   
1263   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1272   21 03 00               LD   HL,3   
1275   CD 6A 08               CALL   prtdec   
1278   CD 1C 09               CALL   printStr   
127B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1288   E1                     POP   hl   
1289   E5                     PUSH   hl   
128A   CD 6A 08               CALL   prtdec   
128D   E1                     POP   hl   
128E   CD 1C 09               CALL   printStr   
1291   20 28 23 00            .CSTR   " (#"   
1295   CD B2 08               CALL   prthex   
1298   CD 1C 09               CALL   printStr   
129B   29 0D 0A 00            .CSTR   ")\r\n"   
129F   76                     HALT      
12A0   00                     .CSTR      
12A1                EXPECTM_0_2100S43:      
12A1   E1                     POP   HL   
12A2                          ;*Macro unroll:  test "1 a= a++ a",2
12A2   31 80 37               LD   SP,STACK   
12A5   CD 3E 09               CALL   init   
12A8   CD 8E 36               CALL   execStr   
12AB   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
12B6                          ;*Macro unroll:  expect "1 a= a++ a",2
12B6   E1                     POP   HL   
12B7   E5                     PUSH   HL   
12B8   11 02 00               LD   DE,2   
12BB   B7                     OR   A   
12BC   ED 52                  SBC   HL,DE   
12BE   7D                     LD   A,L   
12BF   B4                     OR   H   
12C0   28 55                  JR   Z,expectM_0_2101S43   
12C2   CD 1C 09               CALL   printStr   
12C5   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
12D6   CD 1C 09               CALL   printStr   
12D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E8   21 02 00               LD   HL,2   
12EB   CD 6A 08               CALL   prtdec   
12EE   CD 1C 09               CALL   printStr   
12F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FE   E1                     POP   hl   
12FF   E5                     PUSH   hl   
1300   CD 6A 08               CALL   prtdec   
1303   E1                     POP   hl   
1304   CD 1C 09               CALL   printStr   
1307   20 28 23 00            .CSTR   " (#"   
130B   CD B2 08               CALL   prthex   
130E   CD 1C 09               CALL   printStr   
1311   29 0D 0A 00            .CSTR   ")\r\n"   
1315   76                     HALT      
1316   00                     .CSTR      
1317                EXPECTM_0_2101S43:      
1317   E1                     POP   HL   
1318                          ;*Macro unroll:  test "1 a= 2 a += a",3
1318   31 80 37               LD   SP,STACK   
131B   CD 3E 09               CALL   init   
131E   CD 8E 36               CALL   execStr   
1321   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
132F                          ;*Macro unroll:  expect "1 a= 2 a += a",3
132F   E1                     POP   HL   
1330   E5                     PUSH   HL   
1331   11 03 00               LD   DE,3   
1334   B7                     OR   A   
1335   ED 52                  SBC   HL,DE   
1337   7D                     LD   A,L   
1338   B4                     OR   H   
1339   28 58                  JR   Z,expectM_0_2102S43   
133B   CD 1C 09               CALL   printStr   
133E   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
1352   CD 1C 09               CALL   printStr   
1355   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1364   21 03 00               LD   HL,3   
1367   CD 6A 08               CALL   prtdec   
136A   CD 1C 09               CALL   printStr   
136D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
137A   E1                     POP   hl   
137B   E5                     PUSH   hl   
137C   CD 6A 08               CALL   prtdec   
137F   E1                     POP   hl   
1380   CD 1C 09               CALL   printStr   
1383   20 28 23 00            .CSTR   " (#"   
1387   CD B2 08               CALL   prthex   
138A   CD 1C 09               CALL   printStr   
138D   29 0D 0A 00            .CSTR   ")\r\n"   
1391   76                     HALT      
1392   00                     .CSTR      
1393                EXPECTM_0_2102S43:      
1393   E1                     POP   HL   
1394                          ;*Macro unroll:  test "-1 -1 -",0
1394   31 80 37               LD   SP,STACK   
1397   CD 3E 09               CALL   init   
139A   CD 8E 36               CALL   execStr   
139D   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
13A5                          ;*Macro unroll:  expect "-1 -1 -",0
13A5   E1                     POP   HL   
13A6   E5                     PUSH   HL   
13A7   11 00 00               LD   DE,0   
13AA   B7                     OR   A   
13AB   ED 52                  SBC   HL,DE   
13AD   7D                     LD   A,L   
13AE   B4                     OR   H   
13AF   28 52                  JR   Z,expectM_0_2103S43   
13B1   CD 1C 09               CALL   printStr   
13B4   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
13C2   CD 1C 09               CALL   printStr   
13C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D4   21 00 00               LD   HL,0   
13D7   CD 6A 08               CALL   prtdec   
13DA   CD 1C 09               CALL   printStr   
13DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EA   E1                     POP   hl   
13EB   E5                     PUSH   hl   
13EC   CD 6A 08               CALL   prtdec   
13EF   E1                     POP   hl   
13F0   CD 1C 09               CALL   printStr   
13F3   20 28 23 00            .CSTR   " (#"   
13F7   CD B2 08               CALL   prthex   
13FA   CD 1C 09               CALL   printStr   
13FD   29 0D 0A 00            .CSTR   ")\r\n"   
1401   76                     HALT      
1402   00                     .CSTR      
1403                EXPECTM_0_2103S43:      
1403   E1                     POP   HL   
1404                          ;*Macro unroll:  test "5 3 -", 2
1404   31 80 37               LD   SP,STACK   
1407   CD 3E 09               CALL   init   
140A   CD 8E 36               CALL   execStr   
140D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1413                          ;*Macro unroll:  expect "5 3 -",2
1413   E1                     POP   HL   
1414   E5                     PUSH   HL   
1415   11 02 00               LD   DE,2   
1418   B7                     OR   A   
1419   ED 52                  SBC   HL,DE   
141B   7D                     LD   A,L   
141C   B4                     OR   H   
141D   28 50                  JR   Z,expectM_0_2104S43   
141F   CD 1C 09               CALL   printStr   
1422   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
142E   CD 1C 09               CALL   printStr   
1431   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1440   21 02 00               LD   HL,2   
1443   CD 6A 08               CALL   prtdec   
1446   CD 1C 09               CALL   printStr   
1449   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1456   E1                     POP   hl   
1457   E5                     PUSH   hl   
1458   CD 6A 08               CALL   prtdec   
145B   E1                     POP   hl   
145C   CD 1C 09               CALL   printStr   
145F   20 28 23 00            .CSTR   " (#"   
1463   CD B2 08               CALL   prthex   
1466   CD 1C 09               CALL   printStr   
1469   29 0D 0A 00            .CSTR   ")\r\n"   
146D   76                     HALT      
146E   00                     .CSTR      
146F                EXPECTM_0_2104S43:      
146F   E1                     POP   HL   
1470                          ;*Macro unroll:  test "2 1 -",1
1470   31 80 37               LD   SP,STACK   
1473   CD 3E 09               CALL   init   
1476   CD 8E 36               CALL   execStr   
1479   32 20 31 20 2D 00      .CSTR   "2 1 -"   
147F                          ;*Macro unroll:  expect "2 1 -",1
147F   E1                     POP   HL   
1480   E5                     PUSH   HL   
1481   11 01 00               LD   DE,1   
1484   B7                     OR   A   
1485   ED 52                  SBC   HL,DE   
1487   7D                     LD   A,L   
1488   B4                     OR   H   
1489   28 50                  JR   Z,expectM_0_2105S43   
148B   CD 1C 09               CALL   printStr   
148E   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
149A   CD 1C 09               CALL   printStr   
149D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14AC   21 01 00               LD   HL,1   
14AF   CD 6A 08               CALL   prtdec   
14B2   CD 1C 09               CALL   printStr   
14B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14C2   E1                     POP   hl   
14C3   E5                     PUSH   hl   
14C4   CD 6A 08               CALL   prtdec   
14C7   E1                     POP   hl   
14C8   CD 1C 09               CALL   printStr   
14CB   20 28 23 00            .CSTR   " (#"   
14CF   CD B2 08               CALL   prthex   
14D2   CD 1C 09               CALL   printStr   
14D5   29 0D 0A 00            .CSTR   ")\r\n"   
14D9   76                     HALT      
14DA   00                     .CSTR      
14DB                EXPECTM_0_2105S43:      
14DB   E1                     POP   HL   
14DC                          ;*Macro unroll:  test "3 a= a-- a",2
14DC   31 80 37               LD   SP,STACK   
14DF   CD 3E 09               CALL   init   
14E2   CD 8E 36               CALL   execStr   
14E5   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
14F0                          ;*Macro unroll:  expect "3 a= a-- a",2
14F0   E1                     POP   HL   
14F1   E5                     PUSH   HL   
14F2   11 02 00               LD   DE,2   
14F5   B7                     OR   A   
14F6   ED 52                  SBC   HL,DE   
14F8   7D                     LD   A,L   
14F9   B4                     OR   H   
14FA   28 55                  JR   Z,expectM_0_2106S43   
14FC   CD 1C 09               CALL   printStr   
14FF   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
1510   CD 1C 09               CALL   printStr   
1513   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1522   21 02 00               LD   HL,2   
1525   CD 6A 08               CALL   prtdec   
1528   CD 1C 09               CALL   printStr   
152B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1538   E1                     POP   hl   
1539   E5                     PUSH   hl   
153A   CD 6A 08               CALL   prtdec   
153D   E1                     POP   hl   
153E   CD 1C 09               CALL   printStr   
1541   20 28 23 00            .CSTR   " (#"   
1545   CD B2 08               CALL   prthex   
1548   CD 1C 09               CALL   printStr   
154B   29 0D 0A 00            .CSTR   ")\r\n"   
154F   76                     HALT      
1550   00                     .CSTR      
1551                EXPECTM_0_2106S43:      
1551   E1                     POP   HL   
1552                          ;*Macro unroll:  test "4 a= a 2 -= a",2
1552   31 80 37               LD   SP,STACK   
1555   CD 3E 09               CALL   init   
1558   CD 8E 36               CALL   execStr   
155B   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
1569                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
1569   E1                     POP   HL   
156A   E5                     PUSH   HL   
156B   11 02 00               LD   DE,2   
156E   B7                     OR   A   
156F   ED 52                  SBC   HL,DE   
1571   7D                     LD   A,L   
1572   B4                     OR   H   
1573   28 58                  JR   Z,expectM_0_2107S43   
1575   CD 1C 09               CALL   printStr   
1578   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
158C   CD 1C 09               CALL   printStr   
158F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
159E   21 02 00               LD   HL,2   
15A1   CD 6A 08               CALL   prtdec   
15A4   CD 1C 09               CALL   printStr   
15A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15B4   E1                     POP   hl   
15B5   E5                     PUSH   hl   
15B6   CD 6A 08               CALL   prtdec   
15B9   E1                     POP   hl   
15BA   CD 1C 09               CALL   printStr   
15BD   20 28 23 00            .CSTR   " (#"   
15C1   CD B2 08               CALL   prthex   
15C4   CD 1C 09               CALL   printStr   
15C7   29 0D 0A 00            .CSTR   ")\r\n"   
15CB   76                     HALT      
15CC   00                     .CSTR      
15CD                EXPECTM_0_2107S43:      
15CD   E1                     POP   HL   
15CE                          ;*Macro unroll:  test "3 5 &", 1
15CE   31 80 37               LD   SP,STACK   
15D1   CD 3E 09               CALL   init   
15D4   CD 8E 36               CALL   execStr   
15D7   33 20 35 20 26 00      .CSTR   "3 5 &"   
15DD                          ;*Macro unroll:  expect "3 5 &",1
15DD   E1                     POP   HL   
15DE   E5                     PUSH   HL   
15DF   11 01 00               LD   DE,1   
15E2   B7                     OR   A   
15E3   ED 52                  SBC   HL,DE   
15E5   7D                     LD   A,L   
15E6   B4                     OR   H   
15E7   28 50                  JR   Z,expectM_0_2108S43   
15E9   CD 1C 09               CALL   printStr   
15EC   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
15F8   CD 1C 09               CALL   printStr   
15FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
160A   21 01 00               LD   HL,1   
160D   CD 6A 08               CALL   prtdec   
1610   CD 1C 09               CALL   printStr   
1613   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1620   E1                     POP   hl   
1621   E5                     PUSH   hl   
1622   CD 6A 08               CALL   prtdec   
1625   E1                     POP   hl   
1626   CD 1C 09               CALL   printStr   
1629   20 28 23 00            .CSTR   " (#"   
162D   CD B2 08               CALL   prthex   
1630   CD 1C 09               CALL   printStr   
1633   29 0D 0A 00            .CSTR   ")\r\n"   
1637   76                     HALT      
1638   00                     .CSTR      
1639                EXPECTM_0_2108S43:      
1639   E1                     POP   HL   
163A                          ;*Macro unroll:  test "3 5 |", 7
163A   31 80 37               LD   SP,STACK   
163D   CD 3E 09               CALL   init   
1640   CD 8E 36               CALL   execStr   
1643   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1649                          ;*Macro unroll:  expect "3 5 |",7
1649   E1                     POP   HL   
164A   E5                     PUSH   HL   
164B   11 07 00               LD   DE,7   
164E   B7                     OR   A   
164F   ED 52                  SBC   HL,DE   
1651   7D                     LD   A,L   
1652   B4                     OR   H   
1653   28 50                  JR   Z,expectM_0_2109S43   
1655   CD 1C 09               CALL   printStr   
1658   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1664   CD 1C 09               CALL   printStr   
1667   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1676   21 07 00               LD   HL,7   
1679   CD 6A 08               CALL   prtdec   
167C   CD 1C 09               CALL   printStr   
167F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
168C   E1                     POP   hl   
168D   E5                     PUSH   hl   
168E   CD 6A 08               CALL   prtdec   
1691   E1                     POP   hl   
1692   CD 1C 09               CALL   printStr   
1695   20 28 23 00            .CSTR   " (#"   
1699   CD B2 08               CALL   prthex   
169C   CD 1C 09               CALL   printStr   
169F   29 0D 0A 00            .CSTR   ")\r\n"   
16A3   76                     HALT      
16A4   00                     .CSTR      
16A5                EXPECTM_0_2109S43:      
16A5   E1                     POP   HL   
16A6                          ;*Macro unroll:  test "2 3 *", 6
16A6   31 80 37               LD   SP,STACK   
16A9   CD 3E 09               CALL   init   
16AC   CD 8E 36               CALL   execStr   
16AF   32 20 33 20 2A 00      .CSTR   "2 3 *"   
16B5                          ;*Macro unroll:  expect "2 3 *",6
16B5   E1                     POP   HL   
16B6   E5                     PUSH   HL   
16B7   11 06 00               LD   DE,6   
16BA   B7                     OR   A   
16BB   ED 52                  SBC   HL,DE   
16BD   7D                     LD   A,L   
16BE   B4                     OR   H   
16BF   28 50                  JR   Z,expectM_0_2110S43   
16C1   CD 1C 09               CALL   printStr   
16C4   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
16D0   CD 1C 09               CALL   printStr   
16D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16E2   21 06 00               LD   HL,6   
16E5   CD 6A 08               CALL   prtdec   
16E8   CD 1C 09               CALL   printStr   
16EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F8   E1                     POP   hl   
16F9   E5                     PUSH   hl   
16FA   CD 6A 08               CALL   prtdec   
16FD   E1                     POP   hl   
16FE   CD 1C 09               CALL   printStr   
1701   20 28 23 00            .CSTR   " (#"   
1705   CD B2 08               CALL   prthex   
1708   CD 1C 09               CALL   printStr   
170B   29 0D 0A 00            .CSTR   ")\r\n"   
170F   76                     HALT      
1710   00                     .CSTR      
1711                EXPECTM_0_2110S43:      
1711   E1                     POP   HL   
1712                          ;*Macro unroll:  test "3 x= 2 x *= x",6
1712   31 80 37               LD   SP,STACK   
1715   CD 3E 09               CALL   init   
1718   CD 8E 36               CALL   execStr   
171B   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1729                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1729   E1                     POP   HL   
172A   E5                     PUSH   HL   
172B   11 06 00               LD   DE,6   
172E   B7                     OR   A   
172F   ED 52                  SBC   HL,DE   
1731   7D                     LD   A,L   
1732   B4                     OR   H   
1733   28 58                  JR   Z,expectM_0_2111S43   
1735   CD 1C 09               CALL   printStr   
1738   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
174C   CD 1C 09               CALL   printStr   
174F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
175E   21 06 00               LD   HL,6   
1761   CD 6A 08               CALL   prtdec   
1764   CD 1C 09               CALL   printStr   
1767   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1774   E1                     POP   hl   
1775   E5                     PUSH   hl   
1776   CD 6A 08               CALL   prtdec   
1779   E1                     POP   hl   
177A   CD 1C 09               CALL   printStr   
177D   20 28 23 00            .CSTR   " (#"   
1781   CD B2 08               CALL   prthex   
1784   CD 1C 09               CALL   printStr   
1787   29 0D 0A 00            .CSTR   ")\r\n"   
178B   76                     HALT      
178C   00                     .CSTR      
178D                EXPECTM_0_2111S43:      
178D   E1                     POP   HL   
178E                          ;*Macro unroll:  test "1 2 3 + *", 5
178E   31 80 37               LD   SP,STACK   
1791   CD 3E 09               CALL   init   
1794   CD 8E 36               CALL   execStr   
1797   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
17A1                          ;*Macro unroll:  expect "1 2 3 + *",5
17A1   E1                     POP   HL   
17A2   E5                     PUSH   HL   
17A3   11 05 00               LD   DE,5   
17A6   B7                     OR   A   
17A7   ED 52                  SBC   HL,DE   
17A9   7D                     LD   A,L   
17AA   B4                     OR   H   
17AB   28 54                  JR   Z,expectM_0_2112S43   
17AD   CD 1C 09               CALL   printStr   
17B0   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
17C0   CD 1C 09               CALL   printStr   
17C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D2   21 05 00               LD   HL,5   
17D5   CD 6A 08               CALL   prtdec   
17D8   CD 1C 09               CALL   printStr   
17DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17E8   E1                     POP   hl   
17E9   E5                     PUSH   hl   
17EA   CD 6A 08               CALL   prtdec   
17ED   E1                     POP   hl   
17EE   CD 1C 09               CALL   printStr   
17F1   20 28 23 00            .CSTR   " (#"   
17F5   CD B2 08               CALL   prthex   
17F8   CD 1C 09               CALL   printStr   
17FB   29 0D 0A 00            .CSTR   ")\r\n"   
17FF   76                     HALT      
1800   00                     .CSTR      
1801                EXPECTM_0_2112S43:      
1801   E1                     POP   HL   
1802                          ;*Macro unroll:  test "7 3 /", 2
1802   31 80 37               LD   SP,STACK   
1805   CD 3E 09               CALL   init   
1808   CD 8E 36               CALL   execStr   
180B   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1811                          ;*Macro unroll:  expect "7 3 /",2
1811   E1                     POP   HL   
1812   E5                     PUSH   HL   
1813   11 02 00               LD   DE,2   
1816   B7                     OR   A   
1817   ED 52                  SBC   HL,DE   
1819   7D                     LD   A,L   
181A   B4                     OR   H   
181B   28 50                  JR   Z,expectM_0_2113S43   
181D   CD 1C 09               CALL   printStr   
1820   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
182C   CD 1C 09               CALL   printStr   
182F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
183E   21 02 00               LD   HL,2   
1841   CD 6A 08               CALL   prtdec   
1844   CD 1C 09               CALL   printStr   
1847   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1854   E1                     POP   hl   
1855   E5                     PUSH   hl   
1856   CD 6A 08               CALL   prtdec   
1859   E1                     POP   hl   
185A   CD 1C 09               CALL   printStr   
185D   20 28 23 00            .CSTR   " (#"   
1861   CD B2 08               CALL   prthex   
1864   CD 1C 09               CALL   printStr   
1867   29 0D 0A 00            .CSTR   ")\r\n"   
186B   76                     HALT      
186C   00                     .CSTR      
186D                EXPECTM_0_2113S43:      
186D   E1                     POP   HL   
186E                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
186E   31 80 37               LD   SP,STACK   
1871   CD 3E 09               CALL   init   
1874   CD 8E 36               CALL   execStr   
1877   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1885                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1885   E1                     POP   HL   
1886   E5                     PUSH   HL   
1887   11 02 00               LD   DE,2   
188A   B7                     OR   A   
188B   ED 52                  SBC   HL,DE   
188D   7D                     LD   A,L   
188E   B4                     OR   H   
188F   28 58                  JR   Z,expectM_0_2114S43   
1891   CD 1C 09               CALL   printStr   
1894   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
18A8   CD 1C 09               CALL   printStr   
18AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18BA   21 02 00               LD   HL,2   
18BD   CD 6A 08               CALL   prtdec   
18C0   CD 1C 09               CALL   printStr   
18C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18D0   E1                     POP   hl   
18D1   E5                     PUSH   hl   
18D2   CD 6A 08               CALL   prtdec   
18D5   E1                     POP   hl   
18D6   CD 1C 09               CALL   printStr   
18D9   20 28 23 00            .CSTR   " (#"   
18DD   CD B2 08               CALL   prthex   
18E0   CD 1C 09               CALL   printStr   
18E3   29 0D 0A 00            .CSTR   ")\r\n"   
18E7   76                     HALT      
18E8   00                     .CSTR      
18E9                EXPECTM_0_2114S43:      
18E9   E1                     POP   HL   
18EA                          ;*Macro unroll:  test "7 3 / _", 1
18EA   31 80 37               LD   SP,STACK   
18ED   CD 3E 09               CALL   init   
18F0   CD 8E 36               CALL   execStr   
18F3   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
18FB                          ;*Macro unroll:  expect "7 3 / _",1
18FB   E1                     POP   HL   
18FC   E5                     PUSH   HL   
18FD   11 01 00               LD   DE,1   
1900   B7                     OR   A   
1901   ED 52                  SBC   HL,DE   
1903   7D                     LD   A,L   
1904   B4                     OR   H   
1905   28 52                  JR   Z,expectM_0_2115S43   
1907   CD 1C 09               CALL   printStr   
190A   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1918   CD 1C 09               CALL   printStr   
191B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
192A   21 01 00               LD   HL,1   
192D   CD 6A 08               CALL   prtdec   
1930   CD 1C 09               CALL   printStr   
1933   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1940   E1                     POP   hl   
1941   E5                     PUSH   hl   
1942   CD 6A 08               CALL   prtdec   
1945   E1                     POP   hl   
1946   CD 1C 09               CALL   printStr   
1949   20 28 23 00            .CSTR   " (#"   
194D   CD B2 08               CALL   prthex   
1950   CD 1C 09               CALL   printStr   
1953   29 0D 0A 00            .CSTR   ")\r\n"   
1957   76                     HALT      
1958   00                     .CSTR      
1959                EXPECTM_0_2115S43:      
1959   E1                     POP   HL   
195A                          ;*Macro unroll:  test "7 3 /", 2
195A   31 80 37               LD   SP,STACK   
195D   CD 3E 09               CALL   init   
1960   CD 8E 36               CALL   execStr   
1963   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1969                          ;*Macro unroll:  expect "7 3 /",2
1969   E1                     POP   HL   
196A   E5                     PUSH   HL   
196B   11 02 00               LD   DE,2   
196E   B7                     OR   A   
196F   ED 52                  SBC   HL,DE   
1971   7D                     LD   A,L   
1972   B4                     OR   H   
1973   28 50                  JR   Z,expectM_0_2116S43   
1975   CD 1C 09               CALL   printStr   
1978   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1984   CD 1C 09               CALL   printStr   
1987   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1996   21 02 00               LD   HL,2   
1999   CD 6A 08               CALL   prtdec   
199C   CD 1C 09               CALL   printStr   
199F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19AC   E1                     POP   hl   
19AD   E5                     PUSH   hl   
19AE   CD 6A 08               CALL   prtdec   
19B1   E1                     POP   hl   
19B2   CD 1C 09               CALL   printStr   
19B5   20 28 23 00            .CSTR   " (#"   
19B9   CD B2 08               CALL   prthex   
19BC   CD 1C 09               CALL   printStr   
19BF   29 0D 0A 00            .CSTR   ")\r\n"   
19C3   76                     HALT      
19C4   00                     .CSTR      
19C5                EXPECTM_0_2116S43:      
19C5   E1                     POP   HL   
19C6                          ;*Macro unroll:  test "2 3 ==", FALSE
19C6   31 80 37               LD   SP,STACK   
19C9   CD 3E 09               CALL   init   
19CC   CD 8E 36               CALL   execStr   
19CF   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
19D6                          ;*Macro unroll:  expect "2 3 ==",FALSE
19D6   E1                     POP   HL   
19D7   E5                     PUSH   HL   
19D8   11 00 00               LD   DE,FALSE   
19DB   B7                     OR   A   
19DC   ED 52                  SBC   HL,DE   
19DE   7D                     LD   A,L   
19DF   B4                     OR   H   
19E0   28 51                  JR   Z,expectM_0_2117S43   
19E2   CD 1C 09               CALL   printStr   
19E5   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
19F2   CD 1C 09               CALL   printStr   
19F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A04   21 00 00               LD   HL,FALSE   
1A07   CD 6A 08               CALL   prtdec   
1A0A   CD 1C 09               CALL   printStr   
1A0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A1A   E1                     POP   hl   
1A1B   E5                     PUSH   hl   
1A1C   CD 6A 08               CALL   prtdec   
1A1F   E1                     POP   hl   
1A20   CD 1C 09               CALL   printStr   
1A23   20 28 23 00            .CSTR   " (#"   
1A27   CD B2 08               CALL   prthex   
1A2A   CD 1C 09               CALL   printStr   
1A2D   29 0D 0A 00            .CSTR   ")\r\n"   
1A31   76                     HALT      
1A32   00                     .CSTR      
1A33                EXPECTM_0_2117S43:      
1A33   E1                     POP   HL   
1A34                          ;*Macro unroll:  test "3 3 ==", TRUE
1A34   31 80 37               LD   SP,STACK   
1A37   CD 3E 09               CALL   init   
1A3A   CD 8E 36               CALL   execStr   
1A3D   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1A44                          ;*Macro unroll:  expect "3 3 ==",TRUE
1A44   E1                     POP   HL   
1A45   E5                     PUSH   HL   
1A46   11 FF FF               LD   DE,TRUE   
1A49   B7                     OR   A   
1A4A   ED 52                  SBC   HL,DE   
1A4C   7D                     LD   A,L   
1A4D   B4                     OR   H   
1A4E   28 51                  JR   Z,expectM_0_2118S43   
1A50   CD 1C 09               CALL   printStr   
1A53   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1A60   CD 1C 09               CALL   printStr   
1A63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A72   21 FF FF               LD   HL,TRUE   
1A75   CD 6A 08               CALL   prtdec   
1A78   CD 1C 09               CALL   printStr   
1A7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A88   E1                     POP   hl   
1A89   E5                     PUSH   hl   
1A8A   CD 6A 08               CALL   prtdec   
1A8D   E1                     POP   hl   
1A8E   CD 1C 09               CALL   printStr   
1A91   20 28 23 00            .CSTR   " (#"   
1A95   CD B2 08               CALL   prthex   
1A98   CD 1C 09               CALL   printStr   
1A9B   29 0D 0A 00            .CSTR   ")\r\n"   
1A9F   76                     HALT      
1AA0   00                     .CSTR      
1AA1                EXPECTM_0_2118S43:      
1AA1   E1                     POP   HL   
1AA2                          ;*Macro unroll:  test "1 2 <", TRUE
1AA2   31 80 37               LD   SP,STACK   
1AA5   CD 3E 09               CALL   init   
1AA8   CD 8E 36               CALL   execStr   
1AAB   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1AB1                          ;*Macro unroll:  expect "1 2 <",TRUE
1AB1   E1                     POP   HL   
1AB2   E5                     PUSH   HL   
1AB3   11 FF FF               LD   DE,TRUE   
1AB6   B7                     OR   A   
1AB7   ED 52                  SBC   HL,DE   
1AB9   7D                     LD   A,L   
1ABA   B4                     OR   H   
1ABB   28 50                  JR   Z,expectM_0_2119S43   
1ABD   CD 1C 09               CALL   printStr   
1AC0   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1ACC   CD 1C 09               CALL   printStr   
1ACF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ADE   21 FF FF               LD   HL,TRUE   
1AE1   CD 6A 08               CALL   prtdec   
1AE4   CD 1C 09               CALL   printStr   
1AE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AF4   E1                     POP   hl   
1AF5   E5                     PUSH   hl   
1AF6   CD 6A 08               CALL   prtdec   
1AF9   E1                     POP   hl   
1AFA   CD 1C 09               CALL   printStr   
1AFD   20 28 23 00            .CSTR   " (#"   
1B01   CD B2 08               CALL   prthex   
1B04   CD 1C 09               CALL   printStr   
1B07   29 0D 0A 00            .CSTR   ")\r\n"   
1B0B   76                     HALT      
1B0C   00                     .CSTR      
1B0D                EXPECTM_0_2119S43:      
1B0D   E1                     POP   HL   
1B0E                          ;*Macro unroll:  test "2 1 <", FALSE
1B0E   31 80 37               LD   SP,STACK   
1B11   CD 3E 09               CALL   init   
1B14   CD 8E 36               CALL   execStr   
1B17   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1B1D                          ;*Macro unroll:  expect "2 1 <",FALSE
1B1D   E1                     POP   HL   
1B1E   E5                     PUSH   HL   
1B1F   11 00 00               LD   DE,FALSE   
1B22   B7                     OR   A   
1B23   ED 52                  SBC   HL,DE   
1B25   7D                     LD   A,L   
1B26   B4                     OR   H   
1B27   28 50                  JR   Z,expectM_0_2120S43   
1B29   CD 1C 09               CALL   printStr   
1B2C   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1B38   CD 1C 09               CALL   printStr   
1B3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B4A   21 00 00               LD   HL,FALSE   
1B4D   CD 6A 08               CALL   prtdec   
1B50   CD 1C 09               CALL   printStr   
1B53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B60   E1                     POP   hl   
1B61   E5                     PUSH   hl   
1B62   CD 6A 08               CALL   prtdec   
1B65   E1                     POP   hl   
1B66   CD 1C 09               CALL   printStr   
1B69   20 28 23 00            .CSTR   " (#"   
1B6D   CD B2 08               CALL   prthex   
1B70   CD 1C 09               CALL   printStr   
1B73   29 0D 0A 00            .CSTR   ")\r\n"   
1B77   76                     HALT      
1B78   00                     .CSTR      
1B79                EXPECTM_0_2120S43:      
1B79   E1                     POP   HL   
1B7A                          ;*Macro unroll:  test "2 3 <", TRUE
1B7A   31 80 37               LD   SP,STACK   
1B7D   CD 3E 09               CALL   init   
1B80   CD 8E 36               CALL   execStr   
1B83   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1B89                          ;*Macro unroll:  expect "2 3 <",TRUE
1B89   E1                     POP   HL   
1B8A   E5                     PUSH   HL   
1B8B   11 FF FF               LD   DE,TRUE   
1B8E   B7                     OR   A   
1B8F   ED 52                  SBC   HL,DE   
1B91   7D                     LD   A,L   
1B92   B4                     OR   H   
1B93   28 50                  JR   Z,expectM_0_2121S43   
1B95   CD 1C 09               CALL   printStr   
1B98   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1BA4   CD 1C 09               CALL   printStr   
1BA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BB6   21 FF FF               LD   HL,TRUE   
1BB9   CD 6A 08               CALL   prtdec   
1BBC   CD 1C 09               CALL   printStr   
1BBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BCC   E1                     POP   hl   
1BCD   E5                     PUSH   hl   
1BCE   CD 6A 08               CALL   prtdec   
1BD1   E1                     POP   hl   
1BD2   CD 1C 09               CALL   printStr   
1BD5   20 28 23 00            .CSTR   " (#"   
1BD9   CD B2 08               CALL   prthex   
1BDC   CD 1C 09               CALL   printStr   
1BDF   29 0D 0A 00            .CSTR   ")\r\n"   
1BE3   76                     HALT      
1BE4   00                     .CSTR      
1BE5                EXPECTM_0_2121S43:      
1BE5   E1                     POP   HL   
1BE6                          ;*Macro unroll:  test "3 3 <", FALSE
1BE6   31 80 37               LD   SP,STACK   
1BE9   CD 3E 09               CALL   init   
1BEC   CD 8E 36               CALL   execStr   
1BEF   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1BF5                          ;*Macro unroll:  expect "3 3 <",FALSE
1BF5   E1                     POP   HL   
1BF6   E5                     PUSH   HL   
1BF7   11 00 00               LD   DE,FALSE   
1BFA   B7                     OR   A   
1BFB   ED 52                  SBC   HL,DE   
1BFD   7D                     LD   A,L   
1BFE   B4                     OR   H   
1BFF   28 50                  JR   Z,expectM_0_2122S43   
1C01   CD 1C 09               CALL   printStr   
1C04   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1C10   CD 1C 09               CALL   printStr   
1C13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C22   21 00 00               LD   HL,FALSE   
1C25   CD 6A 08               CALL   prtdec   
1C28   CD 1C 09               CALL   printStr   
1C2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C38   E1                     POP   hl   
1C39   E5                     PUSH   hl   
1C3A   CD 6A 08               CALL   prtdec   
1C3D   E1                     POP   hl   
1C3E   CD 1C 09               CALL   printStr   
1C41   20 28 23 00            .CSTR   " (#"   
1C45   CD B2 08               CALL   prthex   
1C48   CD 1C 09               CALL   printStr   
1C4B   29 0D 0A 00            .CSTR   ")\r\n"   
1C4F   76                     HALT      
1C50   00                     .CSTR      
1C51                EXPECTM_0_2122S43:      
1C51   E1                     POP   HL   
1C52                          ;*Macro unroll:  test "1 2 >", FALSE
1C52   31 80 37               LD   SP,STACK   
1C55   CD 3E 09               CALL   init   
1C58   CD 8E 36               CALL   execStr   
1C5B   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1C61                          ;*Macro unroll:  expect "1 2 >",FALSE
1C61   E1                     POP   HL   
1C62   E5                     PUSH   HL   
1C63   11 00 00               LD   DE,FALSE   
1C66   B7                     OR   A   
1C67   ED 52                  SBC   HL,DE   
1C69   7D                     LD   A,L   
1C6A   B4                     OR   H   
1C6B   28 50                  JR   Z,expectM_0_2123S43   
1C6D   CD 1C 09               CALL   printStr   
1C70   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1C7C   CD 1C 09               CALL   printStr   
1C7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C8E   21 00 00               LD   HL,FALSE   
1C91   CD 6A 08               CALL   prtdec   
1C94   CD 1C 09               CALL   printStr   
1C97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CA4   E1                     POP   hl   
1CA5   E5                     PUSH   hl   
1CA6   CD 6A 08               CALL   prtdec   
1CA9   E1                     POP   hl   
1CAA   CD 1C 09               CALL   printStr   
1CAD   20 28 23 00            .CSTR   " (#"   
1CB1   CD B2 08               CALL   prthex   
1CB4   CD 1C 09               CALL   printStr   
1CB7   29 0D 0A 00            .CSTR   ")\r\n"   
1CBB   76                     HALT      
1CBC   00                     .CSTR      
1CBD                EXPECTM_0_2123S43:      
1CBD   E1                     POP   HL   
1CBE                          ;*Macro unroll:  test "2 1 >", TRUE
1CBE   31 80 37               LD   SP,STACK   
1CC1   CD 3E 09               CALL   init   
1CC4   CD 8E 36               CALL   execStr   
1CC7   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1CCD                          ;*Macro unroll:  expect "2 1 >",TRUE
1CCD   E1                     POP   HL   
1CCE   E5                     PUSH   HL   
1CCF   11 FF FF               LD   DE,TRUE   
1CD2   B7                     OR   A   
1CD3   ED 52                  SBC   HL,DE   
1CD5   7D                     LD   A,L   
1CD6   B4                     OR   H   
1CD7   28 50                  JR   Z,expectM_0_2124S43   
1CD9   CD 1C 09               CALL   printStr   
1CDC   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1CE8   CD 1C 09               CALL   printStr   
1CEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CFA   21 FF FF               LD   HL,TRUE   
1CFD   CD 6A 08               CALL   prtdec   
1D00   CD 1C 09               CALL   printStr   
1D03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D10   E1                     POP   hl   
1D11   E5                     PUSH   hl   
1D12   CD 6A 08               CALL   prtdec   
1D15   E1                     POP   hl   
1D16   CD 1C 09               CALL   printStr   
1D19   20 28 23 00            .CSTR   " (#"   
1D1D   CD B2 08               CALL   prthex   
1D20   CD 1C 09               CALL   printStr   
1D23   29 0D 0A 00            .CSTR   ")\r\n"   
1D27   76                     HALT      
1D28   00                     .CSTR      
1D29                EXPECTM_0_2124S43:      
1D29   E1                     POP   HL   
1D2A                          ;*Macro unroll:  test "3 3 >", FALSE
1D2A   31 80 37               LD   SP,STACK   
1D2D   CD 3E 09               CALL   init   
1D30   CD 8E 36               CALL   execStr   
1D33   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1D39                          ;*Macro unroll:  expect "3 3 >",FALSE
1D39   E1                     POP   HL   
1D3A   E5                     PUSH   HL   
1D3B   11 00 00               LD   DE,FALSE   
1D3E   B7                     OR   A   
1D3F   ED 52                  SBC   HL,DE   
1D41   7D                     LD   A,L   
1D42   B4                     OR   H   
1D43   28 50                  JR   Z,expectM_0_2125S43   
1D45   CD 1C 09               CALL   printStr   
1D48   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1D54   CD 1C 09               CALL   printStr   
1D57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D66   21 00 00               LD   HL,FALSE   
1D69   CD 6A 08               CALL   prtdec   
1D6C   CD 1C 09               CALL   printStr   
1D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7C   E1                     POP   hl   
1D7D   E5                     PUSH   hl   
1D7E   CD 6A 08               CALL   prtdec   
1D81   E1                     POP   hl   
1D82   CD 1C 09               CALL   printStr   
1D85   20 28 23 00            .CSTR   " (#"   
1D89   CD B2 08               CALL   prthex   
1D8C   CD 1C 09               CALL   printStr   
1D8F   29 0D 0A 00            .CSTR   ")\r\n"   
1D93   76                     HALT      
1D94   00                     .CSTR      
1D95                EXPECTM_0_2125S43:      
1D95   E1                     POP   HL   
1D96                          ;*Macro unroll:  test "4 3 >", TRUE
1D96   31 80 37               LD   SP,STACK   
1D99   CD 3E 09               CALL   init   
1D9C   CD 8E 36               CALL   execStr   
1D9F   34 20 33 20 3E 00      .CSTR   "4 3 >"   
1DA5                          ;*Macro unroll:  expect "4 3 >",TRUE
1DA5   E1                     POP   HL   
1DA6   E5                     PUSH   HL   
1DA7   11 FF FF               LD   DE,TRUE   
1DAA   B7                     OR   A   
1DAB   ED 52                  SBC   HL,DE   
1DAD   7D                     LD   A,L   
1DAE   B4                     OR   H   
1DAF   28 50                  JR   Z,expectM_0_2126S43   
1DB1   CD 1C 09               CALL   printStr   
1DB4   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1DC0   CD 1C 09               CALL   printStr   
1DC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD2   21 FF FF               LD   HL,TRUE   
1DD5   CD 6A 08               CALL   prtdec   
1DD8   CD 1C 09               CALL   printStr   
1DDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DE8   E1                     POP   hl   
1DE9   E5                     PUSH   hl   
1DEA   CD 6A 08               CALL   prtdec   
1DED   E1                     POP   hl   
1DEE   CD 1C 09               CALL   printStr   
1DF1   20 28 23 00            .CSTR   " (#"   
1DF5   CD B2 08               CALL   prthex   
1DF8   CD 1C 09               CALL   printStr   
1DFB   29 0D 0A 00            .CSTR   ")\r\n"   
1DFF   76                     HALT      
1E00   00                     .CSTR      
1E01                EXPECTM_0_2126S43:      
1E01   E1                     POP   HL   
1E02                          ;*Macro unroll:  test "2 2 <=", TRUE
1E02   31 80 37               LD   SP,STACK   
1E05   CD 3E 09               CALL   init   
1E08   CD 8E 36               CALL   execStr   
1E0B   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
1E12                          ;*Macro unroll:  expect "2 2 <=",TRUE
1E12   E1                     POP   HL   
1E13   E5                     PUSH   HL   
1E14   11 FF FF               LD   DE,TRUE   
1E17   B7                     OR   A   
1E18   ED 52                  SBC   HL,DE   
1E1A   7D                     LD   A,L   
1E1B   B4                     OR   H   
1E1C   28 51                  JR   Z,expectM_0_2127S43   
1E1E   CD 1C 09               CALL   printStr   
1E21   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
1E2E   CD 1C 09               CALL   printStr   
1E31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E40   21 FF FF               LD   HL,TRUE   
1E43   CD 6A 08               CALL   prtdec   
1E46   CD 1C 09               CALL   printStr   
1E49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E56   E1                     POP   hl   
1E57   E5                     PUSH   hl   
1E58   CD 6A 08               CALL   prtdec   
1E5B   E1                     POP   hl   
1E5C   CD 1C 09               CALL   printStr   
1E5F   20 28 23 00            .CSTR   " (#"   
1E63   CD B2 08               CALL   prthex   
1E66   CD 1C 09               CALL   printStr   
1E69   29 0D 0A 00            .CSTR   ")\r\n"   
1E6D   76                     HALT      
1E6E   00                     .CSTR      
1E6F                EXPECTM_0_2127S43:      
1E6F   E1                     POP   HL   
1E70                          ;*Macro unroll:  test "2 2 >=", TRUE
1E70   31 80 37               LD   SP,STACK   
1E73   CD 3E 09               CALL   init   
1E76   CD 8E 36               CALL   execStr   
1E79   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
1E80                          ;*Macro unroll:  expect "2 2 >=",TRUE
1E80   E1                     POP   HL   
1E81   E5                     PUSH   HL   
1E82   11 FF FF               LD   DE,TRUE   
1E85   B7                     OR   A   
1E86   ED 52                  SBC   HL,DE   
1E88   7D                     LD   A,L   
1E89   B4                     OR   H   
1E8A   28 51                  JR   Z,expectM_0_2128S43   
1E8C   CD 1C 09               CALL   printStr   
1E8F   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
1E9C   CD 1C 09               CALL   printStr   
1E9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EAE   21 FF FF               LD   HL,TRUE   
1EB1   CD 6A 08               CALL   prtdec   
1EB4   CD 1C 09               CALL   printStr   
1EB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EC4   E1                     POP   hl   
1EC5   E5                     PUSH   hl   
1EC6   CD 6A 08               CALL   prtdec   
1EC9   E1                     POP   hl   
1ECA   CD 1C 09               CALL   printStr   
1ECD   20 28 23 00            .CSTR   " (#"   
1ED1   CD B2 08               CALL   prthex   
1ED4   CD 1C 09               CALL   printStr   
1ED7   29 0D 0A 00            .CSTR   ")\r\n"   
1EDB   76                     HALT      
1EDC   00                     .CSTR      
1EDD                EXPECTM_0_2128S43:      
1EDD   E1                     POP   HL   
1EDE                          ;*Macro unroll:  test "3 1 <<", 6
1EDE   31 80 37               LD   SP,STACK   
1EE1   CD 3E 09               CALL   init   
1EE4   CD 8E 36               CALL   execStr   
1EE7   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
1EEE                          ;*Macro unroll:  expect "3 1 <<",6
1EEE   E1                     POP   HL   
1EEF   E5                     PUSH   HL   
1EF0   11 06 00               LD   DE,6   
1EF3   B7                     OR   A   
1EF4   ED 52                  SBC   HL,DE   
1EF6   7D                     LD   A,L   
1EF7   B4                     OR   H   
1EF8   28 51                  JR   Z,expectM_0_2129S43   
1EFA   CD 1C 09               CALL   printStr   
1EFD   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
1F0A   CD 1C 09               CALL   printStr   
1F0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F1C   21 06 00               LD   HL,6   
1F1F   CD 6A 08               CALL   prtdec   
1F22   CD 1C 09               CALL   printStr   
1F25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F32   E1                     POP   hl   
1F33   E5                     PUSH   hl   
1F34   CD 6A 08               CALL   prtdec   
1F37   E1                     POP   hl   
1F38   CD 1C 09               CALL   printStr   
1F3B   20 28 23 00            .CSTR   " (#"   
1F3F   CD B2 08               CALL   prthex   
1F42   CD 1C 09               CALL   printStr   
1F45   29 0D 0A 00            .CSTR   ")\r\n"   
1F49   76                     HALT      
1F4A   00                     .CSTR      
1F4B                EXPECTM_0_2129S43:      
1F4B   E1                     POP   HL   
1F4C                          ;*Macro unroll:  test "10 1 >>", 5
1F4C   31 80 37               LD   SP,STACK   
1F4F   CD 3E 09               CALL   init   
1F52   CD 8E 36               CALL   execStr   
1F55   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
1F5D                          ;*Macro unroll:  expect "10 1 >>",5
1F5D   E1                     POP   HL   
1F5E   E5                     PUSH   HL   
1F5F   11 05 00               LD   DE,5   
1F62   B7                     OR   A   
1F63   ED 52                  SBC   HL,DE   
1F65   7D                     LD   A,L   
1F66   B4                     OR   H   
1F67   28 52                  JR   Z,expectM_0_2130S43   
1F69   CD 1C 09               CALL   printStr   
1F6C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
1F7A   CD 1C 09               CALL   printStr   
1F7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F8C   21 05 00               LD   HL,5   
1F8F   CD 6A 08               CALL   prtdec   
1F92   CD 1C 09               CALL   printStr   
1F95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA2   E1                     POP   hl   
1FA3   E5                     PUSH   hl   
1FA4   CD 6A 08               CALL   prtdec   
1FA7   E1                     POP   hl   
1FA8   CD 1C 09               CALL   printStr   
1FAB   20 28 23 00            .CSTR   " (#"   
1FAF   CD B2 08               CALL   prthex   
1FB2   CD 1C 09               CALL   printStr   
1FB5   29 0D 0A 00            .CSTR   ")\r\n"   
1FB9   76                     HALT      
1FBA   00                     .CSTR      
1FBB                EXPECTM_0_2130S43:      
1FBB   E1                     POP   HL   
1FBC                          ;*Macro unroll:  test "1 x = x", 1
1FBC   31 80 37               LD   SP,STACK   
1FBF   CD 3E 09               CALL   init   
1FC2   CD 8E 36               CALL   execStr   
1FC5   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
1FCD                          ;*Macro unroll:  expect "1 x = x",1
1FCD   E1                     POP   HL   
1FCE   E5                     PUSH   HL   
1FCF   11 01 00               LD   DE,1   
1FD2   B7                     OR   A   
1FD3   ED 52                  SBC   HL,DE   
1FD5   7D                     LD   A,L   
1FD6   B4                     OR   H   
1FD7   28 52                  JR   Z,expectM_0_2131S43   
1FD9   CD 1C 09               CALL   printStr   
1FDC   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
1FEA   CD 1C 09               CALL   printStr   
1FED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FFC   21 01 00               LD   HL,1   
1FFF   CD 6A 08               CALL   prtdec   
2002   CD 1C 09               CALL   printStr   
2005   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2012   E1                     POP   hl   
2013   E5                     PUSH   hl   
2014   CD 6A 08               CALL   prtdec   
2017   E1                     POP   hl   
2018   CD 1C 09               CALL   printStr   
201B   20 28 23 00            .CSTR   " (#"   
201F   CD B2 08               CALL   prthex   
2022   CD 1C 09               CALL   printStr   
2025   29 0D 0A 00            .CSTR   ")\r\n"   
2029   76                     HALT      
202A   00                     .CSTR      
202B                EXPECTM_0_2131S43:      
202B   E1                     POP   HL   
202C                          ;*Macro unroll:  test "1{}:", 1
202C   31 80 37               LD   SP,STACK   
202F   CD 3E 09               CALL   init   
2032   CD 8E 36               CALL   execStr   
2035   31 7B 7D 3A 00         .CSTR   "1{}:"   
203A                          ;*Macro unroll:  expect "1{}:",1
203A   E1                     POP   HL   
203B   E5                     PUSH   HL   
203C   11 01 00               LD   DE,1   
203F   B7                     OR   A   
2040   ED 52                  SBC   HL,DE   
2042   7D                     LD   A,L   
2043   B4                     OR   H   
2044   28 4F                  JR   Z,expectM_0_2132S43   
2046   CD 1C 09               CALL   printStr   
2049   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
2054   CD 1C 09               CALL   printStr   
2057   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2066   21 01 00               LD   HL,1   
2069   CD 6A 08               CALL   prtdec   
206C   CD 1C 09               CALL   printStr   
206F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
207C   E1                     POP   hl   
207D   E5                     PUSH   hl   
207E   CD 6A 08               CALL   prtdec   
2081   E1                     POP   hl   
2082   CD 1C 09               CALL   printStr   
2085   20 28 23 00            .CSTR   " (#"   
2089   CD B2 08               CALL   prthex   
208C   CD 1C 09               CALL   printStr   
208F   29 0D 0A 00            .CSTR   ")\r\n"   
2093   76                     HALT      
2094   00                     .CSTR      
2095                EXPECTM_0_2132S43:      
2095   E1                     POP   HL   
2096                          ;*Macro unroll:  test "{1}:", 1
2096   31 80 37               LD   SP,STACK   
2099   CD 3E 09               CALL   init   
209C   CD 8E 36               CALL   execStr   
209F   7B 31 7D 3A 00         .CSTR   "{1}:"   
20A4                          ;*Macro unroll:  expect "{1}:",1
20A4   E1                     POP   HL   
20A5   E5                     PUSH   HL   
20A6   11 01 00               LD   DE,1   
20A9   B7                     OR   A   
20AA   ED 52                  SBC   HL,DE   
20AC   7D                     LD   A,L   
20AD   B4                     OR   H   
20AE   28 4F                  JR   Z,expectM_0_2133S43   
20B0   CD 1C 09               CALL   printStr   
20B3   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
20BE   CD 1C 09               CALL   printStr   
20C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D0   21 01 00               LD   HL,1   
20D3   CD 6A 08               CALL   prtdec   
20D6   CD 1C 09               CALL   printStr   
20D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E6   E1                     POP   hl   
20E7   E5                     PUSH   hl   
20E8   CD 6A 08               CALL   prtdec   
20EB   E1                     POP   hl   
20EC   CD 1C 09               CALL   printStr   
20EF   20 28 23 00            .CSTR   " (#"   
20F3   CD B2 08               CALL   prthex   
20F6   CD 1C 09               CALL   printStr   
20F9   29 0D 0A 00            .CSTR   ")\r\n"   
20FD   76                     HALT      
20FE   00                     .CSTR      
20FF                EXPECTM_0_2133S43:      
20FF   E1                     POP   HL   
2100                          ;*Macro unroll:  test "{{1}:}:", 1
2100   31 80 37               LD   SP,STACK   
2103   CD 3E 09               CALL   init   
2106   CD 8E 36               CALL   execStr   
2109   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
2111                          ;*Macro unroll:  expect "{{1}:}:",1
2111   E1                     POP   HL   
2112   E5                     PUSH   HL   
2113   11 01 00               LD   DE,1   
2116   B7                     OR   A   
2117   ED 52                  SBC   HL,DE   
2119   7D                     LD   A,L   
211A   B4                     OR   H   
211B   28 52                  JR   Z,expectM_0_2134S43   
211D   CD 1C 09               CALL   printStr   
2120   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
212E   CD 1C 09               CALL   printStr   
2131   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2140   21 01 00               LD   HL,1   
2143   CD 6A 08               CALL   prtdec   
2146   CD 1C 09               CALL   printStr   
2149   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2156   E1                     POP   hl   
2157   E5                     PUSH   hl   
2158   CD 6A 08               CALL   prtdec   
215B   E1                     POP   hl   
215C   CD 1C 09               CALL   printStr   
215F   20 28 23 00            .CSTR   " (#"   
2163   CD B2 08               CALL   prthex   
2166   CD 1C 09               CALL   printStr   
2169   29 0D 0A 00            .CSTR   ")\r\n"   
216D   76                     HALT      
216E   00                     .CSTR      
216F                EXPECTM_0_2134S43:      
216F   E1                     POP   HL   
2170                          ;*Macro unroll:  test "{{{1}:}:}:", 1
2170   31 80 37               LD   SP,STACK   
2173   CD 3E 09               CALL   init   
2176   CD 8E 36               CALL   execStr   
2179   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
2184                          ;*Macro unroll:  expect "{{{1}:}:}:",1
2184   E1                     POP   HL   
2185   E5                     PUSH   HL   
2186   11 01 00               LD   DE,1   
2189   B7                     OR   A   
218A   ED 52                  SBC   HL,DE   
218C   7D                     LD   A,L   
218D   B4                     OR   H   
218E   28 55                  JR   Z,expectM_0_2135S43   
2190   CD 1C 09               CALL   printStr   
2193   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
21A4   CD 1C 09               CALL   printStr   
21A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21B6   21 01 00               LD   HL,1   
21B9   CD 6A 08               CALL   prtdec   
21BC   CD 1C 09               CALL   printStr   
21BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21CC   E1                     POP   hl   
21CD   E5                     PUSH   hl   
21CE   CD 6A 08               CALL   prtdec   
21D1   E1                     POP   hl   
21D2   CD 1C 09               CALL   printStr   
21D5   20 28 23 00            .CSTR   " (#"   
21D9   CD B2 08               CALL   prthex   
21DC   CD 1C 09               CALL   printStr   
21DF   29 0D 0A 00            .CSTR   ")\r\n"   
21E3   76                     HALT      
21E4   00                     .CSTR      
21E5                EXPECTM_0_2135S43:      
21E5   E1                     POP   HL   
21E6                          ;*Macro unroll:  test "5 \\F {10} ?", 5
21E6   31 80 37               LD   SP,STACK   
21E9   CD 3E 09               CALL   init   
21EC   CD 8E 36               CALL   execStr   
21EF   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
21FB                          ;*Macro unroll:  expect "5 \\F {10} ?",5
21FB   E1                     POP   HL   
21FC   E5                     PUSH   HL   
21FD   11 05 00               LD   DE,5   
2200   B7                     OR   A   
2201   ED 52                  SBC   HL,DE   
2203   7D                     LD   A,L   
2204   B4                     OR   H   
2205   28 56                  JR   Z,expectM_0_2136S43   
2207   CD 1C 09               CALL   printStr   
220A   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
221C   CD 1C 09               CALL   printStr   
221F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
222E   21 05 00               LD   HL,5   
2231   CD 6A 08               CALL   prtdec   
2234   CD 1C 09               CALL   printStr   
2237   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2244   E1                     POP   hl   
2245   E5                     PUSH   hl   
2246   CD 6A 08               CALL   prtdec   
2249   E1                     POP   hl   
224A   CD 1C 09               CALL   printStr   
224D   20 28 23 00            .CSTR   " (#"   
2251   CD B2 08               CALL   prthex   
2254   CD 1C 09               CALL   printStr   
2257   29 0D 0A 00            .CSTR   ")\r\n"   
225B   76                     HALT      
225C   00                     .CSTR      
225D                EXPECTM_0_2136S43:      
225D   E1                     POP   HL   
225E                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
225E   31 80 37               LD   SP,STACK   
2261   CD 3E 09               CALL   init   
2264   CD 8E 36               CALL   execStr   
2267   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
2275                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
2275   E1                     POP   HL   
2276   E5                     PUSH   HL   
2277   11 0F 00               LD   DE,15   
227A   B7                     OR   A   
227B   ED 52                  SBC   HL,DE   
227D   7D                     LD   A,L   
227E   B4                     OR   H   
227F   28 58                  JR   Z,expectM_0_2137S43   
2281   CD 1C 09               CALL   printStr   
2284   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
2298   CD 1C 09               CALL   printStr   
229B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22AA   21 0F 00               LD   HL,15   
22AD   CD 6A 08               CALL   prtdec   
22B0   CD 1C 09               CALL   printStr   
22B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22C0   E1                     POP   hl   
22C1   E5                     PUSH   hl   
22C2   CD 6A 08               CALL   prtdec   
22C5   E1                     POP   hl   
22C6   CD 1C 09               CALL   printStr   
22C9   20 28 23 00            .CSTR   " (#"   
22CD   CD B2 08               CALL   prthex   
22D0   CD 1C 09               CALL   printStr   
22D3   29 0D 0A 00            .CSTR   ")\r\n"   
22D7   76                     HALT      
22D8   00                     .CSTR      
22D9                EXPECTM_0_2137S43:      
22D9   E1                     POP   HL   
22DA                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
22DA   31 80 37               LD   SP,STACK   
22DD   CD 3E 09               CALL   init   
22E0   CD 8E 36               CALL   execStr   
22E3   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
22F7                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
22F7   E1                     POP   HL   
22F8   E5                     PUSH   HL   
22F9   11 15 00               LD   DE,21   
22FC   B7                     OR   A   
22FD   ED 52                  SBC   HL,DE   
22FF   7D                     LD   A,L   
2300   B4                     OR   H   
2301   28 5E                  JR   Z,expectM_0_2138S43   
2303   CD 1C 09               CALL   printStr   
2306   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
2320   CD 1C 09               CALL   printStr   
2323   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2332   21 15 00               LD   HL,21   
2335   CD 6A 08               CALL   prtdec   
2338   CD 1C 09               CALL   printStr   
233B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2348   E1                     POP   hl   
2349   E5                     PUSH   hl   
234A   CD 6A 08               CALL   prtdec   
234D   E1                     POP   hl   
234E   CD 1C 09               CALL   printStr   
2351   20 28 23 00            .CSTR   " (#"   
2355   CD B2 08               CALL   prthex   
2358   CD 1C 09               CALL   printStr   
235B   29 0D 0A 00            .CSTR   ")\r\n"   
235F   76                     HALT      
2360   00                     .CSTR      
2361                EXPECTM_0_2138S43:      
2361   E1                     POP   HL   
2362                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
2362   31 80 37               LD   SP,STACK   
2365   CD 3E 09               CALL   init   
2368   CD 8E 36               CALL   execStr   
236B   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
237F                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
237F   E1                     POP   HL   
2380   E5                     PUSH   HL   
2381   11 0B 00               LD   DE,11   
2384   B7                     OR   A   
2385   ED 52                  SBC   HL,DE   
2387   7D                     LD   A,L   
2388   B4                     OR   H   
2389   28 5E                  JR   Z,expectM_0_2139S43   
238B   CD 1C 09               CALL   printStr   
238E   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
23A8   CD 1C 09               CALL   printStr   
23AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BA   21 0B 00               LD   HL,11   
23BD   CD 6A 08               CALL   prtdec   
23C0   CD 1C 09               CALL   printStr   
23C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23D0   E1                     POP   hl   
23D1   E5                     PUSH   hl   
23D2   CD 6A 08               CALL   prtdec   
23D5   E1                     POP   hl   
23D6   CD 1C 09               CALL   printStr   
23D9   20 28 23 00            .CSTR   " (#"   
23DD   CD B2 08               CALL   prthex   
23E0   CD 1C 09               CALL   printStr   
23E3   29 0D 0A 00            .CSTR   ")\r\n"   
23E7   76                     HALT      
23E8   00                     .CSTR      
23E9                EXPECTM_0_2139S43:      
23E9   E1                     POP   HL   
23EA                          ;*Macro unroll:  test "() -2%", $0000
23EA   31 80 37               LD   SP,STACK   
23ED   CD 3E 09               CALL   init   
23F0   CD 8E 36               CALL   execStr   
23F3   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
23FA                          ;*Macro unroll:  expect "() -2%",$0000
23FA   E1                     POP   HL   
23FB   E5                     PUSH   HL   
23FC   11 00 00               LD   DE,$0000   
23FF   B7                     OR   A   
2400   ED 52                  SBC   HL,DE   
2402   7D                     LD   A,L   
2403   B4                     OR   H   
2404   28 51                  JR   Z,expectM_0_2140S43   
2406   CD 1C 09               CALL   printStr   
2409   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
2416   CD 1C 09               CALL   printStr   
2419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2428   21 00 00               LD   HL,$0000   
242B   CD 6A 08               CALL   prtdec   
242E   CD 1C 09               CALL   printStr   
2431   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
243E   E1                     POP   hl   
243F   E5                     PUSH   hl   
2440   CD 6A 08               CALL   prtdec   
2443   E1                     POP   hl   
2444   CD 1C 09               CALL   printStr   
2447   20 28 23 00            .CSTR   " (#"   
244B   CD B2 08               CALL   prthex   
244E   CD 1C 09               CALL   printStr   
2451   29 0D 0A 00            .CSTR   ")\r\n"   
2455   76                     HALT      
2456   00                     .CSTR      
2457                EXPECTM_0_2140S43:      
2457   E1                     POP   HL   
2458                          ;*Macro unroll:  test "(a) -1%", $0001
2458   31 80 37               LD   SP,STACK   
245B   CD 3E 09               CALL   init   
245E   CD 8E 36               CALL   execStr   
2461   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
2469                          ;*Macro unroll:  expect "(a) -1%",$0001
2469   E1                     POP   HL   
246A   E5                     PUSH   HL   
246B   11 01 00               LD   DE,$0001   
246E   B7                     OR   A   
246F   ED 52                  SBC   HL,DE   
2471   7D                     LD   A,L   
2472   B4                     OR   H   
2473   28 52                  JR   Z,expectM_0_2141S43   
2475   CD 1C 09               CALL   printStr   
2478   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
2486   CD 1C 09               CALL   printStr   
2489   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2498   21 01 00               LD   HL,$0001   
249B   CD 6A 08               CALL   prtdec   
249E   CD 1C 09               CALL   printStr   
24A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24AE   E1                     POP   hl   
24AF   E5                     PUSH   hl   
24B0   CD 6A 08               CALL   prtdec   
24B3   E1                     POP   hl   
24B4   CD 1C 09               CALL   printStr   
24B7   20 28 23 00            .CSTR   " (#"   
24BB   CD B2 08               CALL   prthex   
24BE   CD 1C 09               CALL   printStr   
24C1   29 0D 0A 00            .CSTR   ")\r\n"   
24C5   76                     HALT      
24C6   00                     .CSTR      
24C7                EXPECTM_0_2141S43:      
24C7   E1                     POP   HL   
24C8                          ;*Macro unroll:  test "(a:) -1%", $0001
24C8   31 80 37               LD   SP,STACK   
24CB   CD 3E 09               CALL   init   
24CE   CD 8E 36               CALL   execStr   
24D1   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
24DA                          ;*Macro unroll:  expect "(a:) -1%",$0001
24DA   E1                     POP   HL   
24DB   E5                     PUSH   HL   
24DC   11 01 00               LD   DE,$0001   
24DF   B7                     OR   A   
24E0   ED 52                  SBC   HL,DE   
24E2   7D                     LD   A,L   
24E3   B4                     OR   H   
24E4   28 53                  JR   Z,expectM_0_2142S43   
24E6   CD 1C 09               CALL   printStr   
24E9   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
24F8   CD 1C 09               CALL   printStr   
24FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
250A   21 01 00               LD   HL,$0001   
250D   CD 6A 08               CALL   prtdec   
2510   CD 1C 09               CALL   printStr   
2513   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2520   E1                     POP   hl   
2521   E5                     PUSH   hl   
2522   CD 6A 08               CALL   prtdec   
2525   E1                     POP   hl   
2526   CD 1C 09               CALL   printStr   
2529   20 28 23 00            .CSTR   " (#"   
252D   CD B2 08               CALL   prthex   
2530   CD 1C 09               CALL   printStr   
2533   29 0D 0A 00            .CSTR   ")\r\n"   
2537   76                     HALT      
2538   00                     .CSTR      
2539                EXPECTM_0_2142S43:      
2539   E1                     POP   HL   
253A                          ;*Macro unroll:  test "(a:b) -1%", $0102
253A   31 80 37               LD   SP,STACK   
253D   CD 3E 09               CALL   init   
2540   CD 8E 36               CALL   execStr   
2543   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
254D                          ;*Macro unroll:  expect "(a:b) -1%",$0102
254D   E1                     POP   HL   
254E   E5                     PUSH   HL   
254F   11 02 01               LD   DE,$0102   
2552   B7                     OR   A   
2553   ED 52                  SBC   HL,DE   
2555   7D                     LD   A,L   
2556   B4                     OR   H   
2557   28 54                  JR   Z,expectM_0_2143S43   
2559   CD 1C 09               CALL   printStr   
255C   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
256C   CD 1C 09               CALL   printStr   
256F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
257E   21 02 01               LD   HL,$0102   
2581   CD 6A 08               CALL   prtdec   
2584   CD 1C 09               CALL   printStr   
2587   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2594   E1                     POP   hl   
2595   E5                     PUSH   hl   
2596   CD 6A 08               CALL   prtdec   
2599   E1                     POP   hl   
259A   CD 1C 09               CALL   printStr   
259D   20 28 23 00            .CSTR   " (#"   
25A1   CD B2 08               CALL   prthex   
25A4   CD 1C 09               CALL   printStr   
25A7   29 0D 0A 00            .CSTR   ")\r\n"   
25AB   76                     HALT      
25AC   00                     .CSTR      
25AD                EXPECTM_0_2143S43:      
25AD   E1                     POP   HL   
25AE                          ;*Macro unroll:  test "(:b) -1%", $0101
25AE   31 80 37               LD   SP,STACK   
25B1   CD 3E 09               CALL   init   
25B4   CD 8E 36               CALL   execStr   
25B7   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
25C0                          ;*Macro unroll:  expect "(:b) -1%",$0101
25C0   E1                     POP   HL   
25C1   E5                     PUSH   HL   
25C2   11 01 01               LD   DE,$0101   
25C5   B7                     OR   A   
25C6   ED 52                  SBC   HL,DE   
25C8   7D                     LD   A,L   
25C9   B4                     OR   H   
25CA   28 53                  JR   Z,expectM_0_2144S43   
25CC   CD 1C 09               CALL   printStr   
25CF   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
25DE   CD 1C 09               CALL   printStr   
25E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25F0   21 01 01               LD   HL,$0101   
25F3   CD 6A 08               CALL   prtdec   
25F6   CD 1C 09               CALL   printStr   
25F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2606   E1                     POP   hl   
2607   E5                     PUSH   hl   
2608   CD 6A 08               CALL   prtdec   
260B   E1                     POP   hl   
260C   CD 1C 09               CALL   printStr   
260F   20 28 23 00            .CSTR   " (#"   
2613   CD B2 08               CALL   prthex   
2616   CD 1C 09               CALL   printStr   
2619   29 0D 0A 00            .CSTR   ")\r\n"   
261D   76                     HALT      
261E   00                     .CSTR      
261F                EXPECTM_0_2144S43:      
261F   E1                     POP   HL   
2620                          ;*Macro unroll:  test "() {2} \\f:", 2
2620   31 80 37               LD   SP,STACK   
2623   CD 3E 09               CALL   init   
2626   CD 8E 36               CALL   execStr   
2629   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
2634                          ;*Macro unroll:  expect "() {2} \\f:",2
2634   E1                     POP   HL   
2635   E5                     PUSH   HL   
2636   11 02 00               LD   DE,2   
2639   B7                     OR   A   
263A   ED 52                  SBC   HL,DE   
263C   7D                     LD   A,L   
263D   B4                     OR   H   
263E   28 55                  JR   Z,expectM_0_2145S43   
2640   CD 1C 09               CALL   printStr   
2643   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
2654   CD 1C 09               CALL   printStr   
2657   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2666   21 02 00               LD   HL,2   
2669   CD 6A 08               CALL   prtdec   
266C   CD 1C 09               CALL   printStr   
266F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
267C   E1                     POP   hl   
267D   E5                     PUSH   hl   
267E   CD 6A 08               CALL   prtdec   
2681   E1                     POP   hl   
2682   CD 1C 09               CALL   printStr   
2685   20 28 23 00            .CSTR   " (#"   
2689   CD B2 08               CALL   prthex   
268C   CD 1C 09               CALL   printStr   
268F   29 0D 0A 00            .CSTR   ")\r\n"   
2693   76                     HALT      
2694   00                     .CSTR      
2695                EXPECTM_0_2145S43:      
2695   E1                     POP   HL   
2696                          ;*Macro unroll:  test "(a) {2} \\f:", 2
2696   31 80 37               LD   SP,STACK   
2699   CD 3E 09               CALL   init   
269C   CD 8E 36               CALL   execStr   
269F   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
26AB                          ;*Macro unroll:  expect "(a) {2} \\f:",2
26AB   E1                     POP   HL   
26AC   E5                     PUSH   HL   
26AD   11 02 00               LD   DE,2   
26B0   B7                     OR   A   
26B1   ED 52                  SBC   HL,DE   
26B3   7D                     LD   A,L   
26B4   B4                     OR   H   
26B5   28 56                  JR   Z,expectM_0_2146S43   
26B7   CD 1C 09               CALL   printStr   
26BA   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
26CC   CD 1C 09               CALL   printStr   
26CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26DE   21 02 00               LD   HL,2   
26E1   CD 6A 08               CALL   prtdec   
26E4   CD 1C 09               CALL   printStr   
26E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26F4   E1                     POP   hl   
26F5   E5                     PUSH   hl   
26F6   CD 6A 08               CALL   prtdec   
26F9   E1                     POP   hl   
26FA   CD 1C 09               CALL   printStr   
26FD   20 28 23 00            .CSTR   " (#"   
2701   CD B2 08               CALL   prthex   
2704   CD 1C 09               CALL   printStr   
2707   29 0D 0A 00            .CSTR   ")\r\n"   
270B   76                     HALT      
270C   00                     .CSTR      
270D                EXPECTM_0_2146S43:      
270D   E1                     POP   HL   
270E                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
270E   31 80 37               LD   SP,STACK   
2711   CD 3E 09               CALL   init   
2714   CD 8E 36               CALL   execStr   
2717   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2726                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2726   E1                     POP   HL   
2727   E5                     PUSH   HL   
2728   11 05 00               LD   DE,5   
272B   B7                     OR   A   
272C   ED 52                  SBC   HL,DE   
272E   7D                     LD   A,L   
272F   B4                     OR   H   
2730   28 59                  JR   Z,expectM_0_2147S43   
2732   CD 1C 09               CALL   printStr   
2735   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
274A   CD 1C 09               CALL   printStr   
274D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
275C   21 05 00               LD   HL,5   
275F   CD 6A 08               CALL   prtdec   
2762   CD 1C 09               CALL   printStr   
2765   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2772   E1                     POP   hl   
2773   E5                     PUSH   hl   
2774   CD 6A 08               CALL   prtdec   
2777   E1                     POP   hl   
2778   CD 1C 09               CALL   printStr   
277B   20 28 23 00            .CSTR   " (#"   
277F   CD B2 08               CALL   prthex   
2782   CD 1C 09               CALL   printStr   
2785   29 0D 0A 00            .CSTR   ")\r\n"   
2789   76                     HALT      
278A   00                     .CSTR      
278B                EXPECTM_0_2147S43:      
278B   E1                     POP   HL   
278C                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
278C   31 80 37               LD   SP,STACK   
278F   CD 3E 09               CALL   init   
2792   CD 8E 36               CALL   execStr   
2795   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
27A6                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
27A6   E1                     POP   HL   
27A7   E5                     PUSH   HL   
27A8   11 05 00               LD   DE,5   
27AB   B7                     OR   A   
27AC   ED 52                  SBC   HL,DE   
27AE   7D                     LD   A,L   
27AF   B4                     OR   H   
27B0   28 5B                  JR   Z,expectM_0_2148S43   
27B2   CD 1C 09               CALL   printStr   
27B5   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
27CC   CD 1C 09               CALL   printStr   
27CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DE   21 05 00               LD   HL,5   
27E1   CD 6A 08               CALL   prtdec   
27E4   CD 1C 09               CALL   printStr   
27E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27F4   E1                     POP   hl   
27F5   E5                     PUSH   hl   
27F6   CD 6A 08               CALL   prtdec   
27F9   E1                     POP   hl   
27FA   CD 1C 09               CALL   printStr   
27FD   20 28 23 00            .CSTR   " (#"   
2801   CD B2 08               CALL   prthex   
2804   CD 1C 09               CALL   printStr   
2807   29 0D 0A 00            .CSTR   ")\r\n"   
280B   76                     HALT      
280C   00                     .CSTR      
280D                EXPECTM_0_2148S43:      
280D   E1                     POP   HL   
280E                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
280E   31 80 37               LD   SP,STACK   
2811   CD 3E 09               CALL   init   
2814   CD 8E 36               CALL   execStr   
2817   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2826                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2826   E1                     POP   HL   
2827   E5                     PUSH   HL   
2828   11 02 00               LD   DE,2   
282B   B7                     OR   A   
282C   ED 52                  SBC   HL,DE   
282E   7D                     LD   A,L   
282F   B4                     OR   H   
2830   28 59                  JR   Z,expectM_0_2149S43   
2832   CD 1C 09               CALL   printStr   
2835   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
284A   CD 1C 09               CALL   printStr   
284D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285C   21 02 00               LD   HL,2   
285F   CD 6A 08               CALL   prtdec   
2862   CD 1C 09               CALL   printStr   
2865   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2872   E1                     POP   hl   
2873   E5                     PUSH   hl   
2874   CD 6A 08               CALL   prtdec   
2877   E1                     POP   hl   
2878   CD 1C 09               CALL   printStr   
287B   20 28 23 00            .CSTR   " (#"   
287F   CD B2 08               CALL   prthex   
2882   CD 1C 09               CALL   printStr   
2885   29 0D 0A 00            .CSTR   ")\r\n"   
2889   76                     HALT      
288A   00                     .CSTR      
288B                EXPECTM_0_2149S43:      
288B   E1                     POP   HL   
288C                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
288C   31 80 37               LD   SP,STACK   
288F   CD 3E 09               CALL   init   
2892   CD 8E 36               CALL   execStr   
2895   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
28A9                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
28A9   E1                     POP   HL   
28AA   E5                     PUSH   HL   
28AB   11 05 00               LD   DE,5   
28AE   B7                     OR   A   
28AF   ED 52                  SBC   HL,DE   
28B1   7D                     LD   A,L   
28B2   B4                     OR   H   
28B3   28 5E                  JR   Z,expectM_0_2150S43   
28B5   CD 1C 09               CALL   printStr   
28B8   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
28D2   CD 1C 09               CALL   printStr   
28D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E4   21 05 00               LD   HL,5   
28E7   CD 6A 08               CALL   prtdec   
28EA   CD 1C 09               CALL   printStr   
28ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28FA   E1                     POP   hl   
28FB   E5                     PUSH   hl   
28FC   CD 6A 08               CALL   prtdec   
28FF   E1                     POP   hl   
2900   CD 1C 09               CALL   printStr   
2903   20 28 23 00            .CSTR   " (#"   
2907   CD B2 08               CALL   prthex   
290A   CD 1C 09               CALL   printStr   
290D   29 0D 0A 00            .CSTR   ")\r\n"   
2911   76                     HALT      
2912   00                     .CSTR      
2913                EXPECTM_0_2150S43:      
2913   E1                     POP   HL   
2914                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
2914   31 80 37               LD   SP,STACK   
2917   CD 3E 09               CALL   init   
291A   CD 8E 36               CALL   execStr   
291D   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2932                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2932   E1                     POP   HL   
2933   E5                     PUSH   HL   
2934   11 01 00               LD   DE,1   
2937   B7                     OR   A   
2938   ED 52                  SBC   HL,DE   
293A   7D                     LD   A,L   
293B   B4                     OR   H   
293C   28 5F                  JR   Z,expectM_0_2151S43   
293E   CD 1C 09               CALL   printStr   
2941   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
295C   CD 1C 09               CALL   printStr   
295F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
296E   21 01 00               LD   HL,1   
2971   CD 6A 08               CALL   prtdec   
2974   CD 1C 09               CALL   printStr   
2977   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2984   E1                     POP   hl   
2985   E5                     PUSH   hl   
2986   CD 6A 08               CALL   prtdec   
2989   E1                     POP   hl   
298A   CD 1C 09               CALL   printStr   
298D   20 28 23 00            .CSTR   " (#"   
2991   CD B2 08               CALL   prthex   
2994   CD 1C 09               CALL   printStr   
2997   29 0D 0A 00            .CSTR   ")\r\n"   
299B   76                     HALT      
299C   00                     .CSTR      
299D                EXPECTM_0_2151S43:      
299D   E1                     POP   HL   
299E                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
299E   31 80 37               LD   SP,STACK   
29A1   CD 3E 09               CALL   init   
29A4   CD 8E 36               CALL   execStr   
29A7   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
29BF                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
29BF   E1                     POP   HL   
29C0   E5                     PUSH   HL   
29C1   11 07 00               LD   DE,7   
29C4   B7                     OR   A   
29C5   ED 52                  SBC   HL,DE   
29C7   7D                     LD   A,L   
29C8   B4                     OR   H   
29C9   28 62                  JR   Z,expectM_0_2152S43   
29CB   CD 1C 09               CALL   printStr   
29CE   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
29EC   CD 1C 09               CALL   printStr   
29EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29FE   21 07 00               LD   HL,7   
2A01   CD 6A 08               CALL   prtdec   
2A04   CD 1C 09               CALL   printStr   
2A07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A14   E1                     POP   hl   
2A15   E5                     PUSH   hl   
2A16   CD 6A 08               CALL   prtdec   
2A19   E1                     POP   hl   
2A1A   CD 1C 09               CALL   printStr   
2A1D   20 28 23 00            .CSTR   " (#"   
2A21   CD B2 08               CALL   prthex   
2A24   CD 1C 09               CALL   printStr   
2A27   29 0D 0A 00            .CSTR   ")\r\n"   
2A2B   76                     HALT      
2A2C   00                     .CSTR      
2A2D                EXPECTM_0_2152S43:      
2A2D   E1                     POP   HL   
2A2E                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
2A2E   31 80 37               LD   SP,STACK   
2A31   CD 3E 09               CALL   init   
2A34   CD 8E 36               CALL   execStr   
2A37   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2A51                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2A51   E1                     POP   HL   
2A52   E5                     PUSH   HL   
2A53   11 06 00               LD   DE,6   
2A56   B7                     OR   A   
2A57   ED 52                  SBC   HL,DE   
2A59   7D                     LD   A,L   
2A5A   B4                     OR   H   
2A5B   28 64                  JR   Z,expectM_0_2153S43   
2A5D   CD 1C 09               CALL   printStr   
2A60   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2A80   CD 1C 09               CALL   printStr   
2A83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A92   21 06 00               LD   HL,6   
2A95   CD 6A 08               CALL   prtdec   
2A98   CD 1C 09               CALL   printStr   
2A9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AA8   E1                     POP   hl   
2AA9   E5                     PUSH   hl   
2AAA   CD 6A 08               CALL   prtdec   
2AAD   E1                     POP   hl   
2AAE   CD 1C 09               CALL   printStr   
2AB1   20 28 23 00            .CSTR   " (#"   
2AB5   CD B2 08               CALL   prthex   
2AB8   CD 1C 09               CALL   printStr   
2ABB   29 0D 0A 00            .CSTR   ")\r\n"   
2ABF   76                     HALT      
2AC0   00                     .CSTR      
2AC1                EXPECTM_0_2153S43:      
2AC1   E1                     POP   HL   
2AC2                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
2AC2   31 80 37               LD   SP,STACK   
2AC5   CD 3E 09               CALL   init   
2AC8   CD 8E 36               CALL   execStr   
2ACB   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
2ADE                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
2ADE   E1                     POP   HL   
2ADF   E5                     PUSH   HL   
2AE0   11 02 00               LD   DE,2   
2AE3   B7                     OR   A   
2AE4   ED 52                  SBC   HL,DE   
2AE6   7D                     LD   A,L   
2AE7   B4                     OR   H   
2AE8   28 5D                  JR   Z,expectM_0_2154S43   
2AEA   CD 1C 09               CALL   printStr   
2AED   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
2B06   CD 1C 09               CALL   printStr   
2B09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B18   21 02 00               LD   HL,2   
2B1B   CD 6A 08               CALL   prtdec   
2B1E   CD 1C 09               CALL   printStr   
2B21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B2E   E1                     POP   hl   
2B2F   E5                     PUSH   hl   
2B30   CD 6A 08               CALL   prtdec   
2B33   E1                     POP   hl   
2B34   CD 1C 09               CALL   printStr   
2B37   20 28 23 00            .CSTR   " (#"   
2B3B   CD B2 08               CALL   prthex   
2B3E   CD 1C 09               CALL   printStr   
2B41   29 0D 0A 00            .CSTR   ")\r\n"   
2B45   76                     HALT      
2B46   00                     .CSTR      
2B47                EXPECTM_0_2154S43:      
2B47   E1                     POP   HL   
2B48                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2B48   31 80 37               LD   SP,STACK   
2B4B   CD 3E 09               CALL   init   
2B4E   CD 8E 36               CALL   execStr   
2B51   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2B67                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2B67   E1                     POP   HL   
2B68   E5                     PUSH   HL   
2B69   11 01 00               LD   DE,1   
2B6C   B7                     OR   A   
2B6D   ED 52                  SBC   HL,DE   
2B6F   7D                     LD   A,L   
2B70   B4                     OR   H   
2B71   28 60                  JR   Z,expectM_0_2155S43   
2B73   CD 1C 09               CALL   printStr   
2B76   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2B92   CD 1C 09               CALL   printStr   
2B95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BA4   21 01 00               LD   HL,1   
2BA7   CD 6A 08               CALL   prtdec   
2BAA   CD 1C 09               CALL   printStr   
2BAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BBA   E1                     POP   hl   
2BBB   E5                     PUSH   hl   
2BBC   CD 6A 08               CALL   prtdec   
2BBF   E1                     POP   hl   
2BC0   CD 1C 09               CALL   printStr   
2BC3   20 28 23 00            .CSTR   " (#"   
2BC7   CD B2 08               CALL   prthex   
2BCA   CD 1C 09               CALL   printStr   
2BCD   29 0D 0A 00            .CSTR   ")\r\n"   
2BD1   76                     HALT      
2BD2   00                     .CSTR      
2BD3                EXPECTM_0_2155S43:      
2BD3   E1                     POP   HL   
2BD4                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2BD4   31 80 37               LD   SP,STACK   
2BD7   CD 3E 09               CALL   init   
2BDA   CD 8E 36               CALL   execStr   
2BDD   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2BF4                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2BF4   E1                     POP   HL   
2BF5   E5                     PUSH   HL   
2BF6   11 02 00               LD   DE,2   
2BF9   B7                     OR   A   
2BFA   ED 52                  SBC   HL,DE   
2BFC   7D                     LD   A,L   
2BFD   B4                     OR   H   
2BFE   28 61                  JR   Z,expectM_0_2156S43   
2C00   CD 1C 09               CALL   printStr   
2C03   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2C20   CD 1C 09               CALL   printStr   
2C23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C32   21 02 00               LD   HL,2   
2C35   CD 6A 08               CALL   prtdec   
2C38   CD 1C 09               CALL   printStr   
2C3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C48   E1                     POP   hl   
2C49   E5                     PUSH   hl   
2C4A   CD 6A 08               CALL   prtdec   
2C4D   E1                     POP   hl   
2C4E   CD 1C 09               CALL   printStr   
2C51   20 28 23 00            .CSTR   " (#"   
2C55   CD B2 08               CALL   prthex   
2C58   CD 1C 09               CALL   printStr   
2C5B   29 0D 0A 00            .CSTR   ")\r\n"   
2C5F   76                     HALT      
2C60   00                     .CSTR      
2C61                EXPECTM_0_2156S43:      
2C61   E1                     POP   HL   
2C62                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2C62   31 80 37               LD   SP,STACK   
2C65   CD 3E 09               CALL   init   
2C68   CD 8E 36               CALL   execStr   
2C6B   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2C83                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2C83   E1                     POP   HL   
2C84   E5                     PUSH   HL   
2C85   11 02 00               LD   DE,2   
2C88   B7                     OR   A   
2C89   ED 52                  SBC   HL,DE   
2C8B   7D                     LD   A,L   
2C8C   B4                     OR   H   
2C8D   28 62                  JR   Z,expectM_0_2157S43   
2C8F   CD 1C 09               CALL   printStr   
2C92   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
2CB0   CD 1C 09               CALL   printStr   
2CB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CC2   21 02 00               LD   HL,2   
2CC5   CD 6A 08               CALL   prtdec   
2CC8   CD 1C 09               CALL   printStr   
2CCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CD8   E1                     POP   hl   
2CD9   E5                     PUSH   hl   
2CDA   CD 6A 08               CALL   prtdec   
2CDD   E1                     POP   hl   
2CDE   CD 1C 09               CALL   printStr   
2CE1   20 28 23 00            .CSTR   " (#"   
2CE5   CD B2 08               CALL   prthex   
2CE8   CD 1C 09               CALL   printStr   
2CEB   29 0D 0A 00            .CSTR   ")\r\n"   
2CEF   76                     HALT      
2CF0   00                     .CSTR      
2CF1                EXPECTM_0_2157S43:      
2CF1   E1                     POP   HL   
2CF2                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2CF2   31 80 37               LD   SP,STACK   
2CF5   CD 3E 09               CALL   init   
2CF8   CD 8E 36               CALL   execStr   
2CFB   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2D12                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2D12   E1                     POP   HL   
2D13   E5                     PUSH   HL   
2D14   11 02 00               LD   DE,2   
2D17   B7                     OR   A   
2D18   ED 52                  SBC   HL,DE   
2D1A   7D                     LD   A,L   
2D1B   B4                     OR   H   
2D1C   28 61                  JR   Z,expectM_0_2158S43   
2D1E   CD 1C 09               CALL   printStr   
2D21   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2D3E   CD 1C 09               CALL   printStr   
2D41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D50   21 02 00               LD   HL,2   
2D53   CD 6A 08               CALL   prtdec   
2D56   CD 1C 09               CALL   printStr   
2D59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D66   E1                     POP   hl   
2D67   E5                     PUSH   hl   
2D68   CD 6A 08               CALL   prtdec   
2D6B   E1                     POP   hl   
2D6C   CD 1C 09               CALL   printStr   
2D6F   20 28 23 00            .CSTR   " (#"   
2D73   CD B2 08               CALL   prthex   
2D76   CD 1C 09               CALL   printStr   
2D79   29 0D 0A 00            .CSTR   ")\r\n"   
2D7D   76                     HALT      
2D7E   00                     .CSTR      
2D7F                EXPECTM_0_2158S43:      
2D7F   E1                     POP   HL   
2D80                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
2D80   31 80 37               LD   SP,STACK   
2D83   CD 3E 09               CALL   init   
2D86   CD 8E 36               CALL   execStr   
2D89   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
2DA7                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
2DA7   E1                     POP   HL   
2DA8   E5                     PUSH   HL   
2DA9   11 05 00               LD   DE,5   
2DAC   B7                     OR   A   
2DAD   ED 52                  SBC   HL,DE   
2DAF   7D                     LD   A,L   
2DB0   B4                     OR   H   
2DB1   28 68                  JR   Z,expectM_0_2159S43   
2DB3   CD 1C 09               CALL   printStr   
2DB6   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
2DDA   CD 1C 09               CALL   printStr   
2DDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DEC   21 05 00               LD   HL,5   
2DEF   CD 6A 08               CALL   prtdec   
2DF2   CD 1C 09               CALL   printStr   
2DF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E02   E1                     POP   hl   
2E03   E5                     PUSH   hl   
2E04   CD 6A 08               CALL   prtdec   
2E07   E1                     POP   hl   
2E08   CD 1C 09               CALL   printStr   
2E0B   20 28 23 00            .CSTR   " (#"   
2E0F   CD B2 08               CALL   prthex   
2E12   CD 1C 09               CALL   printStr   
2E15   29 0D 0A 00            .CSTR   ")\r\n"   
2E19   76                     HALT      
2E1A   00                     .CSTR      
2E1B                EXPECTM_0_2159S43:      
2E1B   E1                     POP   HL   
2E1C                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
2E1C   31 80 37               LD   SP,STACK   
2E1F   CD 3E 09               CALL   init   
2E22   CD 8E 36               CALL   execStr   
2E25   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
2E3A                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
2E3A   E1                     POP   HL   
2E3B   E5                     PUSH   HL   
2E3C   11 02 00               LD   DE,2   
2E3F   B7                     OR   A   
2E40   ED 52                  SBC   HL,DE   
2E42   7D                     LD   A,L   
2E43   B4                     OR   H   
2E44   28 5F                  JR   Z,expectM_0_2160S43   
2E46   CD 1C 09               CALL   printStr   
2E49   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
2E64   CD 1C 09               CALL   printStr   
2E67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E76   21 02 00               LD   HL,2   
2E79   CD 6A 08               CALL   prtdec   
2E7C   CD 1C 09               CALL   printStr   
2E7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E8C   E1                     POP   hl   
2E8D   E5                     PUSH   hl   
2E8E   CD 6A 08               CALL   prtdec   
2E91   E1                     POP   hl   
2E92   CD 1C 09               CALL   printStr   
2E95   20 28 23 00            .CSTR   " (#"   
2E99   CD B2 08               CALL   prthex   
2E9C   CD 1C 09               CALL   printStr   
2E9F   29 0D 0A 00            .CSTR   ")\r\n"   
2EA3   76                     HALT      
2EA4   00                     .CSTR      
2EA5                EXPECTM_0_2160S43:      
2EA5   E1                     POP   HL   
2EA6                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
2EA6   31 80 37               LD   SP,STACK   
2EA9   CD 3E 09               CALL   init   
2EAC   CD 8E 36               CALL   execStr   
2EAF   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
2ECA                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
2ECA   E1                     POP   HL   
2ECB   E5                     PUSH   HL   
2ECC   11 64 00               LD   DE,100   
2ECF   B7                     OR   A   
2ED0   ED 52                  SBC   HL,DE   
2ED2   7D                     LD   A,L   
2ED3   B4                     OR   H   
2ED4   28 65                  JR   Z,expectM_0_2161S43   
2ED6   CD 1C 09               CALL   printStr   
2ED9   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
2EFA   CD 1C 09               CALL   printStr   
2EFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F0C   21 64 00               LD   HL,100   
2F0F   CD 6A 08               CALL   prtdec   
2F12   CD 1C 09               CALL   printStr   
2F15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F22   E1                     POP   hl   
2F23   E5                     PUSH   hl   
2F24   CD 6A 08               CALL   prtdec   
2F27   E1                     POP   hl   
2F28   CD 1C 09               CALL   printStr   
2F2B   20 28 23 00            .CSTR   " (#"   
2F2F   CD B2 08               CALL   prthex   
2F32   CD 1C 09               CALL   printStr   
2F35   29 0D 0A 00            .CSTR   ")\r\n"   
2F39   76                     HALT      
2F3A   00                     .CSTR      
2F3B                EXPECTM_0_2161S43:      
2F3B   E1                     POP   HL   
2F3C                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
2F3C   31 80 37               LD   SP,STACK   
2F3F   CD 3E 09               CALL   init   
2F42   CD 8E 36               CALL   execStr   
2F45   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
2F61                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
2F61   E1                     POP   HL   
2F62   E5                     PUSH   HL   
2F63   11 01 00               LD   DE,1   
2F66   B7                     OR   A   
2F67   ED 52                  SBC   HL,DE   
2F69   7D                     LD   A,L   
2F6A   B4                     OR   H   
2F6B   28 66                  JR   Z,expectM_0_2162S43   
2F6D   CD 1C 09               CALL   printStr   
2F70   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
2F92   CD 1C 09               CALL   printStr   
2F95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA4   21 01 00               LD   HL,1   
2FA7   CD 6A 08               CALL   prtdec   
2FAA   CD 1C 09               CALL   printStr   
2FAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FBA   E1                     POP   hl   
2FBB   E5                     PUSH   hl   
2FBC   CD 6A 08               CALL   prtdec   
2FBF   E1                     POP   hl   
2FC0   CD 1C 09               CALL   printStr   
2FC3   20 28 23 00            .CSTR   " (#"   
2FC7   CD B2 08               CALL   prthex   
2FCA   CD 1C 09               CALL   printStr   
2FCD   29 0D 0A 00            .CSTR   ")\r\n"   
2FD1   76                     HALT      
2FD2   00                     .CSTR      
2FD3                EXPECTM_0_2162S43:      
2FD3   E1                     POP   HL   
2FD4                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
2FD4   31 80 37               LD   SP,STACK   
2FD7   CD 3E 09               CALL   init   
2FDA   CD 8E 36               CALL   execStr   
2FDD   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
2FFA                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
2FFA   E1                     POP   HL   
2FFB   E5                     PUSH   HL   
2FFC   11 02 00               LD   DE,2   
2FFF   B7                     OR   A   
3000   ED 52                  SBC   HL,DE   
3002   7D                     LD   A,L   
3003   B4                     OR   H   
3004   28 67                  JR   Z,expectM_0_2163S43   
3006   CD 1C 09               CALL   printStr   
3009   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
302C   CD 1C 09               CALL   printStr   
302F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
303E   21 02 00               LD   HL,2   
3041   CD 6A 08               CALL   prtdec   
3044   CD 1C 09               CALL   printStr   
3047   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3054   E1                     POP   hl   
3055   E5                     PUSH   hl   
3056   CD 6A 08               CALL   prtdec   
3059   E1                     POP   hl   
305A   CD 1C 09               CALL   printStr   
305D   20 28 23 00            .CSTR   " (#"   
3061   CD B2 08               CALL   prthex   
3064   CD 1C 09               CALL   printStr   
3067   29 0D 0A 00            .CSTR   ")\r\n"   
306B   76                     HALT      
306C   00                     .CSTR      
306D                EXPECTM_0_2163S43:      
306D   E1                     POP   HL   
306E                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
306E   31 80 37               LD   SP,STACK   
3071   CD 3E 09               CALL   init   
3074   CD 8E 36               CALL   execStr   
3077   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
309C                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
309C   E1                     POP   HL   
309D   E5                     PUSH   HL   
309E   11 0B 00               LD   DE,11   
30A1   B7                     OR   A   
30A2   ED 52                  SBC   HL,DE   
30A4   7D                     LD   A,L   
30A5   B4                     OR   H   
30A6   28 6F                  JR   Z,expectM_0_2164S43   
30A8   CD 1C 09               CALL   printStr   
30AB   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
30D6   CD 1C 09               CALL   printStr   
30D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E8   21 0B 00               LD   HL,11   
30EB   CD 6A 08               CALL   prtdec   
30EE   CD 1C 09               CALL   printStr   
30F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30FE   E1                     POP   hl   
30FF   E5                     PUSH   hl   
3100   CD 6A 08               CALL   prtdec   
3103   E1                     POP   hl   
3104   CD 1C 09               CALL   printStr   
3107   20 28 23 00            .CSTR   " (#"   
310B   CD B2 08               CALL   prthex   
310E   CD 1C 09               CALL   printStr   
3111   29 0D 0A 00            .CSTR   ")\r\n"   
3115   76                     HALT      
3116   00                     .CSTR      
3117                EXPECTM_0_2164S43:      
3117   E1                     POP   HL   
3118                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
3118   31 80 37               LD   SP,STACK   
311B   CD 3E 09               CALL   init   
311E   CD 8E 36               CALL   execStr   
3121   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
3146                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
3146   E1                     POP   HL   
3147   E5                     PUSH   HL   
3148   11 15 00               LD   DE,21   
314B   B7                     OR   A   
314C   ED 52                  SBC   HL,DE   
314E   7D                     LD   A,L   
314F   B4                     OR   H   
3150   28 6F                  JR   Z,expectM_0_2165S43   
3152   CD 1C 09               CALL   printStr   
3155   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
3180   CD 1C 09               CALL   printStr   
3183   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3192   21 15 00               LD   HL,21   
3195   CD 6A 08               CALL   prtdec   
3198   CD 1C 09               CALL   printStr   
319B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31A8   E1                     POP   hl   
31A9   E5                     PUSH   hl   
31AA   CD 6A 08               CALL   prtdec   
31AD   E1                     POP   hl   
31AE   CD 1C 09               CALL   printStr   
31B1   20 28 23 00            .CSTR   " (#"   
31B5   CD B2 08               CALL   prthex   
31B8   CD 1C 09               CALL   printStr   
31BB   29 0D 0A 00            .CSTR   ")\r\n"   
31BF   76                     HALT      
31C0   00                     .CSTR      
31C1                EXPECTM_0_2165S43:      
31C1   E1                     POP   HL   
31C2                          ;*Macro unroll:  test "[10 20 30] 1%", 20
31C2   31 80 37               LD   SP,STACK   
31C5   CD 3E 09               CALL   init   
31C8   CD 8E 36               CALL   execStr   
31CB   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
31D9                          ;*Macro unroll:  expect "[10 20 30] 1%",20
31D9   E1                     POP   HL   
31DA   E5                     PUSH   HL   
31DB   11 14 00               LD   DE,20   
31DE   B7                     OR   A   
31DF   ED 52                  SBC   HL,DE   
31E1   7D                     LD   A,L   
31E2   B4                     OR   H   
31E3   28 58                  JR   Z,expectM_0_2166S43   
31E5   CD 1C 09               CALL   printStr   
31E8   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
31FC   CD 1C 09               CALL   printStr   
31FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
320E   21 14 00               LD   HL,20   
3211   CD 6A 08               CALL   prtdec   
3214   CD 1C 09               CALL   printStr   
3217   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3224   E1                     POP   hl   
3225   E5                     PUSH   hl   
3226   CD 6A 08               CALL   prtdec   
3229   E1                     POP   hl   
322A   CD 1C 09               CALL   printStr   
322D   20 28 23 00            .CSTR   " (#"   
3231   CD B2 08               CALL   prthex   
3234   CD 1C 09               CALL   printStr   
3237   29 0D 0A 00            .CSTR   ")\r\n"   
323B   76                     HALT      
323C   00                     .CSTR      
323D                EXPECTM_0_2166S43:      
323D   E1                     POP   HL   
323E                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
323E   31 80 37               LD   SP,STACK   
3241   CD 3E 09               CALL   init   
3244   CD 8E 36               CALL   execStr   
3247   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
3255                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
3255   E1                     POP   HL   
3256   E5                     PUSH   HL   
3257   11 02 00               LD   DE,2   
325A   B7                     OR   A   
325B   ED 52                  SBC   HL,DE   
325D   7D                     LD   A,L   
325E   B4                     OR   H   
325F   28 58                  JR   Z,expectM_0_2167S43   
3261   CD 1C 09               CALL   printStr   
3264   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
3278   CD 1C 09               CALL   printStr   
327B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328A   21 02 00               LD   HL,2   
328D   CD 6A 08               CALL   prtdec   
3290   CD 1C 09               CALL   printStr   
3293   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A0   E1                     POP   hl   
32A1   E5                     PUSH   hl   
32A2   CD 6A 08               CALL   prtdec   
32A5   E1                     POP   hl   
32A6   CD 1C 09               CALL   printStr   
32A9   20 28 23 00            .CSTR   " (#"   
32AD   CD B2 08               CALL   prthex   
32B0   CD 1C 09               CALL   printStr   
32B3   29 0D 0A 00            .CSTR   ")\r\n"   
32B7   76                     HALT      
32B8   00                     .CSTR      
32B9                EXPECTM_0_2167S43:      
32B9   E1                     POP   HL   
32BA                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
32BA   31 80 37               LD   SP,STACK   
32BD   CD 3E 09               CALL   init   
32C0   CD 8E 36               CALL   execStr   
32C3   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
32D7                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
32D7   E1                     POP   HL   
32D8   E5                     PUSH   HL   
32D9   11 42 00               LD   DE,66   
32DC   B7                     OR   A   
32DD   ED 52                  SBC   HL,DE   
32DF   7D                     LD   A,L   
32E0   B4                     OR   H   
32E1   28 5E                  JR   Z,expectM_0_2168S43   
32E3   CD 1C 09               CALL   printStr   
32E6   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
3300   CD 1C 09               CALL   printStr   
3303   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3312   21 42 00               LD   HL,66   
3315   CD 6A 08               CALL   prtdec   
3318   CD 1C 09               CALL   printStr   
331B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3328   E1                     POP   hl   
3329   E5                     PUSH   hl   
332A   CD 6A 08               CALL   prtdec   
332D   E1                     POP   hl   
332E   CD 1C 09               CALL   printStr   
3331   20 28 23 00            .CSTR   " (#"   
3335   CD B2 08               CALL   prthex   
3338   CD 1C 09               CALL   printStr   
333B   29 0D 0A 00            .CSTR   ")\r\n"   
333F   76                     HALT      
3340   00                     .CSTR      
3341                EXPECTM_0_2168S43:      
3341   E1                     POP   HL   
3342                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
3342   31 80 37               LD   SP,STACK   
3345   CD 3E 09               CALL   init   
3348   CD 8E 36               CALL   execStr   
334B   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
3361                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
3361   E1                     POP   HL   
3362   E5                     PUSH   HL   
3363   11 0A 00               LD   DE,10   
3366   B7                     OR   A   
3367   ED 52                  SBC   HL,DE   
3369   7D                     LD   A,L   
336A   B4                     OR   H   
336B   28 60                  JR   Z,expectM_0_2169S43   
336D   CD 1C 09               CALL   printStr   
3370   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
338C   CD 1C 09               CALL   printStr   
338F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
339E   21 0A 00               LD   HL,10   
33A1   CD 6A 08               CALL   prtdec   
33A4   CD 1C 09               CALL   printStr   
33A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33B4   E1                     POP   hl   
33B5   E5                     PUSH   hl   
33B6   CD 6A 08               CALL   prtdec   
33B9   E1                     POP   hl   
33BA   CD 1C 09               CALL   printStr   
33BD   20 28 23 00            .CSTR   " (#"   
33C1   CD B2 08               CALL   prthex   
33C4   CD 1C 09               CALL   printStr   
33C7   29 0D 0A 00            .CSTR   ")\r\n"   
33CB   76                     HALT      
33CC   00                     .CSTR      
33CD                EXPECTM_0_2169S43:      
33CD   E1                     POP   HL   
33CE                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
33CE   31 80 37               LD   SP,STACK   
33D1   CD 3E 09               CALL   init   
33D4   CD 8E 36               CALL   execStr   
33D7   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
33FB                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
33FB   E1                     POP   HL   
33FC   E5                     PUSH   HL   
33FD   11 0A 00               LD   DE,10   
3400   B7                     OR   A   
3401   ED 52                  SBC   HL,DE   
3403   7D                     LD   A,L   
3404   B4                     OR   H   
3405   28 6E                  JR   Z,expectM_0_2170S43   
3407   CD 1C 09               CALL   printStr   
340A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3434   CD 1C 09               CALL   printStr   
3437   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3446   21 0A 00               LD   HL,10   
3449   CD 6A 08               CALL   prtdec   
344C   CD 1C 09               CALL   printStr   
344F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
345C   E1                     POP   hl   
345D   E5                     PUSH   hl   
345E   CD 6A 08               CALL   prtdec   
3461   E1                     POP   hl   
3462   CD 1C 09               CALL   printStr   
3465   20 28 23 00            .CSTR   " (#"   
3469   CD B2 08               CALL   prthex   
346C   CD 1C 09               CALL   printStr   
346F   29 0D 0A 00            .CSTR   ")\r\n"   
3473   76                     HALT      
3474   00                     .CSTR      
3475                EXPECTM_0_2170S43:      
3475   E1                     POP   HL   
3476                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
3476   31 80 37               LD   SP,STACK   
3479   CD 3E 09               CALL   init   
347C   CD 8E 36               CALL   execStr   
347F   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
34A5                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
34A5   E1                     POP   HL   
34A6   E5                     PUSH   HL   
34A7   11 0A 00               LD   DE,10   
34AA   B7                     OR   A   
34AB   ED 52                  SBC   HL,DE   
34AD   7D                     LD   A,L   
34AE   B4                     OR   H   
34AF   28 70                  JR   Z,expectM_0_2171S43   
34B1   CD 1C 09               CALL   printStr   
34B4   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
34E0   CD 1C 09               CALL   printStr   
34E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34F2   21 0A 00               LD   HL,10   
34F5   CD 6A 08               CALL   prtdec   
34F8   CD 1C 09               CALL   printStr   
34FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3508   E1                     POP   hl   
3509   E5                     PUSH   hl   
350A   CD 6A 08               CALL   prtdec   
350D   E1                     POP   hl   
350E   CD 1C 09               CALL   printStr   
3511   20 28 23 00            .CSTR   " (#"   
3515   CD B2 08               CALL   prthex   
3518   CD 1C 09               CALL   printStr   
351B   29 0D 0A 00            .CSTR   ")\r\n"   
351F   76                     HALT      
3520   00                     .CSTR      
3521                EXPECTM_0_2171S43:      
3521   E1                     POP   HL   
3522                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
3522   31 80 37               LD   SP,STACK   
3525   CD 3E 09               CALL   init   
3528   CD 8E 36               CALL   execStr   
352B   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3551                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
3551   E1                     POP   HL   
3552   E5                     PUSH   HL   
3553   11 14 00               LD   DE,20   
3556   B7                     OR   A   
3557   ED 52                  SBC   HL,DE   
3559   7D                     LD   A,L   
355A   B4                     OR   H   
355B   28 70                  JR   Z,expectM_0_2172S43   
355D   CD 1C 09               CALL   printStr   
3560   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
358C   CD 1C 09               CALL   printStr   
358F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
359E   21 14 00               LD   HL,20   
35A1   CD 6A 08               CALL   prtdec   
35A4   CD 1C 09               CALL   printStr   
35A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35B4   E1                     POP   hl   
35B5   E5                     PUSH   hl   
35B6   CD 6A 08               CALL   prtdec   
35B9   E1                     POP   hl   
35BA   CD 1C 09               CALL   printStr   
35BD   20 28 23 00            .CSTR   " (#"   
35C1   CD B2 08               CALL   prthex   
35C4   CD 1C 09               CALL   printStr   
35C7   29 0D 0A 00            .CSTR   ")\r\n"   
35CB   76                     HALT      
35CC   00                     .CSTR      
35CD                EXPECTM_0_2172S43:      
35CD   E1                     POP   HL   
35CE                          ;*Macro unroll:  test "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ", 10
35CE   31 80 37               LD   SP,STACK   
35D1   CD 3E 09               CALL   init   
35D4   CD 8E 36               CALL   execStr   
35D7   30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
35FF                          ;*Macro unroll:  expect "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ",10
35FF   E1                     POP   HL   
3600   E5                     PUSH   HL   
3601   11 0A 00               LD   DE,10   
3604   B7                     OR   A   
3605   ED 52                  SBC   HL,DE   
3607   7D                     LD   A,L   
3608   B4                     OR   H   
3609   28 72                  JR   Z,expectM_0_2173S43   
360B   CD 1C 09               CALL   printStr   
360E   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
363C   CD 1C 09               CALL   printStr   
363F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
364E   21 0A 00               LD   HL,10   
3651   CD 6A 08               CALL   prtdec   
3654   CD 1C 09               CALL   printStr   
3657   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3664   E1                     POP   hl   
3665   E5                     PUSH   hl   
3666   CD 6A 08               CALL   prtdec   
3669   E1                     POP   hl   
366A   CD 1C 09               CALL   printStr   
366D   20 28 23 00            .CSTR   " (#"   
3671   CD B2 08               CALL   prthex   
3674   CD 1C 09               CALL   printStr   
3677   29 0D 0A 00            .CSTR   ")\r\n"   
367B   76                     HALT      
367C   00                     .CSTR      
367D                EXPECTM_0_2173S43:      
367D   E1                     POP   HL   
367E                             ; 
367E                             ; 
367E                             ; 
367E                             ; 
367E                             ; 
367E                             ; 
367E                             ; 
367E                             ; test "10 sqrt", 3
367E                             ; test "10 sqrt %", 1
367E                             ; test "[ 1 ] closure call", 1
367E                             ; test "[ [ 2 ] ] closure call 0%", 2
367E   CD 1C 09               CALL   printStr   
3681   44 6F 6E 65 21 00      .CSTR   "Done!"   
3687   76                     HALT      
3688                          ALIGN   2   
3688                PRINTER:      
3688   E1                     POP   hl   
3689   CD 6A 08               CALL   prtdec   
368C   DD E9                  JP   (ix)   
368E                             ; executes a null teminated string (null executes exit_)
368E                             ; the string should be immedaitely following the call
368E                EXECSTR:      ; create a root stack frame
368E   C1                     POP   bc   ; bc = code*
368F   0B                     DEC   bc   ; dec to prepare for next routine
3690   11 00 00               LD   de,0   
3693   D5                     PUSH   de   ; push fake IP
3694   D5                     PUSH   de   ; push null arg_list*
3695   D5                     PUSH   de   ; push null first_arg*
3696   D5                     PUSH   de   ; push fake BP
3697   DD E9                  JP   (ix)   
3699                          ALIGN   $100   
3700                             ; .org RAMSTART
3700                          DS   DSIZE   
3780                STACK:       
3780                          ALIGN   $100   
3800                VARS:        
3800                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
38D0                RESTARTS:      
38D0                RST08:    DS   2   
38D2                RST10:    DS   2   
38D4                RST18:    DS   2   
38D6                RST20:    DS   2   
38D8                RST28:    DS   2   
38DA                RST30:    DS   2   ; 
38DC                BAUD:     DS   2   ; 
38DE                INTVEC:   DS   2   ; 
38E0                NMIVEC:   DS   2   ; 
38E2                GETCVEC:   DS   2   ; 
38E4                PUTCVEC:   DS   2   ; 
38E6                SYSVARS:      
38E6                             ; initialised sys variables
38E6                VDATAWIDTH:   DS   2   ; 
38E8                VTIBPTR:   DS   2   ; 
38EA                VNEXT:    DS   2   ; 
38EC                VHEAPPTR:   DS   2   ; 
38EE                             ; uninitialised sys variables
38EE                VBLOCKEND:   DS   2   ; 
38F0                VPOINTER:   DS   2   ; 
38F2                VHASHSTR:   DS   2   ; 
38F4                VLASTDEF:   DS   2   ; 
38F6                VREMAIN:   DS   2   ; 
38F8                VTEMP1:   DS   2   ; 
38FA                VTEMP2:   DS   2   ; 
38FC                TBPTR:    DS   2   ; reserved for tests
38FE                          ALIGN   $100   
3900                TIB:      DS   TIBSIZE   
3A00                          ALIGN   $100   
3A00                PAD:      DS   $100   
3B00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0868 DEFINED AT LINE 1292 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1221 IN monty.asm
                    > USED AT LINE 1518 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 740 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 1303 IN monty.asm
                    > USED AT LINE 1344 IN monty.asm
                    > USED AT LINE 1368 IN monty.asm
                    > USED AT LINE 1371 IN monty.asm
                    > USED AT LINE 1549 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 798 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 803 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1585 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1079 IN monty.asm
                    > USED AT LINE 1390 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1473 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
REMAIN_:            0327 DEFINED AT LINE 241 IN monty.asm
GO_:                032A DEFINED AT LINE 243 IN monty.asm
IDENTU_:            032D DEFINED AT LINE 245 IN monty.asm
IDENTL_:            0330 DEFINED AT LINE 247 IN monty.asm
IF_:                0333 DEFINED AT LINE 249 IN monty.asm
INV_:               0336 DEFINED AT LINE 251 IN monty.asm
MUL_:               033C DEFINED AT LINE 254 IN monty.asm
NOT_:               033F DEFINED AT LINE 256 IN monty.asm
NUM_:               0344 DEFINED AT LINE 259 IN monty.asm
                    > USED AT LINE 1106 IN monty.asm
HEXNUM_:            0347 DEFINED AT LINE 261 IN monty.asm
OR_:                034A DEFINED AT LINE 263 IN monty.asm
XOR_:               034D DEFINED AT LINE 265 IN monty.asm
STRING_:            0350 DEFINED AT LINE 267 IN monty.asm
SUB_:               0353 DEFINED AT LINE 269 IN monty.asm
EQ_:                0356 DEFINED AT LINE 271 IN monty.asm
EQ0:                0360 DEFINED AT LINE 278 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
EQ1:                0361 DEFINED AT LINE 280 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
GT_:                0365 DEFINED AT LINE 284 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
DIV_:               0382 DEFINED AT LINE 306 IN monty.asm
NOP_:               0385 DEFINED AT LINE 308 IN monty.asm
ADD:                0387 DEFINED AT LINE 315 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0394 DEFINED AT LINE 323 IN monty.asm
                    > USED AT LINE 319 IN monty.asm
ADD2:               0395 DEFINED AT LINE 325 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               0397 DEFINED AT LINE 328 IN monty.asm
                    > USED AT LINE 721 IN monty.asm
                    > USED AT LINE 983 IN monty.asm
                    > USED AT LINE 1120 IN monty.asm
ADDR:               03A0 DEFINED AT LINE 336 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03AC DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B3 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 362 IN monty.asm
                    > USED AT LINE 372 IN monty.asm
OR:                 03B7 DEFINED AT LINE 354 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
XOR:                03C0 DEFINED AT LINE 363 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
XOR1:               03C1 DEFINED AT LINE 365 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
ARG:                03C9 DEFINED AT LINE 377 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03E7 DEFINED AT LINE 398 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
ARG0A:              03F0 DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 383 IN monty.asm
                    > USED AT LINE 390 IN monty.asm
ARG1:               03F5 DEFINED AT LINE 409 IN monty.asm
                    > USED AT LINE 402 IN monty.asm
ARG1A:              03FD DEFINED AT LINE 416 IN monty.asm
                    > USED AT LINE 408 IN monty.asm
ARG_LIST:           0400 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          040A DEFINED AT LINE 432 IN monty.asm
                    > USED AT LINE 450 IN monty.asm
ARG_LIST2:          0416 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 437 IN monty.asm
ARG_LIST3:          041E DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 439 IN monty.asm
                    > USED AT LINE 446 IN monty.asm
ARG_LIST4:          0421 DEFINED AT LINE 451 IN monty.asm
                    > USED AT LINE 435 IN monty.asm
ARG_LIST5:          0426 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
ARRBEGIN:           0432 DEFINED AT LINE 467 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             044E DEFINED AT LINE 481 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            0468 DEFINED AT LINE 497 IN monty.asm
                    > USED AT LINE 513 IN monty.asm
ARREND2:            0478 DEFINED AT LINE 507 IN monty.asm
                    > USED AT LINE 503 IN monty.asm
ARRINDEX:           049C DEFINED AT LINE 534 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04A4 DEFINED AT LINE 540 IN monty.asm
ARRINDEX1:          04A5 DEFINED AT LINE 542 IN monty.asm
                    > USED AT LINE 539 IN monty.asm
ARRINDEX2:          04B1 DEFINED AT LINE 551 IN monty.asm
                    > USED AT LINE 548 IN monty.asm
ASSIGN:             04B4 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
ASSIGN0:            04B6 DEFINED AT LINE 559 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
ASSIGNX:            04B7 DEFINED AT LINE 561 IN monty.asm
ASSIGN1:            04C3 DEFINED AT LINE 569 IN monty.asm
                    > USED AT LINE 566 IN monty.asm
BLOCK:              04C5 DEFINED AT LINE 572 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04C9 DEFINED AT LINE 576 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
BLOCK2:             04F5 DEFINED AT LINE 603 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
BLOCK3:             04F8 DEFINED AT LINE 606 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
BLOCK4:             0500 DEFINED AT LINE 612 IN monty.asm
                    > USED AT LINE 583 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 587 IN monty.asm
BLOCK5:             0503 DEFINED AT LINE 615 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
BLOCK6:             052B DEFINED AT LINE 634 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
BLOCKEND:           052E DEFINED AT LINE 638 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1283 IN monty.asm
BLOCKEND1:          055A DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 653 IN monty.asm
BLOCKEND2:          0566 DEFINED AT LINE 667 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
BLOCKEND3:          0578 DEFINED AT LINE 681 IN monty.asm
                    > USED AT LINE 673 IN monty.asm
CHAR:               0583 DEFINED AT LINE 692 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              0586 DEFINED AT LINE 694 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
CHAR2:              0592 DEFINED AT LINE 703 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
CHAR3:              0595 DEFINED AT LINE 706 IN monty.asm
                    > USED AT LINE 698 IN monty.asm
DIV:                0598 DEFINED AT LINE 710 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
DOT:                05AB DEFINED AT LINE 723 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05B7 DEFINED AT LINE 731 IN monty.asm
                    > USED AT LINE 728 IN monty.asm
DOT2:               05C0 DEFINED AT LINE 736 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
DOT3:               05CA DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
DOT4:               05CE DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 730 IN monty.asm
                    > USED AT LINE 735 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DIVIDE:             05D5 DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 715 IN monty.asm
DIVIDE1:            05DA DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
DIVIDE2:            05E7 DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 761 IN monty.asm
DIVIDE3:            05E8 DEFINED AT LINE 766 IN monty.asm
                    > USED AT LINE 763 IN monty.asm
EQUALS:             05EE DEFINED AT LINE 774 IN monty.asm
                    > USED AT LINE 282 IN monty.asm
LESSTHANEQ:         05F6 DEFINED AT LINE 782 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           05FB DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          0600 DEFINED AT LINE 794 IN monty.asm
                    > USED AT LINE 785 IN monty.asm
TRUE1:              0603 DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 1149 IN monty.asm
NULL1:              0609 DEFINED AT LINE 801 IN monty.asm
FALSE1:             0609 DEFINED AT LINE 802 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 1137 IN monty.asm
GO:                 060F DEFINED AT LINE 811 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
                    > USED AT LINE 1246 IN monty.asm
GO1:                0610 DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 958 IN monty.asm
                    > USED AT LINE 960 IN monty.asm
                    > USED AT LINE 1258 IN monty.asm
GO2:                0616 DEFINED AT LINE 818 IN monty.asm
                    > USED AT LINE 816 IN monty.asm
GOFUNC:             061C DEFINED AT LINE 823 IN monty.asm
GOFUNC1:            0631 DEFINED AT LINE 843 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
GOFUNC2:            0637 DEFINED AT LINE 849 IN monty.asm
                    > USED AT LINE 853 IN monty.asm
GOFUNC3:            063C DEFINED AT LINE 854 IN monty.asm
                    > USED AT LINE 848 IN monty.asm
GOBLOCK:            064A DEFINED AT LINE 867 IN monty.asm
                    > USED AT LINE 821 IN monty.asm
GOBLOCK2:           066B DEFINED AT LINE 885 IN monty.asm
                    > USED AT LINE 842 IN monty.asm
                    > USED AT LINE 877 IN monty.asm
GOBLOCK3:           0670 DEFINED AT LINE 889 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
GOBLOCK4:           0671 DEFINED AT LINE 891 IN monty.asm
                    > USED AT LINE 865 IN monty.asm
HEXNUM:             067E DEFINED AT LINE 899 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
HEXNUM1:            0681 DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 918 IN monty.asm
HEXNUM2:            0689 DEFINED AT LINE 907 IN monty.asm
                    > USED AT LINE 905 IN monty.asm
IDENTU:             069B DEFINED AT LINE 919 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
IDENTL:             06A0 DEFINED AT LINE 923 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             06A5 DEFINED AT LINE 927 IN monty.asm
                    > USED AT LINE 922 IN monty.asm
IF:                 06B2 DEFINED AT LINE 940 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IFTE:               06BE DEFINED AT LINE 950 IN monty.asm
                    > USED AT LINE 944 IN monty.asm
IFTE1:              06BF DEFINED AT LINE 952 IN monty.asm
                    > USED AT LINE 947 IN monty.asm
MUL:                06CB DEFINED AT LINE 962 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
MUL2:               06CD DEFINED AT LINE 965 IN monty.asm
MUL3:               06D5 DEFINED AT LINE 970 IN monty.asm
                    > USED AT LINE 979 IN monty.asm
NUM:                06E9 DEFINED AT LINE 985 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
NUM0:               06F2 DEFINED AT LINE 991 IN monty.asm
                    > USED AT LINE 989 IN monty.asm
NUM1:               06F3 DEFINED AT LINE 993 IN monty.asm
                    > USED AT LINE 1010 IN monty.asm
NUM2:               070B DEFINED AT LINE 1011 IN monty.asm
                    > USED AT LINE 909 IN monty.asm
                    > USED AT LINE 911 IN monty.asm
                    > USED AT LINE 996 IN monty.asm
                    > USED AT LINE 998 IN monty.asm
NUM3:               0716 DEFINED AT LINE 1019 IN monty.asm
                    > USED AT LINE 1014 IN monty.asm
REMAIN:             0719 DEFINED AT LINE 1023 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
SHIFTLEFT:          071F DEFINED AT LINE 1030 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         0727 DEFINED AT LINE 1037 IN monty.asm
                    > USED AT LINE 1040 IN monty.asm
SHIFTLEFT2:         0728 DEFINED AT LINE 1039 IN monty.asm
                    > USED AT LINE 1036 IN monty.asm
SHIFTRIGHT:         072F DEFINED AT LINE 1047 IN monty.asm
                    > USED AT LINE 288 IN monty.asm
SHIFTRIGHT1:        0737 DEFINED AT LINE 1054 IN monty.asm
                    > USED AT LINE 1058 IN monty.asm
SHIFTRIGHT2:        073B DEFINED AT LINE 1057 IN monty.asm
                    > USED AT LINE 1053 IN monty.asm
STRING:             0742 DEFINED AT LINE 1066 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
STRING1:            074B DEFINED AT LINE 1073 IN monty.asm
                    > USED AT LINE 1080 IN monty.asm
                    > USED AT LINE 1082 IN monty.asm
STRING2:            074E DEFINED AT LINE 1077 IN monty.asm
                    > USED AT LINE 1072 IN monty.asm
SUB:                076A DEFINED AT LINE 1099 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
SUB0:               0776 DEFINED AT LINE 1107 IN monty.asm
                    > USED AT LINE 1104 IN monty.asm
SUB1:               0782 DEFINED AT LINE 1114 IN monty.asm
                    > USED AT LINE 1110 IN monty.asm
SUB3:               0783 DEFINED AT LINE 1116 IN monty.asm
                    > USED AT LINE 1113 IN monty.asm
COMMAND:            078A DEFINED AT LINE 1125 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               07D3 DEFINED AT LINE 1158 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
COMMENT:            07E0 DEFINED AT LINE 1171 IN monty.asm
                    > USED AT LINE 1129 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
BYTES:              07E9 DEFINED AT LINE 1179 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
BYTES1:             07EC DEFINED AT LINE 1181 IN monty.asm
                    > USED AT LINE 1262 IN monty.asm
FUNC:               07F1 DEFINED AT LINE 1186 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
INPUT:              080D DEFINED AT LINE 1210 IN monty.asm
                    > USED AT LINE 1139 IN monty.asm
KEY:                0818 DEFINED AT LINE 1220 IN monty.asm
                    > USED AT LINE 1141 IN monty.asm
OUTPUT:             0821 DEFINED AT LINE 1229 IN monty.asm
                    > USED AT LINE 1143 IN monty.asm
REPEAT:             082A DEFINED AT LINE 1240 IN monty.asm
                    > USED AT LINE 1145 IN monty.asm
SELECT:             0832 DEFINED AT LINE 1250 IN monty.asm
                    > USED AT LINE 1147 IN monty.asm
WORDS:              083C DEFINED AT LINE 1260 IN monty.asm
                    > USED AT LINE 1151 IN monty.asm
BLOCKEXIT:          0842 DEFINED AT LINE 1264 IN monty.asm
                    > USED AT LINE 1153 IN monty.asm
BLOCKEXIT1:         0849 DEFINED AT LINE 1270 IN monty.asm
                    > USED AT LINE 1268 IN monty.asm
FILTER:             0868 DEFINED AT LINE 1290 IN monty.asm
MAP:                0868 DEFINED AT LINE 1291 IN monty.asm
PRTDEC:             086A DEFINED AT LINE 1299 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
                    > USED AT LINE 1595 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 139
PRTDEC0:            0879 DEFINED AT LINE 1310 IN monty.asm
                    > USED AT LINE 1301 IN monty.asm
PRTDEC1:            089B DEFINED AT LINE 1326 IN monty.asm
                    > USED AT LINE 1314 IN monty.asm
                    > USED AT LINE 1316 IN monty.asm
                    > USED AT LINE 1318 IN monty.asm
                    > USED AT LINE 1320 IN monty.asm
                    > USED AT LINE 1323 IN monty.asm
PRTDEC2:            089D DEFINED AT LINE 1328 IN monty.asm
                    > USED AT LINE 1331 IN monty.asm
PRTDEC3:            08AD DEFINED AT LINE 1340 IN monty.asm
                    > USED AT LINE 1335 IN monty.asm
PRTDEC4:            08AE DEFINED AT LINE 1342 IN monty.asm
                    > USED AT LINE 1339 IN monty.asm
PRTHEX:             08B2 DEFINED AT LINE 1346 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            08BD DEFINED AT LINE 1354 IN monty.asm
                    > USED AT LINE 1349 IN monty.asm
                    > USED AT LINE 1351 IN monty.asm
PRTHEX3:            08C6 DEFINED AT LINE 1362 IN monty.asm
                    > USED AT LINE 1360 IN monty.asm
PRTSTR0:            08D1 DEFINED AT LINE 1370 IN monty.asm
                    > USED AT LINE 1376 IN monty.asm
PRTSTR:             08D5 DEFINED AT LINE 1373 IN monty.asm
                    > USED AT LINE 734 IN monty.asm
                    > USED AT LINE 1440 IN monty.asm
NESTING:            08DA DEFINED AT LINE 1389 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
NESTING0:           08E4 DEFINED AT LINE 1395 IN monty.asm
                    > USED AT LINE 1391 IN monty.asm
                    > USED AT LINE 1393 IN monty.asm
NESTING1A:          08EB DEFINED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1397 IN monty.asm
NESTING1:           08EE DEFINED AT LINE 1403 IN monty.asm
                    > USED AT LINE 1394 IN monty.asm
NESTING2:           08FD DEFINED AT LINE 1412 IN monty.asm
                    > USED AT LINE 1407 IN monty.asm
                    > USED AT LINE 1409 IN monty.asm
NESTING3:           08FF DEFINED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1411 IN monty.asm
NESTING4:           090A DEFINED AT LINE 1422 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
                    > USED AT LINE 1419 IN monty.asm
PROMPT:             090C DEFINED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
CRLF:               0915 DEFINED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1562 IN monty.asm
PRINTSTR:           091C DEFINED AT LINE 1438 IN monty.asm
                    > USED AT LINE 1427 IN monty.asm
                    > USED AT LINE 1432 IN monty.asm
                    > USED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1593 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 132
PUSHARRAY:          0923 DEFINED AT LINE 1447 IN monty.asm
PUSHARRAY1:         092F DEFINED AT LINE 1456 IN monty.asm
                    > USED AT LINE 1466 IN monty.asm
PUSHARRAY2:         0935 DEFINED AT LINE 1463 IN monty.asm
                    > USED AT LINE 1455 IN monty.asm
INIT:               093E DEFINED AT LINE 1470 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1488 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0957 DEFINED AT LINE 1480 IN monty.asm
                    > USED AT LINE 1483 IN monty.asm
START:              095C DEFINED AT LINE 1486 IN monty.asm
INTERPRET:          0972 DEFINED AT LINE 1492 IN monty.asm
                    > USED AT LINE 1587 IN monty.asm
                    > USED AT LINE 1596 IN monty.asm
INTERPRET2:         097C DEFINED AT LINE 1498 IN monty.asm
                    > USED AT LINE 1542 IN monty.asm
INTERPRET3:         0984 DEFINED AT LINE 1505 IN monty.asm
                    > USED AT LINE 1514 IN monty.asm
INTERPRET4:         098A DEFINED AT LINE 1511 IN monty.asm
                    > USED AT LINE 1503 IN monty.asm
INTERPRET5:         098F DEFINED AT LINE 1517 IN monty.asm
                    > USED AT LINE 1551 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
INTERPRET6:         09A0 DEFINED AT LINE 1544 IN monty.asm
                    > USED AT LINE 1520 IN monty.asm
INTERPRET7:         09AE DEFINED AT LINE 1553 IN monty.asm
                    > USED AT LINE 1525 IN monty.asm
INTERPRET8:         09C1 DEFINED AT LINE 1567 IN monty.asm
                    > USED AT LINE 1523 IN monty.asm
NEXT:               09C9 DEFINED AT LINE 1573 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1577 IN monty.asm
NEXT1:              09D8 DEFINED AT LINE 1584 IN monty.asm
                    > USED AT LINE 1578 IN monty.asm
EXIT_:              09DF DEFINED AT LINE 1588 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
ERROR:              09E2 DEFINED AT LINE 1592 IN monty.asm
                    > USED AT LINE 1156 IN monty.asm
TESTSSTART:         0A00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2080S43:  0A65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2081S43:  0ACB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2082S43:  0B2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2083S43:  0B93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2084S43:  0BF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2085S43:  0C5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2086S43:  0CC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2087S43:  0D29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2088S43:  0D8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2089S43:  0DF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2090S43:  0E5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2091S43:  0EC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2092S43:  0F2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2093S43:  0F97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2094S43:  1005 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2095S43:  1073 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2096S43:  10DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2097S43:  114F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2098S43:  11C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2099S43:  1235 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2100S43:  12A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2101S43:  1317 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2102S43:  1393 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2103S43:  1403 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2104S43:  146F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2105S43:  14DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2106S43:  1551 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2107S43:  15CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2108S43:  1639 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2109S43:  16A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2110S43:  1711 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2111S43:  178D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2112S43:  1801 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2113S43:  186D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2114S43:  18E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2115S43:  1959 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2116S43:  19C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2117S43:  1A33 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2118S43:  1AA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2119S43:  1B0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2120S43:  1B79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2121S43:  1BE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2122S43:  1C51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2123S43:  1CBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2124S43:  1D29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2125S43:  1D95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2126S43:  1E01 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2127S43:  1E6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2128S43:  1EDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2129S43:  1F4B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2130S43:  1FBB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2131S43:  202B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2132S43:  2095 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2133S43:  20FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2134S43:  216F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  21E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  225D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  22D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  2361 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  23E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  2457 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  24C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  2539 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  25AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  261F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  2695 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  270D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  278B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  280D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  288B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  2913 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  299D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  2A2D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  2AC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  2B47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  2BD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  2C61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  2CF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  2D7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  2E1B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  2EA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  2F3B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  2FD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  306D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  3117 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  31C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  323D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  32B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  3341 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  33CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  3475 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  3521 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  35CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  367D DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3688 DEFINED AT LINE 137
EXECSTR:            368E DEFINED AT LINE 144
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3780 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 870 IN monty.asm
                    > USED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1487 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3800 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1477 IN monty.asm
RESTARTS:           38D0 DEFINED AT LINE 11 IN ram.asm
RST08:              38D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              38D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              38D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              38D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              38D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              38DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               38DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             38DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             38E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            38E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            38E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            38E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1474 IN monty.asm
VDATAWIDTH:         38E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 501 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
                    > USED AT LINE 564 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
VTIBPTR:            38E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1496 IN monty.asm
                    > USED AT LINE 1568 IN monty.asm
VNEXT:              38EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1471 IN monty.asm
VHEAPPTR:           38EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 427 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
                    > USED AT LINE 491 IN monty.asm
                    > USED AT LINE 523 IN monty.asm
                    > USED AT LINE 524 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
                    > USED AT LINE 1067 IN monty.asm
                    > USED AT LINE 1086 IN monty.asm
                    > USED AT LINE 1188 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
                    > USED AT LINE 1205 IN monty.asm
VBLOCKEND:          38EE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           38F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 337 IN monty.asm
                    > USED AT LINE 339 IN monty.asm
                    > USED AT LINE 340 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
                    > USED AT LINE 562 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
VHASHSTR:           38F2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           38F4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            38F6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 717 IN monty.asm
                    > USED AT LINE 1024 IN monty.asm
VTEMP1:             38F8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 484 IN monty.asm
                    > USED AT LINE 525 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
                    > USED AT LINE 1448 IN monty.asm
                    > USED AT LINE 1467 IN monty.asm
VTEMP2:             38FA DEFINED AT LINE 42 IN ram.asm
TBPTR:              38FC DEFINED AT LINE 43 IN ram.asm
TIB:                3900 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1502 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
                    > USED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
PAD:                3A00 DEFINED AT LINE 49 IN ram.asm
HEAP:               3B00 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 617 IN monty.asm
