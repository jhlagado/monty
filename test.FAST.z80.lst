0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 19               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 19               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 19               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 19               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 19               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 19               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 19               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 19               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 19               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 19               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 19               LD   (RST08),HL   
0094   22 D2 19               LD   (RST10),HL   
0097   22 D4 19               LD   (RST18),HL   
009A   22 D6 19               LD   (RST20),HL   
009D   22 D8 19               LD   (RST28),HL   
00A0   22 DA 19               LD   (RST30),HL   
00A3   22 DE 19               LD   (INTVEC),HL   
00A6   22 E0 19               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 19               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 19               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD A5 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_arg
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   30 09                  DW   next   ; g nNext
018E   00 1C                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available _ @ " % , ; DEL
0220   9F                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(not_)   ; !
0222   4A                     DB   lsb(string_)   ; "
0223   41                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   9F                     DB   lsb(nop_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   9F                     DB   lsb(nop_)   ; )
022A   36                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   9F                     DB   lsb(nop_)   ; , compile
022D   4D                     DB   lsb(sub_)   ; -
022E   21                     DB   lsb(dot_)   ; .
022F   8D                     DB   lsb(div_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   24                     DB   lsb(go_)   ; :
023B   9F                     DB   lsb(nop_)   ; ;
023C   7B                     DB   lsb(lt_)   ; <
023D   61                     DB   lsb(eq_)   ; =
023E   70                     DB   lsb(gt_)   ; >
023F   2D                     DB   lsb(index_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   27                     DB   lsb(identU_)   ; A
0242   27                     DB   lsb(identU_)   ; B
0243   27                     DB   lsb(identU_)   ; C
0244   27                     DB   lsb(identU_)   ; D
0245   27                     DB   lsb(identU_)   ; E
0246   27                     DB   lsb(identU_)   ; F
0247   27                     DB   lsb(identU_)   ; G
0248   27                     DB   lsb(identU_)   ; h
0249   27                     DB   lsb(identU_)   ; I
024A   27                     DB   lsb(identU_)   ; J
024B   27                     DB   lsb(identU_)   ; K
024C   27                     DB   lsb(identU_)   ; L
024D   27                     DB   lsb(identU_)   ; M
024E   27                     DB   lsb(identU_)   ; N
024F   27                     DB   lsb(identU_)   ; O
0250   27                     DB   lsb(identU_)   ; p
0251   27                     DB   lsb(identU_)   ; Q
0252   27                     DB   lsb(identU_)   ; R
0253   27                     DB   lsb(identU_)   ; S
0254   27                     DB   lsb(identU_)   ; T
0255   27                     DB   lsb(identU_)   ; U
0256   27                     DB   lsb(identU_)   ; V
0257   27                     DB   lsb(identU_)   ; W
0258   27                     DB   lsb(identU_)   ; X
0259   27                     DB   lsb(identU_)   ; Y
025A   27                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(array_)   ; [
025C   9C                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrayEnd_)   ; ]
025E   47                     DB   lsb(xor_)   ; ^
025F   9F                     DB   lsb(nop_)   ; _
0260   4A                     DB   lsb(string_)   ; `     used for testing string   	
0261   2A                     DB   lsb(identL_)   ; a
0262   2A                     DB   lsb(identL_)   ; b
0263   2A                     DB   lsb(identL_)   ; c
0264   2A                     DB   lsb(identL_)   ; d
0265   2A                     DB   lsb(identL_)   ; e
0266   2A                     DB   lsb(identL_)   ; f
0267   2A                     DB   lsb(identL_)   ; g
0268   2A                     DB   lsb(identL_)   ; h
0269   2A                     DB   lsb(identL_)   ; i
026A   2A                     DB   lsb(identL_)   ; j
026B   2A                     DB   lsb(identL_)   ; k
026C   2A                     DB   lsb(identL_)   ; l
026D   2A                     DB   lsb(identL_)   ; m
026E   2A                     DB   lsb(identL_)   ; n
026F   2A                     DB   lsb(identL_)   ; o
0270   2A                     DB   lsb(identL_)   ; p
0271   2A                     DB   lsb(identL_)   ; q
0272   2A                     DB   lsb(identL_)   ; r
0273   2A                     DB   lsb(identL_)   ; s
0274   2A                     DB   lsb(identL_)   ; t
0275   2A                     DB   lsb(identL_)   ; u
0276   2A                     DB   lsb(identL_)   ; v
0277   2A                     DB   lsb(identL_)   ; w
0278   2A                     DB   lsb(identL_)   ; x
0279   2A                     DB   lsb(identL_)   ; y
027A   2A                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   44                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   30                     DB   lsb(inv_)   ; ~
027F   9F                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 AE 03               JP   addr   
0309                AND_:        
0309   C3 BA 03               JP   and   
030C                ARG_:        
030C   C3 D7 03               JP   arg   
030F                ARG_LIST_:      
030F   C3 0E 04               JP   arg_list   
0312                ARRAY_:      
0312   C3 40 04               JP   array   
0315                ARRAYEND_:      
0315   C3 5C 04               JP   arrayEnd   
0318                BLOCK_:      
0318   C3 CB 04               JP   block   
031B                BLOCKEND_:      
031B   C3 0C 05               JP   blockend   
031E                CHAR_:       
031E   C3 65 05               JP   char   
0321                DOT_:        
0321   C3 94 05               JP   dot   
0324                GO_:         
0324   C3 39 06               JP   go   
0327                IDENTU_:      
0327   C3 BD 06               JP   identU   
032A                IDENTL_:      
032A   C3 C2 06               JP   identL   
032D                             ; addr index -- addr2
032D                INDEX_:      
032D   C3 E6 06               JP   index   
0330                INV_:        ; Bitwise INVert the top member of the stack
0330   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0333   C3 CF 03               JP   xor1   
0336                MUL_:        
0336   C3 12 07               JP   mul   
0339                NOT_:        ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 2E                  JR   eq1   
033E                NUM_:        
033E   C3 2E 07               JP   num   
0341                HEXNUM_:      
0341   C3 A0 06               JP   hexnum   
0344                OR_:         
0344   C3 C5 03               JP   or   
0347                XOR_:        
0347   C3 CE 03               JP   xor   
034A                STRING_:      
034A   C3 8A 07               JP   string   
034D                SUB_:        ; negative sign or subtract
034D   03                     INC   bc   ; check if sign of a number
034E   0A                     LD   a,(bc)   
034F   0B                     DEC   bc   
0350   FE 30                  CP   "0"   
0352   38 05                  JR   c,sub1   
0354   FE 3A                  CP   "9"+1   
0356   DA 3E 03               JP   c,num_   
0359                SUB1:        ; Subtract the value 2nd on stack from top of stack
0359   D1                     POP   de   
035A   E1                     POP   hl   ; Entry point for INVert
035B                SUB2:        
035B   B7                     OR   a   ; Entry point for NEGate
035C   ED 52                  SBC   hl,de   
035E   E5                     PUSH   hl   
035F   DD E9                  JP   (ix)   
0361                EQ_:         
0361   03                     INC   bc   
0362   0A                     LD   a,(bc)   ; is it == ?
0363   FE 3D                  CP   "="   
0365   28 04                  JR   z,eq0   ; no its equality
0367   0B                     DEC   bc   
0368   C3 BB 04               JP   assign   ; no its assignment
036B                EQ0:         
036B   E1                     POP   hl   
036C                EQ1:         
036C   D1                     POP   de   
036D   C3 BE 05               JP   equals   
0370                GT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3E                  CP   ">"   
0374   CA 77 07               JP   z,shiftRight   
0377   D1                     POP   de   
0378   E1                     POP   hl   
0379   18 09                  JR   lt1   
037B                LT_:         
037B   03                     INC   bc   
037C   0A                     LD   a,(bc)   
037D   FE 3C                  CP   "<"   
037F   CA 67 07               JP   z,shiftLeft   
0382   E1                     POP   hl   
0383   D1                     POP   de   
0384                LT1:         
0384   FE 3D                  CP   "="   
0386   CA C6 05               JP   z,lessthaneq   
0389   0B                     DEC   bc   
038A   C3 CB 05               JP   lessthan   
038D                DIV_:        
038D   D1                     POP   de   ; get first value
038E   E1                     POP   hl   ; get 2nd value
038F   C5                     PUSH   bc   ; preserve the IP
0390   44 4D                  LD   bc,hl   
0392   CD C6 07               CALL   divide   
0395   22 E6 19               LD   (vFrac),hl   
0398   C1                     POP   bc   
0399   D5                     PUSH   de   ; push result
039A   DD E9                  JP   (ix)   
039C                COMMAND_:      
039C   C3 7A 05               JP   command   
039F                NOP_:        
039F   DD E9                  JP   (ix)   
03A1                             ;*******************************************************************
03A1                             ; word operators
03A1                             ;*******************************************************************
03A1                ABS1:        
03A1   E1                     POP   hl   
03A2   CB 7C                  BIT   7,h   
03A4   C8                     RET   z   
03A5   AF                     XOR   a   
03A6   95                     SUB   l   
03A7   6F                     LD   l,a   
03A8   9F                     SBC   a,a   
03A9   94                     SUB   h   
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                             ; -- ptr
03AE                ADDR:        
03AE   2A EC 19               LD   hl,(vPointer)   
03B1   E5                     PUSH   hl   
03B2   21 EC 19               LD   hl,vPointer   
03B5   22 EC 19               LD   (vPointer),hl   
03B8   DD E9                  JP   (ix)   
03BA                AND:         
03BA   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   A5                     AND   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   A4                     AND   h   
03C1                AND1:        
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                OR:          
03C5   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C6   E1                     POP   hl   
03C7   7B                     LD   a,e   
03C8   B5                     OR   l   
03C9   6F                     LD   l,a   
03CA   7A                     LD   a,d   
03CB   B4                     OR   h   
03CC   18 F3                  JR   and1   
03CE                XOR:         
03CE   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CF                XOR1:        
03CF   E1                     POP   hl   
03D0   7B                     LD   a,e   
03D1   AD                     XOR   l   
03D2   6F                     LD   l,a   
03D3   7A                     LD   a,d   
03D4   AC                     XOR   h   
03D5   18 EA                  JR   and1   
03D7                             ; $a .. $z
03D7                             ; -- value
03D7                             ; returns value of arg
03D7                ARG:         
03D7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DA   FD 56 05               LD   d,(iy+5)   
03DD   EB                     EX   de,hl   
03DE   7D                     LD   a,l   ; arg_list* == null, skip
03DF   B4                     OR   h   
03E0   28 1C                  JR   z,arg0a   
03E2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E3   2B                     DEC   hl   
03E4   7E                     LD   a,(hl)   
03E5   23                     INC   hl   
03E6   23                     INC   hl   
03E7   B7                     OR   a   
03E8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03EA   5F                     LD   e,a   ; e = a = num_args
03EB   03                     INC   bc   ; a = next char = arg_name
03EC   0A                     LD   a,(bc)   
03ED   C5                     PUSH   bc   ; save IP
03EE   43                     LD   b,e   ; b = e = num_args
03EF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F2   FD 56 03               LD   d,(iy+3)   
03F5                ARG0:        
03F5   1B                     DEC   de   ; a = arg_name, de = next arg*
03F6   1B                     DEC   de   
03F7   BE                     CP   (hl)   
03F8   28 09                  JR   z,arg1   
03FA   23                     INC   hl   ; hl = next arg_list*
03FB   10 F8                  DJNZ   arg0   
03FD   C1                     POP   bc   ; no match, restore IP
03FE                ARG0A:       
03FE   11 00 00               LD   de,0   ; return 0
0401   18 08                  JR   arg1a   
0403                ARG1:        
0403   C1                     POP   bc   ; restore IP
0404   EB                     EX   de,hl   ; hl = arg*
0405   22 EC 19               LD   (vPointer),hl   ; store arg* in setter
0408   5E                     LD   e,(hl)   
0409   23                     INC   hl   
040A   56                     LD   d,(hl)   ; de = arg
040B                ARG1A:       
040B   D5                     PUSH   de   ; push arg
040C   DD E9                  JP   (ix)   
040E                             ; arg_list - parses input (ab:c)
040E                             ; names after the : represent uninitialised locals
040E                             ; return values are the state of the stack after the block ends
040E                ARG_LIST:      
040E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0411   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
0414   23                     INC   hl   ; skip length field to start
0415   23                     INC   hl   
0416   E5                     PUSH   hl   ; save start of arg_list
0417   03                     INC   bc   ; point to next char
0418                ARG_LIST1:      
0418   0A                     LD   a,(bc)   
0419   FE 29                  CP   ")"   ; ) is the arg_list terminator
041B   28 12                  JR   z,arg_list4   
041D   FE 3A                  CP   ":"   
041F   20 03                  JR   nz,arg_list2   
0421   14                     INC   d   ; non zero value local count acts as flag
0422   20 08                  JR   nz,arg_list3   
0424                ARG_LIST2:      
0424   77                     LD   (hl),a   
0425   23                     INC   hl   
0426   1C                     INC   e   ; increase arg count
0427   AF                     XOR   a   
0428   B2                     OR   d   
0429   28 01                  JR   z,arg_list3   
042B   14                     INC   d   ; if d > 0 increase local count
042C                ARG_LIST3:      
042C   03                     INC   bc   ; point to next char
042D   18 E9                  JR   arg_list1   
042F                ARG_LIST4:      
042F   AF                     XOR   a   
0430   B2                     OR   d   
0431   28 01                  JR   z,arg_list5   
0433   15                     DEC   d   ; remove initial inc
0434                ARG_LIST5:      
0434   23                     INC   hl   
0435   22 F4 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0438   E1                     POP   hl   ; hl = start of arg_list
0439   E5                     PUSH   hl   ; return start of string
043A   2B                     DEC   hl   ; write length bytes to length field at start - 2
043B   72                     LD   (hl),d   
043C   2B                     DEC   hl   
043D   73                     LD   (hl),e   
043E   DD E9                  JP   (ix)   
0440                ARRAY:       
0440   11 00 00               LD   de,0   ; create stack frame
0443   D5                     PUSH   de   ; push null for IP
0444   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0447   FD 56 05               LD   d,(iy+5)   ; 
044A   D5                     PUSH   de   ; 
044B   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
044E   FD 56 03               LD   d,(iy+3)   ; 
0451   D5                     PUSH   de   ; 
0452   FD E5                  PUSH   iy   ; push BP
0454   FD 21 00 00            LD   iy,0   ; BP = SP
0458   FD 39                  ADD   iy,sp   
045A   DD E9                  JP   (ix)   
045C                ARRAYEND:      
045C   FD 54                  LD   d,iyh   ; de = BP
045E   FD 5D                  LD   e,iyl   
0460   ED 43 F6 19            LD   (vTemp1),bc   ; save IP
0464   62 6B                  LD   hl,de   ; hl = de = BP
0466   B7                     OR   a   
0467   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0469   CB 3C                  SRL   h   ; 
046B   CB 1D                  RR   l   
046D   44 4D                  LD   bc,hl   ; bc = count
046F   2A F4 19               LD   hl,(vHeapPtr)   ; hl = array[-2]
0472   71                     LD   (hl),c   ; write num items in length word
0473   23                     INC   hl   
0474   70                     LD   (hl),b   
0475   23                     INC   hl   ; hl = array[0], bc = count
0476                             ; de = BP, hl = array[0], bc = count
0476   3A E8 19               LD   a,(vDataWidth)   ; vDataWidth=1?
0479   FE 01                  CP   1   
047B   20 10                  JR   nz,arrayEnd2   
047D                ARRAYEND1:      ; byte
047D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0480   77                     LD   (hl),a   ; write a to array item
0481   23                     INC   hl   ; move to next byte in array
0482   FD 2B                  DEC   iy   ; move tho next word on stack
0484   FD 2B                  DEC   iy   
0486   0B                     DEC   bc   ; dec items count
0487   79                     LD   a,c   ; if not zero loop
0488   B0                     OR   b   
0489   20 F2                  JR   nz,arrayEnd1   
048B   18 13                  JR   arrayEnd3   
048D                ARRAYEND2:      ; word
048D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0490   77                     LD   (hl),a   ; write lsb of array item
0491   23                     INC   hl   ; move to msb of array item
0492   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0495   77                     LD   (hl),a   ; write msb of array item
0496   23                     INC   hl   ; move to next word in array
0497   FD 2B                  DEC   iy   ; move to next word on stack
0499   FD 2B                  DEC   iy   
049B   0B                     DEC   bc   ; dec items count
049C   79                     LD   a,c   ; if not zero loop
049D   B0                     OR   b   
049E   20 ED                  JR   nz,arrayEnd2   
04A0                ARRAYEND3:      
04A0   EB                     EX   de,hl   ; de = end of array, hl = BP
04A1   F9                     LD   sp,hl   ; sp = BP
04A2   E1                     POP   hl   ; de = end of array, hl = old BP
04A3   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
04A4   FD 62                  LD   iyh,d   
04A6   FD 6B                  LD   iyl,e   
04A8   D1                     POP   de   ; pop arg_list (discard)
04A9   D1                     POP   de   ; pop ScopeBP (discard)
04AA   D1                     POP   de   ; pop IP (discard)
04AB   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = array[-2]
04AF   22 F4 19               LD   (vHeapPtr),hl   ; move heapPtr to end of array
04B2   ED 4B F6 19            LD   bc,(vTemp1)   ; restore IP
04B6   13                     INC   de   ; de = array[0]
04B7   13                     INC   de   
04B8   D5                     PUSH   de   ; return array[0]
04B9   DD E9                  JP   (ix)   
04BB                             ; value _oldValue --            ; uses address in vPointer
04BB                ASSIGN:      
04BB   E1                     POP   hl   ; discard last accessed value
04BC   D1                     POP   de   ; new value
04BD   2A EC 19               LD   hl,(vPointer)   
04C0   73                     LD   (hl),e   
04C1   3A E8 19               LD   a,(vDataWidth)   
04C4   3D                     DEC   a   ; is it byte?
04C5   28 02                  JR   z,assign1   
04C7   23                     INC   hl   
04C8   72                     LD   (hl),d   
04C9                ASSIGN1:      
04C9   DD E9                  JP   (ix)   
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   $22   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   0B                     DEC   bc   ; balanced, exit
050A   DD E9                  JP   (ix)   
050C                BLOCKEND:      
050C   D9                     EXX      
050D   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0510   FD 56 01               LD   d,(iy+1)   
0513   FD 4E 06               LD   c,(iy+6)   ; bc = IP
0516   FD 46 07               LD   b,(iy+7)   
0519   D9                     EXX      
051A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
051D   FD 56 03               LD   d,(iy+3)   
0520   EB                     EX   de,hl   
0521   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0524   FD 56 01               LD   d,(iy+1)   
0527                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
0527   13                     INC   de   ; for carry flag <=
0528   B7                     OR   a   
0529   ED 52                  SBC   hl,de   
052B   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
052D   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
052F   FD 5D                  LD   e,iyl   
0531   21 08 00               LD   hl,8   
0534   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0535   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0536   18 0C                  JR   blockend2   
0538                BLOCKEND1:      ; same scope
0538   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
053B   FD 56 03               LD   d,(iy+3)   
053E   EB                     EX   de,hl   
053F   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0541   FD 5D                  LD   e,iyl   
0543   EB                     EX   de,hl   
0544                BLOCKEND2:      
0544   44 4D                  LD   bc,hl   ; bc = hl = BP
0546   B7                     OR   a   ; hl = BP - SP = count
0547   ED 72                  SBC   hl,sp   
0549   C5                     PUSH   bc   ; bc = count, hl = BP
054A   44 4D                  LD   bc,hl   
054C   E1                     POP   hl   
054D   2B                     DEC   hl   ; hl = BP-1
054E   1B                     DEC   de   ; de = args*-1
054F   ED B8                  LDDR      
0551   13                     INC   de   ; hl = new tos
0552   EB                     EX   de,hl   
0553   F9                     LD   sp,hl   ; sp = new tos
0554   D9                     EXX      ; bc = IP, iy = oldBP
0555   D5                     PUSH   de   
0556   C5                     PUSH   bc   
0557   D9                     EXX      
0558   C1                     POP   bc   
0559   FD E1                  POP   iy   
055B   DD E9                  JP   (ix)   
055D                BYTES:       
055D   21 01 00               LD   hl,1   
0560                BYTES1:      
0560   22 E8 19               LD   (vDataWidth),hl   
0563   DD E9                  JP   (ix)   
0565                CHAR:        
0565   21 00 00               LD   hl,0   ; if "" is empty or null
0568                CHAR1:       
0568   03                     INC   bc   ; point to next char
0569   0A                     LD   a,(bc)   
056A   FE 27                  CP   "'"   ; ' is the terminator
056C   28 09                  JR   z,char3   
056E   FE 5C                  CP   $5c   ; \ is the escape
0570   20 02                  JR   nz,char2   
0572   03                     INC   bc   
0573   0A                     LD   a,(bc)   
0574                CHAR2:       
0574   6F                     LD   l,a   
0575   18 F1                  JR   char1   
0577                CHAR3:       
0577   E5                     PUSH   hl   
0578   DD E9                  JP   (ix)   
057A                COMMAND:      
057A   03                     INC   bc   
057B   0A                     LD   a,(bc)   
057C   FE 5C                  CP   $5C   ; \\ comment
057E   28 0B                  JR   z,comment   
0580   FE 66                  CP   "f"   ; func
0582   CA E5 05               JP   z,func   
0585   21 01 00               LD   hl,1   ; error 1: unknown command
0588   C3 53 09               JP   error   
058B                COMMENT:      
058B   03                     INC   bc   ; point to next char
058C   0A                     LD   a,(bc)   
058D   FE 20                  CP   " "   ; terminate on any char less than SP
058F   30 FA                  JR   nc,comment   
0591   0B                     DEC   bc   
0592   DD E9                  JP   (ix)   
0594                DOT:         
0594   E1                     POP   hl   
0595   03                     INC   bc   
0596   0A                     LD   a,(bc)   
0597   FE 68                  CP   "h"   
0599   20 05                  JR   nz,dot1   
059B   CD 27 08               CALL   prthex   
059E   18 17                  JR   dot4   
05A0                DOT1:        
05A0   FE 73                  CP   "s"   
05A2   20 05                  JR   nz,dot2   
05A4   CD 4A 08               CALL   prtstr   
05A7   18 0E                  JR   dot4   
05A9                DOT2:        
05A9   FE 63                  CP   "c"   
05AB   20 06                  JR   nz,dot3   
05AD   7D                     LD   a,l   
05AE   CD 85 00               CALL   putchar   
05B1   18 04                  JR   dot4   
05B3                DOT3:        
05B3   0B                     DEC   bc   
05B4   CD DF 07               CALL   prtdec   
05B7                DOT4:        
05B7   3E 20                  LD   a," "   
05B9   CD 85 00               CALL   putchar   
05BC   DD E9                  JP   (ix)   
05BE                             ; hl = value1, de = value2
05BE                             ; hl = result
05BE                EQUALS:      
05BE   B7                     OR   a   ; reset the carry flag
05BF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05C1   28 10                  JR   z,true1   
05C3   C3 D9 05               JP   false1   
05C6                             ; hl = value1 de = value2
05C6                             ; hl = result
05C6                LESSTHANEQ:      
05C6   B7                     OR   a   
05C7   ED 52                  SBC   hl,de   
05C9   18 05                  JR   lessthan1   
05CB                             ; hl = value1 de = value2
05CB                             ; hl = result
05CB                LESSTHAN:      
05CB   B7                     OR   a   
05CC   ED 52                  SBC   hl,de   
05CE   28 09                  JR   z,false1   
05D0                LESSTHAN1:      
05D0   FA D9 05               JP   m,false1   
05D3                TRUE1:       
05D3   21 FF FF               LD   hl,TRUE   
05D6   E5                     PUSH   hl   
05D7   DD E9                  JP   (ix)   
05D9                NULL1:       
05D9                FALSE1:      
05D9   21 00 00               LD   hl,FALSE   
05DC   E5                     PUSH   hl   
05DD   DD E9                  JP   (ix)   
05DF                FRAC:        
05DF   2A E6 19               LD   hl,(vFrac)   
05E2   E5                     PUSH   hl   
05E3   DD E9                  JP   (ix)   
05E5                             ; arg_list* block* -- ptr
05E5                FUNC:        
05E5   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heapptr
05E8   D1                     POP   de   ; hl = heapPtr, de = block
05E9   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
05EA   E3                     EX   (sp),hl   
05EB   EB                     EX   de,hl   
05EC   73                     LD   (hl),e   ; compile arg_list*
05ED   23                     INC   hl   
05EE   72                     LD   (hl),d   
05EF   23                     INC   hl   
05F0   D1                     POP   de   ; de = block*
05F1   13                     INC   de   
05F2   C5                     PUSH   bc   ; (sp) = IP
05F3   06 01                  LD   b,1   ; b = nesting
05F5                FUNC1:       
05F5   1A                     LD   a,(de)   
05F6   13                     INC   de   
05F7   77                     LD   (hl),a   
05F8   23                     INC   hl   
05F9   FE 29                  CP   ")"   
05FB   28 2D                  JR   z,func4   
05FD   FE 7D                  CP   "}"   
05FF   28 29                  JR   z,func4   
0601   FE 5D                  CP   "]"   
0603   28 25                  JR   z,func4   
0605   FE 28                  CP   "("   
0607   28 16                  JR   z,func2   
0609   FE 7B                  CP   "{"   
060B   28 12                  JR   z,func2   
060D   FE 5B                  CP   "["   
060F   28 0E                  JR   z,func2   
0611   FE 22                  CP   DQUOTE   
0613   28 0D                  JR   z,func3   
0615   FE 27                  CP   "'"   
0617   28 09                  JR   z,func3   
0619   FE 60                  CP   "`"   
061B   28 05                  JR   z,func3   
061D   18 D6                  JR   func1   
061F                FUNC2:       
061F   04                     INC   b   
0620   18 D3                  JR   func1   
0622                FUNC3:       
0622   3E 80                  LD   a,$80   
0624   A8                     XOR   b   
0625   47                     LD   b,a   
0626   20 CD                  JR   nz,func1   
0628   18 03                  JR   func4a   
062A                FUNC4:       
062A   05                     DEC   b   
062B   20 C8                  JR   nz,func1   ; get the next element
062D                FUNC4A:      
062D   23                     INC   hl   
062E   C1                     POP   bc   ; de = defstart, hl = IP
062F   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = defstart
0633   D5                     PUSH   de   
0634   22 F4 19               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0637   DD E9                  JP   (ix)   
0639                             ; execute a block of code which ends with }
0639                             ; creates a root scope if BP == stack
0639                             ; else uses outer scope
0639                GO:          
0639   D1                     POP   de   ; de = block*
063A   7B                     LD   a,e   ; if block* == null, exit
063B   B2                     OR   d   
063C   20 02                  JR   nz,go1   
063E   DD E9                  JP   (ix)   
0640                GO1:         
0640   1A                     LD   a,(de)   
0641   FE 7B                  CP   "{"   
0643   C2 7A 06               JP   nz,go10   
0646   13                     INC   de   
0647   C5                     PUSH   bc   ; push IP
0648   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
064B   FD 44                  LD   b,iyh   
064D   FD 4D                  LD   c,iyl   
064F   B7                     OR   a   ; hl = stack - BP = root_scope
0650   ED 42                  SBC   hl,bc   
0652   7D                     LD   a,l   ; if root_scope, skip
0653   B4                     OR   h   
0654   28 11                  JR   z,go2   
0656   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0659   FD 46 05               LD   b,(iy+5)   
065C   C5                     PUSH   bc   
065D   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0660   FD 46 03               LD   b,(iy+3)   
0663   60 69                  LD   hl,bc   
0665   18 05                  JR   go3   
0667                GO2:         
0667   E5                     PUSH   hl   ; push arg_list (null)
0668   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
066B   39                     ADD   hl,sp   
066C                GO3:         
066C   E5                     PUSH   hl   ; push first_arg
066D   FD E5                  PUSH   iy   ; push BP
066F   FD 21 00 00            LD   iy,0   ; BP = SP
0673   FD 39                  ADD   iy,sp   
0675   42 4B                  LD   bc,de   ; bc = de = block*-1
0677   0B                     DEC   bc   
0678   DD E9                  JP   (ix)   
067A                GO10:        ; execute code at pointer
067A   EB                     EX   de,hl   ; hl = code*
067B   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
067C   23                     INC   hl   
067D   56                     LD   d,(hl)   
067E   23                     INC   hl   
067F   EB                     EX   de,hl   
0680   7D                     LD   a,l   ; if arg_list* != null skip
0681   B4                     OR   h   
0682   20 03                  JR   nz,go11   
0684   C5                     PUSH   bc   ; push IP
0685   18 E0                  JR   go2   
0687                GO11:        
0687   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0688   7E                     LD   a,(hl)   
0689   23                     INC   hl   
068A   B7                     OR   a   
068B   28 05                  JR   z,go13   
068D                GO12:        
068D   3B                     DEC   sp   
068E   3B                     DEC   sp   
068F   3D                     DEC   a   
0690   20 FB                  JR   nz,go12   
0692                GO13:        
0692   C5                     PUSH   bc   ; push IP
0693   E5                     PUSH   hl   ; push arg_list*
0694   2B                     DEC   hl   ; hl = num_args*
0695   2B                     DEC   hl   
0696   7E                     LD   a,(hl)   ; hl = num_args * 2
0697   87                     ADD   a,a   
0698   C6 04                  ADD   a,4   ; offset for IP and arg_list
069A   6F                     LD   l,a   
069B   26 00                  LD   h,$0   
069D   39                     ADD   hl,sp   ; hl = first_arg*
069E   18 CC                  JR   go3   
06A0                HEXNUM:      
06A0   21 00 00               LD   hl,0   ; Clear hl to accept the number
06A3                HEXNUM1:      
06A3   03                     INC   bc   
06A4   0A                     LD   a,(bc)   ; Get the character which is a numeral
06A5   CB 77                  BIT   6,a   ; is it uppercase alpha?
06A7   28 02                  JR   z,hexnum2   ; no a decimal
06A9   D6 07                  SUB   7   ; sub 7  to make $a - $F
06AB                HEXNUM2:      
06AB   D6 30                  SUB   $30   ; form decimal digit
06AD   DA 50 07               JP   c,num2   
06B0   FE 10                  CP   $0F+1   
06B2   D2 50 07               JP   nc,num2   
06B5   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06B6   29                     ADD   hl,hl   ; 4X
06B7   29                     ADD   hl,hl   ; 8X
06B8   29                     ADD   hl,hl   ; 16X
06B9   85                     ADD   a,l   ; add into bottom of hl
06BA   6F                     LD   l,a   
06BB   18 E6                  JR   hexnum1   
06BD                IDENTU:      
06BD   0A                     LD   a,(bc)   ; a = identifier char
06BE   D6 41                  SUB   "A"   ; "A" = 0
06C0   18 05                  JR   ident1   
06C2                IDENTL:      
06C2   0A                     LD   a,(bc)   
06C3   D6 61                  SUB   "a"   
06C5   C6 1A                  ADD   a,26   
06C7                IDENT1:      
06C7   87                     ADD   a,a   ; l = a * 2
06C8   6F                     LD   l,a   
06C9   26 19                  LD   h,msb(vars)   
06CB   22 EC 19               LD   (vPointer),hl   ; store address in setter
06CE   5E                     LD   e,(hl)   
06CF   23                     INC   hl   
06D0   56                     LD   d,(hl)   
06D1   D5                     PUSH   de   
06D2   DD E9                  JP   (ix)   
06D4                             ; if
06D4                             ; condition then -- value
06D4                IF:          
06D4   11 00 00               LD   de,0   ; NUL pointer for else
06D7   18 01                  JR   ifte1   
06D9                             ; ifte
06D9                             ; condition then else -- value
06D9                IFTE:        
06D9   D1                     POP   de   ; de = else
06DA                IFTE1:       
06DA   E1                     POP   hl   ; hl = then
06DB   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06DC   7C                     LD   a,h   
06DD   B5                     OR   l   
06DE   E1                     POP   hl   ; hl = then
06DF   CA 39 06               JP   z,go   ; if z de = else
06E2   EB                     EX   de,hl   ; condition = false, hl = else
06E3   C3 39 06               JP   go   
06E6                             ; index of an array, based on vDataWidth
06E6                             ; array num -- value    ; also sets vPointer to address
06E6                INDEX:       
06E6   E1                     POP   hl   ; hl = index
06E7   D1                     POP   de   ; de = array
06E8   3A E8 19               LD   a,(vDataWidth)   ; a = data width
06EB   3D                     DEC   a   
06EC   28 01                  JR   z,index1   
06EE                INDEX0:      
06EE   29                     ADD   hl,hl   ; if data width = 2 then double
06EF                INDEX1:      
06EF   19                     ADD   hl,de   ; add addr
06F0   22 EC 19               LD   (vPointer),hl   ; store address in setter
06F3   16 00                  LD   d,0   
06F5   5E                     LD   e,(hl)   
06F6   B7                     OR   a   ; check data width again
06F7   28 02                  JR   z,index2   
06F9   23                     INC   hl   
06FA   56                     LD   d,(hl)   
06FB                INDEX2:      
06FB   D5                     PUSH   de   
06FC   DD E9                  JP   (ix)   
06FE                             ; Z80 port input
06FE                             ; port -- value
06FE                INPUT:       
06FE   E1                     POP   hl   
06FF   59                     LD   e,c   ; save IP
0700   4D                     LD   c,l   
0701   ED 68                  IN   l,(c)   
0703   26 00                  LD   h,0   
0705   4B                     LD   c,e   ; restore IP
0706   E5                     PUSH   hl   
0707   DD E9                  JP   (ix)   
0709                KEY:         
0709   CD 81 00               CALL   getchar   
070C   26 00                  LD   h,0   
070E   6F                     LD   l,a   
070F   E5                     PUSH   hl   
0710   DD E9                  JP   (ix)   
0712                MUL:         
0712   D1                     POP   de   ; get first value
0713   E1                     POP   hl   
0714   C5                     PUSH   bc   ; Preserve the IP
0715   44                     LD   b,h   ; bc = 2nd value
0716   4D                     LD   c,l   
0717   21 00 00               LD   hl,0   
071A   3E 10                  LD   a,16   
071C                MUL2:        
071C   29                     ADD   hl,hl   
071D   CB 13                  RL   e   
071F   CB 12                  RL   d   
0721   30 04                  JR   nc,$+6   
0723   09                     ADD   hl,bc   
0724   30 01                  JR   nc,$+3   
0726   13                     INC   de   
0727   3D                     DEC   a   
0728   20 F2                  JR   nz,mul2   
072A   C1                     POP   bc   ; Restore the IP
072B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
072C   DD E9                  JP   (ix)   
072E                NUM:         
072E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0731   0A                     LD   a,(bc)   ; Get numeral or -
0732   FE 2D                  CP   "-"   
0734   20 01                  JR   nz,num0   
0736   03                     INC   bc   ; move to next char, no flags affected
0737                NUM0:        
0737   08                     EX   af,af'   ; save zero flag = 0 for later
0738                NUM1:        
0738   0A                     LD   a,(bc)   ; read digit
0739   D6 30                  SUB   "0"   ; less than 0?
073B   38 13                  JR   c,num2   ; not a digit, exit loop
073D   FE 0A                  CP   10   ; greater that 9?
073F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0741   03                     INC   bc   ; inc IP
0742   54 5D                  LD   de,hl   ; multiply hl * 10
0744   29                     ADD   hl,hl   
0745   29                     ADD   hl,hl   
0746   19                     ADD   hl,de   
0747   29                     ADD   hl,hl   
0748   85                     ADD   a,l   ; add digit in a to hl
0749   6F                     LD   l,a   
074A   3E 00                  LD   a,0   
074C   8C                     ADC   a,h   
074D   67                     LD   h,a   
074E   18 E8                  JR   num1   
0750                NUM2:        
0750   0B                     DEC   bc   
0751   08                     EX   af,af'   ; restore zero flag
0752   20 07                  JR   nz,num3   
0754   EB                     EX   de,hl   ; negate the value of hl
0755   21 00 00               LD   hl,0   
0758   B7                     OR   a   ; jump to sub2
0759   ED 52                  SBC   hl,de   
075B                NUM3:        
075B   E5                     PUSH   hl   ; Put the number on the stack
075C   DD E9                  JP   (ix)   ; and process the next character
075E                             ; Z80 port output
075E                             ; value port --
075E                OUTPUT:      
075E   E1                     POP   hl   
075F   59                     LD   e,c   ; save IP
0760   4D                     LD   c,l   
0761   E1                     POP   hl   
0762   ED 69                  OUT   (c),l   
0764   4B                     LD   c,e   ; restore IP
0765   DD E9                  JP   (ix)   
0767                             ; shiftLeft
0767                             ; value count -- value2          shift left count places
0767                SHIFTLEFT:      
0767   50 59                  LD   de,bc   ; save IP
0769   C1                     POP   bc   ; bc = count
076A   41                     LD   b,c   ; b = loop counter
076B   E1                     POP   hl   
076C   04                     INC   b   ; test for counter=0 case
076D   18 01                  JR   shiftLeft2   
076F                SHIFTLEFT1:      
076F   29                     ADD   hl,hl   ; left shift hl
0770                SHIFTLEFT2:      
0770   10 FD                  DJNZ   shiftLeft1   
0772   E5                     PUSH   hl   
0773   42 4B                  LD   bc,de   ; restore IP
0775   DD E9                  JP   (ix)   
0777                             ; shiftRight
0777                             ; value count -- value2          shift left count places
0777                SHIFTRIGHT:      
0777   50 59                  LD   de,bc   ; save IP
0779   C1                     POP   bc   ; bc = count
077A   41                     LD   b,c   ; b = loop counter
077B   E1                     POP   hl   
077C   04                     INC   b   ; test for counter=0 case
077D   18 04                  JR   shiftRight2   
077F                SHIFTRIGHT1:      
077F   CB 3C                  SRL   h   ; right shift hl
0781   CB 1D                  RR   l   
0783                SHIFTRIGHT2:      
0783   10 FA                  DJNZ   shiftRight1   
0785   E5                     PUSH   hl   
0786   42 4B                  LD   bc,de   ; restore IP
0788   DD E9                  JP   (ix)   
078A                             ; string
078A                             ; -- ptr                        ; points to start of string chars,
078A                             ; length is stored at start - 2 bytes
078A                STRING:      
078A   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
078D   23                     INC   hl   ; skip length field to start
078E   23                     INC   hl   
078F   E5                     PUSH   hl   ; save start of string
0790   03                     INC   bc   ; point to next char
0791   18 03                  JR   string2   
0793                STRING1:      
0793   77                     LD   (hl),a   
0794   23                     INC   hl   ; increase count
0795   03                     INC   bc   ; point to next char
0796                STRING2:      
0796   0A                     LD   a,(bc)   
0797   FE 22                  CP   DQUOTE   ; " is the string terminator
0799   20 F8                  JR   nz,string1   
079B   FE 60                  CP   "`"   ; ` is the string terminator used in testing
079D   20 F4                  JR   nz,string1   
079F   AF                     XOR   a   ; write NUL to terminate string
07A0   77                     LD   (hl),a   ; hl = end of string
07A1   23                     INC   hl   
07A2   22 F4 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
07A5   2B                     DEC   hl   ; hl = end of string without terminator
07A6   D1                     POP   de   ; de = start of string
07A7   D5                     PUSH   de   ; return start of string
07A8   B7                     OR   a   ; hl = length bytes, de = start of string
07A9   ED 52                  SBC   hl,de   
07AB   EB                     EX   de,hl   
07AC   2B                     DEC   hl   ; write length bytes to length field at start - 2
07AD   72                     LD   (hl),d   
07AE   2B                     DEC   hl   
07AF   73                     LD   (hl),e   
07B0   DD E9                  JP   (ix)   
07B2                             ; switch
07B2                             ; index array -- value
07B2                SWITCH:      
07B2   D1                     POP   de   ; de = array
07B3   E1                     POP   hl   ; hl = index
07B4   29                     ADD   hl,hl   ; if data width = 2 then double
07B5   19                     ADD   hl,de   ; add addr
07B6   5E                     LD   e,(hl)   
07B7   23                     INC   hl   
07B8   56                     LD   d,(hl)   
07B9   C3 39 06               JP   go   
07BC                WORDS:       
07BC   21 02 00               LD   hl,2   
07BF   C3 60 05               JP   bytes1   
07C2                             ; 
07C2                             ; 
07C2                             ; 
07C2                             ; 
07C2                             ; 
07C2                             ; c b --
07C2                             ; loops until c = 0
07C2                LOOP:        
07C2   DD E9                  JP   (ix)   
07C4                             ;     pop de                      ; de = block                    c
07C4                             ;     pop hl                      ; hl = condition
07C4                             ;     push de
07C4                             ;     push bc                     ; push IP
07C4                             ;     ld bc,de                    ; bc = block
07C4                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
07C4                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
07C4                             ;     push de                     ; push ScopeBP
07C4                             ;     push iy                     ; push BP
07C4                             ;     ld iy,0                     ; iy = sp
07C4                             ;     add iy,sp
07C4                             ; loop1:
07C4                             ;     ld a,l                      ; bc = block, hl = condition = zero?
07C4                             ;     or h
07C4                             ;     jr z,loop3
07C4                             ;     ld de,loop2-1               ; IP return address
07C4                             ;     push de
07C4                             ;     ld e,(iy+2)                 ; push parent ScopeBP
07C4                             ;     ld d,(iy+3)
07C4                             ;     push de                     ;
07C4                             ;     push iy                     ; push BP
07C4                             ;     ld iy,0                     ; iy = sp
07C4                             ;     add iy,sp
07C4                             ;     push hl                     ; push condition
07C4                             ;     dec bc
07C4                             ;     jp (ix)
07C4                             ; loop2:
07C4                             ;     db ESC                      ; escape from interpreter
07C4                             ;     ld c,(iy+6)                 ; bc = block
07C4                             ;     ld b,(iy+7)
07C4                             ;     pop hl                      ; hl = condition
07C4                             ;     jr loop1
07C4                             ; loop3:
07C4                             ;     ld d,iyh                    ; de = BP
07C4                             ;     ld e,iyl
07C4                             ;     ex de,hl                    ; hl = BP, de = result
07C4                             ;     ld sp,hl                    ; sp = BP
07C4                             ;     pop hl                      ; hl = old BP
07C4                             ;     pop bc                      ; pop ScopeBP (discard)
07C4                             ;     pop bc                      ; bc = IP
07C4                             ;     ld sp,hl                    ; sp = old BP
07C4                             ;     ld iy,0                     ; iy = sp
07C4                             ;     add iy,sp
07C4                             ;     ld ix,(vNext)                  ; needed?
07C4                             ;     jp (ix)
07C4                             ; str -- num
07C4                             ; hash:
07C4                             ; pop hl
07C4                             ; push bc
07C4                             ; ld bc,hl
07C4                             ; call hashStr
07C4                             ; pop bc
07C4                             ; push hl
07C4                             ; jp (ix)
07C4                             ; sqrt1:
07C4                             ;     pop hl
07C4                             ;     push bc
07C4                             ;     call squareRoot
07C4                             ;     ld (vFrac),bc
07C4                             ;     pop bc
07C4                             ;     push de
07C4                             ;     jp (ix)
07C4                FILTER:      
07C4                MAP:         
07C4                SCAN:        
07C4   DD E9                  JP   (ix)   
07C6                             ; -------------------------------------------------------------------------------
07C6                             ; ; hash C-string
07C6                             ; ; BC = str
07C6                             ; ; HL = hash
07C6                             ; hashStr:
07C6                             ;     ld (vHashStr),bc                    ; store source string
07C6                             ;     ld hl,0
07C6                             ; hashStr1:
07C6                             ;     ld a,(bc)                           ; load next char
07C6                             ;     inc bc
07C6                             ;     cp 0                                ; NUL?
07C6                             ;     ret z
07C6                             ; hashStr2:
07C6                             ;     ld d,0
07C6                             ;     ld e,a
07C6                             ;     add hl,de
07C6                             ;     ld de,hl                            ; hl *= 193 (11000001)
07C6                             ;     add hl,hl                           ; shift left
07C6                             ;     add hl,de                           ; add
07C6                             ;     add hl,hl                           ; shift left
07C6                             ;     add hl,hl                           ; shift left
07C6                             ;     add hl,hl                           ; shift left
07C6                             ;     add hl,hl                           ; shift left
07C6                             ;     add hl,hl                           ; shift left
07C6                             ;     add hl,hl                           ; shift left
07C6                             ;     add hl,de                           ; add
07C6                             ;     jr hashStr1
07C6                             ; division subroutine.
07C6                             ; bc: divisor, de: dividend, hl: remainder
07C6                DIVIDE:      
07C6   21 00 00               LD   hl,0   ; zero the remainder
07C9   3E 10                  LD   a,16   ; loop counter
07CB                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07CB   CB 21                  SLA   c   
07CD   CB 10                  RL   b   
07CF   ED 6A                  ADC   hl,hl   
07D1   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07D3   38 03                  JR   c,divide2   
07D5   0C                     INC   c   
07D6   18 01                  JR   divide3   
07D8                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07D8   19                     ADD   hl,de   
07D9                DIVIDE3:      
07D9   3D                     DEC   a   
07DA   20 EF                  JR   nz,divide1   
07DC   50 59                  LD   de,bc   ; result from bc to de
07DE   C9                     RET      
07DF                             ; ; squareroot
07DF                             ; ; Input: HL = value
07DF                             ; ; Result: DE = square root BC = remainder
07DF                             ; squareRoot:
07DF                             ;     ld bc,0800h
07DF                             ;     ld e,c
07DF                             ;     xor a
07DF                             ; squareRoot1:
07DF                             ;     add hl,hl
07DF                             ;     rl c
07DF                             ;     adc hl,hl
07DF                             ;     rl c
07DF                             ;     jr nc,$+4
07DF                             ;     set 0,l
07DF                             ;     ld a,e
07DF                             ;     add a,a
07DF                             ;     ld e,a
07DF                             ;     add a,a
07DF                             ;     bit 0,l
07DF                             ;     jr nz,$+5
07DF                             ;     sub c
07DF                             ;     jr nc,squareRoot4
07DF                             ;     ld a,c
07DF                             ;     sub e
07DF                             ;     inc e
07DF                             ;     sub e
07DF                             ;     ld c,a
07DF                             ; squareRoot4:
07DF                             ;     djnz squareRoot1
07DF                             ;     bit 0,l
07DF                             ;     jr z,squareRoot5
07DF                             ;     inc b
07DF                             ; squareRoot5:
07DF                             ;     ld d,0
07DF                             ;     ret
07DF                             ; print decimal
07DF                             ; hl = value
07DF                PRTDEC:      
07DF   CB 7C                  BIT   7,h   
07E1   28 0B                  JR   z,prtdec0   
07E3   3E 2D                  LD   a,"-"   
07E5   CD 85 00               CALL   putchar   
07E8   AF                     XOR   a   
07E9   95                     SUB   l   
07EA   6F                     LD   l,a   
07EB   9F                     SBC   a,a   
07EC   94                     SUB   h   
07ED   67                     LD   h,a   
07EE                PRTDEC0:      
07EE   C5                     PUSH   bc   
07EF   0E 00                  LD   c,0   ; leading zeros flag = false
07F1   11 F0 D8               LD   de,-10000   
07F4   CD 10 08               CALL   prtdec1   
07F7   11 18 FC               LD   de,-1000   
07FA   CD 10 08               CALL   prtdec1   
07FD   11 9C FF               LD   de,-100   
0800   CD 10 08               CALL   prtdec1   
0803   1E F6                  LD   e,-10   
0805   CD 10 08               CALL   prtdec1   
0808   0C                     INC   c   ; flag = true for at least digit
0809   1E FF                  LD   e,-1   
080B   CD 10 08               CALL   prtdec1   
080E   C1                     POP   bc   
080F   C9                     RET      
0810                PRTDEC1:      
0810   06 2F                  LD   b,"0"-1   
0812                PRTDEC2:      
0812   04                     INC   b   
0813   19                     ADD   hl,de   
0814   38 FC                  JR   c,prtdec2   
0816   ED 52                  SBC   hl,de   
0818   3E 30                  LD   a,"0"   
081A   B8                     CP   b   
081B   20 05                  JR   nz,prtdec3   
081D   AF                     XOR   a   
081E   B1                     OR   c   
081F   C8                     RET   z   
0820   18 01                  JR   prtdec4   
0822                PRTDEC3:      
0822   0C                     INC   c   
0823                PRTDEC4:      
0823   78                     LD   a,b   
0824   C3 85 00               JP   putchar   
0827                PRTHEX:      ; display hl as a 16-bit number in hex.
0827   C5                     PUSH   bc   ; preserve the IP
0828   7C                     LD   a,h   
0829   CD 32 08               CALL   prthex2   
082C   7D                     LD   a,l   
082D   CD 32 08               CALL   prthex2   
0830   C1                     POP   bc   
0831   C9                     RET      
0832                PRTHEX2:      
0832   4F                     LD   c,a   
0833   1F                     RRA      
0834   1F                     RRA      
0835   1F                     RRA      
0836   1F                     RRA      
0837   CD 3B 08               CALL   prthex3   
083A   79                     LD   a,c   
083B                PRTHEX3:      
083B   E6 0F                  AND   0x0F   
083D   C6 90                  ADD   a,0x90   
083F   27                     DAA      
0840   CE 40                  ADC   a,0x40   
0842   27                     DAA      
0843   C3 85 00               JP   putchar   
0846                PRTSTR0:      
0846   CD 85 00               CALL   putchar   
0849   23                     INC   hl   
084A                PRTSTR:      
084A   7E                     LD   a,(hl)   
084B   B7                     OR   a   
084C   20 F8                  JR   nz,prtstr0   
084E   C9                     RET      
084F                             ; **************************************************************************
084F                             ; calculate nesting value
084F                             ; a is char to be tested,
084F                             ; e is the nesting value (initially 0)
084F                             ; e is increased by ( and [
084F                             ; e is decreased by ) and ]
084F                             ; e has its bit 7 toggled by `
084F                             ; limited to 127 levels
084F                             ; **************************************************************************
084F                NESTING:      
084F   FE 22                  CP   DQUOTE   ; quote char
0851   28 06                  JR   z,nesting0   
0853   FE 60                  CP   "`"   ; quote char
0855   28 02                  JR   z,nesting0   
0857   18 0A                  JR   nesting1   
0859                NESTING0:      
0859   CB 7B                  BIT   7,e   
085B   28 03                  JR   z,nesting1a   
085D   CB BB                  RES   7,e   
085F   C9                     RET      
0860                NESTING1A:      
0860   CB FB                  SET   7,e   
0862   C9                     RET      
0863                NESTING1:      
0863   CB 7B                  BIT   7,e   
0865   C0                     RET   nz   
0866   FE 7B                  CP   "{"   
0868   28 08                  JR   z,nesting2   
086A   FE 5B                  CP   "["   
086C   28 04                  JR   z,nesting2   
086E   FE 28                  CP   "("   
0870   20 02                  JR   nz,nesting3   
0872                NESTING2:      
0872   1C                     INC   e   
0873   C9                     RET      
0874                NESTING3:      
0874   FE 7D                  CP   "}"   
0876   28 07                  JR   z,nesting4   
0878   FE 5D                  CP   "]"   
087A   28 03                  JR   z,nesting4   
087C   FE 29                  CP   ")"   
087E   C0                     RET   nz   
087F                NESTING4:      
087F   1D                     DEC   e   
0880   C9                     RET      
0881                PROMPT:      
0881   CD 91 08               CALL   printStr   
0884   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0889   C9                     RET      
088A                CRLF:        
088A   CD 91 08               CALL   printStr   
088D   0D 0A 00               .CSTR   "\r\n"   
0890   C9                     RET      
0891                             ; prints a null teminated string
0891                             ; the string should be immedaitely following the call
0891                PRINTSTR:      
0891   E3                     EX   (sp),hl   ; swap			
0892   CD 4A 08               CALL   prtstr   
0895   23                     INC   hl   ; inc past NUL
0896   E3                     EX   (sp),hl   ; put it back	
0897   C9                     RET      
0898                             ; executes a null teminated string (null executes exit_)
0898                             ; the string should be immedaitely following the call
0898                EXECSTR:      ; create a root stack frame
0898   C1                     POP   bc   ; bc = code*
0899   0B                     DEC   bc   ; dec to prepare for next routine
089A   11 00 00               LD   de,0   
089D   D5                     PUSH   de   ; push fake IP
089E   D5                     PUSH   de   ; push null arg_list*
089F   D5                     PUSH   de   ; push null first_arg*
08A0   D5                     PUSH   de   ; push fake BP
08A1   DD E9                  JP   (ix)   
08A3                             ; arg1 .. argn func -- ?
08A3                CALL:        
08A3   E1                     POP   hl   
08A4   E9                     JP   (hl)   
08A5                INIT:        
08A5   DD 2A F2 19            LD   ix,(vNext)   
08A9   FD 21 80 18            LD   iy,STACK   
08AD   21 80 01               LD   hl,isysVars   
08B0   11 E6 19               LD   de,sysVars   
08B3   01 10 00               LD   bc,8 * 2   
08B6   ED B0                  LDIR      
08B8   21 00 19               LD   hl,vars   ; 52 vars LO HI
08BB   06 34                  LD   b,26*2   
08BD   AF                     XOR   a   
08BE                INIT0:       
08BE   77                     LD   (hl),a   
08BF   23                     INC   hl   
08C0   10 FC                  DJNZ   init0   
08C2   C9                     RET      
08C3                START:       
08C3   31 80 18               LD   sp,STACK   ; start of monty
08C6   CD A5 08               CALL   init   ; setups
08C9   CD 91 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
08CC   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
08D9                INTERPRET:      
08D9   CD 81 08               CALL   prompt   
08DC   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
08DF   ED 43 EA 19            LD   (vTIBPtr),bc   
08E3                INTERPRET2:      ; calc nesting (a macro might have changed it)
08E3   1E 00                  LD   e,0   ; initilize nesting value
08E5   C5                     PUSH   bc   ; save offset into TIB,
08E6                             ; bc is also the count of chars in TIB
08E6   21 00 1A               LD   hl,TIB   ; hl is start of TIB
08E9   18 06                  JR   interpret4   
08EB                INTERPRET3:      
08EB   7E                     LD   a,(hl)   ; a = char in TIB
08EC   23                     INC   hl   ; inc pointer into TIB
08ED   0B                     DEC   bc   ; dec count of chars in TIB
08EE   CD 4F 08               CALL   nesting   ; update nesting value
08F1                INTERPRET4:      
08F1   79                     LD   a,c   ; is count zero?
08F2   B0                     OR   b   
08F3   20 F6                  JR   nz,interpret3   ; if not loop
08F5   C1                     POP   bc   ; restore offset into TIB
08F6                INTERPRET5:      
08F6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
08F9   FE 20                  CP   $20   ; compare to space
08FB   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
08FD   FE 00                  CP   $0   ; is it end of string? NUL end of string
08FF                             ; ???? NEEDED?
08FF   28 27                  JR   z,interpret8   
0901   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0903   28 10                  JR   z,interpret7   ; if anything else its macro/control
0905                             ; macro
0905                             ;  ld (vTIBPtr),bc
0905                             ;  ld hl,ctrlCodes
0905                             ;  add a,l			            ; look up key of macros
0905                             ;  ld l,a
0905                             ;  ld e,(hl)
0905                             ;  ld a,e
0905                             ;  or a
0905                             ;  jr z,macro1
0905                             ;  ld d,msb(macros)
0905                             ;  push de
0905                             ;  call call		            ; monty exec_ operation and jump to it
0905                             ;  db DC1,0
0905                             ; macro1:
0905                             ;  ld bc,(vTIBPtr)
0905   18 DC                  JR   interpret2   
0907                INTERPRET6:      
0907   21 00 1A               LD   hl,TIB   
090A   09                     ADD   hl,bc   
090B   77                     LD   (hl),a   ; store the character in textbuf
090C   03                     INC   bc   
090D   CD 85 00               CALL   putchar   ; echo character to screen
0910   CD 4F 08               CALL   nesting   
0913   18 E1                  JR   interpret5   ; wait for next character
0915                INTERPRET7:      
0915   21 00 1A               LD   hl,TIB   
0918   09                     ADD   hl,bc   
0919   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
091B   23                     INC   hl   
091C   36 0A                  LD   (hl),"\n"   
091E   23                     INC   hl   
091F   03                     INC   bc   
0920   03                     INC   bc   
0921   CD 8A 08               CALL   crlf   ; echo character to screen
0924   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0925   B7                     OR   a   
0926   20 CE                  JR   nz,interpret5   
0928                INTERPRET8:      
0928   ED 43 EA 19            LD   (vTIBPtr),bc   
092C   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
092F                             ; we pressed enter
092F   0B                     DEC   bc   
0930                NEXT:        
0930   03                     INC   bc   ; Increment the IP
0931   0A                     LD   a,(bc)   ; Get the next character and dispatch
0932   FE 20                  CP   " "   ; whitespace?
0934   28 FA                  JR   z,next   ; space? ignore
0936   38 0B                  JR   c,next1   
0938   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
093A   30 0E                  JR   nc,next2   
093C   6F                     LD   l,a   ; index into table
093D   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
093F   6E                     LD   l,(hl)   ; get low jump address
0940   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0942   E9                     JP   (hl)   ; Jump to routine
0943                NEXT1:       
0943   FE 00                  CP   NUL   ; end of input string?
0945   28 09                  JR   z,exit_   
0947   C3 D9 08               JP   interpret   ; no, other whitespace, macros?
094A                NEXT2:       
094A   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
094B   03                     INC   bc   
094C   0A                     LD   a,(bc)   
094D   6F                     LD   l,a   
094E   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
094F   E9                     JP   (hl)   
0950                EXIT_:       
0950   60 69                  LD   hl,bc   
0952   E9                     JP   (hl)   
0953                ERROR:       
0953   CD 91 08               CALL   printStr   
0956   45 72 72 6F 72 00      .CSTR   "Error"   
095C   CD DF 07               CALL   prtdec   
095F   C3 D9 08               JP   interpret   
0962                             ; call define
0962                             ; .pstr "abs",0
0962                             ; dw abs1 \a
0962                             ; call define
0962                             ; .pstr "addr",0
0962                             ; dw addr @
0962                             ; call define
0962                             ; .pstr "bytes",0
0962                             ; dw bytes \b
0962                             ; call define
0962                             ; .pstr "false",0
0962                             ; dw false1 \f
0962                             ; call define
0962                             ; .pstr "filter",0
0962                             ; dw filter \f ?
0962                             ; call define
0962                             ; .pstr "frac",0
0962                             ; dw frac %
0962                             ; call define
0962                             ; .pstr "func",0
0962                             ; dw func
0962                             ; call define
0962                             ; .pstr "hash",0
0962                             ; dw hash \hsh
0962                             ; call define
0962                             ; .pstr "input",0
0962                             ; dw input \in ?
0962                             ; call define
0962                             ; .pstr "if",0
0962                             ; dw if \if
0962                             ; call define
0962                             ; .pstr "ifte",0
0962                             ; dw ifte \ife
0962                             ; call define
0962                             ; .pstr "key",0
0962                             ; dw key \k
0962                             ; call define
0962                             ; .pstr "let",0
0962                             ; dw let =
0962                             ; call define
0962                             ; .pstr "loop",0
0962                             ; dw loop \rpt
0962                             ; call define
0962                             ; .pstr "map",0
0962                             ; dw map \m ?
0962                             ; call define
0962                             ; .pstr "output",0
0962                             ; dw output \out ?
0962                             ; call define
0962                             ; .pstr "scan",0
0962                             ; dw scan.  \fold ?
0962                             ; call define
0962                             ; .pstr "sqrt",0
0962                             ; dw sqrt1 \sqt
0962                             ; call define
0962                             ; .pstr "switch",0
0962                             ; dw switch. \sw
0962                             ; call define
0962                             ; .pstr "true",0
0962                             ; dw true1.   \t
0962                             ; call define
0962                             ; .pstr "words",0
0962                             ; dw words.  \w
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                          ALIGN   $100   
1900                VARS:        
1900                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
19D0                RESTARTS:      
19D0                RST08:    DS   2   
19D2                RST10:    DS   2   
19D4                RST18:    DS   2   
19D6                RST20:    DS   2   
19D8                RST28:    DS   2   
19DA                RST30:    DS   2   ; 
19DC                BAUD:     DS   2   ; 
19DE                INTVEC:   DS   2   ; 
19E0                NMIVEC:   DS   2   ; 
19E2                GETCVEC:   DS   2   ; 
19E4                PUTCVEC:   DS   2   ; 
19E6                SYSVARS:      
19E6                VFRAC:    DS   2   ; initialised sys variables
19E8                VDATAWIDTH:   DS   2   ; 
19EA                VTIBPTR:   DS   2   ; 
19EC                VPOINTER:   DS   2   ; 
19EE                VLASTDEF:   DS   2   ; 
19F0                VHASHSTR:   DS   2   ; 
19F2                VNEXT:    DS   2   ; 
19F4                VHEAPPTR:   DS   2   ; 
19F6                VTEMP1:   DS   2   ; uninitialised sys variables
19F8                VTEMP2:   DS   2   ; 
19FA                TBPTR:    DS   2   ; reserved for tests
19FC                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test "1 10 20 (ab) {-1 {$a} {$b} \\ife} \\f:", 10
4000                             ; test "1 10 20 (ab) {0 {$a} {$b} \\ife} \\f:", 20
4000                             ; 
4000                          ;*Macro unroll:  test "1", 1
4000   31 80 18               LD   SP,STACK   
4003   CD A5 08               CALL   init   
4006   CD 98 08               CALL   execStr   
4009   31 00                  .CSTR   "1"   
400B                          ;*Macro unroll:  expect "1",1
400B   E1                     POP   HL   
400C   E5                     PUSH   HL   
400D   11 01 00               LD   DE,1   
4010   B7                     OR   A   
4011   ED 52                  SBC   HL,DE   
4013   7D                     LD   A,L   
4014   B4                     OR   H   
4015   28 4C                  JR   Z,expectM_0_2231S43   
4017   CD 91 08               CALL   printStr   
401A   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4022   CD 91 08               CALL   printStr   
4025   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4034   21 01 00               LD   HL,1   
4037   CD DF 07               CALL   prtdec   
403A   CD 91 08               CALL   printStr   
403D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404A   E1                     POP   hl   
404B   E5                     PUSH   hl   
404C   CD DF 07               CALL   prtdec   
404F   E1                     POP   hl   
4050   CD 91 08               CALL   printStr   
4053   20 28 23 00            .CSTR   " (#"   
4057   CD 27 08               CALL   prthex   
405A   CD 91 08               CALL   printStr   
405D   29 0D 0A 00            .CSTR   ")\r\n"   
4061   76                     HALT      
4062   00                     .CSTR      
4063                EXPECTM_0_2231S43:      
4063   E1                     POP   HL   
4064                          ;*Macro unroll:  test "2", 2
4064   31 80 18               LD   SP,STACK   
4067   CD A5 08               CALL   init   
406A   CD 98 08               CALL   execStr   
406D   32 00                  .CSTR   "2"   
406F                          ;*Macro unroll:  expect "2",2
406F   E1                     POP   HL   
4070   E5                     PUSH   HL   
4071   11 02 00               LD   DE,2   
4074   B7                     OR   A   
4075   ED 52                  SBC   HL,DE   
4077   7D                     LD   A,L   
4078   B4                     OR   H   
4079   28 4C                  JR   Z,expectM_0_2232S43   
407B   CD 91 08               CALL   printStr   
407E   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
4086   CD 91 08               CALL   printStr   
4089   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4098   21 02 00               LD   HL,2   
409B   CD DF 07               CALL   prtdec   
409E   CD 91 08               CALL   printStr   
40A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AE   E1                     POP   hl   
40AF   E5                     PUSH   hl   
40B0   CD DF 07               CALL   prtdec   
40B3   E1                     POP   hl   
40B4   CD 91 08               CALL   printStr   
40B7   20 28 23 00            .CSTR   " (#"   
40BB   CD 27 08               CALL   prthex   
40BE   CD 91 08               CALL   printStr   
40C1   29 0D 0A 00            .CSTR   ")\r\n"   
40C5   76                     HALT      
40C6   00                     .CSTR      
40C7                EXPECTM_0_2232S43:      
40C7   E1                     POP   HL   
40C8                          ;*Macro unroll:  test "1", 1
40C8   31 80 18               LD   SP,STACK   
40CB   CD A5 08               CALL   init   
40CE   CD 98 08               CALL   execStr   
40D1   31 00                  .CSTR   "1"   
40D3                          ;*Macro unroll:  expect "1",1
40D3   E1                     POP   HL   
40D4   E5                     PUSH   HL   
40D5   11 01 00               LD   DE,1   
40D8   B7                     OR   A   
40D9   ED 52                  SBC   HL,DE   
40DB   7D                     LD   A,L   
40DC   B4                     OR   H   
40DD   28 4C                  JR   Z,expectM_0_2233S43   
40DF   CD 91 08               CALL   printStr   
40E2   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
40EA   CD 91 08               CALL   printStr   
40ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40FC   21 01 00               LD   HL,1   
40FF   CD DF 07               CALL   prtdec   
4102   CD 91 08               CALL   printStr   
4105   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4112   E1                     POP   hl   
4113   E5                     PUSH   hl   
4114   CD DF 07               CALL   prtdec   
4117   E1                     POP   hl   
4118   CD 91 08               CALL   printStr   
411B   20 28 23 00            .CSTR   " (#"   
411F   CD 27 08               CALL   prthex   
4122   CD 91 08               CALL   printStr   
4125   29 0D 0A 00            .CSTR   ")\r\n"   
4129   76                     HALT      
412A   00                     .CSTR      
412B                EXPECTM_0_2233S43:      
412B   E1                     POP   HL   
412C                          ;*Macro unroll:  test "0", 0
412C   31 80 18               LD   SP,STACK   
412F   CD A5 08               CALL   init   
4132   CD 98 08               CALL   execStr   
4135   30 00                  .CSTR   "0"   
4137                          ;*Macro unroll:  expect "0",0
4137   E1                     POP   HL   
4138   E5                     PUSH   HL   
4139   11 00 00               LD   DE,0   
413C   B7                     OR   A   
413D   ED 52                  SBC   HL,DE   
413F   7D                     LD   A,L   
4140   B4                     OR   H   
4141   28 4C                  JR   Z,expectM_0_2234S43   
4143   CD 91 08               CALL   printStr   
4146   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
414E   CD 91 08               CALL   printStr   
4151   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4160   21 00 00               LD   HL,0   
4163   CD DF 07               CALL   prtdec   
4166   CD 91 08               CALL   printStr   
4169   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4176   E1                     POP   hl   
4177   E5                     PUSH   hl   
4178   CD DF 07               CALL   prtdec   
417B   E1                     POP   hl   
417C   CD 91 08               CALL   printStr   
417F   20 28 23 00            .CSTR   " (#"   
4183   CD 27 08               CALL   prthex   
4186   CD 91 08               CALL   printStr   
4189   29 0D 0A 00            .CSTR   ")\r\n"   
418D   76                     HALT      
418E   00                     .CSTR      
418F                EXPECTM_0_2234S43:      
418F   E1                     POP   HL   
4190                          ;*Macro unroll:  test "10", 10
4190   31 80 18               LD   SP,STACK   
4193   CD A5 08               CALL   init   
4196   CD 98 08               CALL   execStr   
4199   31 30 00               .CSTR   "10"   
419C                          ;*Macro unroll:  expect "10",10
419C   E1                     POP   HL   
419D   E5                     PUSH   HL   
419E   11 0A 00               LD   DE,10   
41A1   B7                     OR   A   
41A2   ED 52                  SBC   HL,DE   
41A4   7D                     LD   A,L   
41A5   B4                     OR   H   
41A6   28 4D                  JR   Z,expectM_0_2235S43   
41A8   CD 91 08               CALL   printStr   
41AB   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
41B4   CD 91 08               CALL   printStr   
41B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C6   21 0A 00               LD   HL,10   
41C9   CD DF 07               CALL   prtdec   
41CC   CD 91 08               CALL   printStr   
41CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DC   E1                     POP   hl   
41DD   E5                     PUSH   hl   
41DE   CD DF 07               CALL   prtdec   
41E1   E1                     POP   hl   
41E2   CD 91 08               CALL   printStr   
41E5   20 28 23 00            .CSTR   " (#"   
41E9   CD 27 08               CALL   prthex   
41EC   CD 91 08               CALL   printStr   
41EF   29 0D 0A 00            .CSTR   ")\r\n"   
41F3   76                     HALT      
41F4   00                     .CSTR      
41F5                EXPECTM_0_2235S43:      
41F5   E1                     POP   HL   
41F6                          ;*Macro unroll:  test "123", 123
41F6   31 80 18               LD   SP,STACK   
41F9   CD A5 08               CALL   init   
41FC   CD 98 08               CALL   execStr   
41FF   31 32 33 00            .CSTR   "123"   
4203                          ;*Macro unroll:  expect "123",123
4203   E1                     POP   HL   
4204   E5                     PUSH   HL   
4205   11 7B 00               LD   DE,123   
4208   B7                     OR   A   
4209   ED 52                  SBC   HL,DE   
420B   7D                     LD   A,L   
420C   B4                     OR   H   
420D   28 4E                  JR   Z,expectM_0_2236S43   
420F   CD 91 08               CALL   printStr   
4212   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
421C   CD 91 08               CALL   printStr   
421F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
422E   21 7B 00               LD   HL,123   
4231   CD DF 07               CALL   prtdec   
4234   CD 91 08               CALL   printStr   
4237   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4244   E1                     POP   hl   
4245   E5                     PUSH   hl   
4246   CD DF 07               CALL   prtdec   
4249   E1                     POP   hl   
424A   CD 91 08               CALL   printStr   
424D   20 28 23 00            .CSTR   " (#"   
4251   CD 27 08               CALL   prthex   
4254   CD 91 08               CALL   printStr   
4257   29 0D 0A 00            .CSTR   ")\r\n"   
425B   76                     HALT      
425C   00                     .CSTR      
425D                EXPECTM_0_2236S43:      
425D   E1                     POP   HL   
425E                          ;*Macro unroll:  test "-1",-1
425E   31 80 18               LD   SP,STACK   
4261   CD A5 08               CALL   init   
4264   CD 98 08               CALL   execStr   
4267   2D 31 00               .CSTR   "-1"   
426A                          ;*Macro unroll:  expect "-1",-1
426A   E1                     POP   HL   
426B   E5                     PUSH   HL   
426C   11 FF FF               LD   DE,-1   
426F   B7                     OR   A   
4270   ED 52                  SBC   HL,DE   
4272   7D                     LD   A,L   
4273   B4                     OR   H   
4274   28 4D                  JR   Z,expectM_0_2237S43   
4276   CD 91 08               CALL   printStr   
4279   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
4282   CD 91 08               CALL   printStr   
4285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4294   21 FF FF               LD   HL,-1   
4297   CD DF 07               CALL   prtdec   
429A   CD 91 08               CALL   printStr   
429D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42AA   E1                     POP   hl   
42AB   E5                     PUSH   hl   
42AC   CD DF 07               CALL   prtdec   
42AF   E1                     POP   hl   
42B0   CD 91 08               CALL   printStr   
42B3   20 28 23 00            .CSTR   " (#"   
42B7   CD 27 08               CALL   prthex   
42BA   CD 91 08               CALL   printStr   
42BD   29 0D 0A 00            .CSTR   ")\r\n"   
42C1   76                     HALT      
42C2   00                     .CSTR      
42C3                EXPECTM_0_2237S43:      
42C3   E1                     POP   HL   
42C4                          ;*Macro unroll:  test "''", 0
42C4   31 80 18               LD   SP,STACK   
42C7   CD A5 08               CALL   init   
42CA   CD 98 08               CALL   execStr   
42CD   27 27 00               .CSTR   "''"   
42D0                          ;*Macro unroll:  expect "''",0
42D0   E1                     POP   HL   
42D1   E5                     PUSH   HL   
42D2   11 00 00               LD   DE,0   
42D5   B7                     OR   A   
42D6   ED 52                  SBC   HL,DE   
42D8   7D                     LD   A,L   
42D9   B4                     OR   H   
42DA   28 4D                  JR   Z,expectM_0_2238S43   
42DC   CD 91 08               CALL   printStr   
42DF   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
42E8   CD 91 08               CALL   printStr   
42EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42FA   21 00 00               LD   HL,0   
42FD   CD DF 07               CALL   prtdec   
4300   CD 91 08               CALL   printStr   
4303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4310   E1                     POP   hl   
4311   E5                     PUSH   hl   
4312   CD DF 07               CALL   prtdec   
4315   E1                     POP   hl   
4316   CD 91 08               CALL   printStr   
4319   20 28 23 00            .CSTR   " (#"   
431D   CD 27 08               CALL   prthex   
4320   CD 91 08               CALL   printStr   
4323   29 0D 0A 00            .CSTR   ")\r\n"   
4327   76                     HALT      
4328   00                     .CSTR      
4329                EXPECTM_0_2238S43:      
4329   E1                     POP   HL   
432A                          ;*Macro unroll:  test "'a'", $61
432A   31 80 18               LD   SP,STACK   
432D   CD A5 08               CALL   init   
4330   CD 98 08               CALL   execStr   
4333   27 61 27 00            .CSTR   "'a'"   
4337                          ;*Macro unroll:  expect "'a'",$61
4337   E1                     POP   HL   
4338   E5                     PUSH   HL   
4339   11 61 00               LD   DE,$61   
433C   B7                     OR   A   
433D   ED 52                  SBC   HL,DE   
433F   7D                     LD   A,L   
4340   B4                     OR   H   
4341   28 4E                  JR   Z,expectM_0_2239S43   
4343   CD 91 08               CALL   printStr   
4346   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
4350   CD 91 08               CALL   printStr   
4353   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4362   21 61 00               LD   HL,$61   
4365   CD DF 07               CALL   prtdec   
4368   CD 91 08               CALL   printStr   
436B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4378   E1                     POP   hl   
4379   E5                     PUSH   hl   
437A   CD DF 07               CALL   prtdec   
437D   E1                     POP   hl   
437E   CD 91 08               CALL   printStr   
4381   20 28 23 00            .CSTR   " (#"   
4385   CD 27 08               CALL   prthex   
4388   CD 91 08               CALL   printStr   
438B   29 0D 0A 00            .CSTR   ")\r\n"   
438F   76                     HALT      
4390   00                     .CSTR      
4391                EXPECTM_0_2239S43:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "'\\''", $27
4392   31 80 18               LD   SP,STACK   
4395   CD A5 08               CALL   init   
4398   CD 98 08               CALL   execStr   
439B   27 5C 27 27 00         .CSTR   "'\\''"   
43A0                          ;*Macro unroll:  expect "'\\''",$27
43A0   E1                     POP   HL   
43A1   E5                     PUSH   HL   
43A2   11 27 00               LD   DE,$27   
43A5   B7                     OR   A   
43A6   ED 52                  SBC   HL,DE   
43A8   7D                     LD   A,L   
43A9   B4                     OR   H   
43AA   28 4F                  JR   Z,expectM_0_2240S43   
43AC   CD 91 08               CALL   printStr   
43AF   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
43BA   CD 91 08               CALL   printStr   
43BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43CC   21 27 00               LD   HL,$27   
43CF   CD DF 07               CALL   prtdec   
43D2   CD 91 08               CALL   printStr   
43D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E2   E1                     POP   hl   
43E3   E5                     PUSH   hl   
43E4   CD DF 07               CALL   prtdec   
43E7   E1                     POP   hl   
43E8   CD 91 08               CALL   printStr   
43EB   20 28 23 00            .CSTR   " (#"   
43EF   CD 27 08               CALL   prthex   
43F2   CD 91 08               CALL   printStr   
43F5   29 0D 0A 00            .CSTR   ")\r\n"   
43F9   76                     HALT      
43FA   00                     .CSTR      
43FB                EXPECTM_0_2240S43:      
43FB   E1                     POP   HL   
43FC                          ;*Macro unroll:  test "#10", $10
43FC   31 80 18               LD   SP,STACK   
43FF   CD A5 08               CALL   init   
4402   CD 98 08               CALL   execStr   
4405   23 31 30 00            .CSTR   "#10"   
4409                          ;*Macro unroll:  expect "#10",$10
4409   E1                     POP   HL   
440A   E5                     PUSH   HL   
440B   11 10 00               LD   DE,$10   
440E   B7                     OR   A   
440F   ED 52                  SBC   HL,DE   
4411   7D                     LD   A,L   
4412   B4                     OR   H   
4413   28 4E                  JR   Z,expectM_0_2241S43   
4415   CD 91 08               CALL   printStr   
4418   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
4422   CD 91 08               CALL   printStr   
4425   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4434   21 10 00               LD   HL,$10   
4437   CD DF 07               CALL   prtdec   
443A   CD 91 08               CALL   printStr   
443D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
444A   E1                     POP   hl   
444B   E5                     PUSH   hl   
444C   CD DF 07               CALL   prtdec   
444F   E1                     POP   hl   
4450   CD 91 08               CALL   printStr   
4453   20 28 23 00            .CSTR   " (#"   
4457   CD 27 08               CALL   prthex   
445A   CD 91 08               CALL   printStr   
445D   29 0D 0A 00            .CSTR   ")\r\n"   
4461   76                     HALT      
4462   00                     .CSTR      
4463                EXPECTM_0_2241S43:      
4463   E1                     POP   HL   
4464                          ;*Macro unroll:  test "#FF", $FF
4464   31 80 18               LD   SP,STACK   
4467   CD A5 08               CALL   init   
446A   CD 98 08               CALL   execStr   
446D   23 46 46 00            .CSTR   "#FF"   
4471                          ;*Macro unroll:  expect "#FF",$FF
4471   E1                     POP   HL   
4472   E5                     PUSH   HL   
4473   11 FF 00               LD   DE,$FF   
4476   B7                     OR   A   
4477   ED 52                  SBC   HL,DE   
4479   7D                     LD   A,L   
447A   B4                     OR   H   
447B   28 4E                  JR   Z,expectM_0_2242S43   
447D   CD 91 08               CALL   printStr   
4480   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
448A   CD 91 08               CALL   printStr   
448D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
449C   21 FF 00               LD   HL,$FF   
449F   CD DF 07               CALL   prtdec   
44A2   CD 91 08               CALL   printStr   
44A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44B2   E1                     POP   hl   
44B3   E5                     PUSH   hl   
44B4   CD DF 07               CALL   prtdec   
44B7   E1                     POP   hl   
44B8   CD 91 08               CALL   printStr   
44BB   20 28 23 00            .CSTR   " (#"   
44BF   CD 27 08               CALL   prthex   
44C2   CD 91 08               CALL   printStr   
44C5   29 0D 0A 00            .CSTR   ")\r\n"   
44C9   76                     HALT      
44CA   00                     .CSTR      
44CB                EXPECTM_0_2242S43:      
44CB   E1                     POP   HL   
44CC                          ;*Macro unroll:  test "-1 2 +",1
44CC   31 80 18               LD   SP,STACK   
44CF   CD A5 08               CALL   init   
44D2   CD 98 08               CALL   execStr   
44D5   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
44DC                          ;*Macro unroll:  expect "-1 2 +",1
44DC   E1                     POP   HL   
44DD   E5                     PUSH   HL   
44DE   11 01 00               LD   DE,1   
44E1   B7                     OR   A   
44E2   ED 52                  SBC   HL,DE   
44E4   7D                     LD   A,L   
44E5   B4                     OR   H   
44E6   28 51                  JR   Z,expectM_0_2243S43   
44E8   CD 91 08               CALL   printStr   
44EB   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
44F8   CD 91 08               CALL   printStr   
44FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
450A   21 01 00               LD   HL,1   
450D   CD DF 07               CALL   prtdec   
4510   CD 91 08               CALL   printStr   
4513   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4520   E1                     POP   hl   
4521   E5                     PUSH   hl   
4522   CD DF 07               CALL   prtdec   
4525   E1                     POP   hl   
4526   CD 91 08               CALL   printStr   
4529   20 28 23 00            .CSTR   " (#"   
452D   CD 27 08               CALL   prthex   
4530   CD 91 08               CALL   printStr   
4533   29 0D 0A 00            .CSTR   ")\r\n"   
4537   76                     HALT      
4538   00                     .CSTR      
4539                EXPECTM_0_2243S43:      
4539   E1                     POP   HL   
453A                          ;*Macro unroll:  test "-1 1 +",0
453A   31 80 18               LD   SP,STACK   
453D   CD A5 08               CALL   init   
4540   CD 98 08               CALL   execStr   
4543   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
454A                          ;*Macro unroll:  expect "-1 1 +",0
454A   E1                     POP   HL   
454B   E5                     PUSH   HL   
454C   11 00 00               LD   DE,0   
454F   B7                     OR   A   
4550   ED 52                  SBC   HL,DE   
4552   7D                     LD   A,L   
4553   B4                     OR   H   
4554   28 51                  JR   Z,expectM_0_2244S43   
4556   CD 91 08               CALL   printStr   
4559   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
4566   CD 91 08               CALL   printStr   
4569   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4578   21 00 00               LD   HL,0   
457B   CD DF 07               CALL   prtdec   
457E   CD 91 08               CALL   printStr   
4581   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
458E   E1                     POP   hl   
458F   E5                     PUSH   hl   
4590   CD DF 07               CALL   prtdec   
4593   E1                     POP   hl   
4594   CD 91 08               CALL   printStr   
4597   20 28 23 00            .CSTR   " (#"   
459B   CD 27 08               CALL   prthex   
459E   CD 91 08               CALL   printStr   
45A1   29 0D 0A 00            .CSTR   ")\r\n"   
45A5   76                     HALT      
45A6   00                     .CSTR      
45A7                EXPECTM_0_2244S43:      
45A7   E1                     POP   HL   
45A8                          ;*Macro unroll:  test "1 2 +", 3
45A8   31 80 18               LD   SP,STACK   
45AB   CD A5 08               CALL   init   
45AE   CD 98 08               CALL   execStr   
45B1   31 20 32 20 2B 00      .CSTR   "1 2 +"   
45B7                          ;*Macro unroll:  expect "1 2 +",3
45B7   E1                     POP   HL   
45B8   E5                     PUSH   HL   
45B9   11 03 00               LD   DE,3   
45BC   B7                     OR   A   
45BD   ED 52                  SBC   HL,DE   
45BF   7D                     LD   A,L   
45C0   B4                     OR   H   
45C1   28 50                  JR   Z,expectM_0_2245S43   
45C3   CD 91 08               CALL   printStr   
45C6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
45D2   CD 91 08               CALL   printStr   
45D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E4   21 03 00               LD   HL,3   
45E7   CD DF 07               CALL   prtdec   
45EA   CD 91 08               CALL   printStr   
45ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45FA   E1                     POP   hl   
45FB   E5                     PUSH   hl   
45FC   CD DF 07               CALL   prtdec   
45FF   E1                     POP   hl   
4600   CD 91 08               CALL   printStr   
4603   20 28 23 00            .CSTR   " (#"   
4607   CD 27 08               CALL   prthex   
460A   CD 91 08               CALL   printStr   
460D   29 0D 0A 00            .CSTR   ")\r\n"   
4611   76                     HALT      
4612   00                     .CSTR      
4613                EXPECTM_0_2245S43:      
4613   E1                     POP   HL   
4614                          ;*Macro unroll:  test "4 1 2 +", 3
4614   31 80 18               LD   SP,STACK   
4617   CD A5 08               CALL   init   
461A   CD 98 08               CALL   execStr   
461D   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
4625                          ;*Macro unroll:  expect "4 1 2 +",3
4625   E1                     POP   HL   
4626   E5                     PUSH   HL   
4627   11 03 00               LD   DE,3   
462A   B7                     OR   A   
462B   ED 52                  SBC   HL,DE   
462D   7D                     LD   A,L   
462E   B4                     OR   H   
462F   28 52                  JR   Z,expectM_0_2246S43   
4631   CD 91 08               CALL   printStr   
4634   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
4642   CD 91 08               CALL   printStr   
4645   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4654   21 03 00               LD   HL,3   
4657   CD DF 07               CALL   prtdec   
465A   CD 91 08               CALL   printStr   
465D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
466A   E1                     POP   hl   
466B   E5                     PUSH   hl   
466C   CD DF 07               CALL   prtdec   
466F   E1                     POP   hl   
4670   CD 91 08               CALL   printStr   
4673   20 28 23 00            .CSTR   " (#"   
4677   CD 27 08               CALL   prthex   
467A   CD 91 08               CALL   printStr   
467D   29 0D 0A 00            .CSTR   ")\r\n"   
4681   76                     HALT      
4682   00                     .CSTR      
4683                EXPECTM_0_2246S43:      
4683   E1                     POP   HL   
4684                          ;*Macro unroll:  test "1 2 +", 3
4684   31 80 18               LD   SP,STACK   
4687   CD A5 08               CALL   init   
468A   CD 98 08               CALL   execStr   
468D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4693                          ;*Macro unroll:  expect "1 2 +",3
4693   E1                     POP   HL   
4694   E5                     PUSH   HL   
4695   11 03 00               LD   DE,3   
4698   B7                     OR   A   
4699   ED 52                  SBC   HL,DE   
469B   7D                     LD   A,L   
469C   B4                     OR   H   
469D   28 50                  JR   Z,expectM_0_2247S43   
469F   CD 91 08               CALL   printStr   
46A2   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
46AE   CD 91 08               CALL   printStr   
46B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46C0   21 03 00               LD   HL,3   
46C3   CD DF 07               CALL   prtdec   
46C6   CD 91 08               CALL   printStr   
46C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46D6   E1                     POP   hl   
46D7   E5                     PUSH   hl   
46D8   CD DF 07               CALL   prtdec   
46DB   E1                     POP   hl   
46DC   CD 91 08               CALL   printStr   
46DF   20 28 23 00            .CSTR   " (#"   
46E3   CD 27 08               CALL   prthex   
46E6   CD 91 08               CALL   printStr   
46E9   29 0D 0A 00            .CSTR   ")\r\n"   
46ED   76                     HALT      
46EE   00                     .CSTR      
46EF                EXPECTM_0_2247S43:      
46EF   E1                     POP   HL   
46F0                          ;*Macro unroll:  test "123 456 +", 123+456
46F0   31 80 18               LD   SP,STACK   
46F3   CD A5 08               CALL   init   
46F6   CD 98 08               CALL   execStr   
46F9   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
4703                          ;*Macro unroll:  expect "123 456 +",123+456
4703   E1                     POP   HL   
4704   E5                     PUSH   HL   
4705   11 43 02               LD   DE,123+456   
4708   B7                     OR   A   
4709   ED 52                  SBC   HL,DE   
470B   7D                     LD   A,L   
470C   B4                     OR   H   
470D   28 54                  JR   Z,expectM_0_2248S43   
470F   CD 91 08               CALL   printStr   
4712   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
4722   CD 91 08               CALL   printStr   
4725   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4734   21 43 02               LD   HL,123+456   
4737   CD DF 07               CALL   prtdec   
473A   CD 91 08               CALL   printStr   
473D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
474A   E1                     POP   hl   
474B   E5                     PUSH   hl   
474C   CD DF 07               CALL   prtdec   
474F   E1                     POP   hl   
4750   CD 91 08               CALL   printStr   
4753   20 28 23 00            .CSTR   " (#"   
4757   CD 27 08               CALL   prthex   
475A   CD 91 08               CALL   printStr   
475D   29 0D 0A 00            .CSTR   ")\r\n"   
4761   76                     HALT      
4762   00                     .CSTR      
4763                EXPECTM_0_2248S43:      
4763   E1                     POP   HL   
4764                          ;*Macro unroll:  test "64 128 +", 64+128
4764   31 80 18               LD   SP,STACK   
4767   CD A5 08               CALL   init   
476A   CD 98 08               CALL   execStr   
476D   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
4776                          ;*Macro unroll:  expect "64 128 +",64+128
4776   E1                     POP   HL   
4777   E5                     PUSH   HL   
4778   11 C0 00               LD   DE,64+128   
477B   B7                     OR   A   
477C   ED 52                  SBC   HL,DE   
477E   7D                     LD   A,L   
477F   B4                     OR   H   
4780   28 53                  JR   Z,expectM_0_2249S43   
4782   CD 91 08               CALL   printStr   
4785   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
4794   CD 91 08               CALL   printStr   
4797   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A6   21 C0 00               LD   HL,64+128   
47A9   CD DF 07               CALL   prtdec   
47AC   CD 91 08               CALL   printStr   
47AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47BC   E1                     POP   hl   
47BD   E5                     PUSH   hl   
47BE   CD DF 07               CALL   prtdec   
47C1   E1                     POP   hl   
47C2   CD 91 08               CALL   printStr   
47C5   20 28 23 00            .CSTR   " (#"   
47C9   CD 27 08               CALL   prthex   
47CC   CD 91 08               CALL   printStr   
47CF   29 0D 0A 00            .CSTR   ")\r\n"   
47D3   76                     HALT      
47D4   00                     .CSTR      
47D5                EXPECTM_0_2249S43:      
47D5   E1                     POP   HL   
47D6                          ;*Macro unroll:  test "-1 -1 -",0
47D6   31 80 18               LD   SP,STACK   
47D9   CD A5 08               CALL   init   
47DC   CD 98 08               CALL   execStr   
47DF   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
47E7                          ;*Macro unroll:  expect "-1 -1 -",0
47E7   E1                     POP   HL   
47E8   E5                     PUSH   HL   
47E9   11 00 00               LD   DE,0   
47EC   B7                     OR   A   
47ED   ED 52                  SBC   HL,DE   
47EF   7D                     LD   A,L   
47F0   B4                     OR   H   
47F1   28 52                  JR   Z,expectM_0_2250S43   
47F3   CD 91 08               CALL   printStr   
47F6   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
4804   CD 91 08               CALL   printStr   
4807   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4816   21 00 00               LD   HL,0   
4819   CD DF 07               CALL   prtdec   
481C   CD 91 08               CALL   printStr   
481F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
482C   E1                     POP   hl   
482D   E5                     PUSH   hl   
482E   CD DF 07               CALL   prtdec   
4831   E1                     POP   hl   
4832   CD 91 08               CALL   printStr   
4835   20 28 23 00            .CSTR   " (#"   
4839   CD 27 08               CALL   prthex   
483C   CD 91 08               CALL   printStr   
483F   29 0D 0A 00            .CSTR   ")\r\n"   
4843   76                     HALT      
4844   00                     .CSTR      
4845                EXPECTM_0_2250S43:      
4845   E1                     POP   HL   
4846                          ;*Macro unroll:  test "5 3 -", 2
4846   31 80 18               LD   SP,STACK   
4849   CD A5 08               CALL   init   
484C   CD 98 08               CALL   execStr   
484F   35 20 33 20 2D 00      .CSTR   "5 3 -"   
4855                          ;*Macro unroll:  expect "5 3 -",2
4855   E1                     POP   HL   
4856   E5                     PUSH   HL   
4857   11 02 00               LD   DE,2   
485A   B7                     OR   A   
485B   ED 52                  SBC   HL,DE   
485D   7D                     LD   A,L   
485E   B4                     OR   H   
485F   28 50                  JR   Z,expectM_0_2251S43   
4861   CD 91 08               CALL   printStr   
4864   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
4870   CD 91 08               CALL   printStr   
4873   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4882   21 02 00               LD   HL,2   
4885   CD DF 07               CALL   prtdec   
4888   CD 91 08               CALL   printStr   
488B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4898   E1                     POP   hl   
4899   E5                     PUSH   hl   
489A   CD DF 07               CALL   prtdec   
489D   E1                     POP   hl   
489E   CD 91 08               CALL   printStr   
48A1   20 28 23 00            .CSTR   " (#"   
48A5   CD 27 08               CALL   prthex   
48A8   CD 91 08               CALL   printStr   
48AB   29 0D 0A 00            .CSTR   ")\r\n"   
48AF   76                     HALT      
48B0   00                     .CSTR      
48B1                EXPECTM_0_2251S43:      
48B1   E1                     POP   HL   
48B2                          ;*Macro unroll:  test "3 5 &", 1
48B2   31 80 18               LD   SP,STACK   
48B5   CD A5 08               CALL   init   
48B8   CD 98 08               CALL   execStr   
48BB   33 20 35 20 26 00      .CSTR   "3 5 &"   
48C1                          ;*Macro unroll:  expect "3 5 &",1
48C1   E1                     POP   HL   
48C2   E5                     PUSH   HL   
48C3   11 01 00               LD   DE,1   
48C6   B7                     OR   A   
48C7   ED 52                  SBC   HL,DE   
48C9   7D                     LD   A,L   
48CA   B4                     OR   H   
48CB   28 50                  JR   Z,expectM_0_2252S43   
48CD   CD 91 08               CALL   printStr   
48D0   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
48DC   CD 91 08               CALL   printStr   
48DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48EE   21 01 00               LD   HL,1   
48F1   CD DF 07               CALL   prtdec   
48F4   CD 91 08               CALL   printStr   
48F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4904   E1                     POP   hl   
4905   E5                     PUSH   hl   
4906   CD DF 07               CALL   prtdec   
4909   E1                     POP   hl   
490A   CD 91 08               CALL   printStr   
490D   20 28 23 00            .CSTR   " (#"   
4911   CD 27 08               CALL   prthex   
4914   CD 91 08               CALL   printStr   
4917   29 0D 0A 00            .CSTR   ")\r\n"   
491B   76                     HALT      
491C   00                     .CSTR      
491D                EXPECTM_0_2252S43:      
491D   E1                     POP   HL   
491E                          ;*Macro unroll:  test "3 5 |", 7
491E   31 80 18               LD   SP,STACK   
4921   CD A5 08               CALL   init   
4924   CD 98 08               CALL   execStr   
4927   33 20 35 20 7C 00      .CSTR   "3 5 |"   
492D                          ;*Macro unroll:  expect "3 5 |",7
492D   E1                     POP   HL   
492E   E5                     PUSH   HL   
492F   11 07 00               LD   DE,7   
4932   B7                     OR   A   
4933   ED 52                  SBC   HL,DE   
4935   7D                     LD   A,L   
4936   B4                     OR   H   
4937   28 50                  JR   Z,expectM_0_2253S43   
4939   CD 91 08               CALL   printStr   
493C   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4948   CD 91 08               CALL   printStr   
494B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
495A   21 07 00               LD   HL,7   
495D   CD DF 07               CALL   prtdec   
4960   CD 91 08               CALL   printStr   
4963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4970   E1                     POP   hl   
4971   E5                     PUSH   hl   
4972   CD DF 07               CALL   prtdec   
4975   E1                     POP   hl   
4976   CD 91 08               CALL   printStr   
4979   20 28 23 00            .CSTR   " (#"   
497D   CD 27 08               CALL   prthex   
4980   CD 91 08               CALL   printStr   
4983   29 0D 0A 00            .CSTR   ")\r\n"   
4987   76                     HALT      
4988   00                     .CSTR      
4989                EXPECTM_0_2253S43:      
4989   E1                     POP   HL   
498A                          ;*Macro unroll:  test "2 3 *", 6
498A   31 80 18               LD   SP,STACK   
498D   CD A5 08               CALL   init   
4990   CD 98 08               CALL   execStr   
4993   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4999                          ;*Macro unroll:  expect "2 3 *",6
4999   E1                     POP   HL   
499A   E5                     PUSH   HL   
499B   11 06 00               LD   DE,6   
499E   B7                     OR   A   
499F   ED 52                  SBC   HL,DE   
49A1   7D                     LD   A,L   
49A2   B4                     OR   H   
49A3   28 50                  JR   Z,expectM_0_2254S43   
49A5   CD 91 08               CALL   printStr   
49A8   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
49B4   CD 91 08               CALL   printStr   
49B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49C6   21 06 00               LD   HL,6   
49C9   CD DF 07               CALL   prtdec   
49CC   CD 91 08               CALL   printStr   
49CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49DC   E1                     POP   hl   
49DD   E5                     PUSH   hl   
49DE   CD DF 07               CALL   prtdec   
49E1   E1                     POP   hl   
49E2   CD 91 08               CALL   printStr   
49E5   20 28 23 00            .CSTR   " (#"   
49E9   CD 27 08               CALL   prthex   
49EC   CD 91 08               CALL   printStr   
49EF   29 0D 0A 00            .CSTR   ")\r\n"   
49F3   76                     HALT      
49F4   00                     .CSTR      
49F5                EXPECTM_0_2254S43:      
49F5   E1                     POP   HL   
49F6                          ;*Macro unroll:  test "1 2 3 + *", 5
49F6   31 80 18               LD   SP,STACK   
49F9   CD A5 08               CALL   init   
49FC   CD 98 08               CALL   execStr   
49FF   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4A09                          ;*Macro unroll:  expect "1 2 3 + *",5
4A09   E1                     POP   HL   
4A0A   E5                     PUSH   HL   
4A0B   11 05 00               LD   DE,5   
4A0E   B7                     OR   A   
4A0F   ED 52                  SBC   HL,DE   
4A11   7D                     LD   A,L   
4A12   B4                     OR   H   
4A13   28 54                  JR   Z,expectM_0_2255S43   
4A15   CD 91 08               CALL   printStr   
4A18   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4A28   CD 91 08               CALL   printStr   
4A2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A3A   21 05 00               LD   HL,5   
4A3D   CD DF 07               CALL   prtdec   
4A40   CD 91 08               CALL   printStr   
4A43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A50   E1                     POP   hl   
4A51   E5                     PUSH   hl   
4A52   CD DF 07               CALL   prtdec   
4A55   E1                     POP   hl   
4A56   CD 91 08               CALL   printStr   
4A59   20 28 23 00            .CSTR   " (#"   
4A5D   CD 27 08               CALL   prthex   
4A60   CD 91 08               CALL   printStr   
4A63   29 0D 0A 00            .CSTR   ")\r\n"   
4A67   76                     HALT      
4A68   00                     .CSTR      
4A69                EXPECTM_0_2255S43:      
4A69   E1                     POP   HL   
4A6A                          ;*Macro unroll:  test "7 3 /", 2
4A6A   31 80 18               LD   SP,STACK   
4A6D   CD A5 08               CALL   init   
4A70   CD 98 08               CALL   execStr   
4A73   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4A79                          ;*Macro unroll:  expect "7 3 /",2
4A79   E1                     POP   HL   
4A7A   E5                     PUSH   HL   
4A7B   11 02 00               LD   DE,2   
4A7E   B7                     OR   A   
4A7F   ED 52                  SBC   HL,DE   
4A81   7D                     LD   A,L   
4A82   B4                     OR   H   
4A83   28 50                  JR   Z,expectM_0_2256S43   
4A85   CD 91 08               CALL   printStr   
4A88   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4A94   CD 91 08               CALL   printStr   
4A97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AA6   21 02 00               LD   HL,2   
4AA9   CD DF 07               CALL   prtdec   
4AAC   CD 91 08               CALL   printStr   
4AAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ABC   E1                     POP   hl   
4ABD   E5                     PUSH   hl   
4ABE   CD DF 07               CALL   prtdec   
4AC1   E1                     POP   hl   
4AC2   CD 91 08               CALL   printStr   
4AC5   20 28 23 00            .CSTR   " (#"   
4AC9   CD 27 08               CALL   prthex   
4ACC   CD 91 08               CALL   printStr   
4ACF   29 0D 0A 00            .CSTR   ")\r\n"   
4AD3   76                     HALT      
4AD4   00                     .CSTR      
4AD5                EXPECTM_0_2256S43:      
4AD5   E1                     POP   HL   
4AD6                          ;*Macro unroll:  test "2 3 ==", FALSE
4AD6   31 80 18               LD   SP,STACK   
4AD9   CD A5 08               CALL   init   
4ADC   CD 98 08               CALL   execStr   
4ADF   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
4AE6                          ;*Macro unroll:  expect "2 3 ==",FALSE
4AE6   E1                     POP   HL   
4AE7   E5                     PUSH   HL   
4AE8   11 00 00               LD   DE,FALSE   
4AEB   B7                     OR   A   
4AEC   ED 52                  SBC   HL,DE   
4AEE   7D                     LD   A,L   
4AEF   B4                     OR   H   
4AF0   28 51                  JR   Z,expectM_0_2257S43   
4AF2   CD 91 08               CALL   printStr   
4AF5   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
4B02   CD 91 08               CALL   printStr   
4B05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B14   21 00 00               LD   HL,FALSE   
4B17   CD DF 07               CALL   prtdec   
4B1A   CD 91 08               CALL   printStr   
4B1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B2A   E1                     POP   hl   
4B2B   E5                     PUSH   hl   
4B2C   CD DF 07               CALL   prtdec   
4B2F   E1                     POP   hl   
4B30   CD 91 08               CALL   printStr   
4B33   20 28 23 00            .CSTR   " (#"   
4B37   CD 27 08               CALL   prthex   
4B3A   CD 91 08               CALL   printStr   
4B3D   29 0D 0A 00            .CSTR   ")\r\n"   
4B41   76                     HALT      
4B42   00                     .CSTR      
4B43                EXPECTM_0_2257S43:      
4B43   E1                     POP   HL   
4B44                          ;*Macro unroll:  test "3 3 ==", TRUE
4B44   31 80 18               LD   SP,STACK   
4B47   CD A5 08               CALL   init   
4B4A   CD 98 08               CALL   execStr   
4B4D   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
4B54                          ;*Macro unroll:  expect "3 3 ==",TRUE
4B54   E1                     POP   HL   
4B55   E5                     PUSH   HL   
4B56   11 FF FF               LD   DE,TRUE   
4B59   B7                     OR   A   
4B5A   ED 52                  SBC   HL,DE   
4B5C   7D                     LD   A,L   
4B5D   B4                     OR   H   
4B5E   28 51                  JR   Z,expectM_0_2258S43   
4B60   CD 91 08               CALL   printStr   
4B63   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
4B70   CD 91 08               CALL   printStr   
4B73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B82   21 FF FF               LD   HL,TRUE   
4B85   CD DF 07               CALL   prtdec   
4B88   CD 91 08               CALL   printStr   
4B8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B98   E1                     POP   hl   
4B99   E5                     PUSH   hl   
4B9A   CD DF 07               CALL   prtdec   
4B9D   E1                     POP   hl   
4B9E   CD 91 08               CALL   printStr   
4BA1   20 28 23 00            .CSTR   " (#"   
4BA5   CD 27 08               CALL   prthex   
4BA8   CD 91 08               CALL   printStr   
4BAB   29 0D 0A 00            .CSTR   ")\r\n"   
4BAF   76                     HALT      
4BB0   00                     .CSTR      
4BB1                EXPECTM_0_2258S43:      
4BB1   E1                     POP   HL   
4BB2                          ;*Macro unroll:  test "1 2 <", TRUE
4BB2   31 80 18               LD   SP,STACK   
4BB5   CD A5 08               CALL   init   
4BB8   CD 98 08               CALL   execStr   
4BBB   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4BC1                          ;*Macro unroll:  expect "1 2 <",TRUE
4BC1   E1                     POP   HL   
4BC2   E5                     PUSH   HL   
4BC3   11 FF FF               LD   DE,TRUE   
4BC6   B7                     OR   A   
4BC7   ED 52                  SBC   HL,DE   
4BC9   7D                     LD   A,L   
4BCA   B4                     OR   H   
4BCB   28 50                  JR   Z,expectM_0_2259S43   
4BCD   CD 91 08               CALL   printStr   
4BD0   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4BDC   CD 91 08               CALL   printStr   
4BDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BEE   21 FF FF               LD   HL,TRUE   
4BF1   CD DF 07               CALL   prtdec   
4BF4   CD 91 08               CALL   printStr   
4BF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C04   E1                     POP   hl   
4C05   E5                     PUSH   hl   
4C06   CD DF 07               CALL   prtdec   
4C09   E1                     POP   hl   
4C0A   CD 91 08               CALL   printStr   
4C0D   20 28 23 00            .CSTR   " (#"   
4C11   CD 27 08               CALL   prthex   
4C14   CD 91 08               CALL   printStr   
4C17   29 0D 0A 00            .CSTR   ")\r\n"   
4C1B   76                     HALT      
4C1C   00                     .CSTR      
4C1D                EXPECTM_0_2259S43:      
4C1D   E1                     POP   HL   
4C1E                          ;*Macro unroll:  test "2 1 <", FALSE
4C1E   31 80 18               LD   SP,STACK   
4C21   CD A5 08               CALL   init   
4C24   CD 98 08               CALL   execStr   
4C27   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4C2D                          ;*Macro unroll:  expect "2 1 <",FALSE
4C2D   E1                     POP   HL   
4C2E   E5                     PUSH   HL   
4C2F   11 00 00               LD   DE,FALSE   
4C32   B7                     OR   A   
4C33   ED 52                  SBC   HL,DE   
4C35   7D                     LD   A,L   
4C36   B4                     OR   H   
4C37   28 50                  JR   Z,expectM_0_2260S43   
4C39   CD 91 08               CALL   printStr   
4C3C   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4C48   CD 91 08               CALL   printStr   
4C4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C5A   21 00 00               LD   HL,FALSE   
4C5D   CD DF 07               CALL   prtdec   
4C60   CD 91 08               CALL   printStr   
4C63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C70   E1                     POP   hl   
4C71   E5                     PUSH   hl   
4C72   CD DF 07               CALL   prtdec   
4C75   E1                     POP   hl   
4C76   CD 91 08               CALL   printStr   
4C79   20 28 23 00            .CSTR   " (#"   
4C7D   CD 27 08               CALL   prthex   
4C80   CD 91 08               CALL   printStr   
4C83   29 0D 0A 00            .CSTR   ")\r\n"   
4C87   76                     HALT      
4C88   00                     .CSTR      
4C89                EXPECTM_0_2260S43:      
4C89   E1                     POP   HL   
4C8A                          ;*Macro unroll:  test "2 3 <", TRUE
4C8A   31 80 18               LD   SP,STACK   
4C8D   CD A5 08               CALL   init   
4C90   CD 98 08               CALL   execStr   
4C93   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4C99                          ;*Macro unroll:  expect "2 3 <",TRUE
4C99   E1                     POP   HL   
4C9A   E5                     PUSH   HL   
4C9B   11 FF FF               LD   DE,TRUE   
4C9E   B7                     OR   A   
4C9F   ED 52                  SBC   HL,DE   
4CA1   7D                     LD   A,L   
4CA2   B4                     OR   H   
4CA3   28 50                  JR   Z,expectM_0_2261S43   
4CA5   CD 91 08               CALL   printStr   
4CA8   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4CB4   CD 91 08               CALL   printStr   
4CB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CC6   21 FF FF               LD   HL,TRUE   
4CC9   CD DF 07               CALL   prtdec   
4CCC   CD 91 08               CALL   printStr   
4CCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CDC   E1                     POP   hl   
4CDD   E5                     PUSH   hl   
4CDE   CD DF 07               CALL   prtdec   
4CE1   E1                     POP   hl   
4CE2   CD 91 08               CALL   printStr   
4CE5   20 28 23 00            .CSTR   " (#"   
4CE9   CD 27 08               CALL   prthex   
4CEC   CD 91 08               CALL   printStr   
4CEF   29 0D 0A 00            .CSTR   ")\r\n"   
4CF3   76                     HALT      
4CF4   00                     .CSTR      
4CF5                EXPECTM_0_2261S43:      
4CF5   E1                     POP   HL   
4CF6                          ;*Macro unroll:  test "3 3 <", FALSE
4CF6   31 80 18               LD   SP,STACK   
4CF9   CD A5 08               CALL   init   
4CFC   CD 98 08               CALL   execStr   
4CFF   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4D05                          ;*Macro unroll:  expect "3 3 <",FALSE
4D05   E1                     POP   HL   
4D06   E5                     PUSH   HL   
4D07   11 00 00               LD   DE,FALSE   
4D0A   B7                     OR   A   
4D0B   ED 52                  SBC   HL,DE   
4D0D   7D                     LD   A,L   
4D0E   B4                     OR   H   
4D0F   28 50                  JR   Z,expectM_0_2262S43   
4D11   CD 91 08               CALL   printStr   
4D14   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4D20   CD 91 08               CALL   printStr   
4D23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D32   21 00 00               LD   HL,FALSE   
4D35   CD DF 07               CALL   prtdec   
4D38   CD 91 08               CALL   printStr   
4D3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D48   E1                     POP   hl   
4D49   E5                     PUSH   hl   
4D4A   CD DF 07               CALL   prtdec   
4D4D   E1                     POP   hl   
4D4E   CD 91 08               CALL   printStr   
4D51   20 28 23 00            .CSTR   " (#"   
4D55   CD 27 08               CALL   prthex   
4D58   CD 91 08               CALL   printStr   
4D5B   29 0D 0A 00            .CSTR   ")\r\n"   
4D5F   76                     HALT      
4D60   00                     .CSTR      
4D61                EXPECTM_0_2262S43:      
4D61   E1                     POP   HL   
4D62                          ;*Macro unroll:  test "1 2 >", FALSE
4D62   31 80 18               LD   SP,STACK   
4D65   CD A5 08               CALL   init   
4D68   CD 98 08               CALL   execStr   
4D6B   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4D71                          ;*Macro unroll:  expect "1 2 >",FALSE
4D71   E1                     POP   HL   
4D72   E5                     PUSH   HL   
4D73   11 00 00               LD   DE,FALSE   
4D76   B7                     OR   A   
4D77   ED 52                  SBC   HL,DE   
4D79   7D                     LD   A,L   
4D7A   B4                     OR   H   
4D7B   28 50                  JR   Z,expectM_0_2263S43   
4D7D   CD 91 08               CALL   printStr   
4D80   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4D8C   CD 91 08               CALL   printStr   
4D8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D9E   21 00 00               LD   HL,FALSE   
4DA1   CD DF 07               CALL   prtdec   
4DA4   CD 91 08               CALL   printStr   
4DA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DB4   E1                     POP   hl   
4DB5   E5                     PUSH   hl   
4DB6   CD DF 07               CALL   prtdec   
4DB9   E1                     POP   hl   
4DBA   CD 91 08               CALL   printStr   
4DBD   20 28 23 00            .CSTR   " (#"   
4DC1   CD 27 08               CALL   prthex   
4DC4   CD 91 08               CALL   printStr   
4DC7   29 0D 0A 00            .CSTR   ")\r\n"   
4DCB   76                     HALT      
4DCC   00                     .CSTR      
4DCD                EXPECTM_0_2263S43:      
4DCD   E1                     POP   HL   
4DCE                          ;*Macro unroll:  test "2 1 >", TRUE
4DCE   31 80 18               LD   SP,STACK   
4DD1   CD A5 08               CALL   init   
4DD4   CD 98 08               CALL   execStr   
4DD7   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4DDD                          ;*Macro unroll:  expect "2 1 >",TRUE
4DDD   E1                     POP   HL   
4DDE   E5                     PUSH   HL   
4DDF   11 FF FF               LD   DE,TRUE   
4DE2   B7                     OR   A   
4DE3   ED 52                  SBC   HL,DE   
4DE5   7D                     LD   A,L   
4DE6   B4                     OR   H   
4DE7   28 50                  JR   Z,expectM_0_2264S43   
4DE9   CD 91 08               CALL   printStr   
4DEC   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4DF8   CD 91 08               CALL   printStr   
4DFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E0A   21 FF FF               LD   HL,TRUE   
4E0D   CD DF 07               CALL   prtdec   
4E10   CD 91 08               CALL   printStr   
4E13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E20   E1                     POP   hl   
4E21   E5                     PUSH   hl   
4E22   CD DF 07               CALL   prtdec   
4E25   E1                     POP   hl   
4E26   CD 91 08               CALL   printStr   
4E29   20 28 23 00            .CSTR   " (#"   
4E2D   CD 27 08               CALL   prthex   
4E30   CD 91 08               CALL   printStr   
4E33   29 0D 0A 00            .CSTR   ")\r\n"   
4E37   76                     HALT      
4E38   00                     .CSTR      
4E39                EXPECTM_0_2264S43:      
4E39   E1                     POP   HL   
4E3A                          ;*Macro unroll:  test "3 3 >", FALSE
4E3A   31 80 18               LD   SP,STACK   
4E3D   CD A5 08               CALL   init   
4E40   CD 98 08               CALL   execStr   
4E43   33 20 33 20 3E 00      .CSTR   "3 3 >"   
4E49                          ;*Macro unroll:  expect "3 3 >",FALSE
4E49   E1                     POP   HL   
4E4A   E5                     PUSH   HL   
4E4B   11 00 00               LD   DE,FALSE   
4E4E   B7                     OR   A   
4E4F   ED 52                  SBC   HL,DE   
4E51   7D                     LD   A,L   
4E52   B4                     OR   H   
4E53   28 50                  JR   Z,expectM_0_2265S43   
4E55   CD 91 08               CALL   printStr   
4E58   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
4E64   CD 91 08               CALL   printStr   
4E67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E76   21 00 00               LD   HL,FALSE   
4E79   CD DF 07               CALL   prtdec   
4E7C   CD 91 08               CALL   printStr   
4E7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E8C   E1                     POP   hl   
4E8D   E5                     PUSH   hl   
4E8E   CD DF 07               CALL   prtdec   
4E91   E1                     POP   hl   
4E92   CD 91 08               CALL   printStr   
4E95   20 28 23 00            .CSTR   " (#"   
4E99   CD 27 08               CALL   prthex   
4E9C   CD 91 08               CALL   printStr   
4E9F   29 0D 0A 00            .CSTR   ")\r\n"   
4EA3   76                     HALT      
4EA4   00                     .CSTR      
4EA5                EXPECTM_0_2265S43:      
4EA5   E1                     POP   HL   
4EA6                          ;*Macro unroll:  test "4 3 >", TRUE
4EA6   31 80 18               LD   SP,STACK   
4EA9   CD A5 08               CALL   init   
4EAC   CD 98 08               CALL   execStr   
4EAF   34 20 33 20 3E 00      .CSTR   "4 3 >"   
4EB5                          ;*Macro unroll:  expect "4 3 >",TRUE
4EB5   E1                     POP   HL   
4EB6   E5                     PUSH   HL   
4EB7   11 FF FF               LD   DE,TRUE   
4EBA   B7                     OR   A   
4EBB   ED 52                  SBC   HL,DE   
4EBD   7D                     LD   A,L   
4EBE   B4                     OR   H   
4EBF   28 50                  JR   Z,expectM_0_2266S43   
4EC1   CD 91 08               CALL   printStr   
4EC4   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
4ED0   CD 91 08               CALL   printStr   
4ED3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EE2   21 FF FF               LD   HL,TRUE   
4EE5   CD DF 07               CALL   prtdec   
4EE8   CD 91 08               CALL   printStr   
4EEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EF8   E1                     POP   hl   
4EF9   E5                     PUSH   hl   
4EFA   CD DF 07               CALL   prtdec   
4EFD   E1                     POP   hl   
4EFE   CD 91 08               CALL   printStr   
4F01   20 28 23 00            .CSTR   " (#"   
4F05   CD 27 08               CALL   prthex   
4F08   CD 91 08               CALL   printStr   
4F0B   29 0D 0A 00            .CSTR   ")\r\n"   
4F0F   76                     HALT      
4F10   00                     .CSTR      
4F11                EXPECTM_0_2266S43:      
4F11   E1                     POP   HL   
4F12                          ;*Macro unroll:  test "2 2 <=", TRUE
4F12   31 80 18               LD   SP,STACK   
4F15   CD A5 08               CALL   init   
4F18   CD 98 08               CALL   execStr   
4F1B   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
4F22                          ;*Macro unroll:  expect "2 2 <=",TRUE
4F22   E1                     POP   HL   
4F23   E5                     PUSH   HL   
4F24   11 FF FF               LD   DE,TRUE   
4F27   B7                     OR   A   
4F28   ED 52                  SBC   HL,DE   
4F2A   7D                     LD   A,L   
4F2B   B4                     OR   H   
4F2C   28 51                  JR   Z,expectM_0_2267S43   
4F2E   CD 91 08               CALL   printStr   
4F31   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
4F3E   CD 91 08               CALL   printStr   
4F41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F50   21 FF FF               LD   HL,TRUE   
4F53   CD DF 07               CALL   prtdec   
4F56   CD 91 08               CALL   printStr   
4F59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F66   E1                     POP   hl   
4F67   E5                     PUSH   hl   
4F68   CD DF 07               CALL   prtdec   
4F6B   E1                     POP   hl   
4F6C   CD 91 08               CALL   printStr   
4F6F   20 28 23 00            .CSTR   " (#"   
4F73   CD 27 08               CALL   prthex   
4F76   CD 91 08               CALL   printStr   
4F79   29 0D 0A 00            .CSTR   ")\r\n"   
4F7D   76                     HALT      
4F7E   00                     .CSTR      
4F7F                EXPECTM_0_2267S43:      
4F7F   E1                     POP   HL   
4F80                          ;*Macro unroll:  test "2 2 >=", TRUE
4F80   31 80 18               LD   SP,STACK   
4F83   CD A5 08               CALL   init   
4F86   CD 98 08               CALL   execStr   
4F89   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
4F90                          ;*Macro unroll:  expect "2 2 >=",TRUE
4F90   E1                     POP   HL   
4F91   E5                     PUSH   HL   
4F92   11 FF FF               LD   DE,TRUE   
4F95   B7                     OR   A   
4F96   ED 52                  SBC   HL,DE   
4F98   7D                     LD   A,L   
4F99   B4                     OR   H   
4F9A   28 51                  JR   Z,expectM_0_2268S43   
4F9C   CD 91 08               CALL   printStr   
4F9F   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
4FAC   CD 91 08               CALL   printStr   
4FAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FBE   21 FF FF               LD   HL,TRUE   
4FC1   CD DF 07               CALL   prtdec   
4FC4   CD 91 08               CALL   printStr   
4FC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FD4   E1                     POP   hl   
4FD5   E5                     PUSH   hl   
4FD6   CD DF 07               CALL   prtdec   
4FD9   E1                     POP   hl   
4FDA   CD 91 08               CALL   printStr   
4FDD   20 28 23 00            .CSTR   " (#"   
4FE1   CD 27 08               CALL   prthex   
4FE4   CD 91 08               CALL   printStr   
4FE7   29 0D 0A 00            .CSTR   ")\r\n"   
4FEB   76                     HALT      
4FEC   00                     .CSTR      
4FED                EXPECTM_0_2268S43:      
4FED   E1                     POP   HL   
4FEE                          ;*Macro unroll:  test "3 1 <<", 6
4FEE   31 80 18               LD   SP,STACK   
4FF1   CD A5 08               CALL   init   
4FF4   CD 98 08               CALL   execStr   
4FF7   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
4FFE                          ;*Macro unroll:  expect "3 1 <<",6
4FFE   E1                     POP   HL   
4FFF   E5                     PUSH   HL   
5000   11 06 00               LD   DE,6   
5003   B7                     OR   A   
5004   ED 52                  SBC   HL,DE   
5006   7D                     LD   A,L   
5007   B4                     OR   H   
5008   28 51                  JR   Z,expectM_0_2269S43   
500A   CD 91 08               CALL   printStr   
500D   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
501A   CD 91 08               CALL   printStr   
501D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
502C   21 06 00               LD   HL,6   
502F   CD DF 07               CALL   prtdec   
5032   CD 91 08               CALL   printStr   
5035   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5042   E1                     POP   hl   
5043   E5                     PUSH   hl   
5044   CD DF 07               CALL   prtdec   
5047   E1                     POP   hl   
5048   CD 91 08               CALL   printStr   
504B   20 28 23 00            .CSTR   " (#"   
504F   CD 27 08               CALL   prthex   
5052   CD 91 08               CALL   printStr   
5055   29 0D 0A 00            .CSTR   ")\r\n"   
5059   76                     HALT      
505A   00                     .CSTR      
505B                EXPECTM_0_2269S43:      
505B   E1                     POP   HL   
505C                          ;*Macro unroll:  test "10 1 >>", 5
505C   31 80 18               LD   SP,STACK   
505F   CD A5 08               CALL   init   
5062   CD 98 08               CALL   execStr   
5065   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
506D                          ;*Macro unroll:  expect "10 1 >>",5
506D   E1                     POP   HL   
506E   E5                     PUSH   HL   
506F   11 05 00               LD   DE,5   
5072   B7                     OR   A   
5073   ED 52                  SBC   HL,DE   
5075   7D                     LD   A,L   
5076   B4                     OR   H   
5077   28 52                  JR   Z,expectM_0_2270S43   
5079   CD 91 08               CALL   printStr   
507C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
508A   CD 91 08               CALL   printStr   
508D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
509C   21 05 00               LD   HL,5   
509F   CD DF 07               CALL   prtdec   
50A2   CD 91 08               CALL   printStr   
50A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50B2   E1                     POP   hl   
50B3   E5                     PUSH   hl   
50B4   CD DF 07               CALL   prtdec   
50B7   E1                     POP   hl   
50B8   CD 91 08               CALL   printStr   
50BB   20 28 23 00            .CSTR   " (#"   
50BF   CD 27 08               CALL   prthex   
50C2   CD 91 08               CALL   printStr   
50C5   29 0D 0A 00            .CSTR   ")\r\n"   
50C9   76                     HALT      
50CA   00                     .CSTR      
50CB                EXPECTM_0_2270S43:      
50CB   E1                     POP   HL   
50CC                          ;*Macro unroll:  test "1 x = x", 1
50CC   31 80 18               LD   SP,STACK   
50CF   CD A5 08               CALL   init   
50D2   CD 98 08               CALL   execStr   
50D5   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
50DD                          ;*Macro unroll:  expect "1 x = x",1
50DD   E1                     POP   HL   
50DE   E5                     PUSH   HL   
50DF   11 01 00               LD   DE,1   
50E2   B7                     OR   A   
50E3   ED 52                  SBC   HL,DE   
50E5   7D                     LD   A,L   
50E6   B4                     OR   H   
50E7   28 52                  JR   Z,expectM_0_2271S43   
50E9   CD 91 08               CALL   printStr   
50EC   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
50FA   CD 91 08               CALL   printStr   
50FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
510C   21 01 00               LD   HL,1   
510F   CD DF 07               CALL   prtdec   
5112   CD 91 08               CALL   printStr   
5115   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5122   E1                     POP   hl   
5123   E5                     PUSH   hl   
5124   CD DF 07               CALL   prtdec   
5127   E1                     POP   hl   
5128   CD 91 08               CALL   printStr   
512B   20 28 23 00            .CSTR   " (#"   
512F   CD 27 08               CALL   prthex   
5132   CD 91 08               CALL   printStr   
5135   29 0D 0A 00            .CSTR   ")\r\n"   
5139   76                     HALT      
513A   00                     .CSTR      
513B                EXPECTM_0_2271S43:      
513B   E1                     POP   HL   
513C                          ;*Macro unroll:  test "{1}:", 1
513C   31 80 18               LD   SP,STACK   
513F   CD A5 08               CALL   init   
5142   CD 98 08               CALL   execStr   
5145   7B 31 7D 3A 00         .CSTR   "{1}:"   
514A                          ;*Macro unroll:  expect "{1}:",1
514A   E1                     POP   HL   
514B   E5                     PUSH   HL   
514C   11 01 00               LD   DE,1   
514F   B7                     OR   A   
5150   ED 52                  SBC   HL,DE   
5152   7D                     LD   A,L   
5153   B4                     OR   H   
5154   28 4F                  JR   Z,expectM_0_2272S43   
5156   CD 91 08               CALL   printStr   
5159   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
5164   CD 91 08               CALL   printStr   
5167   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5176   21 01 00               LD   HL,1   
5179   CD DF 07               CALL   prtdec   
517C   CD 91 08               CALL   printStr   
517F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
518C   E1                     POP   hl   
518D   E5                     PUSH   hl   
518E   CD DF 07               CALL   prtdec   
5191   E1                     POP   hl   
5192   CD 91 08               CALL   printStr   
5195   20 28 23 00            .CSTR   " (#"   
5199   CD 27 08               CALL   prthex   
519C   CD 91 08               CALL   printStr   
519F   29 0D 0A 00            .CSTR   ")\r\n"   
51A3   76                     HALT      
51A4   00                     .CSTR      
51A5                EXPECTM_0_2272S43:      
51A5   E1                     POP   HL   
51A6                          ;*Macro unroll:  test "{{1}:}:", 1
51A6   31 80 18               LD   SP,STACK   
51A9   CD A5 08               CALL   init   
51AC   CD 98 08               CALL   execStr   
51AF   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
51B7                          ;*Macro unroll:  expect "{{1}:}:",1
51B7   E1                     POP   HL   
51B8   E5                     PUSH   HL   
51B9   11 01 00               LD   DE,1   
51BC   B7                     OR   A   
51BD   ED 52                  SBC   HL,DE   
51BF   7D                     LD   A,L   
51C0   B4                     OR   H   
51C1   28 52                  JR   Z,expectM_0_2273S43   
51C3   CD 91 08               CALL   printStr   
51C6   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
51D4   CD 91 08               CALL   printStr   
51D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51E6   21 01 00               LD   HL,1   
51E9   CD DF 07               CALL   prtdec   
51EC   CD 91 08               CALL   printStr   
51EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51FC   E1                     POP   hl   
51FD   E5                     PUSH   hl   
51FE   CD DF 07               CALL   prtdec   
5201   E1                     POP   hl   
5202   CD 91 08               CALL   printStr   
5205   20 28 23 00            .CSTR   " (#"   
5209   CD 27 08               CALL   prthex   
520C   CD 91 08               CALL   printStr   
520F   29 0D 0A 00            .CSTR   ")\r\n"   
5213   76                     HALT      
5214   00                     .CSTR      
5215                EXPECTM_0_2273S43:      
5215   E1                     POP   HL   
5216                          ;*Macro unroll:  test "{{{1}:}:}:", 1
5216   31 80 18               LD   SP,STACK   
5219   CD A5 08               CALL   init   
521C   CD 98 08               CALL   execStr   
521F   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
522A                          ;*Macro unroll:  expect "{{{1}:}:}:",1
522A   E1                     POP   HL   
522B   E5                     PUSH   HL   
522C   11 01 00               LD   DE,1   
522F   B7                     OR   A   
5230   ED 52                  SBC   HL,DE   
5232   7D                     LD   A,L   
5233   B4                     OR   H   
5234   28 55                  JR   Z,expectM_0_2274S43   
5236   CD 91 08               CALL   printStr   
5239   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
524A   CD 91 08               CALL   printStr   
524D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
525C   21 01 00               LD   HL,1   
525F   CD DF 07               CALL   prtdec   
5262   CD 91 08               CALL   printStr   
5265   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5272   E1                     POP   hl   
5273   E5                     PUSH   hl   
5274   CD DF 07               CALL   prtdec   
5277   E1                     POP   hl   
5278   CD 91 08               CALL   printStr   
527B   20 28 23 00            .CSTR   " (#"   
527F   CD 27 08               CALL   prthex   
5282   CD 91 08               CALL   printStr   
5285   29 0D 0A 00            .CSTR   ")\r\n"   
5289   76                     HALT      
528A   00                     .CSTR      
528B                EXPECTM_0_2274S43:      
528B   E1                     POP   HL   
528C                          ;*Macro unroll:  test "() -2?", $0000
528C   31 80 18               LD   SP,STACK   
528F   CD A5 08               CALL   init   
5292   CD 98 08               CALL   execStr   
5295   28 29 20 2D 32 3F 00   .CSTR   "() -2?"   
529C                          ;*Macro unroll:  expect "() -2?",$0000
529C   E1                     POP   HL   
529D   E5                     PUSH   HL   
529E   11 00 00               LD   DE,$0000   
52A1   B7                     OR   A   
52A2   ED 52                  SBC   HL,DE   
52A4   7D                     LD   A,L   
52A5   B4                     OR   H   
52A6   28 51                  JR   Z,expectM_0_2275S43   
52A8   CD 91 08               CALL   printStr   
52AB   43 6F 64 65 3A 20 28 29 20 2D 32 3F 00 .CSTR   "Code: ","() -2?"   
52B8   CD 91 08               CALL   printStr   
52BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52CA   21 00 00               LD   HL,$0000   
52CD   CD DF 07               CALL   prtdec   
52D0   CD 91 08               CALL   printStr   
52D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52E0   E1                     POP   hl   
52E1   E5                     PUSH   hl   
52E2   CD DF 07               CALL   prtdec   
52E5   E1                     POP   hl   
52E6   CD 91 08               CALL   printStr   
52E9   20 28 23 00            .CSTR   " (#"   
52ED   CD 27 08               CALL   prthex   
52F0   CD 91 08               CALL   printStr   
52F3   29 0D 0A 00            .CSTR   ")\r\n"   
52F7   76                     HALT      
52F8   00                     .CSTR      
52F9                EXPECTM_0_2275S43:      
52F9   E1                     POP   HL   
52FA                          ;*Macro unroll:  test "(a) -1?", $0001
52FA   31 80 18               LD   SP,STACK   
52FD   CD A5 08               CALL   init   
5300   CD 98 08               CALL   execStr   
5303   28 61 29 20 2D 31 3F 00 .CSTR   "(a) -1?"   
530B                          ;*Macro unroll:  expect "(a) -1?",$0001
530B   E1                     POP   HL   
530C   E5                     PUSH   HL   
530D   11 01 00               LD   DE,$0001   
5310   B7                     OR   A   
5311   ED 52                  SBC   HL,DE   
5313   7D                     LD   A,L   
5314   B4                     OR   H   
5315   28 52                  JR   Z,expectM_0_2276S43   
5317   CD 91 08               CALL   printStr   
531A   43 6F 64 65 3A 20 28 61 29 20 2D 31 3F 00 .CSTR   "Code: ","(a) -1?"   
5328   CD 91 08               CALL   printStr   
532B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
533A   21 01 00               LD   HL,$0001   
533D   CD DF 07               CALL   prtdec   
5340   CD 91 08               CALL   printStr   
5343   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5350   E1                     POP   hl   
5351   E5                     PUSH   hl   
5352   CD DF 07               CALL   prtdec   
5355   E1                     POP   hl   
5356   CD 91 08               CALL   printStr   
5359   20 28 23 00            .CSTR   " (#"   
535D   CD 27 08               CALL   prthex   
5360   CD 91 08               CALL   printStr   
5363   29 0D 0A 00            .CSTR   ")\r\n"   
5367   76                     HALT      
5368   00                     .CSTR      
5369                EXPECTM_0_2276S43:      
5369   E1                     POP   HL   
536A                          ;*Macro unroll:  test "(a:) -1?", $0001
536A   31 80 18               LD   SP,STACK   
536D   CD A5 08               CALL   init   
5370   CD 98 08               CALL   execStr   
5373   28 61 3A 29 20 2D 31 3F 00 .CSTR   "(a:) -1?"   
537C                          ;*Macro unroll:  expect "(a:) -1?",$0001
537C   E1                     POP   HL   
537D   E5                     PUSH   HL   
537E   11 01 00               LD   DE,$0001   
5381   B7                     OR   A   
5382   ED 52                  SBC   HL,DE   
5384   7D                     LD   A,L   
5385   B4                     OR   H   
5386   28 53                  JR   Z,expectM_0_2277S43   
5388   CD 91 08               CALL   printStr   
538B   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:) -1?"   
539A   CD 91 08               CALL   printStr   
539D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53AC   21 01 00               LD   HL,$0001   
53AF   CD DF 07               CALL   prtdec   
53B2   CD 91 08               CALL   printStr   
53B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53C2   E1                     POP   hl   
53C3   E5                     PUSH   hl   
53C4   CD DF 07               CALL   prtdec   
53C7   E1                     POP   hl   
53C8   CD 91 08               CALL   printStr   
53CB   20 28 23 00            .CSTR   " (#"   
53CF   CD 27 08               CALL   prthex   
53D2   CD 91 08               CALL   printStr   
53D5   29 0D 0A 00            .CSTR   ")\r\n"   
53D9   76                     HALT      
53DA   00                     .CSTR      
53DB                EXPECTM_0_2277S43:      
53DB   E1                     POP   HL   
53DC                          ;*Macro unroll:  test "(a:b) -1?", $0102
53DC   31 80 18               LD   SP,STACK   
53DF   CD A5 08               CALL   init   
53E2   CD 98 08               CALL   execStr   
53E5   28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "(a:b) -1?"   
53EF                          ;*Macro unroll:  expect "(a:b) -1?",$0102
53EF   E1                     POP   HL   
53F0   E5                     PUSH   HL   
53F1   11 02 01               LD   DE,$0102   
53F4   B7                     OR   A   
53F5   ED 52                  SBC   HL,DE   
53F7   7D                     LD   A,L   
53F8   B4                     OR   H   
53F9   28 54                  JR   Z,expectM_0_2278S43   
53FB   CD 91 08               CALL   printStr   
53FE   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:b) -1?"   
540E   CD 91 08               CALL   printStr   
5411   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5420   21 02 01               LD   HL,$0102   
5423   CD DF 07               CALL   prtdec   
5426   CD 91 08               CALL   printStr   
5429   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5436   E1                     POP   hl   
5437   E5                     PUSH   hl   
5438   CD DF 07               CALL   prtdec   
543B   E1                     POP   hl   
543C   CD 91 08               CALL   printStr   
543F   20 28 23 00            .CSTR   " (#"   
5443   CD 27 08               CALL   prthex   
5446   CD 91 08               CALL   printStr   
5449   29 0D 0A 00            .CSTR   ")\r\n"   
544D   76                     HALT      
544E   00                     .CSTR      
544F                EXPECTM_0_2278S43:      
544F   E1                     POP   HL   
5450                          ;*Macro unroll:  test "(:b) -1?", $0101
5450   31 80 18               LD   SP,STACK   
5453   CD A5 08               CALL   init   
5456   CD 98 08               CALL   execStr   
5459   28 3A 62 29 20 2D 31 3F 00 .CSTR   "(:b) -1?"   
5462                          ;*Macro unroll:  expect "(:b) -1?",$0101
5462   E1                     POP   HL   
5463   E5                     PUSH   HL   
5464   11 01 01               LD   DE,$0101   
5467   B7                     OR   A   
5468   ED 52                  SBC   HL,DE   
546A   7D                     LD   A,L   
546B   B4                     OR   H   
546C   28 53                  JR   Z,expectM_0_2279S43   
546E   CD 91 08               CALL   printStr   
5471   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(:b) -1?"   
5480   CD 91 08               CALL   printStr   
5483   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5492   21 01 01               LD   HL,$0101   
5495   CD DF 07               CALL   prtdec   
5498   CD 91 08               CALL   printStr   
549B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
54A8   E1                     POP   hl   
54A9   E5                     PUSH   hl   
54AA   CD DF 07               CALL   prtdec   
54AD   E1                     POP   hl   
54AE   CD 91 08               CALL   printStr   
54B1   20 28 23 00            .CSTR   " (#"   
54B5   CD 27 08               CALL   prthex   
54B8   CD 91 08               CALL   printStr   
54BB   29 0D 0A 00            .CSTR   ")\r\n"   
54BF   76                     HALT      
54C0   00                     .CSTR      
54C1                EXPECTM_0_2279S43:      
54C1   E1                     POP   HL   
54C2                          ;*Macro unroll:  test "() {2} \\f:", 2
54C2   31 80 18               LD   SP,STACK   
54C5   CD A5 08               CALL   init   
54C8   CD 98 08               CALL   execStr   
54CB   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
54D6                          ;*Macro unroll:  expect "() {2} \\f:",2
54D6   E1                     POP   HL   
54D7   E5                     PUSH   HL   
54D8   11 02 00               LD   DE,2   
54DB   B7                     OR   A   
54DC   ED 52                  SBC   HL,DE   
54DE   7D                     LD   A,L   
54DF   B4                     OR   H   
54E0   28 55                  JR   Z,expectM_0_2280S43   
54E2   CD 91 08               CALL   printStr   
54E5   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
54F6   CD 91 08               CALL   printStr   
54F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5508   21 02 00               LD   HL,2   
550B   CD DF 07               CALL   prtdec   
550E   CD 91 08               CALL   printStr   
5511   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
551E   E1                     POP   hl   
551F   E5                     PUSH   hl   
5520   CD DF 07               CALL   prtdec   
5523   E1                     POP   hl   
5524   CD 91 08               CALL   printStr   
5527   20 28 23 00            .CSTR   " (#"   
552B   CD 27 08               CALL   prthex   
552E   CD 91 08               CALL   printStr   
5531   29 0D 0A 00            .CSTR   ")\r\n"   
5535   76                     HALT      
5536   00                     .CSTR      
5537                EXPECTM_0_2280S43:      
5537   E1                     POP   HL   
5538                          ;*Macro unroll:  test "(a) {2} \\f:", 2
5538   31 80 18               LD   SP,STACK   
553B   CD A5 08               CALL   init   
553E   CD 98 08               CALL   execStr   
5541   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
554D                          ;*Macro unroll:  expect "(a) {2} \\f:",2
554D   E1                     POP   HL   
554E   E5                     PUSH   HL   
554F   11 02 00               LD   DE,2   
5552   B7                     OR   A   
5553   ED 52                  SBC   HL,DE   
5555   7D                     LD   A,L   
5556   B4                     OR   H   
5557   28 56                  JR   Z,expectM_0_2281S43   
5559   CD 91 08               CALL   printStr   
555C   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
556E   CD 91 08               CALL   printStr   
5571   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5580   21 02 00               LD   HL,2   
5583   CD DF 07               CALL   prtdec   
5586   CD 91 08               CALL   printStr   
5589   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5596   E1                     POP   hl   
5597   E5                     PUSH   hl   
5598   CD DF 07               CALL   prtdec   
559B   E1                     POP   hl   
559C   CD 91 08               CALL   printStr   
559F   20 28 23 00            .CSTR   " (#"   
55A3   CD 27 08               CALL   prthex   
55A6   CD 91 08               CALL   printStr   
55A9   29 0D 0A 00            .CSTR   ")\r\n"   
55AD   76                     HALT      
55AE   00                     .CSTR      
55AF                EXPECTM_0_2281S43:      
55AF   E1                     POP   HL   
55B0                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
55B0   31 80 18               LD   SP,STACK   
55B3   CD A5 08               CALL   init   
55B6   CD 98 08               CALL   execStr   
55B9   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
55C8                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
55C8   E1                     POP   HL   
55C9   E5                     PUSH   HL   
55CA   11 05 00               LD   DE,5   
55CD   B7                     OR   A   
55CE   ED 52                  SBC   HL,DE   
55D0   7D                     LD   A,L   
55D1   B4                     OR   H   
55D2   28 59                  JR   Z,expectM_0_2282S43   
55D4   CD 91 08               CALL   printStr   
55D7   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
55EC   CD 91 08               CALL   printStr   
55EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
55FE   21 05 00               LD   HL,5   
5601   CD DF 07               CALL   prtdec   
5604   CD 91 08               CALL   printStr   
5607   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5614   E1                     POP   hl   
5615   E5                     PUSH   hl   
5616   CD DF 07               CALL   prtdec   
5619   E1                     POP   hl   
561A   CD 91 08               CALL   printStr   
561D   20 28 23 00            .CSTR   " (#"   
5621   CD 27 08               CALL   prthex   
5624   CD 91 08               CALL   printStr   
5627   29 0D 0A 00            .CSTR   ")\r\n"   
562B   76                     HALT      
562C   00                     .CSTR      
562D                EXPECTM_0_2282S43:      
562D   E1                     POP   HL   
562E                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
562E   31 80 18               LD   SP,STACK   
5631   CD A5 08               CALL   init   
5634   CD 98 08               CALL   execStr   
5637   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
5648                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
5648   E1                     POP   HL   
5649   E5                     PUSH   HL   
564A   11 05 00               LD   DE,5   
564D   B7                     OR   A   
564E   ED 52                  SBC   HL,DE   
5650   7D                     LD   A,L   
5651   B4                     OR   H   
5652   28 5B                  JR   Z,expectM_0_2283S43   
5654   CD 91 08               CALL   printStr   
5657   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
566E   CD 91 08               CALL   printStr   
5671   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5680   21 05 00               LD   HL,5   
5683   CD DF 07               CALL   prtdec   
5686   CD 91 08               CALL   printStr   
5689   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5696   E1                     POP   hl   
5697   E5                     PUSH   hl   
5698   CD DF 07               CALL   prtdec   
569B   E1                     POP   hl   
569C   CD 91 08               CALL   printStr   
569F   20 28 23 00            .CSTR   " (#"   
56A3   CD 27 08               CALL   prthex   
56A6   CD 91 08               CALL   printStr   
56A9   29 0D 0A 00            .CSTR   ")\r\n"   
56AD   76                     HALT      
56AE   00                     .CSTR      
56AF                EXPECTM_0_2283S43:      
56AF   E1                     POP   HL   
56B0                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
56B0   31 80 18               LD   SP,STACK   
56B3   CD A5 08               CALL   init   
56B6   CD 98 08               CALL   execStr   
56B9   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
56C8                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
56C8   E1                     POP   HL   
56C9   E5                     PUSH   HL   
56CA   11 02 00               LD   DE,2   
56CD   B7                     OR   A   
56CE   ED 52                  SBC   HL,DE   
56D0   7D                     LD   A,L   
56D1   B4                     OR   H   
56D2   28 59                  JR   Z,expectM_0_2284S43   
56D4   CD 91 08               CALL   printStr   
56D7   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
56EC   CD 91 08               CALL   printStr   
56EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56FE   21 02 00               LD   HL,2   
5701   CD DF 07               CALL   prtdec   
5704   CD 91 08               CALL   printStr   
5707   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5714   E1                     POP   hl   
5715   E5                     PUSH   hl   
5716   CD DF 07               CALL   prtdec   
5719   E1                     POP   hl   
571A   CD 91 08               CALL   printStr   
571D   20 28 23 00            .CSTR   " (#"   
5721   CD 27 08               CALL   prthex   
5724   CD 91 08               CALL   printStr   
5727   29 0D 0A 00            .CSTR   ")\r\n"   
572B   76                     HALT      
572C   00                     .CSTR      
572D                EXPECTM_0_2284S43:      
572D   E1                     POP   HL   
572E                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
572E   31 80 18               LD   SP,STACK   
5731   CD A5 08               CALL   init   
5734   CD 98 08               CALL   execStr   
5737   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
574B                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
574B   E1                     POP   HL   
574C   E5                     PUSH   HL   
574D   11 05 00               LD   DE,5   
5750   B7                     OR   A   
5751   ED 52                  SBC   HL,DE   
5753   7D                     LD   A,L   
5754   B4                     OR   H   
5755   28 5E                  JR   Z,expectM_0_2285S43   
5757   CD 91 08               CALL   printStr   
575A   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
5774   CD 91 08               CALL   printStr   
5777   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5786   21 05 00               LD   HL,5   
5789   CD DF 07               CALL   prtdec   
578C   CD 91 08               CALL   printStr   
578F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
579C   E1                     POP   hl   
579D   E5                     PUSH   hl   
579E   CD DF 07               CALL   prtdec   
57A1   E1                     POP   hl   
57A2   CD 91 08               CALL   printStr   
57A5   20 28 23 00            .CSTR   " (#"   
57A9   CD 27 08               CALL   prthex   
57AC   CD 91 08               CALL   printStr   
57AF   29 0D 0A 00            .CSTR   ")\r\n"   
57B3   76                     HALT      
57B4   00                     .CSTR      
57B5                EXPECTM_0_2285S43:      
57B5   E1                     POP   HL   
57B6                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
57B6   31 80 18               LD   SP,STACK   
57B9   CD A5 08               CALL   init   
57BC   CD 98 08               CALL   execStr   
57BF   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
57D4                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
57D4   E1                     POP   HL   
57D5   E5                     PUSH   HL   
57D6   11 01 00               LD   DE,1   
57D9   B7                     OR   A   
57DA   ED 52                  SBC   HL,DE   
57DC   7D                     LD   A,L   
57DD   B4                     OR   H   
57DE   28 5F                  JR   Z,expectM_0_2286S43   
57E0   CD 91 08               CALL   printStr   
57E3   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
57FE   CD 91 08               CALL   printStr   
5801   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5810   21 01 00               LD   HL,1   
5813   CD DF 07               CALL   prtdec   
5816   CD 91 08               CALL   printStr   
5819   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5826   E1                     POP   hl   
5827   E5                     PUSH   hl   
5828   CD DF 07               CALL   prtdec   
582B   E1                     POP   hl   
582C   CD 91 08               CALL   printStr   
582F   20 28 23 00            .CSTR   " (#"   
5833   CD 27 08               CALL   prthex   
5836   CD 91 08               CALL   printStr   
5839   29 0D 0A 00            .CSTR   ")\r\n"   
583D   76                     HALT      
583E   00                     .CSTR      
583F                EXPECTM_0_2286S43:      
583F   E1                     POP   HL   
5840                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
5840   31 80 18               LD   SP,STACK   
5843   CD A5 08               CALL   init   
5846   CD 98 08               CALL   execStr   
5849   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
5861                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
5861   E1                     POP   HL   
5862   E5                     PUSH   HL   
5863   11 07 00               LD   DE,7   
5866   B7                     OR   A   
5867   ED 52                  SBC   HL,DE   
5869   7D                     LD   A,L   
586A   B4                     OR   H   
586B   28 62                  JR   Z,expectM_0_2287S43   
586D   CD 91 08               CALL   printStr   
5870   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
588E   CD 91 08               CALL   printStr   
5891   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58A0   21 07 00               LD   HL,7   
58A3   CD DF 07               CALL   prtdec   
58A6   CD 91 08               CALL   printStr   
58A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58B6   E1                     POP   hl   
58B7   E5                     PUSH   hl   
58B8   CD DF 07               CALL   prtdec   
58BB   E1                     POP   hl   
58BC   CD 91 08               CALL   printStr   
58BF   20 28 23 00            .CSTR   " (#"   
58C3   CD 27 08               CALL   prthex   
58C6   CD 91 08               CALL   printStr   
58C9   29 0D 0A 00            .CSTR   ")\r\n"   
58CD   76                     HALT      
58CE   00                     .CSTR      
58CF                EXPECTM_0_2287S43:      
58CF   E1                     POP   HL   
58D0                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
58D0   31 80 18               LD   SP,STACK   
58D3   CD A5 08               CALL   init   
58D6   CD 98 08               CALL   execStr   
58D9   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
58F3                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
58F3   E1                     POP   HL   
58F4   E5                     PUSH   HL   
58F5   11 06 00               LD   DE,6   
58F8   B7                     OR   A   
58F9   ED 52                  SBC   HL,DE   
58FB   7D                     LD   A,L   
58FC   B4                     OR   H   
58FD   28 64                  JR   Z,expectM_0_2288S43   
58FF   CD 91 08               CALL   printStr   
5902   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
5922   CD 91 08               CALL   printStr   
5925   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5934   21 06 00               LD   HL,6   
5937   CD DF 07               CALL   prtdec   
593A   CD 91 08               CALL   printStr   
593D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
594A   E1                     POP   hl   
594B   E5                     PUSH   hl   
594C   CD DF 07               CALL   prtdec   
594F   E1                     POP   hl   
5950   CD 91 08               CALL   printStr   
5953   20 28 23 00            .CSTR   " (#"   
5957   CD 27 08               CALL   prthex   
595A   CD 91 08               CALL   printStr   
595D   29 0D 0A 00            .CSTR   ")\r\n"   
5961   76                     HALT      
5962   00                     .CSTR      
5963                EXPECTM_0_2288S43:      
5963   E1                     POP   HL   
5964                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
5964   31 80 18               LD   SP,STACK   
5967   CD A5 08               CALL   init   
596A   CD 98 08               CALL   execStr   
596D   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
5980                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
5980   E1                     POP   HL   
5981   E5                     PUSH   HL   
5982   11 02 00               LD   DE,2   
5985   B7                     OR   A   
5986   ED 52                  SBC   HL,DE   
5988   7D                     LD   A,L   
5989   B4                     OR   H   
598A   28 5D                  JR   Z,expectM_0_2289S43   
598C   CD 91 08               CALL   printStr   
598F   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
59A8   CD 91 08               CALL   printStr   
59AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59BA   21 02 00               LD   HL,2   
59BD   CD DF 07               CALL   prtdec   
59C0   CD 91 08               CALL   printStr   
59C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59D0   E1                     POP   hl   
59D1   E5                     PUSH   hl   
59D2   CD DF 07               CALL   prtdec   
59D5   E1                     POP   hl   
59D6   CD 91 08               CALL   printStr   
59D9   20 28 23 00            .CSTR   " (#"   
59DD   CD 27 08               CALL   prthex   
59E0   CD 91 08               CALL   printStr   
59E3   29 0D 0A 00            .CSTR   ")\r\n"   
59E7   76                     HALT      
59E8   00                     .CSTR      
59E9                EXPECTM_0_2289S43:      
59E9   E1                     POP   HL   
59EA                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
59EA   31 80 18               LD   SP,STACK   
59ED   CD A5 08               CALL   init   
59F0   CD 98 08               CALL   execStr   
59F3   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
5A09                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
5A09   E1                     POP   HL   
5A0A   E5                     PUSH   HL   
5A0B   11 01 00               LD   DE,1   
5A0E   B7                     OR   A   
5A0F   ED 52                  SBC   HL,DE   
5A11   7D                     LD   A,L   
5A12   B4                     OR   H   
5A13   28 60                  JR   Z,expectM_0_2290S43   
5A15   CD 91 08               CALL   printStr   
5A18   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
5A34   CD 91 08               CALL   printStr   
5A37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A46   21 01 00               LD   HL,1   
5A49   CD DF 07               CALL   prtdec   
5A4C   CD 91 08               CALL   printStr   
5A4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A5C   E1                     POP   hl   
5A5D   E5                     PUSH   hl   
5A5E   CD DF 07               CALL   prtdec   
5A61   E1                     POP   hl   
5A62   CD 91 08               CALL   printStr   
5A65   20 28 23 00            .CSTR   " (#"   
5A69   CD 27 08               CALL   prthex   
5A6C   CD 91 08               CALL   printStr   
5A6F   29 0D 0A 00            .CSTR   ")\r\n"   
5A73   76                     HALT      
5A74   00                     .CSTR      
5A75                EXPECTM_0_2290S43:      
5A75   E1                     POP   HL   
5A76                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
5A76   31 80 18               LD   SP,STACK   
5A79   CD A5 08               CALL   init   
5A7C   CD 98 08               CALL   execStr   
5A7F   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
5A96                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
5A96   E1                     POP   HL   
5A97   E5                     PUSH   HL   
5A98   11 02 00               LD   DE,2   
5A9B   B7                     OR   A   
5A9C   ED 52                  SBC   HL,DE   
5A9E   7D                     LD   A,L   
5A9F   B4                     OR   H   
5AA0   28 61                  JR   Z,expectM_0_2291S43   
5AA2   CD 91 08               CALL   printStr   
5AA5   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
5AC2   CD 91 08               CALL   printStr   
5AC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5AD4   21 02 00               LD   HL,2   
5AD7   CD DF 07               CALL   prtdec   
5ADA   CD 91 08               CALL   printStr   
5ADD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5AEA   E1                     POP   hl   
5AEB   E5                     PUSH   hl   
5AEC   CD DF 07               CALL   prtdec   
5AEF   E1                     POP   hl   
5AF0   CD 91 08               CALL   printStr   
5AF3   20 28 23 00            .CSTR   " (#"   
5AF7   CD 27 08               CALL   prthex   
5AFA   CD 91 08               CALL   printStr   
5AFD   29 0D 0A 00            .CSTR   ")\r\n"   
5B01   76                     HALT      
5B02   00                     .CSTR      
5B03                EXPECTM_0_2291S43:      
5B03   E1                     POP   HL   
5B04                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
5B04   31 80 18               LD   SP,STACK   
5B07   CD A5 08               CALL   init   
5B0A   CD 98 08               CALL   execStr   
5B0D   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
5B25                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
5B25   E1                     POP   HL   
5B26   E5                     PUSH   HL   
5B27   11 02 00               LD   DE,2   
5B2A   B7                     OR   A   
5B2B   ED 52                  SBC   HL,DE   
5B2D   7D                     LD   A,L   
5B2E   B4                     OR   H   
5B2F   28 62                  JR   Z,expectM_0_2292S43   
5B31   CD 91 08               CALL   printStr   
5B34   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
5B52   CD 91 08               CALL   printStr   
5B55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B64   21 02 00               LD   HL,2   
5B67   CD DF 07               CALL   prtdec   
5B6A   CD 91 08               CALL   printStr   
5B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B7A   E1                     POP   hl   
5B7B   E5                     PUSH   hl   
5B7C   CD DF 07               CALL   prtdec   
5B7F   E1                     POP   hl   
5B80   CD 91 08               CALL   printStr   
5B83   20 28 23 00            .CSTR   " (#"   
5B87   CD 27 08               CALL   prthex   
5B8A   CD 91 08               CALL   printStr   
5B8D   29 0D 0A 00            .CSTR   ")\r\n"   
5B91   76                     HALT      
5B92   00                     .CSTR      
5B93                EXPECTM_0_2292S43:      
5B93   E1                     POP   HL   
5B94                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
5B94   31 80 18               LD   SP,STACK   
5B97   CD A5 08               CALL   init   
5B9A   CD 98 08               CALL   execStr   
5B9D   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
5BB4                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
5BB4   E1                     POP   HL   
5BB5   E5                     PUSH   HL   
5BB6   11 02 00               LD   DE,2   
5BB9   B7                     OR   A   
5BBA   ED 52                  SBC   HL,DE   
5BBC   7D                     LD   A,L   
5BBD   B4                     OR   H   
5BBE   28 61                  JR   Z,expectM_0_2293S43   
5BC0   CD 91 08               CALL   printStr   
5BC3   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
5BE0   CD 91 08               CALL   printStr   
5BE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5BF2   21 02 00               LD   HL,2   
5BF5   CD DF 07               CALL   prtdec   
5BF8   CD 91 08               CALL   printStr   
5BFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C08   E1                     POP   hl   
5C09   E5                     PUSH   hl   
5C0A   CD DF 07               CALL   prtdec   
5C0D   E1                     POP   hl   
5C0E   CD 91 08               CALL   printStr   
5C11   20 28 23 00            .CSTR   " (#"   
5C15   CD 27 08               CALL   prthex   
5C18   CD 91 08               CALL   printStr   
5C1B   29 0D 0A 00            .CSTR   ")\r\n"   
5C1F   76                     HALT      
5C20   00                     .CSTR      
5C21                EXPECTM_0_2293S43:      
5C21   E1                     POP   HL   
5C22                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
5C22   31 80 18               LD   SP,STACK   
5C25   CD A5 08               CALL   init   
5C28   CD 98 08               CALL   execStr   
5C2B   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
5C49                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
5C49   E1                     POP   HL   
5C4A   E5                     PUSH   HL   
5C4B   11 05 00               LD   DE,5   
5C4E   B7                     OR   A   
5C4F   ED 52                  SBC   HL,DE   
5C51   7D                     LD   A,L   
5C52   B4                     OR   H   
5C53   28 68                  JR   Z,expectM_0_2294S43   
5C55   CD 91 08               CALL   printStr   
5C58   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
5C7C   CD 91 08               CALL   printStr   
5C7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5C8E   21 05 00               LD   HL,5   
5C91   CD DF 07               CALL   prtdec   
5C94   CD 91 08               CALL   printStr   
5C97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5CA4   E1                     POP   hl   
5CA5   E5                     PUSH   hl   
5CA6   CD DF 07               CALL   prtdec   
5CA9   E1                     POP   hl   
5CAA   CD 91 08               CALL   printStr   
5CAD   20 28 23 00            .CSTR   " (#"   
5CB1   CD 27 08               CALL   prthex   
5CB4   CD 91 08               CALL   printStr   
5CB7   29 0D 0A 00            .CSTR   ")\r\n"   
5CBB   76                     HALT      
5CBC   00                     .CSTR      
5CBD                EXPECTM_0_2294S43:      
5CBD   E1                     POP   HL   
5CBE                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
5CBE   31 80 18               LD   SP,STACK   
5CC1   CD A5 08               CALL   init   
5CC4   CD 98 08               CALL   execStr   
5CC7   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
5CDC                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
5CDC   E1                     POP   HL   
5CDD   E5                     PUSH   HL   
5CDE   11 02 00               LD   DE,2   
5CE1   B7                     OR   A   
5CE2   ED 52                  SBC   HL,DE   
5CE4   7D                     LD   A,L   
5CE5   B4                     OR   H   
5CE6   28 5F                  JR   Z,expectM_0_2295S43   
5CE8   CD 91 08               CALL   printStr   
5CEB   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
5D06   CD 91 08               CALL   printStr   
5D09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5D18   21 02 00               LD   HL,2   
5D1B   CD DF 07               CALL   prtdec   
5D1E   CD 91 08               CALL   printStr   
5D21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5D2E   E1                     POP   hl   
5D2F   E5                     PUSH   hl   
5D30   CD DF 07               CALL   prtdec   
5D33   E1                     POP   hl   
5D34   CD 91 08               CALL   printStr   
5D37   20 28 23 00            .CSTR   " (#"   
5D3B   CD 27 08               CALL   prthex   
5D3E   CD 91 08               CALL   printStr   
5D41   29 0D 0A 00            .CSTR   ")\r\n"   
5D45   76                     HALT      
5D46   00                     .CSTR      
5D47                EXPECTM_0_2295S43:      
5D47   E1                     POP   HL   
5D48                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
5D48   31 80 18               LD   SP,STACK   
5D4B   CD A5 08               CALL   init   
5D4E   CD 98 08               CALL   execStr   
5D51   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
5D6C                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
5D6C   E1                     POP   HL   
5D6D   E5                     PUSH   HL   
5D6E   11 64 00               LD   DE,100   
5D71   B7                     OR   A   
5D72   ED 52                  SBC   HL,DE   
5D74   7D                     LD   A,L   
5D75   B4                     OR   H   
5D76   28 65                  JR   Z,expectM_0_2296S43   
5D78   CD 91 08               CALL   printStr   
5D7B   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
5D9C   CD 91 08               CALL   printStr   
5D9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5DAE   21 64 00               LD   HL,100   
5DB1   CD DF 07               CALL   prtdec   
5DB4   CD 91 08               CALL   printStr   
5DB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5DC4   E1                     POP   hl   
5DC5   E5                     PUSH   hl   
5DC6   CD DF 07               CALL   prtdec   
5DC9   E1                     POP   hl   
5DCA   CD 91 08               CALL   printStr   
5DCD   20 28 23 00            .CSTR   " (#"   
5DD1   CD 27 08               CALL   prthex   
5DD4   CD 91 08               CALL   printStr   
5DD7   29 0D 0A 00            .CSTR   ")\r\n"   
5DDB   76                     HALT      
5DDC   00                     .CSTR      
5DDD                EXPECTM_0_2296S43:      
5DDD   E1                     POP   HL   
5DDE                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
5DDE   31 80 18               LD   SP,STACK   
5DE1   CD A5 08               CALL   init   
5DE4   CD 98 08               CALL   execStr   
5DE7   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
5E03                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
5E03   E1                     POP   HL   
5E04   E5                     PUSH   HL   
5E05   11 01 00               LD   DE,1   
5E08   B7                     OR   A   
5E09   ED 52                  SBC   HL,DE   
5E0B   7D                     LD   A,L   
5E0C   B4                     OR   H   
5E0D   28 66                  JR   Z,expectM_0_2297S43   
5E0F   CD 91 08               CALL   printStr   
5E12   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
5E34   CD 91 08               CALL   printStr   
5E37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5E46   21 01 00               LD   HL,1   
5E49   CD DF 07               CALL   prtdec   
5E4C   CD 91 08               CALL   printStr   
5E4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E5C   E1                     POP   hl   
5E5D   E5                     PUSH   hl   
5E5E   CD DF 07               CALL   prtdec   
5E61   E1                     POP   hl   
5E62   CD 91 08               CALL   printStr   
5E65   20 28 23 00            .CSTR   " (#"   
5E69   CD 27 08               CALL   prthex   
5E6C   CD 91 08               CALL   printStr   
5E6F   29 0D 0A 00            .CSTR   ")\r\n"   
5E73   76                     HALT      
5E74   00                     .CSTR      
5E75                EXPECTM_0_2297S43:      
5E75   E1                     POP   HL   
5E76                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
5E76   31 80 18               LD   SP,STACK   
5E79   CD A5 08               CALL   init   
5E7C   CD 98 08               CALL   execStr   
5E7F   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
5E9C                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
5E9C   E1                     POP   HL   
5E9D   E5                     PUSH   HL   
5E9E   11 02 00               LD   DE,2   
5EA1   B7                     OR   A   
5EA2   ED 52                  SBC   HL,DE   
5EA4   7D                     LD   A,L   
5EA5   B4                     OR   H   
5EA6   28 67                  JR   Z,expectM_0_2298S43   
5EA8   CD 91 08               CALL   printStr   
5EAB   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
5ECE   CD 91 08               CALL   printStr   
5ED1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5EE0   21 02 00               LD   HL,2   
5EE3   CD DF 07               CALL   prtdec   
5EE6   CD 91 08               CALL   printStr   
5EE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5EF6   E1                     POP   hl   
5EF7   E5                     PUSH   hl   
5EF8   CD DF 07               CALL   prtdec   
5EFB   E1                     POP   hl   
5EFC   CD 91 08               CALL   printStr   
5EFF   20 28 23 00            .CSTR   " (#"   
5F03   CD 27 08               CALL   prthex   
5F06   CD 91 08               CALL   printStr   
5F09   29 0D 0A 00            .CSTR   ")\r\n"   
5F0D   76                     HALT      
5F0E   00                     .CSTR      
5F0F                EXPECTM_0_2298S43:      
5F0F   E1                     POP   HL   
5F10                             ; 
5F10                             ; 
5F10                             ; 
5F10                             ; 
5F10                             ; 
5F10                             ; 
5F10                             ; 
5F10                             ; test "7 3 / frac", 1
5F10                             ; test "10 sqrt", 3
5F10                             ; test "10 sqrt frac", 1
5F10                             ; test ":x 20 let 100 x = x", 100
5F10                             ; test "[10 20 30] 1?", 20
5F10                             ; test ":x [10 20 30] let 50 x 1? = x 1?", 50
5F10                             ; test "bytes [1 2 3] 1?", 2
5F10                             ; test "bytes:x [1 2 3] let x 1?", 2
5F10                             ; test "bytes ['A' 'B' 'C'] 1?", 66
5F10                             ; test "0 [{10} {20} {30}] switch", 10
5F10                             ; test "1 10 20 (ab) {0 [{$a} {$b}] switch} \\f:", 10
5F10                             ; test "0 10 20 (iab) {$i [{$a} {$b}] switch} \\f:", 10
5F10                             ; test "1 10 20 (iab) {$i [{$a} {$b}] switch} \\f:", 20
5F10                             ; test "false", false
5F10                             ; test "true", true
5F10                             ; test "1 5 false {10} if", 5
5F10                             ; test "1 5 true {10} if", 10
5F10                             ; test "1 false {10} {20} ifte", 20
5F10                             ; test "1 true {10} {20} ifte", 10
5F10                             ; test "[ 1 ] closure call", 1
5F10                             ; test "[ [ 2 ] ] closure call 0?", 2
5F10                             ; call:Str
5F10                             ; db "9"
5F10                             ; kall sqrt1
5F10                             ; db 0
5F10                             ; expect "9 sqrt",3
5F10   CD 91 08               CALL   printStr   
5F13   44 6F 6E 65 21 00      .CSTR   "Done!"   
5F19   76                     HALT      
5F1A                          ALIGN   2   
5F1A                PRINTER:      
5F1A   E1                     POP   hl   
5F1B   CD DF 07               CALL   prtdec   
5F1E   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               07C4 DEFINED AT LINE 1273 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1024 IN monty.asm
                    > USED AT LINE 1580 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 741 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
                    > USED AT LINE 1372 IN monty.asm
                    > USED AT LINE 1413 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
                    > USED AT LINE 1440 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 41 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1649 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 823 IN monty.asm
                    > USED AT LINE 1154 IN monty.asm
                    > USED AT LINE 1459 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 78 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 80 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 114 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 217 IN monty.asm
ADD_:               0300 DEFINED AT LINE 219 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 225 IN monty.asm
AND_:               0309 DEFINED AT LINE 227 IN monty.asm
ARG_:               030C DEFINED AT LINE 229 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 231 IN monty.asm
ARRAY_:             0312 DEFINED AT LINE 233 IN monty.asm
ARRAYEND_:          0315 DEFINED AT LINE 235 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 237 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 239 IN monty.asm
CHAR_:              031E DEFINED AT LINE 241 IN monty.asm
DOT_:               0321 DEFINED AT LINE 243 IN monty.asm
GO_:                0324 DEFINED AT LINE 245 IN monty.asm
IDENTU_:            0327 DEFINED AT LINE 247 IN monty.asm
IDENTL_:            032A DEFINED AT LINE 249 IN monty.asm
INDEX_:             032D DEFINED AT LINE 252 IN monty.asm
INV_:               0330 DEFINED AT LINE 254 IN monty.asm
MUL_:               0336 DEFINED AT LINE 257 IN monty.asm
NOT_:               0339 DEFINED AT LINE 259 IN monty.asm
NUM_:               033E DEFINED AT LINE 262 IN monty.asm
                    > USED AT LINE 283 IN monty.asm
HEXNUM_:            0341 DEFINED AT LINE 264 IN monty.asm
OR_:                0344 DEFINED AT LINE 266 IN monty.asm
XOR_:               0347 DEFINED AT LINE 268 IN monty.asm
STRING_:            034A DEFINED AT LINE 274 IN monty.asm
SUB_:               034D DEFINED AT LINE 276 IN monty.asm
SUB1:               0359 DEFINED AT LINE 284 IN monty.asm
                    > USED AT LINE 281 IN monty.asm
SUB2:               035B DEFINED AT LINE 287 IN monty.asm
EQ_:                0361 DEFINED AT LINE 294 IN monty.asm
EQ0:                036B DEFINED AT LINE 301 IN monty.asm
                    > USED AT LINE 298 IN monty.asm
EQ1:                036C DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
GT_:                0370 DEFINED AT LINE 307 IN monty.asm
LT_:                037B DEFINED AT LINE 316 IN monty.asm
LT1:                0384 DEFINED AT LINE 323 IN monty.asm
                    > USED AT LINE 314 IN monty.asm
DIV_:               038D DEFINED AT LINE 329 IN monty.asm
COMMAND_:           039C DEFINED AT LINE 340 IN monty.asm
NOP_:               039F DEFINED AT LINE 342 IN monty.asm
ABS1:               03A1 DEFINED AT LINE 349 IN monty.asm
ADDR:               03AE DEFINED AT LINE 363 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
AND:                03BA DEFINED AT LINE 369 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
AND1:               03C1 DEFINED AT LINE 377 IN monty.asm
                    > USED AT LINE 389 IN monty.asm
                    > USED AT LINE 399 IN monty.asm
OR:                 03C5 DEFINED AT LINE 381 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
XOR:                03CE DEFINED AT LINE 390 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
XOR1:               03CF DEFINED AT LINE 392 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
ARG:                03D7 DEFINED AT LINE 404 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARG0:               03F5 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 431 IN monty.asm
ARG0A:              03FE DEFINED AT LINE 433 IN monty.asm
                    > USED AT LINE 410 IN monty.asm
                    > USED AT LINE 417 IN monty.asm
ARG1:               0403 DEFINED AT LINE 436 IN monty.asm
                    > USED AT LINE 429 IN monty.asm
ARG1A:              040B DEFINED AT LINE 443 IN monty.asm
                    > USED AT LINE 435 IN monty.asm
ARG_LIST:           040E DEFINED AT LINE 452 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARG_LIST1:          0418 DEFINED AT LINE 459 IN monty.asm
                    > USED AT LINE 477 IN monty.asm
ARG_LIST2:          0424 DEFINED AT LINE 467 IN monty.asm
                    > USED AT LINE 464 IN monty.asm
ARG_LIST3:          042C DEFINED AT LINE 475 IN monty.asm
                    > USED AT LINE 466 IN monty.asm
                    > USED AT LINE 473 IN monty.asm
ARG_LIST4:          042F DEFINED AT LINE 478 IN monty.asm
                    > USED AT LINE 462 IN monty.asm
ARG_LIST5:          0434 DEFINED AT LINE 483 IN monty.asm
                    > USED AT LINE 481 IN monty.asm
ARRAY:              0440 DEFINED AT LINE 494 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRAYEND:           045C DEFINED AT LINE 508 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
ARRAYEND1:          047D DEFINED AT LINE 528 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
ARRAYEND2:          048D DEFINED AT LINE 540 IN monty.asm
                    > USED AT LINE 526 IN monty.asm
                    > USED AT LINE 552 IN monty.asm
ARRAYEND3:          04A0 DEFINED AT LINE 554 IN monty.asm
                    > USED AT LINE 538 IN monty.asm
ASSIGN:             04BB DEFINED AT LINE 573 IN monty.asm
                    > USED AT LINE 300 IN monty.asm
ASSIGN1:            04C9 DEFINED AT LINE 583 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
BLOCK:              04CB DEFINED AT LINE 586 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
BLOCK1:             04CF DEFINED AT LINE 590 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
BLOCK2:             04FB DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
BLOCK3:             04FE DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
                    > USED AT LINE 613 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
BLOCK4:             0506 DEFINED AT LINE 626 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
BLOCK5:             0509 DEFINED AT LINE 629 IN monty.asm
                    > USED AT LINE 625 IN monty.asm
BLOCKEND:           050C DEFINED AT LINE 633 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
BLOCKEND1:          0538 DEFINED AT LINE 656 IN monty.asm
                    > USED AT LINE 649 IN monty.asm
BLOCKEND2:          0544 DEFINED AT LINE 663 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
BYTES:              055D DEFINED AT LINE 684 IN monty.asm
BYTES1:             0560 DEFINED AT LINE 686 IN monty.asm
                    > USED AT LINE 1188 IN monty.asm
CHAR:               0565 DEFINED AT LINE 690 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
CHAR1:              0568 DEFINED AT LINE 692 IN monty.asm
                    > USED AT LINE 703 IN monty.asm
CHAR2:              0574 DEFINED AT LINE 701 IN monty.asm
                    > USED AT LINE 698 IN monty.asm
CHAR3:              0577 DEFINED AT LINE 704 IN monty.asm
                    > USED AT LINE 696 IN monty.asm
COMMAND:            057A DEFINED AT LINE 708 IN monty.asm
                    > USED AT LINE 341 IN monty.asm
COMMENT:            058B DEFINED AT LINE 717 IN monty.asm
                    > USED AT LINE 712 IN monty.asm
                    > USED AT LINE 721 IN monty.asm
DOT:                0594 DEFINED AT LINE 724 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT1:               05A0 DEFINED AT LINE 732 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
DOT2:               05A9 DEFINED AT LINE 737 IN monty.asm
                    > USED AT LINE 734 IN monty.asm
DOT3:               05B3 DEFINED AT LINE 743 IN monty.asm
                    > USED AT LINE 739 IN monty.asm
DOT4:               05B7 DEFINED AT LINE 746 IN monty.asm
                    > USED AT LINE 731 IN monty.asm
                    > USED AT LINE 736 IN monty.asm
                    > USED AT LINE 742 IN monty.asm
EQUALS:             05BE DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 305 IN monty.asm
LESSTHANEQ:         05C6 DEFINED AT LINE 761 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
LESSTHAN:           05CB DEFINED AT LINE 768 IN monty.asm
                    > USED AT LINE 327 IN monty.asm
LESSTHAN1:          05D0 DEFINED AT LINE 773 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
TRUE1:              05D3 DEFINED AT LINE 776 IN monty.asm
                    > USED AT LINE 756 IN monty.asm
NULL1:              05D9 DEFINED AT LINE 780 IN monty.asm
FALSE1:             05D9 DEFINED AT LINE 781 IN monty.asm
                    > USED AT LINE 757 IN monty.asm
                    > USED AT LINE 771 IN monty.asm
                    > USED AT LINE 774 IN monty.asm
FRAC:               05DF DEFINED AT LINE 786 IN monty.asm
FUNC:               05E5 DEFINED AT LINE 792 IN monty.asm
                    > USED AT LINE 714 IN monty.asm
FUNC1:              05F5 DEFINED AT LINE 806 IN monty.asm
                    > USED AT LINE 829 IN monty.asm
                    > USED AT LINE 832 IN monty.asm
                    > USED AT LINE 837 IN monty.asm
                    > USED AT LINE 841 IN monty.asm
FUNC2:              061F DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 818 IN monty.asm
                    > USED AT LINE 820 IN monty.asm
                    > USED AT LINE 822 IN monty.asm
FUNC3:              0622 DEFINED AT LINE 833 IN monty.asm
                    > USED AT LINE 824 IN monty.asm
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 828 IN monty.asm
FUNC4:              062A DEFINED AT LINE 839 IN monty.asm
                    > USED AT LINE 812 IN monty.asm
                    > USED AT LINE 814 IN monty.asm
                    > USED AT LINE 816 IN monty.asm
FUNC4A:             062D DEFINED AT LINE 842 IN monty.asm
                    > USED AT LINE 838 IN monty.asm
GO:                 0639 DEFINED AT LINE 853 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
                    > USED AT LINE 984 IN monty.asm
                    > USED AT LINE 986 IN monty.asm
                    > USED AT LINE 1184 IN monty.asm
GO1:                0640 DEFINED AT LINE 859 IN monty.asm
                    > USED AT LINE 857 IN monty.asm
GO2:                0667 DEFINED AT LINE 880 IN monty.asm
                    > USED AT LINE 872 IN monty.asm
                    > USED AT LINE 904 IN monty.asm
GO3:                066C DEFINED AT LINE 884 IN monty.asm
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 927 IN monty.asm
GO10:               067A DEFINED AT LINE 893 IN monty.asm
                    > USED AT LINE 862 IN monty.asm
GO11:               0687 DEFINED AT LINE 905 IN monty.asm
                    > USED AT LINE 902 IN monty.asm
GO12:               068D DEFINED AT LINE 911 IN monty.asm
                    > USED AT LINE 915 IN monty.asm
GO13:               0692 DEFINED AT LINE 916 IN monty.asm
                    > USED AT LINE 910 IN monty.asm
HEXNUM:             06A0 DEFINED AT LINE 929 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
HEXNUM1:            06A3 DEFINED AT LINE 931 IN monty.asm
                    > USED AT LINE 948 IN monty.asm
HEXNUM2:            06AB DEFINED AT LINE 937 IN monty.asm
                    > USED AT LINE 935 IN monty.asm
IDENTU:             06BD DEFINED AT LINE 949 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENTL:             06C2 DEFINED AT LINE 953 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENT1:             06C7 DEFINED AT LINE 957 IN monty.asm
                    > USED AT LINE 952 IN monty.asm
IF:                 06D4 DEFINED AT LINE 970 IN monty.asm
IFTE:               06D9 DEFINED AT LINE 976 IN monty.asm
IFTE1:              06DA DEFINED AT LINE 978 IN monty.asm
                    > USED AT LINE 972 IN monty.asm
INDEX:              06E6 DEFINED AT LINE 990 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
INDEX0:             06EE DEFINED AT LINE 996 IN monty.asm
INDEX1:             06EF DEFINED AT LINE 998 IN monty.asm
                    > USED AT LINE 995 IN monty.asm
INDEX2:             06FB DEFINED AT LINE 1007 IN monty.asm
                    > USED AT LINE 1004 IN monty.asm
INPUT:              06FE DEFINED AT LINE 1013 IN monty.asm
KEY:                0709 DEFINED AT LINE 1023 IN monty.asm
MUL:                0712 DEFINED AT LINE 1030 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
MUL2:               071C DEFINED AT LINE 1039 IN monty.asm
                    > USED AT LINE 1048 IN monty.asm
NUM:                072E DEFINED AT LINE 1053 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
NUM0:               0737 DEFINED AT LINE 1059 IN monty.asm
                    > USED AT LINE 1057 IN monty.asm
NUM1:               0738 DEFINED AT LINE 1061 IN monty.asm
                    > USED AT LINE 1078 IN monty.asm
NUM2:               0750 DEFINED AT LINE 1079 IN monty.asm
                    > USED AT LINE 939 IN monty.asm
                    > USED AT LINE 941 IN monty.asm
                    > USED AT LINE 1064 IN monty.asm
                    > USED AT LINE 1066 IN monty.asm
NUM3:               075B DEFINED AT LINE 1087 IN monty.asm
                    > USED AT LINE 1082 IN monty.asm
OUTPUT:             075E DEFINED AT LINE 1093 IN monty.asm
SHIFTLEFT:          0767 DEFINED AT LINE 1105 IN monty.asm
                    > USED AT LINE 320 IN monty.asm
SHIFTLEFT1:         076F DEFINED AT LINE 1112 IN monty.asm
                    > USED AT LINE 1115 IN monty.asm
SHIFTLEFT2:         0770 DEFINED AT LINE 1114 IN monty.asm
                    > USED AT LINE 1111 IN monty.asm
SHIFTRIGHT:         0777 DEFINED AT LINE 1122 IN monty.asm
                    > USED AT LINE 311 IN monty.asm
SHIFTRIGHT1:        077F DEFINED AT LINE 1129 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
SHIFTRIGHT2:        0783 DEFINED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1128 IN monty.asm
STRING:             078A DEFINED AT LINE 1141 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
STRING1:            0793 DEFINED AT LINE 1148 IN monty.asm
                    > USED AT LINE 1155 IN monty.asm
                    > USED AT LINE 1157 IN monty.asm
STRING2:            0796 DEFINED AT LINE 1152 IN monty.asm
                    > USED AT LINE 1147 IN monty.asm
SWITCH:             07B2 DEFINED AT LINE 1176 IN monty.asm
WORDS:              07BC DEFINED AT LINE 1186 IN monty.asm
LOOP:               07C2 DEFINED AT LINE 1202 IN monty.asm
FILTER:             07C4 DEFINED AT LINE 1271 IN monty.asm
MAP:                07C4 DEFINED AT LINE 1272 IN monty.asm
DIVIDE:             07C6 DEFINED AT LINE 1310 IN monty.asm
                    > USED AT LINE 334 IN monty.asm
DIVIDE1:            07CB DEFINED AT LINE 1313 IN monty.asm
                    > USED AT LINE 1325 IN monty.asm
DIVIDE2:            07D8 DEFINED AT LINE 1321 IN monty.asm
                    > USED AT LINE 1318 IN monty.asm
DIVIDE3:            07D9 DEFINED AT LINE 1323 IN monty.asm
                    > USED AT LINE 1320 IN monty.asm
PRTDEC:             07DF DEFINED AT LINE 1368 IN monty.asm
                    > USED AT LINE 745 IN monty.asm
                    > USED AT LINE 1666 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 145
PRTDEC0:            07EE DEFINED AT LINE 1379 IN monty.asm
                    > USED AT LINE 1370 IN monty.asm
PRTDEC1:            0810 DEFINED AT LINE 1395 IN monty.asm
                    > USED AT LINE 1383 IN monty.asm
                    > USED AT LINE 1385 IN monty.asm
                    > USED AT LINE 1387 IN monty.asm
                    > USED AT LINE 1389 IN monty.asm
                    > USED AT LINE 1392 IN monty.asm
PRTDEC2:            0812 DEFINED AT LINE 1397 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
PRTDEC3:            0822 DEFINED AT LINE 1409 IN monty.asm
                    > USED AT LINE 1404 IN monty.asm
PRTDEC4:            0823 DEFINED AT LINE 1411 IN monty.asm
                    > USED AT LINE 1408 IN monty.asm
PRTHEX:             0827 DEFINED AT LINE 1415 IN monty.asm
                    > USED AT LINE 730 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0832 DEFINED AT LINE 1423 IN monty.asm
                    > USED AT LINE 1418 IN monty.asm
                    > USED AT LINE 1420 IN monty.asm
PRTHEX3:            083B DEFINED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1429 IN monty.asm
PRTSTR0:            0846 DEFINED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1445 IN monty.asm
PRTSTR:             084A DEFINED AT LINE 1442 IN monty.asm
                    > USED AT LINE 735 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
NESTING:            084F DEFINED AT LINE 1458 IN monty.asm
                    > USED AT LINE 1571 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
NESTING0:           0859 DEFINED AT LINE 1464 IN monty.asm
                    > USED AT LINE 1460 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
NESTING1A:          0860 DEFINED AT LINE 1469 IN monty.asm
                    > USED AT LINE 1466 IN monty.asm
NESTING1:           0863 DEFINED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1463 IN monty.asm
NESTING2:           0872 DEFINED AT LINE 1481 IN monty.asm
                    > USED AT LINE 1476 IN monty.asm
                    > USED AT LINE 1478 IN monty.asm
NESTING3:           0874 DEFINED AT LINE 1484 IN monty.asm
                    > USED AT LINE 1480 IN monty.asm
NESTING4:           087F DEFINED AT LINE 1491 IN monty.asm
                    > USED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1488 IN monty.asm
PROMPT:             0881 DEFINED AT LINE 1495 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
CRLF:               088A DEFINED AT LINE 1500 IN monty.asm
                    > USED AT LINE 1624 IN monty.asm
PRINTSTR:           0891 DEFINED AT LINE 1507 IN monty.asm
                    > USED AT LINE 1496 IN monty.asm
                    > USED AT LINE 1501 IN monty.asm
                    > USED AT LINE 1551 IN monty.asm
                    > USED AT LINE 1664 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 138
EXECSTR:            0898 DEFINED AT LINE 1516 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               08A3 DEFINED AT LINE 1527 IN monty.asm
INIT:               08A5 DEFINED AT LINE 1532 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1550 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              08BE DEFINED AT LINE 1542 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
START:              08C3 DEFINED AT LINE 1548 IN monty.asm
INTERPRET:          08D9 DEFINED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1651 IN monty.asm
                    > USED AT LINE 1667 IN monty.asm
INTERPRET2:         08E3 DEFINED AT LINE 1560 IN monty.asm
                    > USED AT LINE 1604 IN monty.asm
INTERPRET3:         08EB DEFINED AT LINE 1567 IN monty.asm
                    > USED AT LINE 1576 IN monty.asm
INTERPRET4:         08F1 DEFINED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
INTERPRET5:         08F6 DEFINED AT LINE 1579 IN monty.asm
                    > USED AT LINE 1613 IN monty.asm
                    > USED AT LINE 1627 IN monty.asm
INTERPRET6:         0907 DEFINED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1582 IN monty.asm
INTERPRET7:         0915 DEFINED AT LINE 1615 IN monty.asm
                    > USED AT LINE 1587 IN monty.asm
INTERPRET8:         0928 DEFINED AT LINE 1629 IN monty.asm
                    > USED AT LINE 1585 IN monty.asm
NEXT:               0930 DEFINED AT LINE 1635 IN monty.asm
                    > USED AT LINE 73 IN monty.asm
                    > USED AT LINE 1639 IN monty.asm
NEXT1:              0943 DEFINED AT LINE 1648 IN monty.asm
                    > USED AT LINE 1640 IN monty.asm
NEXT2:              094A DEFINED AT LINE 1652 IN monty.asm
                    > USED AT LINE 1642 IN monty.asm
EXIT_:              0950 DEFINED AT LINE 1659 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
ERROR:              0953 DEFINED AT LINE 1663 IN monty.asm
                    > USED AT LINE 716 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 865 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
                    > USED AT LINE 1549 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1539 IN monty.asm
RESTARTS:           19D0 DEFINED AT LINE 10 IN ram.asm
RST08:              19D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              19D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              19D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              19D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              19D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              19DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               19DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             19DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             19E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            19E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            19E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            19E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1536 IN monty.asm
VFRAC:              19E6 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 335 IN monty.asm
                    > USED AT LINE 787 IN monty.asm
VDATAWIDTH:         19E8 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 524 IN monty.asm
                    > USED AT LINE 578 IN monty.asm
                    > USED AT LINE 687 IN monty.asm
                    > USED AT LINE 993 IN monty.asm
VTIBPTR:            19EA DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1558 IN monty.asm
                    > USED AT LINE 1630 IN monty.asm
VPOINTER:           19EC DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 364 IN monty.asm
                    > USED AT LINE 366 IN monty.asm
                    > USED AT LINE 367 IN monty.asm
                    > USED AT LINE 439 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
                    > USED AT LINE 961 IN monty.asm
                    > USED AT LINE 1000 IN monty.asm
VLASTDEF:           19EE DEFINED AT LINE 30 IN ram.asm
VHASHSTR:           19F0 DEFINED AT LINE 31 IN ram.asm
VNEXT:              19F2 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1533 IN monty.asm
VHEAPPTR:           19F4 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 454 IN monty.asm
                    > USED AT LINE 485 IN monty.asm
                    > USED AT LINE 518 IN monty.asm
                    > USED AT LINE 564 IN monty.asm
                    > USED AT LINE 565 IN monty.asm
                    > USED AT LINE 793 IN monty.asm
                    > USED AT LINE 845 IN monty.asm
                    > USED AT LINE 847 IN monty.asm
                    > USED AT LINE 1142 IN monty.asm
                    > USED AT LINE 1161 IN monty.asm
VTEMP1:             19F6 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 511 IN monty.asm
                    > USED AT LINE 566 IN monty.asm
VTEMP2:             19F8 DEFINED AT LINE 36 IN ram.asm
TBPTR:              19FA DEFINED AT LINE 38 IN ram.asm
TIB:                1A00 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1631 IN monty.asm
PAD:                1B00 DEFINED AT LINE 44 IN ram.asm
HEAP:               1C00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 74 IN monty.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2231S43:  4063 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2232S43:  40C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2233S43:  412B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2234S43:  418F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2235S43:  41F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2236S43:  425D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2237S43:  42C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2238S43:  4329 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2239S43:  4391 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2240S43:  43FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2241S43:  4463 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2242S43:  44CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2243S43:  4539 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2244S43:  45A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2245S43:  4613 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2246S43:  4683 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2247S43:  46EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2248S43:  4763 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2249S43:  47D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2250S43:  4845 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2251S43:  48B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2252S43:  491D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2253S43:  4989 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2254S43:  49F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2255S43:  4A69 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2256S43:  4AD5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2257S43:  4B43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2258S43:  4BB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2259S43:  4C1D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2260S43:  4C89 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2261S43:  4CF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2262S43:  4D61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2263S43:  4DCD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2264S43:  4E39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  4EA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2266S43:  4F11 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2267S43:  4F7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2268S43:  4FED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2269S43:  505B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2270S43:  50CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2271S43:  513B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2272S43:  51A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2273S43:  5215 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2274S43:  528B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2275S43:  52F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2276S43:  5369 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2277S43:  53DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2278S43:  544F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2279S43:  54C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2280S43:  5537 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2281S43:  55AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2282S43:  562D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2283S43:  56AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2284S43:  572D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2285S43:  57B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2286S43:  583F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2287S43:  58CF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2288S43:  5963 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2289S43:  59E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2290S43:  5A75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2291S43:  5B03 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2292S43:  5B93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2293S43:  5C21 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2294S43:  5CBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2295S43:  5D47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2296S43:  5DDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2297S43:  5E75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2298S43:  5F0F DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            5F1A DEFINED AT LINE 143
