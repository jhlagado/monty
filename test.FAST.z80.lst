0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; .cstr ". `(`.s /h./d `)\r\n`.s"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 .cstr code1
0000                 call flushBuffer
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4B               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4B               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4B               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4B               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4B               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4B               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4B               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 49               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4B               LD   (RST08),HL   
0094   22 D2 4B               LD   (RST10),HL   
0097   22 D4 4B               LD   (RST18),HL   
009A   22 D6 4B               LD   (RST20),HL   
009D   22 D8 4B               LD   (RST28),HL   
00A0   22 DA 4B               LD   (RST30),HL   
00A3   22 DE 4B               LD   (INTVEC),HL   
00A6   22 E0 4B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0D               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQUOTE:   EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                TMAGIC:   EQU   $AA   ; magic number
00C6                TRESERV:   EQU   $A0   ; reserved
00C6                TNUMBER:   EQU   $A1   ; number
00C6                TSTRING:   EQU   $A2   ; string
00C6                TPOINTER:   EQU   $A3   ; pointer
00C6                TARRAY:   EQU   $A4   ; array
00C6                TBLOCK:   EQU   $A5   ; block
00C6                TLAMBDA:   EQU   $A6   ; lambda
00C6                TARGLST:   EQU   $A7   ; arglist
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 49                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4A                  DW   BUF   ; vBUFPtr pointer into BUF
0188   43 0C                  DW   next   ; nNext
018A   1E 4C                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 9D 07               JP   semicolon   
0324                DOT_:        
0324   C3 04 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 8F 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 13 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 18 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 2A 07               JP   question   
0336                STAR_:       
0336   C3 43 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 5F 07               JP   num   
0341                HASH_:       
0341   C3 F6 06               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 50 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 DC 07               JP   dblquote   
0350                MINUS_:      
0350   C3 04 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 2F 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA C9 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA B9 07               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 37 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 3C 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 95 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 4B            LD   de,(vPointer)   
039D   21 F2 4B               LD   hl,vPointer   
03A0   C3 74 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 4B               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 00 4C            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 4B               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 4B               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 4B            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 4B               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B 00 4C            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 4B               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 4B               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 4B               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 4B               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 4B               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 4B               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   57                     LD   d,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 1E 4C               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 00 4C            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 4B            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 4B            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B 00 4C            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 00 4C            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 02 4C            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 02 4C            LD   bc,(vTemp2)   
0591   FD 2A 00 4C            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   CD DF 0A               CALL   jumpTable   
05C0   2F                     DB   "/"   
05C1   2A 08                  DW   comment   
05C3   61                     DB   "a"   
05C4   33 08                  DW   command_a   
05C6   62                     DB   "b"   
05C7   6D 08                  DW   command_b   
05C9   63                     DB   "c"   
05CA   7A 0A                  DW   chars   
05CC   64                     DB   "d"   
05CD   82 0A                  DW   decimal   
05CF   66                     DB   "f"   
05D0   4A 06                  DW   false1   
05D2   68                     DB   "h"   
05D3   8A 0A                  DW   hexadecimal   
05D5   69                     DB   "i"   
05D6   B6 09                  DW   command_i   
05D8   6B                     DB   "k"   
05D9   9B 0A                  DW   key   
05DB   6E                     DB   "n"   
05DC   AD 0A                  DW   numbers   
05DE   6F                     DB   "o"   
05DF   A4 0A                  DW   output   
05E1   70                     DB   "p"   
05E2   C2 09                  DW   command_p   
05E4   73                     DB   "s"   
05E5   2B 0A                  DW   size   
05E7   74                     DB   "t"   
05E8   44 06                  DW   true1   
05EA   76                     DB   "v"   
05EB   35 0A                  DW   command_v   
05ED   78                     DB   "x"   
05EE   B7 03                  DW   xor   
05F0   00                     DB   NUL   
05F1   F3 05                  DW   div   
05F3                DIV:         
05F3   D1                     POP   de   
05F4   E1                     POP   hl   
05F5   C5                     PUSH   bc   ; preserve the IP
05F6   44 4D                  LD   bc,hl   
05F8   CD 16 06               CALL   divide   
05FB   EB                     EX   de,hl   
05FC   ED 53 F4 4B            LD   (vRemain),de   
0600   C1                     POP   bc   
0601   C3 96 03               JP   add3   
0604                DOT:         
0604   CD DF 0A               CALL   jumpTable   
0607   61                     DB   "a"   
0608   88 08                  DW   bufferArray   
060A   63                     DB   "c"   
060B   95 09                  DW   bufferChar   
060D   73                     DB   "s"   
060E   7B 09                  DW   bufferString   
0610   78                     DB   "x"   
0611   9A 09                  DW   bufferXChars   
0613   00                     DB   NUL   
0614   BC 08                  DW   bufferNumber   
0616                             ; division subroutine.
0616                             ; bc: divisor, de: dividend, hl: remainder
0616                DIVIDE:      
0616   21 00 00               LD   hl,0   ; zero the remainder
0619   3E 10                  LD   a,16   ; loop counter
061B                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061B   CB 21                  SLA   c   
061D   CB 10                  RL   b   
061F   ED 6A                  ADC   hl,hl   
0621   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0623   38 03                  JR   c,divide2   
0625   0C                     INC   c   
0626   18 01                  JR   divide3   
0628                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0628   19                     ADD   hl,de   
0629                DIVIDE3:      
0629   3D                     DEC   a   
062A   20 EF                  JR   nz,divide1   
062C   50 59                  LD   de,bc   ; result from bc to de
062E   C9                     RET      
062F                             ; hl = value1, de = value2
062F                             ; hl = result
062F                EQUALS:      
062F   B7                     OR   a   ; reset the carry flag
0630   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0632   28 10                  JR   z,true1   
0634   C3 4A 06               JP   false1   
0637                             ; hl = value1 de = value2
0637                             ; hl = result
0637                LESSTHANEQ:      
0637   B7                     OR   a   
0638   ED 52                  SBC   hl,de   
063A   18 05                  JR   lessthan1   
063C                             ; hl = value1 de = value2
063C                             ; hl = result
063C                LESSTHAN:      
063C   B7                     OR   a   
063D   ED 52                  SBC   hl,de   
063F   28 09                  JR   z,false1   
0641                LESSTHAN1:      
0641   FA 4A 06               JP   m,false1   
0644                TRUE1:       
0644   21 FF FF               LD   hl,TRUE   
0647   E5                     PUSH   hl   
0648   DD E9                  JP   (ix)   
064A                NULL1:       
064A                FALSE1:      
064A   21 00 00               LD   hl,FALSE   
064D   E5                     PUSH   hl   
064E   DD E9                  JP   (ix)   
0650                             ; execute a block of code which ends with }
0650                             ; creates a root scope if BP == stack
0650                             ; else uses outer scope
0650                CARET:       
0650                GO:          
0650   D1                     POP   de   ; de = block*
0651                GO1:         
0651   7B                     LD   a,e   ; if block* == null, exit
0652   B2                     OR   d   
0653   20 02                  JR   nz,go2   
0655   DD E9                  JP   (ix)   
0657                GO2:         
0657   1A                     LD   a,(de)   
0658   FE 7B                  CP   "{"   
065A   28 07                  JR   z,goBlock1   
065C   FE 28                  CP   "("   
065E   C2 96 06               JP   nz,goLambda   
0661   13                     INC   de   ; de is the address to jump back to
0662   D5                     PUSH   de   ; push de just before stack frame
0663                GOBLOCK:      
0663                GOBLOCK1:      
0663   ED 53 00 4C            LD   (vTemp1),de   ; save de
0667   21 00 49               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
066A   FD 54                  LD   d,iyh   
066C   FD 5D                  LD   e,iyl   
066E   B7                     OR   a   ; if stack* == BP then this is the root_scope
066F   ED 52                  SBC   hl,de   
0671   ED 5B 00 4C            LD   de,(vTemp1)   ; restore de
0675   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0676   B4                     OR   h   
0677   3E 00                  LD   a,0   
0679   28 70                  JR   z,goLambda8   
067B   C5                     PUSH   bc   ; push IP
067C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
067F   FD 46 05               LD   b,(iy+5)   
0682   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0685   FD 66 03               LD   h,(iy+3)   
0688                GOBLOCK2:      
0688   C5                     PUSH   bc   ; arg_list*
0689   E5                     PUSH   hl   ; first_arg*
068A   FD E5                  PUSH   iy   ; push BP
068C   FD 21 00 00            LD   iy,0   ; BP = SP
0690   FD 39                  ADD   iy,sp   
0692   42 4B                  LD   bc,de   ; bc = de = block*-1
0694   DD E9                  JP   (ix)   
0696                GOLAMBDA:      ; execute lambda
0696   EB                     EX   de,hl   ; hl = lambda*
0697   5E                     LD   e,(hl)   ; de = partial_array*
0698   23                     INC   hl   
0699   56                     LD   d,(hl)   
069A   23                     INC   hl   
069B   7B                     LD   a,e   ; if partial_array* == null skip
069C   B2                     OR   d   
069D   28 25                  JR   z,goLambda3   
069F   ED 43 00 4C            LD   (vTemp1),bc   
06A3   22 02 4C               LD   (vTemp2),hl   ; save bc,hl
06A6   EB                     EX   de,hl   ; hl = partial_array*
06A7   2B                     DEC   hl   ; skip type byte
06A8   2B                     DEC   hl   ; skip magic byte
06A9   2B                     DEC   hl   ; bc = count
06AA   46                     LD   b,(hl)   
06AB   2B                     DEC   hl   
06AC   4E                     LD   c,(hl)   
06AD   23                     INC   hl   ; hl = array data*
06AE   23                     INC   hl   
06AF   23                     INC   hl   
06B0   23                     INC   hl   
06B1   18 06                  JR   goLambda2   ; push each item on stack
06B3                GOLAMBDA1:      
06B3   5E                     LD   e,(hl)   ; de = partial item
06B4   23                     INC   hl   
06B5   56                     LD   d,(hl)   
06B6   23                     INC   hl   
06B7   D5                     PUSH   de   ; push on stack
06B8   0B                     DEC   bc   
06B9                GOLAMBDA2:      
06B9   79                     LD   a,c   ; if count != 0 then loop
06BA   B0                     OR   b   
06BB   20 F6                  JR   nz,goLambda1   
06BD   ED 4B 00 4C            LD   bc,(vTemp1)   ; restore bc
06C1   2A 02 4C               LD   hl,(vTemp2)   ; restore hl
06C4                GOLAMBDA3:      
06C4   5E                     LD   e,(hl)   ; de = block*
06C5   23                     INC   hl   
06C6   56                     LD   d,(hl)   
06C7   23                     INC   hl   
06C8   ED 53 00 4C            LD   (vTemp1),de   ; save block*
06CC   5E                     LD   e,(hl)   ; de = arg_list*
06CD   23                     INC   hl   
06CE   56                     LD   d,(hl)   
06CF   23                     INC   hl   
06D0   EB                     EX   de,hl   ; hl = arg_list*
06D1   ED 5B 00 4C            LD   de,(vTemp1)   ; restore de = block*
06D5   7D                     LD   a,l   ; if arg_list* == null a = 0
06D6   B4                     OR   h   
06D7   20 03                  JR   nz,goLambda4   
06D9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06DA   18 0F                  JR   goLambda8   
06DC                GOLAMBDA4:      ; allocate locals
06DC   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06DD   7E                     LD   a,(hl)   
06DE   18 03                  JR   goLambda6   
06E0                GOLAMBDA5:      ; loop
06E0   3B                     DEC   sp   
06E1   3B                     DEC   sp   
06E2   3D                     DEC   a   
06E3                GOLAMBDA6:      
06E3   B7                     OR   a   
06E4   20 FA                  JR   nz,goLambda5   ; end loop
06E6                GOLAMBDA7:      
06E6   2B                     DEC   hl   ; a = num_args* x 2
06E7   7E                     LD   a,(hl)   
06E8   23                     INC   hl   
06E9   23                     INC   hl   
06EA   87                     ADD   a,a   ; a *= 2
06EB                GOLAMBDA8:      
06EB   C5                     PUSH   bc   ; push IP
06EC   44 4D                  LD   bc,hl   
06EE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06F1   85                     ADD   a,l   
06F2   6F                     LD   l,a   
06F3   39                     ADD   hl,sp   
06F4   18 92                  JR   goBlock2   
06F6                HASH:        
06F6                HEXNUM:      
06F6   21 00 00               LD   hl,0   ; Clear hl to accept the number
06F9                HEXNUM1:      
06F9   03                     INC   bc   
06FA   0A                     LD   a,(bc)   ; Get the character which is a numeral
06FB   CB 77                  BIT   6,a   ; is it uppercase alpha?
06FD   28 02                  JR   z,hexnum2   ; no a decimal
06FF   D6 07                  SUB   7   ; sub 7  to make $a - $F
0701                HEXNUM2:      
0701   D6 30                  SUB   $30   ; form decimal digit
0703   DA 81 07               JP   c,num2   
0706   FE 10                  CP   $0F+1   
0708   D2 81 07               JP   nc,num2   
070B   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
070C   29                     ADD   hl,hl   ; 4X
070D   29                     ADD   hl,hl   ; 8X
070E   29                     ADD   hl,hl   ; 16X
070F   85                     ADD   a,l   ; add into bottom of hl
0710   6F                     LD   l,a   
0711   18 E6                  JR   hexnum1   
0713                UPCASE:      
0713   0A                     LD   a,(bc)   ; a = identifier char
0714   D6 41                  SUB   "A"   ; "A" = 0
0716   18 05                  JR   ident1   
0718                LOWCASE:      
0718   0A                     LD   a,(bc)   
0719   D6 61                  SUB   "a"   
071B   C6 1A                  ADD   a,26   
071D                IDENT1:      
071D   87                     ADD   a,a   ; l = a * 2
071E   6F                     LD   l,a   
071F   26 4B                  LD   h,msb(vars)   
0721   22 F2 4B               LD   (vPointer),hl   ; store address in setter
0724   5E                     LD   e,(hl)   
0725   23                     INC   hl   
0726   56                     LD   d,(hl)   
0727   D5                     PUSH   de   
0728   DD E9                  JP   (ix)   
072A                             ; if
072A                             ; condition then -- value
072A                QUESTION:      
072A                IF:          
072A   03                     INC   bc   
072B   0A                     LD   a,(bc)   
072C   FE 3F                  CP   "?"   
072E   28 06                  JR   z,ifte   
0730   0B                     DEC   bc   
0731   11 00 00               LD   de,NUL   ; NUL pointer for else
0734   18 01                  JR   ifte1   
0736                             ; ifte
0736                             ; condition then else -- value
0736                IFTE:        
0736   D1                     POP   de   ; de = else
0737                IFTE1:       
0737   E1                     POP   hl   ; hl = then
0738   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0739   7C                     LD   a,h   
073A   B5                     OR   l   
073B   E1                     POP   hl   ; hl = then
073C   CA 51 06               JP   z,go1   ; if z de = else
073F   EB                     EX   de,hl   ; condition = false, de = then
0740   C3 51 06               JP   go1   
0743                STAR:        
0743                MUL:         
0743   D1                     POP   de   ; get first value
0744   E1                     POP   hl   
0745                MUL2:        
0745   C5                     PUSH   bc   ; Preserve the IP
0746   44 4D                  LD   bc,hl   ; bc = 2nd value
0748   21 00 00               LD   hl,0   
074B   3E 10                  LD   a,16   
074D                MUL3:        
074D   29                     ADD   hl,hl   
074E   CB 13                  RL   e   
0750   CB 12                  RL   d   
0752   30 04                  JR   nc,$+6   
0754   09                     ADD   hl,bc   
0755   30 01                  JR   nc,$+3   
0757   13                     INC   de   
0758   3D                     DEC   a   
0759   20 F2                  JR   nz,mul3   
075B   C1                     POP   bc   ; Restore the IP
075C   C3 96 03               JP   add3   
075F                NUM:         
075F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0762   0A                     LD   a,(bc)   ; Get numeral or -
0763   FE 2D                  CP   "-"   
0765   20 01                  JR   nz,num0   
0767   03                     INC   bc   ; move to next char, no flags affected
0768                NUM0:        
0768   08                     EX   af,af'   ; save zero flag = 0 for later
0769                NUM1:        
0769   0A                     LD   a,(bc)   ; read digit
076A   D6 30                  SUB   "0"   ; less than 0?
076C   38 13                  JR   c,num2   ; not a digit, exit loop
076E   FE 0A                  CP   10   ; greater that 9?
0770   30 0F                  JR   nc,num2   ; not a digit, exit loop
0772   03                     INC   bc   ; inc IP
0773   54 5D                  LD   de,hl   ; multiply hl * 10
0775   29                     ADD   hl,hl   
0776   29                     ADD   hl,hl   
0777   19                     ADD   hl,de   
0778   29                     ADD   hl,hl   
0779   85                     ADD   a,l   ; add digit in a to hl
077A   6F                     LD   l,a   
077B   3E 00                  LD   a,0   
077D   8C                     ADC   a,h   
077E   67                     LD   h,a   
077F   18 E8                  JR   num1   
0781                NUM2:        
0781   0B                     DEC   bc   
0782   08                     EX   af,af'   ; restore zero flag
0783   20 07                  JR   nz,num3   
0785   EB                     EX   de,hl   ; negate the value of hl
0786   21 00 00               LD   hl,0   
0789   B7                     OR   a   ; jump to sub2
078A   ED 52                  SBC   hl,de   
078C                NUM3:        
078C   E5                     PUSH   hl   ; Put the number on the stack
078D   DD E9                  JP   (ix)   ; and process the next character
078F                UNDERSCORE:      
078F                REMAIN:      
078F   2A F4 4B               LD   hl,(vRemain)   
0792   E5                     PUSH   hl   
0793   DD E9                  JP   (ix)   
0795                RPAREN:      
0795   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0798   FD 46 09               LD   b,(iy+9)   
079B   DD E9                  JP   (ix)   
079D                             ; arg_list* block* -- ptr
079D                SEMICOLON:      
079D   D1                     POP   de   ; de = block* hl = heap*
079E   2A F0 4B               LD   hl,(vHeapPtr)   
07A1   AF                     XOR   a   
07A2   77                     LD   (hl),a   ; compile null partial_array*
07A3   23                     INC   hl   
07A4   77                     LD   (hl),a   
07A5   23                     INC   hl   
07A6   73                     LD   (hl),e   ; compile block*
07A7   23                     INC   hl   
07A8   72                     LD   (hl),d   
07A9   23                     INC   hl   
07AA   D1                     POP   de   ; de = block*
07AB   73                     LD   (hl),e   ; compile arg_list*
07AC   23                     INC   hl   
07AD   72                     LD   (hl),d   
07AE   23                     INC   hl   
07AF   ED 5B F0 4B            LD   de,(vHeapPtr)   ; return lambda*
07B3   D5                     PUSH   de   
07B4   22 F0 4B               LD   (vHeapPtr),hl   ; heap* += 4
07B7   DD E9                  JP   (ix)   
07B9                             ; shiftLeft
07B9                             ; value count -- value2          shift left count places
07B9                SHIFTLEFT:      
07B9   50 59                  LD   de,bc   ; save IP
07BB   C1                     POP   bc   ; bc = count
07BC   41                     LD   b,c   ; b = loop counter
07BD   E1                     POP   hl   
07BE   04                     INC   b   ; test for counter=0 case
07BF   18 01                  JR   shiftLeft2   
07C1                SHIFTLEFT1:      
07C1   29                     ADD   hl,hl   ; left shift hl
07C2                SHIFTLEFT2:      
07C2   10 FD                  DJNZ   shiftLeft1   
07C4   E5                     PUSH   hl   
07C5   42 4B                  LD   bc,de   ; restore IP
07C7   DD E9                  JP   (ix)   
07C9                             ; shiftRight
07C9                             ; value count -- value2          shift left count places
07C9                SHIFTRIGHT:      
07C9   50 59                  LD   de,bc   ; save IP
07CB   C1                     POP   bc   ; bc = count
07CC   41                     LD   b,c   ; b = loop counter
07CD   E1                     POP   hl   
07CE   04                     INC   b   ; test for counter=0 case
07CF   18 04                  JR   shiftRight2   
07D1                SHIFTRIGHT1:      
07D1   CB 3C                  SRL   h   ; right shift hl
07D3   CB 1D                  RR   l   
07D5                SHIFTRIGHT2:      
07D5   10 FA                  DJNZ   shiftRight1   
07D7   E5                     PUSH   hl   
07D8   42 4B                  LD   bc,de   ; restore IP
07DA   DD E9                  JP   (ix)   
07DC                             ; string
07DC                             ; -- ptr                        ; points to start of string chars,
07DC                             ; length is stored at start - 2 bytes
07DC                DBLQUOTE:      
07DC                STRING:      
07DC   2A F0 4B               LD   hl,(vHeapPtr)   ; hl = heap*
07DF   23                     INC   hl   ; skip length field to start
07E0   23                     INC   hl   
07E1   E5                     PUSH   hl   ; save start of string
07E2   03                     INC   bc   ; point to next char
07E3   18 03                  JR   string2   
07E5                STRING1:      
07E5   77                     LD   (hl),a   
07E6   23                     INC   hl   ; increase count
07E7   03                     INC   bc   ; point to next char
07E8                STRING2:      
07E8   0A                     LD   a,(bc)   
07E9   FE 22                  CP   DQUOTE   ; " is the string terminator
07EB   28 04                  JR   z,string3   
07ED   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07EF   20 F4                  JR   nz,string1   
07F1                STRING3:      
07F1   AF                     XOR   a   ; write NUL to terminate string
07F2   77                     LD   (hl),a   ; hl = end of string
07F3   23                     INC   hl   
07F4   22 F0 4B               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07F7   2B                     DEC   hl   ; hl = end of string without terminator
07F8   D1                     POP   de   ; de = start of string
07F9   D5                     PUSH   de   ; return start of string
07FA   B7                     OR   a   ; hl = length bytes, de = start of string
07FB   ED 52                  SBC   hl,de   
07FD   EB                     EX   de,hl   
07FE   2B                     DEC   hl   ; write length bytes to length field at start - 2
07FF   72                     LD   (hl),d   
0800   2B                     DEC   hl   
0801   73                     LD   (hl),e   
0802   DD E9                  JP   (ix)   
0804                MINUS:       ; negative sign or subtract
0804   03                     INC   bc   ; check if sign of a number
0805   0A                     LD   a,(bc)   
0806   0B                     DEC   bc   
0807   FE 30                  CP   "0"   
0809   38 05                  JR   c,sub   
080B   FE 3A                  CP   "9"+1   
080D   DA 3E 03               JP   c,num_   
0810                SUB:         ; Subtract the value 2nd on stack from top of stack
0810   03                     INC   bc   
0811   FE 2D                  CP   "-"   
0813   20 05                  JR   nz,sub1   
0815   E1                     POP   hl   
0816   2B                     DEC   hl   
0817   C3 8C 04               JP   assign0   
081A                SUB1:        
081A   0B                     DEC   bc   
081B   D1                     POP   de   
081C   E1                     POP   hl   
081D   B7                     OR   a   
081E   ED 52                  SBC   hl,de   
0820   C3 96 03               JP   add3   
0823                ERROR1:      
0823   21 01 00               LD   hl,1   ; error 1: unknown command
0826   E5                     PUSH   hl   
0827   C3 63 0C               JP   error   
082A                COMMENT:      
082A   03                     INC   bc   ; point to next char
082B   0A                     LD   a,(bc)   
082C   FE 20                  CP   " "   ; terminate on any char less than SP
082E   30 FA                  JR   nc,comment   
0830   0B                     DEC   bc   
0831   DD E9                  JP   (ix)   
0833                COMMAND_A:      
0833   CD DF 0A               CALL   jumpTable   
0836   62                     DB   "b"   
0837   3F 08                  DW   absolute   
0839   64                     DB   "d"   
083A   4C 08                  DW   addrOf   
083C   00                     DB   NUL   
083D   23 08                  DW   error1   
083F                             ; /ab absolute
083F                             ; num -- num
083F                ABSOLUTE:      
083F   E1                     POP   hl   
0840   CB 7C                  BIT   7,h   
0842   C8                     RET   z   
0843   AF                     XOR   a   
0844   95                     SUB   l   
0845   6F                     LD   l,a   
0846   9F                     SBC   a,a   
0847   94                     SUB   h   
0848   67                     LD   h,a   
0849   E5                     PUSH   hl   
084A   DD E9                  JP   (ix)   
084C                             ; /ad addrOf
084C                             ; char -- addr
084C                ADDROF:      
084C   E1                     POP   hl   ; a = char
084D   7D                     LD   a,l   
084E   FE 7B                  CP   "z"+1   ; if a > z then exit
0850   30 19                  JR   nc,addrOf2   
0852   D6 41                  SUB   "A"   ; a - 65
0854   38 15                  JR   c,addrOf2   ; if < A then exit
0856   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0858   38 06                  JR   c,addrOf1   
085A   D6 06                  SUB   "a"-("Z"+1)   
085C   FE 1A                  CP   "Z"-"A"+1   
085E   38 0B                  JR   c,addrOf2   ; if < a then exit
0860                ADDROF1:      
0860   87                     ADD   a,a   ; double a
0861   21 00 4B               LD   hl,VARS   ; hl = VARS + a
0864   85                     ADD   a,l   
0865   6F                     LD   l,a   
0866   3E 00                  LD   a,0   
0868   8C                     ADC   a,h   
0869   67                     LD   h,a   
086A   E5                     PUSH   hl   
086B                ADDROF2:      
086B   DD E9                  JP   (ix)   
086D                COMMAND_B:      
086D   CD DF 0A               CALL   jumpTable   
0870   61                     DB   "a"   
0871   88 08                  DW   bufferArray   
0873   63                     DB   "c"   
0874   95 09                  DW   bufferChar   
0876   6E                     DB   "n"   
0877   BC 08                  DW   bufferNumber   
0879   72                     DB   "r"   
087A   61 09                  DW   break   
087C   73                     DB   "s"   
087D   7B 09                  DW   bufferString   
087F   78                     DB   "x"   
0880   9A 09                  DW   bufferXChars   
0882   79                     DB   "y"   
0883   A6 0B                  DW   coldStart   
0885   00                     DB   NUL   
0886   23 08                  DW   error1   
0888                             ; /ba buffer array
0888                             ; array* --
0888                BUFFERARRAY:      
0888   CD 50 06               CALL   go   
088B   00 00                  DW   NUL   ; NUL closure
088D   91 08                  DW   $+4   
088F   C5 0A                  DW   args1A2L   
0891   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08BC                             ; /bd buffer decimal
08BC                             ; value --
08BC                BUFFERNUMBER:      
08BC   3A E8 4B               LD   a,(vNumBase)   
08BF   FE 10                  CP   16   
08C1   28 66                  JR   z,bufferHex   ; else falls through
08C3                             ; /bd buffer decimal
08C3                             ; value --
08C3                BUFFERDEC:      
08C3   ED 5B EC 4B            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08C7   D9                     EXX      
08C8   E1                     POP   hl   ; hl = value
08C9   CD DD 08               CALL   bufferDec0   
08CC   D9                     EXX      ; de = buffer*' bc = IP
08CD   3E 20                  LD   a," "   ; append space to buffer
08CF   12                     LD   (de),a   
08D0   1C                     INC   e   ; buffer*++, wraparound
08D1   CC C8 0A               CALL   z,flushBuffer   
08D4   2A EC 4B               LD   hl,(vBufPtr)   ; hl = buffer*
08D7   ED 53 EC 4B            LD   (vBufPtr),de   ; update buffer* with buffer*'
08DB   DD E9                  JP   (ix)   
08DD                             ; hl = value
08DD                             ; de' = buffer*
08DD                             ; a, bc, de, hl destroyed
08DD                BUFFERDEC0:      
08DD   CB 7C                  BIT   7,h   
08DF   28 0C                  JR   z,bufferDec1   
08E1   D9                     EXX      
08E2   3E 2D                  LD   a,"-"   
08E4   12                     LD   (de),a   
08E5   13                     INC   de   
08E6   D9                     EXX      
08E7   AF                     XOR   a   
08E8   95                     SUB   l   
08E9   6F                     LD   l,a   
08EA   9F                     SBC   a,a   
08EB   94                     SUB   h   
08EC   67                     LD   h,a   
08ED                BUFFERDEC1:      
08ED   0E 00                  LD   c,0   ; leading zeros flag = false
08EF   11 F0 D8               LD   de,-10000   
08F2   CD 0D 09               CALL   bufferDec2   
08F5   11 18 FC               LD   de,-1000   
08F8   CD 0D 09               CALL   bufferDec2   
08FB   11 9C FF               LD   de,-100   
08FE   CD 0D 09               CALL   bufferDec2   
0901   1E F6                  LD   e,-10   
0903   CD 0D 09               CALL   bufferDec2   
0906   0C                     INC   c   ; flag = true for at least digit
0907   1E FF                  LD   e,-1   
0909   CD 0D 09               CALL   bufferDec2   
090C   C9                     RET      
090D                BUFFERDEC2:      
090D   06 2F                  LD   b,"0"-1   
090F                BUFFERDEC3:      
090F   04                     INC   b   
0910   19                     ADD   hl,de   
0911   38 FC                  JR   c,bufferDec3   
0913   ED 52                  SBC   hl,de   
0915   3E 30                  LD   a,"0"   
0917   B8                     CP   b   
0918   20 05                  JR   nz,bufferDec4   
091A   AF                     XOR   a   
091B   B1                     OR   c   
091C   C8                     RET   z   
091D   18 01                  JR   bufferDec5   
091F                BUFFERDEC4:      
091F   0C                     INC   c   
0920                BUFFERDEC5:      
0920   78                     LD   a,b   
0921   D9                     EXX      
0922   12                     LD   (de),a   
0923   1C                     INC   e   
0924   CC C8 0A               CALL   z,flushBuffer   
0927   D9                     EXX      
0928   C9                     RET      
0929                             ; /bh buffer hex
0929                             ; value --
0929                BUFFERHEX:      
0929   E1                     POP   hl   ; hl = value
092A   ED 5B EC 4B            LD   de,(vBufPtr)   
092E   3E 23                  LD   a,"#"   ; # prefix
0930   12                     LD   (de),a   
0931   1C                     INC   e   ; buffer*++, wraparound
0932   CC C8 0A               CALL   z,flushBuffer   
0935   7C                     LD   a,h   
0936   CD 4A 09               CALL   bufferHex1   
0939   7D                     LD   a,l   
093A   CD 4A 09               CALL   bufferHex1   
093D   3E 20                  LD   a," "   ; append space to buffer
093F   12                     LD   (de),a   
0940   1C                     INC   e   ; buffer*++, wraparound
0941   CC C8 0A               CALL   z,flushBuffer   
0944   ED 53 EC 4B            LD   (vBufPtr),de   
0948   DD E9                  JP   (ix)   
094A                BUFFERHEX1:      
094A   F5                     PUSH   af   
094B   1F                     RRA      
094C   1F                     RRA      
094D   1F                     RRA      
094E   1F                     RRA      
094F   CD 53 09               CALL   bufferHex2   
0952   F1                     POP   af   
0953                BUFFERHEX2:      
0953   E6 0F                  AND   0x0F   
0955   C6 90                  ADD   a,0x90   
0957   27                     DAA      
0958   CE 40                  ADC   a,0x40   
095A   27                     DAA      
095B   12                     LD   (de),a   
095C   1C                     INC   e   ; buffer*++, wraparound
095D   CC C8 0A               CALL   z,flushBuffer   
0960   C9                     RET      
0961                             ; /br break from loop
0961                             ; --
0961                BREAK:       
0961   E1                     POP   hl   
0962   7D                     LD   a,l   
0963   B4                     OR   h   
0964   28 02                  JR   z,break1   
0966   DD E9                  JP   (ix)   
0968                BREAK1:      
0968   FD 5D                  LD   e,iyl   ; get block* just under stack frame
096A   FD 54                  LD   d,iyh   
096C   21 08 00               LD   hl,8   
096F   19                     ADD   hl,de   
0970   23                     INC   hl   
0971   23                     INC   hl   
0972   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0975   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0978   C3 3B 05               JP   blockEnd   
097B                             ; /bs buffered string
097B                             ; string* --
097B                BUFFERSTRING:      
097B   E1                     POP   hl   ; hl = string*
097C   ED 5B EC 4B            LD   de,(vBufPtr)   ; de = buffer*
0980   18 06                  JR   bufferString1   
0982                BUFFERSTRING0:      
0982   12                     LD   (de),a   ; a -> buffer*
0983   1C                     INC   e   ; buffer*++, wraparound
0984   CC C8 0A               CALL   z,flushBuffer   
0987   23                     INC   hl   
0988                BUFFERSTRING1:      
0988   7E                     LD   a,(hl)   ; a <- string*
0989   B7                     OR   a   ; if NUL exit loop
098A   20 F6                  JR   nz,bufferString0   
098C   2A EC 4B               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
098F   ED 53 EC 4B            LD   (vBufPtr),de   ; save buffer*' in pointer
0993   DD E9                  JP   (ix)   
0995                             ; /bc buffer char
0995                             ; char --
0995                BUFFERCHAR:      
0995   21 01 00               LD   hl,1   
0998   18 01                  JR   bufferXChars0   
099A                             ; /bx buffered x chars
099A                             ; char length --
099A                BUFFERXCHARS:      
099A   E1                     POP   hl   ; hl = length
099B                BUFFERXCHARS0:      
099B   D1                     POP   de   ; a' = char
099C   7B                     LD   a,e   
099D   08                     EX   af,af'   
099E   ED 5B EC 4B            LD   de,(vBufPtr)   ; de = buffer*
09A2   18 08                  JR   bufferXChars2   
09A4                BUFFERXCHARS1:      
09A4   08                     EX   af,af'   
09A5   12                     LD   (de),a   
09A6   08                     EX   af,af'   
09A7   1C                     INC   e   ; buffer*++, wraparound
09A8   CC C8 0A               CALL   z,flushBuffer   
09AB   2B                     DEC   hl   
09AC                BUFFERXCHARS2:      
09AC   7D                     LD   a,l   
09AD   B4                     OR   h   
09AE   20 F4                  JR   nz,bufferXChars1   
09B0   ED 53 EC 4B            LD   (vBufPtr),de   ; save buffer*'
09B4   DD E9                  JP   (ix)   
09B6                COMMAND_I:      
09B6   CD DF 0A               CALL   jumpTable   
09B9   6E                     DB   "n"   
09BA   90 0A                  DW   input   
09BC   76                     DB   "v"   
09BD   C2 03                  DW   invert   
09BF   00                     DB   NUL   
09C0   23 08                  DW   error1   
09C2                COMMAND_P:      
09C2   CD DF 0A               CALL   jumpTable   
09C5   61                     DB   "a"   
09C6   D4 09                  DW   partial   
09C8   62                     DB   "b"   
09C9   F4 09                  DW   printBuffer   
09CB   63                     DB   "c"   
09CC   17 0A                  DW   printChars   
09CE   6B                     DB   "k"   
09CF   29 0A                  DW   printStack   
09D1   00                     DB   NUL   
09D2   23 08                  DW   error1   
09D4                             ; partial
09D4                             ; array* lambda* -- lambda1*
09D4                PARTIAL:      
09D4   E1                     POP   hl   ; h1 = lambda*
09D5   ED 5B F0 4B            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09D9   ED 43 00 4C            LD   (vTemp1),bc   ; save IP
09DD   01 06 00               LD   bc,6   ; bc = count
09E0   ED B0                  LDIR      ; clone lambda
09E2   ED 4B 00 4C            LD   bc,(vTemp1)   ; restore IP
09E6   2A F0 4B               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09E9   ED 53 F0 4B            LD   (vHeapPtr),de   ; heap* += 6
09ED   D1                     POP   de   ; de = array*
09EE   E5                     PUSH   hl   ; return partial_array*
09EF   73                     LD   (hl),e   ; compile array*
09F0   23                     INC   hl   
09F1   72                     LD   (hl),d   
09F2   DD E9                  JP   (ix)   
09F4                             ; /pb printBuffer
09F4                             ; --
09F4                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09F4                PRINTBUFFER:      
09F4   CD 50 06               CALL   go   
09F7   00 00                  DW   NUL   ; NUL closure
09F9   FD 09                  DW   $+4   
09FB   BA 0A                  DW   args1A0L   
09FD   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A17                             ; printChars
0A17                             ; char* len --
0A17                PRINTCHARS:      
0A17   E1                     POP   hl   ; hl = count
0A18   D1                     POP   de   ; de = char*
0A19   CD 24 0A               CALL   printChars2   
0A1C   DD E9                  JP   (ix)   
0A1E                PRINTCHARS1:      
0A1E   1A                     LD   a,(de)   ; print char at char*
0A1F   CD 85 00               CALL   putchar   
0A22   13                     INC   de   ; char*++
0A23   2B                     DEC   hl   ; count--
0A24                PRINTCHARS2:      
0A24   7D                     LD   a,l   ; count == 0?
0A25   B4                     OR   h   
0A26   C8                     RET   z   
0A27   18 F5                  JR   printChars1   ; if not loop
0A29                             ; /pk print stack
0A29                             ; --
0A29                PRINTSTACK:      
0A29                             ;     ld (vTemp1),bc
0A29                             ;     call printStr
0A29                             ;     .cstr "=> "
0A29                             ;     ld hl,STACK
0A29                             ;     sbc hl,sp
0A29                             ;     srl h
0A29                             ;     rr l
0A29                             ;     ld bc,hl
0A29                             ;     ld hl,STACK
0A29                             ;     jr printStack2
0A29                             ; printStack1:
0A29                             ;     dec bc
0A29                             ;     dec hl
0A29                             ;     ld d,(hl)
0A29                             ;     dec hl
0A29                             ;     ld e,(hl)
0A29                             ;     ex de,hl
0A29                             ;     call prthex
0A29                             ;     ex de,hl
0A29                             ;     ld a," "
0A29                             ;     call putchar
0A29                             ; printStack2:
0A29                             ;     ld a,c
0A29                             ;     or b
0A29                             ;     jr nz,printStack1
0A29                             ;     call prompt
0A29                             ;     ld bc,(vTemp1)
0A29   DD E9                  JP   (ix)   
0A2B                SIZE:        
0A2B   E1                     POP   hl   
0A2C   2B                     DEC   hl   ; skip magic byte
0A2D   2B                     DEC   hl   ; skip type tag
0A2E   2B                     DEC   hl   ; msb size
0A2F   56                     LD   d,(hl)   
0A30   2B                     DEC   hl   ; lsb size
0A31   5E                     LD   e,(hl)   
0A32   D5                     PUSH   de   
0A33   DD E9                  JP   (ix)   
0A35                COMMAND_V:      
0A35   CD DF 0A               CALL   jumpTable   
0A38   62                     DB   "b"   
0A39   59 0A                  DW   varBufPtr   
0A3B   68                     DB   "h"   
0A3C   62 0A                  DW   varHeapPtr   
0A3E   74                     DB   "t"   
0A3F   6B 0A                  DW   varTIBPtr   
0A41   42                     DB   "B"   
0A42   4A 0A                  DW   constBufStart   
0A44   54                     DB   "T"   
0A45   54 0A                  DW   constTIBStart   
0A47   00                     DB   NUL   
0A48   23 08                  DW   error1   
0A4A                CONSTBUFSTART:      
0A4A   11 00 4A               LD   de,BUF   
0A4D   18 28                  JR   constant   
0A4F                CONSTHEAPSTART:      
0A4F   11 1E 4C               LD   de,HEAP   
0A52   18 23                  JR   constant   
0A54                CONSTTIBSTART:      
0A54   11 00 49               LD   de,TIB   
0A57   18 1E                  JR   constant   
0A59                VARBUFPTR:      
0A59   ED 5B EC 4B            LD   de,(vBufPtr)   
0A5D   21 EC 4B               LD   hl,vBufPtr   
0A60   18 12                  JR   variable   
0A62                VARHEAPPTR:      
0A62   ED 5B F0 4B            LD   de,(vHeapPtr)   
0A66   21 F0 4B               LD   hl,vHeapPtr   
0A69   18 09                  JR   variable   
0A6B                VARTIBPTR:      
0A6B   ED 5B EA 4B            LD   de,(vTIBPtr)   
0A6F   21 EA 4B               LD   hl,vTIBPtr   
0A72   18 00                  JR   variable   
0A74                VARIABLE:      
0A74   22 F2 4B               LD   (vPointer),hl   
0A77                CONSTANT:      
0A77   D5                     PUSH   de   
0A78   DD E9                  JP   (ix)   
0A7A                CHARS:       
0A7A   21 01 00               LD   hl,1   
0A7D                CHARS1:      
0A7D   22 E6 4B               LD   (vDataWidth),hl   
0A80   DD E9                  JP   (ix)   
0A82                DECIMAL:      
0A82   21 0A 00               LD   hl,10   
0A85                DECIMAL1:      
0A85   22 E8 4B               LD   (vNumBase),hl   
0A88   DD E9                  JP   (ix)   
0A8A                HEXADECIMAL:      
0A8A   21 10 00               LD   hl,16   
0A8D   C3 85 0A               JP   decimal1   
0A90                             ; Z80 port input
0A90                             ; port -- value
0A90                INPUT:       
0A90   E1                     POP   hl   
0A91   59                     LD   e,c   ; save IP
0A92   4D                     LD   c,l   
0A93   ED 68                  IN   l,(c)   
0A95   26 00                  LD   h,0   
0A97   4B                     LD   c,e   ; restore IP
0A98   E5                     PUSH   hl   
0A99   DD E9                  JP   (ix)   
0A9B                KEY:         
0A9B   CD 81 00               CALL   getchar   
0A9E   26 00                  LD   h,0   
0AA0   6F                     LD   l,a   
0AA1   E5                     PUSH   hl   
0AA2   DD E9                  JP   (ix)   
0AA4                             ; Z80 port output
0AA4                             ; value port --
0AA4                OUTPUT:      
0AA4   E1                     POP   hl   
0AA5   59                     LD   e,c   ; save IP
0AA6   4D                     LD   c,l   
0AA7   E1                     POP   hl   
0AA8   ED 69                  OUT   (c),l   
0AAA   4B                     LD   c,e   ; restore IP
0AAB   DD E9                  JP   (ix)   
0AAD                NUMBERS:      
0AAD   21 02 00               LD   hl,2   
0AB0   C3 7D 0A               JP   chars1   
0AB3                             ; 
0AB3                             ; 
0AB3                             ; 
0AB3                             ; 
0AB3                FILTER:      
0AB3                MAP:         
0AB3                SCAN:        
0AB3   DD E9                  JP   (ix)   
0AB5                             ;*******************************************************************
0AB5                             ; reusable arglists
0AB5                             ;*******************************************************************
0AB5                ARGS0A1L_:      ; zero args one local
0AB5   01                     DB   1   ; num args + locals
0AB6   01                     DB   1   ; num locals
0AB7                ARGS0A1L:      
0AB7   61                     DB   "a"   
0AB8                ARGS1A0L_:      ; one arg zero locals
0AB8   01                     DB   1   ; num args + locals
0AB9   00                     DB   0   ; num locals
0ABA                ARGS1A0L:      
0ABA   61                     DB   "a"   
0ABB                ARGS1A1L_:      ; one arg one local
0ABB   02                     DB   2   ; num args + locals
0ABC   01                     DB   1   ; num locals
0ABD                ARGS1A1L:      
0ABD   61 62                  DB   "ab"   
0ABF                ARGS2A0L_:      ; two args zero locals
0ABF   02                     DB   2   ; num args + locals
0AC0   00                     DB   0   ; num locals
0AC1                ARGS2A0L:      
0AC1   61 62                  DB   "ab"   
0AC3                ARGS1A2L_:      ; one arg two locals
0AC3   03                     DB   3   ; num args + locals
0AC4   02                     DB   2   ; num locals
0AC5                ARGS1A2L:      
0AC5   61 62 63               DB   "abc"   
0AC8                             ;*******************************************************************
0AC8                             ; general routines
0AC8                             ;*******************************************************************
0AC8                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0AC8                FLUSHBUFFER:      
0AC8   F5                     PUSH   af   
0AC9   D5                     PUSH   de   
0ACA   E5                     PUSH   hl   
0ACB   2A EC 4B               LD   hl,(vBufPtr)   
0ACE   11 00 4A               LD   de,BUF   
0AD1   ED 53 EC 4B            LD   (vBufPtr),de   
0AD5   B7                     OR   a   
0AD6   ED 52                  SBC   hl,de   
0AD8   CD 24 0A               CALL   printChars2   
0ADB   E1                     POP   hl   
0ADC   D1                     POP   de   
0ADD   F1                     POP   af   
0ADE   C9                     RET      
0ADF                             ; followed by a table
0ADF                             ; db char
0ADF                             ; dw addr
0ADF                             ; the final item must have char == NUL
0ADF                JUMPTABLE:      
0ADF   03                     INC   bc   
0AE0   E1                     POP   hl   
0AE1                JUMPTABLE0:      
0AE1   AF                     XOR   a   
0AE2   BE                     CP   (hl)   
0AE3   28 09                  JR   z,jumpTable1   
0AE5   0A                     LD   a,(bc)   
0AE6   BE                     CP   (hl)   
0AE7   28 06                  JR   z,jumpTable2   
0AE9   23                     INC   hl   
0AEA   23                     INC   hl   
0AEB   23                     INC   hl   
0AEC   18 F3                  JR   jumpTable0   
0AEE                JUMPTABLE1:      
0AEE   0B                     DEC   bc   
0AEF                JUMPTABLE2:      
0AEF   23                     INC   hl   
0AF0   5E                     LD   e,(hl)   
0AF1   23                     INC   hl   
0AF2   56                     LD   d,(hl)   
0AF3   EB                     EX   de,hl   
0AF4   E9                     JP   (hl)   
0AF5                PRTSTR0:      
0AF5   CD 85 00               CALL   putchar   
0AF8   23                     INC   hl   
0AF9                PRTSTR:      
0AF9   7E                     LD   a,(hl)   
0AFA   B7                     OR   a   
0AFB   20 F8                  JR   nz,prtstr0   
0AFD   C9                     RET      
0AFE                             ; **************************************************************************
0AFE                             ; calculate nesting value
0AFE                             ; a is char to be tested,
0AFE                             ; e is the nesting value (initially 0)
0AFE                             ; e is increased by ( and [
0AFE                             ; e is decreased by ) and ]
0AFE                             ; e has its bit 7 toggled by `
0AFE                             ; limited to 127 levels
0AFE                             ; **************************************************************************
0AFE                NESTING:      
0AFE   FE 22                  CP   DQUOTE   ; quote char
0B00   28 06                  JR   z,nesting0   
0B02   FE 60                  CP   "`"   ; quote char
0B04   28 02                  JR   z,nesting0   
0B06   18 0A                  JR   nesting1   
0B08                NESTING0:      
0B08   CB 7B                  BIT   7,e   
0B0A   28 03                  JR   z,nesting1a   
0B0C   CB BB                  RES   7,e   
0B0E   C9                     RET      
0B0F                NESTING1A:      
0B0F   CB FB                  SET   7,e   
0B11   C9                     RET      
0B12                NESTING1:      
0B12   CB 7B                  BIT   7,e   
0B14   C0                     RET   nz   
0B15   FE 7B                  CP   "{"   
0B17   28 08                  JR   z,nesting2   
0B19   FE 5B                  CP   "["   
0B1B   28 04                  JR   z,nesting2   
0B1D   FE 28                  CP   "("   
0B1F   20 02                  JR   nz,nesting3   
0B21                NESTING2:      
0B21   1C                     INC   e   
0B22   C9                     RET      
0B23                NESTING3:      
0B23   FE 7D                  CP   "}"   
0B25   28 07                  JR   z,nesting4   
0B27   FE 5D                  CP   "]"   
0B29   28 03                  JR   z,nesting4   
0B2B   FE 29                  CP   ")"   
0B2D   C0                     RET   nz   
0B2E                NESTING4:      
0B2E   1D                     DEC   e   
0B2F   C9                     RET      
0B30                PROMPT:      
0B30   CD 40 0B               CALL   printStr   
0B33   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B38   C9                     RET      
0B39                CRLF:        
0B39   CD 40 0B               CALL   printStr   
0B3C   0D 0A 00               .CSTR   "\r\n"   
0B3F   C9                     RET      
0B40                             ; prints a null teminated string
0B40                             ; the string should be immediately following the call
0B40                PRINTSTR:      
0B40   E3                     EX   (sp),hl   ; swap			
0B41   CD F9 0A               CALL   prtstr   
0B44   23                     INC   hl   ; inc past NUL
0B45   E3                     EX   (sp),hl   ; put it back	
0B46   C9                     RET      
0B47                TITLESTR:      
0B47   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.0\r\n",0,0,0   
0B5B                INIT:        
0B5B   21 47 0B               LD   hl,titleStr   
0B5E   11 0A 4C               LD   de,warmBuf   
0B61   06 14                  LD   b,20   
0B63                INIT1:       
0B63   1A                     LD   a,(de)   
0B64   BE                     CP   (hl)   
0B65   20 17                  JR   nz,coldBoot0   
0B67   13                     INC   de   
0B68   23                     INC   hl   
0B69   10 F8                  DJNZ   init1   
0B6B                WARMINIT:      
0B6B   ED 4B F6 4B            LD   bc,(vSavedIP)   ; restore IP
0B6F   ED 7B F8 4B            LD   sp,(vSavedSP)   ; restore SP
0B73   DD 2A FA 4B            LD   ix,(vSavedNext)   ; restore Next
0B77   FD 2A FC 4B            LD   iy,(vSavedBP)   ; restore BP
0B7B   C3 B5 0B               JP   start1   
0B7E                COLDBOOT0:      
0B7E   21 47 0B               LD   hl,titleStr   ; copy titleStr to warmBuf
0B81   11 0A 4C               LD   de,warmBuf   
0B84   06 14                  LD   b,20   
0B86   ED B0                  LDIR      
0B88                COLDINIT:      
0B88   21 80 01               LD   hl,isysVars   
0B8B   11 E6 4B               LD   de,sysVars   
0B8E   01 10 00               LD   bc,8 * 2   
0B91   ED B0                  LDIR      
0B93   21 00 4B               LD   hl,vars   ; 52 vars LO HI
0B96   06 34                  LD   b,26*2   
0B98   AF                     XOR   a   
0B99                COLDBOOT1:      
0B99   77                     LD   (hl),a   
0B9A   23                     INC   hl   
0B9B   10 FC                  DJNZ   coldBoot1   
0B9D   DD 2A EE 4B            LD   ix,(vNext)   
0BA1   FD 21 00 49            LD   iy,STACK   
0BA5   C9                     RET      
0BA6                COLDSTART:      
0BA6   31 00 49               LD   sp,STACK   
0BA9   CD 7E 0B               CALL   coldBoot0   
0BAC   C3 B5 0B               JP   start1   
0BAF                START:       
0BAF   31 00 49               LD   sp,STACK   ; start Monty
0BB2   CD 5B 0B               CALL   init   ; setups
0BB5                START1:      
0BB5   21 0A 4C               LD   hl,warmBuf   
0BB8   CD F9 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BBB                INTERPRET:      
0BBB   CD C8 0A               CALL   flushBuffer   
0BBE   CD 30 0B               CALL   prompt   
0BC1   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BC4   21 00 49               LD   hl,TIB   
0BC7   22 EA 4B               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BCA                INTERPRET2:      ; calculate nesting
0BCA   1E 00                  LD   e,0   ; initilize nesting value
0BCC   C5                     PUSH   bc   ; save offset into TIB,
0BCD                             ; bc is also the count of chars in TIB
0BCD   21 00 49               LD   hl,TIB   ; hl is start of TIB
0BD0   18 0B                  JR   interpret4   
0BD2                INTERPRET3:      
0BD2   3E 33                  LD   a,"3"   
0BD4   CD 85 00               CALL   putchar   
0BD7   7E                     LD   a,(hl)   ; a = char in TIB
0BD8   23                     INC   hl   ; inc pointer into TIB
0BD9   0B                     DEC   bc   ; dec count of chars in TIB
0BDA   CD FE 0A               CALL   nesting   ; update nesting value
0BDD                INTERPRET4:      
0BDD   79                     LD   a,c   ; is count zero?
0BDE   B0                     OR   b   
0BDF   20 F1                  JR   nz,interpret3   ; if not loop
0BE1   C1                     POP   bc   ; restore offset into TIB
0BE2                INTERPRET5:      
0BE2   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BE5   FE 20                  CP   $20   ; compare to space
0BE7   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BE9   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BEB                             ; ???? NEEDED?
0BEB   28 3B                  JR   z,interpret8   
0BED   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BEF   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BF1   FE 05                  CP   CTRL_E   
0BF3   CA 86 0C               JP   z,edit_   
0BF6   FE 08                  CP   CTRL_H   
0BF8   CA 76 0C               JP   z,backSpace_   
0BFB   FE 0A                  CP   CTRL_J   
0BFD   CA 9E 0C               JP   z,reEdit_   
0C00   FE 13                  CP   CTRL_S   
0C02   CA A1 0C               JP   z,printStack_   
0C05                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C05                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C05                             ; DB     lsb(list_)       ; FF  ^L 12
0C05                             ; DB     lsb(printStack_) ; DLE ^P 16
0C05                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C05                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C05                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C05                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C05                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C05                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C05                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C05                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C05                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C05                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C05                INTERPRET5A:      
0C05                             ; ld (vTIBPtr),bc
0C05                             ; ld bc,(vTIBPtr)
0C05   18 C3                  JR   interpret2   
0C07                INTERPRET6:      
0C07   21 00 49               LD   hl,TIB   
0C0A   09                     ADD   hl,bc   
0C0B   77                     LD   (hl),a   ; store the character in textbuf
0C0C   03                     INC   bc   
0C0D   CD 85 00               CALL   putchar   ; echo character to screen
0C10   CD FE 0A               CALL   nesting   
0C13   18 CD                  JR   interpret5   ; wait for next character
0C15                INTERPRET7:      
0C15   21 00 49               LD   hl,TIB   
0C18   09                     ADD   hl,bc   
0C19   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C1B   23                     INC   hl   
0C1C   36 0A                  LD   (hl),"\n"   
0C1E   23                     INC   hl   
0C1F   03                     INC   bc   
0C20   03                     INC   bc   
0C21   CD 39 0B               CALL   crlf   ; echo character to screen
0C24   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C25   B7                     OR   a   
0C26   20 BA                  JR   nz,interpret5   
0C28                INTERPRET8:      
0C28   21 00 49               LD   hl,TIB   
0C2B   09                     ADD   hl,bc   
0C2C   22 EA 4B               LD   (vTIBPtr),hl   
0C2F   01 00 49               LD   bc,TIB   
0C32   ED 43 F6 4B            LD   (vSavedIP),bc   ; save IP
0C36   ED 73 F8 4B            LD   (vSavedSP),sp   ; save SP
0C3A   DD 22 FA 4B            LD   (vSavedNext),ix   ; save Next
0C3E   FD 22 FC 4B            LD   (vSavedBP),iy   ; save BP
0C42   0B                     DEC   bc   
0C43                NEXT:        
0C43   03                     INC   bc   ; Increment the IP
0C44   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C45   FE 20                  CP   " "   ; whitespace?
0C47   28 FA                  JR   z,next   ; space? ignore
0C49   38 09                  JR   c,next1   
0C4B   D6 20                  SUB   " "   
0C4D   6F                     LD   l,a   ; index into table
0C4E   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C50   6E                     LD   l,(hl)   ; get low jump address
0C51   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C53   E9                     JP   (hl)   ; Jump to routine
0C54                NEXT1:       
0C54   FE 00                  CP   NUL   ; end of input string?
0C56   28 03                  JR   z,exit   
0C58   C3 BB 0B               JP   interpret   ; no, other whitespace, macros?
0C5B                EXIT:        
0C5B   03                     INC   bc   
0C5C   60 69                  LD   hl,bc   
0C5E   E9                     JP   (hl)   
0C5F                RUN:         
0C5F   C1                     POP   bc   
0C60   0B                     DEC   bc   
0C61   DD E9                  JP   (ix)   
0C63                ERROR:       
0C63   CD 5F 0C               CALL   run   
0C66   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C73   C3 BB 0B               JP   interpret   
0C76                BACKSPACE_:      
0C76   79                     LD   a,c   
0C77   B0                     OR   b   
0C78   CA CA 0B               JP   z,interpret2   
0C7B   0B                     DEC   bc   
0C7C   CD 40 0B               CALL   printStr   
0C7F   08 20 08 00            .CSTR   "\b \b"   
0C83   C3 CA 0B               JP   interpret2   
0C86                             ; edit
0C86                EDIT_:       
0C86   CD 5F 0C               CALL   run   
0C89   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C9B   C3 BB 0B               JP   interpret   
0C9E                REEDIT_:      
0C9E   C3 BB 0B               JP   interpret   
0CA1                PRINTSTACK_:      
0CA1   CD 5F 0C               CALL   run   
0CA4   2F 70 6B 00            .CSTR   "/pk"   
0CA8   C3 BB 0B               JP   interpret   
0CAB                             ; editDef:
0CAB                             ;     pop hl                      ; pop ret address
0CAB                             ;     ex (sp),hl                  ; swap with TOS
0CAB                             ;     push hl                     ; dup TOS
0CAB                             ;     ld a,l                      ; a = ident
0CAB                             ;     ld de,TIB                   ; de = start of TIB
0CAB                             ;     ld (vTIBPtr),de             ; update TIB*
0CAB                             ;     push ix                     ; save NEXT
0CAB                             ;     ld ix,editDef0              ; NEXT = editDef0
0CAB                             ;     jp lookupRef                ; convert letter into address
0CAB                             ; editDef0:
0CAB                             ;     ld e,(hl)                   ; de = (hl++)
0CAB                             ;     inc hl
0CAB                             ;     ld d,(hl)
0CAB                             ;     ld a,d                      ; de == 0 ?
0CAB                             ;     or e
0CAB                             ;     jr z,editDef4
0CAB                             ;     ld ix,editDef3              ; NEXT = editDef3
0CAB                             ;     ex de,hl
0CAB                             ;     ld a,(hl)
0CAB                             ;     cp "{"
0CAB                             ;     jr nz,editDef1
0CAB                             ;     jp editBlock0               ; convert letter into address
0CAB                             ; editDef1:
0CAB                             ;     cp "("
0CAB                             ;     jr nz,editDef2
0CAB                             ;     jp editBlock0               ; convert letter into address
0CAB                             ; editDef2:
0CAB                             ;     jp editLambda
0CAB                             ; editDef3:
0CAB                             ;     ld a," "                    ; write assign
0CAB                             ;     call writeChar
0CAB                             ;     pop hl                      ; a = ident
0CAB                             ;     ld a,l
0CAB                             ;     call writeChar
0CAB                             ;     ld a,"="                    ; write assign
0CAB                             ;     call writeChar
0CAB                             ;     ld ix,editDef4              ; NEXT = editDef4
0CAB                             ;     jp printTIB
0CAB                             ; editDef4:
0CAB                             ;     pop ix                      ; restore NEXT
0CAB                             ;     jp (ix)
0CAB                             ; writeChar:
0CAB                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CAB                             ;     ld (de),a                   ; write ident
0CAB                             ;     inc de
0CAB                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CAB                             ;     ret
0CAB                             ; ; printTIB
0CAB                             ; printTIB:
0CAB                             ;     ld hl,(vTIBPtr)
0CAB                             ;     ld de,TIB
0CAB                             ;     or a
0CAB                             ;     sbc hl,de
0CAB                             ;     jp printTIB2
0CAB                             ; printTIB1:
0CAB                             ;     ld a,(de)
0CAB                             ;     call putchar
0CAB                             ; printTIB2:
0CAB                             ;     ld a,l
0CAB                             ;     or h
0CAB                             ;     jr nz,printTIB1
0CAB                             ;     jp (ix)
0CAB                             ; editBlock:
0CAB                             ;     pop hl                      ; hl = block*
0CAB                             ; editBlock0:
0CAB                             ;     push ix                     ; save next
0CAB                             ;     push hl                     ; push block*
0CAB                             ;     push hl                     ; push block*
0CAB                             ;     ld ix,(editBlock2)
0CAB                             ;     jp blockLength
0CAB                             ; editBlock1:
0CAB                             ;     pop hl                      ; bc = length, (sp) = IP
0CAB                             ;     pop de                      ; de = block*
0CAB                             ;     ld a,l
0CAB                             ;     or h
0CAB                             ;     jr z,editBlock2
0CAB                             ;     push bc
0CAB                             ;     ld bc,hl
0CAB                             ;     ex de,hl                    ; hl = block*
0CAB                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CAB                             ;     ldir                        ; copy block to TIB
0CAB                             ;     ld (vTIBPtr),de              ; save TIB*
0CAB                             ;     pop bc
0CAB                             ; editBlock2:
0CAB                             ;     pop ix                      ; restore next
0CAB                             ;     jp (ix)
0CAB                             ; editLambda:
0CAB                             ;     jp (ix)
0CAB                             ; editArray:
0CAB                             ;     jp (ix)
0CAB                             ; editArglist:
0CAB                             ;     jp (ix)
0CAB                             ; ; blockLength
0CAB                             ; ; addr1 -- length
0CAB                             ; blockLength:
0CAB                             ;     pop hl                      ; block*
0CAB                             ;     push hl                     ; save block*
0CAB                             ;     inc hl                      ; skip first char
0CAB                             ;     ld d,1                      ; increase nesting
0CAB                             ; blockLength1:                   ; Skip to end of definition
0CAB                             ;     ld a,(hl)                   ; Get the next character
0CAB                             ;     inc hl                      ; Point to next character
0CAB                             ;     cp " " + 1                  ; ignore whitespace
0CAB                             ;     jr c,blockLength1
0CAB                             ;     cp ")"
0CAB                             ;     jr z,blockLength4
0CAB                             ;     cp "}"
0CAB                             ;     jr z,blockLength4
0CAB                             ;     cp "]"
0CAB                             ;     jr z,blockLength4
0CAB                             ;     cp "("
0CAB                             ;     jr z,blockLength2
0CAB                             ;     cp "{"
0CAB                             ;     jr z,blockLength2
0CAB                             ;     cp "["
0CAB                             ;     jr z,blockLength2
0CAB                             ;     cp "'"
0CAB                             ;     jr z,blockLength3
0CAB                             ;     cp "`"
0CAB                             ;     jr z,blockLength3
0CAB                             ;     cp DQUOTE
0CAB                             ;     jr z,blockLength3
0CAB                             ;     jr blockLength1
0CAB                             ; blockLength2:
0CAB                             ;     inc d
0CAB                             ;     jr blockLength1
0CAB                             ; blockLength4:
0CAB                             ;     dec d
0CAB                             ;     jr nz, blockLength1         ; get the next element
0CAB                             ; blockLength3:
0CAB                             ;     ld a,$80
0CAB                             ;     xor d
0CAB                             ;     ld d,a
0CAB                             ;     jr nz, blockLength1
0CAB                             ;     pop hl                      ; hl = block*
0CAB                             ;     or a
0CAB                             ;     sbc hl,de
0CAB                             ;     push hl
0CAB                             ;     jp (ix)
0CAB                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CAB                             ; \a start of stack \#3 depth \b base \$ prompt
0CAB                             ; DW dStack               ; a vS0 start of datastack			
0CAB                             ; DW FALSE                ; b vBase16
0CAB                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CAB                             ; DW 0                    ; d
0CAB                             ; DW 65                   ; e vLastDef "A" last command u defined
0CAB                             ; DW 0                    ; f
0CAB                             ; DW page6                ; g 256 bytes limits
0CAB                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CAB                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                             ; call printStr
0D00                             ; .cstr "Done!"
0D00                             ; HALT
0D00                             ; 
0D00                          ;*Macro unroll:  test "/f", false
0D00   31 00 49               LD   SP,STACK   
0D03   CD 88 0B               CALL   coldInit   
0D06   CD E6 47               CALL   execStr   
0D09   2F 66 00               .CSTR   "/f"   
0D0C   CD C8 0A               CALL   flushBuffer   
0D0F                          ;*Macro unroll:  expect "/f",false
0D0F   E1                     POP   HL   
0D10   E5                     PUSH   HL   
0D11   11 00 00               LD   DE,false   
0D14   B7                     OR   A   
0D15   ED 52                  SBC   HL,DE   
0D17   7D                     LD   A,L   
0D18   B4                     OR   H   
0D19   CA 76 0D               JP   Z,expectM_0_2657S46   
0D1C   CD 40 0B               CALL   printStr   
0D1F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D28   CD 40 0B               CALL   printStr   
0D2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D3A   21 00 00               LD   hl,false   
0D3D   E5                     PUSH   hl   
0D3E   E5                     PUSH   hl   
0D3F   CD 5F 0C               CALL   run   
0D42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0D4A   CD C8 0A               CALL   flushBuffer   
0D4D   CD 40 0B               CALL   printStr   
0D50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D5D   E1                     POP   hl   
0D5E   E5                     PUSH   hl   
0D5F   E5                     PUSH   hl   
0D60   CD 5F 0C               CALL   run   
0D63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0D72   CD C8 0A               CALL   flushBuffer   
0D75   76                     HALT      
0D76                EXPECTM_0_2657S46:      
0D76   E1                     POP   HL   
0D77                          ;*Macro unroll:  test "/t", true
0D77   31 00 49               LD   SP,STACK   
0D7A   CD 88 0B               CALL   coldInit   
0D7D   CD E6 47               CALL   execStr   
0D80   2F 74 00               .CSTR   "/t"   
0D83   CD C8 0A               CALL   flushBuffer   
0D86                          ;*Macro unroll:  expect "/t",true
0D86   E1                     POP   HL   
0D87   E5                     PUSH   HL   
0D88   11 FF FF               LD   DE,true   
0D8B   B7                     OR   A   
0D8C   ED 52                  SBC   HL,DE   
0D8E   7D                     LD   A,L   
0D8F   B4                     OR   H   
0D90   CA ED 0D               JP   Z,expectM_0_2658S46   
0D93   CD 40 0B               CALL   printStr   
0D96   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0D9F   CD 40 0B               CALL   printStr   
0DA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DB1   21 FF FF               LD   hl,true   
0DB4   E5                     PUSH   hl   
0DB5   E5                     PUSH   hl   
0DB6   CD 5F 0C               CALL   run   
0DB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0DC1   CD C8 0A               CALL   flushBuffer   
0DC4   CD 40 0B               CALL   printStr   
0DC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DD4   E1                     POP   hl   
0DD5   E5                     PUSH   hl   
0DD6   E5                     PUSH   hl   
0DD7   CD 5F 0C               CALL   run   
0DDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0DE9   CD C8 0A               CALL   flushBuffer   
0DEC   76                     HALT      
0DED                EXPECTM_0_2658S46:      
0DED   E1                     POP   HL   
0DEE                          ;*Macro unroll:  test "1", 1
0DEE   31 00 49               LD   SP,STACK   
0DF1   CD 88 0B               CALL   coldInit   
0DF4   CD E6 47               CALL   execStr   
0DF7   31 00                  .CSTR   "1"   
0DF9   CD C8 0A               CALL   flushBuffer   
0DFC                          ;*Macro unroll:  expect "1",1
0DFC   E1                     POP   HL   
0DFD   E5                     PUSH   HL   
0DFE   11 01 00               LD   DE,1   
0E01   B7                     OR   A   
0E02   ED 52                  SBC   HL,DE   
0E04   7D                     LD   A,L   
0E05   B4                     OR   H   
0E06   CA 62 0E               JP   Z,expectM_0_2659S46   
0E09   CD 40 0B               CALL   printStr   
0E0C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E14   CD 40 0B               CALL   printStr   
0E17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E26   21 01 00               LD   hl,1   
0E29   E5                     PUSH   hl   
0E2A   E5                     PUSH   hl   
0E2B   CD 5F 0C               CALL   run   
0E2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E36   CD C8 0A               CALL   flushBuffer   
0E39   CD 40 0B               CALL   printStr   
0E3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E49   E1                     POP   hl   
0E4A   E5                     PUSH   hl   
0E4B   E5                     PUSH   hl   
0E4C   CD 5F 0C               CALL   run   
0E4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E5E   CD C8 0A               CALL   flushBuffer   
0E61   76                     HALT      
0E62                EXPECTM_0_2659S46:      
0E62   E1                     POP   HL   
0E63                          ;*Macro unroll:  test "2", 2
0E63   31 00 49               LD   SP,STACK   
0E66   CD 88 0B               CALL   coldInit   
0E69   CD E6 47               CALL   execStr   
0E6C   32 00                  .CSTR   "2"   
0E6E   CD C8 0A               CALL   flushBuffer   
0E71                          ;*Macro unroll:  expect "2",2
0E71   E1                     POP   HL   
0E72   E5                     PUSH   HL   
0E73   11 02 00               LD   DE,2   
0E76   B7                     OR   A   
0E77   ED 52                  SBC   HL,DE   
0E79   7D                     LD   A,L   
0E7A   B4                     OR   H   
0E7B   CA D7 0E               JP   Z,expectM_0_2660S46   
0E7E   CD 40 0B               CALL   printStr   
0E81   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0E89   CD 40 0B               CALL   printStr   
0E8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E9B   21 02 00               LD   hl,2   
0E9E   E5                     PUSH   hl   
0E9F   E5                     PUSH   hl   
0EA0   CD 5F 0C               CALL   run   
0EA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EAB   CD C8 0A               CALL   flushBuffer   
0EAE   CD 40 0B               CALL   printStr   
0EB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EBE   E1                     POP   hl   
0EBF   E5                     PUSH   hl   
0EC0   E5                     PUSH   hl   
0EC1   CD 5F 0C               CALL   run   
0EC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0ED3   CD C8 0A               CALL   flushBuffer   
0ED6   76                     HALT      
0ED7                EXPECTM_0_2660S46:      
0ED7   E1                     POP   HL   
0ED8                          ;*Macro unroll:  test "1", 1
0ED8   31 00 49               LD   SP,STACK   
0EDB   CD 88 0B               CALL   coldInit   
0EDE   CD E6 47               CALL   execStr   
0EE1   31 00                  .CSTR   "1"   
0EE3   CD C8 0A               CALL   flushBuffer   
0EE6                          ;*Macro unroll:  expect "1",1
0EE6   E1                     POP   HL   
0EE7   E5                     PUSH   HL   
0EE8   11 01 00               LD   DE,1   
0EEB   B7                     OR   A   
0EEC   ED 52                  SBC   HL,DE   
0EEE   7D                     LD   A,L   
0EEF   B4                     OR   H   
0EF0   CA 4C 0F               JP   Z,expectM_0_2661S46   
0EF3   CD 40 0B               CALL   printStr   
0EF6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0EFE   CD 40 0B               CALL   printStr   
0F01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F10   21 01 00               LD   hl,1   
0F13   E5                     PUSH   hl   
0F14   E5                     PUSH   hl   
0F15   CD 5F 0C               CALL   run   
0F18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F20   CD C8 0A               CALL   flushBuffer   
0F23   CD 40 0B               CALL   printStr   
0F26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F33   E1                     POP   hl   
0F34   E5                     PUSH   hl   
0F35   E5                     PUSH   hl   
0F36   CD 5F 0C               CALL   run   
0F39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F48   CD C8 0A               CALL   flushBuffer   
0F4B   76                     HALT      
0F4C                EXPECTM_0_2661S46:      
0F4C   E1                     POP   HL   
0F4D                          ;*Macro unroll:  test "0", 0
0F4D   31 00 49               LD   SP,STACK   
0F50   CD 88 0B               CALL   coldInit   
0F53   CD E6 47               CALL   execStr   
0F56   30 00                  .CSTR   "0"   
0F58   CD C8 0A               CALL   flushBuffer   
0F5B                          ;*Macro unroll:  expect "0",0
0F5B   E1                     POP   HL   
0F5C   E5                     PUSH   HL   
0F5D   11 00 00               LD   DE,0   
0F60   B7                     OR   A   
0F61   ED 52                  SBC   HL,DE   
0F63   7D                     LD   A,L   
0F64   B4                     OR   H   
0F65   CA C1 0F               JP   Z,expectM_0_2662S46   
0F68   CD 40 0B               CALL   printStr   
0F6B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0F73   CD 40 0B               CALL   printStr   
0F76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F85   21 00 00               LD   hl,0   
0F88   E5                     PUSH   hl   
0F89   E5                     PUSH   hl   
0F8A   CD 5F 0C               CALL   run   
0F8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F95   CD C8 0A               CALL   flushBuffer   
0F98   CD 40 0B               CALL   printStr   
0F9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FA8   E1                     POP   hl   
0FA9   E5                     PUSH   hl   
0FAA   E5                     PUSH   hl   
0FAB   CD 5F 0C               CALL   run   
0FAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FBD   CD C8 0A               CALL   flushBuffer   
0FC0   76                     HALT      
0FC1                EXPECTM_0_2662S46:      
0FC1   E1                     POP   HL   
0FC2                          ;*Macro unroll:  test "10", 10
0FC2   31 00 49               LD   SP,STACK   
0FC5   CD 88 0B               CALL   coldInit   
0FC8   CD E6 47               CALL   execStr   
0FCB   31 30 00               .CSTR   "10"   
0FCE   CD C8 0A               CALL   flushBuffer   
0FD1                          ;*Macro unroll:  expect "10",10
0FD1   E1                     POP   HL   
0FD2   E5                     PUSH   HL   
0FD3   11 0A 00               LD   DE,10   
0FD6   B7                     OR   A   
0FD7   ED 52                  SBC   HL,DE   
0FD9   7D                     LD   A,L   
0FDA   B4                     OR   H   
0FDB   CA 38 10               JP   Z,expectM_0_2663S46   
0FDE   CD 40 0B               CALL   printStr   
0FE1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0FEA   CD 40 0B               CALL   printStr   
0FED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FFC   21 0A 00               LD   hl,10   
0FFF   E5                     PUSH   hl   
1000   E5                     PUSH   hl   
1001   CD 5F 0C               CALL   run   
1004   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
100C   CD C8 0A               CALL   flushBuffer   
100F   CD 40 0B               CALL   printStr   
1012   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
101F   E1                     POP   hl   
1020   E5                     PUSH   hl   
1021   E5                     PUSH   hl   
1022   CD 5F 0C               CALL   run   
1025   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1034   CD C8 0A               CALL   flushBuffer   
1037   76                     HALT      
1038                EXPECTM_0_2663S46:      
1038   E1                     POP   HL   
1039                          ;*Macro unroll:  test "123", 123
1039   31 00 49               LD   SP,STACK   
103C   CD 88 0B               CALL   coldInit   
103F   CD E6 47               CALL   execStr   
1042   31 32 33 00            .CSTR   "123"   
1046   CD C8 0A               CALL   flushBuffer   
1049                          ;*Macro unroll:  expect "123",123
1049   E1                     POP   HL   
104A   E5                     PUSH   HL   
104B   11 7B 00               LD   DE,123   
104E   B7                     OR   A   
104F   ED 52                  SBC   HL,DE   
1051   7D                     LD   A,L   
1052   B4                     OR   H   
1053   CA B1 10               JP   Z,expectM_0_2664S46   
1056   CD 40 0B               CALL   printStr   
1059   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1063   CD 40 0B               CALL   printStr   
1066   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1075   21 7B 00               LD   hl,123   
1078   E5                     PUSH   hl   
1079   E5                     PUSH   hl   
107A   CD 5F 0C               CALL   run   
107D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1085   CD C8 0A               CALL   flushBuffer   
1088   CD 40 0B               CALL   printStr   
108B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1098   E1                     POP   hl   
1099   E5                     PUSH   hl   
109A   E5                     PUSH   hl   
109B   CD 5F 0C               CALL   run   
109E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10AD   CD C8 0A               CALL   flushBuffer   
10B0   76                     HALT      
10B1                EXPECTM_0_2664S46:      
10B1   E1                     POP   HL   
10B2                          ;*Macro unroll:  test "-1",-1
10B2   31 00 49               LD   SP,STACK   
10B5   CD 88 0B               CALL   coldInit   
10B8   CD E6 47               CALL   execStr   
10BB   2D 31 00               .CSTR   "-1"   
10BE   CD C8 0A               CALL   flushBuffer   
10C1                          ;*Macro unroll:  expect "-1",-1
10C1   E1                     POP   HL   
10C2   E5                     PUSH   HL   
10C3   11 FF FF               LD   DE,-1   
10C6   B7                     OR   A   
10C7   ED 52                  SBC   HL,DE   
10C9   7D                     LD   A,L   
10CA   B4                     OR   H   
10CB   CA 28 11               JP   Z,expectM_0_2665S46   
10CE   CD 40 0B               CALL   printStr   
10D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
10DA   CD 40 0B               CALL   printStr   
10DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10EC   21 FF FF               LD   hl,-1   
10EF   E5                     PUSH   hl   
10F0   E5                     PUSH   hl   
10F1   CD 5F 0C               CALL   run   
10F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10FC   CD C8 0A               CALL   flushBuffer   
10FF   CD 40 0B               CALL   printStr   
1102   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
110F   E1                     POP   hl   
1110   E5                     PUSH   hl   
1111   E5                     PUSH   hl   
1112   CD 5F 0C               CALL   run   
1115   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1124   CD C8 0A               CALL   flushBuffer   
1127   76                     HALT      
1128                EXPECTM_0_2665S46:      
1128   E1                     POP   HL   
1129                          ;*Macro unroll:  test "''", 0
1129   31 00 49               LD   SP,STACK   
112C   CD 88 0B               CALL   coldInit   
112F   CD E6 47               CALL   execStr   
1132   27 27 00               .CSTR   "''"   
1135   CD C8 0A               CALL   flushBuffer   
1138                          ;*Macro unroll:  expect "''",0
1138   E1                     POP   HL   
1139   E5                     PUSH   HL   
113A   11 00 00               LD   DE,0   
113D   B7                     OR   A   
113E   ED 52                  SBC   HL,DE   
1140   7D                     LD   A,L   
1141   B4                     OR   H   
1142   CA 9F 11               JP   Z,expectM_0_2666S46   
1145   CD 40 0B               CALL   printStr   
1148   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1151   CD 40 0B               CALL   printStr   
1154   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1163   21 00 00               LD   hl,0   
1166   E5                     PUSH   hl   
1167   E5                     PUSH   hl   
1168   CD 5F 0C               CALL   run   
116B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1173   CD C8 0A               CALL   flushBuffer   
1176   CD 40 0B               CALL   printStr   
1179   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1186   E1                     POP   hl   
1187   E5                     PUSH   hl   
1188   E5                     PUSH   hl   
1189   CD 5F 0C               CALL   run   
118C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
119B   CD C8 0A               CALL   flushBuffer   
119E   76                     HALT      
119F                EXPECTM_0_2666S46:      
119F   E1                     POP   HL   
11A0                          ;*Macro unroll:  test "'a'", $61
11A0   31 00 49               LD   SP,STACK   
11A3   CD 88 0B               CALL   coldInit   
11A6   CD E6 47               CALL   execStr   
11A9   27 61 27 00            .CSTR   "'a'"   
11AD   CD C8 0A               CALL   flushBuffer   
11B0                          ;*Macro unroll:  expect "'a'",$61
11B0   E1                     POP   HL   
11B1   E5                     PUSH   HL   
11B2   11 61 00               LD   DE,$61   
11B5   B7                     OR   A   
11B6   ED 52                  SBC   HL,DE   
11B8   7D                     LD   A,L   
11B9   B4                     OR   H   
11BA   CA 18 12               JP   Z,expectM_0_2667S46   
11BD   CD 40 0B               CALL   printStr   
11C0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
11CA   CD 40 0B               CALL   printStr   
11CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11DC   21 61 00               LD   hl,$61   
11DF   E5                     PUSH   hl   
11E0   E5                     PUSH   hl   
11E1   CD 5F 0C               CALL   run   
11E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11EC   CD C8 0A               CALL   flushBuffer   
11EF   CD 40 0B               CALL   printStr   
11F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FF   E1                     POP   hl   
1200   E5                     PUSH   hl   
1201   E5                     PUSH   hl   
1202   CD 5F 0C               CALL   run   
1205   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1214   CD C8 0A               CALL   flushBuffer   
1217   76                     HALT      
1218                EXPECTM_0_2667S46:      
1218   E1                     POP   HL   
1219                          ;*Macro unroll:  test "'\\''", $27
1219   31 00 49               LD   SP,STACK   
121C   CD 88 0B               CALL   coldInit   
121F   CD E6 47               CALL   execStr   
1222   27 5C 27 27 00         .CSTR   "'\\''"   
1227   CD C8 0A               CALL   flushBuffer   
122A                          ;*Macro unroll:  expect "'\\''",$27
122A   E1                     POP   HL   
122B   E5                     PUSH   HL   
122C   11 27 00               LD   DE,$27   
122F   B7                     OR   A   
1230   ED 52                  SBC   HL,DE   
1232   7D                     LD   A,L   
1233   B4                     OR   H   
1234   CA 93 12               JP   Z,expectM_0_2668S46   
1237   CD 40 0B               CALL   printStr   
123A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1245   CD 40 0B               CALL   printStr   
1248   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1257   21 27 00               LD   hl,$27   
125A   E5                     PUSH   hl   
125B   E5                     PUSH   hl   
125C   CD 5F 0C               CALL   run   
125F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1267   CD C8 0A               CALL   flushBuffer   
126A   CD 40 0B               CALL   printStr   
126D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
127A   E1                     POP   hl   
127B   E5                     PUSH   hl   
127C   E5                     PUSH   hl   
127D   CD 5F 0C               CALL   run   
1280   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
128F   CD C8 0A               CALL   flushBuffer   
1292   76                     HALT      
1293                EXPECTM_0_2668S46:      
1293   E1                     POP   HL   
1294                          ;*Macro unroll:  test "#10", $10
1294   31 00 49               LD   SP,STACK   
1297   CD 88 0B               CALL   coldInit   
129A   CD E6 47               CALL   execStr   
129D   23 31 30 00            .CSTR   "#10"   
12A1   CD C8 0A               CALL   flushBuffer   
12A4                          ;*Macro unroll:  expect "#10",$10
12A4   E1                     POP   HL   
12A5   E5                     PUSH   HL   
12A6   11 10 00               LD   DE,$10   
12A9   B7                     OR   A   
12AA   ED 52                  SBC   HL,DE   
12AC   7D                     LD   A,L   
12AD   B4                     OR   H   
12AE   CA 0C 13               JP   Z,expectM_0_2669S46   
12B1   CD 40 0B               CALL   printStr   
12B4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
12BE   CD 40 0B               CALL   printStr   
12C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D0   21 10 00               LD   hl,$10   
12D3   E5                     PUSH   hl   
12D4   E5                     PUSH   hl   
12D5   CD 5F 0C               CALL   run   
12D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12E0   CD C8 0A               CALL   flushBuffer   
12E3   CD 40 0B               CALL   printStr   
12E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F3   E1                     POP   hl   
12F4   E5                     PUSH   hl   
12F5   E5                     PUSH   hl   
12F6   CD 5F 0C               CALL   run   
12F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1308   CD C8 0A               CALL   flushBuffer   
130B   76                     HALT      
130C                EXPECTM_0_2669S46:      
130C   E1                     POP   HL   
130D                          ;*Macro unroll:  test "#FF", $FF
130D   31 00 49               LD   SP,STACK   
1310   CD 88 0B               CALL   coldInit   
1313   CD E6 47               CALL   execStr   
1316   23 46 46 00            .CSTR   "#FF"   
131A   CD C8 0A               CALL   flushBuffer   
131D                          ;*Macro unroll:  expect "#FF",$FF
131D   E1                     POP   HL   
131E   E5                     PUSH   HL   
131F   11 FF 00               LD   DE,$FF   
1322   B7                     OR   A   
1323   ED 52                  SBC   HL,DE   
1325   7D                     LD   A,L   
1326   B4                     OR   H   
1327   CA 85 13               JP   Z,expectM_0_2670S46   
132A   CD 40 0B               CALL   printStr   
132D   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1337   CD 40 0B               CALL   printStr   
133A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1349   21 FF 00               LD   hl,$FF   
134C   E5                     PUSH   hl   
134D   E5                     PUSH   hl   
134E   CD 5F 0C               CALL   run   
1351   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1359   CD C8 0A               CALL   flushBuffer   
135C   CD 40 0B               CALL   printStr   
135F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
136C   E1                     POP   hl   
136D   E5                     PUSH   hl   
136E   E5                     PUSH   hl   
136F   CD 5F 0C               CALL   run   
1372   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1381   CD C8 0A               CALL   flushBuffer   
1384   76                     HALT      
1385                EXPECTM_0_2670S46:      
1385   E1                     POP   HL   
1386                          ;*Macro unroll:  test "-1 2 +",1
1386   31 00 49               LD   SP,STACK   
1389   CD 88 0B               CALL   coldInit   
138C   CD E6 47               CALL   execStr   
138F   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1396   CD C8 0A               CALL   flushBuffer   
1399                          ;*Macro unroll:  expect "-1 2 +",1
1399   E1                     POP   HL   
139A   E5                     PUSH   HL   
139B   11 01 00               LD   DE,1   
139E   B7                     OR   A   
139F   ED 52                  SBC   HL,DE   
13A1   7D                     LD   A,L   
13A2   B4                     OR   H   
13A3   CA 04 14               JP   Z,expectM_0_2671S46   
13A6   CD 40 0B               CALL   printStr   
13A9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
13B6   CD 40 0B               CALL   printStr   
13B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C8   21 01 00               LD   hl,1   
13CB   E5                     PUSH   hl   
13CC   E5                     PUSH   hl   
13CD   CD 5F 0C               CALL   run   
13D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D8   CD C8 0A               CALL   flushBuffer   
13DB   CD 40 0B               CALL   printStr   
13DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EB   E1                     POP   hl   
13EC   E5                     PUSH   hl   
13ED   E5                     PUSH   hl   
13EE   CD 5F 0C               CALL   run   
13F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1400   CD C8 0A               CALL   flushBuffer   
1403   76                     HALT      
1404                EXPECTM_0_2671S46:      
1404   E1                     POP   HL   
1405                          ;*Macro unroll:  test "-1 1 +",0
1405   31 00 49               LD   SP,STACK   
1408   CD 88 0B               CALL   coldInit   
140B   CD E6 47               CALL   execStr   
140E   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1415   CD C8 0A               CALL   flushBuffer   
1418                          ;*Macro unroll:  expect "-1 1 +",0
1418   E1                     POP   HL   
1419   E5                     PUSH   HL   
141A   11 00 00               LD   DE,0   
141D   B7                     OR   A   
141E   ED 52                  SBC   HL,DE   
1420   7D                     LD   A,L   
1421   B4                     OR   H   
1422   CA 83 14               JP   Z,expectM_0_2672S46   
1425   CD 40 0B               CALL   printStr   
1428   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1435   CD 40 0B               CALL   printStr   
1438   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1447   21 00 00               LD   hl,0   
144A   E5                     PUSH   hl   
144B   E5                     PUSH   hl   
144C   CD 5F 0C               CALL   run   
144F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1457   CD C8 0A               CALL   flushBuffer   
145A   CD 40 0B               CALL   printStr   
145D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146A   E1                     POP   hl   
146B   E5                     PUSH   hl   
146C   E5                     PUSH   hl   
146D   CD 5F 0C               CALL   run   
1470   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
147F   CD C8 0A               CALL   flushBuffer   
1482   76                     HALT      
1483                EXPECTM_0_2672S46:      
1483   E1                     POP   HL   
1484                          ;*Macro unroll:  test "1 2 +", 3
1484   31 00 49               LD   SP,STACK   
1487   CD 88 0B               CALL   coldInit   
148A   CD E6 47               CALL   execStr   
148D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1493   CD C8 0A               CALL   flushBuffer   
1496                          ;*Macro unroll:  expect "1 2 +",3
1496   E1                     POP   HL   
1497   E5                     PUSH   HL   
1498   11 03 00               LD   DE,3   
149B   B7                     OR   A   
149C   ED 52                  SBC   HL,DE   
149E   7D                     LD   A,L   
149F   B4                     OR   H   
14A0   CA 00 15               JP   Z,expectM_0_2673S46   
14A3   CD 40 0B               CALL   printStr   
14A6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
14B2   CD 40 0B               CALL   printStr   
14B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C4   21 03 00               LD   hl,3   
14C7   E5                     PUSH   hl   
14C8   E5                     PUSH   hl   
14C9   CD 5F 0C               CALL   run   
14CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D4   CD C8 0A               CALL   flushBuffer   
14D7   CD 40 0B               CALL   printStr   
14DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E7   E1                     POP   hl   
14E8   E5                     PUSH   hl   
14E9   E5                     PUSH   hl   
14EA   CD 5F 0C               CALL   run   
14ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14FC   CD C8 0A               CALL   flushBuffer   
14FF   76                     HALT      
1500                EXPECTM_0_2673S46:      
1500   E1                     POP   HL   
1501                          ;*Macro unroll:  test "4 1 2 +", 3
1501   31 00 49               LD   SP,STACK   
1504   CD 88 0B               CALL   coldInit   
1507   CD E6 47               CALL   execStr   
150A   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1512   CD C8 0A               CALL   flushBuffer   
1515                          ;*Macro unroll:  expect "4 1 2 +",3
1515   E1                     POP   HL   
1516   E5                     PUSH   HL   
1517   11 03 00               LD   DE,3   
151A   B7                     OR   A   
151B   ED 52                  SBC   HL,DE   
151D   7D                     LD   A,L   
151E   B4                     OR   H   
151F   CA 81 15               JP   Z,expectM_0_2674S46   
1522   CD 40 0B               CALL   printStr   
1525   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1533   CD 40 0B               CALL   printStr   
1536   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1545   21 03 00               LD   hl,3   
1548   E5                     PUSH   hl   
1549   E5                     PUSH   hl   
154A   CD 5F 0C               CALL   run   
154D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1555   CD C8 0A               CALL   flushBuffer   
1558   CD 40 0B               CALL   printStr   
155B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1568   E1                     POP   hl   
1569   E5                     PUSH   hl   
156A   E5                     PUSH   hl   
156B   CD 5F 0C               CALL   run   
156E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157D   CD C8 0A               CALL   flushBuffer   
1580   76                     HALT      
1581                EXPECTM_0_2674S46:      
1581   E1                     POP   HL   
1582                          ;*Macro unroll:  test "123 456 +", 123+456
1582   31 00 49               LD   SP,STACK   
1585   CD 88 0B               CALL   coldInit   
1588   CD E6 47               CALL   execStr   
158B   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1595   CD C8 0A               CALL   flushBuffer   
1598                          ;*Macro unroll:  expect "123 456 +",123+456
1598   E1                     POP   HL   
1599   E5                     PUSH   HL   
159A   11 43 02               LD   DE,123+456   
159D   B7                     OR   A   
159E   ED 52                  SBC   HL,DE   
15A0   7D                     LD   A,L   
15A1   B4                     OR   H   
15A2   CA 06 16               JP   Z,expectM_0_2675S46   
15A5   CD 40 0B               CALL   printStr   
15A8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
15B8   CD 40 0B               CALL   printStr   
15BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15CA   21 43 02               LD   hl,123+456   
15CD   E5                     PUSH   hl   
15CE   E5                     PUSH   hl   
15CF   CD 5F 0C               CALL   run   
15D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15DA   CD C8 0A               CALL   flushBuffer   
15DD   CD 40 0B               CALL   printStr   
15E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15ED   E1                     POP   hl   
15EE   E5                     PUSH   hl   
15EF   E5                     PUSH   hl   
15F0   CD 5F 0C               CALL   run   
15F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1602   CD C8 0A               CALL   flushBuffer   
1605   76                     HALT      
1606                EXPECTM_0_2675S46:      
1606   E1                     POP   HL   
1607                          ;*Macro unroll:  test "64 128 +", 64+128
1607   31 00 49               LD   SP,STACK   
160A   CD 88 0B               CALL   coldInit   
160D   CD E6 47               CALL   execStr   
1610   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1619   CD C8 0A               CALL   flushBuffer   
161C                          ;*Macro unroll:  expect "64 128 +",64+128
161C   E1                     POP   HL   
161D   E5                     PUSH   HL   
161E   11 C0 00               LD   DE,64+128   
1621   B7                     OR   A   
1622   ED 52                  SBC   HL,DE   
1624   7D                     LD   A,L   
1625   B4                     OR   H   
1626   CA 89 16               JP   Z,expectM_0_2676S46   
1629   CD 40 0B               CALL   printStr   
162C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
163B   CD 40 0B               CALL   printStr   
163E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164D   21 C0 00               LD   hl,64+128   
1650   E5                     PUSH   hl   
1651   E5                     PUSH   hl   
1652   CD 5F 0C               CALL   run   
1655   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
165D   CD C8 0A               CALL   flushBuffer   
1660   CD 40 0B               CALL   printStr   
1663   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1670   E1                     POP   hl   
1671   E5                     PUSH   hl   
1672   E5                     PUSH   hl   
1673   CD 5F 0C               CALL   run   
1676   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1685   CD C8 0A               CALL   flushBuffer   
1688   76                     HALT      
1689                EXPECTM_0_2676S46:      
1689   E1                     POP   HL   
168A                          ;*Macro unroll:  test "1 2 +", 3
168A   31 00 49               LD   SP,STACK   
168D   CD 88 0B               CALL   coldInit   
1690   CD E6 47               CALL   execStr   
1693   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1699   CD C8 0A               CALL   flushBuffer   
169C                          ;*Macro unroll:  expect "1 2 +",3
169C   E1                     POP   HL   
169D   E5                     PUSH   HL   
169E   11 03 00               LD   DE,3   
16A1   B7                     OR   A   
16A2   ED 52                  SBC   HL,DE   
16A4   7D                     LD   A,L   
16A5   B4                     OR   H   
16A6   CA 06 17               JP   Z,expectM_0_2677S46   
16A9   CD 40 0B               CALL   printStr   
16AC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16B8   CD 40 0B               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 03 00               LD   hl,3   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD 5F 0C               CALL   run   
16D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16DA   CD C8 0A               CALL   flushBuffer   
16DD   CD 40 0B               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD 5F 0C               CALL   run   
16F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1702   CD C8 0A               CALL   flushBuffer   
1705   76                     HALT      
1706                EXPECTM_0_2677S46:      
1706   E1                     POP   HL   
1707                          ;*Macro unroll:  test "1a= a++ a",2
1707   31 00 49               LD   SP,STACK   
170A   CD 88 0B               CALL   coldInit   
170D   CD E6 47               CALL   execStr   
1710   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
171A   CD C8 0A               CALL   flushBuffer   
171D                          ;*Macro unroll:  expect "1a= a++ a",2
171D   E1                     POP   HL   
171E   E5                     PUSH   HL   
171F   11 02 00               LD   DE,2   
1722   B7                     OR   A   
1723   ED 52                  SBC   HL,DE   
1725   7D                     LD   A,L   
1726   B4                     OR   H   
1727   CA 8B 17               JP   Z,expectM_0_2678S46   
172A   CD 40 0B               CALL   printStr   
172D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
173D   CD 40 0B               CALL   printStr   
1740   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174F   21 02 00               LD   hl,2   
1752   E5                     PUSH   hl   
1753   E5                     PUSH   hl   
1754   CD 5F 0C               CALL   run   
1757   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175F   CD C8 0A               CALL   flushBuffer   
1762   CD 40 0B               CALL   printStr   
1765   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1772   E1                     POP   hl   
1773   E5                     PUSH   hl   
1774   E5                     PUSH   hl   
1775   CD 5F 0C               CALL   run   
1778   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1787   CD C8 0A               CALL   flushBuffer   
178A   76                     HALT      
178B                EXPECTM_0_2678S46:      
178B   E1                     POP   HL   
178C                          ;*Macro unroll:  test "-1 -1 -",0
178C   31 00 49               LD   SP,STACK   
178F   CD 88 0B               CALL   coldInit   
1792   CD E6 47               CALL   execStr   
1795   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
179D   CD C8 0A               CALL   flushBuffer   
17A0                          ;*Macro unroll:  expect "-1 -1 -",0
17A0   E1                     POP   HL   
17A1   E5                     PUSH   HL   
17A2   11 00 00               LD   DE,0   
17A5   B7                     OR   A   
17A6   ED 52                  SBC   HL,DE   
17A8   7D                     LD   A,L   
17A9   B4                     OR   H   
17AA   CA 0C 18               JP   Z,expectM_0_2679S46   
17AD   CD 40 0B               CALL   printStr   
17B0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
17BE   CD 40 0B               CALL   printStr   
17C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D0   21 00 00               LD   hl,0   
17D3   E5                     PUSH   hl   
17D4   E5                     PUSH   hl   
17D5   CD 5F 0C               CALL   run   
17D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17E0   CD C8 0A               CALL   flushBuffer   
17E3   CD 40 0B               CALL   printStr   
17E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F3   E1                     POP   hl   
17F4   E5                     PUSH   hl   
17F5   E5                     PUSH   hl   
17F6   CD 5F 0C               CALL   run   
17F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1808   CD C8 0A               CALL   flushBuffer   
180B   76                     HALT      
180C                EXPECTM_0_2679S46:      
180C   E1                     POP   HL   
180D                          ;*Macro unroll:  test "5 3 -", 2
180D   31 00 49               LD   SP,STACK   
1810   CD 88 0B               CALL   coldInit   
1813   CD E6 47               CALL   execStr   
1816   35 20 33 20 2D 00      .CSTR   "5 3 -"   
181C   CD C8 0A               CALL   flushBuffer   
181F                          ;*Macro unroll:  expect "5 3 -",2
181F   E1                     POP   HL   
1820   E5                     PUSH   HL   
1821   11 02 00               LD   DE,2   
1824   B7                     OR   A   
1825   ED 52                  SBC   HL,DE   
1827   7D                     LD   A,L   
1828   B4                     OR   H   
1829   CA 89 18               JP   Z,expectM_0_2680S46   
182C   CD 40 0B               CALL   printStr   
182F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
183B   CD 40 0B               CALL   printStr   
183E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184D   21 02 00               LD   hl,2   
1850   E5                     PUSH   hl   
1851   E5                     PUSH   hl   
1852   CD 5F 0C               CALL   run   
1855   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
185D   CD C8 0A               CALL   flushBuffer   
1860   CD 40 0B               CALL   printStr   
1863   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1870   E1                     POP   hl   
1871   E5                     PUSH   hl   
1872   E5                     PUSH   hl   
1873   CD 5F 0C               CALL   run   
1876   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1885   CD C8 0A               CALL   flushBuffer   
1888   76                     HALT      
1889                EXPECTM_0_2680S46:      
1889   E1                     POP   HL   
188A                          ;*Macro unroll:  test "2 1 -",1
188A   31 00 49               LD   SP,STACK   
188D   CD 88 0B               CALL   coldInit   
1890   CD E6 47               CALL   execStr   
1893   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1899   CD C8 0A               CALL   flushBuffer   
189C                          ;*Macro unroll:  expect "2 1 -",1
189C   E1                     POP   HL   
189D   E5                     PUSH   HL   
189E   11 01 00               LD   DE,1   
18A1   B7                     OR   A   
18A2   ED 52                  SBC   HL,DE   
18A4   7D                     LD   A,L   
18A5   B4                     OR   H   
18A6   CA 06 19               JP   Z,expectM_0_2681S46   
18A9   CD 40 0B               CALL   printStr   
18AC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
18B8   CD 40 0B               CALL   printStr   
18BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18CA   21 01 00               LD   hl,1   
18CD   E5                     PUSH   hl   
18CE   E5                     PUSH   hl   
18CF   CD 5F 0C               CALL   run   
18D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18DA   CD C8 0A               CALL   flushBuffer   
18DD   CD 40 0B               CALL   printStr   
18E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18ED   E1                     POP   hl   
18EE   E5                     PUSH   hl   
18EF   E5                     PUSH   hl   
18F0   CD 5F 0C               CALL   run   
18F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1902   CD C8 0A               CALL   flushBuffer   
1905   76                     HALT      
1906                EXPECTM_0_2681S46:      
1906   E1                     POP   HL   
1907                          ;*Macro unroll:  test "3a= a-- a",2
1907   31 00 49               LD   SP,STACK   
190A   CD 88 0B               CALL   coldInit   
190D   CD E6 47               CALL   execStr   
1910   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
191A   CD C8 0A               CALL   flushBuffer   
191D                          ;*Macro unroll:  expect "3a= a-- a",2
191D   E1                     POP   HL   
191E   E5                     PUSH   HL   
191F   11 02 00               LD   DE,2   
1922   B7                     OR   A   
1923   ED 52                  SBC   HL,DE   
1925   7D                     LD   A,L   
1926   B4                     OR   H   
1927   CA 8B 19               JP   Z,expectM_0_2682S46   
192A   CD 40 0B               CALL   printStr   
192D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
193D   CD 40 0B               CALL   printStr   
1940   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194F   21 02 00               LD   hl,2   
1952   E5                     PUSH   hl   
1953   E5                     PUSH   hl   
1954   CD 5F 0C               CALL   run   
1957   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195F   CD C8 0A               CALL   flushBuffer   
1962   CD 40 0B               CALL   printStr   
1965   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1972   E1                     POP   hl   
1973   E5                     PUSH   hl   
1974   E5                     PUSH   hl   
1975   CD 5F 0C               CALL   run   
1978   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1987   CD C8 0A               CALL   flushBuffer   
198A   76                     HALT      
198B                EXPECTM_0_2682S46:      
198B   E1                     POP   HL   
198C                          ;*Macro unroll:  test "3 5 &", 1
198C   31 00 49               LD   SP,STACK   
198F   CD 88 0B               CALL   coldInit   
1992   CD E6 47               CALL   execStr   
1995   33 20 35 20 26 00      .CSTR   "3 5 &"   
199B   CD C8 0A               CALL   flushBuffer   
199E                          ;*Macro unroll:  expect "3 5 &",1
199E   E1                     POP   HL   
199F   E5                     PUSH   HL   
19A0   11 01 00               LD   DE,1   
19A3   B7                     OR   A   
19A4   ED 52                  SBC   HL,DE   
19A6   7D                     LD   A,L   
19A7   B4                     OR   H   
19A8   CA 08 1A               JP   Z,expectM_0_2683S46   
19AB   CD 40 0B               CALL   printStr   
19AE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
19BA   CD 40 0B               CALL   printStr   
19BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CC   21 01 00               LD   hl,1   
19CF   E5                     PUSH   hl   
19D0   E5                     PUSH   hl   
19D1   CD 5F 0C               CALL   run   
19D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19DC   CD C8 0A               CALL   flushBuffer   
19DF   CD 40 0B               CALL   printStr   
19E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19EF   E1                     POP   hl   
19F0   E5                     PUSH   hl   
19F1   E5                     PUSH   hl   
19F2   CD 5F 0C               CALL   run   
19F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A04   CD C8 0A               CALL   flushBuffer   
1A07   76                     HALT      
1A08                EXPECTM_0_2683S46:      
1A08   E1                     POP   HL   
1A09                          ;*Macro unroll:  test "3 5 |", 7
1A09   31 00 49               LD   SP,STACK   
1A0C   CD 88 0B               CALL   coldInit   
1A0F   CD E6 47               CALL   execStr   
1A12   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1A18   CD C8 0A               CALL   flushBuffer   
1A1B                          ;*Macro unroll:  expect "3 5 |",7
1A1B   E1                     POP   HL   
1A1C   E5                     PUSH   HL   
1A1D   11 07 00               LD   DE,7   
1A20   B7                     OR   A   
1A21   ED 52                  SBC   HL,DE   
1A23   7D                     LD   A,L   
1A24   B4                     OR   H   
1A25   CA 85 1A               JP   Z,expectM_0_2684S46   
1A28   CD 40 0B               CALL   printStr   
1A2B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1A37   CD 40 0B               CALL   printStr   
1A3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A49   21 07 00               LD   hl,7   
1A4C   E5                     PUSH   hl   
1A4D   E5                     PUSH   hl   
1A4E   CD 5F 0C               CALL   run   
1A51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A59   CD C8 0A               CALL   flushBuffer   
1A5C   CD 40 0B               CALL   printStr   
1A5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A6C   E1                     POP   hl   
1A6D   E5                     PUSH   hl   
1A6E   E5                     PUSH   hl   
1A6F   CD 5F 0C               CALL   run   
1A72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A81   CD C8 0A               CALL   flushBuffer   
1A84   76                     HALT      
1A85                EXPECTM_0_2684S46:      
1A85   E1                     POP   HL   
1A86                          ;*Macro unroll:  test "3 5 /x", 6
1A86   31 00 49               LD   SP,STACK   
1A89   CD 88 0B               CALL   coldInit   
1A8C   CD E6 47               CALL   execStr   
1A8F   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1A96   CD C8 0A               CALL   flushBuffer   
1A99                          ;*Macro unroll:  expect "3 5 /x",6
1A99   E1                     POP   HL   
1A9A   E5                     PUSH   HL   
1A9B   11 06 00               LD   DE,6   
1A9E   B7                     OR   A   
1A9F   ED 52                  SBC   HL,DE   
1AA1   7D                     LD   A,L   
1AA2   B4                     OR   H   
1AA3   CA 04 1B               JP   Z,expectM_0_2685S46   
1AA6   CD 40 0B               CALL   printStr   
1AA9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1AB6   CD 40 0B               CALL   printStr   
1AB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC8   21 06 00               LD   hl,6   
1ACB   E5                     PUSH   hl   
1ACC   E5                     PUSH   hl   
1ACD   CD 5F 0C               CALL   run   
1AD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AD8   CD C8 0A               CALL   flushBuffer   
1ADB   CD 40 0B               CALL   printStr   
1ADE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEB   E1                     POP   hl   
1AEC   E5                     PUSH   hl   
1AED   E5                     PUSH   hl   
1AEE   CD 5F 0C               CALL   run   
1AF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B00   CD C8 0A               CALL   flushBuffer   
1B03   76                     HALT      
1B04                EXPECTM_0_2685S46:      
1B04   E1                     POP   HL   
1B05                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B05   31 00 49               LD   SP,STACK   
1B08   CD 88 0B               CALL   coldInit   
1B0B   CD E6 47               CALL   execStr   
1B0E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1B1D   CD C8 0A               CALL   flushBuffer   
1B20                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1B20   E1                     POP   HL   
1B21   E5                     PUSH   HL   
1B22   11 06 00               LD   DE,6   
1B25   B7                     OR   A   
1B26   ED 52                  SBC   HL,DE   
1B28   7D                     LD   A,L   
1B29   B4                     OR   H   
1B2A   CA 93 1B               JP   Z,expectM_0_2686S46   
1B2D   CD 40 0B               CALL   printStr   
1B30   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1B45   CD 40 0B               CALL   printStr   
1B48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B57   21 06 00               LD   hl,6   
1B5A   E5                     PUSH   hl   
1B5B   E5                     PUSH   hl   
1B5C   CD 5F 0C               CALL   run   
1B5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B67   CD C8 0A               CALL   flushBuffer   
1B6A   CD 40 0B               CALL   printStr   
1B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7A   E1                     POP   hl   
1B7B   E5                     PUSH   hl   
1B7C   E5                     PUSH   hl   
1B7D   CD 5F 0C               CALL   run   
1B80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B8F   CD C8 0A               CALL   flushBuffer   
1B92   76                     HALT      
1B93                EXPECTM_0_2686S46:      
1B93   E1                     POP   HL   
1B94                          ;*Macro unroll:  test "2 3 *", 6
1B94   31 00 49               LD   SP,STACK   
1B97   CD 88 0B               CALL   coldInit   
1B9A   CD E6 47               CALL   execStr   
1B9D   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1BA3   CD C8 0A               CALL   flushBuffer   
1BA6                          ;*Macro unroll:  expect "2 3 *",6
1BA6   E1                     POP   HL   
1BA7   E5                     PUSH   HL   
1BA8   11 06 00               LD   DE,6   
1BAB   B7                     OR   A   
1BAC   ED 52                  SBC   HL,DE   
1BAE   7D                     LD   A,L   
1BAF   B4                     OR   H   
1BB0   CA 10 1C               JP   Z,expectM_0_2687S46   
1BB3   CD 40 0B               CALL   printStr   
1BB6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1BC2   CD 40 0B               CALL   printStr   
1BC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BD4   21 06 00               LD   hl,6   
1BD7   E5                     PUSH   hl   
1BD8   E5                     PUSH   hl   
1BD9   CD 5F 0C               CALL   run   
1BDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BE4   CD C8 0A               CALL   flushBuffer   
1BE7   CD 40 0B               CALL   printStr   
1BEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BF7   E1                     POP   hl   
1BF8   E5                     PUSH   hl   
1BF9   E5                     PUSH   hl   
1BFA   CD 5F 0C               CALL   run   
1BFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C0C   CD C8 0A               CALL   flushBuffer   
1C0F   76                     HALT      
1C10                EXPECTM_0_2687S46:      
1C10   E1                     POP   HL   
1C11                          ;*Macro unroll:  test "1 2 3 + *", 5
1C11   31 00 49               LD   SP,STACK   
1C14   CD 88 0B               CALL   coldInit   
1C17   CD E6 47               CALL   execStr   
1C1A   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1C24   CD C8 0A               CALL   flushBuffer   
1C27                          ;*Macro unroll:  expect "1 2 3 + *",5
1C27   E1                     POP   HL   
1C28   E5                     PUSH   HL   
1C29   11 05 00               LD   DE,5   
1C2C   B7                     OR   A   
1C2D   ED 52                  SBC   HL,DE   
1C2F   7D                     LD   A,L   
1C30   B4                     OR   H   
1C31   CA 95 1C               JP   Z,expectM_0_2688S46   
1C34   CD 40 0B               CALL   printStr   
1C37   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1C47   CD 40 0B               CALL   printStr   
1C4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C59   21 05 00               LD   hl,5   
1C5C   E5                     PUSH   hl   
1C5D   E5                     PUSH   hl   
1C5E   CD 5F 0C               CALL   run   
1C61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C69   CD C8 0A               CALL   flushBuffer   
1C6C   CD 40 0B               CALL   printStr   
1C6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7C   E1                     POP   hl   
1C7D   E5                     PUSH   hl   
1C7E   E5                     PUSH   hl   
1C7F   CD 5F 0C               CALL   run   
1C82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C91   CD C8 0A               CALL   flushBuffer   
1C94   76                     HALT      
1C95                EXPECTM_0_2688S46:      
1C95   E1                     POP   HL   
1C96                          ;*Macro unroll:  test "7 3 /", 2
1C96   31 00 49               LD   SP,STACK   
1C99   CD 88 0B               CALL   coldInit   
1C9C   CD E6 47               CALL   execStr   
1C9F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CA5   CD C8 0A               CALL   flushBuffer   
1CA8                          ;*Macro unroll:  expect "7 3 /",2
1CA8   E1                     POP   HL   
1CA9   E5                     PUSH   HL   
1CAA   11 02 00               LD   DE,2   
1CAD   B7                     OR   A   
1CAE   ED 52                  SBC   HL,DE   
1CB0   7D                     LD   A,L   
1CB1   B4                     OR   H   
1CB2   CA 12 1D               JP   Z,expectM_0_2689S46   
1CB5   CD 40 0B               CALL   printStr   
1CB8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CC4   CD 40 0B               CALL   printStr   
1CC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD6   21 02 00               LD   hl,2   
1CD9   E5                     PUSH   hl   
1CDA   E5                     PUSH   hl   
1CDB   CD 5F 0C               CALL   run   
1CDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE6   CD C8 0A               CALL   flushBuffer   
1CE9   CD 40 0B               CALL   printStr   
1CEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF9   E1                     POP   hl   
1CFA   E5                     PUSH   hl   
1CFB   E5                     PUSH   hl   
1CFC   CD 5F 0C               CALL   run   
1CFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0E   CD C8 0A               CALL   flushBuffer   
1D11   76                     HALT      
1D12                EXPECTM_0_2689S46:      
1D12   E1                     POP   HL   
1D13                          ;*Macro unroll:  test "7 3 / _", 1
1D13   31 00 49               LD   SP,STACK   
1D16   CD 88 0B               CALL   coldInit   
1D19   CD E6 47               CALL   execStr   
1D1C   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1D24   CD C8 0A               CALL   flushBuffer   
1D27                          ;*Macro unroll:  expect "7 3 / _",1
1D27   E1                     POP   HL   
1D28   E5                     PUSH   HL   
1D29   11 01 00               LD   DE,1   
1D2C   B7                     OR   A   
1D2D   ED 52                  SBC   HL,DE   
1D2F   7D                     LD   A,L   
1D30   B4                     OR   H   
1D31   CA 93 1D               JP   Z,expectM_0_2690S46   
1D34   CD 40 0B               CALL   printStr   
1D37   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1D45   CD 40 0B               CALL   printStr   
1D48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D57   21 01 00               LD   hl,1   
1D5A   E5                     PUSH   hl   
1D5B   E5                     PUSH   hl   
1D5C   CD 5F 0C               CALL   run   
1D5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D67   CD C8 0A               CALL   flushBuffer   
1D6A   CD 40 0B               CALL   printStr   
1D6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7A   E1                     POP   hl   
1D7B   E5                     PUSH   hl   
1D7C   E5                     PUSH   hl   
1D7D   CD 5F 0C               CALL   run   
1D80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D8F   CD C8 0A               CALL   flushBuffer   
1D92   76                     HALT      
1D93                EXPECTM_0_2690S46:      
1D93   E1                     POP   HL   
1D94                          ;*Macro unroll:  test "7 3 /", 2
1D94   31 00 49               LD   SP,STACK   
1D97   CD 88 0B               CALL   coldInit   
1D9A   CD E6 47               CALL   execStr   
1D9D   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1DA3   CD C8 0A               CALL   flushBuffer   
1DA6                          ;*Macro unroll:  expect "7 3 /",2
1DA6   E1                     POP   HL   
1DA7   E5                     PUSH   HL   
1DA8   11 02 00               LD   DE,2   
1DAB   B7                     OR   A   
1DAC   ED 52                  SBC   HL,DE   
1DAE   7D                     LD   A,L   
1DAF   B4                     OR   H   
1DB0   CA 10 1E               JP   Z,expectM_0_2691S46   
1DB3   CD 40 0B               CALL   printStr   
1DB6   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC2   CD 40 0B               CALL   printStr   
1DC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD4   21 02 00               LD   hl,2   
1DD7   E5                     PUSH   hl   
1DD8   E5                     PUSH   hl   
1DD9   CD 5F 0C               CALL   run   
1DDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DE4   CD C8 0A               CALL   flushBuffer   
1DE7   CD 40 0B               CALL   printStr   
1DEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF7   E1                     POP   hl   
1DF8   E5                     PUSH   hl   
1DF9   E5                     PUSH   hl   
1DFA   CD 5F 0C               CALL   run   
1DFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E0C   CD C8 0A               CALL   flushBuffer   
1E0F   76                     HALT      
1E10                EXPECTM_0_2691S46:      
1E10   E1                     POP   HL   
1E11                          ;*Macro unroll:  test "2 3 ==", FALSE
1E11   31 00 49               LD   SP,STACK   
1E14   CD 88 0B               CALL   coldInit   
1E17   CD E6 47               CALL   execStr   
1E1A   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1E21   CD C8 0A               CALL   flushBuffer   
1E24                          ;*Macro unroll:  expect "2 3 ==",FALSE
1E24   E1                     POP   HL   
1E25   E5                     PUSH   HL   
1E26   11 00 00               LD   DE,FALSE   
1E29   B7                     OR   A   
1E2A   ED 52                  SBC   HL,DE   
1E2C   7D                     LD   A,L   
1E2D   B4                     OR   H   
1E2E   CA 8F 1E               JP   Z,expectM_0_2692S46   
1E31   CD 40 0B               CALL   printStr   
1E34   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1E41   CD 40 0B               CALL   printStr   
1E44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E53   21 00 00               LD   hl,FALSE   
1E56   E5                     PUSH   hl   
1E57   E5                     PUSH   hl   
1E58   CD 5F 0C               CALL   run   
1E5B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E63   CD C8 0A               CALL   flushBuffer   
1E66   CD 40 0B               CALL   printStr   
1E69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E76   E1                     POP   hl   
1E77   E5                     PUSH   hl   
1E78   E5                     PUSH   hl   
1E79   CD 5F 0C               CALL   run   
1E7C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E8B   CD C8 0A               CALL   flushBuffer   
1E8E   76                     HALT      
1E8F                EXPECTM_0_2692S46:      
1E8F   E1                     POP   HL   
1E90                          ;*Macro unroll:  test "3 3 ==", TRUE
1E90   31 00 49               LD   SP,STACK   
1E93   CD 88 0B               CALL   coldInit   
1E96   CD E6 47               CALL   execStr   
1E99   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1EA0   CD C8 0A               CALL   flushBuffer   
1EA3                          ;*Macro unroll:  expect "3 3 ==",TRUE
1EA3   E1                     POP   HL   
1EA4   E5                     PUSH   HL   
1EA5   11 FF FF               LD   DE,TRUE   
1EA8   B7                     OR   A   
1EA9   ED 52                  SBC   HL,DE   
1EAB   7D                     LD   A,L   
1EAC   B4                     OR   H   
1EAD   CA 0E 1F               JP   Z,expectM_0_2693S46   
1EB0   CD 40 0B               CALL   printStr   
1EB3   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1EC0   CD 40 0B               CALL   printStr   
1EC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED2   21 FF FF               LD   hl,TRUE   
1ED5   E5                     PUSH   hl   
1ED6   E5                     PUSH   hl   
1ED7   CD 5F 0C               CALL   run   
1EDA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EE2   CD C8 0A               CALL   flushBuffer   
1EE5   CD 40 0B               CALL   printStr   
1EE8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EF5   E1                     POP   hl   
1EF6   E5                     PUSH   hl   
1EF7   E5                     PUSH   hl   
1EF8   CD 5F 0C               CALL   run   
1EFB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F0A   CD C8 0A               CALL   flushBuffer   
1F0D   76                     HALT      
1F0E                EXPECTM_0_2693S46:      
1F0E   E1                     POP   HL   
1F0F                          ;*Macro unroll:  test "1 2 <", TRUE
1F0F   31 00 49               LD   SP,STACK   
1F12   CD 88 0B               CALL   coldInit   
1F15   CD E6 47               CALL   execStr   
1F18   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1F1E   CD C8 0A               CALL   flushBuffer   
1F21                          ;*Macro unroll:  expect "1 2 <",TRUE
1F21   E1                     POP   HL   
1F22   E5                     PUSH   HL   
1F23   11 FF FF               LD   DE,TRUE   
1F26   B7                     OR   A   
1F27   ED 52                  SBC   HL,DE   
1F29   7D                     LD   A,L   
1F2A   B4                     OR   H   
1F2B   CA 8B 1F               JP   Z,expectM_0_2694S46   
1F2E   CD 40 0B               CALL   printStr   
1F31   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1F3D   CD 40 0B               CALL   printStr   
1F40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F4F   21 FF FF               LD   hl,TRUE   
1F52   E5                     PUSH   hl   
1F53   E5                     PUSH   hl   
1F54   CD 5F 0C               CALL   run   
1F57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F5F   CD C8 0A               CALL   flushBuffer   
1F62   CD 40 0B               CALL   printStr   
1F65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F72   E1                     POP   hl   
1F73   E5                     PUSH   hl   
1F74   E5                     PUSH   hl   
1F75   CD 5F 0C               CALL   run   
1F78   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F87   CD C8 0A               CALL   flushBuffer   
1F8A   76                     HALT      
1F8B                EXPECTM_0_2694S46:      
1F8B   E1                     POP   HL   
1F8C                          ;*Macro unroll:  test "2 1 <", FALSE
1F8C   31 00 49               LD   SP,STACK   
1F8F   CD 88 0B               CALL   coldInit   
1F92   CD E6 47               CALL   execStr   
1F95   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1F9B   CD C8 0A               CALL   flushBuffer   
1F9E                          ;*Macro unroll:  expect "2 1 <",FALSE
1F9E   E1                     POP   HL   
1F9F   E5                     PUSH   HL   
1FA0   11 00 00               LD   DE,FALSE   
1FA3   B7                     OR   A   
1FA4   ED 52                  SBC   HL,DE   
1FA6   7D                     LD   A,L   
1FA7   B4                     OR   H   
1FA8   CA 08 20               JP   Z,expectM_0_2695S46   
1FAB   CD 40 0B               CALL   printStr   
1FAE   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1FBA   CD 40 0B               CALL   printStr   
1FBD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FCC   21 00 00               LD   hl,FALSE   
1FCF   E5                     PUSH   hl   
1FD0   E5                     PUSH   hl   
1FD1   CD 5F 0C               CALL   run   
1FD4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FDC   CD C8 0A               CALL   flushBuffer   
1FDF   CD 40 0B               CALL   printStr   
1FE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FEF   E1                     POP   hl   
1FF0   E5                     PUSH   hl   
1FF1   E5                     PUSH   hl   
1FF2   CD 5F 0C               CALL   run   
1FF5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2004   CD C8 0A               CALL   flushBuffer   
2007   76                     HALT      
2008                EXPECTM_0_2695S46:      
2008   E1                     POP   HL   
2009                          ;*Macro unroll:  test "2 3 <", TRUE
2009   31 00 49               LD   SP,STACK   
200C   CD 88 0B               CALL   coldInit   
200F   CD E6 47               CALL   execStr   
2012   32 20 33 20 3C 00      .CSTR   "2 3 <"   
2018   CD C8 0A               CALL   flushBuffer   
201B                          ;*Macro unroll:  expect "2 3 <",TRUE
201B   E1                     POP   HL   
201C   E5                     PUSH   HL   
201D   11 FF FF               LD   DE,TRUE   
2020   B7                     OR   A   
2021   ED 52                  SBC   HL,DE   
2023   7D                     LD   A,L   
2024   B4                     OR   H   
2025   CA 85 20               JP   Z,expectM_0_2696S46   
2028   CD 40 0B               CALL   printStr   
202B   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2037   CD 40 0B               CALL   printStr   
203A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2049   21 FF FF               LD   hl,TRUE   
204C   E5                     PUSH   hl   
204D   E5                     PUSH   hl   
204E   CD 5F 0C               CALL   run   
2051   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2059   CD C8 0A               CALL   flushBuffer   
205C   CD 40 0B               CALL   printStr   
205F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
206C   E1                     POP   hl   
206D   E5                     PUSH   hl   
206E   E5                     PUSH   hl   
206F   CD 5F 0C               CALL   run   
2072   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2081   CD C8 0A               CALL   flushBuffer   
2084   76                     HALT      
2085                EXPECTM_0_2696S46:      
2085   E1                     POP   HL   
2086                          ;*Macro unroll:  test "3 3 <", FALSE
2086   31 00 49               LD   SP,STACK   
2089   CD 88 0B               CALL   coldInit   
208C   CD E6 47               CALL   execStr   
208F   33 20 33 20 3C 00      .CSTR   "3 3 <"   
2095   CD C8 0A               CALL   flushBuffer   
2098                          ;*Macro unroll:  expect "3 3 <",FALSE
2098   E1                     POP   HL   
2099   E5                     PUSH   HL   
209A   11 00 00               LD   DE,FALSE   
209D   B7                     OR   A   
209E   ED 52                  SBC   HL,DE   
20A0   7D                     LD   A,L   
20A1   B4                     OR   H   
20A2   CA 02 21               JP   Z,expectM_0_2697S46   
20A5   CD 40 0B               CALL   printStr   
20A8   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
20B4   CD 40 0B               CALL   printStr   
20B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20C6   21 00 00               LD   hl,FALSE   
20C9   E5                     PUSH   hl   
20CA   E5                     PUSH   hl   
20CB   CD 5F 0C               CALL   run   
20CE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20D6   CD C8 0A               CALL   flushBuffer   
20D9   CD 40 0B               CALL   printStr   
20DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E9   E1                     POP   hl   
20EA   E5                     PUSH   hl   
20EB   E5                     PUSH   hl   
20EC   CD 5F 0C               CALL   run   
20EF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20FE   CD C8 0A               CALL   flushBuffer   
2101   76                     HALT      
2102                EXPECTM_0_2697S46:      
2102   E1                     POP   HL   
2103                          ;*Macro unroll:  test "1 2 >", FALSE
2103   31 00 49               LD   SP,STACK   
2106   CD 88 0B               CALL   coldInit   
2109   CD E6 47               CALL   execStr   
210C   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2112   CD C8 0A               CALL   flushBuffer   
2115                          ;*Macro unroll:  expect "1 2 >",FALSE
2115   E1                     POP   HL   
2116   E5                     PUSH   HL   
2117   11 00 00               LD   DE,FALSE   
211A   B7                     OR   A   
211B   ED 52                  SBC   HL,DE   
211D   7D                     LD   A,L   
211E   B4                     OR   H   
211F   CA 7F 21               JP   Z,expectM_0_2698S46   
2122   CD 40 0B               CALL   printStr   
2125   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2131   CD 40 0B               CALL   printStr   
2134   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2143   21 00 00               LD   hl,FALSE   
2146   E5                     PUSH   hl   
2147   E5                     PUSH   hl   
2148   CD 5F 0C               CALL   run   
214B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2153   CD C8 0A               CALL   flushBuffer   
2156   CD 40 0B               CALL   printStr   
2159   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2166   E1                     POP   hl   
2167   E5                     PUSH   hl   
2168   E5                     PUSH   hl   
2169   CD 5F 0C               CALL   run   
216C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
217B   CD C8 0A               CALL   flushBuffer   
217E   76                     HALT      
217F                EXPECTM_0_2698S46:      
217F   E1                     POP   HL   
2180                          ;*Macro unroll:  test "2 1 >", TRUE
2180   31 00 49               LD   SP,STACK   
2183   CD 88 0B               CALL   coldInit   
2186   CD E6 47               CALL   execStr   
2189   32 20 31 20 3E 00      .CSTR   "2 1 >"   
218F   CD C8 0A               CALL   flushBuffer   
2192                          ;*Macro unroll:  expect "2 1 >",TRUE
2192   E1                     POP   HL   
2193   E5                     PUSH   HL   
2194   11 FF FF               LD   DE,TRUE   
2197   B7                     OR   A   
2198   ED 52                  SBC   HL,DE   
219A   7D                     LD   A,L   
219B   B4                     OR   H   
219C   CA FC 21               JP   Z,expectM_0_2699S46   
219F   CD 40 0B               CALL   printStr   
21A2   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
21AE   CD 40 0B               CALL   printStr   
21B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C0   21 FF FF               LD   hl,TRUE   
21C3   E5                     PUSH   hl   
21C4   E5                     PUSH   hl   
21C5   CD 5F 0C               CALL   run   
21C8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D0   CD C8 0A               CALL   flushBuffer   
21D3   CD 40 0B               CALL   printStr   
21D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E3   E1                     POP   hl   
21E4   E5                     PUSH   hl   
21E5   E5                     PUSH   hl   
21E6   CD 5F 0C               CALL   run   
21E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21F8   CD C8 0A               CALL   flushBuffer   
21FB   76                     HALT      
21FC                EXPECTM_0_2699S46:      
21FC   E1                     POP   HL   
21FD                          ;*Macro unroll:  test "3 3 >", FALSE
21FD   31 00 49               LD   SP,STACK   
2200   CD 88 0B               CALL   coldInit   
2203   CD E6 47               CALL   execStr   
2206   33 20 33 20 3E 00      .CSTR   "3 3 >"   
220C   CD C8 0A               CALL   flushBuffer   
220F                          ;*Macro unroll:  expect "3 3 >",FALSE
220F   E1                     POP   HL   
2210   E5                     PUSH   HL   
2211   11 00 00               LD   DE,FALSE   
2214   B7                     OR   A   
2215   ED 52                  SBC   HL,DE   
2217   7D                     LD   A,L   
2218   B4                     OR   H   
2219   CA 79 22               JP   Z,expectM_0_2700S46   
221C   CD 40 0B               CALL   printStr   
221F   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
222B   CD 40 0B               CALL   printStr   
222E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
223D   21 00 00               LD   hl,FALSE   
2240   E5                     PUSH   hl   
2241   E5                     PUSH   hl   
2242   CD 5F 0C               CALL   run   
2245   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
224D   CD C8 0A               CALL   flushBuffer   
2250   CD 40 0B               CALL   printStr   
2253   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2260   E1                     POP   hl   
2261   E5                     PUSH   hl   
2262   E5                     PUSH   hl   
2263   CD 5F 0C               CALL   run   
2266   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2275   CD C8 0A               CALL   flushBuffer   
2278   76                     HALT      
2279                EXPECTM_0_2700S46:      
2279   E1                     POP   HL   
227A                          ;*Macro unroll:  test "4 3 >", TRUE
227A   31 00 49               LD   SP,STACK   
227D   CD 88 0B               CALL   coldInit   
2280   CD E6 47               CALL   execStr   
2283   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2289   CD C8 0A               CALL   flushBuffer   
228C                          ;*Macro unroll:  expect "4 3 >",TRUE
228C   E1                     POP   HL   
228D   E5                     PUSH   HL   
228E   11 FF FF               LD   DE,TRUE   
2291   B7                     OR   A   
2292   ED 52                  SBC   HL,DE   
2294   7D                     LD   A,L   
2295   B4                     OR   H   
2296   CA F6 22               JP   Z,expectM_0_2701S46   
2299   CD 40 0B               CALL   printStr   
229C   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
22A8   CD 40 0B               CALL   printStr   
22AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22BA   21 FF FF               LD   hl,TRUE   
22BD   E5                     PUSH   hl   
22BE   E5                     PUSH   hl   
22BF   CD 5F 0C               CALL   run   
22C2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22CA   CD C8 0A               CALL   flushBuffer   
22CD   CD 40 0B               CALL   printStr   
22D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22DD   E1                     POP   hl   
22DE   E5                     PUSH   hl   
22DF   E5                     PUSH   hl   
22E0   CD 5F 0C               CALL   run   
22E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22F2   CD C8 0A               CALL   flushBuffer   
22F5   76                     HALT      
22F6                EXPECTM_0_2701S46:      
22F6   E1                     POP   HL   
22F7                          ;*Macro unroll:  test "2 2 <=", TRUE
22F7   31 00 49               LD   SP,STACK   
22FA   CD 88 0B               CALL   coldInit   
22FD   CD E6 47               CALL   execStr   
2300   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
2307   CD C8 0A               CALL   flushBuffer   
230A                          ;*Macro unroll:  expect "2 2 <=",TRUE
230A   E1                     POP   HL   
230B   E5                     PUSH   HL   
230C   11 FF FF               LD   DE,TRUE   
230F   B7                     OR   A   
2310   ED 52                  SBC   HL,DE   
2312   7D                     LD   A,L   
2313   B4                     OR   H   
2314   CA 75 23               JP   Z,expectM_0_2702S46   
2317   CD 40 0B               CALL   printStr   
231A   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2327   CD 40 0B               CALL   printStr   
232A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2339   21 FF FF               LD   hl,TRUE   
233C   E5                     PUSH   hl   
233D   E5                     PUSH   hl   
233E   CD 5F 0C               CALL   run   
2341   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2349   CD C8 0A               CALL   flushBuffer   
234C   CD 40 0B               CALL   printStr   
234F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
235C   E1                     POP   hl   
235D   E5                     PUSH   hl   
235E   E5                     PUSH   hl   
235F   CD 5F 0C               CALL   run   
2362   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2371   CD C8 0A               CALL   flushBuffer   
2374   76                     HALT      
2375                EXPECTM_0_2702S46:      
2375   E1                     POP   HL   
2376                          ;*Macro unroll:  test "2 2 >=", TRUE
2376   31 00 49               LD   SP,STACK   
2379   CD 88 0B               CALL   coldInit   
237C   CD E6 47               CALL   execStr   
237F   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2386   CD C8 0A               CALL   flushBuffer   
2389                          ;*Macro unroll:  expect "2 2 >=",TRUE
2389   E1                     POP   HL   
238A   E5                     PUSH   HL   
238B   11 FF FF               LD   DE,TRUE   
238E   B7                     OR   A   
238F   ED 52                  SBC   HL,DE   
2391   7D                     LD   A,L   
2392   B4                     OR   H   
2393   CA F4 23               JP   Z,expectM_0_2703S46   
2396   CD 40 0B               CALL   printStr   
2399   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
23A6   CD 40 0B               CALL   printStr   
23A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B8   21 FF FF               LD   hl,TRUE   
23BB   E5                     PUSH   hl   
23BC   E5                     PUSH   hl   
23BD   CD 5F 0C               CALL   run   
23C0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23C8   CD C8 0A               CALL   flushBuffer   
23CB   CD 40 0B               CALL   printStr   
23CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23DB   E1                     POP   hl   
23DC   E5                     PUSH   hl   
23DD   E5                     PUSH   hl   
23DE   CD 5F 0C               CALL   run   
23E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23F0   CD C8 0A               CALL   flushBuffer   
23F3   76                     HALT      
23F4                EXPECTM_0_2703S46:      
23F4   E1                     POP   HL   
23F5                          ;*Macro unroll:  test "3 1 <<", 6
23F5   31 00 49               LD   SP,STACK   
23F8   CD 88 0B               CALL   coldInit   
23FB   CD E6 47               CALL   execStr   
23FE   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
2405   CD C8 0A               CALL   flushBuffer   
2408                          ;*Macro unroll:  expect "3 1 <<",6
2408   E1                     POP   HL   
2409   E5                     PUSH   HL   
240A   11 06 00               LD   DE,6   
240D   B7                     OR   A   
240E   ED 52                  SBC   HL,DE   
2410   7D                     LD   A,L   
2411   B4                     OR   H   
2412   CA 73 24               JP   Z,expectM_0_2704S46   
2415   CD 40 0B               CALL   printStr   
2418   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2425   CD 40 0B               CALL   printStr   
2428   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2437   21 06 00               LD   hl,6   
243A   E5                     PUSH   hl   
243B   E5                     PUSH   hl   
243C   CD 5F 0C               CALL   run   
243F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2447   CD C8 0A               CALL   flushBuffer   
244A   CD 40 0B               CALL   printStr   
244D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
245A   E1                     POP   hl   
245B   E5                     PUSH   hl   
245C   E5                     PUSH   hl   
245D   CD 5F 0C               CALL   run   
2460   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
246F   CD C8 0A               CALL   flushBuffer   
2472   76                     HALT      
2473                EXPECTM_0_2704S46:      
2473   E1                     POP   HL   
2474                          ;*Macro unroll:  test "10 1 >>", 5
2474   31 00 49               LD   SP,STACK   
2477   CD 88 0B               CALL   coldInit   
247A   CD E6 47               CALL   execStr   
247D   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2485   CD C8 0A               CALL   flushBuffer   
2488                          ;*Macro unroll:  expect "10 1 >>",5
2488   E1                     POP   HL   
2489   E5                     PUSH   HL   
248A   11 05 00               LD   DE,5   
248D   B7                     OR   A   
248E   ED 52                  SBC   HL,DE   
2490   7D                     LD   A,L   
2491   B4                     OR   H   
2492   CA F4 24               JP   Z,expectM_0_2705S46   
2495   CD 40 0B               CALL   printStr   
2498   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
24A6   CD 40 0B               CALL   printStr   
24A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24B8   21 05 00               LD   hl,5   
24BB   E5                     PUSH   hl   
24BC   E5                     PUSH   hl   
24BD   CD 5F 0C               CALL   run   
24C0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24C8   CD C8 0A               CALL   flushBuffer   
24CB   CD 40 0B               CALL   printStr   
24CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DB   E1                     POP   hl   
24DC   E5                     PUSH   hl   
24DD   E5                     PUSH   hl   
24DE   CD 5F 0C               CALL   run   
24E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F0   CD C8 0A               CALL   flushBuffer   
24F3   76                     HALT      
24F4                EXPECTM_0_2705S46:      
24F4   E1                     POP   HL   
24F5                          ;*Macro unroll:  test "1 x = x", 1
24F5   31 00 49               LD   SP,STACK   
24F8   CD 88 0B               CALL   coldInit   
24FB   CD E6 47               CALL   execStr   
24FE   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
2506   CD C8 0A               CALL   flushBuffer   
2509                          ;*Macro unroll:  expect "1 x = x",1
2509   E1                     POP   HL   
250A   E5                     PUSH   HL   
250B   11 01 00               LD   DE,1   
250E   B7                     OR   A   
250F   ED 52                  SBC   HL,DE   
2511   7D                     LD   A,L   
2512   B4                     OR   H   
2513   CA 75 25               JP   Z,expectM_0_2706S46   
2516   CD 40 0B               CALL   printStr   
2519   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2527   CD 40 0B               CALL   printStr   
252A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2539   21 01 00               LD   hl,1   
253C   E5                     PUSH   hl   
253D   E5                     PUSH   hl   
253E   CD 5F 0C               CALL   run   
2541   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2549   CD C8 0A               CALL   flushBuffer   
254C   CD 40 0B               CALL   printStr   
254F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
255C   E1                     POP   hl   
255D   E5                     PUSH   hl   
255E   E5                     PUSH   hl   
255F   CD 5F 0C               CALL   run   
2562   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2571   CD C8 0A               CALL   flushBuffer   
2574   76                     HALT      
2575                EXPECTM_0_2706S46:      
2575   E1                     POP   HL   
2576                          ;*Macro unroll:  test "1{}^", 1
2576   31 00 49               LD   SP,STACK   
2579   CD 88 0B               CALL   coldInit   
257C   CD E6 47               CALL   execStr   
257F   31 7B 7D 5E 00         .CSTR   "1{}^"   
2584   CD C8 0A               CALL   flushBuffer   
2587                          ;*Macro unroll:  expect "1{}^",1
2587   E1                     POP   HL   
2588   E5                     PUSH   HL   
2589   11 01 00               LD   DE,1   
258C   B7                     OR   A   
258D   ED 52                  SBC   HL,DE   
258F   7D                     LD   A,L   
2590   B4                     OR   H   
2591   CA F0 25               JP   Z,expectM_0_2707S46   
2594   CD 40 0B               CALL   printStr   
2597   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
25A2   CD 40 0B               CALL   printStr   
25A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B4   21 01 00               LD   hl,1   
25B7   E5                     PUSH   hl   
25B8   E5                     PUSH   hl   
25B9   CD 5F 0C               CALL   run   
25BC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25C4   CD C8 0A               CALL   flushBuffer   
25C7   CD 40 0B               CALL   printStr   
25CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25D7   E1                     POP   hl   
25D8   E5                     PUSH   hl   
25D9   E5                     PUSH   hl   
25DA   CD 5F 0C               CALL   run   
25DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25EC   CD C8 0A               CALL   flushBuffer   
25EF   76                     HALT      
25F0                EXPECTM_0_2707S46:      
25F0   E1                     POP   HL   
25F1                          ;*Macro unroll:  test "{1}^", 1
25F1   31 00 49               LD   SP,STACK   
25F4   CD 88 0B               CALL   coldInit   
25F7   CD E6 47               CALL   execStr   
25FA   7B 31 7D 5E 00         .CSTR   "{1}^"   
25FF   CD C8 0A               CALL   flushBuffer   
2602                          ;*Macro unroll:  expect "{1}^",1
2602   E1                     POP   HL   
2603   E5                     PUSH   HL   
2604   11 01 00               LD   DE,1   
2607   B7                     OR   A   
2608   ED 52                  SBC   HL,DE   
260A   7D                     LD   A,L   
260B   B4                     OR   H   
260C   CA 6B 26               JP   Z,expectM_0_2708S46   
260F   CD 40 0B               CALL   printStr   
2612   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
261D   CD 40 0B               CALL   printStr   
2620   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
262F   21 01 00               LD   hl,1   
2632   E5                     PUSH   hl   
2633   E5                     PUSH   hl   
2634   CD 5F 0C               CALL   run   
2637   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
263F   CD C8 0A               CALL   flushBuffer   
2642   CD 40 0B               CALL   printStr   
2645   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2652   E1                     POP   hl   
2653   E5                     PUSH   hl   
2654   E5                     PUSH   hl   
2655   CD 5F 0C               CALL   run   
2658   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2667   CD C8 0A               CALL   flushBuffer   
266A   76                     HALT      
266B                EXPECTM_0_2708S46:      
266B   E1                     POP   HL   
266C                          ;*Macro unroll:  test "{{1}^}^", 1
266C   31 00 49               LD   SP,STACK   
266F   CD 88 0B               CALL   coldInit   
2672   CD E6 47               CALL   execStr   
2675   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
267D   CD C8 0A               CALL   flushBuffer   
2680                          ;*Macro unroll:  expect "{{1}^}^",1
2680   E1                     POP   HL   
2681   E5                     PUSH   HL   
2682   11 01 00               LD   DE,1   
2685   B7                     OR   A   
2686   ED 52                  SBC   HL,DE   
2688   7D                     LD   A,L   
2689   B4                     OR   H   
268A   CA EC 26               JP   Z,expectM_0_2709S46   
268D   CD 40 0B               CALL   printStr   
2690   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
269E   CD 40 0B               CALL   printStr   
26A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B0   21 01 00               LD   hl,1   
26B3   E5                     PUSH   hl   
26B4   E5                     PUSH   hl   
26B5   CD 5F 0C               CALL   run   
26B8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26C0   CD C8 0A               CALL   flushBuffer   
26C3   CD 40 0B               CALL   printStr   
26C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D3   E1                     POP   hl   
26D4   E5                     PUSH   hl   
26D5   E5                     PUSH   hl   
26D6   CD 5F 0C               CALL   run   
26D9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26E8   CD C8 0A               CALL   flushBuffer   
26EB   76                     HALT      
26EC                EXPECTM_0_2709S46:      
26EC   E1                     POP   HL   
26ED                          ;*Macro unroll:  test "{{{1}^}^}^", 1
26ED   31 00 49               LD   SP,STACK   
26F0   CD 88 0B               CALL   coldInit   
26F3   CD E6 47               CALL   execStr   
26F6   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2701   CD C8 0A               CALL   flushBuffer   
2704                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2704   E1                     POP   HL   
2705   E5                     PUSH   HL   
2706   11 01 00               LD   DE,1   
2709   B7                     OR   A   
270A   ED 52                  SBC   HL,DE   
270C   7D                     LD   A,L   
270D   B4                     OR   H   
270E   CA 73 27               JP   Z,expectM_0_2710S46   
2711   CD 40 0B               CALL   printStr   
2714   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2725   CD 40 0B               CALL   printStr   
2728   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2737   21 01 00               LD   hl,1   
273A   E5                     PUSH   hl   
273B   E5                     PUSH   hl   
273C   CD 5F 0C               CALL   run   
273F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2747   CD C8 0A               CALL   flushBuffer   
274A   CD 40 0B               CALL   printStr   
274D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275A   E1                     POP   hl   
275B   E5                     PUSH   hl   
275C   E5                     PUSH   hl   
275D   CD 5F 0C               CALL   run   
2760   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
276F   CD C8 0A               CALL   flushBuffer   
2772   76                     HALT      
2773                EXPECTM_0_2710S46:      
2773   E1                     POP   HL   
2774                          ;*Macro unroll:  test "5 /f{10} ?", 5
2774   31 00 49               LD   SP,STACK   
2777   CD 88 0B               CALL   coldInit   
277A   CD E6 47               CALL   execStr   
277D   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
2788   CD C8 0A               CALL   flushBuffer   
278B                          ;*Macro unroll:  expect "5 /f{10} ?",5
278B   E1                     POP   HL   
278C   E5                     PUSH   HL   
278D   11 05 00               LD   DE,5   
2790   B7                     OR   A   
2791   ED 52                  SBC   HL,DE   
2793   7D                     LD   A,L   
2794   B4                     OR   H   
2795   CA FA 27               JP   Z,expectM_0_2711S46   
2798   CD 40 0B               CALL   printStr   
279B   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
27AC   CD 40 0B               CALL   printStr   
27AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27BE   21 05 00               LD   hl,5   
27C1   E5                     PUSH   hl   
27C2   E5                     PUSH   hl   
27C3   CD 5F 0C               CALL   run   
27C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27CE   CD C8 0A               CALL   flushBuffer   
27D1   CD 40 0B               CALL   printStr   
27D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E1   E1                     POP   hl   
27E2   E5                     PUSH   hl   
27E3   E5                     PUSH   hl   
27E4   CD 5F 0C               CALL   run   
27E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27F6   CD C8 0A               CALL   flushBuffer   
27F9   76                     HALT      
27FA                EXPECTM_0_2711S46:      
27FA   E1                     POP   HL   
27FB                          ;*Macro unroll:  test "5 /t{10} ? +", 15
27FB   31 00 49               LD   SP,STACK   
27FE   CD 88 0B               CALL   coldInit   
2801   CD E6 47               CALL   execStr   
2804   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
2811   CD C8 0A               CALL   flushBuffer   
2814                          ;*Macro unroll:  expect "5 /t{10} ? +",15
2814   E1                     POP   HL   
2815   E5                     PUSH   HL   
2816   11 0F 00               LD   DE,15   
2819   B7                     OR   A   
281A   ED 52                  SBC   HL,DE   
281C   7D                     LD   A,L   
281D   B4                     OR   H   
281E   CA 85 28               JP   Z,expectM_0_2712S46   
2821   CD 40 0B               CALL   printStr   
2824   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2837   CD 40 0B               CALL   printStr   
283A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2849   21 0F 00               LD   hl,15   
284C   E5                     PUSH   hl   
284D   E5                     PUSH   hl   
284E   CD 5F 0C               CALL   run   
2851   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2859   CD C8 0A               CALL   flushBuffer   
285C   CD 40 0B               CALL   printStr   
285F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
286C   E1                     POP   hl   
286D   E5                     PUSH   hl   
286E   E5                     PUSH   hl   
286F   CD 5F 0C               CALL   run   
2872   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2881   CD C8 0A               CALL   flushBuffer   
2884   76                     HALT      
2885                EXPECTM_0_2712S46:      
2885   E1                     POP   HL   
2886                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2886   31 00 49               LD   SP,STACK   
2889   CD 88 0B               CALL   coldInit   
288C   CD E6 47               CALL   execStr   
288F   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
28A1   CD C8 0A               CALL   flushBuffer   
28A4                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
28A4   E1                     POP   HL   
28A5   E5                     PUSH   HL   
28A6   11 15 00               LD   DE,21   
28A9   B7                     OR   A   
28AA   ED 52                  SBC   HL,DE   
28AC   7D                     LD   A,L   
28AD   B4                     OR   H   
28AE   CA 1A 29               JP   Z,expectM_0_2713S46   
28B1   CD 40 0B               CALL   printStr   
28B4   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
28CC   CD 40 0B               CALL   printStr   
28CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28DE   21 15 00               LD   hl,21   
28E1   E5                     PUSH   hl   
28E2   E5                     PUSH   hl   
28E3   CD 5F 0C               CALL   run   
28E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28EE   CD C8 0A               CALL   flushBuffer   
28F1   CD 40 0B               CALL   printStr   
28F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2901   E1                     POP   hl   
2902   E5                     PUSH   hl   
2903   E5                     PUSH   hl   
2904   CD 5F 0C               CALL   run   
2907   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2916   CD C8 0A               CALL   flushBuffer   
2919   76                     HALT      
291A                EXPECTM_0_2713S46:      
291A   E1                     POP   HL   
291B                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
291B   31 00 49               LD   SP,STACK   
291E   CD 88 0B               CALL   coldInit   
2921   CD E6 47               CALL   execStr   
2924   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
2936   CD C8 0A               CALL   flushBuffer   
2939                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
2939   E1                     POP   HL   
293A   E5                     PUSH   HL   
293B   11 0B 00               LD   DE,11   
293E   B7                     OR   A   
293F   ED 52                  SBC   HL,DE   
2941   7D                     LD   A,L   
2942   B4                     OR   H   
2943   CA AF 29               JP   Z,expectM_0_2714S46   
2946   CD 40 0B               CALL   printStr   
2949   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2961   CD 40 0B               CALL   printStr   
2964   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2973   21 0B 00               LD   hl,11   
2976   E5                     PUSH   hl   
2977   E5                     PUSH   hl   
2978   CD 5F 0C               CALL   run   
297B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2983   CD C8 0A               CALL   flushBuffer   
2986   CD 40 0B               CALL   printStr   
2989   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2996   E1                     POP   hl   
2997   E5                     PUSH   hl   
2998   E5                     PUSH   hl   
2999   CD 5F 0C               CALL   run   
299C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29AB   CD C8 0A               CALL   flushBuffer   
29AE   76                     HALT      
29AF                EXPECTM_0_2714S46:      
29AF   E1                     POP   HL   
29B0                          ;*Macro unroll:  test ": -2%", $0000
29B0   31 00 49               LD   SP,STACK   
29B3   CD 88 0B               CALL   coldInit   
29B6   CD E6 47               CALL   execStr   
29B9   3A 20 2D 32 25 00      .CSTR   ": -2%"   
29BF   CD C8 0A               CALL   flushBuffer   
29C2                          ;*Macro unroll:  expect ": -2%",$0000
29C2   E1                     POP   HL   
29C3   E5                     PUSH   HL   
29C4   11 00 00               LD   DE,$0000   
29C7   B7                     OR   A   
29C8   ED 52                  SBC   HL,DE   
29CA   7D                     LD   A,L   
29CB   B4                     OR   H   
29CC   CA 2C 2A               JP   Z,expectM_0_2715S46   
29CF   CD 40 0B               CALL   printStr   
29D2   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
29DE   CD 40 0B               CALL   printStr   
29E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F0   21 00 00               LD   hl,$0000   
29F3   E5                     PUSH   hl   
29F4   E5                     PUSH   hl   
29F5   CD 5F 0C               CALL   run   
29F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A00   CD C8 0A               CALL   flushBuffer   
2A03   CD 40 0B               CALL   printStr   
2A06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A13   E1                     POP   hl   
2A14   E5                     PUSH   hl   
2A15   E5                     PUSH   hl   
2A16   CD 5F 0C               CALL   run   
2A19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A28   CD C8 0A               CALL   flushBuffer   
2A2B   76                     HALT      
2A2C                EXPECTM_0_2715S46:      
2A2C   E1                     POP   HL   
2A2D                          ;*Macro unroll:  test ":a -1%", $0001
2A2D   31 00 49               LD   SP,STACK   
2A30   CD 88 0B               CALL   coldInit   
2A33   CD E6 47               CALL   execStr   
2A36   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
2A3D   CD C8 0A               CALL   flushBuffer   
2A40                          ;*Macro unroll:  expect ":a -1%",$0001
2A40   E1                     POP   HL   
2A41   E5                     PUSH   HL   
2A42   11 01 00               LD   DE,$0001   
2A45   B7                     OR   A   
2A46   ED 52                  SBC   HL,DE   
2A48   7D                     LD   A,L   
2A49   B4                     OR   H   
2A4A   CA AB 2A               JP   Z,expectM_0_2716S46   
2A4D   CD 40 0B               CALL   printStr   
2A50   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
2A5D   CD 40 0B               CALL   printStr   
2A60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6F   21 01 00               LD   hl,$0001   
2A72   E5                     PUSH   hl   
2A73   E5                     PUSH   hl   
2A74   CD 5F 0C               CALL   run   
2A77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A7F   CD C8 0A               CALL   flushBuffer   
2A82   CD 40 0B               CALL   printStr   
2A85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A92   E1                     POP   hl   
2A93   E5                     PUSH   hl   
2A94   E5                     PUSH   hl   
2A95   CD 5F 0C               CALL   run   
2A98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AA7   CD C8 0A               CALL   flushBuffer   
2AAA   76                     HALT      
2AAB                EXPECTM_0_2716S46:      
2AAB   E1                     POP   HL   
2AAC                          ;*Macro unroll:  test ":a: -1%", $0001
2AAC   31 00 49               LD   SP,STACK   
2AAF   CD 88 0B               CALL   coldInit   
2AB2   CD E6 47               CALL   execStr   
2AB5   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2ABD   CD C8 0A               CALL   flushBuffer   
2AC0                          ;*Macro unroll:  expect ":a: -1%",$0001
2AC0   E1                     POP   HL   
2AC1   E5                     PUSH   HL   
2AC2   11 01 00               LD   DE,$0001   
2AC5   B7                     OR   A   
2AC6   ED 52                  SBC   HL,DE   
2AC8   7D                     LD   A,L   
2AC9   B4                     OR   H   
2ACA   CA 2C 2B               JP   Z,expectM_0_2717S46   
2ACD   CD 40 0B               CALL   printStr   
2AD0   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2ADE   CD 40 0B               CALL   printStr   
2AE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF0   21 01 00               LD   hl,$0001   
2AF3   E5                     PUSH   hl   
2AF4   E5                     PUSH   hl   
2AF5   CD 5F 0C               CALL   run   
2AF8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B00   CD C8 0A               CALL   flushBuffer   
2B03   CD 40 0B               CALL   printStr   
2B06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B13   E1                     POP   hl   
2B14   E5                     PUSH   hl   
2B15   E5                     PUSH   hl   
2B16   CD 5F 0C               CALL   run   
2B19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B28   CD C8 0A               CALL   flushBuffer   
2B2B   76                     HALT      
2B2C                EXPECTM_0_2717S46:      
2B2C   E1                     POP   HL   
2B2D                          ;*Macro unroll:  test ":a:b -1%", $0102
2B2D   31 00 49               LD   SP,STACK   
2B30   CD 88 0B               CALL   coldInit   
2B33   CD E6 47               CALL   execStr   
2B36   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
2B3F   CD C8 0A               CALL   flushBuffer   
2B42                          ;*Macro unroll:  expect ":a:b -1%",$0102
2B42   E1                     POP   HL   
2B43   E5                     PUSH   HL   
2B44   11 02 01               LD   DE,$0102   
2B47   B7                     OR   A   
2B48   ED 52                  SBC   HL,DE   
2B4A   7D                     LD   A,L   
2B4B   B4                     OR   H   
2B4C   CA AF 2B               JP   Z,expectM_0_2718S46   
2B4F   CD 40 0B               CALL   printStr   
2B52   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
2B61   CD 40 0B               CALL   printStr   
2B64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B73   21 02 01               LD   hl,$0102   
2B76   E5                     PUSH   hl   
2B77   E5                     PUSH   hl   
2B78   CD 5F 0C               CALL   run   
2B7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B83   CD C8 0A               CALL   flushBuffer   
2B86   CD 40 0B               CALL   printStr   
2B89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B96   E1                     POP   hl   
2B97   E5                     PUSH   hl   
2B98   E5                     PUSH   hl   
2B99   CD 5F 0C               CALL   run   
2B9C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BAB   CD C8 0A               CALL   flushBuffer   
2BAE   76                     HALT      
2BAF                EXPECTM_0_2718S46:      
2BAF   E1                     POP   HL   
2BB0                          ;*Macro unroll:  test "::b -1%", $0101
2BB0   31 00 49               LD   SP,STACK   
2BB3   CD 88 0B               CALL   coldInit   
2BB6   CD E6 47               CALL   execStr   
2BB9   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2BC1   CD C8 0A               CALL   flushBuffer   
2BC4                          ;*Macro unroll:  expect "::b -1%",$0101
2BC4   E1                     POP   HL   
2BC5   E5                     PUSH   HL   
2BC6   11 01 01               LD   DE,$0101   
2BC9   B7                     OR   A   
2BCA   ED 52                  SBC   HL,DE   
2BCC   7D                     LD   A,L   
2BCD   B4                     OR   H   
2BCE   CA 30 2C               JP   Z,expectM_0_2719S46   
2BD1   CD 40 0B               CALL   printStr   
2BD4   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2BE2   CD 40 0B               CALL   printStr   
2BE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BF4   21 01 01               LD   hl,$0101   
2BF7   E5                     PUSH   hl   
2BF8   E5                     PUSH   hl   
2BF9   CD 5F 0C               CALL   run   
2BFC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C04   CD C8 0A               CALL   flushBuffer   
2C07   CD 40 0B               CALL   printStr   
2C0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C17   E1                     POP   hl   
2C18   E5                     PUSH   hl   
2C19   E5                     PUSH   hl   
2C1A   CD 5F 0C               CALL   run   
2C1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C2C   CD C8 0A               CALL   flushBuffer   
2C2F   76                     HALT      
2C30                EXPECTM_0_2719S46:      
2C30   E1                     POP   HL   
2C31                          ;*Macro unroll:  test ":{2};^", 2
2C31   31 00 49               LD   SP,STACK   
2C34   CD 88 0B               CALL   coldInit   
2C37   CD E6 47               CALL   execStr   
2C3A   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2C41   CD C8 0A               CALL   flushBuffer   
2C44                          ;*Macro unroll:  expect ":{2};^",2
2C44   E1                     POP   HL   
2C45   E5                     PUSH   HL   
2C46   11 02 00               LD   DE,2   
2C49   B7                     OR   A   
2C4A   ED 52                  SBC   HL,DE   
2C4C   7D                     LD   A,L   
2C4D   B4                     OR   H   
2C4E   CA AF 2C               JP   Z,expectM_0_2720S46   
2C51   CD 40 0B               CALL   printStr   
2C54   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2C61   CD 40 0B               CALL   printStr   
2C64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C73   21 02 00               LD   hl,2   
2C76   E5                     PUSH   hl   
2C77   E5                     PUSH   hl   
2C78   CD 5F 0C               CALL   run   
2C7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C83   CD C8 0A               CALL   flushBuffer   
2C86   CD 40 0B               CALL   printStr   
2C89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C96   E1                     POP   hl   
2C97   E5                     PUSH   hl   
2C98   E5                     PUSH   hl   
2C99   CD 5F 0C               CALL   run   
2C9C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CAB   CD C8 0A               CALL   flushBuffer   
2CAE   76                     HALT      
2CAF                EXPECTM_0_2720S46:      
2CAF   E1                     POP   HL   
2CB0                          ;*Macro unroll:  test ":a{2};^", 2
2CB0   31 00 49               LD   SP,STACK   
2CB3   CD 88 0B               CALL   coldInit   
2CB6   CD E6 47               CALL   execStr   
2CB9   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2CC1   CD C8 0A               CALL   flushBuffer   
2CC4                          ;*Macro unroll:  expect ":a{2};^",2
2CC4   E1                     POP   HL   
2CC5   E5                     PUSH   HL   
2CC6   11 02 00               LD   DE,2   
2CC9   B7                     OR   A   
2CCA   ED 52                  SBC   HL,DE   
2CCC   7D                     LD   A,L   
2CCD   B4                     OR   H   
2CCE   CA 30 2D               JP   Z,expectM_0_2721S46   
2CD1   CD 40 0B               CALL   printStr   
2CD4   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2CE2   CD 40 0B               CALL   printStr   
2CE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CF4   21 02 00               LD   hl,2   
2CF7   E5                     PUSH   hl   
2CF8   E5                     PUSH   hl   
2CF9   CD 5F 0C               CALL   run   
2CFC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D04   CD C8 0A               CALL   flushBuffer   
2D07   CD 40 0B               CALL   printStr   
2D0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D17   E1                     POP   hl   
2D18   E5                     PUSH   hl   
2D19   E5                     PUSH   hl   
2D1A   CD 5F 0C               CALL   run   
2D1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D2C   CD C8 0A               CALL   flushBuffer   
2D2F   76                     HALT      
2D30                EXPECTM_0_2721S46:      
2D30   E1                     POP   HL   
2D31                          ;*Macro unroll:  test "5 :a{$a};^", 5
2D31   31 00 49               LD   SP,STACK   
2D34   CD 88 0B               CALL   coldInit   
2D37   CD E6 47               CALL   execStr   
2D3A   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2D45   CD C8 0A               CALL   flushBuffer   
2D48                          ;*Macro unroll:  expect "5 :a{$a};^",5
2D48   E1                     POP   HL   
2D49   E5                     PUSH   HL   
2D4A   11 05 00               LD   DE,5   
2D4D   B7                     OR   A   
2D4E   ED 52                  SBC   HL,DE   
2D50   7D                     LD   A,L   
2D51   B4                     OR   H   
2D52   CA B7 2D               JP   Z,expectM_0_2722S46   
2D55   CD 40 0B               CALL   printStr   
2D58   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2D69   CD 40 0B               CALL   printStr   
2D6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7B   21 05 00               LD   hl,5   
2D7E   E5                     PUSH   hl   
2D7F   E5                     PUSH   hl   
2D80   CD 5F 0C               CALL   run   
2D83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D8B   CD C8 0A               CALL   flushBuffer   
2D8E   CD 40 0B               CALL   printStr   
2D91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9E   E1                     POP   hl   
2D9F   E5                     PUSH   hl   
2DA0   E5                     PUSH   hl   
2DA1   CD 5F 0C               CALL   run   
2DA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DB3   CD C8 0A               CALL   flushBuffer   
2DB6   76                     HALT      
2DB7                EXPECTM_0_2722S46:      
2DB7   E1                     POP   HL   
2DB8                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2DB8   31 00 49               LD   SP,STACK   
2DBB   CD 88 0B               CALL   coldInit   
2DBE   CD E6 47               CALL   execStr   
2DC1   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2DCE   CD C8 0A               CALL   flushBuffer   
2DD1                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2DD1   E1                     POP   HL   
2DD2   E5                     PUSH   HL   
2DD3   11 05 00               LD   DE,5   
2DD6   B7                     OR   A   
2DD7   ED 52                  SBC   HL,DE   
2DD9   7D                     LD   A,L   
2DDA   B4                     OR   H   
2DDB   CA 42 2E               JP   Z,expectM_0_2723S46   
2DDE   CD 40 0B               CALL   printStr   
2DE1   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2DF4   CD 40 0B               CALL   printStr   
2DF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E06   21 05 00               LD   hl,5   
2E09   E5                     PUSH   hl   
2E0A   E5                     PUSH   hl   
2E0B   CD 5F 0C               CALL   run   
2E0E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E16   CD C8 0A               CALL   flushBuffer   
2E19   CD 40 0B               CALL   printStr   
2E1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E29   E1                     POP   hl   
2E2A   E5                     PUSH   hl   
2E2B   E5                     PUSH   hl   
2E2C   CD 5F 0C               CALL   run   
2E2F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E3E   CD C8 0A               CALL   flushBuffer   
2E41   76                     HALT      
2E42                EXPECTM_0_2723S46:      
2E42   E1                     POP   HL   
2E43                          ;*Macro unroll:  test ":a{{2}^};^", 2
2E43   31 00 49               LD   SP,STACK   
2E46   CD 88 0B               CALL   coldInit   
2E49   CD E6 47               CALL   execStr   
2E4C   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2E57   CD C8 0A               CALL   flushBuffer   
2E5A                          ;*Macro unroll:  expect ":a{{2}^};^",2
2E5A   E1                     POP   HL   
2E5B   E5                     PUSH   HL   
2E5C   11 02 00               LD   DE,2   
2E5F   B7                     OR   A   
2E60   ED 52                  SBC   HL,DE   
2E62   7D                     LD   A,L   
2E63   B4                     OR   H   
2E64   CA C9 2E               JP   Z,expectM_0_2724S46   
2E67   CD 40 0B               CALL   printStr   
2E6A   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2E7B   CD 40 0B               CALL   printStr   
2E7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E8D   21 02 00               LD   hl,2   
2E90   E5                     PUSH   hl   
2E91   E5                     PUSH   hl   
2E92   CD 5F 0C               CALL   run   
2E95   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E9D   CD C8 0A               CALL   flushBuffer   
2EA0   CD 40 0B               CALL   printStr   
2EA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EB0   E1                     POP   hl   
2EB1   E5                     PUSH   hl   
2EB2   E5                     PUSH   hl   
2EB3   CD 5F 0C               CALL   run   
2EB6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EC5   CD C8 0A               CALL   flushBuffer   
2EC8   76                     HALT      
2EC9                EXPECTM_0_2724S46:      
2EC9   E1                     POP   HL   
2ECA                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2ECA   31 00 49               LD   SP,STACK   
2ECD   CD 88 0B               CALL   coldInit   
2ED0   CD E6 47               CALL   execStr   
2ED3   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2EE3   CD C8 0A               CALL   flushBuffer   
2EE6                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2EE6   E1                     POP   HL   
2EE7   E5                     PUSH   HL   
2EE8   11 05 00               LD   DE,5   
2EEB   B7                     OR   A   
2EEC   ED 52                  SBC   HL,DE   
2EEE   7D                     LD   A,L   
2EEF   B4                     OR   H   
2EF0   CA 5A 2F               JP   Z,expectM_0_2725S46   
2EF3   CD 40 0B               CALL   printStr   
2EF6   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2F0C   CD 40 0B               CALL   printStr   
2F0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F1E   21 05 00               LD   hl,5   
2F21   E5                     PUSH   hl   
2F22   E5                     PUSH   hl   
2F23   CD 5F 0C               CALL   run   
2F26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F2E   CD C8 0A               CALL   flushBuffer   
2F31   CD 40 0B               CALL   printStr   
2F34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F41   E1                     POP   hl   
2F42   E5                     PUSH   hl   
2F43   E5                     PUSH   hl   
2F44   CD 5F 0C               CALL   run   
2F47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F56   CD C8 0A               CALL   flushBuffer   
2F59   76                     HALT      
2F5A                EXPECTM_0_2725S46:      
2F5A   E1                     POP   HL   
2F5B                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2F5B   31 00 49               LD   SP,STACK   
2F5E   CD 88 0B               CALL   coldInit   
2F61   CD E6 47               CALL   execStr   
2F64   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2F75   CD C8 0A               CALL   flushBuffer   
2F78                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2F78   E1                     POP   HL   
2F79   E5                     PUSH   HL   
2F7A   11 01 00               LD   DE,1   
2F7D   B7                     OR   A   
2F7E   ED 52                  SBC   HL,DE   
2F80   7D                     LD   A,L   
2F81   B4                     OR   H   
2F82   CA ED 2F               JP   Z,expectM_0_2726S46   
2F85   CD 40 0B               CALL   printStr   
2F88   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2F9F   CD 40 0B               CALL   printStr   
2FA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FB1   21 01 00               LD   hl,1   
2FB4   E5                     PUSH   hl   
2FB5   E5                     PUSH   hl   
2FB6   CD 5F 0C               CALL   run   
2FB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FC1   CD C8 0A               CALL   flushBuffer   
2FC4   CD 40 0B               CALL   printStr   
2FC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FD4   E1                     POP   hl   
2FD5   E5                     PUSH   hl   
2FD6   E5                     PUSH   hl   
2FD7   CD 5F 0C               CALL   run   
2FDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FE9   CD C8 0A               CALL   flushBuffer   
2FEC   76                     HALT      
2FED                EXPECTM_0_2726S46:      
2FED   E1                     POP   HL   
2FEE                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2FEE   31 00 49               LD   SP,STACK   
2FF1   CD 88 0B               CALL   coldInit   
2FF4   CD E6 47               CALL   execStr   
2FF7   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
300B   CD C8 0A               CALL   flushBuffer   
300E                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
300E   E1                     POP   HL   
300F   E5                     PUSH   HL   
3010   11 07 00               LD   DE,7   
3013   B7                     OR   A   
3014   ED 52                  SBC   HL,DE   
3016   7D                     LD   A,L   
3017   B4                     OR   H   
3018   CA 86 30               JP   Z,expectM_0_2727S46   
301B   CD 40 0B               CALL   printStr   
301E   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
3038   CD 40 0B               CALL   printStr   
303B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
304A   21 07 00               LD   hl,7   
304D   E5                     PUSH   hl   
304E   E5                     PUSH   hl   
304F   CD 5F 0C               CALL   run   
3052   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
305A   CD C8 0A               CALL   flushBuffer   
305D   CD 40 0B               CALL   printStr   
3060   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
306D   E1                     POP   hl   
306E   E5                     PUSH   hl   
306F   E5                     PUSH   hl   
3070   CD 5F 0C               CALL   run   
3073   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3082   CD C8 0A               CALL   flushBuffer   
3085   76                     HALT      
3086                EXPECTM_0_2727S46:      
3086   E1                     POP   HL   
3087                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
3087   31 00 49               LD   SP,STACK   
308A   CD 88 0B               CALL   coldInit   
308D   CD E6 47               CALL   execStr   
3090   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
30A6   CD C8 0A               CALL   flushBuffer   
30A9                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
30A9   E1                     POP   HL   
30AA   E5                     PUSH   HL   
30AB   11 06 00               LD   DE,6   
30AE   B7                     OR   A   
30AF   ED 52                  SBC   HL,DE   
30B1   7D                     LD   A,L   
30B2   B4                     OR   H   
30B3   CA 23 31               JP   Z,expectM_0_2728S46   
30B6   CD 40 0B               CALL   printStr   
30B9   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
30D5   CD 40 0B               CALL   printStr   
30D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E7   21 06 00               LD   hl,6   
30EA   E5                     PUSH   hl   
30EB   E5                     PUSH   hl   
30EC   CD 5F 0C               CALL   run   
30EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F7   CD C8 0A               CALL   flushBuffer   
30FA   CD 40 0B               CALL   printStr   
30FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
310A   E1                     POP   hl   
310B   E5                     PUSH   hl   
310C   E5                     PUSH   hl   
310D   CD 5F 0C               CALL   run   
3110   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
311F   CD C8 0A               CALL   flushBuffer   
3122   76                     HALT      
3123                EXPECTM_0_2728S46:      
3123   E1                     POP   HL   
3124                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
3124   31 00 49               LD   SP,STACK   
3127   CD 88 0B               CALL   coldInit   
312A   CD E6 47               CALL   execStr   
312D   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
313C   CD C8 0A               CALL   flushBuffer   
313F                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
313F   E1                     POP   HL   
3140   E5                     PUSH   HL   
3141   11 02 00               LD   DE,2   
3144   B7                     OR   A   
3145   ED 52                  SBC   HL,DE   
3147   7D                     LD   A,L   
3148   B4                     OR   H   
3149   CA B2 31               JP   Z,expectM_0_2729S46   
314C   CD 40 0B               CALL   printStr   
314F   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
3164   CD 40 0B               CALL   printStr   
3167   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3176   21 02 00               LD   hl,2   
3179   E5                     PUSH   hl   
317A   E5                     PUSH   hl   
317B   CD 5F 0C               CALL   run   
317E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3186   CD C8 0A               CALL   flushBuffer   
3189   CD 40 0B               CALL   printStr   
318C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3199   E1                     POP   hl   
319A   E5                     PUSH   hl   
319B   E5                     PUSH   hl   
319C   CD 5F 0C               CALL   run   
319F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31AE   CD C8 0A               CALL   flushBuffer   
31B1   76                     HALT      
31B2                EXPECTM_0_2729S46:      
31B2   E1                     POP   HL   
31B3                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
31B3   31 00 49               LD   SP,STACK   
31B6   CD 88 0B               CALL   coldInit   
31B9   CD E6 47               CALL   execStr   
31BC   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
31CE   CD C8 0A               CALL   flushBuffer   
31D1                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
31D1   E1                     POP   HL   
31D2   E5                     PUSH   HL   
31D3   11 01 00               LD   DE,1   
31D6   B7                     OR   A   
31D7   ED 52                  SBC   HL,DE   
31D9   7D                     LD   A,L   
31DA   B4                     OR   H   
31DB   CA 47 32               JP   Z,expectM_0_2730S46   
31DE   CD 40 0B               CALL   printStr   
31E1   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
31F9   CD 40 0B               CALL   printStr   
31FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
320B   21 01 00               LD   hl,1   
320E   E5                     PUSH   hl   
320F   E5                     PUSH   hl   
3210   CD 5F 0C               CALL   run   
3213   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
321B   CD C8 0A               CALL   flushBuffer   
321E   CD 40 0B               CALL   printStr   
3221   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
322E   E1                     POP   hl   
322F   E5                     PUSH   hl   
3230   E5                     PUSH   hl   
3231   CD 5F 0C               CALL   run   
3234   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3243   CD C8 0A               CALL   flushBuffer   
3246   76                     HALT      
3247                EXPECTM_0_2730S46:      
3247   E1                     POP   HL   
3248                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3248   31 00 49               LD   SP,STACK   
324B   CD 88 0B               CALL   coldInit   
324E   CD E6 47               CALL   execStr   
3251   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
3264   CD C8 0A               CALL   flushBuffer   
3267                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
3267   E1                     POP   HL   
3268   E5                     PUSH   HL   
3269   11 02 00               LD   DE,2   
326C   B7                     OR   A   
326D   ED 52                  SBC   HL,DE   
326F   7D                     LD   A,L   
3270   B4                     OR   H   
3271   CA DE 32               JP   Z,expectM_0_2731S46   
3274   CD 40 0B               CALL   printStr   
3277   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3290   CD 40 0B               CALL   printStr   
3293   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A2   21 02 00               LD   hl,2   
32A5   E5                     PUSH   hl   
32A6   E5                     PUSH   hl   
32A7   CD 5F 0C               CALL   run   
32AA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32B2   CD C8 0A               CALL   flushBuffer   
32B5   CD 40 0B               CALL   printStr   
32B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C5   E1                     POP   hl   
32C6   E5                     PUSH   hl   
32C7   E5                     PUSH   hl   
32C8   CD 5F 0C               CALL   run   
32CB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32DA   CD C8 0A               CALL   flushBuffer   
32DD   76                     HALT      
32DE                EXPECTM_0_2731S46:      
32DE   E1                     POP   HL   
32DF                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
32DF   31 00 49               LD   SP,STACK   
32E2   CD 88 0B               CALL   coldInit   
32E5   CD E6 47               CALL   execStr   
32E8   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
32FC   CD C8 0A               CALL   flushBuffer   
32FF                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
32FF   E1                     POP   HL   
3300   E5                     PUSH   HL   
3301   11 02 00               LD   DE,2   
3304   B7                     OR   A   
3305   ED 52                  SBC   HL,DE   
3307   7D                     LD   A,L   
3308   B4                     OR   H   
3309   CA 77 33               JP   Z,expectM_0_2732S46   
330C   CD 40 0B               CALL   printStr   
330F   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3329   CD 40 0B               CALL   printStr   
332C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
333B   21 02 00               LD   hl,2   
333E   E5                     PUSH   hl   
333F   E5                     PUSH   hl   
3340   CD 5F 0C               CALL   run   
3343   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
334B   CD C8 0A               CALL   flushBuffer   
334E   CD 40 0B               CALL   printStr   
3351   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
335E   E1                     POP   hl   
335F   E5                     PUSH   hl   
3360   E5                     PUSH   hl   
3361   CD 5F 0C               CALL   run   
3364   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3373   CD C8 0A               CALL   flushBuffer   
3376   76                     HALT      
3377                EXPECTM_0_2732S46:      
3377   E1                     POP   HL   
3378                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3378   31 00 49               LD   SP,STACK   
337B   CD 88 0B               CALL   coldInit   
337E   CD E6 47               CALL   execStr   
3381   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
3394   CD C8 0A               CALL   flushBuffer   
3397                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
3397   E1                     POP   HL   
3398   E5                     PUSH   HL   
3399   11 02 00               LD   DE,2   
339C   B7                     OR   A   
339D   ED 52                  SBC   HL,DE   
339F   7D                     LD   A,L   
33A0   B4                     OR   H   
33A1   CA 0E 34               JP   Z,expectM_0_2733S46   
33A4   CD 40 0B               CALL   printStr   
33A7   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
33C0   CD 40 0B               CALL   printStr   
33C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33D2   21 02 00               LD   hl,2   
33D5   E5                     PUSH   hl   
33D6   E5                     PUSH   hl   
33D7   CD 5F 0C               CALL   run   
33DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33E2   CD C8 0A               CALL   flushBuffer   
33E5   CD 40 0B               CALL   printStr   
33E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33F5   E1                     POP   hl   
33F6   E5                     PUSH   hl   
33F7   E5                     PUSH   hl   
33F8   CD 5F 0C               CALL   run   
33FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
340A   CD C8 0A               CALL   flushBuffer   
340D   76                     HALT      
340E                EXPECTM_0_2733S46:      
340E   E1                     POP   HL   
340F                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
340F   31 00 49               LD   SP,STACK   
3412   CD 88 0B               CALL   coldInit   
3415   CD E6 47               CALL   execStr   
3418   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
3432   CD C8 0A               CALL   flushBuffer   
3435                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
3435   E1                     POP   HL   
3436   E5                     PUSH   HL   
3437   11 05 00               LD   DE,5   
343A   B7                     OR   A   
343B   ED 52                  SBC   HL,DE   
343D   7D                     LD   A,L   
343E   B4                     OR   H   
343F   CA B3 34               JP   Z,expectM_0_2734S46   
3442   CD 40 0B               CALL   printStr   
3445   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
3465   CD 40 0B               CALL   printStr   
3468   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3477   21 05 00               LD   hl,5   
347A   E5                     PUSH   hl   
347B   E5                     PUSH   hl   
347C   CD 5F 0C               CALL   run   
347F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3487   CD C8 0A               CALL   flushBuffer   
348A   CD 40 0B               CALL   printStr   
348D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
349A   E1                     POP   hl   
349B   E5                     PUSH   hl   
349C   E5                     PUSH   hl   
349D   CD 5F 0C               CALL   run   
34A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34AF   CD C8 0A               CALL   flushBuffer   
34B2   76                     HALT      
34B3                EXPECTM_0_2734S46:      
34B3   E1                     POP   HL   
34B4                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
34B4   31 00 49               LD   SP,STACK   
34B7   CD 88 0B               CALL   coldInit   
34BA   CD E6 47               CALL   execStr   
34BD   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
34CE   CD C8 0A               CALL   flushBuffer   
34D1                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
34D1   E1                     POP   HL   
34D2   E5                     PUSH   HL   
34D3   11 02 00               LD   DE,2   
34D6   B7                     OR   A   
34D7   ED 52                  SBC   HL,DE   
34D9   7D                     LD   A,L   
34DA   B4                     OR   H   
34DB   CA 46 35               JP   Z,expectM_0_2735S46   
34DE   CD 40 0B               CALL   printStr   
34E1   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
34F8   CD 40 0B               CALL   printStr   
34FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
350A   21 02 00               LD   hl,2   
350D   E5                     PUSH   hl   
350E   E5                     PUSH   hl   
350F   CD 5F 0C               CALL   run   
3512   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
351A   CD C8 0A               CALL   flushBuffer   
351D   CD 40 0B               CALL   printStr   
3520   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
352D   E1                     POP   hl   
352E   E5                     PUSH   hl   
352F   E5                     PUSH   hl   
3530   CD 5F 0C               CALL   run   
3533   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3542   CD C8 0A               CALL   flushBuffer   
3545   76                     HALT      
3546                EXPECTM_0_2735S46:      
3546   E1                     POP   HL   
3547                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
3547   31 00 49               LD   SP,STACK   
354A   CD 88 0B               CALL   coldInit   
354D   CD E6 47               CALL   execStr   
3550   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
3567   CD C8 0A               CALL   flushBuffer   
356A                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
356A   E1                     POP   HL   
356B   E5                     PUSH   HL   
356C   11 64 00               LD   DE,100   
356F   B7                     OR   A   
3570   ED 52                  SBC   HL,DE   
3572   7D                     LD   A,L   
3573   B4                     OR   H   
3574   CA E5 35               JP   Z,expectM_0_2736S46   
3577   CD 40 0B               CALL   printStr   
357A   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
3597   CD 40 0B               CALL   printStr   
359A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35A9   21 64 00               LD   hl,100   
35AC   E5                     PUSH   hl   
35AD   E5                     PUSH   hl   
35AE   CD 5F 0C               CALL   run   
35B1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35B9   CD C8 0A               CALL   flushBuffer   
35BC   CD 40 0B               CALL   printStr   
35BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35CC   E1                     POP   hl   
35CD   E5                     PUSH   hl   
35CE   E5                     PUSH   hl   
35CF   CD 5F 0C               CALL   run   
35D2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35E1   CD C8 0A               CALL   flushBuffer   
35E4   76                     HALT      
35E5                EXPECTM_0_2736S46:      
35E5   E1                     POP   HL   
35E6                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
35E6   31 00 49               LD   SP,STACK   
35E9   CD 88 0B               CALL   coldInit   
35EC   CD E6 47               CALL   execStr   
35EF   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
3607   CD C8 0A               CALL   flushBuffer   
360A                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
360A   E1                     POP   HL   
360B   E5                     PUSH   HL   
360C   11 01 00               LD   DE,1   
360F   B7                     OR   A   
3610   ED 52                  SBC   HL,DE   
3612   7D                     LD   A,L   
3613   B4                     OR   H   
3614   CA 86 36               JP   Z,expectM_0_2737S46   
3617   CD 40 0B               CALL   printStr   
361A   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
3638   CD 40 0B               CALL   printStr   
363B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
364A   21 01 00               LD   hl,1   
364D   E5                     PUSH   hl   
364E   E5                     PUSH   hl   
364F   CD 5F 0C               CALL   run   
3652   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
365A   CD C8 0A               CALL   flushBuffer   
365D   CD 40 0B               CALL   printStr   
3660   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
366D   E1                     POP   hl   
366E   E5                     PUSH   hl   
366F   E5                     PUSH   hl   
3670   CD 5F 0C               CALL   run   
3673   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3682   CD C8 0A               CALL   flushBuffer   
3685   76                     HALT      
3686                EXPECTM_0_2737S46:      
3686   E1                     POP   HL   
3687                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
3687   31 00 49               LD   SP,STACK   
368A   CD 88 0B               CALL   coldInit   
368D   CD E6 47               CALL   execStr   
3690   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
36A9   CD C8 0A               CALL   flushBuffer   
36AC                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
36AC   E1                     POP   HL   
36AD   E5                     PUSH   HL   
36AE   11 02 00               LD   DE,2   
36B1   B7                     OR   A   
36B2   ED 52                  SBC   HL,DE   
36B4   7D                     LD   A,L   
36B5   B4                     OR   H   
36B6   CA 29 37               JP   Z,expectM_0_2738S46   
36B9   CD 40 0B               CALL   printStr   
36BC   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
36DB   CD 40 0B               CALL   printStr   
36DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36ED   21 02 00               LD   hl,2   
36F0   E5                     PUSH   hl   
36F1   E5                     PUSH   hl   
36F2   CD 5F 0C               CALL   run   
36F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36FD   CD C8 0A               CALL   flushBuffer   
3700   CD 40 0B               CALL   printStr   
3703   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3710   E1                     POP   hl   
3711   E5                     PUSH   hl   
3712   E5                     PUSH   hl   
3713   CD 5F 0C               CALL   run   
3716   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3725   CD C8 0A               CALL   flushBuffer   
3728   76                     HALT      
3729                EXPECTM_0_2738S46:      
3729   E1                     POP   HL   
372A                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
372A   31 00 49               LD   SP,STACK   
372D   CD 88 0B               CALL   coldInit   
3730   CD E6 47               CALL   execStr   
3733   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3752   CD C8 0A               CALL   flushBuffer   
3755                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
3755   E1                     POP   HL   
3756   E5                     PUSH   HL   
3757   11 0B 00               LD   DE,11   
375A   B7                     OR   A   
375B   ED 52                  SBC   HL,DE   
375D   7D                     LD   A,L   
375E   B4                     OR   H   
375F   CA D8 37               JP   Z,expectM_0_2739S46   
3762   CD 40 0B               CALL   printStr   
3765   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
378A   CD 40 0B               CALL   printStr   
378D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
379C   21 0B 00               LD   hl,11   
379F   E5                     PUSH   hl   
37A0   E5                     PUSH   hl   
37A1   CD 5F 0C               CALL   run   
37A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37AC   CD C8 0A               CALL   flushBuffer   
37AF   CD 40 0B               CALL   printStr   
37B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37BF   E1                     POP   hl   
37C0   E5                     PUSH   hl   
37C1   E5                     PUSH   hl   
37C2   CD 5F 0C               CALL   run   
37C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37D4   CD C8 0A               CALL   flushBuffer   
37D7   76                     HALT      
37D8                EXPECTM_0_2739S46:      
37D8   E1                     POP   HL   
37D9                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
37D9   31 00 49               LD   SP,STACK   
37DC   CD 88 0B               CALL   coldInit   
37DF   CD E6 47               CALL   execStr   
37E2   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3801   CD C8 0A               CALL   flushBuffer   
3804                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
3804   E1                     POP   HL   
3805   E5                     PUSH   HL   
3806   11 15 00               LD   DE,21   
3809   B7                     OR   A   
380A   ED 52                  SBC   HL,DE   
380C   7D                     LD   A,L   
380D   B4                     OR   H   
380E   CA 87 38               JP   Z,expectM_0_2740S46   
3811   CD 40 0B               CALL   printStr   
3814   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3839   CD 40 0B               CALL   printStr   
383C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
384B   21 15 00               LD   hl,21   
384E   E5                     PUSH   hl   
384F   E5                     PUSH   hl   
3850   CD 5F 0C               CALL   run   
3853   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
385B   CD C8 0A               CALL   flushBuffer   
385E   CD 40 0B               CALL   printStr   
3861   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
386E   E1                     POP   hl   
386F   E5                     PUSH   hl   
3870   E5                     PUSH   hl   
3871   CD 5F 0C               CALL   run   
3874   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3883   CD C8 0A               CALL   flushBuffer   
3886   76                     HALT      
3887                EXPECTM_0_2740S46:      
3887   E1                     POP   HL   
3888                          ;*Macro unroll:  test "[10 20 30] 1%", 20
3888   31 00 49               LD   SP,STACK   
388B   CD 88 0B               CALL   coldInit   
388E   CD E6 47               CALL   execStr   
3891   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
389F   CD C8 0A               CALL   flushBuffer   
38A2                          ;*Macro unroll:  expect "[10 20 30] 1%",20
38A2   E1                     POP   HL   
38A3   E5                     PUSH   HL   
38A4   11 14 00               LD   DE,20   
38A7   B7                     OR   A   
38A8   ED 52                  SBC   HL,DE   
38AA   7D                     LD   A,L   
38AB   B4                     OR   H   
38AC   CA 14 39               JP   Z,expectM_0_2741S46   
38AF   CD 40 0B               CALL   printStr   
38B2   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
38C6   CD 40 0B               CALL   printStr   
38C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D8   21 14 00               LD   hl,20   
38DB   E5                     PUSH   hl   
38DC   E5                     PUSH   hl   
38DD   CD 5F 0C               CALL   run   
38E0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38E8   CD C8 0A               CALL   flushBuffer   
38EB   CD 40 0B               CALL   printStr   
38EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38FB   E1                     POP   hl   
38FC   E5                     PUSH   hl   
38FD   E5                     PUSH   hl   
38FE   CD 5F 0C               CALL   run   
3901   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3910   CD C8 0A               CALL   flushBuffer   
3913   76                     HALT      
3914                EXPECTM_0_2741S46:      
3914   E1                     POP   HL   
3915                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3915   31 00 49               LD   SP,STACK   
3918   CD 88 0B               CALL   coldInit   
391B   CD E6 47               CALL   execStr   
391E   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
392F   CD C8 0A               CALL   flushBuffer   
3932                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
3932   E1                     POP   HL   
3933   E5                     PUSH   HL   
3934   11 04 00               LD   DE,4   
3937   B7                     OR   A   
3938   ED 52                  SBC   HL,DE   
393A   7D                     LD   A,L   
393B   B4                     OR   H   
393C   CA A7 39               JP   Z,expectM_0_2742S46   
393F   CD 40 0B               CALL   printStr   
3942   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3959   CD 40 0B               CALL   printStr   
395C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
396B   21 04 00               LD   hl,4   
396E   E5                     PUSH   hl   
396F   E5                     PUSH   hl   
3970   CD 5F 0C               CALL   run   
3973   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
397B   CD C8 0A               CALL   flushBuffer   
397E   CD 40 0B               CALL   printStr   
3981   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
398E   E1                     POP   hl   
398F   E5                     PUSH   hl   
3990   E5                     PUSH   hl   
3991   CD 5F 0C               CALL   run   
3994   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39A3   CD C8 0A               CALL   flushBuffer   
39A6   76                     HALT      
39A7                EXPECTM_0_2742S46:      
39A7   E1                     POP   HL   
39A8                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
39A8   31 00 49               LD   SP,STACK   
39AB   CD 88 0B               CALL   coldInit   
39AE   CD E6 47               CALL   execStr   
39B1   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
39BF   CD C8 0A               CALL   flushBuffer   
39C2                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
39C2   E1                     POP   HL   
39C3   E5                     PUSH   HL   
39C4   11 02 00               LD   DE,2   
39C7   B7                     OR   A   
39C8   ED 52                  SBC   HL,DE   
39CA   7D                     LD   A,L   
39CB   B4                     OR   H   
39CC   CA 34 3A               JP   Z,expectM_0_2743S46   
39CF   CD 40 0B               CALL   printStr   
39D2   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
39E6   CD 40 0B               CALL   printStr   
39E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F8   21 02 00               LD   hl,2   
39FB   E5                     PUSH   hl   
39FC   E5                     PUSH   hl   
39FD   CD 5F 0C               CALL   run   
3A00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A08   CD C8 0A               CALL   flushBuffer   
3A0B   CD 40 0B               CALL   printStr   
3A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A1B   E1                     POP   hl   
3A1C   E5                     PUSH   hl   
3A1D   E5                     PUSH   hl   
3A1E   CD 5F 0C               CALL   run   
3A21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A30   CD C8 0A               CALL   flushBuffer   
3A33   76                     HALT      
3A34                EXPECTM_0_2743S46:      
3A34   E1                     POP   HL   
3A35                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3A35   31 00 49               LD   SP,STACK   
3A38   CD 88 0B               CALL   coldInit   
3A3B   CD E6 47               CALL   execStr   
3A3E   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3A52   CD C8 0A               CALL   flushBuffer   
3A55                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3A55   E1                     POP   HL   
3A56   E5                     PUSH   HL   
3A57   11 42 00               LD   DE,66   
3A5A   B7                     OR   A   
3A5B   ED 52                  SBC   HL,DE   
3A5D   7D                     LD   A,L   
3A5E   B4                     OR   H   
3A5F   CA CD 3A               JP   Z,expectM_0_2744S46   
3A62   CD 40 0B               CALL   printStr   
3A65   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
3A7F   CD 40 0B               CALL   printStr   
3A82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A91   21 42 00               LD   hl,66   
3A94   E5                     PUSH   hl   
3A95   E5                     PUSH   hl   
3A96   CD 5F 0C               CALL   run   
3A99   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AA1   CD C8 0A               CALL   flushBuffer   
3AA4   CD 40 0B               CALL   printStr   
3AA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AB4   E1                     POP   hl   
3AB5   E5                     PUSH   hl   
3AB6   E5                     PUSH   hl   
3AB7   CD 5F 0C               CALL   run   
3ABA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AC9   CD C8 0A               CALL   flushBuffer   
3ACC   76                     HALT      
3ACD                EXPECTM_0_2744S46:      
3ACD   E1                     POP   HL   
3ACE                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3ACE   31 00 49               LD   SP,STACK   
3AD1   CD 88 0B               CALL   coldInit   
3AD4   CD E6 47               CALL   execStr   
3AD7   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3AEB   CD C8 0A               CALL   flushBuffer   
3AEE                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3AEE   E1                     POP   HL   
3AEF   E5                     PUSH   HL   
3AF0   11 0A 00               LD   DE,10   
3AF3   B7                     OR   A   
3AF4   ED 52                  SBC   HL,DE   
3AF6   7D                     LD   A,L   
3AF7   B4                     OR   H   
3AF8   CA 66 3B               JP   Z,expectM_0_2745S46   
3AFB   CD 40 0B               CALL   printStr   
3AFE   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3B18   CD 40 0B               CALL   printStr   
3B1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B2A   21 0A 00               LD   hl,10   
3B2D   E5                     PUSH   hl   
3B2E   E5                     PUSH   hl   
3B2F   CD 5F 0C               CALL   run   
3B32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B3A   CD C8 0A               CALL   flushBuffer   
3B3D   CD 40 0B               CALL   printStr   
3B40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B4D   E1                     POP   hl   
3B4E   E5                     PUSH   hl   
3B4F   E5                     PUSH   hl   
3B50   CD 5F 0C               CALL   run   
3B53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B62   CD C8 0A               CALL   flushBuffer   
3B65   76                     HALT      
3B66                EXPECTM_0_2745S46:      
3B66   E1                     POP   HL   
3B67                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
3B67   31 00 49               LD   SP,STACK   
3B6A   CD 88 0B               CALL   coldInit   
3B6D   CD E6 47               CALL   execStr   
3B70   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3B8C   CD C8 0A               CALL   flushBuffer   
3B8F                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3B8F   E1                     POP   HL   
3B90   E5                     PUSH   HL   
3B91   11 0A 00               LD   DE,10   
3B94   B7                     OR   A   
3B95   ED 52                  SBC   HL,DE   
3B97   7D                     LD   A,L   
3B98   B4                     OR   H   
3B99   CA 0F 3C               JP   Z,expectM_0_2746S46   
3B9C   CD 40 0B               CALL   printStr   
3B9F   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3BC1   CD 40 0B               CALL   printStr   
3BC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BD3   21 0A 00               LD   hl,10   
3BD6   E5                     PUSH   hl   
3BD7   E5                     PUSH   hl   
3BD8   CD 5F 0C               CALL   run   
3BDB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BE3   CD C8 0A               CALL   flushBuffer   
3BE6   CD 40 0B               CALL   printStr   
3BE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BF6   E1                     POP   hl   
3BF7   E5                     PUSH   hl   
3BF8   E5                     PUSH   hl   
3BF9   CD 5F 0C               CALL   run   
3BFC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C0B   CD C8 0A               CALL   flushBuffer   
3C0E   76                     HALT      
3C0F                EXPECTM_0_2746S46:      
3C0F   E1                     POP   HL   
3C10                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3C10   31 00 49               LD   SP,STACK   
3C13   CD 88 0B               CALL   coldInit   
3C16   CD E6 47               CALL   execStr   
3C19   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3C39   CD C8 0A               CALL   flushBuffer   
3C3C                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3C3C   E1                     POP   HL   
3C3D   E5                     PUSH   HL   
3C3E   11 0A 00               LD   DE,10   
3C41   B7                     OR   A   
3C42   ED 52                  SBC   HL,DE   
3C44   7D                     LD   A,L   
3C45   B4                     OR   H   
3C46   CA C0 3C               JP   Z,expectM_0_2747S46   
3C49   CD 40 0B               CALL   printStr   
3C4C   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3C72   CD 40 0B               CALL   printStr   
3C75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C84   21 0A 00               LD   hl,10   
3C87   E5                     PUSH   hl   
3C88   E5                     PUSH   hl   
3C89   CD 5F 0C               CALL   run   
3C8C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C94   CD C8 0A               CALL   flushBuffer   
3C97   CD 40 0B               CALL   printStr   
3C9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CA7   E1                     POP   hl   
3CA8   E5                     PUSH   hl   
3CA9   E5                     PUSH   hl   
3CAA   CD 5F 0C               CALL   run   
3CAD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CBC   CD C8 0A               CALL   flushBuffer   
3CBF   76                     HALT      
3CC0                EXPECTM_0_2747S46:      
3CC0   E1                     POP   HL   
3CC1                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3CC1   31 00 49               LD   SP,STACK   
3CC4   CD 88 0B               CALL   coldInit   
3CC7   CD E6 47               CALL   execStr   
3CCA   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3CEA   CD C8 0A               CALL   flushBuffer   
3CED                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3CED   E1                     POP   HL   
3CEE   E5                     PUSH   HL   
3CEF   11 14 00               LD   DE,20   
3CF2   B7                     OR   A   
3CF3   ED 52                  SBC   HL,DE   
3CF5   7D                     LD   A,L   
3CF6   B4                     OR   H   
3CF7   CA 71 3D               JP   Z,expectM_0_2748S46   
3CFA   CD 40 0B               CALL   printStr   
3CFD   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3D23   CD 40 0B               CALL   printStr   
3D26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D35   21 14 00               LD   hl,20   
3D38   E5                     PUSH   hl   
3D39   E5                     PUSH   hl   
3D3A   CD 5F 0C               CALL   run   
3D3D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D45   CD C8 0A               CALL   flushBuffer   
3D48   CD 40 0B               CALL   printStr   
3D4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D58   E1                     POP   hl   
3D59   E5                     PUSH   hl   
3D5A   E5                     PUSH   hl   
3D5B   CD 5F 0C               CALL   run   
3D5E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D6D   CD C8 0A               CALL   flushBuffer   
3D70   76                     HALT      
3D71                EXPECTM_0_2748S46:      
3D71   E1                     POP   HL   
3D72                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3D72   31 00 49               LD   SP,STACK   
3D75   CD 88 0B               CALL   coldInit   
3D78   CD E6 47               CALL   execStr   
3D7B   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3D8F   CD C8 0A               CALL   flushBuffer   
3D92                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3D92   E1                     POP   HL   
3D93   E5                     PUSH   HL   
3D94   11 04 00               LD   DE,4   
3D97   B7                     OR   A   
3D98   ED 52                  SBC   HL,DE   
3D9A   7D                     LD   A,L   
3D9B   B4                     OR   H   
3D9C   CA 0A 3E               JP   Z,expectM_0_2749S46   
3D9F   CD 40 0B               CALL   printStr   
3DA2   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3DBC   CD 40 0B               CALL   printStr   
3DBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DCE   21 04 00               LD   hl,4   
3DD1   E5                     PUSH   hl   
3DD2   E5                     PUSH   hl   
3DD3   CD 5F 0C               CALL   run   
3DD6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DDE   CD C8 0A               CALL   flushBuffer   
3DE1   CD 40 0B               CALL   printStr   
3DE4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DF1   E1                     POP   hl   
3DF2   E5                     PUSH   hl   
3DF3   E5                     PUSH   hl   
3DF4   CD 5F 0C               CALL   run   
3DF7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E06   CD C8 0A               CALL   flushBuffer   
3E09   76                     HALT      
3E0A                EXPECTM_0_2749S46:      
3E0A   E1                     POP   HL   
3E0B                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3E0B   31 00 49               LD   SP,STACK   
3E0E   CD 88 0B               CALL   coldInit   
3E11   CD E6 47               CALL   execStr   
3E14   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3E2E   CD C8 0A               CALL   flushBuffer   
3E31                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3E31   E1                     POP   HL   
3E32   E5                     PUSH   HL   
3E33   11 09 00               LD   DE,9   
3E36   B7                     OR   A   
3E37   ED 52                  SBC   HL,DE   
3E39   7D                     LD   A,L   
3E3A   B4                     OR   H   
3E3B   CA AF 3E               JP   Z,expectM_0_2750S46   
3E3E   CD 40 0B               CALL   printStr   
3E41   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3E61   CD 40 0B               CALL   printStr   
3E64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E73   21 09 00               LD   hl,9   
3E76   E5                     PUSH   hl   
3E77   E5                     PUSH   hl   
3E78   CD 5F 0C               CALL   run   
3E7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E83   CD C8 0A               CALL   flushBuffer   
3E86   CD 40 0B               CALL   printStr   
3E89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E96   E1                     POP   hl   
3E97   E5                     PUSH   hl   
3E98   E5                     PUSH   hl   
3E99   CD 5F 0C               CALL   run   
3E9C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EAB   CD C8 0A               CALL   flushBuffer   
3EAE   76                     HALT      
3EAF                EXPECTM_0_2750S46:      
3EAF   E1                     POP   HL   
3EB0                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3EB0   31 00 49               LD   SP,STACK   
3EB3   CD 88 0B               CALL   coldInit   
3EB6   CD E6 47               CALL   execStr   
3EB9   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3ED1   CD C8 0A               CALL   flushBuffer   
3ED4                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3ED4   E1                     POP   HL   
3ED5   E5                     PUSH   HL   
3ED6   11 06 00               LD   DE,6   
3ED9   B7                     OR   A   
3EDA   ED 52                  SBC   HL,DE   
3EDC   7D                     LD   A,L   
3EDD   B4                     OR   H   
3EDE   CA 50 3F               JP   Z,expectM_0_2751S46   
3EE1   CD 40 0B               CALL   printStr   
3EE4   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3F02   CD 40 0B               CALL   printStr   
3F05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F14   21 06 00               LD   hl,6   
3F17   E5                     PUSH   hl   
3F18   E5                     PUSH   hl   
3F19   CD 5F 0C               CALL   run   
3F1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F24   CD C8 0A               CALL   flushBuffer   
3F27   CD 40 0B               CALL   printStr   
3F2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F37   E1                     POP   hl   
3F38   E5                     PUSH   hl   
3F39   E5                     PUSH   hl   
3F3A   CD 5F 0C               CALL   run   
3F3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F4C   CD C8 0A               CALL   flushBuffer   
3F4F   76                     HALT      
3F50                EXPECTM_0_2751S46:      
3F50   E1                     POP   HL   
3F51                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3F51   31 00 49               LD   SP,STACK   
3F54   CD 88 0B               CALL   coldInit   
3F57   CD E6 47               CALL   execStr   
3F5A   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3F75   CD C8 0A               CALL   flushBuffer   
3F78                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3F78   E1                     POP   HL   
3F79   E5                     PUSH   HL   
3F7A   11 02 00               LD   DE,2   
3F7D   B7                     OR   A   
3F7E   ED 52                  SBC   HL,DE   
3F80   7D                     LD   A,L   
3F81   B4                     OR   H   
3F82   CA F7 3F               JP   Z,expectM_0_2752S46   
3F85   CD 40 0B               CALL   printStr   
3F88   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3FA9   CD 40 0B               CALL   printStr   
3FAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FBB   21 02 00               LD   hl,2   
3FBE   E5                     PUSH   hl   
3FBF   E5                     PUSH   hl   
3FC0   CD 5F 0C               CALL   run   
3FC3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FCB   CD C8 0A               CALL   flushBuffer   
3FCE   CD 40 0B               CALL   printStr   
3FD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FDE   E1                     POP   hl   
3FDF   E5                     PUSH   hl   
3FE0   E5                     PUSH   hl   
3FE1   CD 5F 0C               CALL   run   
3FE4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FF3   CD C8 0A               CALL   flushBuffer   
3FF6   76                     HALT      
3FF7                EXPECTM_0_2752S46:      
3FF7   E1                     POP   HL   
3FF8                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3FF8   31 00 49               LD   SP,STACK   
3FFB   CD 88 0B               CALL   coldInit   
3FFE   CD E6 47               CALL   execStr   
4001   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4027   CD C8 0A               CALL   flushBuffer   
402A                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
402A   E1                     POP   HL   
402B   E5                     PUSH   HL   
402C   11 0A 00               LD   DE,10   
402F   B7                     OR   A   
4030   ED 52                  SBC   HL,DE   
4032   7D                     LD   A,L   
4033   B4                     OR   H   
4034   CA B4 40               JP   Z,expectM_0_2753S46   
4037   CD 40 0B               CALL   printStr   
403A   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4066   CD 40 0B               CALL   printStr   
4069   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4078   21 0A 00               LD   hl,10   
407B   E5                     PUSH   hl   
407C   E5                     PUSH   hl   
407D   CD 5F 0C               CALL   run   
4080   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4088   CD C8 0A               CALL   flushBuffer   
408B   CD 40 0B               CALL   printStr   
408E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
409B   E1                     POP   hl   
409C   E5                     PUSH   hl   
409D   E5                     PUSH   hl   
409E   CD 5F 0C               CALL   run   
40A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40B0   CD C8 0A               CALL   flushBuffer   
40B3   76                     HALT      
40B4                EXPECTM_0_2753S46:      
40B4   E1                     POP   HL   
40B5                          ;*Macro unroll:  test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
40B5   31 00 49               LD   SP,STACK   
40B8   CD 88 0B               CALL   coldInit   
40BB   CD E6 47               CALL   execStr   
40BE   33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
40E6   CD C8 0A               CALL   flushBuffer   
40E9                          ;*Macro unroll:  expect "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^",6
40E9   E1                     POP   HL   
40EA   E5                     PUSH   HL   
40EB   11 06 00               LD   DE,6   
40EE   B7                     OR   A   
40EF   ED 52                  SBC   HL,DE   
40F1   7D                     LD   A,L   
40F2   B4                     OR   H   
40F3   CA 75 41               JP   Z,expectM_0_2754S46   
40F6   CD 40 0B               CALL   printStr   
40F9   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
4127   CD 40 0B               CALL   printStr   
412A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4139   21 06 00               LD   hl,6   
413C   E5                     PUSH   hl   
413D   E5                     PUSH   hl   
413E   CD 5F 0C               CALL   run   
4141   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4149   CD C8 0A               CALL   flushBuffer   
414C   CD 40 0B               CALL   printStr   
414F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
415C   E1                     POP   hl   
415D   E5                     PUSH   hl   
415E   E5                     PUSH   hl   
415F   CD 5F 0C               CALL   run   
4162   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4171   CD C8 0A               CALL   flushBuffer   
4174   76                     HALT      
4175                EXPECTM_0_2754S46:      
4175   E1                     POP   HL   
4176                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4176   31 00 49               LD   SP,STACK   
4179   CD 88 0B               CALL   coldInit   
417C   CD E6 47               CALL   execStr   
417F   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
418B   CD C8 0A               CALL   flushBuffer   
418E                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
418E   E1                     POP   HL   
418F   E5                     PUSH   HL   
4190   11 00 00               LD   DE,NUL   
4193   B7                     OR   A   
4194   ED 52                  SBC   HL,DE   
4196   7D                     LD   A,L   
4197   B4                     OR   H   
4198   CA FE 41               JP   Z,expectM_0_2755S46   
419B   CD 40 0B               CALL   printStr   
419E   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
41B0   CD 40 0B               CALL   printStr   
41B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C2   21 00 00               LD   hl,NUL   
41C5   E5                     PUSH   hl   
41C6   E5                     PUSH   hl   
41C7   CD 5F 0C               CALL   run   
41CA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41D2   CD C8 0A               CALL   flushBuffer   
41D5   CD 40 0B               CALL   printStr   
41D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41E5   E1                     POP   hl   
41E6   E5                     PUSH   hl   
41E7   E5                     PUSH   hl   
41E8   CD 5F 0C               CALL   run   
41EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41FA   CD C8 0A               CALL   flushBuffer   
41FD   76                     HALT      
41FE                EXPECTM_0_2755S46:      
41FE   E1                     POP   HL   
41FF                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
41FF   31 00 49               LD   SP,STACK   
4202   CD 88 0B               CALL   coldInit   
4205   CD E6 47               CALL   execStr   
4208   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
4214   CD C8 0A               CALL   flushBuffer   
4217                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
4217   E1                     POP   HL   
4218   E5                     PUSH   HL   
4219   11 00 00               LD   DE,NUL   
421C   B7                     OR   A   
421D   ED 52                  SBC   HL,DE   
421F   7D                     LD   A,L   
4220   B4                     OR   H   
4221   CA 87 42               JP   Z,expectM_0_2756S46   
4224   CD 40 0B               CALL   printStr   
4227   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4239   CD 40 0B               CALL   printStr   
423C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
424B   21 00 00               LD   hl,NUL   
424E   E5                     PUSH   hl   
424F   E5                     PUSH   hl   
4250   CD 5F 0C               CALL   run   
4253   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
425B   CD C8 0A               CALL   flushBuffer   
425E   CD 40 0B               CALL   printStr   
4261   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
426E   E1                     POP   hl   
426F   E5                     PUSH   hl   
4270   E5                     PUSH   hl   
4271   CD 5F 0C               CALL   run   
4274   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4283   CD C8 0A               CALL   flushBuffer   
4286   76                     HALT      
4287                EXPECTM_0_2756S46:      
4287   E1                     POP   HL   
4288                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4288   31 00 49               LD   SP,STACK   
428B   CD 88 0B               CALL   coldInit   
428E   CD E6 47               CALL   execStr   
4291   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
429D   CD C8 0A               CALL   flushBuffer   
42A0                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
42A0   E1                     POP   HL   
42A1   E5                     PUSH   HL   
42A2   11 00 00               LD   DE,NUL   
42A5   B7                     OR   A   
42A6   ED 52                  SBC   HL,DE   
42A8   7D                     LD   A,L   
42A9   B4                     OR   H   
42AA   CA 10 43               JP   Z,expectM_0_2757S46   
42AD   CD 40 0B               CALL   printStr   
42B0   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
42C2   CD 40 0B               CALL   printStr   
42C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D4   21 00 00               LD   hl,NUL   
42D7   E5                     PUSH   hl   
42D8   E5                     PUSH   hl   
42D9   CD 5F 0C               CALL   run   
42DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42E4   CD C8 0A               CALL   flushBuffer   
42E7   CD 40 0B               CALL   printStr   
42EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F7   E1                     POP   hl   
42F8   E5                     PUSH   hl   
42F9   E5                     PUSH   hl   
42FA   CD 5F 0C               CALL   run   
42FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
430C   CD C8 0A               CALL   flushBuffer   
430F   76                     HALT      
4310                EXPECTM_0_2757S46:      
4310   E1                     POP   HL   
4311                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4311   31 00 49               LD   SP,STACK   
4314   CD 88 0B               CALL   coldInit   
4317   CD E6 47               CALL   execStr   
431A   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
4326   CD C8 0A               CALL   flushBuffer   
4329                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
4329   E1                     POP   HL   
432A   E5                     PUSH   HL   
432B   11 00 00               LD   DE,NUL   
432E   B7                     OR   A   
432F   ED 52                  SBC   HL,DE   
4331   7D                     LD   A,L   
4332   B4                     OR   H   
4333   CA 99 43               JP   Z,expectM_0_2758S46   
4336   CD 40 0B               CALL   printStr   
4339   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
434B   CD 40 0B               CALL   printStr   
434E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
435D   21 00 00               LD   hl,NUL   
4360   E5                     PUSH   hl   
4361   E5                     PUSH   hl   
4362   CD 5F 0C               CALL   run   
4365   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
436D   CD C8 0A               CALL   flushBuffer   
4370   CD 40 0B               CALL   printStr   
4373   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4380   E1                     POP   hl   
4381   E5                     PUSH   hl   
4382   E5                     PUSH   hl   
4383   CD 5F 0C               CALL   run   
4386   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4395   CD C8 0A               CALL   flushBuffer   
4398   76                     HALT      
4399                EXPECTM_0_2758S46:      
4399   E1                     POP   HL   
439A                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
439A   31 00 49               LD   SP,STACK   
439D   CD 88 0B               CALL   coldInit   
43A0   CD E6 47               CALL   execStr   
43A3   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
43AB   CD C8 0A               CALL   flushBuffer   
43AE                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
43AE   E1                     POP   HL   
43AF   E5                     PUSH   HL   
43B0   11 66 4B               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
43B3   B7                     OR   A   
43B4   ED 52                  SBC   HL,DE   
43B6   7D                     LD   A,L   
43B7   B4                     OR   H   
43B8   CA 1A 44               JP   Z,expectM_0_2759S46   
43BB   CD 40 0B               CALL   printStr   
43BE   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
43CC   CD 40 0B               CALL   printStr   
43CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43DE   21 66 4B               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
43E1   E5                     PUSH   hl   
43E2   E5                     PUSH   hl   
43E3   CD 5F 0C               CALL   run   
43E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43EE   CD C8 0A               CALL   flushBuffer   
43F1   CD 40 0B               CALL   printStr   
43F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4401   E1                     POP   hl   
4402   E5                     PUSH   hl   
4403   E5                     PUSH   hl   
4404   CD 5F 0C               CALL   run   
4407   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4416   CD C8 0A               CALL   flushBuffer   
4419   76                     HALT      
441A                EXPECTM_0_2759S46:      
441A   E1                     POP   HL   
441B                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
441B   31 00 49               LD   SP,STACK   
441E   CD 88 0B               CALL   coldInit   
4421   CD E6 47               CALL   execStr   
4424   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
442C   CD C8 0A               CALL   flushBuffer   
442F                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
442F   E1                     POP   HL   
4430   E5                     PUSH   HL   
4431   11 34 4B               LD   DE,VARS + ("Z"-"A"+1)*2   
4434   B7                     OR   A   
4435   ED 52                  SBC   HL,DE   
4437   7D                     LD   A,L   
4438   B4                     OR   H   
4439   CA 9B 44               JP   Z,expectM_0_2760S46   
443C   CD 40 0B               CALL   printStr   
443F   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
444D   CD 40 0B               CALL   printStr   
4450   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
445F   21 34 4B               LD   hl,VARS + ("Z"-"A"+1)*2   
4462   E5                     PUSH   hl   
4463   E5                     PUSH   hl   
4464   CD 5F 0C               CALL   run   
4467   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
446F   CD C8 0A               CALL   flushBuffer   
4472   CD 40 0B               CALL   printStr   
4475   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4482   E1                     POP   hl   
4483   E5                     PUSH   hl   
4484   E5                     PUSH   hl   
4485   CD 5F 0C               CALL   run   
4488   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4497   CD C8 0A               CALL   flushBuffer   
449A   76                     HALT      
449B                EXPECTM_0_2760S46:      
449B   E1                     POP   HL   
449C                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
449C   31 00 49               LD   SP,STACK   
449F   CD 88 0B               CALL   coldInit   
44A2   CD E6 47               CALL   execStr   
44A5   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
44AD   CD C8 0A               CALL   flushBuffer   
44B0                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
44B0   E1                     POP   HL   
44B1   E5                     PUSH   HL   
44B2   11 32 4B               LD   DE,VARS + ("Z"-"A")*2   
44B5   B7                     OR   A   
44B6   ED 52                  SBC   HL,DE   
44B8   7D                     LD   A,L   
44B9   B4                     OR   H   
44BA   CA 1C 45               JP   Z,expectM_0_2761S46   
44BD   CD 40 0B               CALL   printStr   
44C0   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
44CE   CD 40 0B               CALL   printStr   
44D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44E0   21 32 4B               LD   hl,VARS + ("Z"-"A")*2   
44E3   E5                     PUSH   hl   
44E4   E5                     PUSH   hl   
44E5   CD 5F 0C               CALL   run   
44E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44F0   CD C8 0A               CALL   flushBuffer   
44F3   CD 40 0B               CALL   printStr   
44F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4503   E1                     POP   hl   
4504   E5                     PUSH   hl   
4505   E5                     PUSH   hl   
4506   CD 5F 0C               CALL   run   
4509   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4518   CD C8 0A               CALL   flushBuffer   
451B   76                     HALT      
451C                EXPECTM_0_2761S46:      
451C   E1                     POP   HL   
451D                          ;*Macro unroll:  test "'A' /ad", VARS
451D   31 00 49               LD   SP,STACK   
4520   CD 88 0B               CALL   coldInit   
4523   CD E6 47               CALL   execStr   
4526   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
452E   CD C8 0A               CALL   flushBuffer   
4531                          ;*Macro unroll:  expect "'A' /ad",VARS
4531   E1                     POP   HL   
4532   E5                     PUSH   HL   
4533   11 00 4B               LD   DE,VARS   
4536   B7                     OR   A   
4537   ED 52                  SBC   HL,DE   
4539   7D                     LD   A,L   
453A   B4                     OR   H   
453B   CA 9D 45               JP   Z,expectM_0_2762S46   
453E   CD 40 0B               CALL   printStr   
4541   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
454F   CD 40 0B               CALL   printStr   
4552   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4561   21 00 4B               LD   hl,VARS   
4564   E5                     PUSH   hl   
4565   E5                     PUSH   hl   
4566   CD 5F 0C               CALL   run   
4569   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4571   CD C8 0A               CALL   flushBuffer   
4574   CD 40 0B               CALL   printStr   
4577   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4584   E1                     POP   hl   
4585   E5                     PUSH   hl   
4586   E5                     PUSH   hl   
4587   CD 5F 0C               CALL   run   
458A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4599   CD C8 0A               CALL   flushBuffer   
459C   76                     HALT      
459D                EXPECTM_0_2762S46:      
459D   E1                     POP   HL   
459E                          ;*Macro unroll:  test "-1. /c/vB 0%", $2D
459E   31 00 49               LD   SP,STACK   
45A1   CD 88 0B               CALL   coldInit   
45A4   CD E6 47               CALL   execStr   
45A7   2D 31 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "-1. /c/vB 0%"   
45B4   CD C8 0A               CALL   flushBuffer   
45B7                          ;*Macro unroll:  expect "-1. /c/vB 0%",$2D
45B7   E1                     POP   HL   
45B8   E5                     PUSH   HL   
45B9   11 2D 00               LD   DE,$2D   
45BC   B7                     OR   A   
45BD   ED 52                  SBC   HL,DE   
45BF   7D                     LD   A,L   
45C0   B4                     OR   H   
45C1   CA 28 46               JP   Z,expectM_0_2763S46   
45C4   CD 40 0B               CALL   printStr   
45C7   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","-1. /c/vB 0%"   
45DA   CD 40 0B               CALL   printStr   
45DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45EC   21 2D 00               LD   hl,$2D   
45EF   E5                     PUSH   hl   
45F0   E5                     PUSH   hl   
45F1   CD 5F 0C               CALL   run   
45F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45FC   CD C8 0A               CALL   flushBuffer   
45FF   CD 40 0B               CALL   printStr   
4602   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
460F   E1                     POP   hl   
4610   E5                     PUSH   hl   
4611   E5                     PUSH   hl   
4612   CD 5F 0C               CALL   run   
4615   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4624   CD C8 0A               CALL   flushBuffer   
4627   76                     HALT      
4628                EXPECTM_0_2763S46:      
4628   E1                     POP   HL   
4629                          ;*Macro unroll:  test "`A`.s /c/vB 0%", 65
4629   31 00 49               LD   SP,STACK   
462C   CD 88 0B               CALL   coldInit   
462F   CD E6 47               CALL   execStr   
4632   60 41 60 2E 73 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "`A`.s /c/vB 0%"   
4641   CD C8 0A               CALL   flushBuffer   
4644                          ;*Macro unroll:  expect "`A`.s /c/vB 0%",65
4644   E1                     POP   HL   
4645   E5                     PUSH   HL   
4646   11 41 00               LD   DE,65   
4649   B7                     OR   A   
464A   ED 52                  SBC   HL,DE   
464C   7D                     LD   A,L   
464D   B4                     OR   H   
464E   CA B7 46               JP   Z,expectM_0_2764S46   
4651   CD 40 0B               CALL   printStr   
4654   43 6F 64 65 3A 20 60 41 60 2E 73 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","`A`.s /c/vB 0%"   
4669   CD 40 0B               CALL   printStr   
466C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
467B   21 41 00               LD   hl,65   
467E   E5                     PUSH   hl   
467F   E5                     PUSH   hl   
4680   CD 5F 0C               CALL   run   
4683   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
468B   CD C8 0A               CALL   flushBuffer   
468E   CD 40 0B               CALL   printStr   
4691   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
469E   E1                     POP   hl   
469F   E5                     PUSH   hl   
46A0   E5                     PUSH   hl   
46A1   CD 5F 0C               CALL   run   
46A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46B3   CD C8 0A               CALL   flushBuffer   
46B6   76                     HALT      
46B7                EXPECTM_0_2764S46:      
46B7   E1                     POP   HL   
46B8                          ;*Macro unroll:  test "123. /c/vB 1%", $32
46B8   31 00 49               LD   SP,STACK   
46BB   CD 88 0B               CALL   coldInit   
46BE   CD E6 47               CALL   execStr   
46C1   31 32 33 2E 20 2F 63 2F 76 42 20 31 25 00 .CSTR   "123. /c/vB 1%"   
46CF   CD C8 0A               CALL   flushBuffer   
46D2                          ;*Macro unroll:  expect "123. /c/vB 1%",$32
46D2   E1                     POP   HL   
46D3   E5                     PUSH   HL   
46D4   11 32 00               LD   DE,$32   
46D7   B7                     OR   A   
46D8   ED 52                  SBC   HL,DE   
46DA   7D                     LD   A,L   
46DB   B4                     OR   H   
46DC   CA 44 47               JP   Z,expectM_0_2765S46   
46DF   CD 40 0B               CALL   printStr   
46E2   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 25 00 .CSTR   "Code: ","123. /c/vB 1%"   
46F6   CD 40 0B               CALL   printStr   
46F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4708   21 32 00               LD   hl,$32   
470B   E5                     PUSH   hl   
470C   E5                     PUSH   hl   
470D   CD 5F 0C               CALL   run   
4710   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4718   CD C8 0A               CALL   flushBuffer   
471B   CD 40 0B               CALL   printStr   
471E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
472B   E1                     POP   hl   
472C   E5                     PUSH   hl   
472D   E5                     PUSH   hl   
472E   CD 5F 0C               CALL   run   
4731   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4740   CD C8 0A               CALL   flushBuffer   
4743   76                     HALT      
4744                EXPECTM_0_2765S46:      
4744   E1                     POP   HL   
4745                          ;*Macro unroll:  test "#4321 /h. /c/vB 0%", $23
4745   31 00 49               LD   SP,STACK   
4748   CD 88 0B               CALL   coldInit   
474B   CD E6 47               CALL   execStr   
474E   23 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "#4321 /h. /c/vB 0%"   
4761   CD C8 0A               CALL   flushBuffer   
4764                          ;*Macro unroll:  expect "#4321 /h. /c/vB 0%",$23
4764   E1                     POP   HL   
4765   E5                     PUSH   HL   
4766   11 23 00               LD   DE,$23   
4769   B7                     OR   A   
476A   ED 52                  SBC   HL,DE   
476C   7D                     LD   A,L   
476D   B4                     OR   H   
476E   CA DB 47               JP   Z,expectM_0_2766S46   
4771   CD 40 0B               CALL   printStr   
4774   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","#4321 /h. /c/vB 0%"   
478D   CD 40 0B               CALL   printStr   
4790   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
479F   21 23 00               LD   hl,$23   
47A2   E5                     PUSH   hl   
47A3   E5                     PUSH   hl   
47A4   CD 5F 0C               CALL   run   
47A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47AF   CD C8 0A               CALL   flushBuffer   
47B2   CD 40 0B               CALL   printStr   
47B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47C2   E1                     POP   hl   
47C3   E5                     PUSH   hl   
47C4   E5                     PUSH   hl   
47C5   CD 5F 0C               CALL   run   
47C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47D7   CD C8 0A               CALL   flushBuffer   
47DA   76                     HALT      
47DB                EXPECTM_0_2766S46:      
47DB   E1                     POP   HL   
47DC                             ; 
47DC   CD 40 0B               CALL   printStr   
47DF   44 6F 6E 65 21 00      .CSTR   "Done!"   
47E5   76                     HALT      
47E6                          ALIGN   2   
47E6                             ; printer:
47E6                             ;     pop hl
47E6                             ;     call prtdec
47E6                             ;     jp (ix)
47E6                             ; executes a null teminated string (null executes exit_)
47E6                             ; the string should be immedaitely following the call
47E6                EXECSTR:      ; create a root stack frame
47E6   C1                     POP   bc   ; bc = code*
47E7   0B                     DEC   bc   ; dec to prepare for next routine
47E8   11 00 00               LD   de,0   
47EB   D5                     PUSH   de   ; push fake IP
47EC   D5                     PUSH   de   ; push null arg_list*
47ED   D5                     PUSH   de   ; push null first_arg*
47EE   D5                     PUSH   de   ; push fake BP
47EF   DD E9                  JP   (ix)   
47F1                STKSIZE:   EQU   $100   ; Stack size
47F1                TIBSIZE:   EQU   $100   ; 256 bytes
47F1                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
47F1                          ALIGN   $100   
4800                          DS   STKSIZE   
4900                STACK:       
4900                          ALIGN   $100   
4900                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4A00                          ALIGN   $100   
4A00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4B00                          ALIGN   $100   
4B00                VARS:        
4B00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4BD0                RESTARTS:      
4BD0                RST08:    DS   2   
4BD2                RST10:    DS   2   
4BD4                RST18:    DS   2   
4BD6                RST20:    DS   2   
4BD8                RST28:    DS   2   
4BDA                RST30:    DS   2   ; 
4BDC                BAUD:     DS   2   ; 
4BDE                INTVEC:   DS   2   ; 
4BE0                NMIVEC:   DS   2   ; 
4BE2                GETCVEC:   DS   2   ; 
4BE4                PUTCVEC:   DS   2   ; 
4BE6                SYSVARS:      
4BE6                             ; initialised sys variables (preserved)
4BE6                VDATAWIDTH:   DS   2   ; 
4BE8                VNUMBASE:   DS   2   ; 
4BEA                VTIBPTR:   DS   2   ; 
4BEC                VBUFPTR:   DS   2   ; 
4BEE                VNEXT:    DS   2   ; 
4BF0                VHEAPPTR:   DS   2   ; 
4BF2                             ; uninitialised sys variables (preserved)
4BF2                VPOINTER:   DS   2   ; 
4BF4                VREMAIN:   DS   2   ; 
4BF6                VSAVEDIP:   DS   2   ; 
4BF8                VSAVEDSP:   DS   2   ; 
4BFA                VSAVEDNEXT:   DS   2   ; 
4BFC                VSAVEDBP:   DS   2   ; 
4BFE                VCHECKSUM:   DS   2   ; 
4C00                             ; uninitialised sys variables (unpreserved)
4C00                VTEMP1:   DS   2   ; 
4C02                VTEMP2:   DS   2   ; 
4C04                VLASTDEF:   DS   2   ; 
4C06                VHASHSTR:   DS   2   ; 
4C08                TBPTR:    DS   2   ; reserved for tests
4C0A                WARMBUF:   DS   20   
4C1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB3 DEFINED AT LINE 1697 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LT_:                036D DEFINED AT LINE 248 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 260 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 385 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 400 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 467 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 488 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              049B DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 504 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 522 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 551 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 669 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 693 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
DIV:                05F3 DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
DOT:                0604 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0616 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
DIVIDE1:            061B DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
DIVIDE2:            0628 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DIVIDE3:            0629 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
EQUALS:             062F DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         0637 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           063C DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0641 DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
TRUE1:              0644 DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
NULL1:              064A DEFINED AT LINE 817 IN MAIN.asm
FALSE1:             064A DEFINED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
CARET:              0650 DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0650 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
GO1:                0651 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
GO2:                0657 DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK:            0663 DEFINED AT LINE 842 IN MAIN.asm
GOBLOCK1:           0663 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
GOBLOCK2:           0688 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
GOLAMBDA:           0696 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
GOLAMBDA1:          06B3 DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
GOLAMBDA2:          06B9 DEFINED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
GOLAMBDA3:          06C4 DEFINED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
GOLAMBDA4:          06DC DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
GOLAMBDA5:          06E0 DEFINED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
GOLAMBDA6:          06E3 DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
GOLAMBDA7:          06E6 DEFINED AT LINE 933 IN MAIN.asm
GOLAMBDA8:          06EB DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
HASH:               06F6 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             06F6 DEFINED AT LINE 949 IN MAIN.asm
HEXNUM1:            06F9 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
HEXNUM2:            0701 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
UPCASE:             0713 DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0718 DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             071D DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
QUESTION:           072A DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 072A DEFINED AT LINE 991 IN MAIN.asm
IFTE:               0736 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
IFTE1:              0737 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
STAR:               0743 DEFINED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0743 DEFINED AT LINE 1014 IN MAIN.asm
MUL2:               0745 DEFINED AT LINE 1017 IN MAIN.asm
MUL3:               074D DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
NUM:                075F DEFINED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0768 DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
NUM1:               0769 DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
NUM2:               0781 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
NUM3:               078C DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
UNDERSCORE:         078F DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             078F DEFINED AT LINE 1074 IN MAIN.asm
RPAREN:             0795 DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          079D DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07B9 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07C1 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
SHIFTLEFT2:         07C2 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
SHIFTRIGHT:         07C9 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07D1 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
SHIFTRIGHT2:        07D5 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
DBLQUOTE:           07DC DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07DC DEFINED AT LINE 1146 IN MAIN.asm
STRING1:            07E5 DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
STRING2:            07E8 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
STRING3:            07F1 DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
MINUS:              0804 DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0810 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
SUB1:               081A DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
ERROR1:             0823 DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
COMMENT:            082A DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
COMMAND_A:          0833 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
ABSOLUTE:           083F DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
ADDROF:             084C DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
ADDROF1:            0860 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
ADDROF2:            086B DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
COMMAND_B:          086D DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
BUFFERARRAY:        0888 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
BUFFERNUMBER:       08BC DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
BUFFERDEC:          08C3 DEFINED AT LINE 1303 IN MAIN.asm
BUFFERDEC0:         08DD DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
BUFFERDEC1:         08ED DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
BUFFERDEC2:         090D DEFINED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
BUFFERDEC3:         090F DEFINED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERDEC4:         091F DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
BUFFERDEC5:         0920 DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
BUFFERHEX:          0929 DEFINED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
BUFFERHEX1:         094A DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
BUFFERHEX2:         0953 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
BREAK:              0961 DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BREAK1:             0968 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
BUFFERSTRING:       097B DEFINED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
BUFFERSTRING0:      0982 DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
BUFFERSTRING1:      0988 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
BUFFERCHAR:         0995 DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
BUFFERXCHARS:       099A DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
BUFFERXCHARS0:      099B DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
BUFFERXCHARS1:      09A4 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
BUFFERXCHARS2:      09AC DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
COMMAND_I:          09B6 DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
COMMAND_P:          09C2 DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PARTIAL:            09D4 DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
PRINTBUFFER:        09F4 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
PRINTCHARS:         0A17 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
PRINTCHARS1:        0A1E DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
PRINTCHARS2:        0A24 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
PRINTSTACK:         0A29 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
SIZE:               0A2B DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
COMMAND_V:          0A35 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
CONSTBUFSTART:      0A4A DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
CONSTHEAPSTART:     0A4F DEFINED AT LINE 1611 IN MAIN.asm
CONSTTIBSTART:      0A54 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
VARBUFPTR:          0A59 DEFINED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
VARHEAPPTR:         0A62 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
VARTIBPTR:          0A6B DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
VARIABLE:           0A74 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
CONSTANT:           0A77 DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
CHARS:              0A7A DEFINED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
CHARS1:             0A7D DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
DECIMAL:            0A82 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
DECIMAL1:           0A85 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
HEXADECIMAL:        0A8A DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
INPUT:              0A90 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
KEY:                0A9B DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
OUTPUT:             0AA4 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
NUMBERS:            0AAD DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
FILTER:             0AB3 DEFINED AT LINE 1695 IN MAIN.asm
MAP:                0AB3 DEFINED AT LINE 1696 IN MAIN.asm
ARGS0A1L_:          0AB5 DEFINED AT LINE 1703 IN MAIN.asm
ARGS0A1L:           0AB7 DEFINED AT LINE 1706 IN MAIN.asm
ARGS1A0L_:          0AB8 DEFINED AT LINE 1709 IN MAIN.asm
ARGS1A0L:           0ABA DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
ARGS1A1L_:          0ABB DEFINED AT LINE 1715 IN MAIN.asm
ARGS1A1L:           0ABD DEFINED AT LINE 1718 IN MAIN.asm
ARGS2A0L_:          0ABF DEFINED AT LINE 1721 IN MAIN.asm
ARGS2A0L:           0AC1 DEFINED AT LINE 1724 IN MAIN.asm
ARGS1A2L_:          0AC3 DEFINED AT LINE 1727 IN MAIN.asm
ARGS1A2L:           0AC5 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
FLUSHBUFFER:        0AC8 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
                    > USED AT LINE 45
                    > USED AT LINE 23
                    > USED AT LINE 32
JUMPTABLE:          0ADF DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
JUMPTABLE0:         0AE1 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
JUMPTABLE1:         0AEE DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
JUMPTABLE2:         0AEF DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
PRTSTR0:            0AF5 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
PRTSTR:             0AF9 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
NESTING:            0AFE DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
NESTING0:           0B08 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
NESTING1A:          0B0F DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
NESTING1:           0B12 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
NESTING2:           0B21 DEFINED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
NESTING3:           0B23 DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
NESTING4:           0B2E DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
PROMPT:             0B30 DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
CRLF:               0B39 DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PRINTSTR:           0B40 DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 25
                    > USED AT LINE 135
TITLESTR:           0B47 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
INIT:               0B5B DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
INIT1:              0B63 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
WARMINIT:           0B6B DEFINED AT LINE 1871 IN MAIN.asm
COLDBOOT0:          0B7E DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
COLDINIT:           0B88 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
COLDBOOT1:          0B99 DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
COLDSTART:          0BA6 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
START:              0BAF DEFINED AT LINE 1906 IN MAIN.asm
START1:             0BB5 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
INTERPRET:          0BBB DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
INTERPRET2:         0BCA DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
INTERPRET3:         0BD2 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
INTERPRET4:         0BDD DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
INTERPRET5:         0BE2 DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
INTERPRET5A:        0C05 DEFINED AT LINE 1983 IN MAIN.asm
INTERPRET6:         0C07 DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
INTERPRET7:         0C15 DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
INTERPRET8:         0C28 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
NEXT:               0C43 DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
NEXT1:              0C54 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
EXIT:               0C5B DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
RUN:                0C5F DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0C63 DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
BACKSPACE_:         0C76 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
EDIT_:              0C86 DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
REEDIT_:            0C9E DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
PRINTSTACK_:        0CA1 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_0_2657S46:  0D76 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2658S46:  0DED DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2659S46:  0E62 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2660S46:  0ED7 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2661S46:  0F4C DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2662S46:  0FC1 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2663S46:  1038 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2664S46:  10B1 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2665S46:  1128 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2666S46:  119F DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2667S46:  1218 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2668S46:  1293 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2669S46:  130C DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2670S46:  1385 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2671S46:  1404 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2672S46:  1483 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2673S46:  1500 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2674S46:  1581 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2675S46:  1606 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2676S46:  1689 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2677S46:  1706 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2678S46:  178B DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2679S46:  180C DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2680S46:  1889 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2681S46:  1906 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2682S46:  198B DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2683S46:  1A08 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2684S46:  1A85 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2685S46:  1B04 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2686S46:  1B93 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2687S46:  1C10 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2688S46:  1C95 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2689S46:  1D12 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2690S46:  1D93 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2691S46:  1E10 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2692S46:  1E8F DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2693S46:  1F0E DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2694S46:  1F8B DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2695S46:  2008 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2696S46:  2085 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2697S46:  2102 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2698S46:  217F DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2699S46:  21FC DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2700S46:  2279 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2701S46:  22F6 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2702S46:  2375 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2703S46:  23F4 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2704S46:  2473 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2705S46:  24F4 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2706S46:  2575 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2707S46:  25F0 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2708S46:  266B DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2709S46:  26EC DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2710S46:  2773 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2711S46:  27FA DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2712S46:  2885 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2713S46:  291A DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2714S46:  29AF DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2715S46:  2A2C DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2716S46:  2AAB DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2717S46:  2B2C DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2718S46:  2BAF DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2719S46:  2C30 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2720S46:  2CAF DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2721S46:  2D30 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2722S46:  2DB7 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2723S46:  2E42 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2724S46:  2EC9 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2725S46:  2F5A DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2726S46:  2FED DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2727S46:  3086 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2728S46:  3123 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2729S46:  31B2 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2730S46:  3247 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2731S46:  32DE DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2732S46:  3377 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2733S46:  340E DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2734S46:  34B3 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2735S46:  3546 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2736S46:  35E5 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2737S46:  3686 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2738S46:  3729 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2739S46:  37D8 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2740S46:  3887 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2741S46:  3914 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2742S46:  39A7 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2743S46:  3A34 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2744S46:  3ACD DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2745S46:  3B66 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2746S46:  3C0F DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2747S46:  3CC0 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2748S46:  3D71 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2749S46:  3E0A DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2750S46:  3EAF DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2751S46:  3F50 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2752S46:  3FF7 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2753S46:  40B4 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2754S46:  4175 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2755S46:  41FE DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2756S46:  4287 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2757S46:  4310 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2758S46:  4399 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2759S46:  441A DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2760S46:  449B DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2761S46:  451C DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2762S46:  459D DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2763S46:  4628 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2764S46:  46B7 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2765S46:  4744 DEFINED AT LINE 35
                    > USED AT LINE 10
EXPECTM_0_2766S46:  47DB DEFINED AT LINE 35
                    > USED AT LINE 10
EXECSTR:            47E6 DEFINED AT LINE 147
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
                    > USED AT LINE 42
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4900 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
TIB:                4900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
BUF:                4A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
VARS:               4B00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           4BD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4BD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4BD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4BD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4BD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4BD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4BDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4BDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4BDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4BE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4BE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4BE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4BE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1886 IN MAIN.asm
VDATAWIDTH:         4BE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
VNUMBASE:           4BE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
VTIBPTR:            4BEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
VBUFPTR:            4BEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
VNEXT:              4BEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1898 IN MAIN.asm
VHEAPPTR:           4BF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
VPOINTER:           4BF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
VREMAIN:            4BF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
VSAVEDIP:           4BF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
VSAVEDSP:           4BF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
VSAVEDNEXT:         4BFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
VSAVEDBP:           4BFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
VCHECKSUM:          4BFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4C00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
VTEMP2:             4C02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
VLASTDEF:           4C04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4C06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4C08 DEFINED AT LINE 60 IN ram.asm
WARMBUF:            4C0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
HEAP:               4C1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
