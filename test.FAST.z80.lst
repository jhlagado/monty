0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3C               LD   (RST08),HL   
0094   22 D2 3C               LD   (RST10),HL   
0097   22 D4 3C               LD   (RST18),HL   
009A   22 D6 3C               LD   (RST20),HL   
009D   22 D8 3C               LD   (RST28),HL   
00A0   22 DA 3C               LD   (RST30),HL   
00A3   22 DE 3C               LD   (INTVEC),HL   
00A6   22 E0 3C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3B               LD   SP,STACK   
00C6   CD FA 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; vTIBPtr an offset to the tib
0184   95 0A                  DW   next   ; nNext
0186   00 40                  DW   heap   ; vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   85                     DB   lsb(nop_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 A4 03               JP   at   
0306                AMPER_:      
0306   C3 B0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 D4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 0B 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 27 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 75 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A8 05               JP   backslash   
0318                LBRACE_:      
0318   C3 D5 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3E 05               JP   rbrace   
031E                TICK_:       
031E   C3 93 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 87 07               JP   semicolon   
0324                DOT_:        
0324   C3 D7 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 79 07               JP   underscore   
032A                COLON_:      
032A   C3 9E 04               JP   colon   
032D                UPCASE_:      
032D   C3 FD 06               JP   upcase   
0330                LOWCASE_:      
0330   C3 02 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 14 07               JP   question   
0336                STAR_:       
0336   C3 2D 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 49 07               JP   num   
0341                HASH_:       
0341   C3 E0 06               JP   hash   
0344                PIPE_:       
0344   C3 BB 03               JP   pipe   
0347                CARET_:      
0347   C3 3E 06               JP   caret   
034A                COMMA_:      
034A   C3 AA 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 C6 07               JP   dblquote   
0350                MINUS_:      
0350   C3 EE 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8D 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 1A 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA B3 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 3B 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA A3 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 22 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 27 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B9 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 7F 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8F 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA 8F 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; @ addr
03A4                             ; -- ptr
03A4                AT:          
03A4                ADDR:        
03A4   2A EE 3C               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 EE 3C               LD   hl,vPointer   
03AB   22 EE 3C               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AMPER:       
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                PIPE:        
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   67                     LD   h,a   
03CC   E5                     PUSH   hl   
03CD   DD E9                  JP   (ix)   
03CF                INVERT:      ; Bitwise INVert the top member of the stack
03CF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D2   18 F1                  JR   xor1   
03D4                             ; $a .. $z
03D4                             ; -- value
03D4                             ; returns value of arg
03D4                DOLLAR:      
03D4                ARG:         
03D4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D7   FD 56 05               LD   d,(iy+5)   
03DA   EB                     EX   de,hl   
03DB   7D                     LD   a,l   ; arg_list* == null, skip
03DC   B4                     OR   h   
03DD   28 1C                  JR   z,arg0a   
03DF   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E0   2B                     DEC   hl   
03E1   7E                     LD   a,(hl)   
03E2   23                     INC   hl   
03E3   23                     INC   hl   
03E4   B7                     OR   a   
03E5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E7   5F                     LD   e,a   ; e = a = num_args
03E8   03                     INC   bc   ; a = next char = dollar_name
03E9   0A                     LD   a,(bc)   
03EA   C5                     PUSH   bc   ; save IP
03EB   43                     LD   b,e   ; b = e = num_args
03EC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EF   FD 56 03               LD   d,(iy+3)   
03F2                ARG0:        
03F2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F3   1B                     DEC   de   
03F4   BE                     CP   (hl)   
03F5   28 09                  JR   z,arg1   
03F7   23                     INC   hl   ; hl = next arg_list*
03F8   10 F8                  DJNZ   arg0   
03FA   C1                     POP   bc   ; no match, restore IP
03FB                ARG0A:       
03FB   11 00 00               LD   de,0   ; return 0
03FE   18 08                  JR   arg1a   
0400                ARG1:        
0400   C1                     POP   bc   ; restore IP
0401   EB                     EX   de,hl   ; hl = arg*
0402   22 EE 3C               LD   (vPointer),hl   ; store arg* in setter
0405   5E                     LD   e,(hl)   
0406   23                     INC   hl   
0407   56                     LD   d,(hl)   ; de = arg
0408                ARG1A:       
0408   D5                     PUSH   de   ; push arg
0409   DD E9                  JP   (ix)   
040B                LBRACK:      
040B                ARRBEGIN:      
040B   11 00 00               LD   de,0   ; create stack frame
040E   D5                     PUSH   de   ; push null for IP
040F   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0412   FD 56 05               LD   d,(iy+5)   ; 
0415   D5                     PUSH   de   ; 
0416   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0419   FD 56 03               LD   d,(iy+3)   ; 
041C   D5                     PUSH   de   ; 
041D   FD E5                  PUSH   iy   ; push BP
041F   FD 21 00 00            LD   iy,0   ; BP = SP
0423   FD 39                  ADD   iy,sp   
0425   DD E9                  JP   (ix)   
0427                RBRACK:      
0427                ARREND:      
0427   FD 54                  LD   d,iyh   ; de = BP
0429   FD 5D                  LD   e,iyl   
042B   ED 43 FA 3C            LD   (vTemp1),bc   ; save IP
042F   62 6B                  LD   hl,de   ; hl = de = BP
0431   B7                     OR   a   
0432   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0434   CB 3C                  SRL   h   ; 
0436   CB 1D                  RR   l   
0438   44 4D                  LD   bc,hl   ; bc = count
043A   2A EC 3C               LD   hl,(vHeapPtr)   ; hl = array[-2]
043D   71                     LD   (hl),c   ; write num items in length word
043E   23                     INC   hl   
043F   70                     LD   (hl),b   
0440   23                     INC   hl   ; hl = array[0], bc = count
0441                             ; de = BP, hl = array[0], bc = count
0441                ARREND1:      
0441   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0444   77                     LD   (hl),a   ; write lsb of array item
0445   23                     INC   hl   ; move to msb of array item
0446   3A E6 3C               LD   a,(vDataWidth)   ; vDataWidth=1?
0449   3D                     DEC   a   
044A   28 05                  JR   z,arrEnd2   
044C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044F   77                     LD   (hl),a   ; write msb of array item
0450   23                     INC   hl   ; move to next word in array
0451                ARREND2:      
0451   FD 2B                  DEC   iy   ; move to next word on stack
0453   FD 2B                  DEC   iy   
0455   0B                     DEC   bc   ; dec items count
0456   79                     LD   a,c   ; if not zero loop
0457   B0                     OR   b   
0458   20 E7                  JR   nz,arrEnd1   
045A   EB                     EX   de,hl   ; de = end of array, hl = BP
045B   F9                     LD   sp,hl   ; sp = BP
045C   E1                     POP   hl   ; de = end of array, hl = old BP
045D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045E   FD 62                  LD   iyh,d   
0460   FD 6B                  LD   iyl,e   
0462   D1                     POP   de   ; pop arg_list (discard)
0463   D1                     POP   de   ; pop first_arg* (discard)
0464   D1                     POP   de   ; pop IP (discard)
0465   ED 5B EC 3C            LD   de,(vHeapPtr)   ; de = array[-2]
0469   22 EC 3C               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FA 3C            LD   bc,(vTemp1)   ; restore IP
0470   13                     INC   de   ; de = array[0]
0471   13                     INC   de   
0472   D5                     PUSH   de   ; return array[0]
0473   DD E9                  JP   (ix)   
0475                             ; index of an array, based on vDataWidth
0475                             ; array num -- value    ; also sets vPointer to address
0475                ARRINDEX:      
0475   E1                     POP   hl   ; hl = index
0476   D1                     POP   de   ; de = array
0477   3A E6 3C               LD   a,(vDataWidth)   ; a = data width
047A   3D                     DEC   a   
047B   28 01                  JR   z,arrIndex1   
047D                ARRINDEX0:      
047D   29                     ADD   hl,hl   ; if data width = 2 then double
047E                ARRINDEX1:      
047E   19                     ADD   hl,de   ; add addr
047F   22 EE 3C               LD   (vPointer),hl   ; store address in setter
0482   16 00                  LD   d,0   
0484   5E                     LD   e,(hl)   
0485   B7                     OR   a   ; check data width again
0486   28 02                  JR   z,arrIndex2   
0488   23                     INC   hl   
0489   56                     LD   d,(hl)   
048A                ARRINDEX2:      
048A   D5                     PUSH   de   
048B   DD E9                  JP   (ix)   
048D                             ; value _oldValue --            ; uses address in vPointer
048D                ASSIGN:      
048D   E1                     POP   hl   ; discard last accessed value
048E   E1                     POP   hl   ; hl = new value
048F                ASSIGN0:      
048F   EB                     EX   de,hl   ; de = new value
0490                ASSIGNX:      
0490   2A EE 3C               LD   hl,(vPointer)   
0493   73                     LD   (hl),e   
0494   3A E6 3C               LD   a,(vDataWidth)   
0497   3D                     DEC   a   ; is it byte?
0498   28 02                  JR   z,assign1   
049A   23                     INC   hl   
049B   72                     LD   (hl),d   
049C                ASSIGN1:      
049C   DD E9                  JP   (ix)   
049E                             ; arg_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                COLON:       
049E                ARGLIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A EC 3C               LD   hl,(vHeapPtr)   ; hl = heap*
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of arg_list
04A7   03                     INC   bc   ; point to next char
04A8                ARGLIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AB   20 03                  JR   nz,arglist1a   
04AD   14                     INC   d   ; non zero value local count acts as flag
04AE   18 10                  JR   arglist3   
04B0                ARGLIST1A:      
04B0   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B2   38 0F                  JR   c,arglist4   
04B4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B6   30 0B                  JR   nc,arglist4   
04B8                ARGLIST2:      
04B8   77                     LD   (hl),a   
04B9   23                     INC   hl   
04BA   1C                     INC   e   ; increase arg count
04BB   AF                     XOR   a   
04BC   B2                     OR   d   
04BD   28 01                  JR   z,arglist3   
04BF   14                     INC   d   ; if d > 0 increase local count
04C0                ARGLIST3:      
04C0   03                     INC   bc   ; point to next char
04C1   18 E5                  JR   arglist1   
04C3                ARGLIST4:      
04C3   0B                     DEC   bc   
04C4   AF                     XOR   a   
04C5   B2                     OR   d   
04C6   28 01                  JR   z,arglist5   
04C8   15                     DEC   d   ; remove initial inc
04C9                ARGLIST5:      
04C9   23                     INC   hl   
04CA   22 EC 3C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CD   E1                     POP   hl   ; hl = start of arg_list
04CE   E5                     PUSH   hl   ; return start of arg_list
04CF   2B                     DEC   hl   ; write number of locals at start - 1
04D0   72                     LD   (hl),d   
04D1   2B                     DEC   hl   ; write number of args + locals at start - 2
04D2   73                     LD   (hl),e   
04D3   DD E9                  JP   (ix)   
04D5                LBRACE:      
04D5                BLOCK:       
04D5   C5                     PUSH   bc   ; return pointer to first { of block
04D6   03                     INC   bc   
04D7   16 01                  LD   d,1   ; nesting: count first parenthesis
04D9                BLOCK1:      ; Skip to end of definition
04D9   0A                     LD   a,(bc)   ; Get the next character
04DA   03                     INC   bc   ; Point to next character
04DB   FE 21                  CP   " " + 1   ; ignore whitespace
04DD   38 FA                  JR   c,block1   
04DF   FE 29                  CP   ")"   
04E1   28 2D                  JR   z,block4   
04E3   FE 7D                  CP   "}"   
04E5   28 29                  JR   z,block4   
04E7   FE 5D                  CP   "]"   
04E9   28 25                  JR   z,block4   
04EB   FE 28                  CP   "("   
04ED   28 16                  JR   z,block2   
04EF   FE 7B                  CP   "{"   
04F1   28 12                  JR   z,block2   
04F3   FE 5B                  CP   "["   
04F5   28 0E                  JR   z,block2   
04F7   FE 27                  CP   "'"   
04F9   28 0D                  JR   z,block3   
04FB   FE 60                  CP   "`"   
04FD   28 09                  JR   z,block3   
04FF   FE 22                  CP   DQUOTE   
0501   28 05                  JR   z,block3   
0503   18 D4                  JR   block1   
0505                BLOCK2:      
0505   14                     INC   d   
0506   18 D1                  JR   block1   
0508                BLOCK3:      
0508   3E 80                  LD   a,$80   
050A   AA                     XOR   d   
050B   47                     LD   b,a   
050C   20 CB                  JR   nz,block1   
050E   18 03                  JR   block5   
0510                BLOCK4:      
0510   15                     DEC   d   
0511   20 C6                  JR   nz,block1   ; get the next element
0513                BLOCK5:      
0513   60 69                  LD   hl,bc   ; hl = IP
0515   11 00 40               LD   de,HEAP   ; is IP pointing to object in heap
0518   B7                     OR   a   ; IP - HEAP
0519   ED 52                  SBC   hl,de   
051B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051D   28 1C                  JR   z,block6   
051F   60 69                  LD   hl,bc   ; hl = IP
0521   D1                     POP   de   ; de = block*
0522   ED 43 FA 3C            LD   (vTemp1),bc   ; save IP
0526   B7                     OR   a   ; bc = size
0527   ED 52                  SBC   hl,de   
0529   44 4D                  LD   bc,hl   
052B   EB                     EX   de,hl   ; hl = block* de = heap*
052C   ED 5B EC 3C            LD   de,(vHeapPtr)   
0530   D5                     PUSH   de   ; return hblock*
0531   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0533   ED 53 EC 3C            LD   (vHeapPtr),de   ; heap* += size
0537   ED 4B FA 3C            LD   bc,(vTemp1)   ; restore IP
053B                BLOCK6:      
053B   0B                     DEC   bc   ; balanced, exit
053C   DD E9                  JP   (ix)   
053E                RBRACE:      
053E                BLOCKEND:      
053E   D9                     EXX      ; de" = oldBP bc" = oldIP
053F   FD 5E 00               LD   e,(iy+0)   
0542   FD 56 01               LD   d,(iy+1)   
0545   FD 4E 06               LD   c,(iy+6)   
0548   FD 46 07               LD   b,(iy+7)   
054B   D9                     EXX      
054C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054F   FD 56 03               LD   d,(iy+3)   
0552   EB                     EX   de,hl   
0553   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0556   FD 56 01               LD   d,(iy+1)   
0559   13                     INC   de   ; for carry flag <=
055A   B7                     OR   a   
055B   ED 52                  SBC   hl,de   
055D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0561   FD 5D                  LD   e,iyl   
0563   21 08 00               LD   hl,8   
0566   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0567   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0568   18 0C                  JR   blockEnd2   
056A                BLOCKEND1:      ; same scope
056A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056D   FD 56 03               LD   d,(iy+3)   
0570   EB                     EX   de,hl   
0571   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0573   FD 5D                  LD   e,iyl   
0575   EB                     EX   de,hl   
0576                BLOCKEND2:      
0576   44 4D                  LD   bc,hl   ; bc = hl = BP
0578   B7                     OR   a   ; hl = BP - SP = count
0579   ED 72                  SBC   hl,sp   
057B   7D                     LD   a,l   
057C   B4                     OR   h   
057D   28 09                  JR   z,blockEnd3   
057F   C5                     PUSH   bc   ; bc = count, hl = BP
0580   44 4D                  LD   bc,hl   
0582   E1                     POP   hl   
0583   2B                     DEC   hl   ; hl = BP-1
0584   1B                     DEC   de   ; de = args*-1
0585   ED B8                  LDDR      
0587   13                     INC   de   
0588                BLOCKEND3:      
0588   EB                     EX   de,hl   ; hl = new tos
0589   F9                     LD   sp,hl   ; sp = new tos
058A   D9                     EXX      ; bc = IP, iy = oldBP
058B   D5                     PUSH   de   
058C   C5                     PUSH   bc   
058D   D9                     EXX      
058E   C1                     POP   bc   
058F   FD E1                  POP   iy   
0591   DD E9                  JP   (ix)   
0593                TICK:        
0593                CHAR:        
0593   21 00 00               LD   hl,0   ; if "" is empty or null
0596                CHAR1:       
0596   03                     INC   bc   ; point to next char
0597   0A                     LD   a,(bc)   
0598   FE 27                  CP   "'"   ; ' is the terminator
059A   28 09                  JR   z,char3   
059C   FE 5C                  CP   $5c   ; \ is the escape
059E   20 02                  JR   nz,char2   
05A0   03                     INC   bc   
05A1   0A                     LD   a,(bc)   
05A2                CHAR2:       
05A2   6F                     LD   l,a   
05A3   18 F1                  JR   char1   
05A5                CHAR3:       
05A5   E5                     PUSH   hl   
05A6   DD E9                  JP   (ix)   
05A8                BACKSLASH:      
05A8   DD E9                  JP   (ix)   
05AA                             ; , discard stack item
05AA                             ; x y -- x
05AA                COMMA:       
05AA                DISCARD:      
05AA   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF   B7                     OR   a   
05B0   ED 72                  SBC   hl,sp   
05B2   CB 7C                  BIT   7,h   
05B4   20 01                  JR   nz,discard1   
05B6   E1                     POP   hl   
05B7                DISCARD1:      
05B7   DD E9                  JP   (ix)   
05B9                SLASH:       
05B9   03                     INC   bc   
05BA   0A                     LD   a,(bc)   
05BB   FE 5C                  CP   $5C   
05BD   CA 86 08               JP   z,comment   
05C0   FE 41                  CP   "A"   
05C2   D2 0D 08               JP   nc,command   
05C5   0B                     DEC   bc   
05C6   D1                     POP   de   
05C7   E1                     POP   hl   
05C8   C5                     PUSH   bc   ; preserve the IP
05C9   44 4D                  LD   bc,hl   
05CB   CD 01 06               CALL   divide   
05CE   EB                     EX   de,hl   
05CF   ED 53 F0 3C            LD   (vRemain),de   
05D3   C1                     POP   bc   
05D4   C3 99 03               JP   add3   
05D7                DOT:         
05D7   03                     INC   bc   
05D8   0A                     LD   a,(bc)   
05D9   E1                     POP   hl   
05DA   FE 68                  CP   "h"   
05DC   20 05                  JR   nz,dot1   
05DE   CD 89 09               CALL   prthex   
05E1   18 17                  JR   dot4   
05E3                DOT1:        
05E3   FE 73                  CP   "s"   
05E5   20 05                  JR   nz,dot2   
05E7   CD AC 09               CALL   prtstr   
05EA   18 0E                  JR   dot4   
05EC                DOT2:        
05EC   FE 63                  CP   "c"   
05EE   20 06                  JR   nz,dot3   
05F0   7D                     LD   a,l   
05F1   CD 85 00               CALL   putchar   
05F4   18 04                  JR   dot4   
05F6                DOT3:        
05F6   0B                     DEC   bc   
05F7   CD 41 09               CALL   prtdec   
05FA                DOT4:        
05FA   3E 20                  LD   a," "   
05FC   CD 85 00               CALL   putchar   
05FF   DD E9                  JP   (ix)   
0601                             ; division subroutine.
0601                             ; bc: divisor, de: dividend, hl: remainder
0601                DIVIDE:      
0601   21 00 00               LD   hl,0   ; zero the remainder
0604   3E 10                  LD   a,16   ; loop counter
0606                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0606   CB 21                  SLA   c   
0608   CB 10                  RL   b   
060A   ED 6A                  ADC   hl,hl   
060C   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060E   38 03                  JR   c,divide2   
0610   0C                     INC   c   
0611   18 01                  JR   divide3   
0613                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0613   19                     ADD   hl,de   
0614                DIVIDE3:      
0614   3D                     DEC   a   
0615   20 EF                  JR   nz,divide1   
0617   50 59                  LD   de,bc   ; result from bc to de
0619   C9                     RET      
061A                             ; hl = value1, de = value2
061A                             ; hl = result
061A                EQUALS:      
061A   B7                     OR   a   ; reset the carry flag
061B   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
061D   28 10                  JR   z,true1   
061F   C3 35 06               JP   false1   
0622                             ; hl = value1 de = value2
0622                             ; hl = result
0622                LESSTHANEQ:      
0622   B7                     OR   a   
0623   ED 52                  SBC   hl,de   
0625   18 05                  JR   lessthan1   
0627                             ; hl = value1 de = value2
0627                             ; hl = result
0627                LESSTHAN:      
0627   B7                     OR   a   
0628   ED 52                  SBC   hl,de   
062A   28 09                  JR   z,false1   
062C                LESSTHAN1:      
062C   FA 35 06               JP   m,false1   
062F                TRUE1:       
062F   21 FF FF               LD   hl,TRUE   
0632   E5                     PUSH   hl   
0633   DD E9                  JP   (ix)   
0635                NULL1:       
0635                FALSE1:      
0635   21 00 00               LD   hl,FALSE   
0638   E5                     PUSH   hl   
0639   DD E9                  JP   (ix)   
063B                LPAREN:      
063B   C3 D5 04               JP   block   
063E                             ; execute a block of code which ends with }
063E                             ; creates a root scope if BP == stack
063E                             ; else uses outer scope
063E                CARET:       
063E                GO:          
063E   D1                     POP   de   ; de = block*
063F                GO1:         
063F   7B                     LD   a,e   ; if block* == null, exit
0640   B2                     OR   d   
0641   20 02                  JR   nz,go2   
0643   DD E9                  JP   (ix)   
0645                GO2:         
0645   1A                     LD   a,(de)   
0646   FE 7B                  CP   "{"   
0648   28 07                  JR   z,goBlock1   
064A   FE 28                  CP   "("   
064C   C2 84 06               JP   nz,goFunc   
064F   13                     INC   de   ; de is the address to jump back to
0650   D5                     PUSH   de   ; push de just before stack frame
0651                GOBLOCK:      
0651                GOBLOCK1:      
0651   ED 53 FA 3C            LD   (vTemp1),de   ; save de
0655   21 80 3B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0658   FD 54                  LD   d,iyh   
065A   FD 5D                  LD   e,iyl   
065C   B7                     OR   a   ; if stack* == BP then this is the root_scope
065D   ED 52                  SBC   hl,de   
065F   ED 5B FA 3C            LD   de,(vTemp1)   ; restore de
0663   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0664   B4                     OR   h   
0665   3E 00                  LD   a,0   
0667   28 6C                  JR   z,goFunc8   
0669   C5                     PUSH   bc   ; push IP
066A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
066D   FD 46 05               LD   b,(iy+5)   
0670   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0673   FD 66 03               LD   h,(iy+3)   
0676                GOBLOCK2:      
0676   C5                     PUSH   bc   ; arg_list*
0677   E5                     PUSH   hl   ; first_arg*
0678   FD E5                  PUSH   iy   ; push BP
067A   FD 21 00 00            LD   iy,0   ; BP = SP
067E   FD 39                  ADD   iy,sp   
0680   42 4B                  LD   bc,de   ; bc = de = block*-1
0682   DD E9                  JP   (ix)   
0684                GOFUNC:      ; execute function
0684   EB                     EX   de,hl   ; hl = func*
0685   5E                     LD   e,(hl)   ; de = partial_array*
0686   23                     INC   hl   
0687   56                     LD   d,(hl)   
0688   23                     INC   hl   
0689   7B                     LD   a,e   ; if partial_array* == null skip
068A   B2                     OR   d   
068B   28 21                  JR   z,goFunc3   
068D   ED 43 FA 3C            LD   (vTemp1),bc   
0691   22 FC 3C               LD   (vTemp2),hl   ; save bc,hl
0694   EB                     EX   de,hl   ; hl = partial_array*
0695   2B                     DEC   hl   ; bc = count
0696   46                     LD   b,(hl)   
0697   2B                     DEC   hl   
0698   4E                     LD   c,(hl)   
0699   23                     INC   hl   ; push each item on stack
069A   23                     INC   hl   
069B   18 06                  JR   goFunc2   
069D                GOFUNC1:      
069D   5E                     LD   e,(hl)   ; de = partial item
069E   23                     INC   hl   
069F   56                     LD   d,(hl)   
06A0   23                     INC   hl   
06A1   D5                     PUSH   de   ; push on stack
06A2   0B                     DEC   bc   
06A3                GOFUNC2:      
06A3   79                     LD   a,c   ; if count != 0 then loop
06A4   B0                     OR   b   
06A5   20 F6                  JR   nz,goFunc1   
06A7   ED 4B FA 3C            LD   bc,(vTemp1)   ; restore bc
06AB   2A FC 3C               LD   hl,(vTemp2)   ; restore hl
06AE                GOFUNC3:      
06AE   5E                     LD   e,(hl)   ; de = block*
06AF   23                     INC   hl   
06B0   56                     LD   d,(hl)   
06B1   23                     INC   hl   
06B2   ED 53 FA 3C            LD   (vTemp1),de   ; save block*
06B6   5E                     LD   e,(hl)   ; de = arg_list*
06B7   23                     INC   hl   
06B8   56                     LD   d,(hl)   
06B9   23                     INC   hl   
06BA   EB                     EX   de,hl   ; hl = arg_list*
06BB   ED 5B FA 3C            LD   de,(vTemp1)   ; restore de = block*
06BF   7D                     LD   a,l   ; if arg_list* == null a = 0
06C0   B4                     OR   h   
06C1   20 03                  JR   nz,goFunc4   
06C3   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06C4   18 0F                  JR   goFunc8   
06C6                GOFUNC4:      ; allocate locals
06C6   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06C7   7E                     LD   a,(hl)   
06C8   18 03                  JR   goFunc6   
06CA                GOFUNC5:      ; loop
06CA   3B                     DEC   sp   
06CB   3B                     DEC   sp   
06CC   3D                     DEC   a   
06CD                GOFUNC6:      
06CD   B7                     OR   a   
06CE   20 FA                  JR   nz,goFunc5   ; end loop
06D0                GOFUNC7:      
06D0   2B                     DEC   hl   ; a = num_args* x 2
06D1   7E                     LD   a,(hl)   
06D2   23                     INC   hl   
06D3   23                     INC   hl   
06D4   87                     ADD   a,a   ; a *= 2
06D5                GOFUNC8:      
06D5   C5                     PUSH   bc   ; push IP
06D6   44 4D                  LD   bc,hl   
06D8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DB   85                     ADD   a,l   
06DC   6F                     LD   l,a   
06DD   39                     ADD   hl,sp   
06DE   18 96                  JR   goBlock2   
06E0                HASH:        
06E0                HEXNUM:      
06E0   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E3                HEXNUM1:      
06E3   03                     INC   bc   
06E4   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E5   CB 77                  BIT   6,a   ; is it uppercase alpha?
06E7   28 02                  JR   z,hexnum2   ; no a decimal
06E9   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EB                HEXNUM2:      
06EB   D6 30                  SUB   $30   ; form decimal digit
06ED   DA 6B 07               JP   c,num2   
06F0   FE 10                  CP   $0F+1   
06F2   D2 6B 07               JP   nc,num2   
06F5   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06F6   29                     ADD   hl,hl   ; 4X
06F7   29                     ADD   hl,hl   ; 8X
06F8   29                     ADD   hl,hl   ; 16X
06F9   85                     ADD   a,l   ; add into bottom of hl
06FA   6F                     LD   l,a   
06FB   18 E6                  JR   hexnum1   
06FD                UPCASE:      
06FD   0A                     LD   a,(bc)   ; a = identifier char
06FE   D6 41                  SUB   "A"   ; "A" = 0
0700   18 05                  JR   ident1   
0702                LOWCASE:      
0702   0A                     LD   a,(bc)   
0703   D6 61                  SUB   "a"   
0705   C6 1A                  ADD   a,26   
0707                IDENT1:      
0707   87                     ADD   a,a   ; l = a * 2
0708   6F                     LD   l,a   
0709   26 3C                  LD   h,msb(vars)   
070B   22 EE 3C               LD   (vPointer),hl   ; store address in setter
070E   5E                     LD   e,(hl)   
070F   23                     INC   hl   
0710   56                     LD   d,(hl)   
0711   D5                     PUSH   de   
0712   DD E9                  JP   (ix)   
0714                             ; if
0714                             ; condition then -- value
0714                QUESTION:      
0714                IF:          
0714   03                     INC   bc   
0715   0A                     LD   a,(bc)   
0716   FE 3F                  CP   "?"   
0718   28 06                  JR   z,ifte   
071A   0B                     DEC   bc   
071B   11 00 00               LD   de,NUL   ; NUL pointer for else
071E   18 01                  JR   ifte1   
0720                             ; ifte
0720                             ; condition then else -- value
0720                IFTE:        
0720   D1                     POP   de   ; de = else
0721                IFTE1:       
0721   E1                     POP   hl   ; hl = then
0722   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0723   7C                     LD   a,h   
0724   B5                     OR   l   
0725   E1                     POP   hl   ; hl = then
0726   CA 3F 06               JP   z,go1   ; if z de = else
0729   EB                     EX   de,hl   ; condition = false, de = then
072A   C3 3F 06               JP   go1   
072D                STAR:        
072D                MUL:         
072D   D1                     POP   de   ; get first value
072E   E1                     POP   hl   
072F                MUL2:        
072F   C5                     PUSH   bc   ; Preserve the IP
0730   44 4D                  LD   bc,hl   ; bc = 2nd value
0732   21 00 00               LD   hl,0   
0735   3E 10                  LD   a,16   
0737                MUL3:        
0737   29                     ADD   hl,hl   
0738   CB 13                  RL   e   
073A   CB 12                  RL   d   
073C   30 04                  JR   nc,$+6   
073E   09                     ADD   hl,bc   
073F   30 01                  JR   nc,$+3   
0741   13                     INC   de   
0742   3D                     DEC   a   
0743   20 F2                  JR   nz,mul3   
0745   C1                     POP   bc   ; Restore the IP
0746   C3 99 03               JP   add3   
0749                NUM:         
0749   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
074C   0A                     LD   a,(bc)   ; Get numeral or -
074D   FE 2D                  CP   "-"   
074F   20 01                  JR   nz,num0   
0751   03                     INC   bc   ; move to next char, no flags affected
0752                NUM0:        
0752   08                     EX   af,af'   ; save zero flag = 0 for later
0753                NUM1:        
0753   0A                     LD   a,(bc)   ; read digit
0754   D6 30                  SUB   "0"   ; less than 0?
0756   38 13                  JR   c,num2   ; not a digit, exit loop
0758   FE 0A                  CP   10   ; greater that 9?
075A   30 0F                  JR   nc,num2   ; not a digit, exit loop
075C   03                     INC   bc   ; inc IP
075D   54 5D                  LD   de,hl   ; multiply hl * 10
075F   29                     ADD   hl,hl   
0760   29                     ADD   hl,hl   
0761   19                     ADD   hl,de   
0762   29                     ADD   hl,hl   
0763   85                     ADD   a,l   ; add digit in a to hl
0764   6F                     LD   l,a   
0765   3E 00                  LD   a,0   
0767   8C                     ADC   a,h   
0768   67                     LD   h,a   
0769   18 E8                  JR   num1   
076B                NUM2:        
076B   0B                     DEC   bc   
076C   08                     EX   af,af'   ; restore zero flag
076D   20 07                  JR   nz,num3   
076F   EB                     EX   de,hl   ; negate the value of hl
0770   21 00 00               LD   hl,0   
0773   B7                     OR   a   ; jump to sub2
0774   ED 52                  SBC   hl,de   
0776                NUM3:        
0776   E5                     PUSH   hl   ; Put the number on the stack
0777   DD E9                  JP   (ix)   ; and process the next character
0779                UNDERSCORE:      
0779                REMAIN:      
0779   2A F0 3C               LD   hl,(vRemain)   
077C   E5                     PUSH   hl   
077D   DD E9                  JP   (ix)   
077F                RPAREN:      
077F   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0782   FD 46 09               LD   b,(iy+9)   
0785   DD E9                  JP   (ix)   
0787                             ; arg_list* block* -- ptr
0787                SEMICOLON:      
0787   D1                     POP   de   ; de = block* hl = heap*
0788   2A EC 3C               LD   hl,(vHeapPtr)   
078B   AF                     XOR   a   
078C   77                     LD   (hl),a   ; compile null partial_array*
078D   23                     INC   hl   
078E   77                     LD   (hl),a   
078F   23                     INC   hl   
0790   73                     LD   (hl),e   ; compile block*
0791   23                     INC   hl   
0792   72                     LD   (hl),d   
0793   23                     INC   hl   
0794   D1                     POP   de   ; de = block*
0795   73                     LD   (hl),e   ; compile arg_list*
0796   23                     INC   hl   
0797   72                     LD   (hl),d   
0798   23                     INC   hl   
0799   ED 5B EC 3C            LD   de,(vHeapPtr)   ; return func*
079D   D5                     PUSH   de   
079E   22 EC 3C               LD   (vHeapPtr),hl   ; heap* += 4
07A1   DD E9                  JP   (ix)   
07A3                             ; shiftLeft
07A3                             ; value count -- value2          shift left count places
07A3                SHIFTLEFT:      
07A3   50 59                  LD   de,bc   ; save IP
07A5   C1                     POP   bc   ; bc = count
07A6   41                     LD   b,c   ; b = loop counter
07A7   E1                     POP   hl   
07A8   04                     INC   b   ; test for counter=0 case
07A9   18 01                  JR   shiftLeft2   
07AB                SHIFTLEFT1:      
07AB   29                     ADD   hl,hl   ; left shift hl
07AC                SHIFTLEFT2:      
07AC   10 FD                  DJNZ   shiftLeft1   
07AE   E5                     PUSH   hl   
07AF   42 4B                  LD   bc,de   ; restore IP
07B1   DD E9                  JP   (ix)   
07B3                             ; shiftRight
07B3                             ; value count -- value2          shift left count places
07B3                SHIFTRIGHT:      
07B3   50 59                  LD   de,bc   ; save IP
07B5   C1                     POP   bc   ; bc = count
07B6   41                     LD   b,c   ; b = loop counter
07B7   E1                     POP   hl   
07B8   04                     INC   b   ; test for counter=0 case
07B9   18 04                  JR   shiftRight2   
07BB                SHIFTRIGHT1:      
07BB   CB 3C                  SRL   h   ; right shift hl
07BD   CB 1D                  RR   l   
07BF                SHIFTRIGHT2:      
07BF   10 FA                  DJNZ   shiftRight1   
07C1   E5                     PUSH   hl   
07C2   42 4B                  LD   bc,de   ; restore IP
07C4   DD E9                  JP   (ix)   
07C6                             ; string
07C6                             ; -- ptr                        ; points to start of string chars,
07C6                             ; length is stored at start - 2 bytes
07C6                DBLQUOTE:      
07C6                STRING:      
07C6   2A EC 3C               LD   hl,(vHeapPtr)   ; hl = heap*
07C9   23                     INC   hl   ; skip length field to start
07CA   23                     INC   hl   
07CB   E5                     PUSH   hl   ; save start of string
07CC   03                     INC   bc   ; point to next char
07CD   18 03                  JR   string2   
07CF                STRING1:      
07CF   77                     LD   (hl),a   
07D0   23                     INC   hl   ; increase count
07D1   03                     INC   bc   ; point to next char
07D2                STRING2:      
07D2   0A                     LD   a,(bc)   
07D3   FE 22                  CP   DQUOTE   ; " is the string terminator
07D5   20 F8                  JR   nz,string1   
07D7   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D9   20 F4                  JR   nz,string1   
07DB   AF                     XOR   a   ; write NUL to terminate string
07DC   77                     LD   (hl),a   ; hl = end of string
07DD   23                     INC   hl   
07DE   22 EC 3C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07E1   2B                     DEC   hl   ; hl = end of string without terminator
07E2   D1                     POP   de   ; de = start of string
07E3   D5                     PUSH   de   ; return start of string
07E4   B7                     OR   a   ; hl = length bytes, de = start of string
07E5   ED 52                  SBC   hl,de   
07E7   EB                     EX   de,hl   
07E8   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E9   72                     LD   (hl),d   
07EA   2B                     DEC   hl   
07EB   73                     LD   (hl),e   
07EC   DD E9                  JP   (ix)   
07EE                MINUS:       ; negative sign or subtract
07EE   03                     INC   bc   ; check if sign of a number
07EF   0A                     LD   a,(bc)   
07F0   0B                     DEC   bc   
07F1   FE 30                  CP   "0"   
07F3   38 05                  JR   c,sub   
07F5   FE 3A                  CP   "9"+1   
07F7   DA 3E 03               JP   c,num_   
07FA                SUB:         ; Subtract the value 2nd on stack from top of stack
07FA   03                     INC   bc   
07FB   FE 2D                  CP   "-"   
07FD   20 05                  JR   nz,sub1   
07FF   E1                     POP   hl   
0800   2B                     DEC   hl   
0801   C3 8F 04               JP   assign0   
0804                SUB1:        
0804   0B                     DEC   bc   
0805   D1                     POP   de   
0806   E1                     POP   hl   
0807   B7                     OR   a   
0808   ED 52                  SBC   hl,de   
080A   C3 99 03               JP   add3   
080D                             ;*******************************************************************
080D                             ; commands
080D                             ; a contains command letter
080D                             ; bc points to command letter
080D                             ;*******************************************************************
080D                COMMAND:      
080D   FE 61                  CP   "a"   ; \a absolute
080F   CA 59 08               JP   z,abs1   
0812   FE 62                  CP   "b"   ; \x break
0814   CA 8F 08               JP   z,break   
0817   FE 63                  CP   "c"   ; \c chars
0819   CA A9 08               JP   z,chars   
081C   FE 70                  CP   "p"   ; \p partial
081E   CA 66 08               JP   z,partial   
0821   FE 66                  CP   "f"   ; \f false
0823   CA 35 06               JP   z,false1   
0826   FE 68                  CP   "h"   ; \h heap pointer
0828   CA B1 08               JP   z,heapPtr   
082B   FE 69                  CP   "i"   ; \i input
082D   CA BD 08               JP   z,input   
0830   FE 6B                  CP   "k"   ; \k key
0832   CA C8 08               JP   z,key   
0835   FE 6E                  CP   "n"   ; \n numbers
0837   CA DA 08               JP   z,numbers   
083A   FE 6F                  CP   "o"   ; \o output
083C   CA D1 08               JP   z,output   
083F   FE 74                  CP   "t"   ; \t true
0841   CA 2F 06               JP   z,true1   
0844   FE 75                  CP   "u"   ; \v utility
0846   CA E0 08               JP   z,utility   
0849   FE 76                  CP   "v"   ; \v invert
084B   CA CF 03               JP   z,invert   
084E   FE 78                  CP   "x"   ; \x xor
0850   CA C4 03               JP   z,xor   
0853                ERROR1:      
0853   21 01 00               LD   hl,1   ; error 1: unknown command
0856   C3 AE 0A               JP   error   
0859                ABS1:        
0859   E1                     POP   hl   
085A   CB 7C                  BIT   7,h   
085C   C8                     RET   z   
085D   AF                     XOR   a   
085E   95                     SUB   l   
085F   6F                     LD   l,a   
0860   9F                     SBC   a,a   
0861   94                     SUB   h   
0862   67                     LD   h,a   
0863   E5                     PUSH   hl   
0864   DD E9                  JP   (ix)   
0866                             ; partial
0866                             ; array* func* -- func1*
0866                PARTIAL:      
0866   E1                     POP   hl   ; h1 = func*
0867   ED 5B EC 3C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
086B   ED 43 FA 3C            LD   (vTemp1),bc   ; save IP
086F   01 06 00               LD   bc,6   ; bc = count
0872   ED B0                  LDIR      ; clone func
0874   ED 4B FA 3C            LD   bc,(vTemp1)   ; restore IP
0878   2A EC 3C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
087B   ED 53 EC 3C            LD   (vHeapPtr),de   ; heap* += 6
087F   D1                     POP   de   ; de = array*
0880   E5                     PUSH   hl   ; return partial_array*
0881   73                     LD   (hl),e   ; compile array*
0882   23                     INC   hl   
0883   72                     LD   (hl),d   
0884   DD E9                  JP   (ix)   
0886                COMMENT:      
0886   03                     INC   bc   ; point to next char
0887   0A                     LD   a,(bc)   
0888   FE 20                  CP   " "   ; terminate on any char less than SP
088A   30 FA                  JR   nc,comment   
088C   0B                     DEC   bc   
088D   DD E9                  JP   (ix)   
088F                BREAK:       
088F   E1                     POP   hl   
0890   7D                     LD   a,l   
0891   B4                     OR   h   
0892   28 02                  JR   z,break1   
0894   DD E9                  JP   (ix)   
0896                BREAK1:      
0896   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0898   FD 54                  LD   d,iyh   
089A   21 08 00               LD   hl,8   
089D   19                     ADD   hl,de   
089E   23                     INC   hl   
089F   23                     INC   hl   
08A0   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
08A3   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08A6   C3 3E 05               JP   blockEnd   
08A9                CHARS:       
08A9   21 01 00               LD   hl,1   
08AC                CHARS1:      
08AC   22 E6 3C               LD   (vDataWidth),hl   
08AF   DD E9                  JP   (ix)   
08B1                HEAPPTR:      
08B1   2A EC 3C               LD   hl,(vHeapPtr)   
08B4   E5                     PUSH   hl   
08B5   21 EC 3C               LD   hl,vHeapPtr   
08B8   22 EE 3C               LD   (vPointer),hl   
08BB   DD E9                  JP   (ix)   
08BD                             ; Z80 port input
08BD                             ; port -- value
08BD                INPUT:       
08BD   E1                     POP   hl   
08BE   59                     LD   e,c   ; save IP
08BF   4D                     LD   c,l   
08C0   ED 68                  IN   l,(c)   
08C2   26 00                  LD   h,0   
08C4   4B                     LD   c,e   ; restore IP
08C5   E5                     PUSH   hl   
08C6   DD E9                  JP   (ix)   
08C8                KEY:         
08C8   CD 81 00               CALL   getchar   
08CB   26 00                  LD   h,0   
08CD   6F                     LD   l,a   
08CE   E5                     PUSH   hl   
08CF   DD E9                  JP   (ix)   
08D1                             ; Z80 port output
08D1                             ; value port --
08D1                OUTPUT:      
08D1   E1                     POP   hl   
08D2   59                     LD   e,c   ; save IP
08D3   4D                     LD   c,l   
08D4   E1                     POP   hl   
08D5   ED 69                  OUT   (c),l   
08D7   4B                     LD   c,e   ; restore IP
08D8   DD E9                  JP   (ix)   
08DA                NUMBERS:      
08DA   21 02 00               LD   hl,2   
08DD   C3 AC 08               JP   chars1   
08E0                UTILITY:      
08E0   03                     INC   bc   
08E1   0A                     LD   a,(bc)   
08E2   FE 61                  CP   "a"   ; \a addrOf
08E4   CA ED 08               JP   z,addrOf   
08E7   21 02 00               LD   hl,2   ; error 1: unknown command
08EA   C3 AE 0A               JP   error   
08ED                             ; /ua addrOf
08ED                             ; char -- addr
08ED                ADDROF:      
08ED   E1                     POP   hl   ; a = char
08EE   7D                     LD   a,l   
08EF   FE 7B                  CP   "z"+1   ; if a > z then exit
08F1   30 13                  JR   nc,addrOf2   
08F3   D6 41                  SUB   "A"   ; a - 65
08F5   30 0F                  JR   nc,addrOf2   ; if < A then exit
08F7   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08F9   38 02                  JR   c,addrOf1   
08FB   D6 08                  SUB   "a"-"Z"+1   
08FD                ADDROF1:      
08FD   87                     ADD   a,a   ; double a
08FE   21 00 3C               LD   hl,VARS   ; hl = VARS + a
0901   85                     ADD   a,l   
0902   6F                     LD   l,a   
0903   8C                     ADC   a,h   
0904   67                     LD   h,a   
0905   E5                     PUSH   hl   
0906                ADDROF2:      
0906   DD E9                  JP   (ix)   
0908                             ; /uk print stack
0908                             ; --
0908                PRTSTK:      
0908   ED 43 FA 3C            LD   (vTemp1),bc   
090C   CD F3 09               CALL   printStr   
090F   3D 3E 20 00            .CSTR   "=> "   
0913   21 80 3B               LD   hl,STACK   
0916   ED 72                  SBC   hl,sp   
0918   CB 3C                  SRL   h   
091A   CB 1D                  RR   l   
091C   44 4D                  LD   bc,hl   
091E   21 80 3B               LD   hl,STACK   
0921   18 0F                  JR   prtStk2   
0923                PRTSTK1:      
0923   0B                     DEC   bc   
0924   2B                     DEC   hl   
0925   56                     LD   d,(hl)   
0926   2B                     DEC   hl   
0927   5E                     LD   e,(hl)   
0928   EB                     EX   de,hl   
0929   CD 89 09               CALL   prthex   
092C   EB                     EX   de,hl   
092D   3E 20                  LD   a," "   
092F   CD 85 00               CALL   putchar   
0932                PRTSTK2:      
0932   79                     LD   a,c   
0933   B0                     OR   b   
0934   20 ED                  JR   nz,prtStk1   
0936   CD E3 09               CALL   prompt   
0939   ED 4B FA 3C            LD   bc,(vTemp1)   
093D   DD E9                  JP   (ix)   
093F                             ; 
093F                             ; 
093F                             ; 
093F                             ; 
093F                FILTER:      
093F                MAP:         
093F                SCAN:        
093F   DD E9                  JP   (ix)   
0941                             ; print decimal
0941                             ; hl = value
0941                PRTDEC:      
0941   CB 7C                  BIT   7,h   
0943   28 0B                  JR   z,prtdec0   
0945   3E 2D                  LD   a,"-"   
0947   CD 85 00               CALL   putchar   
094A   AF                     XOR   a   
094B   95                     SUB   l   
094C   6F                     LD   l,a   
094D   9F                     SBC   a,a   
094E   94                     SUB   h   
094F   67                     LD   h,a   
0950                PRTDEC0:      
0950   C5                     PUSH   bc   
0951   0E 00                  LD   c,0   ; leading zeros flag = false
0953   11 F0 D8               LD   de,-10000   
0956   CD 72 09               CALL   prtdec1   
0959   11 18 FC               LD   de,-1000   
095C   CD 72 09               CALL   prtdec1   
095F   11 9C FF               LD   de,-100   
0962   CD 72 09               CALL   prtdec1   
0965   1E F6                  LD   e,-10   
0967   CD 72 09               CALL   prtdec1   
096A   0C                     INC   c   ; flag = true for at least digit
096B   1E FF                  LD   e,-1   
096D   CD 72 09               CALL   prtdec1   
0970   C1                     POP   bc   
0971   C9                     RET      
0972                PRTDEC1:      
0972   06 2F                  LD   b,"0"-1   
0974                PRTDEC2:      
0974   04                     INC   b   
0975   19                     ADD   hl,de   
0976   38 FC                  JR   c,prtdec2   
0978   ED 52                  SBC   hl,de   
097A   3E 30                  LD   a,"0"   
097C   B8                     CP   b   
097D   20 05                  JR   nz,prtdec3   
097F   AF                     XOR   a   
0980   B1                     OR   c   
0981   C8                     RET   z   
0982   18 01                  JR   prtdec4   
0984                PRTDEC3:      
0984   0C                     INC   c   
0985                PRTDEC4:      
0985   78                     LD   a,b   
0986   C3 85 00               JP   putchar   
0989                PRTHEX:      ; display hl as a 16-bit number in hex.
0989   C5                     PUSH   bc   ; preserve the IP
098A   7C                     LD   a,h   
098B   CD 94 09               CALL   prthex2   
098E   7D                     LD   a,l   
098F   CD 94 09               CALL   prthex2   
0992   C1                     POP   bc   
0993   C9                     RET      
0994                PRTHEX2:      
0994   4F                     LD   c,a   
0995   1F                     RRA      
0996   1F                     RRA      
0997   1F                     RRA      
0998   1F                     RRA      
0999   CD 9D 09               CALL   prthex3   
099C   79                     LD   a,c   
099D                PRTHEX3:      
099D   E6 0F                  AND   0x0F   
099F   C6 90                  ADD   a,0x90   
09A1   27                     DAA      
09A2   CE 40                  ADC   a,0x40   
09A4   27                     DAA      
09A5   C3 85 00               JP   putchar   
09A8                PRTSTR0:      
09A8   CD 85 00               CALL   putchar   
09AB   23                     INC   hl   
09AC                PRTSTR:      
09AC   7E                     LD   a,(hl)   
09AD   B7                     OR   a   
09AE   20 F8                  JR   nz,prtstr0   
09B0   C9                     RET      
09B1                             ; **************************************************************************
09B1                             ; calculate nesting value
09B1                             ; a is char to be tested,
09B1                             ; e is the nesting value (initially 0)
09B1                             ; e is increased by ( and [
09B1                             ; e is decreased by ) and ]
09B1                             ; e has its bit 7 toggled by `
09B1                             ; limited to 127 levels
09B1                             ; **************************************************************************
09B1                NESTING:      
09B1   FE 22                  CP   DQUOTE   ; quote char
09B3   28 06                  JR   z,nesting0   
09B5   FE 60                  CP   "`"   ; quote char
09B7   28 02                  JR   z,nesting0   
09B9   18 0A                  JR   nesting1   
09BB                NESTING0:      
09BB   CB 7B                  BIT   7,e   
09BD   28 03                  JR   z,nesting1a   
09BF   CB BB                  RES   7,e   
09C1   C9                     RET      
09C2                NESTING1A:      
09C2   CB FB                  SET   7,e   
09C4   C9                     RET      
09C5                NESTING1:      
09C5   CB 7B                  BIT   7,e   
09C7   C0                     RET   nz   
09C8   FE 7B                  CP   "{"   
09CA   28 08                  JR   z,nesting2   
09CC   FE 5B                  CP   "["   
09CE   28 04                  JR   z,nesting2   
09D0   FE 28                  CP   "("   
09D2   20 02                  JR   nz,nesting3   
09D4                NESTING2:      
09D4   1C                     INC   e   
09D5   C9                     RET      
09D6                NESTING3:      
09D6   FE 7D                  CP   "}"   
09D8   28 07                  JR   z,nesting4   
09DA   FE 5D                  CP   "]"   
09DC   28 03                  JR   z,nesting4   
09DE   FE 29                  CP   ")"   
09E0   C0                     RET   nz   
09E1                NESTING4:      
09E1   1D                     DEC   e   
09E2   C9                     RET      
09E3                PROMPT:      
09E3   CD F3 09               CALL   printStr   
09E6   0D 0A 3E 20 00         .CSTR   "\r\n> "   
09EB   C9                     RET      
09EC                CRLF:        
09EC   CD F3 09               CALL   printStr   
09EF   0D 0A 00               .CSTR   "\r\n"   
09F2   C9                     RET      
09F3                             ; prints a null teminated string
09F3                             ; the string should be immedaitely following the call
09F3                PRINTSTR:      
09F3   E3                     EX   (sp),hl   ; swap			
09F4   CD AC 09               CALL   prtstr   
09F7   23                     INC   hl   ; inc past NUL
09F8   E3                     EX   (sp),hl   ; put it back	
09F9   C9                     RET      
09FA                INIT:        
09FA   DD 2A EA 3C            LD   ix,(vNext)   
09FE   FD 21 80 3B            LD   iy,STACK   
0A02   21 80 01               LD   hl,isysVars   
0A05   11 E6 3C               LD   de,sysVars   
0A08   01 10 00               LD   bc,8 * 2   
0A0B   ED B0                  LDIR      
0A0D   21 00 3C               LD   hl,vars   ; 52 vars LO HI
0A10   06 34                  LD   b,26*2   
0A12   AF                     XOR   a   
0A13                INIT0:       
0A13   77                     LD   (hl),a   
0A14   23                     INC   hl   
0A15   10 FC                  DJNZ   init0   
0A17   C9                     RET      
0A18                START:       
0A18   31 80 3B               LD   sp,STACK   ; start of monty
0A1B   CD FA 09               CALL   init   ; setups
0A1E   CD F3 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A21   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0A2E                INTERPRET:      
0A2E   CD E3 09               CALL   prompt   
0A31   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A34   ED 43 E8 3C            LD   (vTIBPtr),bc   
0A38                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A38   1E 00                  LD   e,0   ; initilize nesting value
0A3A   C5                     PUSH   bc   ; save offset into TIB,
0A3B                             ; bc is also the count of chars in TIB
0A3B   21 00 3E               LD   hl,TIB   ; hl is start of TIB
0A3E   18 06                  JR   interpret4   
0A40                INTERPRET3:      
0A40   7E                     LD   a,(hl)   ; a = char in TIB
0A41   23                     INC   hl   ; inc pointer into TIB
0A42   0B                     DEC   bc   ; dec count of chars in TIB
0A43   CD B1 09               CALL   nesting   ; update nesting value
0A46                INTERPRET4:      
0A46   79                     LD   a,c   ; is count zero?
0A47   B0                     OR   b   
0A48   20 F6                  JR   nz,interpret3   ; if not loop
0A4A   C1                     POP   bc   ; restore offset into TIB
0A4B                INTERPRET5:      
0A4B   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A4E   FE 20                  CP   $20   ; compare to space
0A50   30 1A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0A52   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0A54                             ; ???? NEEDED?
0A54   28 37                  JR   z,interpret8   
0A56   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A58   28 20                  JR   z,interpret7   ; if anything else its macro/control
0A5A   FE 05                  CP   CTRL_E   
0A5C   28 7C                  JR   z,edit   
0A5E   FE 08                  CP   CTRL_H   
0A60   28 5F                  JR   z,backSpace   
0A62   FE 0A                  CP   CTRL_J   
0A64   28 58                  JR   z,reEdit   
0A66   FE 10                  CP   CTRL_P   
0A68   28 67                  JR   z,printStack   
0A6A                             ; DB     lsb(edit_)       ; ENQ ^E  5
0A6A                             ; DB     lsb(reedit_)     ; LF  ^J 10
0A6A                             ; DB     lsb(list_)       ; FF  ^L 12
0A6A                             ; DB     lsb(printStack_) ; DLE ^P 16
0A6A                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0A6A                             ; DB lsb(prtStk_)   ;\#4    ( -- )        non-destructively prints stack
0A6A                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0A6A                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0A6A                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0A6A                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0A6A                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0A6A                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0A6A                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0A6A                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0A6A                INTERPRET5A:      
0A6A                             ; ld (vTIBPtr),bc
0A6A                             ; ld bc,(vTIBPtr)
0A6A   18 CC                  JR   interpret2   
0A6C                INTERPRET6:      
0A6C   21 00 3E               LD   hl,TIB   
0A6F   09                     ADD   hl,bc   
0A70   77                     LD   (hl),a   ; store the character in textbuf
0A71   03                     INC   bc   
0A72   CD 85 00               CALL   putchar   ; echo character to screen
0A75   CD B1 09               CALL   nesting   
0A78   18 D1                  JR   interpret5   ; wait for next character
0A7A                INTERPRET7:      
0A7A   21 00 3E               LD   hl,TIB   
0A7D   09                     ADD   hl,bc   
0A7E   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A80   23                     INC   hl   
0A81   36 0A                  LD   (hl),"\n"   
0A83   23                     INC   hl   
0A84   03                     INC   bc   
0A85   03                     INC   bc   
0A86   CD EC 09               CALL   crlf   ; echo character to screen
0A89   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A8A   B7                     OR   a   
0A8B   20 BE                  JR   nz,interpret5   
0A8D                INTERPRET8:      
0A8D   ED 43 E8 3C            LD   (vTIBPtr),bc   
0A91   01 00 3E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A94                             ; we pressed enter
0A94   0B                     DEC   bc   
0A95                NEXT:        
0A95   03                     INC   bc   ; Increment the IP
0A96   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A97   FE 20                  CP   " "   ; whitespace?
0A99   28 FA                  JR   z,next   ; space? ignore
0A9B   38 07                  JR   c,next1   
0A9D   6F                     LD   l,a   ; index into table
0A9E   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0AA0   6E                     LD   l,(hl)   ; get low jump address
0AA1   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0AA3   E9                     JP   (hl)   ; Jump to routine
0AA4                NEXT1:       
0AA4   FE 00                  CP   NUL   ; end of input string?
0AA6   28 03                  JR   z,exit   
0AA8   C3 2E 0A               JP   interpret   ; no, other whitespace, macros?
0AAB                EXIT:        
0AAB   60 69                  LD   hl,bc   
0AAD   E9                     JP   (hl)   
0AAE                ERROR:       
0AAE   CD F3 09               CALL   printStr   
0AB1   45 72 72 6F 72 20 00   .CSTR   "Error "   
0AB8   CD 41 09               CALL   prtdec   
0ABB   C3 2E 0A               JP   interpret   
0ABE                REEDIT:      
0ABE   C3 38 0A               JP   interpret2   
0AC1                BACKSPACE:      
0AC1   79                     LD   a,c   
0AC2   B0                     OR   b   
0AC3   CA 38 0A               JP   z,interpret2   
0AC6   0B                     DEC   bc   
0AC7   CD F3 09               CALL   printStr   
0ACA   08 20 08 00            .CSTR   "\b \b"   
0ACE   C3 38 0A               JP   interpret2   
0AD1                PRINTSTACK:      
0AD1   CD 3E 06               CALL   go   
0AD4   7B 00 00               .CSTR   "{\uk}"   
0AD7   C3 38 0A               JP   interpret2   
0ADA                             ; edit
0ADA                EDIT:        
0ADA   CD 3E 06               CALL   go   
0ADD   60 3F 60 2E 73 2F 6B 2F 75 65 00 .CSTR   "`?`.s/k/ue"   
0AE8   C3 2E 0A               JP   interpret   
0AEB                             ; editDef:
0AEB                             ;     pop hl                      ; pop ret address
0AEB                             ;     ex (sp),hl                  ; swap with TOS
0AEB                             ;     push hl                     ; dup TOS
0AEB                             ;     ld a,l                      ; a = ident
0AEB                             ;     ld de,TIB                   ; de = start of TIB
0AEB                             ;     ld (vTIBPtr),de             ; update TIB*
0AEB                             ;     push ix                     ; save NEXT
0AEB                             ;     ld ix,editDef0              ; NEXT = editDef0
0AEB                             ;     jp lookupRef                ; convert letter into address
0AEB                             ; editDef0:
0AEB                             ;     ld e,(hl)                   ; de = (hl++)
0AEB                             ;     inc hl
0AEB                             ;     ld d,(hl)
0AEB                             ;     ld a,d                      ; de == 0 ?
0AEB                             ;     or e
0AEB                             ;     jr z,editDef4
0AEB                             ;     ld ix,editDef3              ; NEXT = editDef3
0AEB                             ;     ex de,hl
0AEB                             ;     ld a,(hl)
0AEB                             ;     cp "{"
0AEB                             ;     jr nz,editDef1
0AEB                             ;     jp editBlock0               ; convert letter into address
0AEB                             ; editDef1:
0AEB                             ;     cp "("
0AEB                             ;     jr nz,editDef2
0AEB                             ;     jp editBlock0               ; convert letter into address
0AEB                             ; editDef2:
0AEB                             ;     jp editFunc
0AEB                             ; editDef3:
0AEB                             ;     ld a," "                    ; write assign
0AEB                             ;     call writeChar
0AEB                             ;     pop hl                      ; a = ident
0AEB                             ;     ld a,l
0AEB                             ;     call writeChar
0AEB                             ;     ld a,"="                    ; write assign
0AEB                             ;     call writeChar
0AEB                             ;     ld ix,editDef4              ; NEXT = editDef4
0AEB                             ;     jp printTIB
0AEB                             ; editDef4:
0AEB                             ;     pop ix                      ; restore NEXT
0AEB                             ;     jp (ix)
0AEB                             ; writeChar:
0AEB                             ;     ld de,(vTIBPtr)             ; de = TIB*
0AEB                             ;     ld (de),a                   ; write ident
0AEB                             ;     inc de
0AEB                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0AEB                             ;     ret
0AEB                             ; ; printTIB
0AEB                             ; printTIB:
0AEB                             ;     ld hl,(TIBPtr)
0AEB                             ;     ld de,TIB
0AEB                             ;     or a
0AEB                             ;     sbc hl,de
0AEB                             ;     jp printTIB2
0AEB                             ; printTIB1:
0AEB                             ;     ld a,(de)
0AEB                             ;     call putchar
0AEB                             ; printTIB2:
0AEB                             ;     ld a,l
0AEB                             ;     or h
0AEB                             ;     jr nz,printTIB1
0AEB                             ;     jp (ix)
0AEB                             ; editBlock:
0AEB                             ;     pop hl                      ; hl = block*
0AEB                             ; editBlock0:
0AEB                             ;     push ix                     ; save next
0AEB                             ;     push hl                     ; push block*
0AEB                             ;     push hl                     ; push block*
0AEB                             ;     ld ix,(editBlock2)
0AEB                             ;     jp blockLength
0AEB                             ; editBlock1:
0AEB                             ;     pop hl                      ; bc = length, (sp) = IP
0AEB                             ;     pop de                      ; de = block*
0AEB                             ;     ld a,l
0AEB                             ;     or h
0AEB                             ;     jr z,editBlock2
0AEB                             ;     push bc
0AEB                             ;     ld bc,hl
0AEB                             ;     ex de,hl                    ; hl = block*
0AEB                             ;     ld de,(TIBPtr)              ; de = TIB*
0AEB                             ;     ldir                        ; copy block to TIB
0AEB                             ;     ld (TIBPtr),de              ; save TIB*
0AEB                             ;     pop bc
0AEB                             ; editBlock2:
0AEB                             ;     pop ix                      ; restore next
0AEB                             ;     jp (ix)
0AEB                             ; editFunc:
0AEB                             ;     jp (ix)
0AEB                             ; editArray:
0AEB                             ;     jp (ix)
0AEB                             ; editArglist:
0AEB                             ;     jp (ix)
0AEB                             ; ; blockLength
0AEB                             ; ; addr1 -- length
0AEB                             ; blockLength:
0AEB                             ;     pop hl                      ; block*
0AEB                             ;     push hl                     ; save block*
0AEB                             ;     inc hl                      ; skip first char
0AEB                             ;     ld d,1                      ; increase nesting
0AEB                             ; blockLength1:                   ; Skip to end of definition
0AEB                             ;     ld a,(hl)                   ; Get the next character
0AEB                             ;     inc hl                      ; Point to next character
0AEB                             ;     cp " " + 1                  ; ignore whitespace
0AEB                             ;     jr c,blockLength1
0AEB                             ;     cp ")"
0AEB                             ;     jr z,blockLength4
0AEB                             ;     cp "}"
0AEB                             ;     jr z,blockLength4
0AEB                             ;     cp "]"
0AEB                             ;     jr z,blockLength4
0AEB                             ;     cp "("
0AEB                             ;     jr z,blockLength2
0AEB                             ;     cp "{"
0AEB                             ;     jr z,blockLength2
0AEB                             ;     cp "["
0AEB                             ;     jr z,blockLength2
0AEB                             ;     cp "'"
0AEB                             ;     jr z,blockLength3
0AEB                             ;     cp "`"
0AEB                             ;     jr z,blockLength3
0AEB                             ;     cp DQUOTE
0AEB                             ;     jr z,blockLength3
0AEB                             ;     jr blockLength1
0AEB                             ; blockLength2:
0AEB                             ;     inc d
0AEB                             ;     jr blockLength1
0AEB                             ; blockLength4:
0AEB                             ;     dec d
0AEB                             ;     jr nz, blockLength1         ; get the next element
0AEB                             ; blockLength3:
0AEB                             ;     ld a,$80
0AEB                             ;     xor d
0AEB                             ;     ld d,a
0AEB                             ;     jr nz, blockLength1
0AEB                             ;     pop hl                      ; hl = block*
0AEB                             ;     or a
0AEB                             ;     sbc hl,de
0AEB                             ;     push hl
0AEB                             ;     jp (ix)
0AEB                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0AEB                             ; \a start of stack \#3 depth \b base \$ prompt
0AEB                             ; DW dStack               ; a vS0 start of datastack			
0AEB                             ; DW FALSE                ; b vBase16
0AEB                             ; DW 0                    ; c vTIBPtr an offset to the tib
0AEB                             ; DW 0                    ; d
0AEB                             ; DW 65                   ; e vLastDef "A" last command u defined
0AEB                             ; DW 0                    ; f
0AEB                             ; DW page6                ; g 256 bytes limits
0AEB                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0AEB                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                             ; call printStr
0B00                             ; .cstr "Done!"
0B00                             ; HALT
0B00                             ; 
0B00                          ;*Macro unroll:  test "/f", false
0B00   31 80 3B               LD   SP,STACK   
0B03   CD FA 09               CALL   init   
0B06   CD 9E 3A               CALL   execStr   
0B09   2F 66 00               .CSTR   "/f"   
0B0C                          ;*Macro unroll:  expect "/f",false
0B0C   E1                     POP   HL   
0B0D   E5                     PUSH   HL   
0B0E   11 00 00               LD   DE,false   
0B11   B7                     OR   A   
0B12   ED 52                  SBC   HL,DE   
0B14   7D                     LD   A,L   
0B15   B4                     OR   H   
0B16   28 4D                  JR   Z,expectM_0_2384S43   
0B18   CD F3 09               CALL   printStr   
0B1B   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0B24   CD F3 09               CALL   printStr   
0B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B36   21 00 00               LD   HL,false   
0B39   CD 41 09               CALL   prtdec   
0B3C   CD F3 09               CALL   printStr   
0B3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B4C   E1                     POP   hl   
0B4D   E5                     PUSH   hl   
0B4E   CD 41 09               CALL   prtdec   
0B51   E1                     POP   hl   
0B52   CD F3 09               CALL   printStr   
0B55   20 28 23 00            .CSTR   " (#"   
0B59   CD 89 09               CALL   prthex   
0B5C   CD F3 09               CALL   printStr   
0B5F   29 0D 0A 00            .CSTR   ")\r\n"   
0B63   76                     HALT      
0B64   00                     .CSTR      
0B65                EXPECTM_0_2384S43:      
0B65   E1                     POP   HL   
0B66                          ;*Macro unroll:  test "/t", true
0B66   31 80 3B               LD   SP,STACK   
0B69   CD FA 09               CALL   init   
0B6C   CD 9E 3A               CALL   execStr   
0B6F   2F 74 00               .CSTR   "/t"   
0B72                          ;*Macro unroll:  expect "/t",true
0B72   E1                     POP   HL   
0B73   E5                     PUSH   HL   
0B74   11 FF FF               LD   DE,true   
0B77   B7                     OR   A   
0B78   ED 52                  SBC   HL,DE   
0B7A   7D                     LD   A,L   
0B7B   B4                     OR   H   
0B7C   28 4D                  JR   Z,expectM_0_2385S43   
0B7E   CD F3 09               CALL   printStr   
0B81   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0B8A   CD F3 09               CALL   printStr   
0B8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B9C   21 FF FF               LD   HL,true   
0B9F   CD 41 09               CALL   prtdec   
0BA2   CD F3 09               CALL   printStr   
0BA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BB2   E1                     POP   hl   
0BB3   E5                     PUSH   hl   
0BB4   CD 41 09               CALL   prtdec   
0BB7   E1                     POP   hl   
0BB8   CD F3 09               CALL   printStr   
0BBB   20 28 23 00            .CSTR   " (#"   
0BBF   CD 89 09               CALL   prthex   
0BC2   CD F3 09               CALL   printStr   
0BC5   29 0D 0A 00            .CSTR   ")\r\n"   
0BC9   76                     HALT      
0BCA   00                     .CSTR      
0BCB                EXPECTM_0_2385S43:      
0BCB   E1                     POP   HL   
0BCC                          ;*Macro unroll:  test "1", 1
0BCC   31 80 3B               LD   SP,STACK   
0BCF   CD FA 09               CALL   init   
0BD2   CD 9E 3A               CALL   execStr   
0BD5   31 00                  .CSTR   "1"   
0BD7                          ;*Macro unroll:  expect "1",1
0BD7   E1                     POP   HL   
0BD8   E5                     PUSH   HL   
0BD9   11 01 00               LD   DE,1   
0BDC   B7                     OR   A   
0BDD   ED 52                  SBC   HL,DE   
0BDF   7D                     LD   A,L   
0BE0   B4                     OR   H   
0BE1   28 4C                  JR   Z,expectM_0_2386S43   
0BE3   CD F3 09               CALL   printStr   
0BE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BEE   CD F3 09               CALL   printStr   
0BF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C00   21 01 00               LD   HL,1   
0C03   CD 41 09               CALL   prtdec   
0C06   CD F3 09               CALL   printStr   
0C09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C16   E1                     POP   hl   
0C17   E5                     PUSH   hl   
0C18   CD 41 09               CALL   prtdec   
0C1B   E1                     POP   hl   
0C1C   CD F3 09               CALL   printStr   
0C1F   20 28 23 00            .CSTR   " (#"   
0C23   CD 89 09               CALL   prthex   
0C26   CD F3 09               CALL   printStr   
0C29   29 0D 0A 00            .CSTR   ")\r\n"   
0C2D   76                     HALT      
0C2E   00                     .CSTR      
0C2F                EXPECTM_0_2386S43:      
0C2F   E1                     POP   HL   
0C30                          ;*Macro unroll:  test "2", 2
0C30   31 80 3B               LD   SP,STACK   
0C33   CD FA 09               CALL   init   
0C36   CD 9E 3A               CALL   execStr   
0C39   32 00                  .CSTR   "2"   
0C3B                          ;*Macro unroll:  expect "2",2
0C3B   E1                     POP   HL   
0C3C   E5                     PUSH   HL   
0C3D   11 02 00               LD   DE,2   
0C40   B7                     OR   A   
0C41   ED 52                  SBC   HL,DE   
0C43   7D                     LD   A,L   
0C44   B4                     OR   H   
0C45   28 4C                  JR   Z,expectM_0_2387S43   
0C47   CD F3 09               CALL   printStr   
0C4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0C52   CD F3 09               CALL   printStr   
0C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C64   21 02 00               LD   HL,2   
0C67   CD 41 09               CALL   prtdec   
0C6A   CD F3 09               CALL   printStr   
0C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C7A   E1                     POP   hl   
0C7B   E5                     PUSH   hl   
0C7C   CD 41 09               CALL   prtdec   
0C7F   E1                     POP   hl   
0C80   CD F3 09               CALL   printStr   
0C83   20 28 23 00            .CSTR   " (#"   
0C87   CD 89 09               CALL   prthex   
0C8A   CD F3 09               CALL   printStr   
0C8D   29 0D 0A 00            .CSTR   ")\r\n"   
0C91   76                     HALT      
0C92   00                     .CSTR      
0C93                EXPECTM_0_2387S43:      
0C93   E1                     POP   HL   
0C94                          ;*Macro unroll:  test "1", 1
0C94   31 80 3B               LD   SP,STACK   
0C97   CD FA 09               CALL   init   
0C9A   CD 9E 3A               CALL   execStr   
0C9D   31 00                  .CSTR   "1"   
0C9F                          ;*Macro unroll:  expect "1",1
0C9F   E1                     POP   HL   
0CA0   E5                     PUSH   HL   
0CA1   11 01 00               LD   DE,1   
0CA4   B7                     OR   A   
0CA5   ED 52                  SBC   HL,DE   
0CA7   7D                     LD   A,L   
0CA8   B4                     OR   H   
0CA9   28 4C                  JR   Z,expectM_0_2388S43   
0CAB   CD F3 09               CALL   printStr   
0CAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0CB6   CD F3 09               CALL   printStr   
0CB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CC8   21 01 00               LD   HL,1   
0CCB   CD 41 09               CALL   prtdec   
0CCE   CD F3 09               CALL   printStr   
0CD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CDE   E1                     POP   hl   
0CDF   E5                     PUSH   hl   
0CE0   CD 41 09               CALL   prtdec   
0CE3   E1                     POP   hl   
0CE4   CD F3 09               CALL   printStr   
0CE7   20 28 23 00            .CSTR   " (#"   
0CEB   CD 89 09               CALL   prthex   
0CEE   CD F3 09               CALL   printStr   
0CF1   29 0D 0A 00            .CSTR   ")\r\n"   
0CF5   76                     HALT      
0CF6   00                     .CSTR      
0CF7                EXPECTM_0_2388S43:      
0CF7   E1                     POP   HL   
0CF8                          ;*Macro unroll:  test "0", 0
0CF8   31 80 3B               LD   SP,STACK   
0CFB   CD FA 09               CALL   init   
0CFE   CD 9E 3A               CALL   execStr   
0D01   30 00                  .CSTR   "0"   
0D03                          ;*Macro unroll:  expect "0",0
0D03   E1                     POP   HL   
0D04   E5                     PUSH   HL   
0D05   11 00 00               LD   DE,0   
0D08   B7                     OR   A   
0D09   ED 52                  SBC   HL,DE   
0D0B   7D                     LD   A,L   
0D0C   B4                     OR   H   
0D0D   28 4C                  JR   Z,expectM_0_2389S43   
0D0F   CD F3 09               CALL   printStr   
0D12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0D1A   CD F3 09               CALL   printStr   
0D1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D2C   21 00 00               LD   HL,0   
0D2F   CD 41 09               CALL   prtdec   
0D32   CD F3 09               CALL   printStr   
0D35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D42   E1                     POP   hl   
0D43   E5                     PUSH   hl   
0D44   CD 41 09               CALL   prtdec   
0D47   E1                     POP   hl   
0D48   CD F3 09               CALL   printStr   
0D4B   20 28 23 00            .CSTR   " (#"   
0D4F   CD 89 09               CALL   prthex   
0D52   CD F3 09               CALL   printStr   
0D55   29 0D 0A 00            .CSTR   ")\r\n"   
0D59   76                     HALT      
0D5A   00                     .CSTR      
0D5B                EXPECTM_0_2389S43:      
0D5B   E1                     POP   HL   
0D5C                          ;*Macro unroll:  test "10", 10
0D5C   31 80 3B               LD   SP,STACK   
0D5F   CD FA 09               CALL   init   
0D62   CD 9E 3A               CALL   execStr   
0D65   31 30 00               .CSTR   "10"   
0D68                          ;*Macro unroll:  expect "10",10
0D68   E1                     POP   HL   
0D69   E5                     PUSH   HL   
0D6A   11 0A 00               LD   DE,10   
0D6D   B7                     OR   A   
0D6E   ED 52                  SBC   HL,DE   
0D70   7D                     LD   A,L   
0D71   B4                     OR   H   
0D72   28 4D                  JR   Z,expectM_0_2390S43   
0D74   CD F3 09               CALL   printStr   
0D77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D80   CD F3 09               CALL   printStr   
0D83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D92   21 0A 00               LD   HL,10   
0D95   CD 41 09               CALL   prtdec   
0D98   CD F3 09               CALL   printStr   
0D9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DA8   E1                     POP   hl   
0DA9   E5                     PUSH   hl   
0DAA   CD 41 09               CALL   prtdec   
0DAD   E1                     POP   hl   
0DAE   CD F3 09               CALL   printStr   
0DB1   20 28 23 00            .CSTR   " (#"   
0DB5   CD 89 09               CALL   prthex   
0DB8   CD F3 09               CALL   printStr   
0DBB   29 0D 0A 00            .CSTR   ")\r\n"   
0DBF   76                     HALT      
0DC0   00                     .CSTR      
0DC1                EXPECTM_0_2390S43:      
0DC1   E1                     POP   HL   
0DC2                          ;*Macro unroll:  test "123", 123
0DC2   31 80 3B               LD   SP,STACK   
0DC5   CD FA 09               CALL   init   
0DC8   CD 9E 3A               CALL   execStr   
0DCB   31 32 33 00            .CSTR   "123"   
0DCF                          ;*Macro unroll:  expect "123",123
0DCF   E1                     POP   HL   
0DD0   E5                     PUSH   HL   
0DD1   11 7B 00               LD   DE,123   
0DD4   B7                     OR   A   
0DD5   ED 52                  SBC   HL,DE   
0DD7   7D                     LD   A,L   
0DD8   B4                     OR   H   
0DD9   28 4E                  JR   Z,expectM_0_2391S43   
0DDB   CD F3 09               CALL   printStr   
0DDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0DE8   CD F3 09               CALL   printStr   
0DEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DFA   21 7B 00               LD   HL,123   
0DFD   CD 41 09               CALL   prtdec   
0E00   CD F3 09               CALL   printStr   
0E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E10   E1                     POP   hl   
0E11   E5                     PUSH   hl   
0E12   CD 41 09               CALL   prtdec   
0E15   E1                     POP   hl   
0E16   CD F3 09               CALL   printStr   
0E19   20 28 23 00            .CSTR   " (#"   
0E1D   CD 89 09               CALL   prthex   
0E20   CD F3 09               CALL   printStr   
0E23   29 0D 0A 00            .CSTR   ")\r\n"   
0E27   76                     HALT      
0E28   00                     .CSTR      
0E29                EXPECTM_0_2391S43:      
0E29   E1                     POP   HL   
0E2A                          ;*Macro unroll:  test "-1",-1
0E2A   31 80 3B               LD   SP,STACK   
0E2D   CD FA 09               CALL   init   
0E30   CD 9E 3A               CALL   execStr   
0E33   2D 31 00               .CSTR   "-1"   
0E36                          ;*Macro unroll:  expect "-1",-1
0E36   E1                     POP   HL   
0E37   E5                     PUSH   HL   
0E38   11 FF FF               LD   DE,-1   
0E3B   B7                     OR   A   
0E3C   ED 52                  SBC   HL,DE   
0E3E   7D                     LD   A,L   
0E3F   B4                     OR   H   
0E40   28 4D                  JR   Z,expectM_0_2392S43   
0E42   CD F3 09               CALL   printStr   
0E45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0E4E   CD F3 09               CALL   printStr   
0E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E60   21 FF FF               LD   HL,-1   
0E63   CD 41 09               CALL   prtdec   
0E66   CD F3 09               CALL   printStr   
0E69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E76   E1                     POP   hl   
0E77   E5                     PUSH   hl   
0E78   CD 41 09               CALL   prtdec   
0E7B   E1                     POP   hl   
0E7C   CD F3 09               CALL   printStr   
0E7F   20 28 23 00            .CSTR   " (#"   
0E83   CD 89 09               CALL   prthex   
0E86   CD F3 09               CALL   printStr   
0E89   29 0D 0A 00            .CSTR   ")\r\n"   
0E8D   76                     HALT      
0E8E   00                     .CSTR      
0E8F                EXPECTM_0_2392S43:      
0E8F   E1                     POP   HL   
0E90                          ;*Macro unroll:  test "''", 0
0E90   31 80 3B               LD   SP,STACK   
0E93   CD FA 09               CALL   init   
0E96   CD 9E 3A               CALL   execStr   
0E99   27 27 00               .CSTR   "''"   
0E9C                          ;*Macro unroll:  expect "''",0
0E9C   E1                     POP   HL   
0E9D   E5                     PUSH   HL   
0E9E   11 00 00               LD   DE,0   
0EA1   B7                     OR   A   
0EA2   ED 52                  SBC   HL,DE   
0EA4   7D                     LD   A,L   
0EA5   B4                     OR   H   
0EA6   28 4D                  JR   Z,expectM_0_2393S43   
0EA8   CD F3 09               CALL   printStr   
0EAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0EB4   CD F3 09               CALL   printStr   
0EB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC6   21 00 00               LD   HL,0   
0EC9   CD 41 09               CALL   prtdec   
0ECC   CD F3 09               CALL   printStr   
0ECF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EDC   E1                     POP   hl   
0EDD   E5                     PUSH   hl   
0EDE   CD 41 09               CALL   prtdec   
0EE1   E1                     POP   hl   
0EE2   CD F3 09               CALL   printStr   
0EE5   20 28 23 00            .CSTR   " (#"   
0EE9   CD 89 09               CALL   prthex   
0EEC   CD F3 09               CALL   printStr   
0EEF   29 0D 0A 00            .CSTR   ")\r\n"   
0EF3   76                     HALT      
0EF4   00                     .CSTR      
0EF5                EXPECTM_0_2393S43:      
0EF5   E1                     POP   HL   
0EF6                          ;*Macro unroll:  test "'a'", $61
0EF6   31 80 3B               LD   SP,STACK   
0EF9   CD FA 09               CALL   init   
0EFC   CD 9E 3A               CALL   execStr   
0EFF   27 61 27 00            .CSTR   "'a'"   
0F03                          ;*Macro unroll:  expect "'a'",$61
0F03   E1                     POP   HL   
0F04   E5                     PUSH   HL   
0F05   11 61 00               LD   DE,$61   
0F08   B7                     OR   A   
0F09   ED 52                  SBC   HL,DE   
0F0B   7D                     LD   A,L   
0F0C   B4                     OR   H   
0F0D   28 4E                  JR   Z,expectM_0_2394S43   
0F0F   CD F3 09               CALL   printStr   
0F12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0F1C   CD F3 09               CALL   printStr   
0F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F2E   21 61 00               LD   HL,$61   
0F31   CD 41 09               CALL   prtdec   
0F34   CD F3 09               CALL   printStr   
0F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F44   E1                     POP   hl   
0F45   E5                     PUSH   hl   
0F46   CD 41 09               CALL   prtdec   
0F49   E1                     POP   hl   
0F4A   CD F3 09               CALL   printStr   
0F4D   20 28 23 00            .CSTR   " (#"   
0F51   CD 89 09               CALL   prthex   
0F54   CD F3 09               CALL   printStr   
0F57   29 0D 0A 00            .CSTR   ")\r\n"   
0F5B   76                     HALT      
0F5C   00                     .CSTR      
0F5D                EXPECTM_0_2394S43:      
0F5D   E1                     POP   HL   
0F5E                          ;*Macro unroll:  test "'\\''", $27
0F5E   31 80 3B               LD   SP,STACK   
0F61   CD FA 09               CALL   init   
0F64   CD 9E 3A               CALL   execStr   
0F67   27 5C 27 27 00         .CSTR   "'\\''"   
0F6C                          ;*Macro unroll:  expect "'\\''",$27
0F6C   E1                     POP   HL   
0F6D   E5                     PUSH   HL   
0F6E   11 27 00               LD   DE,$27   
0F71   B7                     OR   A   
0F72   ED 52                  SBC   HL,DE   
0F74   7D                     LD   A,L   
0F75   B4                     OR   H   
0F76   28 4F                  JR   Z,expectM_0_2395S43   
0F78   CD F3 09               CALL   printStr   
0F7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F86   CD F3 09               CALL   printStr   
0F89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F98   21 27 00               LD   HL,$27   
0F9B   CD 41 09               CALL   prtdec   
0F9E   CD F3 09               CALL   printStr   
0FA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FAE   E1                     POP   hl   
0FAF   E5                     PUSH   hl   
0FB0   CD 41 09               CALL   prtdec   
0FB3   E1                     POP   hl   
0FB4   CD F3 09               CALL   printStr   
0FB7   20 28 23 00            .CSTR   " (#"   
0FBB   CD 89 09               CALL   prthex   
0FBE   CD F3 09               CALL   printStr   
0FC1   29 0D 0A 00            .CSTR   ")\r\n"   
0FC5   76                     HALT      
0FC6   00                     .CSTR      
0FC7                EXPECTM_0_2395S43:      
0FC7   E1                     POP   HL   
0FC8                          ;*Macro unroll:  test "#10", $10
0FC8   31 80 3B               LD   SP,STACK   
0FCB   CD FA 09               CALL   init   
0FCE   CD 9E 3A               CALL   execStr   
0FD1   23 31 30 00            .CSTR   "#10"   
0FD5                          ;*Macro unroll:  expect "#10",$10
0FD5   E1                     POP   HL   
0FD6   E5                     PUSH   HL   
0FD7   11 10 00               LD   DE,$10   
0FDA   B7                     OR   A   
0FDB   ED 52                  SBC   HL,DE   
0FDD   7D                     LD   A,L   
0FDE   B4                     OR   H   
0FDF   28 4E                  JR   Z,expectM_0_2396S43   
0FE1   CD F3 09               CALL   printStr   
0FE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0FEE   CD F3 09               CALL   printStr   
0FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1000   21 10 00               LD   HL,$10   
1003   CD 41 09               CALL   prtdec   
1006   CD F3 09               CALL   printStr   
1009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1016   E1                     POP   hl   
1017   E5                     PUSH   hl   
1018   CD 41 09               CALL   prtdec   
101B   E1                     POP   hl   
101C   CD F3 09               CALL   printStr   
101F   20 28 23 00            .CSTR   " (#"   
1023   CD 89 09               CALL   prthex   
1026   CD F3 09               CALL   printStr   
1029   29 0D 0A 00            .CSTR   ")\r\n"   
102D   76                     HALT      
102E   00                     .CSTR      
102F                EXPECTM_0_2396S43:      
102F   E1                     POP   HL   
1030                          ;*Macro unroll:  test "#FF", $FF
1030   31 80 3B               LD   SP,STACK   
1033   CD FA 09               CALL   init   
1036   CD 9E 3A               CALL   execStr   
1039   23 46 46 00            .CSTR   "#FF"   
103D                          ;*Macro unroll:  expect "#FF",$FF
103D   E1                     POP   HL   
103E   E5                     PUSH   HL   
103F   11 FF 00               LD   DE,$FF   
1042   B7                     OR   A   
1043   ED 52                  SBC   HL,DE   
1045   7D                     LD   A,L   
1046   B4                     OR   H   
1047   28 4E                  JR   Z,expectM_0_2397S43   
1049   CD F3 09               CALL   printStr   
104C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1056   CD F3 09               CALL   printStr   
1059   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1068   21 FF 00               LD   HL,$FF   
106B   CD 41 09               CALL   prtdec   
106E   CD F3 09               CALL   printStr   
1071   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
107E   E1                     POP   hl   
107F   E5                     PUSH   hl   
1080   CD 41 09               CALL   prtdec   
1083   E1                     POP   hl   
1084   CD F3 09               CALL   printStr   
1087   20 28 23 00            .CSTR   " (#"   
108B   CD 89 09               CALL   prthex   
108E   CD F3 09               CALL   printStr   
1091   29 0D 0A 00            .CSTR   ")\r\n"   
1095   76                     HALT      
1096   00                     .CSTR      
1097                EXPECTM_0_2397S43:      
1097   E1                     POP   HL   
1098                          ;*Macro unroll:  test "-1 2 +",1
1098   31 80 3B               LD   SP,STACK   
109B   CD FA 09               CALL   init   
109E   CD 9E 3A               CALL   execStr   
10A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
10A8                          ;*Macro unroll:  expect "-1 2 +",1
10A8   E1                     POP   HL   
10A9   E5                     PUSH   HL   
10AA   11 01 00               LD   DE,1   
10AD   B7                     OR   A   
10AE   ED 52                  SBC   HL,DE   
10B0   7D                     LD   A,L   
10B1   B4                     OR   H   
10B2   28 51                  JR   Z,expectM_0_2398S43   
10B4   CD F3 09               CALL   printStr   
10B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
10C4   CD F3 09               CALL   printStr   
10C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D6   21 01 00               LD   HL,1   
10D9   CD 41 09               CALL   prtdec   
10DC   CD F3 09               CALL   printStr   
10DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EC   E1                     POP   hl   
10ED   E5                     PUSH   hl   
10EE   CD 41 09               CALL   prtdec   
10F1   E1                     POP   hl   
10F2   CD F3 09               CALL   printStr   
10F5   20 28 23 00            .CSTR   " (#"   
10F9   CD 89 09               CALL   prthex   
10FC   CD F3 09               CALL   printStr   
10FF   29 0D 0A 00            .CSTR   ")\r\n"   
1103   76                     HALT      
1104   00                     .CSTR      
1105                EXPECTM_0_2398S43:      
1105   E1                     POP   HL   
1106                          ;*Macro unroll:  test "-1 1 +",0
1106   31 80 3B               LD   SP,STACK   
1109   CD FA 09               CALL   init   
110C   CD 9E 3A               CALL   execStr   
110F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1116                          ;*Macro unroll:  expect "-1 1 +",0
1116   E1                     POP   HL   
1117   E5                     PUSH   HL   
1118   11 00 00               LD   DE,0   
111B   B7                     OR   A   
111C   ED 52                  SBC   HL,DE   
111E   7D                     LD   A,L   
111F   B4                     OR   H   
1120   28 51                  JR   Z,expectM_0_2399S43   
1122   CD F3 09               CALL   printStr   
1125   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1132   CD F3 09               CALL   printStr   
1135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1144   21 00 00               LD   HL,0   
1147   CD 41 09               CALL   prtdec   
114A   CD F3 09               CALL   printStr   
114D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
115A   E1                     POP   hl   
115B   E5                     PUSH   hl   
115C   CD 41 09               CALL   prtdec   
115F   E1                     POP   hl   
1160   CD F3 09               CALL   printStr   
1163   20 28 23 00            .CSTR   " (#"   
1167   CD 89 09               CALL   prthex   
116A   CD F3 09               CALL   printStr   
116D   29 0D 0A 00            .CSTR   ")\r\n"   
1171   76                     HALT      
1172   00                     .CSTR      
1173                EXPECTM_0_2399S43:      
1173   E1                     POP   HL   
1174                          ;*Macro unroll:  test "1 2 +", 3
1174   31 80 3B               LD   SP,STACK   
1177   CD FA 09               CALL   init   
117A   CD 9E 3A               CALL   execStr   
117D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1183                          ;*Macro unroll:  expect "1 2 +",3
1183   E1                     POP   HL   
1184   E5                     PUSH   HL   
1185   11 03 00               LD   DE,3   
1188   B7                     OR   A   
1189   ED 52                  SBC   HL,DE   
118B   7D                     LD   A,L   
118C   B4                     OR   H   
118D   28 50                  JR   Z,expectM_0_2400S43   
118F   CD F3 09               CALL   printStr   
1192   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
119E   CD F3 09               CALL   printStr   
11A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11B0   21 03 00               LD   HL,3   
11B3   CD 41 09               CALL   prtdec   
11B6   CD F3 09               CALL   printStr   
11B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C6   E1                     POP   hl   
11C7   E5                     PUSH   hl   
11C8   CD 41 09               CALL   prtdec   
11CB   E1                     POP   hl   
11CC   CD F3 09               CALL   printStr   
11CF   20 28 23 00            .CSTR   " (#"   
11D3   CD 89 09               CALL   prthex   
11D6   CD F3 09               CALL   printStr   
11D9   29 0D 0A 00            .CSTR   ")\r\n"   
11DD   76                     HALT      
11DE   00                     .CSTR      
11DF                EXPECTM_0_2400S43:      
11DF   E1                     POP   HL   
11E0                          ;*Macro unroll:  test "4 1 2 +", 3
11E0   31 80 3B               LD   SP,STACK   
11E3   CD FA 09               CALL   init   
11E6   CD 9E 3A               CALL   execStr   
11E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
11F1                          ;*Macro unroll:  expect "4 1 2 +",3
11F1   E1                     POP   HL   
11F2   E5                     PUSH   HL   
11F3   11 03 00               LD   DE,3   
11F6   B7                     OR   A   
11F7   ED 52                  SBC   HL,DE   
11F9   7D                     LD   A,L   
11FA   B4                     OR   H   
11FB   28 52                  JR   Z,expectM_0_2401S43   
11FD   CD F3 09               CALL   printStr   
1200   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
120E   CD F3 09               CALL   printStr   
1211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1220   21 03 00               LD   HL,3   
1223   CD 41 09               CALL   prtdec   
1226   CD F3 09               CALL   printStr   
1229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1236   E1                     POP   hl   
1237   E5                     PUSH   hl   
1238   CD 41 09               CALL   prtdec   
123B   E1                     POP   hl   
123C   CD F3 09               CALL   printStr   
123F   20 28 23 00            .CSTR   " (#"   
1243   CD 89 09               CALL   prthex   
1246   CD F3 09               CALL   printStr   
1249   29 0D 0A 00            .CSTR   ")\r\n"   
124D   76                     HALT      
124E   00                     .CSTR      
124F                EXPECTM_0_2401S43:      
124F   E1                     POP   HL   
1250                          ;*Macro unroll:  test "123 456 +", 123+456
1250   31 80 3B               LD   SP,STACK   
1253   CD FA 09               CALL   init   
1256   CD 9E 3A               CALL   execStr   
1259   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1263                          ;*Macro unroll:  expect "123 456 +",123+456
1263   E1                     POP   HL   
1264   E5                     PUSH   HL   
1265   11 43 02               LD   DE,123+456   
1268   B7                     OR   A   
1269   ED 52                  SBC   HL,DE   
126B   7D                     LD   A,L   
126C   B4                     OR   H   
126D   28 54                  JR   Z,expectM_0_2402S43   
126F   CD F3 09               CALL   printStr   
1272   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1282   CD F3 09               CALL   printStr   
1285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1294   21 43 02               LD   HL,123+456   
1297   CD 41 09               CALL   prtdec   
129A   CD F3 09               CALL   printStr   
129D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12AA   E1                     POP   hl   
12AB   E5                     PUSH   hl   
12AC   CD 41 09               CALL   prtdec   
12AF   E1                     POP   hl   
12B0   CD F3 09               CALL   printStr   
12B3   20 28 23 00            .CSTR   " (#"   
12B7   CD 89 09               CALL   prthex   
12BA   CD F3 09               CALL   printStr   
12BD   29 0D 0A 00            .CSTR   ")\r\n"   
12C1   76                     HALT      
12C2   00                     .CSTR      
12C3                EXPECTM_0_2402S43:      
12C3   E1                     POP   HL   
12C4                          ;*Macro unroll:  test "64 128 +", 64+128
12C4   31 80 3B               LD   SP,STACK   
12C7   CD FA 09               CALL   init   
12CA   CD 9E 3A               CALL   execStr   
12CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12D6                          ;*Macro unroll:  expect "64 128 +",64+128
12D6   E1                     POP   HL   
12D7   E5                     PUSH   HL   
12D8   11 C0 00               LD   DE,64+128   
12DB   B7                     OR   A   
12DC   ED 52                  SBC   HL,DE   
12DE   7D                     LD   A,L   
12DF   B4                     OR   H   
12E0   28 53                  JR   Z,expectM_0_2403S43   
12E2   CD F3 09               CALL   printStr   
12E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12F4   CD F3 09               CALL   printStr   
12F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1306   21 C0 00               LD   HL,64+128   
1309   CD 41 09               CALL   prtdec   
130C   CD F3 09               CALL   printStr   
130F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131C   E1                     POP   hl   
131D   E5                     PUSH   hl   
131E   CD 41 09               CALL   prtdec   
1321   E1                     POP   hl   
1322   CD F3 09               CALL   printStr   
1325   20 28 23 00            .CSTR   " (#"   
1329   CD 89 09               CALL   prthex   
132C   CD F3 09               CALL   printStr   
132F   29 0D 0A 00            .CSTR   ")\r\n"   
1333   76                     HALT      
1334   00                     .CSTR      
1335                EXPECTM_0_2403S43:      
1335   E1                     POP   HL   
1336                          ;*Macro unroll:  test "1 2 +", 3
1336   31 80 3B               LD   SP,STACK   
1339   CD FA 09               CALL   init   
133C   CD 9E 3A               CALL   execStr   
133F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1345                          ;*Macro unroll:  expect "1 2 +",3
1345   E1                     POP   HL   
1346   E5                     PUSH   HL   
1347   11 03 00               LD   DE,3   
134A   B7                     OR   A   
134B   ED 52                  SBC   HL,DE   
134D   7D                     LD   A,L   
134E   B4                     OR   H   
134F   28 50                  JR   Z,expectM_0_2404S43   
1351   CD F3 09               CALL   printStr   
1354   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1360   CD F3 09               CALL   printStr   
1363   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1372   21 03 00               LD   HL,3   
1375   CD 41 09               CALL   prtdec   
1378   CD F3 09               CALL   printStr   
137B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1388   E1                     POP   hl   
1389   E5                     PUSH   hl   
138A   CD 41 09               CALL   prtdec   
138D   E1                     POP   hl   
138E   CD F3 09               CALL   printStr   
1391   20 28 23 00            .CSTR   " (#"   
1395   CD 89 09               CALL   prthex   
1398   CD F3 09               CALL   printStr   
139B   29 0D 0A 00            .CSTR   ")\r\n"   
139F   76                     HALT      
13A0   00                     .CSTR      
13A1                EXPECTM_0_2404S43:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "1a= a++ a",2
13A2   31 80 3B               LD   SP,STACK   
13A5   CD FA 09               CALL   init   
13A8   CD 9E 3A               CALL   execStr   
13AB   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
13B5                          ;*Macro unroll:  expect "1a= a++ a",2
13B5   E1                     POP   HL   
13B6   E5                     PUSH   HL   
13B7   11 02 00               LD   DE,2   
13BA   B7                     OR   A   
13BB   ED 52                  SBC   HL,DE   
13BD   7D                     LD   A,L   
13BE   B4                     OR   H   
13BF   28 54                  JR   Z,expectM_0_2405S43   
13C1   CD F3 09               CALL   printStr   
13C4   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
13D4   CD F3 09               CALL   printStr   
13D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E6   21 02 00               LD   HL,2   
13E9   CD 41 09               CALL   prtdec   
13EC   CD F3 09               CALL   printStr   
13EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FC   E1                     POP   hl   
13FD   E5                     PUSH   hl   
13FE   CD 41 09               CALL   prtdec   
1401   E1                     POP   hl   
1402   CD F3 09               CALL   printStr   
1405   20 28 23 00            .CSTR   " (#"   
1409   CD 89 09               CALL   prthex   
140C   CD F3 09               CALL   printStr   
140F   29 0D 0A 00            .CSTR   ")\r\n"   
1413   76                     HALT      
1414   00                     .CSTR      
1415                EXPECTM_0_2405S43:      
1415   E1                     POP   HL   
1416                          ;*Macro unroll:  test "1a= 2 a+= a",3
1416   31 80 3B               LD   SP,STACK   
1419   CD FA 09               CALL   init   
141C   CD 9E 3A               CALL   execStr   
141F   31 61 3D 20 32 20 61 2B 3D 20 61 00 .CSTR   "1a= 2 a+= a"   
142B                          ;*Macro unroll:  expect "1a= 2 a+= a",3
142B   E1                     POP   HL   
142C   E5                     PUSH   HL   
142D   11 03 00               LD   DE,3   
1430   B7                     OR   A   
1431   ED 52                  SBC   HL,DE   
1433   7D                     LD   A,L   
1434   B4                     OR   H   
1435   28 56                  JR   Z,expectM_0_2406S43   
1437   CD F3 09               CALL   printStr   
143A   43 6F 64 65 3A 20 31 61 3D 20 32 20 61 2B 3D 20 61 00 .CSTR   "Code: ","1a= 2 a+= a"   
144C   CD F3 09               CALL   printStr   
144F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
145E   21 03 00               LD   HL,3   
1461   CD 41 09               CALL   prtdec   
1464   CD F3 09               CALL   printStr   
1467   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1474   E1                     POP   hl   
1475   E5                     PUSH   hl   
1476   CD 41 09               CALL   prtdec   
1479   E1                     POP   hl   
147A   CD F3 09               CALL   printStr   
147D   20 28 23 00            .CSTR   " (#"   
1481   CD 89 09               CALL   prthex   
1484   CD F3 09               CALL   printStr   
1487   29 0D 0A 00            .CSTR   ")\r\n"   
148B   76                     HALT      
148C   00                     .CSTR      
148D                EXPECTM_0_2406S43:      
148D   E1                     POP   HL   
148E                          ;*Macro unroll:  test "-1 -1 -",0
148E   31 80 3B               LD   SP,STACK   
1491   CD FA 09               CALL   init   
1494   CD 9E 3A               CALL   execStr   
1497   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
149F                          ;*Macro unroll:  expect "-1 -1 -",0
149F   E1                     POP   HL   
14A0   E5                     PUSH   HL   
14A1   11 00 00               LD   DE,0   
14A4   B7                     OR   A   
14A5   ED 52                  SBC   HL,DE   
14A7   7D                     LD   A,L   
14A8   B4                     OR   H   
14A9   28 52                  JR   Z,expectM_0_2407S43   
14AB   CD F3 09               CALL   printStr   
14AE   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
14BC   CD F3 09               CALL   printStr   
14BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14CE   21 00 00               LD   HL,0   
14D1   CD 41 09               CALL   prtdec   
14D4   CD F3 09               CALL   printStr   
14D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E4   E1                     POP   hl   
14E5   E5                     PUSH   hl   
14E6   CD 41 09               CALL   prtdec   
14E9   E1                     POP   hl   
14EA   CD F3 09               CALL   printStr   
14ED   20 28 23 00            .CSTR   " (#"   
14F1   CD 89 09               CALL   prthex   
14F4   CD F3 09               CALL   printStr   
14F7   29 0D 0A 00            .CSTR   ")\r\n"   
14FB   76                     HALT      
14FC   00                     .CSTR      
14FD                EXPECTM_0_2407S43:      
14FD   E1                     POP   HL   
14FE                          ;*Macro unroll:  test "5 3 -", 2
14FE   31 80 3B               LD   SP,STACK   
1501   CD FA 09               CALL   init   
1504   CD 9E 3A               CALL   execStr   
1507   35 20 33 20 2D 00      .CSTR   "5 3 -"   
150D                          ;*Macro unroll:  expect "5 3 -",2
150D   E1                     POP   HL   
150E   E5                     PUSH   HL   
150F   11 02 00               LD   DE,2   
1512   B7                     OR   A   
1513   ED 52                  SBC   HL,DE   
1515   7D                     LD   A,L   
1516   B4                     OR   H   
1517   28 50                  JR   Z,expectM_0_2408S43   
1519   CD F3 09               CALL   printStr   
151C   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1528   CD F3 09               CALL   printStr   
152B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
153A   21 02 00               LD   HL,2   
153D   CD 41 09               CALL   prtdec   
1540   CD F3 09               CALL   printStr   
1543   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1550   E1                     POP   hl   
1551   E5                     PUSH   hl   
1552   CD 41 09               CALL   prtdec   
1555   E1                     POP   hl   
1556   CD F3 09               CALL   printStr   
1559   20 28 23 00            .CSTR   " (#"   
155D   CD 89 09               CALL   prthex   
1560   CD F3 09               CALL   printStr   
1563   29 0D 0A 00            .CSTR   ")\r\n"   
1567   76                     HALT      
1568   00                     .CSTR      
1569                EXPECTM_0_2408S43:      
1569   E1                     POP   HL   
156A                          ;*Macro unroll:  test "2 1 -",1
156A   31 80 3B               LD   SP,STACK   
156D   CD FA 09               CALL   init   
1570   CD 9E 3A               CALL   execStr   
1573   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1579                          ;*Macro unroll:  expect "2 1 -",1
1579   E1                     POP   HL   
157A   E5                     PUSH   HL   
157B   11 01 00               LD   DE,1   
157E   B7                     OR   A   
157F   ED 52                  SBC   HL,DE   
1581   7D                     LD   A,L   
1582   B4                     OR   H   
1583   28 50                  JR   Z,expectM_0_2409S43   
1585   CD F3 09               CALL   printStr   
1588   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1594   CD F3 09               CALL   printStr   
1597   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15A6   21 01 00               LD   HL,1   
15A9   CD 41 09               CALL   prtdec   
15AC   CD F3 09               CALL   printStr   
15AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15BC   E1                     POP   hl   
15BD   E5                     PUSH   hl   
15BE   CD 41 09               CALL   prtdec   
15C1   E1                     POP   hl   
15C2   CD F3 09               CALL   printStr   
15C5   20 28 23 00            .CSTR   " (#"   
15C9   CD 89 09               CALL   prthex   
15CC   CD F3 09               CALL   printStr   
15CF   29 0D 0A 00            .CSTR   ")\r\n"   
15D3   76                     HALT      
15D4   00                     .CSTR      
15D5                EXPECTM_0_2409S43:      
15D5   E1                     POP   HL   
15D6                          ;*Macro unroll:  test "3a= a-- a",2
15D6   31 80 3B               LD   SP,STACK   
15D9   CD FA 09               CALL   init   
15DC   CD 9E 3A               CALL   execStr   
15DF   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
15E9                          ;*Macro unroll:  expect "3a= a-- a",2
15E9   E1                     POP   HL   
15EA   E5                     PUSH   HL   
15EB   11 02 00               LD   DE,2   
15EE   B7                     OR   A   
15EF   ED 52                  SBC   HL,DE   
15F1   7D                     LD   A,L   
15F2   B4                     OR   H   
15F3   28 54                  JR   Z,expectM_0_2410S43   
15F5   CD F3 09               CALL   printStr   
15F8   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1608   CD F3 09               CALL   printStr   
160B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
161A   21 02 00               LD   HL,2   
161D   CD 41 09               CALL   prtdec   
1620   CD F3 09               CALL   printStr   
1623   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1630   E1                     POP   hl   
1631   E5                     PUSH   hl   
1632   CD 41 09               CALL   prtdec   
1635   E1                     POP   hl   
1636   CD F3 09               CALL   printStr   
1639   20 28 23 00            .CSTR   " (#"   
163D   CD 89 09               CALL   prthex   
1640   CD F3 09               CALL   printStr   
1643   29 0D 0A 00            .CSTR   ")\r\n"   
1647   76                     HALT      
1648   00                     .CSTR      
1649                EXPECTM_0_2410S43:      
1649   E1                     POP   HL   
164A                          ;*Macro unroll:  test "4a= a 2 -= a",2
164A   31 80 3B               LD   SP,STACK   
164D   CD FA 09               CALL   init   
1650   CD 9E 3A               CALL   execStr   
1653   34 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4a= a 2 -= a"   
1660                          ;*Macro unroll:  expect "4a= a 2 -= a",2
1660   E1                     POP   HL   
1661   E5                     PUSH   HL   
1662   11 02 00               LD   DE,2   
1665   B7                     OR   A   
1666   ED 52                  SBC   HL,DE   
1668   7D                     LD   A,L   
1669   B4                     OR   H   
166A   28 57                  JR   Z,expectM_0_2411S43   
166C   CD F3 09               CALL   printStr   
166F   43 6F 64 65 3A 20 34 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4a= a 2 -= a"   
1682   CD F3 09               CALL   printStr   
1685   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1694   21 02 00               LD   HL,2   
1697   CD 41 09               CALL   prtdec   
169A   CD F3 09               CALL   printStr   
169D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16AA   E1                     POP   hl   
16AB   E5                     PUSH   hl   
16AC   CD 41 09               CALL   prtdec   
16AF   E1                     POP   hl   
16B0   CD F3 09               CALL   printStr   
16B3   20 28 23 00            .CSTR   " (#"   
16B7   CD 89 09               CALL   prthex   
16BA   CD F3 09               CALL   printStr   
16BD   29 0D 0A 00            .CSTR   ")\r\n"   
16C1   76                     HALT      
16C2   00                     .CSTR      
16C3                EXPECTM_0_2411S43:      
16C3   E1                     POP   HL   
16C4                          ;*Macro unroll:  test "3 5 &", 1
16C4   31 80 3B               LD   SP,STACK   
16C7   CD FA 09               CALL   init   
16CA   CD 9E 3A               CALL   execStr   
16CD   33 20 35 20 26 00      .CSTR   "3 5 &"   
16D3                          ;*Macro unroll:  expect "3 5 &",1
16D3   E1                     POP   HL   
16D4   E5                     PUSH   HL   
16D5   11 01 00               LD   DE,1   
16D8   B7                     OR   A   
16D9   ED 52                  SBC   HL,DE   
16DB   7D                     LD   A,L   
16DC   B4                     OR   H   
16DD   28 50                  JR   Z,expectM_0_2412S43   
16DF   CD F3 09               CALL   printStr   
16E2   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
16EE   CD F3 09               CALL   printStr   
16F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1700   21 01 00               LD   HL,1   
1703   CD 41 09               CALL   prtdec   
1706   CD F3 09               CALL   printStr   
1709   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1716   E1                     POP   hl   
1717   E5                     PUSH   hl   
1718   CD 41 09               CALL   prtdec   
171B   E1                     POP   hl   
171C   CD F3 09               CALL   printStr   
171F   20 28 23 00            .CSTR   " (#"   
1723   CD 89 09               CALL   prthex   
1726   CD F3 09               CALL   printStr   
1729   29 0D 0A 00            .CSTR   ")\r\n"   
172D   76                     HALT      
172E   00                     .CSTR      
172F                EXPECTM_0_2412S43:      
172F   E1                     POP   HL   
1730                          ;*Macro unroll:  test "3a= 5 a &= a",1
1730   31 80 3B               LD   SP,STACK   
1733   CD FA 09               CALL   init   
1736   CD 9E 3A               CALL   execStr   
1739   33 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3a= 5 a &= a"   
1746                          ;*Macro unroll:  expect "3a= 5 a &= a",1
1746   E1                     POP   HL   
1747   E5                     PUSH   HL   
1748   11 01 00               LD   DE,1   
174B   B7                     OR   A   
174C   ED 52                  SBC   HL,DE   
174E   7D                     LD   A,L   
174F   B4                     OR   H   
1750   28 57                  JR   Z,expectM_0_2413S43   
1752   CD F3 09               CALL   printStr   
1755   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3a= 5 a &= a"   
1768   CD F3 09               CALL   printStr   
176B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
177A   21 01 00               LD   HL,1   
177D   CD 41 09               CALL   prtdec   
1780   CD F3 09               CALL   printStr   
1783   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1790   E1                     POP   hl   
1791   E5                     PUSH   hl   
1792   CD 41 09               CALL   prtdec   
1795   E1                     POP   hl   
1796   CD F3 09               CALL   printStr   
1799   20 28 23 00            .CSTR   " (#"   
179D   CD 89 09               CALL   prthex   
17A0   CD F3 09               CALL   printStr   
17A3   29 0D 0A 00            .CSTR   ")\r\n"   
17A7   76                     HALT      
17A8   00                     .CSTR      
17A9                EXPECTM_0_2413S43:      
17A9   E1                     POP   HL   
17AA                          ;*Macro unroll:  test "3 5 |", 7
17AA   31 80 3B               LD   SP,STACK   
17AD   CD FA 09               CALL   init   
17B0   CD 9E 3A               CALL   execStr   
17B3   33 20 35 20 7C 00      .CSTR   "3 5 |"   
17B9                          ;*Macro unroll:  expect "3 5 |",7
17B9   E1                     POP   HL   
17BA   E5                     PUSH   HL   
17BB   11 07 00               LD   DE,7   
17BE   B7                     OR   A   
17BF   ED 52                  SBC   HL,DE   
17C1   7D                     LD   A,L   
17C2   B4                     OR   H   
17C3   28 50                  JR   Z,expectM_0_2414S43   
17C5   CD F3 09               CALL   printStr   
17C8   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
17D4   CD F3 09               CALL   printStr   
17D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17E6   21 07 00               LD   HL,7   
17E9   CD 41 09               CALL   prtdec   
17EC   CD F3 09               CALL   printStr   
17EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17FC   E1                     POP   hl   
17FD   E5                     PUSH   hl   
17FE   CD 41 09               CALL   prtdec   
1801   E1                     POP   hl   
1802   CD F3 09               CALL   printStr   
1805   20 28 23 00            .CSTR   " (#"   
1809   CD 89 09               CALL   prthex   
180C   CD F3 09               CALL   printStr   
180F   29 0D 0A 00            .CSTR   ")\r\n"   
1813   76                     HALT      
1814   00                     .CSTR      
1815                EXPECTM_0_2414S43:      
1815   E1                     POP   HL   
1816                          ;*Macro unroll:  test "3a= 5 a |= a",7
1816   31 80 3B               LD   SP,STACK   
1819   CD FA 09               CALL   init   
181C   CD 9E 3A               CALL   execStr   
181F   33 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3a= 5 a |= a"   
182C                          ;*Macro unroll:  expect "3a= 5 a |= a",7
182C   E1                     POP   HL   
182D   E5                     PUSH   HL   
182E   11 07 00               LD   DE,7   
1831   B7                     OR   A   
1832   ED 52                  SBC   HL,DE   
1834   7D                     LD   A,L   
1835   B4                     OR   H   
1836   28 57                  JR   Z,expectM_0_2415S43   
1838   CD F3 09               CALL   printStr   
183B   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3a= 5 a |= a"   
184E   CD F3 09               CALL   printStr   
1851   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1860   21 07 00               LD   HL,7   
1863   CD 41 09               CALL   prtdec   
1866   CD F3 09               CALL   printStr   
1869   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1876   E1                     POP   hl   
1877   E5                     PUSH   hl   
1878   CD 41 09               CALL   prtdec   
187B   E1                     POP   hl   
187C   CD F3 09               CALL   printStr   
187F   20 28 23 00            .CSTR   " (#"   
1883   CD 89 09               CALL   prthex   
1886   CD F3 09               CALL   printStr   
1889   29 0D 0A 00            .CSTR   ")\r\n"   
188D   76                     HALT      
188E   00                     .CSTR      
188F                EXPECTM_0_2415S43:      
188F   E1                     POP   HL   
1890                          ;*Macro unroll:  test "3 5/x", 6
1890   31 80 3B               LD   SP,STACK   
1893   CD FA 09               CALL   init   
1896   CD 9E 3A               CALL   execStr   
1899   33 20 35 2F 78 00      .CSTR   "3 5/x"   
189F                          ;*Macro unroll:  expect "3 5/x",6
189F   E1                     POP   HL   
18A0   E5                     PUSH   HL   
18A1   11 06 00               LD   DE,6   
18A4   B7                     OR   A   
18A5   ED 52                  SBC   HL,DE   
18A7   7D                     LD   A,L   
18A8   B4                     OR   H   
18A9   28 50                  JR   Z,expectM_0_2416S43   
18AB   CD F3 09               CALL   printStr   
18AE   43 6F 64 65 3A 20 33 20 35 2F 78 00 .CSTR   "Code: ","3 5/x"   
18BA   CD F3 09               CALL   printStr   
18BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18CC   21 06 00               LD   HL,6   
18CF   CD 41 09               CALL   prtdec   
18D2   CD F3 09               CALL   printStr   
18D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18E2   E1                     POP   hl   
18E3   E5                     PUSH   hl   
18E4   CD 41 09               CALL   prtdec   
18E7   E1                     POP   hl   
18E8   CD F3 09               CALL   printStr   
18EB   20 28 23 00            .CSTR   " (#"   
18EF   CD 89 09               CALL   prthex   
18F2   CD F3 09               CALL   printStr   
18F5   29 0D 0A 00            .CSTR   ")\r\n"   
18F9   76                     HALT      
18FA   00                     .CSTR      
18FB                EXPECTM_0_2416S43:      
18FB   E1                     POP   HL   
18FC                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
18FC   31 80 3B               LD   SP,STACK   
18FF   CD FA 09               CALL   init   
1902   CD 9E 3A               CALL   execStr   
1905   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1914                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1914   E1                     POP   HL   
1915   E5                     PUSH   HL   
1916   11 06 00               LD   DE,6   
1919   B7                     OR   A   
191A   ED 52                  SBC   HL,DE   
191C   7D                     LD   A,L   
191D   B4                     OR   H   
191E   28 59                  JR   Z,expectM_0_2417S43   
1920   CD F3 09               CALL   printStr   
1923   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1938   CD F3 09               CALL   printStr   
193B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194A   21 06 00               LD   HL,6   
194D   CD 41 09               CALL   prtdec   
1950   CD F3 09               CALL   printStr   
1953   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1960   E1                     POP   hl   
1961   E5                     PUSH   hl   
1962   CD 41 09               CALL   prtdec   
1965   E1                     POP   hl   
1966   CD F3 09               CALL   printStr   
1969   20 28 23 00            .CSTR   " (#"   
196D   CD 89 09               CALL   prthex   
1970   CD F3 09               CALL   printStr   
1973   29 0D 0A 00            .CSTR   ")\r\n"   
1977   76                     HALT      
1978   00                     .CSTR      
1979                EXPECTM_0_2417S43:      
1979   E1                     POP   HL   
197A                          ;*Macro unroll:  test "2 3 *", 6
197A   31 80 3B               LD   SP,STACK   
197D   CD FA 09               CALL   init   
1980   CD 9E 3A               CALL   execStr   
1983   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1989                          ;*Macro unroll:  expect "2 3 *",6
1989   E1                     POP   HL   
198A   E5                     PUSH   HL   
198B   11 06 00               LD   DE,6   
198E   B7                     OR   A   
198F   ED 52                  SBC   HL,DE   
1991   7D                     LD   A,L   
1992   B4                     OR   H   
1993   28 50                  JR   Z,expectM_0_2418S43   
1995   CD F3 09               CALL   printStr   
1998   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
19A4   CD F3 09               CALL   printStr   
19A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19B6   21 06 00               LD   HL,6   
19B9   CD 41 09               CALL   prtdec   
19BC   CD F3 09               CALL   printStr   
19BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19CC   E1                     POP   hl   
19CD   E5                     PUSH   hl   
19CE   CD 41 09               CALL   prtdec   
19D1   E1                     POP   hl   
19D2   CD F3 09               CALL   printStr   
19D5   20 28 23 00            .CSTR   " (#"   
19D9   CD 89 09               CALL   prthex   
19DC   CD F3 09               CALL   printStr   
19DF   29 0D 0A 00            .CSTR   ")\r\n"   
19E3   76                     HALT      
19E4   00                     .CSTR      
19E5                EXPECTM_0_2418S43:      
19E5   E1                     POP   HL   
19E6                          ;*Macro unroll:  test "3 x= 2 x *= x",6
19E6   31 80 3B               LD   SP,STACK   
19E9   CD FA 09               CALL   init   
19EC   CD 9E 3A               CALL   execStr   
19EF   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
19FD                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
19FD   E1                     POP   HL   
19FE   E5                     PUSH   HL   
19FF   11 06 00               LD   DE,6   
1A02   B7                     OR   A   
1A03   ED 52                  SBC   HL,DE   
1A05   7D                     LD   A,L   
1A06   B4                     OR   H   
1A07   28 58                  JR   Z,expectM_0_2419S43   
1A09   CD F3 09               CALL   printStr   
1A0C   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1A20   CD F3 09               CALL   printStr   
1A23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A32   21 06 00               LD   HL,6   
1A35   CD 41 09               CALL   prtdec   
1A38   CD F3 09               CALL   printStr   
1A3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A48   E1                     POP   hl   
1A49   E5                     PUSH   hl   
1A4A   CD 41 09               CALL   prtdec   
1A4D   E1                     POP   hl   
1A4E   CD F3 09               CALL   printStr   
1A51   20 28 23 00            .CSTR   " (#"   
1A55   CD 89 09               CALL   prthex   
1A58   CD F3 09               CALL   printStr   
1A5B   29 0D 0A 00            .CSTR   ")\r\n"   
1A5F   76                     HALT      
1A60   00                     .CSTR      
1A61                EXPECTM_0_2419S43:      
1A61   E1                     POP   HL   
1A62                          ;*Macro unroll:  test "1 2 3 + *", 5
1A62   31 80 3B               LD   SP,STACK   
1A65   CD FA 09               CALL   init   
1A68   CD 9E 3A               CALL   execStr   
1A6B   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1A75                          ;*Macro unroll:  expect "1 2 3 + *",5
1A75   E1                     POP   HL   
1A76   E5                     PUSH   HL   
1A77   11 05 00               LD   DE,5   
1A7A   B7                     OR   A   
1A7B   ED 52                  SBC   HL,DE   
1A7D   7D                     LD   A,L   
1A7E   B4                     OR   H   
1A7F   28 54                  JR   Z,expectM_0_2420S43   
1A81   CD F3 09               CALL   printStr   
1A84   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1A94   CD F3 09               CALL   printStr   
1A97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AA6   21 05 00               LD   HL,5   
1AA9   CD 41 09               CALL   prtdec   
1AAC   CD F3 09               CALL   printStr   
1AAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ABC   E1                     POP   hl   
1ABD   E5                     PUSH   hl   
1ABE   CD 41 09               CALL   prtdec   
1AC1   E1                     POP   hl   
1AC2   CD F3 09               CALL   printStr   
1AC5   20 28 23 00            .CSTR   " (#"   
1AC9   CD 89 09               CALL   prthex   
1ACC   CD F3 09               CALL   printStr   
1ACF   29 0D 0A 00            .CSTR   ")\r\n"   
1AD3   76                     HALT      
1AD4   00                     .CSTR      
1AD5                EXPECTM_0_2420S43:      
1AD5   E1                     POP   HL   
1AD6                          ;*Macro unroll:  test "7 3 /", 2
1AD6   31 80 3B               LD   SP,STACK   
1AD9   CD FA 09               CALL   init   
1ADC   CD 9E 3A               CALL   execStr   
1ADF   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1AE5                          ;*Macro unroll:  expect "7 3 /",2
1AE5   E1                     POP   HL   
1AE6   E5                     PUSH   HL   
1AE7   11 02 00               LD   DE,2   
1AEA   B7                     OR   A   
1AEB   ED 52                  SBC   HL,DE   
1AED   7D                     LD   A,L   
1AEE   B4                     OR   H   
1AEF   28 50                  JR   Z,expectM_0_2421S43   
1AF1   CD F3 09               CALL   printStr   
1AF4   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B00   CD F3 09               CALL   printStr   
1B03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B12   21 02 00               LD   HL,2   
1B15   CD 41 09               CALL   prtdec   
1B18   CD F3 09               CALL   printStr   
1B1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B28   E1                     POP   hl   
1B29   E5                     PUSH   hl   
1B2A   CD 41 09               CALL   prtdec   
1B2D   E1                     POP   hl   
1B2E   CD F3 09               CALL   printStr   
1B31   20 28 23 00            .CSTR   " (#"   
1B35   CD 89 09               CALL   prthex   
1B38   CD F3 09               CALL   printStr   
1B3B   29 0D 0A 00            .CSTR   ")\r\n"   
1B3F   76                     HALT      
1B40   00                     .CSTR      
1B41                EXPECTM_0_2421S43:      
1B41   E1                     POP   HL   
1B42                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1B42   31 80 3B               LD   SP,STACK   
1B45   CD FA 09               CALL   init   
1B48   CD 9E 3A               CALL   execStr   
1B4B   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1B59                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1B59   E1                     POP   HL   
1B5A   E5                     PUSH   HL   
1B5B   11 02 00               LD   DE,2   
1B5E   B7                     OR   A   
1B5F   ED 52                  SBC   HL,DE   
1B61   7D                     LD   A,L   
1B62   B4                     OR   H   
1B63   28 58                  JR   Z,expectM_0_2422S43   
1B65   CD F3 09               CALL   printStr   
1B68   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1B7C   CD F3 09               CALL   printStr   
1B7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8E   21 02 00               LD   HL,2   
1B91   CD 41 09               CALL   prtdec   
1B94   CD F3 09               CALL   printStr   
1B97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BA4   E1                     POP   hl   
1BA5   E5                     PUSH   hl   
1BA6   CD 41 09               CALL   prtdec   
1BA9   E1                     POP   hl   
1BAA   CD F3 09               CALL   printStr   
1BAD   20 28 23 00            .CSTR   " (#"   
1BB1   CD 89 09               CALL   prthex   
1BB4   CD F3 09               CALL   printStr   
1BB7   29 0D 0A 00            .CSTR   ")\r\n"   
1BBB   76                     HALT      
1BBC   00                     .CSTR      
1BBD                EXPECTM_0_2422S43:      
1BBD   E1                     POP   HL   
1BBE                          ;*Macro unroll:  test "7 3 / _", 1
1BBE   31 80 3B               LD   SP,STACK   
1BC1   CD FA 09               CALL   init   
1BC4   CD 9E 3A               CALL   execStr   
1BC7   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1BCF                          ;*Macro unroll:  expect "7 3 / _",1
1BCF   E1                     POP   HL   
1BD0   E5                     PUSH   HL   
1BD1   11 01 00               LD   DE,1   
1BD4   B7                     OR   A   
1BD5   ED 52                  SBC   HL,DE   
1BD7   7D                     LD   A,L   
1BD8   B4                     OR   H   
1BD9   28 52                  JR   Z,expectM_0_2423S43   
1BDB   CD F3 09               CALL   printStr   
1BDE   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1BEC   CD F3 09               CALL   printStr   
1BEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BFE   21 01 00               LD   HL,1   
1C01   CD 41 09               CALL   prtdec   
1C04   CD F3 09               CALL   printStr   
1C07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C14   E1                     POP   hl   
1C15   E5                     PUSH   hl   
1C16   CD 41 09               CALL   prtdec   
1C19   E1                     POP   hl   
1C1A   CD F3 09               CALL   printStr   
1C1D   20 28 23 00            .CSTR   " (#"   
1C21   CD 89 09               CALL   prthex   
1C24   CD F3 09               CALL   printStr   
1C27   29 0D 0A 00            .CSTR   ")\r\n"   
1C2B   76                     HALT      
1C2C   00                     .CSTR      
1C2D                EXPECTM_0_2423S43:      
1C2D   E1                     POP   HL   
1C2E                          ;*Macro unroll:  test "7 3 /", 2
1C2E   31 80 3B               LD   SP,STACK   
1C31   CD FA 09               CALL   init   
1C34   CD 9E 3A               CALL   execStr   
1C37   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C3D                          ;*Macro unroll:  expect "7 3 /",2
1C3D   E1                     POP   HL   
1C3E   E5                     PUSH   HL   
1C3F   11 02 00               LD   DE,2   
1C42   B7                     OR   A   
1C43   ED 52                  SBC   HL,DE   
1C45   7D                     LD   A,L   
1C46   B4                     OR   H   
1C47   28 50                  JR   Z,expectM_0_2424S43   
1C49   CD F3 09               CALL   printStr   
1C4C   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C58   CD F3 09               CALL   printStr   
1C5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C6A   21 02 00               LD   HL,2   
1C6D   CD 41 09               CALL   prtdec   
1C70   CD F3 09               CALL   printStr   
1C73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C80   E1                     POP   hl   
1C81   E5                     PUSH   hl   
1C82   CD 41 09               CALL   prtdec   
1C85   E1                     POP   hl   
1C86   CD F3 09               CALL   printStr   
1C89   20 28 23 00            .CSTR   " (#"   
1C8D   CD 89 09               CALL   prthex   
1C90   CD F3 09               CALL   printStr   
1C93   29 0D 0A 00            .CSTR   ")\r\n"   
1C97   76                     HALT      
1C98   00                     .CSTR      
1C99                EXPECTM_0_2424S43:      
1C99   E1                     POP   HL   
1C9A                          ;*Macro unroll:  test "2 3 ==", FALSE
1C9A   31 80 3B               LD   SP,STACK   
1C9D   CD FA 09               CALL   init   
1CA0   CD 9E 3A               CALL   execStr   
1CA3   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1CAA                          ;*Macro unroll:  expect "2 3 ==",FALSE
1CAA   E1                     POP   HL   
1CAB   E5                     PUSH   HL   
1CAC   11 00 00               LD   DE,FALSE   
1CAF   B7                     OR   A   
1CB0   ED 52                  SBC   HL,DE   
1CB2   7D                     LD   A,L   
1CB3   B4                     OR   H   
1CB4   28 51                  JR   Z,expectM_0_2425S43   
1CB6   CD F3 09               CALL   printStr   
1CB9   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1CC6   CD F3 09               CALL   printStr   
1CC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD8   21 00 00               LD   HL,FALSE   
1CDB   CD 41 09               CALL   prtdec   
1CDE   CD F3 09               CALL   printStr   
1CE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CEE   E1                     POP   hl   
1CEF   E5                     PUSH   hl   
1CF0   CD 41 09               CALL   prtdec   
1CF3   E1                     POP   hl   
1CF4   CD F3 09               CALL   printStr   
1CF7   20 28 23 00            .CSTR   " (#"   
1CFB   CD 89 09               CALL   prthex   
1CFE   CD F3 09               CALL   printStr   
1D01   29 0D 0A 00            .CSTR   ")\r\n"   
1D05   76                     HALT      
1D06   00                     .CSTR      
1D07                EXPECTM_0_2425S43:      
1D07   E1                     POP   HL   
1D08                          ;*Macro unroll:  test "3 3 ==", TRUE
1D08   31 80 3B               LD   SP,STACK   
1D0B   CD FA 09               CALL   init   
1D0E   CD 9E 3A               CALL   execStr   
1D11   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1D18                          ;*Macro unroll:  expect "3 3 ==",TRUE
1D18   E1                     POP   HL   
1D19   E5                     PUSH   HL   
1D1A   11 FF FF               LD   DE,TRUE   
1D1D   B7                     OR   A   
1D1E   ED 52                  SBC   HL,DE   
1D20   7D                     LD   A,L   
1D21   B4                     OR   H   
1D22   28 51                  JR   Z,expectM_0_2426S43   
1D24   CD F3 09               CALL   printStr   
1D27   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1D34   CD F3 09               CALL   printStr   
1D37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D46   21 FF FF               LD   HL,TRUE   
1D49   CD 41 09               CALL   prtdec   
1D4C   CD F3 09               CALL   printStr   
1D4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D5C   E1                     POP   hl   
1D5D   E5                     PUSH   hl   
1D5E   CD 41 09               CALL   prtdec   
1D61   E1                     POP   hl   
1D62   CD F3 09               CALL   printStr   
1D65   20 28 23 00            .CSTR   " (#"   
1D69   CD 89 09               CALL   prthex   
1D6C   CD F3 09               CALL   printStr   
1D6F   29 0D 0A 00            .CSTR   ")\r\n"   
1D73   76                     HALT      
1D74   00                     .CSTR      
1D75                EXPECTM_0_2426S43:      
1D75   E1                     POP   HL   
1D76                          ;*Macro unroll:  test "1 2 <", TRUE
1D76   31 80 3B               LD   SP,STACK   
1D79   CD FA 09               CALL   init   
1D7C   CD 9E 3A               CALL   execStr   
1D7F   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1D85                          ;*Macro unroll:  expect "1 2 <",TRUE
1D85   E1                     POP   HL   
1D86   E5                     PUSH   HL   
1D87   11 FF FF               LD   DE,TRUE   
1D8A   B7                     OR   A   
1D8B   ED 52                  SBC   HL,DE   
1D8D   7D                     LD   A,L   
1D8E   B4                     OR   H   
1D8F   28 50                  JR   Z,expectM_0_2427S43   
1D91   CD F3 09               CALL   printStr   
1D94   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1DA0   CD F3 09               CALL   printStr   
1DA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DB2   21 FF FF               LD   HL,TRUE   
1DB5   CD 41 09               CALL   prtdec   
1DB8   CD F3 09               CALL   printStr   
1DBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC8   E1                     POP   hl   
1DC9   E5                     PUSH   hl   
1DCA   CD 41 09               CALL   prtdec   
1DCD   E1                     POP   hl   
1DCE   CD F3 09               CALL   printStr   
1DD1   20 28 23 00            .CSTR   " (#"   
1DD5   CD 89 09               CALL   prthex   
1DD8   CD F3 09               CALL   printStr   
1DDB   29 0D 0A 00            .CSTR   ")\r\n"   
1DDF   76                     HALT      
1DE0   00                     .CSTR      
1DE1                EXPECTM_0_2427S43:      
1DE1   E1                     POP   HL   
1DE2                          ;*Macro unroll:  test "2 1 <", FALSE
1DE2   31 80 3B               LD   SP,STACK   
1DE5   CD FA 09               CALL   init   
1DE8   CD 9E 3A               CALL   execStr   
1DEB   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1DF1                          ;*Macro unroll:  expect "2 1 <",FALSE
1DF1   E1                     POP   HL   
1DF2   E5                     PUSH   HL   
1DF3   11 00 00               LD   DE,FALSE   
1DF6   B7                     OR   A   
1DF7   ED 52                  SBC   HL,DE   
1DF9   7D                     LD   A,L   
1DFA   B4                     OR   H   
1DFB   28 50                  JR   Z,expectM_0_2428S43   
1DFD   CD F3 09               CALL   printStr   
1E00   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1E0C   CD F3 09               CALL   printStr   
1E0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E1E   21 00 00               LD   HL,FALSE   
1E21   CD 41 09               CALL   prtdec   
1E24   CD F3 09               CALL   printStr   
1E27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E34   E1                     POP   hl   
1E35   E5                     PUSH   hl   
1E36   CD 41 09               CALL   prtdec   
1E39   E1                     POP   hl   
1E3A   CD F3 09               CALL   printStr   
1E3D   20 28 23 00            .CSTR   " (#"   
1E41   CD 89 09               CALL   prthex   
1E44   CD F3 09               CALL   printStr   
1E47   29 0D 0A 00            .CSTR   ")\r\n"   
1E4B   76                     HALT      
1E4C   00                     .CSTR      
1E4D                EXPECTM_0_2428S43:      
1E4D   E1                     POP   HL   
1E4E                          ;*Macro unroll:  test "2 3 <", TRUE
1E4E   31 80 3B               LD   SP,STACK   
1E51   CD FA 09               CALL   init   
1E54   CD 9E 3A               CALL   execStr   
1E57   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E5D                          ;*Macro unroll:  expect "2 3 <",TRUE
1E5D   E1                     POP   HL   
1E5E   E5                     PUSH   HL   
1E5F   11 FF FF               LD   DE,TRUE   
1E62   B7                     OR   A   
1E63   ED 52                  SBC   HL,DE   
1E65   7D                     LD   A,L   
1E66   B4                     OR   H   
1E67   28 50                  JR   Z,expectM_0_2429S43   
1E69   CD F3 09               CALL   printStr   
1E6C   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1E78   CD F3 09               CALL   printStr   
1E7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E8A   21 FF FF               LD   HL,TRUE   
1E8D   CD 41 09               CALL   prtdec   
1E90   CD F3 09               CALL   printStr   
1E93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA0   E1                     POP   hl   
1EA1   E5                     PUSH   hl   
1EA2   CD 41 09               CALL   prtdec   
1EA5   E1                     POP   hl   
1EA6   CD F3 09               CALL   printStr   
1EA9   20 28 23 00            .CSTR   " (#"   
1EAD   CD 89 09               CALL   prthex   
1EB0   CD F3 09               CALL   printStr   
1EB3   29 0D 0A 00            .CSTR   ")\r\n"   
1EB7   76                     HALT      
1EB8   00                     .CSTR      
1EB9                EXPECTM_0_2429S43:      
1EB9   E1                     POP   HL   
1EBA                          ;*Macro unroll:  test "3 3 <", FALSE
1EBA   31 80 3B               LD   SP,STACK   
1EBD   CD FA 09               CALL   init   
1EC0   CD 9E 3A               CALL   execStr   
1EC3   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1EC9                          ;*Macro unroll:  expect "3 3 <",FALSE
1EC9   E1                     POP   HL   
1ECA   E5                     PUSH   HL   
1ECB   11 00 00               LD   DE,FALSE   
1ECE   B7                     OR   A   
1ECF   ED 52                  SBC   HL,DE   
1ED1   7D                     LD   A,L   
1ED2   B4                     OR   H   
1ED3   28 50                  JR   Z,expectM_0_2430S43   
1ED5   CD F3 09               CALL   printStr   
1ED8   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1EE4   CD F3 09               CALL   printStr   
1EE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF6   21 00 00               LD   HL,FALSE   
1EF9   CD 41 09               CALL   prtdec   
1EFC   CD F3 09               CALL   printStr   
1EFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F0C   E1                     POP   hl   
1F0D   E5                     PUSH   hl   
1F0E   CD 41 09               CALL   prtdec   
1F11   E1                     POP   hl   
1F12   CD F3 09               CALL   printStr   
1F15   20 28 23 00            .CSTR   " (#"   
1F19   CD 89 09               CALL   prthex   
1F1C   CD F3 09               CALL   printStr   
1F1F   29 0D 0A 00            .CSTR   ")\r\n"   
1F23   76                     HALT      
1F24   00                     .CSTR      
1F25                EXPECTM_0_2430S43:      
1F25   E1                     POP   HL   
1F26                          ;*Macro unroll:  test "1 2 >", FALSE
1F26   31 80 3B               LD   SP,STACK   
1F29   CD FA 09               CALL   init   
1F2C   CD 9E 3A               CALL   execStr   
1F2F   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1F35                          ;*Macro unroll:  expect "1 2 >",FALSE
1F35   E1                     POP   HL   
1F36   E5                     PUSH   HL   
1F37   11 00 00               LD   DE,FALSE   
1F3A   B7                     OR   A   
1F3B   ED 52                  SBC   HL,DE   
1F3D   7D                     LD   A,L   
1F3E   B4                     OR   H   
1F3F   28 50                  JR   Z,expectM_0_2431S43   
1F41   CD F3 09               CALL   printStr   
1F44   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F50   CD F3 09               CALL   printStr   
1F53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F62   21 00 00               LD   HL,FALSE   
1F65   CD 41 09               CALL   prtdec   
1F68   CD F3 09               CALL   printStr   
1F6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F78   E1                     POP   hl   
1F79   E5                     PUSH   hl   
1F7A   CD 41 09               CALL   prtdec   
1F7D   E1                     POP   hl   
1F7E   CD F3 09               CALL   printStr   
1F81   20 28 23 00            .CSTR   " (#"   
1F85   CD 89 09               CALL   prthex   
1F88   CD F3 09               CALL   printStr   
1F8B   29 0D 0A 00            .CSTR   ")\r\n"   
1F8F   76                     HALT      
1F90   00                     .CSTR      
1F91                EXPECTM_0_2431S43:      
1F91   E1                     POP   HL   
1F92                          ;*Macro unroll:  test "2 1 >", TRUE
1F92   31 80 3B               LD   SP,STACK   
1F95   CD FA 09               CALL   init   
1F98   CD 9E 3A               CALL   execStr   
1F9B   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1FA1                          ;*Macro unroll:  expect "2 1 >",TRUE
1FA1   E1                     POP   HL   
1FA2   E5                     PUSH   HL   
1FA3   11 FF FF               LD   DE,TRUE   
1FA6   B7                     OR   A   
1FA7   ED 52                  SBC   HL,DE   
1FA9   7D                     LD   A,L   
1FAA   B4                     OR   H   
1FAB   28 50                  JR   Z,expectM_0_2432S43   
1FAD   CD F3 09               CALL   printStr   
1FB0   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1FBC   CD F3 09               CALL   printStr   
1FBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FCE   21 FF FF               LD   HL,TRUE   
1FD1   CD 41 09               CALL   prtdec   
1FD4   CD F3 09               CALL   printStr   
1FD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE4   E1                     POP   hl   
1FE5   E5                     PUSH   hl   
1FE6   CD 41 09               CALL   prtdec   
1FE9   E1                     POP   hl   
1FEA   CD F3 09               CALL   printStr   
1FED   20 28 23 00            .CSTR   " (#"   
1FF1   CD 89 09               CALL   prthex   
1FF4   CD F3 09               CALL   printStr   
1FF7   29 0D 0A 00            .CSTR   ")\r\n"   
1FFB   76                     HALT      
1FFC   00                     .CSTR      
1FFD                EXPECTM_0_2432S43:      
1FFD   E1                     POP   HL   
1FFE                          ;*Macro unroll:  test "3 3 >", FALSE
1FFE   31 80 3B               LD   SP,STACK   
2001   CD FA 09               CALL   init   
2004   CD 9E 3A               CALL   execStr   
2007   33 20 33 20 3E 00      .CSTR   "3 3 >"   
200D                          ;*Macro unroll:  expect "3 3 >",FALSE
200D   E1                     POP   HL   
200E   E5                     PUSH   HL   
200F   11 00 00               LD   DE,FALSE   
2012   B7                     OR   A   
2013   ED 52                  SBC   HL,DE   
2015   7D                     LD   A,L   
2016   B4                     OR   H   
2017   28 50                  JR   Z,expectM_0_2433S43   
2019   CD F3 09               CALL   printStr   
201C   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2028   CD F3 09               CALL   printStr   
202B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
203A   21 00 00               LD   HL,FALSE   
203D   CD 41 09               CALL   prtdec   
2040   CD F3 09               CALL   printStr   
2043   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2050   E1                     POP   hl   
2051   E5                     PUSH   hl   
2052   CD 41 09               CALL   prtdec   
2055   E1                     POP   hl   
2056   CD F3 09               CALL   printStr   
2059   20 28 23 00            .CSTR   " (#"   
205D   CD 89 09               CALL   prthex   
2060   CD F3 09               CALL   printStr   
2063   29 0D 0A 00            .CSTR   ")\r\n"   
2067   76                     HALT      
2068   00                     .CSTR      
2069                EXPECTM_0_2433S43:      
2069   E1                     POP   HL   
206A                          ;*Macro unroll:  test "4 3 >", TRUE
206A   31 80 3B               LD   SP,STACK   
206D   CD FA 09               CALL   init   
2070   CD 9E 3A               CALL   execStr   
2073   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2079                          ;*Macro unroll:  expect "4 3 >",TRUE
2079   E1                     POP   HL   
207A   E5                     PUSH   HL   
207B   11 FF FF               LD   DE,TRUE   
207E   B7                     OR   A   
207F   ED 52                  SBC   HL,DE   
2081   7D                     LD   A,L   
2082   B4                     OR   H   
2083   28 50                  JR   Z,expectM_0_2434S43   
2085   CD F3 09               CALL   printStr   
2088   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2094   CD F3 09               CALL   printStr   
2097   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20A6   21 FF FF               LD   HL,TRUE   
20A9   CD 41 09               CALL   prtdec   
20AC   CD F3 09               CALL   printStr   
20AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20BC   E1                     POP   hl   
20BD   E5                     PUSH   hl   
20BE   CD 41 09               CALL   prtdec   
20C1   E1                     POP   hl   
20C2   CD F3 09               CALL   printStr   
20C5   20 28 23 00            .CSTR   " (#"   
20C9   CD 89 09               CALL   prthex   
20CC   CD F3 09               CALL   printStr   
20CF   29 0D 0A 00            .CSTR   ")\r\n"   
20D3   76                     HALT      
20D4   00                     .CSTR      
20D5                EXPECTM_0_2434S43:      
20D5   E1                     POP   HL   
20D6                          ;*Macro unroll:  test "2 2 <=", TRUE
20D6   31 80 3B               LD   SP,STACK   
20D9   CD FA 09               CALL   init   
20DC   CD 9E 3A               CALL   execStr   
20DF   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
20E6                          ;*Macro unroll:  expect "2 2 <=",TRUE
20E6   E1                     POP   HL   
20E7   E5                     PUSH   HL   
20E8   11 FF FF               LD   DE,TRUE   
20EB   B7                     OR   A   
20EC   ED 52                  SBC   HL,DE   
20EE   7D                     LD   A,L   
20EF   B4                     OR   H   
20F0   28 51                  JR   Z,expectM_0_2435S43   
20F2   CD F3 09               CALL   printStr   
20F5   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2102   CD F3 09               CALL   printStr   
2105   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2114   21 FF FF               LD   HL,TRUE   
2117   CD 41 09               CALL   prtdec   
211A   CD F3 09               CALL   printStr   
211D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
212A   E1                     POP   hl   
212B   E5                     PUSH   hl   
212C   CD 41 09               CALL   prtdec   
212F   E1                     POP   hl   
2130   CD F3 09               CALL   printStr   
2133   20 28 23 00            .CSTR   " (#"   
2137   CD 89 09               CALL   prthex   
213A   CD F3 09               CALL   printStr   
213D   29 0D 0A 00            .CSTR   ")\r\n"   
2141   76                     HALT      
2142   00                     .CSTR      
2143                EXPECTM_0_2435S43:      
2143   E1                     POP   HL   
2144                          ;*Macro unroll:  test "2 2 >=", TRUE
2144   31 80 3B               LD   SP,STACK   
2147   CD FA 09               CALL   init   
214A   CD 9E 3A               CALL   execStr   
214D   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2154                          ;*Macro unroll:  expect "2 2 >=",TRUE
2154   E1                     POP   HL   
2155   E5                     PUSH   HL   
2156   11 FF FF               LD   DE,TRUE   
2159   B7                     OR   A   
215A   ED 52                  SBC   HL,DE   
215C   7D                     LD   A,L   
215D   B4                     OR   H   
215E   28 51                  JR   Z,expectM_0_2436S43   
2160   CD F3 09               CALL   printStr   
2163   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2170   CD F3 09               CALL   printStr   
2173   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2182   21 FF FF               LD   HL,TRUE   
2185   CD 41 09               CALL   prtdec   
2188   CD F3 09               CALL   printStr   
218B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2198   E1                     POP   hl   
2199   E5                     PUSH   hl   
219A   CD 41 09               CALL   prtdec   
219D   E1                     POP   hl   
219E   CD F3 09               CALL   printStr   
21A1   20 28 23 00            .CSTR   " (#"   
21A5   CD 89 09               CALL   prthex   
21A8   CD F3 09               CALL   printStr   
21AB   29 0D 0A 00            .CSTR   ")\r\n"   
21AF   76                     HALT      
21B0   00                     .CSTR      
21B1                EXPECTM_0_2436S43:      
21B1   E1                     POP   HL   
21B2                          ;*Macro unroll:  test "3 1 <<", 6
21B2   31 80 3B               LD   SP,STACK   
21B5   CD FA 09               CALL   init   
21B8   CD 9E 3A               CALL   execStr   
21BB   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
21C2                          ;*Macro unroll:  expect "3 1 <<",6
21C2   E1                     POP   HL   
21C3   E5                     PUSH   HL   
21C4   11 06 00               LD   DE,6   
21C7   B7                     OR   A   
21C8   ED 52                  SBC   HL,DE   
21CA   7D                     LD   A,L   
21CB   B4                     OR   H   
21CC   28 51                  JR   Z,expectM_0_2437S43   
21CE   CD F3 09               CALL   printStr   
21D1   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
21DE   CD F3 09               CALL   printStr   
21E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F0   21 06 00               LD   HL,6   
21F3   CD 41 09               CALL   prtdec   
21F6   CD F3 09               CALL   printStr   
21F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2206   E1                     POP   hl   
2207   E5                     PUSH   hl   
2208   CD 41 09               CALL   prtdec   
220B   E1                     POP   hl   
220C   CD F3 09               CALL   printStr   
220F   20 28 23 00            .CSTR   " (#"   
2213   CD 89 09               CALL   prthex   
2216   CD F3 09               CALL   printStr   
2219   29 0D 0A 00            .CSTR   ")\r\n"   
221D   76                     HALT      
221E   00                     .CSTR      
221F                EXPECTM_0_2437S43:      
221F   E1                     POP   HL   
2220                          ;*Macro unroll:  test "10 1 >>", 5
2220   31 80 3B               LD   SP,STACK   
2223   CD FA 09               CALL   init   
2226   CD 9E 3A               CALL   execStr   
2229   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2231                          ;*Macro unroll:  expect "10 1 >>",5
2231   E1                     POP   HL   
2232   E5                     PUSH   HL   
2233   11 05 00               LD   DE,5   
2236   B7                     OR   A   
2237   ED 52                  SBC   HL,DE   
2239   7D                     LD   A,L   
223A   B4                     OR   H   
223B   28 52                  JR   Z,expectM_0_2438S43   
223D   CD F3 09               CALL   printStr   
2240   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
224E   CD F3 09               CALL   printStr   
2251   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2260   21 05 00               LD   HL,5   
2263   CD 41 09               CALL   prtdec   
2266   CD F3 09               CALL   printStr   
2269   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2276   E1                     POP   hl   
2277   E5                     PUSH   hl   
2278   CD 41 09               CALL   prtdec   
227B   E1                     POP   hl   
227C   CD F3 09               CALL   printStr   
227F   20 28 23 00            .CSTR   " (#"   
2283   CD 89 09               CALL   prthex   
2286   CD F3 09               CALL   printStr   
2289   29 0D 0A 00            .CSTR   ")\r\n"   
228D   76                     HALT      
228E   00                     .CSTR      
228F                EXPECTM_0_2438S43:      
228F   E1                     POP   HL   
2290                          ;*Macro unroll:  test "1 x = x", 1
2290   31 80 3B               LD   SP,STACK   
2293   CD FA 09               CALL   init   
2296   CD 9E 3A               CALL   execStr   
2299   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
22A1                          ;*Macro unroll:  expect "1 x = x",1
22A1   E1                     POP   HL   
22A2   E5                     PUSH   HL   
22A3   11 01 00               LD   DE,1   
22A6   B7                     OR   A   
22A7   ED 52                  SBC   HL,DE   
22A9   7D                     LD   A,L   
22AA   B4                     OR   H   
22AB   28 52                  JR   Z,expectM_0_2439S43   
22AD   CD F3 09               CALL   printStr   
22B0   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
22BE   CD F3 09               CALL   printStr   
22C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D0   21 01 00               LD   HL,1   
22D3   CD 41 09               CALL   prtdec   
22D6   CD F3 09               CALL   printStr   
22D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E6   E1                     POP   hl   
22E7   E5                     PUSH   hl   
22E8   CD 41 09               CALL   prtdec   
22EB   E1                     POP   hl   
22EC   CD F3 09               CALL   printStr   
22EF   20 28 23 00            .CSTR   " (#"   
22F3   CD 89 09               CALL   prthex   
22F6   CD F3 09               CALL   printStr   
22F9   29 0D 0A 00            .CSTR   ")\r\n"   
22FD   76                     HALT      
22FE   00                     .CSTR      
22FF                EXPECTM_0_2439S43:      
22FF   E1                     POP   HL   
2300                          ;*Macro unroll:  test "1{}^", 1
2300   31 80 3B               LD   SP,STACK   
2303   CD FA 09               CALL   init   
2306   CD 9E 3A               CALL   execStr   
2309   31 7B 7D 5E 00         .CSTR   "1{}^"   
230E                          ;*Macro unroll:  expect "1{}^",1
230E   E1                     POP   HL   
230F   E5                     PUSH   HL   
2310   11 01 00               LD   DE,1   
2313   B7                     OR   A   
2314   ED 52                  SBC   HL,DE   
2316   7D                     LD   A,L   
2317   B4                     OR   H   
2318   28 4F                  JR   Z,expectM_0_2440S43   
231A   CD F3 09               CALL   printStr   
231D   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2328   CD F3 09               CALL   printStr   
232B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233A   21 01 00               LD   HL,1   
233D   CD 41 09               CALL   prtdec   
2340   CD F3 09               CALL   printStr   
2343   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2350   E1                     POP   hl   
2351   E5                     PUSH   hl   
2352   CD 41 09               CALL   prtdec   
2355   E1                     POP   hl   
2356   CD F3 09               CALL   printStr   
2359   20 28 23 00            .CSTR   " (#"   
235D   CD 89 09               CALL   prthex   
2360   CD F3 09               CALL   printStr   
2363   29 0D 0A 00            .CSTR   ")\r\n"   
2367   76                     HALT      
2368   00                     .CSTR      
2369                EXPECTM_0_2440S43:      
2369   E1                     POP   HL   
236A                          ;*Macro unroll:  test "{1}^", 1
236A   31 80 3B               LD   SP,STACK   
236D   CD FA 09               CALL   init   
2370   CD 9E 3A               CALL   execStr   
2373   7B 31 7D 5E 00         .CSTR   "{1}^"   
2378                          ;*Macro unroll:  expect "{1}^",1
2378   E1                     POP   HL   
2379   E5                     PUSH   HL   
237A   11 01 00               LD   DE,1   
237D   B7                     OR   A   
237E   ED 52                  SBC   HL,DE   
2380   7D                     LD   A,L   
2381   B4                     OR   H   
2382   28 4F                  JR   Z,expectM_0_2441S43   
2384   CD F3 09               CALL   printStr   
2387   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2392   CD F3 09               CALL   printStr   
2395   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23A4   21 01 00               LD   HL,1   
23A7   CD 41 09               CALL   prtdec   
23AA   CD F3 09               CALL   printStr   
23AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23BA   E1                     POP   hl   
23BB   E5                     PUSH   hl   
23BC   CD 41 09               CALL   prtdec   
23BF   E1                     POP   hl   
23C0   CD F3 09               CALL   printStr   
23C3   20 28 23 00            .CSTR   " (#"   
23C7   CD 89 09               CALL   prthex   
23CA   CD F3 09               CALL   printStr   
23CD   29 0D 0A 00            .CSTR   ")\r\n"   
23D1   76                     HALT      
23D2   00                     .CSTR      
23D3                EXPECTM_0_2441S43:      
23D3   E1                     POP   HL   
23D4                          ;*Macro unroll:  test "{{1}^}^", 1
23D4   31 80 3B               LD   SP,STACK   
23D7   CD FA 09               CALL   init   
23DA   CD 9E 3A               CALL   execStr   
23DD   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
23E5                          ;*Macro unroll:  expect "{{1}^}^",1
23E5   E1                     POP   HL   
23E6   E5                     PUSH   HL   
23E7   11 01 00               LD   DE,1   
23EA   B7                     OR   A   
23EB   ED 52                  SBC   HL,DE   
23ED   7D                     LD   A,L   
23EE   B4                     OR   H   
23EF   28 52                  JR   Z,expectM_0_2442S43   
23F1   CD F3 09               CALL   printStr   
23F4   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2402   CD F3 09               CALL   printStr   
2405   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2414   21 01 00               LD   HL,1   
2417   CD 41 09               CALL   prtdec   
241A   CD F3 09               CALL   printStr   
241D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
242A   E1                     POP   hl   
242B   E5                     PUSH   hl   
242C   CD 41 09               CALL   prtdec   
242F   E1                     POP   hl   
2430   CD F3 09               CALL   printStr   
2433   20 28 23 00            .CSTR   " (#"   
2437   CD 89 09               CALL   prthex   
243A   CD F3 09               CALL   printStr   
243D   29 0D 0A 00            .CSTR   ")\r\n"   
2441   76                     HALT      
2442   00                     .CSTR      
2443                EXPECTM_0_2442S43:      
2443   E1                     POP   HL   
2444                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2444   31 80 3B               LD   SP,STACK   
2447   CD FA 09               CALL   init   
244A   CD 9E 3A               CALL   execStr   
244D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2458                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2458   E1                     POP   HL   
2459   E5                     PUSH   HL   
245A   11 01 00               LD   DE,1   
245D   B7                     OR   A   
245E   ED 52                  SBC   HL,DE   
2460   7D                     LD   A,L   
2461   B4                     OR   H   
2462   28 55                  JR   Z,expectM_0_2443S43   
2464   CD F3 09               CALL   printStr   
2467   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2478   CD F3 09               CALL   printStr   
247B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
248A   21 01 00               LD   HL,1   
248D   CD 41 09               CALL   prtdec   
2490   CD F3 09               CALL   printStr   
2493   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24A0   E1                     POP   hl   
24A1   E5                     PUSH   hl   
24A2   CD 41 09               CALL   prtdec   
24A5   E1                     POP   hl   
24A6   CD F3 09               CALL   printStr   
24A9   20 28 23 00            .CSTR   " (#"   
24AD   CD 89 09               CALL   prthex   
24B0   CD F3 09               CALL   printStr   
24B3   29 0D 0A 00            .CSTR   ")\r\n"   
24B7   76                     HALT      
24B8   00                     .CSTR      
24B9                EXPECTM_0_2443S43:      
24B9   E1                     POP   HL   
24BA                          ;*Macro unroll:  test "5 /f{10} ?", 5
24BA   31 80 3B               LD   SP,STACK   
24BD   CD FA 09               CALL   init   
24C0   CD 9E 3A               CALL   execStr   
24C3   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
24CE                          ;*Macro unroll:  expect "5 /f{10} ?",5
24CE   E1                     POP   HL   
24CF   E5                     PUSH   HL   
24D0   11 05 00               LD   DE,5   
24D3   B7                     OR   A   
24D4   ED 52                  SBC   HL,DE   
24D6   7D                     LD   A,L   
24D7   B4                     OR   H   
24D8   28 55                  JR   Z,expectM_0_2444S43   
24DA   CD F3 09               CALL   printStr   
24DD   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
24EE   CD F3 09               CALL   printStr   
24F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2500   21 05 00               LD   HL,5   
2503   CD 41 09               CALL   prtdec   
2506   CD F3 09               CALL   printStr   
2509   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2516   E1                     POP   hl   
2517   E5                     PUSH   hl   
2518   CD 41 09               CALL   prtdec   
251B   E1                     POP   hl   
251C   CD F3 09               CALL   printStr   
251F   20 28 23 00            .CSTR   " (#"   
2523   CD 89 09               CALL   prthex   
2526   CD F3 09               CALL   printStr   
2529   29 0D 0A 00            .CSTR   ")\r\n"   
252D   76                     HALT      
252E   00                     .CSTR      
252F                EXPECTM_0_2444S43:      
252F   E1                     POP   HL   
2530                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2530   31 80 3B               LD   SP,STACK   
2533   CD FA 09               CALL   init   
2536   CD 9E 3A               CALL   execStr   
2539   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
2546                          ;*Macro unroll:  expect "5 /t{10} ? +",15
2546   E1                     POP   HL   
2547   E5                     PUSH   HL   
2548   11 0F 00               LD   DE,15   
254B   B7                     OR   A   
254C   ED 52                  SBC   HL,DE   
254E   7D                     LD   A,L   
254F   B4                     OR   H   
2550   28 57                  JR   Z,expectM_0_2445S43   
2552   CD F3 09               CALL   printStr   
2555   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2568   CD F3 09               CALL   printStr   
256B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
257A   21 0F 00               LD   HL,15   
257D   CD 41 09               CALL   prtdec   
2580   CD F3 09               CALL   printStr   
2583   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2590   E1                     POP   hl   
2591   E5                     PUSH   hl   
2592   CD 41 09               CALL   prtdec   
2595   E1                     POP   hl   
2596   CD F3 09               CALL   printStr   
2599   20 28 23 00            .CSTR   " (#"   
259D   CD 89 09               CALL   prthex   
25A0   CD F3 09               CALL   printStr   
25A3   29 0D 0A 00            .CSTR   ")\r\n"   
25A7   76                     HALT      
25A8   00                     .CSTR      
25A9                EXPECTM_0_2445S43:      
25A9   E1                     POP   HL   
25AA                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
25AA   31 80 3B               LD   SP,STACK   
25AD   CD FA 09               CALL   init   
25B0   CD 9E 3A               CALL   execStr   
25B3   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
25C5                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
25C5   E1                     POP   HL   
25C6   E5                     PUSH   HL   
25C7   11 15 00               LD   DE,21   
25CA   B7                     OR   A   
25CB   ED 52                  SBC   HL,DE   
25CD   7D                     LD   A,L   
25CE   B4                     OR   H   
25CF   28 5C                  JR   Z,expectM_0_2446S43   
25D1   CD F3 09               CALL   printStr   
25D4   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
25EC   CD F3 09               CALL   printStr   
25EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25FE   21 15 00               LD   HL,21   
2601   CD 41 09               CALL   prtdec   
2604   CD F3 09               CALL   printStr   
2607   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2614   E1                     POP   hl   
2615   E5                     PUSH   hl   
2616   CD 41 09               CALL   prtdec   
2619   E1                     POP   hl   
261A   CD F3 09               CALL   printStr   
261D   20 28 23 00            .CSTR   " (#"   
2621   CD 89 09               CALL   prthex   
2624   CD F3 09               CALL   printStr   
2627   29 0D 0A 00            .CSTR   ")\r\n"   
262B   76                     HALT      
262C   00                     .CSTR      
262D                EXPECTM_0_2446S43:      
262D   E1                     POP   HL   
262E                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
262E   31 80 3B               LD   SP,STACK   
2631   CD FA 09               CALL   init   
2634   CD 9E 3A               CALL   execStr   
2637   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
2649                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
2649   E1                     POP   HL   
264A   E5                     PUSH   HL   
264B   11 0B 00               LD   DE,11   
264E   B7                     OR   A   
264F   ED 52                  SBC   HL,DE   
2651   7D                     LD   A,L   
2652   B4                     OR   H   
2653   28 5C                  JR   Z,expectM_0_2447S43   
2655   CD F3 09               CALL   printStr   
2658   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2670   CD F3 09               CALL   printStr   
2673   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2682   21 0B 00               LD   HL,11   
2685   CD 41 09               CALL   prtdec   
2688   CD F3 09               CALL   printStr   
268B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2698   E1                     POP   hl   
2699   E5                     PUSH   hl   
269A   CD 41 09               CALL   prtdec   
269D   E1                     POP   hl   
269E   CD F3 09               CALL   printStr   
26A1   20 28 23 00            .CSTR   " (#"   
26A5   CD 89 09               CALL   prthex   
26A8   CD F3 09               CALL   printStr   
26AB   29 0D 0A 00            .CSTR   ")\r\n"   
26AF   76                     HALT      
26B0   00                     .CSTR      
26B1                EXPECTM_0_2447S43:      
26B1   E1                     POP   HL   
26B2                          ;*Macro unroll:  test ": -2%", $0000
26B2   31 80 3B               LD   SP,STACK   
26B5   CD FA 09               CALL   init   
26B8   CD 9E 3A               CALL   execStr   
26BB   3A 20 2D 32 25 00      .CSTR   ": -2%"   
26C1                          ;*Macro unroll:  expect ": -2%",$0000
26C1   E1                     POP   HL   
26C2   E5                     PUSH   HL   
26C3   11 00 00               LD   DE,$0000   
26C6   B7                     OR   A   
26C7   ED 52                  SBC   HL,DE   
26C9   7D                     LD   A,L   
26CA   B4                     OR   H   
26CB   28 50                  JR   Z,expectM_0_2448S43   
26CD   CD F3 09               CALL   printStr   
26D0   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
26DC   CD F3 09               CALL   printStr   
26DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26EE   21 00 00               LD   HL,$0000   
26F1   CD 41 09               CALL   prtdec   
26F4   CD F3 09               CALL   printStr   
26F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2704   E1                     POP   hl   
2705   E5                     PUSH   hl   
2706   CD 41 09               CALL   prtdec   
2709   E1                     POP   hl   
270A   CD F3 09               CALL   printStr   
270D   20 28 23 00            .CSTR   " (#"   
2711   CD 89 09               CALL   prthex   
2714   CD F3 09               CALL   printStr   
2717   29 0D 0A 00            .CSTR   ")\r\n"   
271B   76                     HALT      
271C   00                     .CSTR      
271D                EXPECTM_0_2448S43:      
271D   E1                     POP   HL   
271E                          ;*Macro unroll:  test ":a -1%", $0001
271E   31 80 3B               LD   SP,STACK   
2721   CD FA 09               CALL   init   
2724   CD 9E 3A               CALL   execStr   
2727   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
272E                          ;*Macro unroll:  expect ":a -1%",$0001
272E   E1                     POP   HL   
272F   E5                     PUSH   HL   
2730   11 01 00               LD   DE,$0001   
2733   B7                     OR   A   
2734   ED 52                  SBC   HL,DE   
2736   7D                     LD   A,L   
2737   B4                     OR   H   
2738   28 51                  JR   Z,expectM_0_2449S43   
273A   CD F3 09               CALL   printStr   
273D   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
274A   CD F3 09               CALL   printStr   
274D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
275C   21 01 00               LD   HL,$0001   
275F   CD 41 09               CALL   prtdec   
2762   CD F3 09               CALL   printStr   
2765   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2772   E1                     POP   hl   
2773   E5                     PUSH   hl   
2774   CD 41 09               CALL   prtdec   
2777   E1                     POP   hl   
2778   CD F3 09               CALL   printStr   
277B   20 28 23 00            .CSTR   " (#"   
277F   CD 89 09               CALL   prthex   
2782   CD F3 09               CALL   printStr   
2785   29 0D 0A 00            .CSTR   ")\r\n"   
2789   76                     HALT      
278A   00                     .CSTR      
278B                EXPECTM_0_2449S43:      
278B   E1                     POP   HL   
278C                          ;*Macro unroll:  test ":a: -1%", $0001
278C   31 80 3B               LD   SP,STACK   
278F   CD FA 09               CALL   init   
2792   CD 9E 3A               CALL   execStr   
2795   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
279D                          ;*Macro unroll:  expect ":a: -1%",$0001
279D   E1                     POP   HL   
279E   E5                     PUSH   HL   
279F   11 01 00               LD   DE,$0001   
27A2   B7                     OR   A   
27A3   ED 52                  SBC   HL,DE   
27A5   7D                     LD   A,L   
27A6   B4                     OR   H   
27A7   28 52                  JR   Z,expectM_0_2450S43   
27A9   CD F3 09               CALL   printStr   
27AC   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
27BA   CD F3 09               CALL   printStr   
27BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27CC   21 01 00               LD   HL,$0001   
27CF   CD 41 09               CALL   prtdec   
27D2   CD F3 09               CALL   printStr   
27D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E2   E1                     POP   hl   
27E3   E5                     PUSH   hl   
27E4   CD 41 09               CALL   prtdec   
27E7   E1                     POP   hl   
27E8   CD F3 09               CALL   printStr   
27EB   20 28 23 00            .CSTR   " (#"   
27EF   CD 89 09               CALL   prthex   
27F2   CD F3 09               CALL   printStr   
27F5   29 0D 0A 00            .CSTR   ")\r\n"   
27F9   76                     HALT      
27FA   00                     .CSTR      
27FB                EXPECTM_0_2450S43:      
27FB   E1                     POP   HL   
27FC                          ;*Macro unroll:  test ":a:b -1%", $0102
27FC   31 80 3B               LD   SP,STACK   
27FF   CD FA 09               CALL   init   
2802   CD 9E 3A               CALL   execStr   
2805   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
280E                          ;*Macro unroll:  expect ":a:b -1%",$0102
280E   E1                     POP   HL   
280F   E5                     PUSH   HL   
2810   11 02 01               LD   DE,$0102   
2813   B7                     OR   A   
2814   ED 52                  SBC   HL,DE   
2816   7D                     LD   A,L   
2817   B4                     OR   H   
2818   28 53                  JR   Z,expectM_0_2451S43   
281A   CD F3 09               CALL   printStr   
281D   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
282C   CD F3 09               CALL   printStr   
282F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
283E   21 02 01               LD   HL,$0102   
2841   CD 41 09               CALL   prtdec   
2844   CD F3 09               CALL   printStr   
2847   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2854   E1                     POP   hl   
2855   E5                     PUSH   hl   
2856   CD 41 09               CALL   prtdec   
2859   E1                     POP   hl   
285A   CD F3 09               CALL   printStr   
285D   20 28 23 00            .CSTR   " (#"   
2861   CD 89 09               CALL   prthex   
2864   CD F3 09               CALL   printStr   
2867   29 0D 0A 00            .CSTR   ")\r\n"   
286B   76                     HALT      
286C   00                     .CSTR      
286D                EXPECTM_0_2451S43:      
286D   E1                     POP   HL   
286E                          ;*Macro unroll:  test "::b -1%", $0101
286E   31 80 3B               LD   SP,STACK   
2871   CD FA 09               CALL   init   
2874   CD 9E 3A               CALL   execStr   
2877   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
287F                          ;*Macro unroll:  expect "::b -1%",$0101
287F   E1                     POP   HL   
2880   E5                     PUSH   HL   
2881   11 01 01               LD   DE,$0101   
2884   B7                     OR   A   
2885   ED 52                  SBC   HL,DE   
2887   7D                     LD   A,L   
2888   B4                     OR   H   
2889   28 52                  JR   Z,expectM_0_2452S43   
288B   CD F3 09               CALL   printStr   
288E   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
289C   CD F3 09               CALL   printStr   
289F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28AE   21 01 01               LD   HL,$0101   
28B1   CD 41 09               CALL   prtdec   
28B4   CD F3 09               CALL   printStr   
28B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28C4   E1                     POP   hl   
28C5   E5                     PUSH   hl   
28C6   CD 41 09               CALL   prtdec   
28C9   E1                     POP   hl   
28CA   CD F3 09               CALL   printStr   
28CD   20 28 23 00            .CSTR   " (#"   
28D1   CD 89 09               CALL   prthex   
28D4   CD F3 09               CALL   printStr   
28D7   29 0D 0A 00            .CSTR   ")\r\n"   
28DB   76                     HALT      
28DC   00                     .CSTR      
28DD                EXPECTM_0_2452S43:      
28DD   E1                     POP   HL   
28DE                          ;*Macro unroll:  test ":{2};^", 2
28DE   31 80 3B               LD   SP,STACK   
28E1   CD FA 09               CALL   init   
28E4   CD 9E 3A               CALL   execStr   
28E7   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
28EE                          ;*Macro unroll:  expect ":{2};^",2
28EE   E1                     POP   HL   
28EF   E5                     PUSH   HL   
28F0   11 02 00               LD   DE,2   
28F3   B7                     OR   A   
28F4   ED 52                  SBC   HL,DE   
28F6   7D                     LD   A,L   
28F7   B4                     OR   H   
28F8   28 51                  JR   Z,expectM_0_2453S43   
28FA   CD F3 09               CALL   printStr   
28FD   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
290A   CD F3 09               CALL   printStr   
290D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
291C   21 02 00               LD   HL,2   
291F   CD 41 09               CALL   prtdec   
2922   CD F3 09               CALL   printStr   
2925   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2932   E1                     POP   hl   
2933   E5                     PUSH   hl   
2934   CD 41 09               CALL   prtdec   
2937   E1                     POP   hl   
2938   CD F3 09               CALL   printStr   
293B   20 28 23 00            .CSTR   " (#"   
293F   CD 89 09               CALL   prthex   
2942   CD F3 09               CALL   printStr   
2945   29 0D 0A 00            .CSTR   ")\r\n"   
2949   76                     HALT      
294A   00                     .CSTR      
294B                EXPECTM_0_2453S43:      
294B   E1                     POP   HL   
294C                          ;*Macro unroll:  test ":a{2};^", 2
294C   31 80 3B               LD   SP,STACK   
294F   CD FA 09               CALL   init   
2952   CD 9E 3A               CALL   execStr   
2955   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
295D                          ;*Macro unroll:  expect ":a{2};^",2
295D   E1                     POP   HL   
295E   E5                     PUSH   HL   
295F   11 02 00               LD   DE,2   
2962   B7                     OR   A   
2963   ED 52                  SBC   HL,DE   
2965   7D                     LD   A,L   
2966   B4                     OR   H   
2967   28 52                  JR   Z,expectM_0_2454S43   
2969   CD F3 09               CALL   printStr   
296C   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
297A   CD F3 09               CALL   printStr   
297D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
298C   21 02 00               LD   HL,2   
298F   CD 41 09               CALL   prtdec   
2992   CD F3 09               CALL   printStr   
2995   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29A2   E1                     POP   hl   
29A3   E5                     PUSH   hl   
29A4   CD 41 09               CALL   prtdec   
29A7   E1                     POP   hl   
29A8   CD F3 09               CALL   printStr   
29AB   20 28 23 00            .CSTR   " (#"   
29AF   CD 89 09               CALL   prthex   
29B2   CD F3 09               CALL   printStr   
29B5   29 0D 0A 00            .CSTR   ")\r\n"   
29B9   76                     HALT      
29BA   00                     .CSTR      
29BB                EXPECTM_0_2454S43:      
29BB   E1                     POP   HL   
29BC                          ;*Macro unroll:  test "5 :a{$a};^", 5
29BC   31 80 3B               LD   SP,STACK   
29BF   CD FA 09               CALL   init   
29C2   CD 9E 3A               CALL   execStr   
29C5   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
29D0                          ;*Macro unroll:  expect "5 :a{$a};^",5
29D0   E1                     POP   HL   
29D1   E5                     PUSH   HL   
29D2   11 05 00               LD   DE,5   
29D5   B7                     OR   A   
29D6   ED 52                  SBC   HL,DE   
29D8   7D                     LD   A,L   
29D9   B4                     OR   H   
29DA   28 55                  JR   Z,expectM_0_2455S43   
29DC   CD F3 09               CALL   printStr   
29DF   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
29F0   CD F3 09               CALL   printStr   
29F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A02   21 05 00               LD   HL,5   
2A05   CD 41 09               CALL   prtdec   
2A08   CD F3 09               CALL   printStr   
2A0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A18   E1                     POP   hl   
2A19   E5                     PUSH   hl   
2A1A   CD 41 09               CALL   prtdec   
2A1D   E1                     POP   hl   
2A1E   CD F3 09               CALL   printStr   
2A21   20 28 23 00            .CSTR   " (#"   
2A25   CD 89 09               CALL   prthex   
2A28   CD F3 09               CALL   printStr   
2A2B   29 0D 0A 00            .CSTR   ")\r\n"   
2A2F   76                     HALT      
2A30   00                     .CSTR      
2A31                EXPECTM_0_2455S43:      
2A31   E1                     POP   HL   
2A32                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2A32   31 80 3B               LD   SP,STACK   
2A35   CD FA 09               CALL   init   
2A38   CD 9E 3A               CALL   execStr   
2A3B   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2A48                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2A48   E1                     POP   HL   
2A49   E5                     PUSH   HL   
2A4A   11 05 00               LD   DE,5   
2A4D   B7                     OR   A   
2A4E   ED 52                  SBC   HL,DE   
2A50   7D                     LD   A,L   
2A51   B4                     OR   H   
2A52   28 57                  JR   Z,expectM_0_2456S43   
2A54   CD F3 09               CALL   printStr   
2A57   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2A6A   CD F3 09               CALL   printStr   
2A6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A7C   21 05 00               LD   HL,5   
2A7F   CD 41 09               CALL   prtdec   
2A82   CD F3 09               CALL   printStr   
2A85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A92   E1                     POP   hl   
2A93   E5                     PUSH   hl   
2A94   CD 41 09               CALL   prtdec   
2A97   E1                     POP   hl   
2A98   CD F3 09               CALL   printStr   
2A9B   20 28 23 00            .CSTR   " (#"   
2A9F   CD 89 09               CALL   prthex   
2AA2   CD F3 09               CALL   printStr   
2AA5   29 0D 0A 00            .CSTR   ")\r\n"   
2AA9   76                     HALT      
2AAA   00                     .CSTR      
2AAB                EXPECTM_0_2456S43:      
2AAB   E1                     POP   HL   
2AAC                          ;*Macro unroll:  test ":a{{2}^};^", 2
2AAC   31 80 3B               LD   SP,STACK   
2AAF   CD FA 09               CALL   init   
2AB2   CD 9E 3A               CALL   execStr   
2AB5   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2AC0                          ;*Macro unroll:  expect ":a{{2}^};^",2
2AC0   E1                     POP   HL   
2AC1   E5                     PUSH   HL   
2AC2   11 02 00               LD   DE,2   
2AC5   B7                     OR   A   
2AC6   ED 52                  SBC   HL,DE   
2AC8   7D                     LD   A,L   
2AC9   B4                     OR   H   
2ACA   28 55                  JR   Z,expectM_0_2457S43   
2ACC   CD F3 09               CALL   printStr   
2ACF   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2AE0   CD F3 09               CALL   printStr   
2AE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF2   21 02 00               LD   HL,2   
2AF5   CD 41 09               CALL   prtdec   
2AF8   CD F3 09               CALL   printStr   
2AFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B08   E1                     POP   hl   
2B09   E5                     PUSH   hl   
2B0A   CD 41 09               CALL   prtdec   
2B0D   E1                     POP   hl   
2B0E   CD F3 09               CALL   printStr   
2B11   20 28 23 00            .CSTR   " (#"   
2B15   CD 89 09               CALL   prthex   
2B18   CD F3 09               CALL   printStr   
2B1B   29 0D 0A 00            .CSTR   ")\r\n"   
2B1F   76                     HALT      
2B20   00                     .CSTR      
2B21                EXPECTM_0_2457S43:      
2B21   E1                     POP   HL   
2B22                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2B22   31 80 3B               LD   SP,STACK   
2B25   CD FA 09               CALL   init   
2B28   CD 9E 3A               CALL   execStr   
2B2B   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2B3B                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2B3B   E1                     POP   HL   
2B3C   E5                     PUSH   HL   
2B3D   11 05 00               LD   DE,5   
2B40   B7                     OR   A   
2B41   ED 52                  SBC   HL,DE   
2B43   7D                     LD   A,L   
2B44   B4                     OR   H   
2B45   28 5A                  JR   Z,expectM_0_2458S43   
2B47   CD F3 09               CALL   printStr   
2B4A   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2B60   CD F3 09               CALL   printStr   
2B63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B72   21 05 00               LD   HL,5   
2B75   CD 41 09               CALL   prtdec   
2B78   CD F3 09               CALL   printStr   
2B7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B88   E1                     POP   hl   
2B89   E5                     PUSH   hl   
2B8A   CD 41 09               CALL   prtdec   
2B8D   E1                     POP   hl   
2B8E   CD F3 09               CALL   printStr   
2B91   20 28 23 00            .CSTR   " (#"   
2B95   CD 89 09               CALL   prthex   
2B98   CD F3 09               CALL   printStr   
2B9B   29 0D 0A 00            .CSTR   ")\r\n"   
2B9F   76                     HALT      
2BA0   00                     .CSTR      
2BA1                EXPECTM_0_2458S43:      
2BA1   E1                     POP   HL   
2BA2                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2BA2   31 80 3B               LD   SP,STACK   
2BA5   CD FA 09               CALL   init   
2BA8   CD 9E 3A               CALL   execStr   
2BAB   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2BBC                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2BBC   E1                     POP   HL   
2BBD   E5                     PUSH   HL   
2BBE   11 01 00               LD   DE,1   
2BC1   B7                     OR   A   
2BC2   ED 52                  SBC   HL,DE   
2BC4   7D                     LD   A,L   
2BC5   B4                     OR   H   
2BC6   28 5B                  JR   Z,expectM_0_2459S43   
2BC8   CD F3 09               CALL   printStr   
2BCB   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2BE2   CD F3 09               CALL   printStr   
2BE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BF4   21 01 00               LD   HL,1   
2BF7   CD 41 09               CALL   prtdec   
2BFA   CD F3 09               CALL   printStr   
2BFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C0A   E1                     POP   hl   
2C0B   E5                     PUSH   hl   
2C0C   CD 41 09               CALL   prtdec   
2C0F   E1                     POP   hl   
2C10   CD F3 09               CALL   printStr   
2C13   20 28 23 00            .CSTR   " (#"   
2C17   CD 89 09               CALL   prthex   
2C1A   CD F3 09               CALL   printStr   
2C1D   29 0D 0A 00            .CSTR   ")\r\n"   
2C21   76                     HALT      
2C22   00                     .CSTR      
2C23                EXPECTM_0_2459S43:      
2C23   E1                     POP   HL   
2C24                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2C24   31 80 3B               LD   SP,STACK   
2C27   CD FA 09               CALL   init   
2C2A   CD 9E 3A               CALL   execStr   
2C2D   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2C41                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2C41   E1                     POP   HL   
2C42   E5                     PUSH   HL   
2C43   11 07 00               LD   DE,7   
2C46   B7                     OR   A   
2C47   ED 52                  SBC   HL,DE   
2C49   7D                     LD   A,L   
2C4A   B4                     OR   H   
2C4B   28 5E                  JR   Z,expectM_0_2460S43   
2C4D   CD F3 09               CALL   printStr   
2C50   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2C6A   CD F3 09               CALL   printStr   
2C6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C7C   21 07 00               LD   HL,7   
2C7F   CD 41 09               CALL   prtdec   
2C82   CD F3 09               CALL   printStr   
2C85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C92   E1                     POP   hl   
2C93   E5                     PUSH   hl   
2C94   CD 41 09               CALL   prtdec   
2C97   E1                     POP   hl   
2C98   CD F3 09               CALL   printStr   
2C9B   20 28 23 00            .CSTR   " (#"   
2C9F   CD 89 09               CALL   prthex   
2CA2   CD F3 09               CALL   printStr   
2CA5   29 0D 0A 00            .CSTR   ")\r\n"   
2CA9   76                     HALT      
2CAA   00                     .CSTR      
2CAB                EXPECTM_0_2460S43:      
2CAB   E1                     POP   HL   
2CAC                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2CAC   31 80 3B               LD   SP,STACK   
2CAF   CD FA 09               CALL   init   
2CB2   CD 9E 3A               CALL   execStr   
2CB5   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2CCB                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2CCB   E1                     POP   HL   
2CCC   E5                     PUSH   HL   
2CCD   11 06 00               LD   DE,6   
2CD0   B7                     OR   A   
2CD1   ED 52                  SBC   HL,DE   
2CD3   7D                     LD   A,L   
2CD4   B4                     OR   H   
2CD5   28 60                  JR   Z,expectM_0_2461S43   
2CD7   CD F3 09               CALL   printStr   
2CDA   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2CF6   CD F3 09               CALL   printStr   
2CF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D08   21 06 00               LD   HL,6   
2D0B   CD 41 09               CALL   prtdec   
2D0E   CD F3 09               CALL   printStr   
2D11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D1E   E1                     POP   hl   
2D1F   E5                     PUSH   hl   
2D20   CD 41 09               CALL   prtdec   
2D23   E1                     POP   hl   
2D24   CD F3 09               CALL   printStr   
2D27   20 28 23 00            .CSTR   " (#"   
2D2B   CD 89 09               CALL   prthex   
2D2E   CD F3 09               CALL   printStr   
2D31   29 0D 0A 00            .CSTR   ")\r\n"   
2D35   76                     HALT      
2D36   00                     .CSTR      
2D37                EXPECTM_0_2461S43:      
2D37   E1                     POP   HL   
2D38                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2D38   31 80 3B               LD   SP,STACK   
2D3B   CD FA 09               CALL   init   
2D3E   CD 9E 3A               CALL   execStr   
2D41   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2D50                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2D50   E1                     POP   HL   
2D51   E5                     PUSH   HL   
2D52   11 02 00               LD   DE,2   
2D55   B7                     OR   A   
2D56   ED 52                  SBC   HL,DE   
2D58   7D                     LD   A,L   
2D59   B4                     OR   H   
2D5A   28 59                  JR   Z,expectM_0_2462S43   
2D5C   CD F3 09               CALL   printStr   
2D5F   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2D74   CD F3 09               CALL   printStr   
2D77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D86   21 02 00               LD   HL,2   
2D89   CD 41 09               CALL   prtdec   
2D8C   CD F3 09               CALL   printStr   
2D8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9C   E1                     POP   hl   
2D9D   E5                     PUSH   hl   
2D9E   CD 41 09               CALL   prtdec   
2DA1   E1                     POP   hl   
2DA2   CD F3 09               CALL   printStr   
2DA5   20 28 23 00            .CSTR   " (#"   
2DA9   CD 89 09               CALL   prthex   
2DAC   CD F3 09               CALL   printStr   
2DAF   29 0D 0A 00            .CSTR   ")\r\n"   
2DB3   76                     HALT      
2DB4   00                     .CSTR      
2DB5                EXPECTM_0_2462S43:      
2DB5   E1                     POP   HL   
2DB6                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2DB6   31 80 3B               LD   SP,STACK   
2DB9   CD FA 09               CALL   init   
2DBC   CD 9E 3A               CALL   execStr   
2DBF   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2DD1                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2DD1   E1                     POP   HL   
2DD2   E5                     PUSH   HL   
2DD3   11 01 00               LD   DE,1   
2DD6   B7                     OR   A   
2DD7   ED 52                  SBC   HL,DE   
2DD9   7D                     LD   A,L   
2DDA   B4                     OR   H   
2DDB   28 5C                  JR   Z,expectM_0_2463S43   
2DDD   CD F3 09               CALL   printStr   
2DE0   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2DF8   CD F3 09               CALL   printStr   
2DFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E0A   21 01 00               LD   HL,1   
2E0D   CD 41 09               CALL   prtdec   
2E10   CD F3 09               CALL   printStr   
2E13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E20   E1                     POP   hl   
2E21   E5                     PUSH   hl   
2E22   CD 41 09               CALL   prtdec   
2E25   E1                     POP   hl   
2E26   CD F3 09               CALL   printStr   
2E29   20 28 23 00            .CSTR   " (#"   
2E2D   CD 89 09               CALL   prthex   
2E30   CD F3 09               CALL   printStr   
2E33   29 0D 0A 00            .CSTR   ")\r\n"   
2E37   76                     HALT      
2E38   00                     .CSTR      
2E39                EXPECTM_0_2463S43:      
2E39   E1                     POP   HL   
2E3A                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2E3A   31 80 3B               LD   SP,STACK   
2E3D   CD FA 09               CALL   init   
2E40   CD 9E 3A               CALL   execStr   
2E43   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2E56                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2E56   E1                     POP   HL   
2E57   E5                     PUSH   HL   
2E58   11 02 00               LD   DE,2   
2E5B   B7                     OR   A   
2E5C   ED 52                  SBC   HL,DE   
2E5E   7D                     LD   A,L   
2E5F   B4                     OR   H   
2E60   28 5D                  JR   Z,expectM_0_2464S43   
2E62   CD F3 09               CALL   printStr   
2E65   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2E7E   CD F3 09               CALL   printStr   
2E81   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E90   21 02 00               LD   HL,2   
2E93   CD 41 09               CALL   prtdec   
2E96   CD F3 09               CALL   printStr   
2E99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EA6   E1                     POP   hl   
2EA7   E5                     PUSH   hl   
2EA8   CD 41 09               CALL   prtdec   
2EAB   E1                     POP   hl   
2EAC   CD F3 09               CALL   printStr   
2EAF   20 28 23 00            .CSTR   " (#"   
2EB3   CD 89 09               CALL   prthex   
2EB6   CD F3 09               CALL   printStr   
2EB9   29 0D 0A 00            .CSTR   ")\r\n"   
2EBD   76                     HALT      
2EBE   00                     .CSTR      
2EBF                EXPECTM_0_2464S43:      
2EBF   E1                     POP   HL   
2EC0                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
2EC0   31 80 3B               LD   SP,STACK   
2EC3   CD FA 09               CALL   init   
2EC6   CD 9E 3A               CALL   execStr   
2EC9   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
2EDD                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
2EDD   E1                     POP   HL   
2EDE   E5                     PUSH   HL   
2EDF   11 02 00               LD   DE,2   
2EE2   B7                     OR   A   
2EE3   ED 52                  SBC   HL,DE   
2EE5   7D                     LD   A,L   
2EE6   B4                     OR   H   
2EE7   28 5E                  JR   Z,expectM_0_2465S43   
2EE9   CD F3 09               CALL   printStr   
2EEC   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
2F06   CD F3 09               CALL   printStr   
2F09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F18   21 02 00               LD   HL,2   
2F1B   CD 41 09               CALL   prtdec   
2F1E   CD F3 09               CALL   printStr   
2F21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F2E   E1                     POP   hl   
2F2F   E5                     PUSH   hl   
2F30   CD 41 09               CALL   prtdec   
2F33   E1                     POP   hl   
2F34   CD F3 09               CALL   printStr   
2F37   20 28 23 00            .CSTR   " (#"   
2F3B   CD 89 09               CALL   prthex   
2F3E   CD F3 09               CALL   printStr   
2F41   29 0D 0A 00            .CSTR   ")\r\n"   
2F45   76                     HALT      
2F46   00                     .CSTR      
2F47                EXPECTM_0_2465S43:      
2F47   E1                     POP   HL   
2F48                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2F48   31 80 3B               LD   SP,STACK   
2F4B   CD FA 09               CALL   init   
2F4E   CD 9E 3A               CALL   execStr   
2F51   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2F64                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2F64   E1                     POP   HL   
2F65   E5                     PUSH   HL   
2F66   11 02 00               LD   DE,2   
2F69   B7                     OR   A   
2F6A   ED 52                  SBC   HL,DE   
2F6C   7D                     LD   A,L   
2F6D   B4                     OR   H   
2F6E   28 5D                  JR   Z,expectM_0_2466S43   
2F70   CD F3 09               CALL   printStr   
2F73   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2F8C   CD F3 09               CALL   printStr   
2F8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F9E   21 02 00               LD   HL,2   
2FA1   CD 41 09               CALL   prtdec   
2FA4   CD F3 09               CALL   printStr   
2FA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FB4   E1                     POP   hl   
2FB5   E5                     PUSH   hl   
2FB6   CD 41 09               CALL   prtdec   
2FB9   E1                     POP   hl   
2FBA   CD F3 09               CALL   printStr   
2FBD   20 28 23 00            .CSTR   " (#"   
2FC1   CD 89 09               CALL   prthex   
2FC4   CD F3 09               CALL   printStr   
2FC7   29 0D 0A 00            .CSTR   ")\r\n"   
2FCB   76                     HALT      
2FCC   00                     .CSTR      
2FCD                EXPECTM_0_2466S43:      
2FCD   E1                     POP   HL   
2FCE                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
2FCE   31 80 3B               LD   SP,STACK   
2FD1   CD FA 09               CALL   init   
2FD4   CD 9E 3A               CALL   execStr   
2FD7   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
2FF1                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
2FF1   E1                     POP   HL   
2FF2   E5                     PUSH   HL   
2FF3   11 05 00               LD   DE,5   
2FF6   B7                     OR   A   
2FF7   ED 52                  SBC   HL,DE   
2FF9   7D                     LD   A,L   
2FFA   B4                     OR   H   
2FFB   28 64                  JR   Z,expectM_0_2467S43   
2FFD   CD F3 09               CALL   printStr   
3000   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
3020   CD F3 09               CALL   printStr   
3023   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3032   21 05 00               LD   HL,5   
3035   CD 41 09               CALL   prtdec   
3038   CD F3 09               CALL   printStr   
303B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3048   E1                     POP   hl   
3049   E5                     PUSH   hl   
304A   CD 41 09               CALL   prtdec   
304D   E1                     POP   hl   
304E   CD F3 09               CALL   printStr   
3051   20 28 23 00            .CSTR   " (#"   
3055   CD 89 09               CALL   prthex   
3058   CD F3 09               CALL   printStr   
305B   29 0D 0A 00            .CSTR   ")\r\n"   
305F   76                     HALT      
3060   00                     .CSTR      
3061                EXPECTM_0_2467S43:      
3061   E1                     POP   HL   
3062                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3062   31 80 3B               LD   SP,STACK   
3065   CD FA 09               CALL   init   
3068   CD 9E 3A               CALL   execStr   
306B   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
307C                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
307C   E1                     POP   HL   
307D   E5                     PUSH   HL   
307E   11 02 00               LD   DE,2   
3081   B7                     OR   A   
3082   ED 52                  SBC   HL,DE   
3084   7D                     LD   A,L   
3085   B4                     OR   H   
3086   28 5B                  JR   Z,expectM_0_2468S43   
3088   CD F3 09               CALL   printStr   
308B   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
30A2   CD F3 09               CALL   printStr   
30A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30B4   21 02 00               LD   HL,2   
30B7   CD 41 09               CALL   prtdec   
30BA   CD F3 09               CALL   printStr   
30BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30CA   E1                     POP   hl   
30CB   E5                     PUSH   hl   
30CC   CD 41 09               CALL   prtdec   
30CF   E1                     POP   hl   
30D0   CD F3 09               CALL   printStr   
30D3   20 28 23 00            .CSTR   " (#"   
30D7   CD 89 09               CALL   prthex   
30DA   CD F3 09               CALL   printStr   
30DD   29 0D 0A 00            .CSTR   ")\r\n"   
30E1   76                     HALT      
30E2   00                     .CSTR      
30E3                EXPECTM_0_2468S43:      
30E3   E1                     POP   HL   
30E4                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
30E4   31 80 3B               LD   SP,STACK   
30E7   CD FA 09               CALL   init   
30EA   CD 9E 3A               CALL   execStr   
30ED   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
3104                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
3104   E1                     POP   HL   
3105   E5                     PUSH   HL   
3106   11 64 00               LD   DE,100   
3109   B7                     OR   A   
310A   ED 52                  SBC   HL,DE   
310C   7D                     LD   A,L   
310D   B4                     OR   H   
310E   28 61                  JR   Z,expectM_0_2469S43   
3110   CD F3 09               CALL   printStr   
3113   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
3130   CD F3 09               CALL   printStr   
3133   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3142   21 64 00               LD   HL,100   
3145   CD 41 09               CALL   prtdec   
3148   CD F3 09               CALL   printStr   
314B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3158   E1                     POP   hl   
3159   E5                     PUSH   hl   
315A   CD 41 09               CALL   prtdec   
315D   E1                     POP   hl   
315E   CD F3 09               CALL   printStr   
3161   20 28 23 00            .CSTR   " (#"   
3165   CD 89 09               CALL   prthex   
3168   CD F3 09               CALL   printStr   
316B   29 0D 0A 00            .CSTR   ")\r\n"   
316F   76                     HALT      
3170   00                     .CSTR      
3171                EXPECTM_0_2469S43:      
3171   E1                     POP   HL   
3172                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
3172   31 80 3B               LD   SP,STACK   
3175   CD FA 09               CALL   init   
3178   CD 9E 3A               CALL   execStr   
317B   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
3193                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
3193   E1                     POP   HL   
3194   E5                     PUSH   HL   
3195   11 01 00               LD   DE,1   
3198   B7                     OR   A   
3199   ED 52                  SBC   HL,DE   
319B   7D                     LD   A,L   
319C   B4                     OR   H   
319D   28 62                  JR   Z,expectM_0_2470S43   
319F   CD F3 09               CALL   printStr   
31A2   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
31C0   CD F3 09               CALL   printStr   
31C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31D2   21 01 00               LD   HL,1   
31D5   CD 41 09               CALL   prtdec   
31D8   CD F3 09               CALL   printStr   
31DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31E8   E1                     POP   hl   
31E9   E5                     PUSH   hl   
31EA   CD 41 09               CALL   prtdec   
31ED   E1                     POP   hl   
31EE   CD F3 09               CALL   printStr   
31F1   20 28 23 00            .CSTR   " (#"   
31F5   CD 89 09               CALL   prthex   
31F8   CD F3 09               CALL   printStr   
31FB   29 0D 0A 00            .CSTR   ")\r\n"   
31FF   76                     HALT      
3200   00                     .CSTR      
3201                EXPECTM_0_2470S43:      
3201   E1                     POP   HL   
3202                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
3202   31 80 3B               LD   SP,STACK   
3205   CD FA 09               CALL   init   
3208   CD 9E 3A               CALL   execStr   
320B   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
3224                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
3224   E1                     POP   HL   
3225   E5                     PUSH   HL   
3226   11 02 00               LD   DE,2   
3229   B7                     OR   A   
322A   ED 52                  SBC   HL,DE   
322C   7D                     LD   A,L   
322D   B4                     OR   H   
322E   28 63                  JR   Z,expectM_0_2471S43   
3230   CD F3 09               CALL   printStr   
3233   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3252   CD F3 09               CALL   printStr   
3255   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3264   21 02 00               LD   HL,2   
3267   CD 41 09               CALL   prtdec   
326A   CD F3 09               CALL   printStr   
326D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
327A   E1                     POP   hl   
327B   E5                     PUSH   hl   
327C   CD 41 09               CALL   prtdec   
327F   E1                     POP   hl   
3280   CD F3 09               CALL   printStr   
3283   20 28 23 00            .CSTR   " (#"   
3287   CD 89 09               CALL   prthex   
328A   CD F3 09               CALL   printStr   
328D   29 0D 0A 00            .CSTR   ")\r\n"   
3291   76                     HALT      
3292   00                     .CSTR      
3293                EXPECTM_0_2471S43:      
3293   E1                     POP   HL   
3294                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
3294   31 80 3B               LD   SP,STACK   
3297   CD FA 09               CALL   init   
329A   CD 9E 3A               CALL   execStr   
329D   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
32BC                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
32BC   E1                     POP   HL   
32BD   E5                     PUSH   HL   
32BE   11 0B 00               LD   DE,11   
32C1   B7                     OR   A   
32C2   ED 52                  SBC   HL,DE   
32C4   7D                     LD   A,L   
32C5   B4                     OR   H   
32C6   28 69                  JR   Z,expectM_0_2472S43   
32C8   CD F3 09               CALL   printStr   
32CB   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
32F0   CD F3 09               CALL   printStr   
32F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3302   21 0B 00               LD   HL,11   
3305   CD 41 09               CALL   prtdec   
3308   CD F3 09               CALL   printStr   
330B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3318   E1                     POP   hl   
3319   E5                     PUSH   hl   
331A   CD 41 09               CALL   prtdec   
331D   E1                     POP   hl   
331E   CD F3 09               CALL   printStr   
3321   20 28 23 00            .CSTR   " (#"   
3325   CD 89 09               CALL   prthex   
3328   CD F3 09               CALL   printStr   
332B   29 0D 0A 00            .CSTR   ")\r\n"   
332F   76                     HALT      
3330   00                     .CSTR      
3331                EXPECTM_0_2472S43:      
3331   E1                     POP   HL   
3332                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3332   31 80 3B               LD   SP,STACK   
3335   CD FA 09               CALL   init   
3338   CD 9E 3A               CALL   execStr   
333B   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
335A                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
335A   E1                     POP   HL   
335B   E5                     PUSH   HL   
335C   11 15 00               LD   DE,21   
335F   B7                     OR   A   
3360   ED 52                  SBC   HL,DE   
3362   7D                     LD   A,L   
3363   B4                     OR   H   
3364   28 69                  JR   Z,expectM_0_2473S43   
3366   CD F3 09               CALL   printStr   
3369   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
338E   CD F3 09               CALL   printStr   
3391   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33A0   21 15 00               LD   HL,21   
33A3   CD 41 09               CALL   prtdec   
33A6   CD F3 09               CALL   printStr   
33A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33B6   E1                     POP   hl   
33B7   E5                     PUSH   hl   
33B8   CD 41 09               CALL   prtdec   
33BB   E1                     POP   hl   
33BC   CD F3 09               CALL   printStr   
33BF   20 28 23 00            .CSTR   " (#"   
33C3   CD 89 09               CALL   prthex   
33C6   CD F3 09               CALL   printStr   
33C9   29 0D 0A 00            .CSTR   ")\r\n"   
33CD   76                     HALT      
33CE   00                     .CSTR      
33CF                EXPECTM_0_2473S43:      
33CF   E1                     POP   HL   
33D0                          ;*Macro unroll:  test "[10 20 30] 1%", 20
33D0   31 80 3B               LD   SP,STACK   
33D3   CD FA 09               CALL   init   
33D6   CD 9E 3A               CALL   execStr   
33D9   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
33E7                          ;*Macro unroll:  expect "[10 20 30] 1%",20
33E7   E1                     POP   HL   
33E8   E5                     PUSH   HL   
33E9   11 14 00               LD   DE,20   
33EC   B7                     OR   A   
33ED   ED 52                  SBC   HL,DE   
33EF   7D                     LD   A,L   
33F0   B4                     OR   H   
33F1   28 58                  JR   Z,expectM_0_2474S43   
33F3   CD F3 09               CALL   printStr   
33F6   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
340A   CD F3 09               CALL   printStr   
340D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
341C   21 14 00               LD   HL,20   
341F   CD 41 09               CALL   prtdec   
3422   CD F3 09               CALL   printStr   
3425   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3432   E1                     POP   hl   
3433   E5                     PUSH   hl   
3434   CD 41 09               CALL   prtdec   
3437   E1                     POP   hl   
3438   CD F3 09               CALL   printStr   
343B   20 28 23 00            .CSTR   " (#"   
343F   CD 89 09               CALL   prthex   
3442   CD F3 09               CALL   printStr   
3445   29 0D 0A 00            .CSTR   ")\r\n"   
3449   76                     HALT      
344A   00                     .CSTR      
344B                EXPECTM_0_2474S43:      
344B   E1                     POP   HL   
344C                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
344C   31 80 3B               LD   SP,STACK   
344F   CD FA 09               CALL   init   
3452   CD 9E 3A               CALL   execStr   
3455   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3463                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3463   E1                     POP   HL   
3464   E5                     PUSH   HL   
3465   11 02 00               LD   DE,2   
3468   B7                     OR   A   
3469   ED 52                  SBC   HL,DE   
346B   7D                     LD   A,L   
346C   B4                     OR   H   
346D   28 58                  JR   Z,expectM_0_2475S43   
346F   CD F3 09               CALL   printStr   
3472   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3486   CD F3 09               CALL   printStr   
3489   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3498   21 02 00               LD   HL,2   
349B   CD 41 09               CALL   prtdec   
349E   CD F3 09               CALL   printStr   
34A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34AE   E1                     POP   hl   
34AF   E5                     PUSH   hl   
34B0   CD 41 09               CALL   prtdec   
34B3   E1                     POP   hl   
34B4   CD F3 09               CALL   printStr   
34B7   20 28 23 00            .CSTR   " (#"   
34BB   CD 89 09               CALL   prthex   
34BE   CD F3 09               CALL   printStr   
34C1   29 0D 0A 00            .CSTR   ")\r\n"   
34C5   76                     HALT      
34C6   00                     .CSTR      
34C7                EXPECTM_0_2475S43:      
34C7   E1                     POP   HL   
34C8                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
34C8   31 80 3B               LD   SP,STACK   
34CB   CD FA 09               CALL   init   
34CE   CD 9E 3A               CALL   execStr   
34D1   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
34E5                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
34E5   E1                     POP   HL   
34E6   E5                     PUSH   HL   
34E7   11 42 00               LD   DE,66   
34EA   B7                     OR   A   
34EB   ED 52                  SBC   HL,DE   
34ED   7D                     LD   A,L   
34EE   B4                     OR   H   
34EF   28 5E                  JR   Z,expectM_0_2476S43   
34F1   CD F3 09               CALL   printStr   
34F4   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
350E   CD F3 09               CALL   printStr   
3511   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3520   21 42 00               LD   HL,66   
3523   CD 41 09               CALL   prtdec   
3526   CD F3 09               CALL   printStr   
3529   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3536   E1                     POP   hl   
3537   E5                     PUSH   hl   
3538   CD 41 09               CALL   prtdec   
353B   E1                     POP   hl   
353C   CD F3 09               CALL   printStr   
353F   20 28 23 00            .CSTR   " (#"   
3543   CD 89 09               CALL   prthex   
3546   CD F3 09               CALL   printStr   
3549   29 0D 0A 00            .CSTR   ")\r\n"   
354D   76                     HALT      
354E   00                     .CSTR      
354F                EXPECTM_0_2476S43:      
354F   E1                     POP   HL   
3550                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3550   31 80 3B               LD   SP,STACK   
3553   CD FA 09               CALL   init   
3556   CD 9E 3A               CALL   execStr   
3559   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
356D                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
356D   E1                     POP   HL   
356E   E5                     PUSH   HL   
356F   11 0A 00               LD   DE,10   
3572   B7                     OR   A   
3573   ED 52                  SBC   HL,DE   
3575   7D                     LD   A,L   
3576   B4                     OR   H   
3577   28 5E                  JR   Z,expectM_0_2477S43   
3579   CD F3 09               CALL   printStr   
357C   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3596   CD F3 09               CALL   printStr   
3599   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35A8   21 0A 00               LD   HL,10   
35AB   CD 41 09               CALL   prtdec   
35AE   CD F3 09               CALL   printStr   
35B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35BE   E1                     POP   hl   
35BF   E5                     PUSH   hl   
35C0   CD 41 09               CALL   prtdec   
35C3   E1                     POP   hl   
35C4   CD F3 09               CALL   printStr   
35C7   20 28 23 00            .CSTR   " (#"   
35CB   CD 89 09               CALL   prthex   
35CE   CD F3 09               CALL   printStr   
35D1   29 0D 0A 00            .CSTR   ")\r\n"   
35D5   76                     HALT      
35D6   00                     .CSTR      
35D7                EXPECTM_0_2477S43:      
35D7   E1                     POP   HL   
35D8                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
35D8   31 80 3B               LD   SP,STACK   
35DB   CD FA 09               CALL   init   
35DE   CD 9E 3A               CALL   execStr   
35E1   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
35FD                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
35FD   E1                     POP   HL   
35FE   E5                     PUSH   HL   
35FF   11 0A 00               LD   DE,10   
3602   B7                     OR   A   
3603   ED 52                  SBC   HL,DE   
3605   7D                     LD   A,L   
3606   B4                     OR   H   
3607   28 66                  JR   Z,expectM_0_2478S43   
3609   CD F3 09               CALL   printStr   
360C   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
362E   CD F3 09               CALL   printStr   
3631   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3640   21 0A 00               LD   HL,10   
3643   CD 41 09               CALL   prtdec   
3646   CD F3 09               CALL   printStr   
3649   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3656   E1                     POP   hl   
3657   E5                     PUSH   hl   
3658   CD 41 09               CALL   prtdec   
365B   E1                     POP   hl   
365C   CD F3 09               CALL   printStr   
365F   20 28 23 00            .CSTR   " (#"   
3663   CD 89 09               CALL   prthex   
3666   CD F3 09               CALL   printStr   
3669   29 0D 0A 00            .CSTR   ")\r\n"   
366D   76                     HALT      
366E   00                     .CSTR      
366F                EXPECTM_0_2478S43:      
366F   E1                     POP   HL   
3670                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3670   31 80 3B               LD   SP,STACK   
3673   CD FA 09               CALL   init   
3676   CD 9E 3A               CALL   execStr   
3679   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3699                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3699   E1                     POP   HL   
369A   E5                     PUSH   HL   
369B   11 0A 00               LD   DE,10   
369E   B7                     OR   A   
369F   ED 52                  SBC   HL,DE   
36A1   7D                     LD   A,L   
36A2   B4                     OR   H   
36A3   28 6A                  JR   Z,expectM_0_2479S43   
36A5   CD F3 09               CALL   printStr   
36A8   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
36CE   CD F3 09               CALL   printStr   
36D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36E0   21 0A 00               LD   HL,10   
36E3   CD 41 09               CALL   prtdec   
36E6   CD F3 09               CALL   printStr   
36E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36F6   E1                     POP   hl   
36F7   E5                     PUSH   hl   
36F8   CD 41 09               CALL   prtdec   
36FB   E1                     POP   hl   
36FC   CD F3 09               CALL   printStr   
36FF   20 28 23 00            .CSTR   " (#"   
3703   CD 89 09               CALL   prthex   
3706   CD F3 09               CALL   printStr   
3709   29 0D 0A 00            .CSTR   ")\r\n"   
370D   76                     HALT      
370E   00                     .CSTR      
370F                EXPECTM_0_2479S43:      
370F   E1                     POP   HL   
3710                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3710   31 80 3B               LD   SP,STACK   
3713   CD FA 09               CALL   init   
3716   CD 9E 3A               CALL   execStr   
3719   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3739                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3739   E1                     POP   HL   
373A   E5                     PUSH   HL   
373B   11 14 00               LD   DE,20   
373E   B7                     OR   A   
373F   ED 52                  SBC   HL,DE   
3741   7D                     LD   A,L   
3742   B4                     OR   H   
3743   28 6A                  JR   Z,expectM_0_2480S43   
3745   CD F3 09               CALL   printStr   
3748   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
376E   CD F3 09               CALL   printStr   
3771   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3780   21 14 00               LD   HL,20   
3783   CD 41 09               CALL   prtdec   
3786   CD F3 09               CALL   printStr   
3789   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3796   E1                     POP   hl   
3797   E5                     PUSH   hl   
3798   CD 41 09               CALL   prtdec   
379B   E1                     POP   hl   
379C   CD F3 09               CALL   printStr   
379F   20 28 23 00            .CSTR   " (#"   
37A3   CD 89 09               CALL   prthex   
37A6   CD F3 09               CALL   printStr   
37A9   29 0D 0A 00            .CSTR   ")\r\n"   
37AD   76                     HALT      
37AE   00                     .CSTR      
37AF                EXPECTM_0_2480S43:      
37AF   E1                     POP   HL   
37B0                          ;*Macro unroll:  test "5 [4] :a{$a}; /p ^", 4
37B0   31 80 3B               LD   SP,STACK   
37B3   CD FA 09               CALL   init   
37B6   CD 9E 3A               CALL   execStr   
37B9   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 20 5E 00 .CSTR   "5 [4] :a{$a}; /p ^"   
37CC                          ;*Macro unroll:  expect "5 [4] :a{$a}; /p ^",4
37CC   E1                     POP   HL   
37CD   E5                     PUSH   HL   
37CE   11 04 00               LD   DE,4   
37D1   B7                     OR   A   
37D2   ED 52                  SBC   HL,DE   
37D4   7D                     LD   A,L   
37D5   B4                     OR   H   
37D6   28 5D                  JR   Z,expectM_0_2481S43   
37D8   CD F3 09               CALL   printStr   
37DB   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /p ^"   
37F4   CD F3 09               CALL   printStr   
37F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3806   21 04 00               LD   HL,4   
3809   CD 41 09               CALL   prtdec   
380C   CD F3 09               CALL   printStr   
380F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
381C   E1                     POP   hl   
381D   E5                     PUSH   hl   
381E   CD 41 09               CALL   prtdec   
3821   E1                     POP   hl   
3822   CD F3 09               CALL   printStr   
3825   20 28 23 00            .CSTR   " (#"   
3829   CD 89 09               CALL   prthex   
382C   CD F3 09               CALL   printStr   
382F   29 0D 0A 00            .CSTR   ")\r\n"   
3833   76                     HALT      
3834   00                     .CSTR      
3835                EXPECTM_0_2481S43:      
3835   E1                     POP   HL   
3836                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /p ^", 9
3836   31 80 3B               LD   SP,STACK   
3839   CD FA 09               CALL   init   
383C   CD 9E 3A               CALL   execStr   
383F   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /p ^"   
3858                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /p ^",9
3858   E1                     POP   HL   
3859   E5                     PUSH   HL   
385A   11 09 00               LD   DE,9   
385D   B7                     OR   A   
385E   ED 52                  SBC   HL,DE   
3860   7D                     LD   A,L   
3861   B4                     OR   H   
3862   28 63                  JR   Z,expectM_0_2482S43   
3864   CD F3 09               CALL   printStr   
3867   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /p ^"   
3886   CD F3 09               CALL   printStr   
3889   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3898   21 09 00               LD   HL,9   
389B   CD 41 09               CALL   prtdec   
389E   CD F3 09               CALL   printStr   
38A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38AE   E1                     POP   hl   
38AF   E5                     PUSH   hl   
38B0   CD 41 09               CALL   prtdec   
38B3   E1                     POP   hl   
38B4   CD F3 09               CALL   printStr   
38B7   20 28 23 00            .CSTR   " (#"   
38BB   CD 89 09               CALL   prthex   
38BE   CD F3 09               CALL   printStr   
38C1   29 0D 0A 00            .CSTR   ")\r\n"   
38C5   76                     HALT      
38C6   00                     .CSTR      
38C7                EXPECTM_0_2482S43:      
38C7   E1                     POP   HL   
38C8                          ;*Macro unroll:  test "3i= ( i i-- i/b )^ + +", 6
38C8   31 80 3B               LD   SP,STACK   
38CB   CD FA 09               CALL   init   
38CE   CD 9E 3A               CALL   execStr   
38D1   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/b )^ + +"   
38E8                          ;*Macro unroll:  expect "3i= ( i i-- i/b )^ + +",6
38E8   E1                     POP   HL   
38E9   E5                     PUSH   HL   
38EA   11 06 00               LD   DE,6   
38ED   B7                     OR   A   
38EE   ED 52                  SBC   HL,DE   
38F0   7D                     LD   A,L   
38F1   B4                     OR   H   
38F2   28 61                  JR   Z,expectM_0_2483S43   
38F4   CD F3 09               CALL   printStr   
38F7   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/b )^ + +"   
3914   CD F3 09               CALL   printStr   
3917   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3926   21 06 00               LD   HL,6   
3929   CD 41 09               CALL   prtdec   
392C   CD F3 09               CALL   printStr   
392F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
393C   E1                     POP   hl   
393D   E5                     PUSH   hl   
393E   CD 41 09               CALL   prtdec   
3941   E1                     POP   hl   
3942   CD F3 09               CALL   printStr   
3945   20 28 23 00            .CSTR   " (#"   
3949   CD 89 09               CALL   prthex   
394C   CD F3 09               CALL   printStr   
394F   29 0D 0A 00            .CSTR   ")\r\n"   
3953   76                     HALT      
3954   00                     .CSTR      
3955                EXPECTM_0_2483S43:      
3955   E1                     POP   HL   
3956                          ;*Macro unroll:  test "3i= [ ( i i-- i/b )^ ] 1%", 2
3956   31 80 3B               LD   SP,STACK   
3959   CD FA 09               CALL   init   
395C   CD 9E 3A               CALL   execStr   
395F   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/b )^ ] 1%"   
3979                          ;*Macro unroll:  expect "3i= [ ( i i-- i/b )^ ] 1%",2
3979   E1                     POP   HL   
397A   E5                     PUSH   HL   
397B   11 02 00               LD   DE,2   
397E   B7                     OR   A   
397F   ED 52                  SBC   HL,DE   
3981   7D                     LD   A,L   
3982   B4                     OR   H   
3983   28 64                  JR   Z,expectM_0_2484S43   
3985   CD F3 09               CALL   printStr   
3988   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/b )^ ] 1%"   
39A8   CD F3 09               CALL   printStr   
39AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39BA   21 02 00               LD   HL,2   
39BD   CD 41 09               CALL   prtdec   
39C0   CD F3 09               CALL   printStr   
39C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39D0   E1                     POP   hl   
39D1   E5                     PUSH   hl   
39D2   CD 41 09               CALL   prtdec   
39D5   E1                     POP   hl   
39D6   CD F3 09               CALL   printStr   
39D9   20 28 23 00            .CSTR   " (#"   
39DD   CD 89 09               CALL   prthex   
39E0   CD F3 09               CALL   printStr   
39E3   29 0D 0A 00            .CSTR   ")\r\n"   
39E7   76                     HALT      
39E8   00                     .CSTR      
39E9                EXPECTM_0_2484S43:      
39E9   E1                     POP   HL   
39EA                          ;*Macro unroll:  test "0 j= 4 i= ( i j+= i i-- i/b )^ j ", 10
39EA   31 80 3B               LD   SP,STACK   
39ED   CD FA 09               CALL   init   
39F0   CD 9E 3A               CALL   execStr   
39F3   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 2B 3D 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j+= i i-- i/b )^ j "   
3A15                          ;*Macro unroll:  expect "0 j= 4 i= ( i j+= i i-- i/b )^ j ",10
3A15   E1                     POP   HL   
3A16   E5                     PUSH   HL   
3A17   11 0A 00               LD   DE,10   
3A1A   B7                     OR   A   
3A1B   ED 52                  SBC   HL,DE   
3A1D   7D                     LD   A,L   
3A1E   B4                     OR   H   
3A1F   28 6C                  JR   Z,expectM_0_2485S43   
3A21   CD F3 09               CALL   printStr   
3A24   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 2B 3D 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j+= i i-- i/b )^ j "   
3A4C   CD F3 09               CALL   printStr   
3A4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A5E   21 0A 00               LD   HL,10   
3A61   CD 41 09               CALL   prtdec   
3A64   CD F3 09               CALL   printStr   
3A67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A74   E1                     POP   hl   
3A75   E5                     PUSH   hl   
3A76   CD 41 09               CALL   prtdec   
3A79   E1                     POP   hl   
3A7A   CD F3 09               CALL   printStr   
3A7D   20 28 23 00            .CSTR   " (#"   
3A81   CD 89 09               CALL   prthex   
3A84   CD F3 09               CALL   printStr   
3A87   29 0D 0A 00            .CSTR   ")\r\n"   
3A8B   76                     HALT      
3A8C   00                     .CSTR      
3A8D                EXPECTM_0_2485S43:      
3A8D   E1                     POP   HL   
3A8E                             ; 
3A8E   CD F3 09               CALL   printStr   
3A91   44 6F 6E 65 21 00      .CSTR   "Done!"   
3A97   76                     HALT      
3A98                          ALIGN   2   
3A98                PRINTER:      
3A98   E1                     POP   hl   
3A99   CD 41 09               CALL   prtdec   
3A9C   DD E9                  JP   (ix)   
3A9E                             ; executes a null teminated string (null executes exit_)
3A9E                             ; the string should be immedaitely following the call
3A9E                EXECSTR:      ; create a root stack frame
3A9E   C1                     POP   bc   ; bc = code*
3A9F   0B                     DEC   bc   ; dec to prepare for next routine
3AA0   11 00 00               LD   de,0   
3AA3   D5                     PUSH   de   ; push fake IP
3AA4   D5                     PUSH   de   ; push null arg_list*
3AA5   D5                     PUSH   de   ; push null first_arg*
3AA6   D5                     PUSH   de   ; push fake BP
3AA7   DD E9                  JP   (ix)   
3AA9                          ALIGN   $100   
3B00                             ; .org RAMSTART
3B00                          DS   DSIZE   
3B80                STACK:       
3B80                          ALIGN   $100   
3C00                VARS:        
3C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3CD0                RESTARTS:      
3CD0                RST08:    DS   2   
3CD2                RST10:    DS   2   
3CD4                RST18:    DS   2   
3CD6                RST20:    DS   2   
3CD8                RST28:    DS   2   
3CDA                RST30:    DS   2   ; 
3CDC                BAUD:     DS   2   ; 
3CDE                INTVEC:   DS   2   ; 
3CE0                NMIVEC:   DS   2   ; 
3CE2                GETCVEC:   DS   2   ; 
3CE4                PUTCVEC:   DS   2   ; 
3CE6                SYSVARS:      
3CE6                             ; initialised sys variables (preserved)
3CE6                VDATAWIDTH:   DS   2   ; 
3CE8                VTIBPTR:   DS   2   ; 
3CEA                VNEXT:    DS   2   ; 
3CEC                VHEAPPTR:   DS   2   ; 
3CEE                             ; uninitialised sys variables (preserved)
3CEE                VPOINTER:   DS   2   ; 
3CF0                VREMAIN:   DS   2   ; 
3CF2                VSAVEDIP:   DS   2   ; 
3CF4                VSAVEDSP:   DS   2   ; 
3CF6                VSAVEDBP:   DS   2   ; 
3CF8                VCHECKSUM:   DS   2   ; 
3CFA                             ; uninitialised sys variables (unpreserved)
3CFA                VTEMP1:   DS   2   ; 
3CFC                VTEMP2:   DS   2   ; 
3CFE                VLASTDEF:   DS   2   ; 
3D00                VHASHSTR:   DS   2   ; 
3D02                TBPTR:    DS   2   ; reserved for tests
3D04                          ALIGN   $100   
3E00                TIB:      DS   TIBSIZE   
3F00                          ALIGN   $100   
3F00                PAD:      DS   $100   
4000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 57 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               093F DEFINED AT LINE 1446 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 28 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 22 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 26 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 30 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 62 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 67 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 75 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 77 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 111 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 214 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 216 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 218 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 220 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 222 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 224 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 226 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 228 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 232 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 234 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 236 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 238 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 240 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 242 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 244 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 246 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 248 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 250 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 252 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 254 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 257 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 259 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 261 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 263 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 265 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 267 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 269 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 271 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 284 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 292 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 294 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 306 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 308 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 310 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
ADD:                038A DEFINED AT LINE 318 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
AT:                 03A4 DEFINED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
ADDR:               03A4 DEFINED AT LINE 343 IN MAIN.asm
AMPER:              03B0 DEFINED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
AND:                03B0 DEFINED AT LINE 351 IN MAIN.asm
AND1:               03B7 DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
PIPE:               03BB DEFINED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
OR:                 03BB DEFINED AT LINE 364 IN MAIN.asm
XOR:                03C4 DEFINED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
XOR1:               03C5 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
INVERT:             03CF DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
DOLLAR:             03D4 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
ARG:                03D4 DEFINED AT LINE 394 IN MAIN.asm
ARG0:               03F2 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARG0A:              03FB DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
ARG1:               0400 DEFINED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
ARG1A:              0408 DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 425 IN MAIN.asm
LBRACK:             040B DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
ARRBEGIN:           040B DEFINED AT LINE 438 IN MAIN.asm
RBRACK:             0427 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
ARREND:             0427 DEFINED AT LINE 453 IN MAIN.asm
ARREND1:            0441 DEFINED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
ARREND2:            0451 DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
ARRINDEX:           0475 DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ARRINDEX0:          047D DEFINED AT LINE 512 IN MAIN.asm
ARRINDEX1:          047E DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
ARRINDEX2:          048A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
ASSIGN:             048D DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
ASSIGN0:            048F DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
ASSIGNX:            0490 DEFINED AT LINE 533 IN MAIN.asm
ASSIGN1:            049C DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
COLON:              049E DEFINED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
ARGLIST:            049E DEFINED AT LINE 549 IN MAIN.asm
ARGLIST1:           04A8 DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
ARGLIST1A:          04B0 DEFINED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
ARGLIST2:           04B8 DEFINED AT LINE 567 IN MAIN.asm
ARGLIST3:           04C0 DEFINED AT LINE 575 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
ARGLIST4:           04C3 DEFINED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
ARGLIST5:           04C9 DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
LBRACE:             04D5 DEFINED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
BLOCK:              04D5 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
BLOCK1:             04D9 DEFINED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BLOCK2:             0505 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
BLOCK3:             0508 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCK4:             0510 DEFINED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
BLOCK5:             0513 DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
BLOCK6:             053B DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
RBRACE:             053E DEFINED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 235 IN MAIN.asm
BLOCKEND:           053E DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
BLOCKEND1:          056A DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BLOCKEND2:          0576 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
BLOCKEND3:          0588 DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
TICK:               0593 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
CHAR:               0593 DEFINED AT LINE 718 IN MAIN.asm
CHAR1:              0596 DEFINED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
CHAR2:              05A2 DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
CHAR3:              05A5 DEFINED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
BACKSLASH:          05A8 DEFINED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
COMMA:              05AA DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
DISCARD:            05AA DEFINED AT LINE 742 IN MAIN.asm
DISCARD1:           05B7 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
SLASH:              05B9 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
DOT:                05D7 DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
DOT1:               05E3 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DOT2:               05EC DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
DOT3:               05F6 DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
DOT4:               05FA DEFINED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
DIVIDE:             0601 DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
DIVIDE1:            0606 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
DIVIDE2:            0613 DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
DIVIDE3:            0614 DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
EQUALS:             061A DEFINED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
LESSTHANEQ:         0622 DEFINED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
LESSTHAN:           0627 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 305 IN MAIN.asm
LESSTHAN1:          062C DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
TRUE1:              062F DEFINED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
NULL1:              0635 DEFINED AT LINE 850 IN MAIN.asm
FALSE1:             0635 DEFINED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
LPAREN:             063B DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
CARET:              063E DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
GO:                 063E DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
GO1:                063F DEFINED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
GO2:                0645 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 868 IN MAIN.asm
GOBLOCK:            0651 DEFINED AT LINE 878 IN MAIN.asm
GOBLOCK1:           0651 DEFINED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
GOBLOCK2:           0676 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
GOFUNC:             0684 DEFINED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
GOFUNC1:            069D DEFINED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
GOFUNC2:            06A3 DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
GOFUNC3:            06AE DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
GOFUNC4:            06C6 DEFINED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
GOFUNC5:            06CA DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
GOFUNC6:            06CD DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
GOFUNC7:            06D0 DEFINED AT LINE 965 IN MAIN.asm
GOFUNC8:            06D5 DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
HASH:               06E0 DEFINED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
HEXNUM:             06E0 DEFINED AT LINE 981 IN MAIN.asm
HEXNUM1:            06E3 DEFINED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
HEXNUM2:            06EB DEFINED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
UPCASE:             06FD DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
LOWCASE:            0702 DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
IDENT1:             0707 DEFINED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
QUESTION:           0714 DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
IF:                 0714 DEFINED AT LINE 1023 IN MAIN.asm
IFTE:               0720 DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
IFTE1:              0721 DEFINED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
STAR:               072D DEFINED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
MUL:                072D DEFINED AT LINE 1046 IN MAIN.asm
MUL2:               072F DEFINED AT LINE 1049 IN MAIN.asm
MUL3:               0737 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
NUM:                0749 DEFINED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 258 IN MAIN.asm
NUM0:               0752 DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
NUM1:               0753 DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
NUM2:               076B DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
NUM3:               0776 DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
UNDERSCORE:         0779 DEFINED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
REMAIN:             0779 DEFINED AT LINE 1106 IN MAIN.asm
RPAREN:             077F DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
SEMICOLON:          0787 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
SHIFTLEFT:          07A3 DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
SHIFTLEFT1:         07AB DEFINED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
SHIFTLEFT2:         07AC DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
SHIFTRIGHT:         07B3 DEFINED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
SHIFTRIGHT1:        07BB DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
SHIFTRIGHT2:        07BF DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
DBLQUOTE:           07C6 DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
STRING:             07C6 DEFINED AT LINE 1178 IN MAIN.asm
STRING1:            07CF DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
STRING2:            07D2 DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
MINUS:              07EE DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
SUB:                07FA DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
SUB1:               0804 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
COMMAND:            080D DEFINED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
ERROR1:             0853 DEFINED AT LINE 1268 IN MAIN.asm
ABS1:               0859 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
PARTIAL:            0866 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
COMMENT:            0886 DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
BREAK:              088F DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
BREAK1:             0896 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
CHARS:              08A9 DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
CHARS1:             08AC DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
HEAPPTR:            08B1 DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
INPUT:              08BD DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
KEY:                08C8 DEFINED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
OUTPUT:             08D1 DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
NUMBERS:            08DA DEFINED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
UTILITY:            08E0 DEFINED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
ADDROF:             08ED DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
ADDROF1:            08FD DEFINED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1393 IN MAIN.asm
ADDROF2:            0906 DEFINED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
PRTSTK:             0908 DEFINED AT LINE 1408 IN MAIN.asm
PRTSTK1:            0923 DEFINED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
PRTSTK2:            0932 DEFINED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
FILTER:             093F DEFINED AT LINE 1444 IN MAIN.asm
MAP:                093F DEFINED AT LINE 1445 IN MAIN.asm
PRTDEC:             0941 DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 135
PRTDEC0:            0950 DEFINED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
PRTDEC1:            0972 DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
PRTDEC2:            0974 DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
PRTDEC3:            0984 DEFINED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
PRTDEC4:            0985 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
PRTHEX:             0989 DEFINED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0994 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
PRTHEX3:            099D DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
PRTSTR0:            09A8 DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
PRTSTR:             09AC DEFINED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
NESTING:            09B1 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
NESTING0:           09BB DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
NESTING1A:          09C2 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
NESTING1:           09C5 DEFINED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
NESTING2:           09D4 DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
NESTING3:           09D6 DEFINED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
NESTING4:           09E1 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
PROMPT:             09E3 DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
CRLF:               09EC DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
PRINTSTR:           09F3 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 128
INIT:               09FA DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0A13 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
START:              0A18 DEFINED AT LINE 1615 IN MAIN.asm
INTERPRET:          0A2E DEFINED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
INTERPRET2:         0A38 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
INTERPRET3:         0A40 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
INTERPRET4:         0A46 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
INTERPRET5:         0A4B DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
INTERPRET5A:        0A6A DEFINED AT LINE 1682 IN MAIN.asm
INTERPRET6:         0A6C DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
INTERPRET7:         0A7A DEFINED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
INTERPRET8:         0A8D DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
NEXT:               0A95 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 70 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
NEXT1:              0AA4 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
EXIT:               0AAB DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
ERROR:              0AAE DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
REEDIT:             0ABE DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
BACKSPACE:          0AC1 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
PRINTSTACK:         0AD1 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
EDIT:               0ADA DEFINED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2384S43:  0B65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2385S43:  0BCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2386S43:  0C2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2387S43:  0C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2388S43:  0CF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2389S43:  0D5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2390S43:  0DC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2391S43:  0E29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2392S43:  0E8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2393S43:  0EF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2394S43:  0F5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2395S43:  0FC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2396S43:  102F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2397S43:  1097 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2398S43:  1105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2399S43:  1173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2400S43:  11DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2401S43:  124F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2402S43:  12C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2403S43:  1335 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2404S43:  13A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2405S43:  1415 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2406S43:  148D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2407S43:  14FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2408S43:  1569 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2409S43:  15D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2410S43:  1649 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2411S43:  16C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2412S43:  172F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2413S43:  17A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2414S43:  1815 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2415S43:  188F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2416S43:  18FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2417S43:  1979 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2418S43:  19E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2419S43:  1A61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2420S43:  1AD5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2421S43:  1B41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2422S43:  1BBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2423S43:  1C2D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2424S43:  1C99 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2425S43:  1D07 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2426S43:  1D75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2427S43:  1DE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2428S43:  1E4D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2429S43:  1EB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2430S43:  1F25 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2431S43:  1F91 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2432S43:  1FFD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2433S43:  2069 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2434S43:  20D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2435S43:  2143 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2436S43:  21B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2437S43:  221F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2438S43:  228F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2439S43:  22FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2440S43:  2369 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2441S43:  23D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2442S43:  2443 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2443S43:  24B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2444S43:  252F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2445S43:  25A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2446S43:  262D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2447S43:  26B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2448S43:  271D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2449S43:  278B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2450S43:  27FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2451S43:  286D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2452S43:  28DD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2453S43:  294B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2454S43:  29BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2455S43:  2A31 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2456S43:  2AAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2457S43:  2B21 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2458S43:  2BA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2459S43:  2C23 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2460S43:  2CAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2461S43:  2D37 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2462S43:  2DB5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2463S43:  2E39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2464S43:  2EBF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2465S43:  2F47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2466S43:  2FCD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2467S43:  3061 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2468S43:  30E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2469S43:  3171 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2470S43:  3201 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2471S43:  3293 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2472S43:  3331 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2473S43:  33CF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2474S43:  344B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2475S43:  34C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2476S43:  354F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2477S43:  35D7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2478S43:  366F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2479S43:  370F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2480S43:  37AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2481S43:  3835 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2482S43:  38C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2483S43:  3955 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2484S43:  39E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2485S43:  3A8D DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3A98 DEFINED AT LINE 133
EXECSTR:            3A9E DEFINED AT LINE 140
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3B80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3C00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
RESTARTS:           3CD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3CD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3CD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3CD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3CD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3CD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3CDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3CDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3CDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3CE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3CE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3CE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3CE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1603 IN MAIN.asm
VDATAWIDTH:         3CE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
VTIBPTR:            3CE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
VNEXT:              3CEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1600 IN MAIN.asm
VHEAPPTR:           3CEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
VPOINTER:           3CEE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 344 IN MAIN.asm
                    > USED AT LINE 346 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
VREMAIN:            3CF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
VSAVEDIP:           3CF2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           3CF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           3CF6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          3CF8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             3CFA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
VTEMP2:             3CFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
VLASTDEF:           3CFE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           3D00 DEFINED AT LINE 49 IN ram.asm
TBPTR:              3D02 DEFINED AT LINE 50 IN ram.asm
TIB:                3E00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
PAD:                3F00 DEFINED AT LINE 56 IN ram.asm
HEAP:               4000 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
