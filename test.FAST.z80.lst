0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 37               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 37               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 37               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 37               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 37               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 37               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 37               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 37               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 37               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 37               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 36               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 37               LD   (RST08),HL   
0094   22 D2 37               LD   (RST10),HL   
0097   22 D4 37               LD   (RST18),HL   
009A   22 D6 37               LD   (RST20),HL   
009D   22 D8 37               LD   (RST28),HL   
00A0   22 DA 37               LD   (RST30),HL   
00A3   22 DE 37               LD   (INTVEC),HL   
00A6   22 E0 37               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 37               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 37               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 36               LD   SP,STACK   
00C6   CD 25 09               CALL   init   
00C9   C3 00 0A               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   B0 09                  DW   next   ; g nNext
0186   00 3A                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   91                     DB   lsb(nop_)   ; SP
0221   3F                     DB   lsb(not_)   ; !
0222   50                     DB   lsb(string_)   ; "
0223   47                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   91                     DB   lsb(nop_)   ; )
022A   3C                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   91                     DB   lsb(nop_)   ; ,
022D   53                     DB   lsb(sub_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(div_)   ; /	
0230   44                     DB   lsb(num_)   ; 0
0231   44                     DB   lsb(num_)   ; 1
0232   44                     DB   lsb(num_)   ; 2
0233   44                     DB   lsb(num_)   ; 3
0234   44                     DB   lsb(num_)   ; 4
0235   44                     DB   lsb(num_)   ; 5
0236   44                     DB   lsb(num_)   ; 6
0237   44                     DB   lsb(num_)   ; 7
0238   44                     DB   lsb(num_)   ; 8
0239   44                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(go_)   ; :
023B   91                     DB   lsb(nop_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   56                     DB   lsb(eq_)   ; =
023E   65                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   2D                     DB   lsb(identU_)   ; A
0242   2D                     DB   lsb(identU_)   ; B
0243   2D                     DB   lsb(identU_)   ; C
0244   2D                     DB   lsb(identU_)   ; D
0245   2D                     DB   lsb(identU_)   ; E
0246   2D                     DB   lsb(identU_)   ; F
0247   2D                     DB   lsb(identU_)   ; G
0248   2D                     DB   lsb(identU_)   ; h
0249   2D                     DB   lsb(identU_)   ; I
024A   2D                     DB   lsb(identU_)   ; J
024B   2D                     DB   lsb(identU_)   ; K
024C   2D                     DB   lsb(identU_)   ; L
024D   2D                     DB   lsb(identU_)   ; M
024E   2D                     DB   lsb(identU_)   ; N
024F   2D                     DB   lsb(identU_)   ; O
0250   2D                     DB   lsb(identU_)   ; p
0251   2D                     DB   lsb(identU_)   ; Q
0252   2D                     DB   lsb(identU_)   ; R
0253   2D                     DB   lsb(identU_)   ; S
0254   2D                     DB   lsb(identU_)   ; T
0255   2D                     DB   lsb(identU_)   ; U
0256   2D                     DB   lsb(identU_)   ; V
0257   2D                     DB   lsb(identU_)   ; W
0258   2D                     DB   lsb(identU_)   ; X
0259   2D                     DB   lsb(identU_)   ; Y
025A   2D                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   4D                     DB   lsb(xor_)   ; ^
025F   27                     DB   lsb(remain_)   ; _
0260   50                     DB   lsb(string_)   ; `     used for testing string   	
0261   30                     DB   lsb(identL_)   ; a
0262   30                     DB   lsb(identL_)   ; b
0263   30                     DB   lsb(identL_)   ; c
0264   30                     DB   lsb(identL_)   ; d
0265   30                     DB   lsb(identL_)   ; e
0266   30                     DB   lsb(identL_)   ; f
0267   30                     DB   lsb(identL_)   ; g
0268   30                     DB   lsb(identL_)   ; h
0269   30                     DB   lsb(identL_)   ; i
026A   30                     DB   lsb(identL_)   ; j
026B   30                     DB   lsb(identL_)   ; k
026C   30                     DB   lsb(identL_)   ; l
026D   30                     DB   lsb(identL_)   ; m
026E   30                     DB   lsb(identL_)   ; n
026F   30                     DB   lsb(identL_)   ; o
0270   30                     DB   lsb(identL_)   ; p
0271   30                     DB   lsb(identL_)   ; q
0272   30                     DB   lsb(identL_)   ; r
0273   30                     DB   lsb(identL_)   ; s
0274   30                     DB   lsb(identL_)   ; t
0275   30                     DB   lsb(identL_)   ; u
0276   30                     DB   lsb(identL_)   ; v
0277   30                     DB   lsb(identL_)   ; w
0278   30                     DB   lsb(identL_)   ; x
0279   30                     DB   lsb(identL_)   ; y
027A   30                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4A                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   36                     DB   lsb(inv_)   ; ~
027F   91                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 93 03               JP   add   
0303                ADDR_:       
0303   C3 B1 03               JP   addr   
0306                AND_:        
0306   C3 BD 03               JP   and   
0309                ARG_:        
0309   C3 DA 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 11 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 43 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 5F 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 AD 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 D6 04               JP   block   
031B                BLOCKEND_:      
031B   C3 3F 05               JP   blockend   
031E                CHAR_:       
031E   C3 94 05               JP   char   
0321                COMMAND_:      
0321   C3 8F 07               JP   command   
0324                DOT_:        
0324   C3 A9 05               JP   dot   
0327                REMAIN_:      
0327   C3 13 07               JP   remain   
032A                GO_:         
032A   C3 0D 06               JP   go   
032D                IDENTU_:      
032D   C3 97 06               JP   identU   
0330                IDENTL_:      
0330   C3 9C 06               JP   identL   
0333                IF_:         
0333   C3 AE 06               JP   if   
0336                INV_:        ; Bitwise INVert the top member of the stack
0336   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0339   C3 D2 03               JP   xor1   
033C                MUL_:        
033C   C3 C7 06               JP   mul   
033F                NOT_:        ; logical invert, any non zero value
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1D                  JR   eq1   
0344                NUM_:        
0344   C3 E3 06               JP   num   
0347                HEXNUM_:      
0347   C3 7A 06               JP   hexnum   
034A                OR_:         
034A   C3 C8 03               JP   or   
034D                XOR_:        
034D   C3 D1 03               JP   xor   
0350                STRING_:      
0350   C3 3C 07               JP   string   
0353                SUB_:        
0353   C3 64 07               JP   sub   
0356                EQ_:         
0356   03                     INC   bc   
0357   0A                     LD   a,(bc)   ; is it == ?
0358   FE 3D                  CP   "="   
035A   28 04                  JR   z,eq0   ; no its equality
035C   0B                     DEC   bc   
035D   C3 C5 04               JP   assign   ; no its assignment
0360                EQ0:         
0360   E1                     POP   hl   
0361                EQ1:         
0361   D1                     POP   de   
0362   C3 EC 05               JP   equals   
0365                GT_:         
0365   03                     INC   bc   
0366   0A                     LD   a,(bc)   
0367   FE 3E                  CP   ">"   
0369   CA 29 07               JP   z,shiftRight   
036C   D1                     POP   de   
036D   E1                     POP   hl   
036E   18 09                  JR   lt1   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA 19 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA F4 05               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 F9 05               JP   lessthan   
0382                DIV_:        
0382   D1                     POP   de   ; get first value
0383   E1                     POP   hl   ; get 2nd value
0384   C5                     PUSH   bc   ; preserve the IP
0385   44 4D                  LD   bc,hl   
0387   CD D3 05               CALL   divide   
038A   22 F6 37               LD   (vRemain),hl   
038D   C1                     POP   bc   
038E   D5                     PUSH   de   ; push result
038F   DD E9                  JP   (ix)   
0391                NOP_:        
0391   DD E9                  JP   (ix)   
0393                             ;*******************************************************************
0393                             ; word operators
0393                             ;*******************************************************************
0393                ADD:         
0393   03                     INC   bc   
0394   0A                     LD   a,(bc)   
0395   0B                     DEC   bc   
0396   FE 2B                  CP   "+"   ; ++ increment variable
0398   20 06                  JR   nz,add1   
039A   03                     INC   bc   
039B   E1                     POP   hl   ; second term
039C   23                     INC   hl   
039D   C3 C7 04               JP   assign0   
03A0                ADD1:        
03A0   FE 3D                  CP   "="   ; += add to variable
03A2   20 07                  JR   nz,add2   
03A4   03                     INC   bc   
03A5   E1                     POP   hl   ; second term
03A6   D1                     POP   de   ; first term
03A7   19                     ADD   hl,de   
03A8   C3 C7 04               JP   assign0   
03AB                ADD2:        
03AB   D1                     POP   de   ; second term
03AC   E1                     POP   hl   ; first term
03AD   19                     ADD   hl,de   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                             ; -- ptr
03B1                ADDR:        
03B1   2A F0 37               LD   hl,(vPointer)   
03B4   E5                     PUSH   hl   
03B5   21 F0 37               LD   hl,vPointer   
03B8   22 F0 37               LD   (vPointer),hl   
03BB   DD E9                  JP   (ix)   
03BD                AND:         
03BD   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03BE   E1                     POP   hl   
03BF   7B                     LD   a,e   
03C0   A5                     AND   l   
03C1   6F                     LD   l,a   
03C2   7A                     LD   a,d   
03C3   A4                     AND   h   
03C4                AND1:        
03C4   67                     LD   h,a   
03C5   E5                     PUSH   hl   
03C6   DD E9                  JP   (ix)   
03C8                OR:          
03C8   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C9   E1                     POP   hl   
03CA   7B                     LD   a,e   
03CB   B5                     OR   l   
03CC   6F                     LD   l,a   
03CD   7A                     LD   a,d   
03CE   B4                     OR   h   
03CF   18 F3                  JR   and1   
03D1                XOR:         
03D1   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03D2                XOR1:        
03D2   E1                     POP   hl   
03D3   7B                     LD   a,e   
03D4   AD                     XOR   l   
03D5   6F                     LD   l,a   
03D6   7A                     LD   a,d   
03D7   AC                     XOR   h   
03D8   18 EA                  JR   and1   
03DA                             ; $a .. $z
03DA                             ; -- value
03DA                             ; returns value of arg
03DA                ARG:         
03DA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DD   FD 56 05               LD   d,(iy+5)   
03E0   EB                     EX   de,hl   
03E1   7D                     LD   a,l   ; arg_list* == null, skip
03E2   B4                     OR   h   
03E3   28 1C                  JR   z,arg0a   
03E5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E6   2B                     DEC   hl   
03E7   7E                     LD   a,(hl)   
03E8   23                     INC   hl   
03E9   23                     INC   hl   
03EA   B7                     OR   a   
03EB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03ED   5F                     LD   e,a   ; e = a = num_args
03EE   03                     INC   bc   ; a = next char = arg_name
03EF   0A                     LD   a,(bc)   
03F0   C5                     PUSH   bc   ; save IP
03F1   43                     LD   b,e   ; b = e = num_args
03F2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F5   FD 56 03               LD   d,(iy+3)   
03F8                ARG0:        
03F8   1B                     DEC   de   ; a = arg_name, de = next arg*
03F9   1B                     DEC   de   
03FA   BE                     CP   (hl)   
03FB   28 09                  JR   z,arg1   
03FD   23                     INC   hl   ; hl = next arg_list*
03FE   10 F8                  DJNZ   arg0   
0400   C1                     POP   bc   ; no match, restore IP
0401                ARG0A:       
0401   11 00 00               LD   de,0   ; return 0
0404   18 08                  JR   arg1a   
0406                ARG1:        
0406   C1                     POP   bc   ; restore IP
0407   EB                     EX   de,hl   ; hl = arg*
0408   22 F0 37               LD   (vPointer),hl   ; store arg* in setter
040B   5E                     LD   e,(hl)   
040C   23                     INC   hl   
040D   56                     LD   d,(hl)   ; de = arg
040E                ARG1A:       
040E   D5                     PUSH   de   ; push arg
040F   DD E9                  JP   (ix)   
0411                             ; arg_list - parses input (ab:c)
0411                             ; names after the : represent uninitialised locals
0411                             ; return values are the state of the stack after the block ends
0411                ARG_LIST:      
0411   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0414   2A EC 37               LD   hl,(vHeapPtr)   ; hl = heap*
0417   23                     INC   hl   ; skip length field to start
0418   23                     INC   hl   
0419   E5                     PUSH   hl   ; save start of arg_list
041A   03                     INC   bc   ; point to next char
041B                ARG_LIST1:      
041B   0A                     LD   a,(bc)   
041C   FE 29                  CP   ")"   ; ) is the arg_list terminator
041E   28 12                  JR   z,arg_list4   
0420   FE 3A                  CP   ":"   
0422   20 03                  JR   nz,arg_list2   
0424   14                     INC   d   ; non zero value local count acts as flag
0425   20 08                  JR   nz,arg_list3   
0427                ARG_LIST2:      
0427   77                     LD   (hl),a   
0428   23                     INC   hl   
0429   1C                     INC   e   ; increase arg count
042A   AF                     XOR   a   
042B   B2                     OR   d   
042C   28 01                  JR   z,arg_list3   
042E   14                     INC   d   ; if d > 0 increase local count
042F                ARG_LIST3:      
042F   03                     INC   bc   ; point to next char
0430   18 E9                  JR   arg_list1   
0432                ARG_LIST4:      
0432   AF                     XOR   a   
0433   B2                     OR   d   
0434   28 01                  JR   z,arg_list5   
0436   15                     DEC   d   ; remove initial inc
0437                ARG_LIST5:      
0437   23                     INC   hl   
0438   22 EC 37               LD   (vHeapPtr),hl   ; bump heap* to after end of string
043B   E1                     POP   hl   ; hl = start of arg_list
043C   E5                     PUSH   hl   ; return start of string
043D   2B                     DEC   hl   ; write length bytes to length field at start - 2
043E   72                     LD   (hl),d   
043F   2B                     DEC   hl   
0440   73                     LD   (hl),e   
0441   DD E9                  JP   (ix)   
0443                ARRBEGIN:      
0443   11 00 00               LD   de,0   ; create stack frame
0446   D5                     PUSH   de   ; push null for IP
0447   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
044A   FD 56 05               LD   d,(iy+5)   ; 
044D   D5                     PUSH   de   ; 
044E   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0451   FD 56 03               LD   d,(iy+3)   ; 
0454   D5                     PUSH   de   ; 
0455   FD E5                  PUSH   iy   ; push BP
0457   FD 21 00 00            LD   iy,0   ; BP = SP
045B   FD 39                  ADD   iy,sp   
045D   DD E9                  JP   (ix)   
045F                ARREND:      
045F   FD 54                  LD   d,iyh   ; de = BP
0461   FD 5D                  LD   e,iyl   
0463   ED 43 F8 37            LD   (vTemp1),bc   ; save IP
0467   62 6B                  LD   hl,de   ; hl = de = BP
0469   B7                     OR   a   
046A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
046C   CB 3C                  SRL   h   ; 
046E   CB 1D                  RR   l   
0470   44 4D                  LD   bc,hl   ; bc = count
0472   2A EC 37               LD   hl,(vHeapPtr)   ; hl = array[-2]
0475   71                     LD   (hl),c   ; write num items in length word
0476   23                     INC   hl   
0477   70                     LD   (hl),b   
0478   23                     INC   hl   ; hl = array[0], bc = count
0479                             ; de = BP, hl = array[0], bc = count
0479                ARREND1:      
0479   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
047C   77                     LD   (hl),a   ; write lsb of array item
047D   23                     INC   hl   ; move to msb of array item
047E   3A E6 37               LD   a,(vDataWidth)   ; vDataWidth=1?
0481   3D                     DEC   a   
0482   28 05                  JR   z,arrEnd2   
0484   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0487   77                     LD   (hl),a   ; write msb of array item
0488   23                     INC   hl   ; move to next word in array
0489                ARREND2:      
0489   FD 2B                  DEC   iy   ; move to next word on stack
048B   FD 2B                  DEC   iy   
048D   0B                     DEC   bc   ; dec items count
048E   79                     LD   a,c   ; if not zero loop
048F   B0                     OR   b   
0490   20 E7                  JR   nz,arrEnd1   
0492   EB                     EX   de,hl   ; de = end of array, hl = BP
0493   F9                     LD   sp,hl   ; sp = BP
0494   E1                     POP   hl   ; de = end of array, hl = old BP
0495   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0496   FD 62                  LD   iyh,d   
0498   FD 6B                  LD   iyl,e   
049A   D1                     POP   de   ; pop arg_list (discard)
049B   D1                     POP   de   ; pop first_arg* (discard)
049C   D1                     POP   de   ; pop IP (discard)
049D   ED 5B EC 37            LD   de,(vHeapPtr)   ; de = array[-2]
04A1   22 EC 37               LD   (vHeapPtr),hl   ; move heap* to end of array
04A4   ED 4B F8 37            LD   bc,(vTemp1)   ; restore IP
04A8   13                     INC   de   ; de = array[0]
04A9   13                     INC   de   
04AA   D5                     PUSH   de   ; return array[0]
04AB   DD E9                  JP   (ix)   
04AD                             ; index of an array, based on vDataWidth
04AD                             ; array num -- value    ; also sets vPointer to address
04AD                ARRINDEX:      
04AD   E1                     POP   hl   ; hl = index
04AE   D1                     POP   de   ; de = array
04AF   3A E6 37               LD   a,(vDataWidth)   ; a = data width
04B2   3D                     DEC   a   
04B3   28 01                  JR   z,arrIndex1   
04B5                ARRINDEX0:      
04B5   29                     ADD   hl,hl   ; if data width = 2 then double
04B6                ARRINDEX1:      
04B6   19                     ADD   hl,de   ; add addr
04B7   22 F0 37               LD   (vPointer),hl   ; store address in setter
04BA   16 00                  LD   d,0   
04BC   5E                     LD   e,(hl)   
04BD   B7                     OR   a   ; check data width again
04BE   28 02                  JR   z,arrIndex2   
04C0   23                     INC   hl   
04C1   56                     LD   d,(hl)   
04C2                ARRINDEX2:      
04C2   D5                     PUSH   de   
04C3   DD E9                  JP   (ix)   
04C5                             ; value _oldValue --            ; uses address in vPointer
04C5                ASSIGN:      
04C5   E1                     POP   hl   ; discard last accessed value
04C6   E1                     POP   hl   ; hl = new value
04C7                ASSIGN0:      
04C7   EB                     EX   de,hl   ; de = new value
04C8                ASSIGNX:      
04C8   2A F0 37               LD   hl,(vPointer)   
04CB   73                     LD   (hl),e   
04CC   3A E6 37               LD   a,(vDataWidth)   
04CF   3D                     DEC   a   ; is it byte?
04D0   28 02                  JR   z,assign1   
04D2   23                     INC   hl   
04D3   72                     LD   (hl),d   
04D4                ASSIGN1:      
04D4   DD E9                  JP   (ix)   
04D6                BLOCK:       
04D6   C5                     PUSH   bc   ; return pointer to first { of block
04D7   03                     INC   bc   
04D8   16 01                  LD   d,1   ; nesting: count first parenthesis
04DA                BLOCK1:      ; Skip to end of definition
04DA   0A                     LD   a,(bc)   ; Get the next character
04DB   03                     INC   bc   ; Point to next character
04DC   FE 21                  CP   " " + 1   ; ignore whitespace
04DE   38 FA                  JR   c,block1   
04E0   FE 29                  CP   ")"   
04E2   28 2D                  JR   z,block4   
04E4   FE 7D                  CP   "}"   
04E6   28 29                  JR   z,block4   
04E8   FE 5D                  CP   "]"   
04EA   28 25                  JR   z,block4   
04EC   FE 28                  CP   "("   
04EE   28 16                  JR   z,block2   
04F0   FE 7B                  CP   "{"   
04F2   28 12                  JR   z,block2   
04F4   FE 5B                  CP   "["   
04F6   28 0E                  JR   z,block2   
04F8   FE 27                  CP   "'"   
04FA   28 0D                  JR   z,block3   
04FC   FE 60                  CP   "`"   
04FE   28 09                  JR   z,block3   
0500   FE 22                  CP   $22   
0502   28 05                  JR   z,block3   
0504   18 D4                  JR   block1   
0506                BLOCK2:      
0506   14                     INC   d   
0507   18 D1                  JR   block1   
0509                BLOCK3:      
0509   3E 80                  LD   a,$80   
050B   AA                     XOR   d   
050C   47                     LD   b,a   
050D   20 CB                  JR   nz,block1   
050F   18 03                  JR   block5   
0511                BLOCK4:      
0511   15                     DEC   d   
0512   20 C6                  JR   nz,block1   ; get the next element
0514                BLOCK5:      
0514   60 69                  LD   hl,bc   ; hl = IP
0516   11 00 3A               LD   de,HEAP   ; is IP pointing to object in heap
0519   B7                     OR   a   ; IP - HEAP
051A   ED 52                  SBC   hl,de   
051C   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051E   28 1C                  JR   z,block6   
0520   60 69                  LD   hl,bc   ; hl = IP
0522   D1                     POP   de   ; de = block*
0523   ED 43 F8 37            LD   (vTemp1),bc   ; save IP
0527   B7                     OR   a   ; bc = size
0528   ED 52                  SBC   hl,de   
052A   44 4D                  LD   bc,hl   
052C   EB                     EX   de,hl   ; hl = block* de = heap*
052D   ED 5B EC 37            LD   de,(vHeapPtr)   
0531   D5                     PUSH   de   ; return hblock*
0532   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0534   ED 53 EC 37            LD   (vHeapPtr),de   ; heap* += size
0538   ED 4B F8 37            LD   bc,(vTemp1)   ; restore IP
053C                BLOCK6:      
053C   0B                     DEC   bc   ; balanced, exit
053D   DD E9                  JP   (ix)   
053F                BLOCKEND:      
053F   D9                     EXX      ; de" = oldBP bc" = oldIP
0540   FD 5E 00               LD   e,(iy+0)   
0543   FD 56 01               LD   d,(iy+1)   
0546   FD 4E 06               LD   c,(iy+6)   
0549   FD 46 07               LD   b,(iy+7)   
054C   D9                     EXX      
054D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0550   FD 56 03               LD   d,(iy+3)   
0553   EB                     EX   de,hl   
0554   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0557   FD 56 01               LD   d,(iy+1)   
055A   13                     INC   de   ; for carry flag <=
055B   B7                     OR   a   
055C   ED 52                  SBC   hl,de   
055E   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0560   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0562   FD 5D                  LD   e,iyl   
0564   21 08 00               LD   hl,8   
0567   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0568   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0569   18 0C                  JR   blockend2   
056B                BLOCKEND1:      ; same scope
056B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056E   FD 56 03               LD   d,(iy+3)   
0571   EB                     EX   de,hl   
0572   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0574   FD 5D                  LD   e,iyl   
0576   EB                     EX   de,hl   
0577                BLOCKEND2:      
0577   44 4D                  LD   bc,hl   ; bc = hl = BP
0579   B7                     OR   a   ; hl = BP - SP = count
057A   ED 72                  SBC   hl,sp   
057C   7D                     LD   a,l   
057D   B4                     OR   h   
057E   28 09                  JR   z,blockend3   
0580   C5                     PUSH   bc   ; bc = count, hl = BP
0581   44 4D                  LD   bc,hl   
0583   E1                     POP   hl   
0584   2B                     DEC   hl   ; hl = BP-1
0585   1B                     DEC   de   ; de = args*-1
0586   ED B8                  LDDR      
0588   13                     INC   de   
0589                BLOCKEND3:      
0589   EB                     EX   de,hl   ; hl = new tos
058A   F9                     LD   sp,hl   ; sp = new tos
058B   D9                     EXX      ; bc = IP, iy = oldBP
058C   D5                     PUSH   de   
058D   C5                     PUSH   bc   
058E   D9                     EXX      
058F   C1                     POP   bc   
0590   FD E1                  POP   iy   
0592   DD E9                  JP   (ix)   
0594                CHAR:        
0594   21 00 00               LD   hl,0   ; if "" is empty or null
0597                CHAR1:       
0597   03                     INC   bc   ; point to next char
0598   0A                     LD   a,(bc)   
0599   FE 27                  CP   "'"   ; ' is the terminator
059B   28 09                  JR   z,char3   
059D   FE 5C                  CP   $5c   ; \ is the escape
059F   20 02                  JR   nz,char2   
05A1   03                     INC   bc   
05A2   0A                     LD   a,(bc)   
05A3                CHAR2:       
05A3   6F                     LD   l,a   
05A4   18 F1                  JR   char1   
05A6                CHAR3:       
05A6   E5                     PUSH   hl   
05A7   DD E9                  JP   (ix)   
05A9                             ; ; ;
05A9                             ; ; block* -- hblock*
05A9                             ; ; copies bytes from TOS to IP to the heap
05A9                             ; compile:
05A9                             ;   ld (vTemp1),bc              ; save IP
05A9                             ; pop de                      ; de = block*
05A9                             ; ld hl,bc                    ; hl = IP
05A9                             ; or a                        ; bc = size
05A9                             ; sbc hl,de
05A9                             ; ld bc,hl
05A9                             ; ex de,hl                    ; hl = block*
05A9                             ; ld de,(vHeapPtr)            ; de = heap*
05A9                             ; push de                     ; return hblock*
05A9                             ; ldir                        ; copy size bytes from block* to hblock*
05A9                             ; ld (vHeapPtr),de
05A9                             ; ld bc,(vTemp1)              ; restore IP
05A9                             ; jp (ix)
05A9                DOT:         
05A9   E1                     POP   hl   
05AA   03                     INC   bc   
05AB   0A                     LD   a,(bc)   
05AC   FE 68                  CP   "h"   
05AE   20 05                  JR   nz,dot1   
05B0   CD B4 08               CALL   prthex   
05B3   18 17                  JR   dot4   
05B5                DOT1:        
05B5   FE 73                  CP   "s"   
05B7   20 05                  JR   nz,dot2   
05B9   CD D7 08               CALL   prtstr   
05BC   18 0E                  JR   dot4   
05BE                DOT2:        
05BE   FE 63                  CP   "c"   
05C0   20 06                  JR   nz,dot3   
05C2   7D                     LD   a,l   
05C3   CD 85 00               CALL   putchar   
05C6   18 04                  JR   dot4   
05C8                DOT3:        
05C8   0B                     DEC   bc   
05C9   CD 6C 08               CALL   prtdec   
05CC                DOT4:        
05CC   3E 20                  LD   a," "   
05CE   CD 85 00               CALL   putchar   
05D1   DD E9                  JP   (ix)   
05D3                             ; division subroutine.
05D3                             ; bc: divisor, de: dividend, hl: remainder
05D3                DIVIDE:      
05D3   21 00 00               LD   hl,0   ; zero the remainder
05D6   3E 10                  LD   a,16   ; loop counter
05D8                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05D8   CB 21                  SLA   c   
05DA   CB 10                  RL   b   
05DC   ED 6A                  ADC   hl,hl   
05DE   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E0   38 03                  JR   c,divide2   
05E2   0C                     INC   c   
05E3   18 01                  JR   divide3   
05E5                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E5   19                     ADD   hl,de   
05E6                DIVIDE3:      
05E6   3D                     DEC   a   
05E7   20 EF                  JR   nz,divide1   
05E9   50 59                  LD   de,bc   ; result from bc to de
05EB   C9                     RET      
05EC                             ; hl = value1, de = value2
05EC                             ; hl = result
05EC                EQUALS:      
05EC   B7                     OR   a   ; reset the carry flag
05ED   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05EF   28 10                  JR   z,true1   
05F1   C3 07 06               JP   false1   
05F4                             ; hl = value1 de = value2
05F4                             ; hl = result
05F4                LESSTHANEQ:      
05F4   B7                     OR   a   
05F5   ED 52                  SBC   hl,de   
05F7   18 05                  JR   lessthan1   
05F9                             ; hl = value1 de = value2
05F9                             ; hl = result
05F9                LESSTHAN:      
05F9   B7                     OR   a   
05FA   ED 52                  SBC   hl,de   
05FC   28 09                  JR   z,false1   
05FE                LESSTHAN1:      
05FE   FA 07 06               JP   m,false1   
0601                TRUE1:       
0601   21 FF FF               LD   hl,TRUE   
0604   E5                     PUSH   hl   
0605   DD E9                  JP   (ix)   
0607                NULL1:       
0607                FALSE1:      
0607   21 00 00               LD   hl,FALSE   
060A   E5                     PUSH   hl   
060B   DD E9                  JP   (ix)   
060D                             ; execute a block of code which ends with }
060D                             ; creates a root scope if BP == stack
060D                             ; else uses outer scope
060D                GO:          
060D   D1                     POP   de   ; de = block*
060E                GO1:         
060E   7B                     LD   a,e   ; if block* == null, exit
060F   B2                     OR   d   
0610   20 02                  JR   nz,go2   
0612   DD E9                  JP   (ix)   
0614                GO2:         
0614   1A                     LD   a,(de)   
0615   FE 7B                  CP   "{"   
0617   CA 46 06               JP   z,goBlock   
061A                GOFUNC:      ; execute code at pointer
061A   EB                     EX   de,hl   ; hl = func*
061B   5E                     LD   e,(hl)   ; de = hblock*
061C   23                     INC   hl   
061D   56                     LD   d,(hl)   
061E   23                     INC   hl   
061F   D5                     PUSH   de   ; save hblock*
0620   5E                     LD   e,(hl)   ; de = arg_list*
0621   23                     INC   hl   
0622   56                     LD   d,(hl)   
0623   23                     INC   hl   
0624   EB                     EX   de,hl   ; hl = arg_list*
0625   D1                     POP   de   ; restore hblock*
0626   7D                     LD   a,l   ; if arg_list* != null skip
0627   B4                     OR   h   
0628   20 03                  JR   nz,goFunc1   
062A   C5                     PUSH   bc   ; push IP
062B   18 3A                  JR   goBlock2   
062D                GOFUNC1:      
062D   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
062E   7E                     LD   a,(hl)   
062F   23                     INC   hl   
0630   B7                     OR   a   
0631   28 05                  JR   z,goFunc3   
0633                GOFUNC2:      
0633   3B                     DEC   sp   
0634   3B                     DEC   sp   
0635   3D                     DEC   a   
0636   20 FB                  JR   nz,goFunc2   
0638                GOFUNC3:      
0638   C5                     PUSH   bc   ; push IP
0639   E5                     PUSH   hl   ; push arg_list*
063A   2B                     DEC   hl   ; hl = num_args*
063B   2B                     DEC   hl   
063C   7E                     LD   a,(hl)   ; hl = num_args * 2
063D   87                     ADD   a,a   
063E   C6 04                  ADD   a,4   ; offset for IP and arg_list
0640   6F                     LD   l,a   
0641   26 00                  LD   h,$0   
0643   39                     ADD   hl,sp   ; hl = first_arg*
0644   18 27                  JR   goBlock4   
0646                GOBLOCK:      
0646   13                     INC   de   
0647   C5                     PUSH   bc   ; push IP
0648   21 80 36               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
064B   FD 44                  LD   b,iyh   
064D   FD 4D                  LD   c,iyl   
064F   B7                     OR   a   ; hl = stack - BP = root_scope
0650   ED 42                  SBC   hl,bc   
0652   7D                     LD   a,l   ; if root_scope, skip
0653   B4                     OR   h   
0654   28 11                  JR   z,goBlock2   
0656   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0659   FD 46 05               LD   b,(iy+5)   
065C   C5                     PUSH   bc   
065D   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0660   FD 46 03               LD   b,(iy+3)   
0663   60 69                  LD   hl,bc   
0665   18 05                  JR   goBlock3   
0667                GOBLOCK2:      
0667   E5                     PUSH   hl   ; push arg_list (null)
0668   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
066B   39                     ADD   hl,sp   
066C                GOBLOCK3:      
066C   1B                     DEC   de   
066D                GOBLOCK4:      
066D   E5                     PUSH   hl   ; push first_arg
066E   FD E5                  PUSH   iy   ; push BP
0670   FD 21 00 00            LD   iy,0   ; BP = SP
0674   FD 39                  ADD   iy,sp   
0676   42 4B                  LD   bc,de   ; bc = de = block*-1
0678   DD E9                  JP   (ix)   
067A                HEXNUM:      
067A   21 00 00               LD   hl,0   ; Clear hl to accept the number
067D                HEXNUM1:      
067D   03                     INC   bc   
067E   0A                     LD   a,(bc)   ; Get the character which is a numeral
067F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0681   28 02                  JR   z,hexnum2   ; no a decimal
0683   D6 07                  SUB   7   ; sub 7  to make $a - $F
0685                HEXNUM2:      
0685   D6 30                  SUB   $30   ; form decimal digit
0687   DA 05 07               JP   c,num2   
068A   FE 10                  CP   $0F+1   
068C   D2 05 07               JP   nc,num2   
068F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0690   29                     ADD   hl,hl   ; 4X
0691   29                     ADD   hl,hl   ; 8X
0692   29                     ADD   hl,hl   ; 16X
0693   85                     ADD   a,l   ; add into bottom of hl
0694   6F                     LD   l,a   
0695   18 E6                  JR   hexnum1   
0697                IDENTU:      
0697   0A                     LD   a,(bc)   ; a = identifier char
0698   D6 41                  SUB   "A"   ; "A" = 0
069A   18 05                  JR   ident1   
069C                IDENTL:      
069C   0A                     LD   a,(bc)   
069D   D6 61                  SUB   "a"   
069F   C6 1A                  ADD   a,26   
06A1                IDENT1:      
06A1   87                     ADD   a,a   ; l = a * 2
06A2   6F                     LD   l,a   
06A3   26 37                  LD   h,msb(vars)   
06A5   22 F0 37               LD   (vPointer),hl   ; store address in setter
06A8   5E                     LD   e,(hl)   
06A9   23                     INC   hl   
06AA   56                     LD   d,(hl)   
06AB   D5                     PUSH   de   
06AC   DD E9                  JP   (ix)   
06AE                             ; if
06AE                             ; condition then -- value
06AE                IF:          
06AE   03                     INC   bc   
06AF   0A                     LD   a,(bc)   
06B0   FE 3F                  CP   "?"   
06B2   28 06                  JR   z,ifte   
06B4   0B                     DEC   bc   
06B5   11 00 00               LD   de,0   ; NUL pointer for else
06B8   18 01                  JR   ifte1   
06BA                             ; ifte
06BA                             ; condition then else -- value
06BA                IFTE:        
06BA   D1                     POP   de   ; de = else
06BB                IFTE1:       
06BB   E1                     POP   hl   ; hl = then
06BC   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06BD   7C                     LD   a,h   
06BE   B5                     OR   l   
06BF   E1                     POP   hl   ; hl = then
06C0   CA 0E 06               JP   z,go1   ; if z de = else
06C3   EB                     EX   de,hl   ; condition = false, de = then
06C4   C3 0E 06               JP   go1   
06C7                MUL:         
06C7   D1                     POP   de   ; get first value
06C8   E1                     POP   hl   
06C9   C5                     PUSH   bc   ; Preserve the IP
06CA   44                     LD   b,h   ; bc = 2nd value
06CB   4D                     LD   c,l   
06CC   21 00 00               LD   hl,0   
06CF   3E 10                  LD   a,16   
06D1                MUL2:        
06D1   29                     ADD   hl,hl   
06D2   CB 13                  RL   e   
06D4   CB 12                  RL   d   
06D6   30 04                  JR   nc,$+6   
06D8   09                     ADD   hl,bc   
06D9   30 01                  JR   nc,$+3   
06DB   13                     INC   de   
06DC   3D                     DEC   a   
06DD   20 F2                  JR   nz,mul2   
06DF   C1                     POP   bc   ; Restore the IP
06E0   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
06E1   DD E9                  JP   (ix)   
06E3                NUM:         
06E3   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06E6   0A                     LD   a,(bc)   ; Get numeral or -
06E7   FE 2D                  CP   "-"   
06E9   20 01                  JR   nz,num0   
06EB   03                     INC   bc   ; move to next char, no flags affected
06EC                NUM0:        
06EC   08                     EX   af,af'   ; save zero flag = 0 for later
06ED                NUM1:        
06ED   0A                     LD   a,(bc)   ; read digit
06EE   D6 30                  SUB   "0"   ; less than 0?
06F0   38 13                  JR   c,num2   ; not a digit, exit loop
06F2   FE 0A                  CP   10   ; greater that 9?
06F4   30 0F                  JR   nc,num2   ; not a digit, exit loop
06F6   03                     INC   bc   ; inc IP
06F7   54 5D                  LD   de,hl   ; multiply hl * 10
06F9   29                     ADD   hl,hl   
06FA   29                     ADD   hl,hl   
06FB   19                     ADD   hl,de   
06FC   29                     ADD   hl,hl   
06FD   85                     ADD   a,l   ; add digit in a to hl
06FE   6F                     LD   l,a   
06FF   3E 00                  LD   a,0   
0701   8C                     ADC   a,h   
0702   67                     LD   h,a   
0703   18 E8                  JR   num1   
0705                NUM2:        
0705   0B                     DEC   bc   
0706   08                     EX   af,af'   ; restore zero flag
0707   20 07                  JR   nz,num3   
0709   EB                     EX   de,hl   ; negate the value of hl
070A   21 00 00               LD   hl,0   
070D   B7                     OR   a   ; jump to sub2
070E   ED 52                  SBC   hl,de   
0710                NUM3:        
0710   E5                     PUSH   hl   ; Put the number on the stack
0711   DD E9                  JP   (ix)   ; and process the next character
0713                REMAIN:      
0713   2A F6 37               LD   hl,(vRemain)   
0716   E5                     PUSH   hl   
0717   DD E9                  JP   (ix)   
0719                             ; shiftLeft
0719                             ; value count -- value2          shift left count places
0719                SHIFTLEFT:      
0719   50 59                  LD   de,bc   ; save IP
071B   C1                     POP   bc   ; bc = count
071C   41                     LD   b,c   ; b = loop counter
071D   E1                     POP   hl   
071E   04                     INC   b   ; test for counter=0 case
071F   18 01                  JR   shiftLeft2   
0721                SHIFTLEFT1:      
0721   29                     ADD   hl,hl   ; left shift hl
0722                SHIFTLEFT2:      
0722   10 FD                  DJNZ   shiftLeft1   
0724   E5                     PUSH   hl   
0725   42 4B                  LD   bc,de   ; restore IP
0727   DD E9                  JP   (ix)   
0729                             ; shiftRight
0729                             ; value count -- value2          shift left count places
0729                SHIFTRIGHT:      
0729   50 59                  LD   de,bc   ; save IP
072B   C1                     POP   bc   ; bc = count
072C   41                     LD   b,c   ; b = loop counter
072D   E1                     POP   hl   
072E   04                     INC   b   ; test for counter=0 case
072F   18 04                  JR   shiftRight2   
0731                SHIFTRIGHT1:      
0731   CB 3C                  SRL   h   ; right shift hl
0733   CB 1D                  RR   l   
0735                SHIFTRIGHT2:      
0735   10 FA                  DJNZ   shiftRight1   
0737   E5                     PUSH   hl   
0738   42 4B                  LD   bc,de   ; restore IP
073A   DD E9                  JP   (ix)   
073C                             ; string
073C                             ; -- ptr                        ; points to start of string chars,
073C                             ; length is stored at start - 2 bytes
073C                STRING:      
073C   2A EC 37               LD   hl,(vHeapPtr)   ; hl = heap*
073F   23                     INC   hl   ; skip length field to start
0740   23                     INC   hl   
0741   E5                     PUSH   hl   ; save start of string
0742   03                     INC   bc   ; point to next char
0743   18 03                  JR   string2   
0745                STRING1:      
0745   77                     LD   (hl),a   
0746   23                     INC   hl   ; increase count
0747   03                     INC   bc   ; point to next char
0748                STRING2:      
0748   0A                     LD   a,(bc)   
0749   FE 22                  CP   DQUOTE   ; " is the string terminator
074B   20 F8                  JR   nz,string1   
074D   FE 60                  CP   "`"   ; ` is the string terminator used in testing
074F   20 F4                  JR   nz,string1   
0751   AF                     XOR   a   ; write NUL to terminate string
0752   77                     LD   (hl),a   ; hl = end of string
0753   23                     INC   hl   
0754   22 EC 37               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0757   2B                     DEC   hl   ; hl = end of string without terminator
0758   D1                     POP   de   ; de = start of string
0759   D5                     PUSH   de   ; return start of string
075A   B7                     OR   a   ; hl = length bytes, de = start of string
075B   ED 52                  SBC   hl,de   
075D   EB                     EX   de,hl   
075E   2B                     DEC   hl   ; write length bytes to length field at start - 2
075F   72                     LD   (hl),d   
0760   2B                     DEC   hl   
0761   73                     LD   (hl),e   
0762   DD E9                  JP   (ix)   
0764                SUB:         ; negative sign or subtract
0764   03                     INC   bc   ; check if sign of a number
0765   0A                     LD   a,(bc)   
0766   0B                     DEC   bc   
0767   FE 30                  CP   "0"   
0769   38 05                  JR   c,sub1   
076B   FE 3A                  CP   "9"+1   
076D   DA 44 03               JP   c,num_   
0770                SUB1:        ; Subtract the value 2nd on stack from top of stack
0770   FE 2D                  CP   "-"   
0772   20 06                  JR   nz,sub2   
0774   03                     INC   bc   
0775   E1                     POP   hl   
0776   2B                     DEC   hl   
0777   C3 C7 04               JP   assign0   
077A                SUB2:        
077A   FE 3D                  CP   "="   ; += add to variable
077C   20 09                  JR   nz,sub3   
077E   03                     INC   bc   
077F   E1                     POP   hl   ; second term
0780   D1                     POP   de   ; first term
0781   B7                     OR   a   
0782   ED 52                  SBC   hl,de   
0784   C3 C7 04               JP   assign0   
0787                SUB3:        
0787   D1                     POP   de   ; second term
0788   E1                     POP   hl   ; Entry point for INVert
0789   B7                     OR   a   ; Entry point for NEGate
078A   ED 52                  SBC   hl,de   
078C   E5                     PUSH   hl   
078D   DD E9                  JP   (ix)   
078F                             ;*******************************************************************
078F                             ; commands
078F                             ;*******************************************************************
078F                COMMAND:      
078F   03                     INC   bc   
0790   0A                     LD   a,(bc)   
0791   FE 5C                  CP   $5C   ; \\ comment
0793   CA E5 07               JP   z,comment   
0796   FE 61                  CP   "a"   ; \a absolute
0798   CA D8 07               JP   z,abs1   
079B   FE 62                  CP   "b"   ; \b bytes
079D   CA EE 07               JP   z,bytes   
07A0   FE 66                  CP   "f"   ; \f func
07A2   CA F6 07               JP   z,func   
07A5   FE 46                  CP   "F"   ; \F false
07A7   CA 07 06               JP   z,false1   
07AA   FE 69                  CP   "i"   ; \i input
07AC   CA 0D 08               JP   z,input   
07AF   FE 6B                  CP   "k"   ; \k key
07B1   CA 18 08               JP   z,key   
07B4   FE 6F                  CP   "o"   ; \o output
07B6   CA 21 08               JP   z,output   
07B9   FE 72                  CP   "r"   ; \r repeat
07BB   CA 2A 08               JP   z,repeat   
07BE   FE 73                  CP   "s"   ; \s select
07C0   CA 32 08               JP   z,select   
07C3   FE 54                  CP   "T"   ; \T true
07C5   CA 01 06               JP   z,true1   
07C8   FE 77                  CP   "w"   ; \w words
07CA   CA 3C 08               JP   z,words   
07CD   FE 78                  CP   "x"   ; \x exit loop or block
07CF   CA 42 08               JP   z,blockExit   
07D2   21 01 00               LD   hl,1   ; error 1: unknown command
07D5   C3 C9 09               JP   error   
07D8                ABS1:        
07D8   E1                     POP   hl   
07D9   CB 7C                  BIT   7,h   
07DB   C8                     RET   z   
07DC   AF                     XOR   a   
07DD   95                     SUB   l   
07DE   6F                     LD   l,a   
07DF   9F                     SBC   a,a   
07E0   94                     SUB   h   
07E1   67                     LD   h,a   
07E2   E5                     PUSH   hl   
07E3   DD E9                  JP   (ix)   
07E5                COMMENT:      
07E5   03                     INC   bc   ; point to next char
07E6   0A                     LD   a,(bc)   
07E7   FE 20                  CP   " "   ; terminate on any char less than SP
07E9   30 FA                  JR   nc,comment   
07EB   0B                     DEC   bc   
07EC   DD E9                  JP   (ix)   
07EE                BYTES:       
07EE   21 01 00               LD   hl,1   
07F1                BYTES1:      
07F1   22 E6 37               LD   (vDataWidth),hl   
07F4   DD E9                  JP   (ix)   
07F6                             ; arg_list* block* -- ptr
07F6                FUNC:        
07F6   D1                     POP   de   ; de = block* hl = heap*
07F7   2A EC 37               LD   hl,(vHeapPtr)   
07FA   73                     LD   (hl),e   ; compile block*
07FB   23                     INC   hl   
07FC   72                     LD   (hl),d   
07FD   23                     INC   hl   
07FE   D1                     POP   de   ; de = block*
07FF   73                     LD   (hl),e   ; compile arg_list*
0800   23                     INC   hl   
0801   72                     LD   (hl),d   
0802   23                     INC   hl   
0803   ED 5B EC 37            LD   de,(vHeapPtr)   ; return func*
0807   D5                     PUSH   de   
0808   22 EC 37               LD   (vHeapPtr),hl   ; heap* += 4
080B   DD E9                  JP   (ix)   
080D                             ; Z80 port input
080D                             ; port -- value
080D                INPUT:       
080D   E1                     POP   hl   
080E   59                     LD   e,c   ; save IP
080F   4D                     LD   c,l   
0810   ED 68                  IN   l,(c)   
0812   26 00                  LD   h,0   
0814   4B                     LD   c,e   ; restore IP
0815   E5                     PUSH   hl   
0816   DD E9                  JP   (ix)   
0818                KEY:         
0818   CD 81 00               CALL   getchar   
081B   26 00                  LD   h,0   
081D   6F                     LD   l,a   
081E   E5                     PUSH   hl   
081F   DD E9                  JP   (ix)   
0821                             ; Z80 port output
0821                             ; value port --
0821                OUTPUT:      
0821   E1                     POP   hl   
0822   59                     LD   e,c   ; save IP
0823   4D                     LD   c,l   
0824   E1                     POP   hl   
0825   ED 69                  OUT   (c),l   
0827   4B                     LD   c,e   ; restore IP
0828   DD E9                  JP   (ix)   
082A                             ; repeat
082A                             ; block* --
082A                REPEAT:      
082A   0B                     DEC   bc   ; rewind IP to before \r
082B   0B                     DEC   bc   
082C   E1                     POP   hl   
082D   E5                     PUSH   hl   
082E   E5                     PUSH   hl   
082F   C3 0D 06               JP   go   
0832                             ; select
0832                             ; index array -- value
0832                SELECT:      
0832   D1                     POP   de   ; de = array
0833   E1                     POP   hl   ; hl = index
0834   29                     ADD   hl,hl   ; if data width = 2 then double
0835   19                     ADD   hl,de   ; add addr
0836   5E                     LD   e,(hl)   
0837   23                     INC   hl   
0838   56                     LD   d,(hl)   
0839   C3 0E 06               JP   go1   
083C                WORDS:       
083C   21 02 00               LD   hl,2   
083F   C3 F1 07               JP   bytes1   
0842                BLOCKEXIT:      
0842   E1                     POP   hl   
0843   7D                     LD   a,l   
0844   B4                     OR   h   
0845   28 02                  JR   z,blockExit1   
0847   DD E9                  JP   (ix)   
0849                BLOCKEXIT1:      
0849   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
084C   FD 66 07               LD   h,(iy+7)   
084F   23                     INC   hl   ; forward IP on stack to after \r
0850   23                     INC   hl   
0851   FD 75 06               LD   (iy+6),l   
0854   FD 74 07               LD   (iy+7),h   
0857   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
085A   FD 56 03               LD   d,(iy+3)   
085D   13                     INC   de   
085E   13                     INC   de   
085F   FD 73 02               LD   (iy+2),e   ; hl = first_arg*, is it in this scope?
0862   FD 72 03               LD   (iy+3),d   
0865   C3 3F 05               JP   blockEnd   
0868                             ; 
0868                             ; 
0868                             ; 
0868                             ; 
0868                             ; c b --
0868                             ; loops until c = 0
0868                LOOP:        
0868   DD E9                  JP   (ix)   
086A                             ;     pop de                      ; de = block                    c
086A                             ;     pop hl                      ; hl = condition
086A                             ;     push de
086A                             ;     push bc                     ; push IP
086A                             ;     ld bc,de                    ; bc = block
086A                             ;     ld e,(iy+2)                 ; get first_arg* from parent stack frame
086A                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
086A                             ;     push de                     ; push first_arg*
086A                             ;     push iy                     ; push BP
086A                             ;     ld iy,0                     ; iy = sp
086A                             ;     add iy,sp
086A                             ; loop1:
086A                             ;     ld a,l                      ; bc = block, hl = condition = zero?
086A                             ;     or h
086A                             ;     jr z,loop3
086A                             ;     ld de,loop2-1               ; IP return address
086A                             ;     push de
086A                             ;     ld e,(iy+2)                 ; push parent first_arg*
086A                             ;     ld d,(iy+3)
086A                             ;     push de                     ;
086A                             ;     push iy                     ; push BP
086A                             ;     ld iy,0                     ; iy = sp
086A                             ;     add iy,sp
086A                             ;     push hl                     ; push condition
086A                             ;     dec bc
086A                             ;     jp (ix)
086A                             ; loop2:
086A                             ;     db ESC                      ; escape from interpreter
086A                             ;     ld c,(iy+6)                 ; bc = block
086A                             ;     ld b,(iy+7)
086A                             ;     pop hl                      ; hl = condition
086A                             ;     jr loop1
086A                             ; loop3:
086A                             ;     ld d,iyh                    ; de = BP
086A                             ;     ld e,iyl
086A                             ;     ex de,hl                    ; hl = BP, de = result
086A                             ;     ld sp,hl                    ; sp = BP
086A                             ;     pop hl                      ; hl = old BP
086A                             ;     pop bc                      ; pop first_arg* (discard)
086A                             ;     pop bc                      ; bc = IP
086A                             ;     ld sp,hl                    ; sp = old BP
086A                             ;     ld iy,0                     ; iy = sp
086A                             ;     add iy,sp
086A                             ;     ld ix,(vNext)                  ; needed?
086A                             ;     jp (ix)
086A                             ; str -- num
086A                             ; hash:
086A                             ; pop hl
086A                             ; push bc
086A                             ; ld bc,hl
086A                             ; call hashStr
086A                             ; pop bc
086A                             ; push hl
086A                             ; jp (ix)
086A                             ; sqrt1:
086A                             ;     pop hl
086A                             ;     push bc
086A                             ;     call squareRoot
086A                             ;     ld (vRemain),bc
086A                             ;     pop bc
086A                             ;     push de
086A                             ;     jp (ix)
086A                FILTER:      
086A                MAP:         
086A                SCAN:        
086A   DD E9                  JP   (ix)   
086C                             ; -------------------------------------------------------------------------------
086C                             ; ; hash C-string
086C                             ; ; BC = str
086C                             ; ; HL = hash
086C                             ; hashStr:
086C                             ;     ld (vHashStr),bc                    ; store source string
086C                             ;     ld hl,0
086C                             ; hashStr1:
086C                             ;     ld a,(bc)                           ; load next char
086C                             ;     inc bc
086C                             ;     cp 0                                ; NUL?
086C                             ;     ret z
086C                             ; hashStr2:
086C                             ;     ld d,0
086C                             ;     ld e,a
086C                             ;     add hl,de
086C                             ;     ld de,hl                            ; hl *= 193 (11000001)
086C                             ;     add hl,hl                           ; shift left
086C                             ;     add hl,de                           ; add
086C                             ;     add hl,hl                           ; shift left
086C                             ;     add hl,hl                           ; shift left
086C                             ;     add hl,hl                           ; shift left
086C                             ;     add hl,hl                           ; shift left
086C                             ;     add hl,hl                           ; shift left
086C                             ;     add hl,hl                           ; shift left
086C                             ;     add hl,de                           ; add
086C                             ;     jr hashStr1
086C                             ; ; squareroot
086C                             ; ; Input: HL = value
086C                             ; ; Result: DE = square root BC = remainder
086C                             ; squareRoot:
086C                             ;     ld bc,0800h
086C                             ;     ld e,c
086C                             ;     xor a
086C                             ; squareRoot1:
086C                             ;     add hl,hl
086C                             ;     rl c
086C                             ;     adc hl,hl
086C                             ;     rl c
086C                             ;     jr nc,$+4
086C                             ;     set 0,l
086C                             ;     ld a,e
086C                             ;     add a,a
086C                             ;     ld e,a
086C                             ;     add a,a
086C                             ;     bit 0,l
086C                             ;     jr nz,$+5
086C                             ;     sub c
086C                             ;     jr nc,squareRoot4
086C                             ;     ld a,c
086C                             ;     sub e
086C                             ;     inc e
086C                             ;     sub e
086C                             ;     ld c,a
086C                             ; squareRoot4:
086C                             ;     djnz squareRoot1
086C                             ;     bit 0,l
086C                             ;     jr z,squareRoot5
086C                             ;     inc b
086C                             ; squareRoot5:
086C                             ;     ld d,0
086C                             ;     ret
086C                             ; print decimal
086C                             ; hl = value
086C                PRTDEC:      
086C   CB 7C                  BIT   7,h   
086E   28 0B                  JR   z,prtdec0   
0870   3E 2D                  LD   a,"-"   
0872   CD 85 00               CALL   putchar   
0875   AF                     XOR   a   
0876   95                     SUB   l   
0877   6F                     LD   l,a   
0878   9F                     SBC   a,a   
0879   94                     SUB   h   
087A   67                     LD   h,a   
087B                PRTDEC0:      
087B   C5                     PUSH   bc   
087C   0E 00                  LD   c,0   ; leading zeros flag = false
087E   11 F0 D8               LD   de,-10000   
0881   CD 9D 08               CALL   prtdec1   
0884   11 18 FC               LD   de,-1000   
0887   CD 9D 08               CALL   prtdec1   
088A   11 9C FF               LD   de,-100   
088D   CD 9D 08               CALL   prtdec1   
0890   1E F6                  LD   e,-10   
0892   CD 9D 08               CALL   prtdec1   
0895   0C                     INC   c   ; flag = true for at least digit
0896   1E FF                  LD   e,-1   
0898   CD 9D 08               CALL   prtdec1   
089B   C1                     POP   bc   
089C   C9                     RET      
089D                PRTDEC1:      
089D   06 2F                  LD   b,"0"-1   
089F                PRTDEC2:      
089F   04                     INC   b   
08A0   19                     ADD   hl,de   
08A1   38 FC                  JR   c,prtdec2   
08A3   ED 52                  SBC   hl,de   
08A5   3E 30                  LD   a,"0"   
08A7   B8                     CP   b   
08A8   20 05                  JR   nz,prtdec3   
08AA   AF                     XOR   a   
08AB   B1                     OR   c   
08AC   C8                     RET   z   
08AD   18 01                  JR   prtdec4   
08AF                PRTDEC3:      
08AF   0C                     INC   c   
08B0                PRTDEC4:      
08B0   78                     LD   a,b   
08B1   C3 85 00               JP   putchar   
08B4                PRTHEX:      ; display hl as a 16-bit number in hex.
08B4   C5                     PUSH   bc   ; preserve the IP
08B5   7C                     LD   a,h   
08B6   CD BF 08               CALL   prthex2   
08B9   7D                     LD   a,l   
08BA   CD BF 08               CALL   prthex2   
08BD   C1                     POP   bc   
08BE   C9                     RET      
08BF                PRTHEX2:      
08BF   4F                     LD   c,a   
08C0   1F                     RRA      
08C1   1F                     RRA      
08C2   1F                     RRA      
08C3   1F                     RRA      
08C4   CD C8 08               CALL   prthex3   
08C7   79                     LD   a,c   
08C8                PRTHEX3:      
08C8   E6 0F                  AND   0x0F   
08CA   C6 90                  ADD   a,0x90   
08CC   27                     DAA      
08CD   CE 40                  ADC   a,0x40   
08CF   27                     DAA      
08D0   C3 85 00               JP   putchar   
08D3                PRTSTR0:      
08D3   CD 85 00               CALL   putchar   
08D6   23                     INC   hl   
08D7                PRTSTR:      
08D7   7E                     LD   a,(hl)   
08D8   B7                     OR   a   
08D9   20 F8                  JR   nz,prtstr0   
08DB   C9                     RET      
08DC                             ; **************************************************************************
08DC                             ; calculate nesting value
08DC                             ; a is char to be tested,
08DC                             ; e is the nesting value (initially 0)
08DC                             ; e is increased by ( and [
08DC                             ; e is decreased by ) and ]
08DC                             ; e has its bit 7 toggled by `
08DC                             ; limited to 127 levels
08DC                             ; **************************************************************************
08DC                NESTING:      
08DC   FE 22                  CP   DQUOTE   ; quote char
08DE   28 06                  JR   z,nesting0   
08E0   FE 60                  CP   "`"   ; quote char
08E2   28 02                  JR   z,nesting0   
08E4   18 0A                  JR   nesting1   
08E6                NESTING0:      
08E6   CB 7B                  BIT   7,e   
08E8   28 03                  JR   z,nesting1a   
08EA   CB BB                  RES   7,e   
08EC   C9                     RET      
08ED                NESTING1A:      
08ED   CB FB                  SET   7,e   
08EF   C9                     RET      
08F0                NESTING1:      
08F0   CB 7B                  BIT   7,e   
08F2   C0                     RET   nz   
08F3   FE 7B                  CP   "{"   
08F5   28 08                  JR   z,nesting2   
08F7   FE 5B                  CP   "["   
08F9   28 04                  JR   z,nesting2   
08FB   FE 28                  CP   "("   
08FD   20 02                  JR   nz,nesting3   
08FF                NESTING2:      
08FF   1C                     INC   e   
0900   C9                     RET      
0901                NESTING3:      
0901   FE 7D                  CP   "}"   
0903   28 07                  JR   z,nesting4   
0905   FE 5D                  CP   "]"   
0907   28 03                  JR   z,nesting4   
0909   FE 29                  CP   ")"   
090B   C0                     RET   nz   
090C                NESTING4:      
090C   1D                     DEC   e   
090D   C9                     RET      
090E                PROMPT:      
090E   CD 1E 09               CALL   printStr   
0911   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0916   C9                     RET      
0917                CRLF:        
0917   CD 1E 09               CALL   printStr   
091A   0D 0A 00               .CSTR   "\r\n"   
091D   C9                     RET      
091E                             ; prints a null teminated string
091E                             ; the string should be immedaitely following the call
091E                PRINTSTR:      
091E   E3                     EX   (sp),hl   ; swap			
091F   CD D7 08               CALL   prtstr   
0922   23                     INC   hl   ; inc past NUL
0923   E3                     EX   (sp),hl   ; put it back	
0924   C9                     RET      
0925                INIT:        
0925   DD 2A EA 37            LD   ix,(vNext)   
0929   FD 21 80 36            LD   iy,STACK   
092D   21 80 01               LD   hl,isysVars   
0930   11 E6 37               LD   de,sysVars   
0933   01 10 00               LD   bc,8 * 2   
0936   ED B0                  LDIR      
0938   21 00 37               LD   hl,vars   ; 52 vars LO HI
093B   06 34                  LD   b,26*2   
093D   AF                     XOR   a   
093E                INIT0:       
093E   77                     LD   (hl),a   
093F   23                     INC   hl   
0940   10 FC                  DJNZ   init0   
0942   C9                     RET      
0943                START:       
0943   31 80 36               LD   sp,STACK   ; start of monty
0946   CD 25 09               CALL   init   ; setups
0949   CD 1E 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
094C   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0959                INTERPRET:      
0959   CD 0E 09               CALL   prompt   
095C   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
095F   ED 43 E8 37            LD   (vTIBPtr),bc   
0963                INTERPRET2:      ; calc nesting (a macro might have changed it)
0963   1E 00                  LD   e,0   ; initilize nesting value
0965   C5                     PUSH   bc   ; save offset into TIB,
0966                             ; bc is also the count of chars in TIB
0966   21 00 38               LD   hl,TIB   ; hl is start of TIB
0969   18 06                  JR   interpret4   
096B                INTERPRET3:      
096B   7E                     LD   a,(hl)   ; a = char in TIB
096C   23                     INC   hl   ; inc pointer into TIB
096D   0B                     DEC   bc   ; dec count of chars in TIB
096E   CD DC 08               CALL   nesting   ; update nesting value
0971                INTERPRET4:      
0971   79                     LD   a,c   ; is count zero?
0972   B0                     OR   b   
0973   20 F6                  JR   nz,interpret3   ; if not loop
0975   C1                     POP   bc   ; restore offset into TIB
0976                INTERPRET5:      
0976   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0979   FE 20                  CP   $20   ; compare to space
097B   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
097D   FE 00                  CP   $0   ; is it end of string? NUL end of string
097F                             ; ???? NEEDED?
097F   28 27                  JR   z,interpret8   
0981   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0983   28 10                  JR   z,interpret7   ; if anything else its macro/control
0985                             ; macro
0985                             ;  ld (vTIBPtr),bc
0985                             ;  ld hl,ctrlCodes
0985                             ;  add a,l			            ; look up key of macros
0985                             ;  ld l,a
0985                             ;  ld e,(hl)
0985                             ;  ld a,e
0985                             ;  or a
0985                             ;  jr z,macro1
0985                             ;  ld d,msb(macros)
0985                             ;  push de
0985                             ;  call call		            ; monty exec_ operation and jump to it
0985                             ;  db DC1,0
0985                             ; macro1:
0985                             ;  ld bc,(vTIBPtr)
0985   18 DC                  JR   interpret2   
0987                INTERPRET6:      
0987   21 00 38               LD   hl,TIB   
098A   09                     ADD   hl,bc   
098B   77                     LD   (hl),a   ; store the character in textbuf
098C   03                     INC   bc   
098D   CD 85 00               CALL   putchar   ; echo character to screen
0990   CD DC 08               CALL   nesting   
0993   18 E1                  JR   interpret5   ; wait for next character
0995                INTERPRET7:      
0995   21 00 38               LD   hl,TIB   
0998   09                     ADD   hl,bc   
0999   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
099B   23                     INC   hl   
099C   36 0A                  LD   (hl),"\n"   
099E   23                     INC   hl   
099F   03                     INC   bc   
09A0   03                     INC   bc   
09A1   CD 17 09               CALL   crlf   ; echo character to screen
09A4   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09A5   B7                     OR   a   
09A6   20 CE                  JR   nz,interpret5   
09A8                INTERPRET8:      
09A8   ED 43 E8 37            LD   (vTIBPtr),bc   
09AC   01 00 38               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09AF                             ; we pressed enter
09AF   0B                     DEC   bc   
09B0                NEXT:        
09B0   03                     INC   bc   ; Increment the IP
09B1   0A                     LD   a,(bc)   ; Get the next character and dispatch
09B2   FE 20                  CP   " "   ; whitespace?
09B4   28 FA                  JR   z,next   ; space? ignore
09B6   38 07                  JR   c,next1   
09B8   6F                     LD   l,a   ; index into table
09B9   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09BB   6E                     LD   l,(hl)   ; get low jump address
09BC   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09BE   E9                     JP   (hl)   ; Jump to routine
09BF                NEXT1:       
09BF   FE 00                  CP   NUL   ; end of input string?
09C1   28 03                  JR   z,exit_   
09C3   C3 59 09               JP   interpret   ; no, other whitespace, macros?
09C6                EXIT_:       
09C6   60 69                  LD   hl,bc   
09C8   E9                     JP   (hl)   
09C9                ERROR:       
09C9   CD 1E 09               CALL   printStr   
09CC   45 72 72 6F 72 20 00   .CSTR   "Error "   
09D3   CD 6C 08               CALL   prtdec   
09D6   C3 59 09               JP   interpret   
09D9                          ALIGN   $100   
0A00                TESTSSTART:      
0A00                             ; test "4 a= 1 a -= a",3
0A00                             ; test "4 i= { i \\x i. i 1 - i= } \\r i ", 0
0A00                          ;*Macro unroll:  test "0 j= 4 i= { i j += i \\x 1 i -= } \\r j ", 10
0A00   31 80 36               LD   SP,STACK   
0A03   CD 25 09               CALL   init   
0A06   CD 28 35               CALL   execStr   
0A09   30 20 6A 3D 20 34 20 69 3D 20 7B 20 69 20 6A 20 2B 3D 20 69 20 5C 78 20 31 20 69 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "0 j= 4 i= { i j += i \\x 1 i -= } \\r j "   
0A30                          ;*Macro unroll:  expect "0 j= 4 i= { i j += i \\x 1 i -= } \\r j ",10
0A30   E1                     POP   HL   
0A31   E5                     PUSH   HL   
0A32   11 0A 00               LD   DE,10   
0A35   B7                     OR   A   
0A36   ED 52                  SBC   HL,DE   
0A38   7D                     LD   A,L   
0A39   B4                     OR   H   
0A3A   28 71                  JR   Z,expectM_0_2201S43   
0A3C   CD 1E 09               CALL   printStr   
0A3F   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 69 20 6A 20 2B 3D 20 69 20 5C 78 20 31 20 69 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { i j += i \\x 1 i -= } \\r j "   
0A6C   CD 1E 09               CALL   printStr   
0A6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0A7E   21 0A 00               LD   HL,10   
0A81   CD 6C 08               CALL   prtdec   
0A84   CD 1E 09               CALL   printStr   
0A87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0A94   E1                     POP   hl   
0A95   E5                     PUSH   hl   
0A96   CD 6C 08               CALL   prtdec   
0A99   E1                     POP   hl   
0A9A   CD 1E 09               CALL   printStr   
0A9D   20 28 23 00            .CSTR   " (#"   
0AA1   CD B4 08               CALL   prthex   
0AA4   CD 1E 09               CALL   printStr   
0AA7   29 0D 0A 00            .CSTR   ")\r\n"   
0AAB   76                     HALT      
0AAC   00                     .CSTR      
0AAD                EXPECTM_0_2201S43:      
0AAD   E1                     POP   HL   
0AAE                             ; call printStr
0AAE                             ; .cstr "Done!"
0AAE                             ; HALT
0AAE                             ; 
0AAE                          ;*Macro unroll:  test "\\F", false
0AAE   31 80 36               LD   SP,STACK   
0AB1   CD 25 09               CALL   init   
0AB4   CD 28 35               CALL   execStr   
0AB7   5C 46 00               .CSTR   "\\F"   
0ABA                          ;*Macro unroll:  expect "\\F",false
0ABA   E1                     POP   HL   
0ABB   E5                     PUSH   HL   
0ABC   11 00 00               LD   DE,false   
0ABF   B7                     OR   A   
0AC0   ED 52                  SBC   HL,DE   
0AC2   7D                     LD   A,L   
0AC3   B4                     OR   H   
0AC4   28 4D                  JR   Z,expectM_0_2206S43   
0AC6   CD 1E 09               CALL   printStr   
0AC9   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0AD2   CD 1E 09               CALL   printStr   
0AD5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0AE4   21 00 00               LD   HL,false   
0AE7   CD 6C 08               CALL   prtdec   
0AEA   CD 1E 09               CALL   printStr   
0AED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0AFA   E1                     POP   hl   
0AFB   E5                     PUSH   hl   
0AFC   CD 6C 08               CALL   prtdec   
0AFF   E1                     POP   hl   
0B00   CD 1E 09               CALL   printStr   
0B03   20 28 23 00            .CSTR   " (#"   
0B07   CD B4 08               CALL   prthex   
0B0A   CD 1E 09               CALL   printStr   
0B0D   29 0D 0A 00            .CSTR   ")\r\n"   
0B11   76                     HALT      
0B12   00                     .CSTR      
0B13                EXPECTM_0_2206S43:      
0B13   E1                     POP   HL   
0B14                          ;*Macro unroll:  test "\\T", true
0B14   31 80 36               LD   SP,STACK   
0B17   CD 25 09               CALL   init   
0B1A   CD 28 35               CALL   execStr   
0B1D   5C 54 00               .CSTR   "\\T"   
0B20                          ;*Macro unroll:  expect "\\T",true
0B20   E1                     POP   HL   
0B21   E5                     PUSH   HL   
0B22   11 FF FF               LD   DE,true   
0B25   B7                     OR   A   
0B26   ED 52                  SBC   HL,DE   
0B28   7D                     LD   A,L   
0B29   B4                     OR   H   
0B2A   28 4D                  JR   Z,expectM_0_2207S43   
0B2C   CD 1E 09               CALL   printStr   
0B2F   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0B38   CD 1E 09               CALL   printStr   
0B3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B4A   21 FF FF               LD   HL,true   
0B4D   CD 6C 08               CALL   prtdec   
0B50   CD 1E 09               CALL   printStr   
0B53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B60   E1                     POP   hl   
0B61   E5                     PUSH   hl   
0B62   CD 6C 08               CALL   prtdec   
0B65   E1                     POP   hl   
0B66   CD 1E 09               CALL   printStr   
0B69   20 28 23 00            .CSTR   " (#"   
0B6D   CD B4 08               CALL   prthex   
0B70   CD 1E 09               CALL   printStr   
0B73   29 0D 0A 00            .CSTR   ")\r\n"   
0B77   76                     HALT      
0B78   00                     .CSTR      
0B79                EXPECTM_0_2207S43:      
0B79   E1                     POP   HL   
0B7A                          ;*Macro unroll:  test "1", 1
0B7A   31 80 36               LD   SP,STACK   
0B7D   CD 25 09               CALL   init   
0B80   CD 28 35               CALL   execStr   
0B83   31 00                  .CSTR   "1"   
0B85                          ;*Macro unroll:  expect "1",1
0B85   E1                     POP   HL   
0B86   E5                     PUSH   HL   
0B87   11 01 00               LD   DE,1   
0B8A   B7                     OR   A   
0B8B   ED 52                  SBC   HL,DE   
0B8D   7D                     LD   A,L   
0B8E   B4                     OR   H   
0B8F   28 4C                  JR   Z,expectM_0_2208S43   
0B91   CD 1E 09               CALL   printStr   
0B94   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0B9C   CD 1E 09               CALL   printStr   
0B9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BAE   21 01 00               LD   HL,1   
0BB1   CD 6C 08               CALL   prtdec   
0BB4   CD 1E 09               CALL   printStr   
0BB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BC4   E1                     POP   hl   
0BC5   E5                     PUSH   hl   
0BC6   CD 6C 08               CALL   prtdec   
0BC9   E1                     POP   hl   
0BCA   CD 1E 09               CALL   printStr   
0BCD   20 28 23 00            .CSTR   " (#"   
0BD1   CD B4 08               CALL   prthex   
0BD4   CD 1E 09               CALL   printStr   
0BD7   29 0D 0A 00            .CSTR   ")\r\n"   
0BDB   76                     HALT      
0BDC   00                     .CSTR      
0BDD                EXPECTM_0_2208S43:      
0BDD   E1                     POP   HL   
0BDE                          ;*Macro unroll:  test "2", 2
0BDE   31 80 36               LD   SP,STACK   
0BE1   CD 25 09               CALL   init   
0BE4   CD 28 35               CALL   execStr   
0BE7   32 00                  .CSTR   "2"   
0BE9                          ;*Macro unroll:  expect "2",2
0BE9   E1                     POP   HL   
0BEA   E5                     PUSH   HL   
0BEB   11 02 00               LD   DE,2   
0BEE   B7                     OR   A   
0BEF   ED 52                  SBC   HL,DE   
0BF1   7D                     LD   A,L   
0BF2   B4                     OR   H   
0BF3   28 4C                  JR   Z,expectM_0_2209S43   
0BF5   CD 1E 09               CALL   printStr   
0BF8   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0C00   CD 1E 09               CALL   printStr   
0C03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C12   21 02 00               LD   HL,2   
0C15   CD 6C 08               CALL   prtdec   
0C18   CD 1E 09               CALL   printStr   
0C1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C28   E1                     POP   hl   
0C29   E5                     PUSH   hl   
0C2A   CD 6C 08               CALL   prtdec   
0C2D   E1                     POP   hl   
0C2E   CD 1E 09               CALL   printStr   
0C31   20 28 23 00            .CSTR   " (#"   
0C35   CD B4 08               CALL   prthex   
0C38   CD 1E 09               CALL   printStr   
0C3B   29 0D 0A 00            .CSTR   ")\r\n"   
0C3F   76                     HALT      
0C40   00                     .CSTR      
0C41                EXPECTM_0_2209S43:      
0C41   E1                     POP   HL   
0C42                          ;*Macro unroll:  test "1", 1
0C42   31 80 36               LD   SP,STACK   
0C45   CD 25 09               CALL   init   
0C48   CD 28 35               CALL   execStr   
0C4B   31 00                  .CSTR   "1"   
0C4D                          ;*Macro unroll:  expect "1",1
0C4D   E1                     POP   HL   
0C4E   E5                     PUSH   HL   
0C4F   11 01 00               LD   DE,1   
0C52   B7                     OR   A   
0C53   ED 52                  SBC   HL,DE   
0C55   7D                     LD   A,L   
0C56   B4                     OR   H   
0C57   28 4C                  JR   Z,expectM_0_2210S43   
0C59   CD 1E 09               CALL   printStr   
0C5C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0C64   CD 1E 09               CALL   printStr   
0C67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C76   21 01 00               LD   HL,1   
0C79   CD 6C 08               CALL   prtdec   
0C7C   CD 1E 09               CALL   printStr   
0C7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C8C   E1                     POP   hl   
0C8D   E5                     PUSH   hl   
0C8E   CD 6C 08               CALL   prtdec   
0C91   E1                     POP   hl   
0C92   CD 1E 09               CALL   printStr   
0C95   20 28 23 00            .CSTR   " (#"   
0C99   CD B4 08               CALL   prthex   
0C9C   CD 1E 09               CALL   printStr   
0C9F   29 0D 0A 00            .CSTR   ")\r\n"   
0CA3   76                     HALT      
0CA4   00                     .CSTR      
0CA5                EXPECTM_0_2210S43:      
0CA5   E1                     POP   HL   
0CA6                          ;*Macro unroll:  test "0", 0
0CA6   31 80 36               LD   SP,STACK   
0CA9   CD 25 09               CALL   init   
0CAC   CD 28 35               CALL   execStr   
0CAF   30 00                  .CSTR   "0"   
0CB1                          ;*Macro unroll:  expect "0",0
0CB1   E1                     POP   HL   
0CB2   E5                     PUSH   HL   
0CB3   11 00 00               LD   DE,0   
0CB6   B7                     OR   A   
0CB7   ED 52                  SBC   HL,DE   
0CB9   7D                     LD   A,L   
0CBA   B4                     OR   H   
0CBB   28 4C                  JR   Z,expectM_0_2211S43   
0CBD   CD 1E 09               CALL   printStr   
0CC0   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0CC8   CD 1E 09               CALL   printStr   
0CCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CDA   21 00 00               LD   HL,0   
0CDD   CD 6C 08               CALL   prtdec   
0CE0   CD 1E 09               CALL   printStr   
0CE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CF0   E1                     POP   hl   
0CF1   E5                     PUSH   hl   
0CF2   CD 6C 08               CALL   prtdec   
0CF5   E1                     POP   hl   
0CF6   CD 1E 09               CALL   printStr   
0CF9   20 28 23 00            .CSTR   " (#"   
0CFD   CD B4 08               CALL   prthex   
0D00   CD 1E 09               CALL   printStr   
0D03   29 0D 0A 00            .CSTR   ")\r\n"   
0D07   76                     HALT      
0D08   00                     .CSTR      
0D09                EXPECTM_0_2211S43:      
0D09   E1                     POP   HL   
0D0A                          ;*Macro unroll:  test "10", 10
0D0A   31 80 36               LD   SP,STACK   
0D0D   CD 25 09               CALL   init   
0D10   CD 28 35               CALL   execStr   
0D13   31 30 00               .CSTR   "10"   
0D16                          ;*Macro unroll:  expect "10",10
0D16   E1                     POP   HL   
0D17   E5                     PUSH   HL   
0D18   11 0A 00               LD   DE,10   
0D1B   B7                     OR   A   
0D1C   ED 52                  SBC   HL,DE   
0D1E   7D                     LD   A,L   
0D1F   B4                     OR   H   
0D20   28 4D                  JR   Z,expectM_0_2212S43   
0D22   CD 1E 09               CALL   printStr   
0D25   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D2E   CD 1E 09               CALL   printStr   
0D31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D40   21 0A 00               LD   HL,10   
0D43   CD 6C 08               CALL   prtdec   
0D46   CD 1E 09               CALL   printStr   
0D49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D56   E1                     POP   hl   
0D57   E5                     PUSH   hl   
0D58   CD 6C 08               CALL   prtdec   
0D5B   E1                     POP   hl   
0D5C   CD 1E 09               CALL   printStr   
0D5F   20 28 23 00            .CSTR   " (#"   
0D63   CD B4 08               CALL   prthex   
0D66   CD 1E 09               CALL   printStr   
0D69   29 0D 0A 00            .CSTR   ")\r\n"   
0D6D   76                     HALT      
0D6E   00                     .CSTR      
0D6F                EXPECTM_0_2212S43:      
0D6F   E1                     POP   HL   
0D70                          ;*Macro unroll:  test "123", 123
0D70   31 80 36               LD   SP,STACK   
0D73   CD 25 09               CALL   init   
0D76   CD 28 35               CALL   execStr   
0D79   31 32 33 00            .CSTR   "123"   
0D7D                          ;*Macro unroll:  expect "123",123
0D7D   E1                     POP   HL   
0D7E   E5                     PUSH   HL   
0D7F   11 7B 00               LD   DE,123   
0D82   B7                     OR   A   
0D83   ED 52                  SBC   HL,DE   
0D85   7D                     LD   A,L   
0D86   B4                     OR   H   
0D87   28 4E                  JR   Z,expectM_0_2213S43   
0D89   CD 1E 09               CALL   printStr   
0D8C   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0D96   CD 1E 09               CALL   printStr   
0D99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DA8   21 7B 00               LD   HL,123   
0DAB   CD 6C 08               CALL   prtdec   
0DAE   CD 1E 09               CALL   printStr   
0DB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DBE   E1                     POP   hl   
0DBF   E5                     PUSH   hl   
0DC0   CD 6C 08               CALL   prtdec   
0DC3   E1                     POP   hl   
0DC4   CD 1E 09               CALL   printStr   
0DC7   20 28 23 00            .CSTR   " (#"   
0DCB   CD B4 08               CALL   prthex   
0DCE   CD 1E 09               CALL   printStr   
0DD1   29 0D 0A 00            .CSTR   ")\r\n"   
0DD5   76                     HALT      
0DD6   00                     .CSTR      
0DD7                EXPECTM_0_2213S43:      
0DD7   E1                     POP   HL   
0DD8                          ;*Macro unroll:  test "-1",-1
0DD8   31 80 36               LD   SP,STACK   
0DDB   CD 25 09               CALL   init   
0DDE   CD 28 35               CALL   execStr   
0DE1   2D 31 00               .CSTR   "-1"   
0DE4                          ;*Macro unroll:  expect "-1",-1
0DE4   E1                     POP   HL   
0DE5   E5                     PUSH   HL   
0DE6   11 FF FF               LD   DE,-1   
0DE9   B7                     OR   A   
0DEA   ED 52                  SBC   HL,DE   
0DEC   7D                     LD   A,L   
0DED   B4                     OR   H   
0DEE   28 4D                  JR   Z,expectM_0_2214S43   
0DF0   CD 1E 09               CALL   printStr   
0DF3   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0DFC   CD 1E 09               CALL   printStr   
0DFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E0E   21 FF FF               LD   HL,-1   
0E11   CD 6C 08               CALL   prtdec   
0E14   CD 1E 09               CALL   printStr   
0E17   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E24   E1                     POP   hl   
0E25   E5                     PUSH   hl   
0E26   CD 6C 08               CALL   prtdec   
0E29   E1                     POP   hl   
0E2A   CD 1E 09               CALL   printStr   
0E2D   20 28 23 00            .CSTR   " (#"   
0E31   CD B4 08               CALL   prthex   
0E34   CD 1E 09               CALL   printStr   
0E37   29 0D 0A 00            .CSTR   ")\r\n"   
0E3B   76                     HALT      
0E3C   00                     .CSTR      
0E3D                EXPECTM_0_2214S43:      
0E3D   E1                     POP   HL   
0E3E                          ;*Macro unroll:  test "''", 0
0E3E   31 80 36               LD   SP,STACK   
0E41   CD 25 09               CALL   init   
0E44   CD 28 35               CALL   execStr   
0E47   27 27 00               .CSTR   "''"   
0E4A                          ;*Macro unroll:  expect "''",0
0E4A   E1                     POP   HL   
0E4B   E5                     PUSH   HL   
0E4C   11 00 00               LD   DE,0   
0E4F   B7                     OR   A   
0E50   ED 52                  SBC   HL,DE   
0E52   7D                     LD   A,L   
0E53   B4                     OR   H   
0E54   28 4D                  JR   Z,expectM_0_2215S43   
0E56   CD 1E 09               CALL   printStr   
0E59   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0E62   CD 1E 09               CALL   printStr   
0E65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E74   21 00 00               LD   HL,0   
0E77   CD 6C 08               CALL   prtdec   
0E7A   CD 1E 09               CALL   printStr   
0E7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E8A   E1                     POP   hl   
0E8B   E5                     PUSH   hl   
0E8C   CD 6C 08               CALL   prtdec   
0E8F   E1                     POP   hl   
0E90   CD 1E 09               CALL   printStr   
0E93   20 28 23 00            .CSTR   " (#"   
0E97   CD B4 08               CALL   prthex   
0E9A   CD 1E 09               CALL   printStr   
0E9D   29 0D 0A 00            .CSTR   ")\r\n"   
0EA1   76                     HALT      
0EA2   00                     .CSTR      
0EA3                EXPECTM_0_2215S43:      
0EA3   E1                     POP   HL   
0EA4                          ;*Macro unroll:  test "'a'", $61
0EA4   31 80 36               LD   SP,STACK   
0EA7   CD 25 09               CALL   init   
0EAA   CD 28 35               CALL   execStr   
0EAD   27 61 27 00            .CSTR   "'a'"   
0EB1                          ;*Macro unroll:  expect "'a'",$61
0EB1   E1                     POP   HL   
0EB2   E5                     PUSH   HL   
0EB3   11 61 00               LD   DE,$61   
0EB6   B7                     OR   A   
0EB7   ED 52                  SBC   HL,DE   
0EB9   7D                     LD   A,L   
0EBA   B4                     OR   H   
0EBB   28 4E                  JR   Z,expectM_0_2216S43   
0EBD   CD 1E 09               CALL   printStr   
0EC0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0ECA   CD 1E 09               CALL   printStr   
0ECD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EDC   21 61 00               LD   HL,$61   
0EDF   CD 6C 08               CALL   prtdec   
0EE2   CD 1E 09               CALL   printStr   
0EE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EF2   E1                     POP   hl   
0EF3   E5                     PUSH   hl   
0EF4   CD 6C 08               CALL   prtdec   
0EF7   E1                     POP   hl   
0EF8   CD 1E 09               CALL   printStr   
0EFB   20 28 23 00            .CSTR   " (#"   
0EFF   CD B4 08               CALL   prthex   
0F02   CD 1E 09               CALL   printStr   
0F05   29 0D 0A 00            .CSTR   ")\r\n"   
0F09   76                     HALT      
0F0A   00                     .CSTR      
0F0B                EXPECTM_0_2216S43:      
0F0B   E1                     POP   HL   
0F0C                          ;*Macro unroll:  test "'\\''", $27
0F0C   31 80 36               LD   SP,STACK   
0F0F   CD 25 09               CALL   init   
0F12   CD 28 35               CALL   execStr   
0F15   27 5C 27 27 00         .CSTR   "'\\''"   
0F1A                          ;*Macro unroll:  expect "'\\''",$27
0F1A   E1                     POP   HL   
0F1B   E5                     PUSH   HL   
0F1C   11 27 00               LD   DE,$27   
0F1F   B7                     OR   A   
0F20   ED 52                  SBC   HL,DE   
0F22   7D                     LD   A,L   
0F23   B4                     OR   H   
0F24   28 4F                  JR   Z,expectM_0_2217S43   
0F26   CD 1E 09               CALL   printStr   
0F29   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F34   CD 1E 09               CALL   printStr   
0F37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F46   21 27 00               LD   HL,$27   
0F49   CD 6C 08               CALL   prtdec   
0F4C   CD 1E 09               CALL   printStr   
0F4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F5C   E1                     POP   hl   
0F5D   E5                     PUSH   hl   
0F5E   CD 6C 08               CALL   prtdec   
0F61   E1                     POP   hl   
0F62   CD 1E 09               CALL   printStr   
0F65   20 28 23 00            .CSTR   " (#"   
0F69   CD B4 08               CALL   prthex   
0F6C   CD 1E 09               CALL   printStr   
0F6F   29 0D 0A 00            .CSTR   ")\r\n"   
0F73   76                     HALT      
0F74   00                     .CSTR      
0F75                EXPECTM_0_2217S43:      
0F75   E1                     POP   HL   
0F76                          ;*Macro unroll:  test "#10", $10
0F76   31 80 36               LD   SP,STACK   
0F79   CD 25 09               CALL   init   
0F7C   CD 28 35               CALL   execStr   
0F7F   23 31 30 00            .CSTR   "#10"   
0F83                          ;*Macro unroll:  expect "#10",$10
0F83   E1                     POP   HL   
0F84   E5                     PUSH   HL   
0F85   11 10 00               LD   DE,$10   
0F88   B7                     OR   A   
0F89   ED 52                  SBC   HL,DE   
0F8B   7D                     LD   A,L   
0F8C   B4                     OR   H   
0F8D   28 4E                  JR   Z,expectM_0_2218S43   
0F8F   CD 1E 09               CALL   printStr   
0F92   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0F9C   CD 1E 09               CALL   printStr   
0F9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FAE   21 10 00               LD   HL,$10   
0FB1   CD 6C 08               CALL   prtdec   
0FB4   CD 1E 09               CALL   printStr   
0FB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FC4   E1                     POP   hl   
0FC5   E5                     PUSH   hl   
0FC6   CD 6C 08               CALL   prtdec   
0FC9   E1                     POP   hl   
0FCA   CD 1E 09               CALL   printStr   
0FCD   20 28 23 00            .CSTR   " (#"   
0FD1   CD B4 08               CALL   prthex   
0FD4   CD 1E 09               CALL   printStr   
0FD7   29 0D 0A 00            .CSTR   ")\r\n"   
0FDB   76                     HALT      
0FDC   00                     .CSTR      
0FDD                EXPECTM_0_2218S43:      
0FDD   E1                     POP   HL   
0FDE                          ;*Macro unroll:  test "#FF", $FF
0FDE   31 80 36               LD   SP,STACK   
0FE1   CD 25 09               CALL   init   
0FE4   CD 28 35               CALL   execStr   
0FE7   23 46 46 00            .CSTR   "#FF"   
0FEB                          ;*Macro unroll:  expect "#FF",$FF
0FEB   E1                     POP   HL   
0FEC   E5                     PUSH   HL   
0FED   11 FF 00               LD   DE,$FF   
0FF0   B7                     OR   A   
0FF1   ED 52                  SBC   HL,DE   
0FF3   7D                     LD   A,L   
0FF4   B4                     OR   H   
0FF5   28 4E                  JR   Z,expectM_0_2219S43   
0FF7   CD 1E 09               CALL   printStr   
0FFA   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1004   CD 1E 09               CALL   printStr   
1007   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1016   21 FF 00               LD   HL,$FF   
1019   CD 6C 08               CALL   prtdec   
101C   CD 1E 09               CALL   printStr   
101F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
102C   E1                     POP   hl   
102D   E5                     PUSH   hl   
102E   CD 6C 08               CALL   prtdec   
1031   E1                     POP   hl   
1032   CD 1E 09               CALL   printStr   
1035   20 28 23 00            .CSTR   " (#"   
1039   CD B4 08               CALL   prthex   
103C   CD 1E 09               CALL   printStr   
103F   29 0D 0A 00            .CSTR   ")\r\n"   
1043   76                     HALT      
1044   00                     .CSTR      
1045                EXPECTM_0_2219S43:      
1045   E1                     POP   HL   
1046                          ;*Macro unroll:  test "-1 2 +",1
1046   31 80 36               LD   SP,STACK   
1049   CD 25 09               CALL   init   
104C   CD 28 35               CALL   execStr   
104F   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1056                          ;*Macro unroll:  expect "-1 2 +",1
1056   E1                     POP   HL   
1057   E5                     PUSH   HL   
1058   11 01 00               LD   DE,1   
105B   B7                     OR   A   
105C   ED 52                  SBC   HL,DE   
105E   7D                     LD   A,L   
105F   B4                     OR   H   
1060   28 51                  JR   Z,expectM_0_2220S43   
1062   CD 1E 09               CALL   printStr   
1065   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1072   CD 1E 09               CALL   printStr   
1075   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1084   21 01 00               LD   HL,1   
1087   CD 6C 08               CALL   prtdec   
108A   CD 1E 09               CALL   printStr   
108D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
109A   E1                     POP   hl   
109B   E5                     PUSH   hl   
109C   CD 6C 08               CALL   prtdec   
109F   E1                     POP   hl   
10A0   CD 1E 09               CALL   printStr   
10A3   20 28 23 00            .CSTR   " (#"   
10A7   CD B4 08               CALL   prthex   
10AA   CD 1E 09               CALL   printStr   
10AD   29 0D 0A 00            .CSTR   ")\r\n"   
10B1   76                     HALT      
10B2   00                     .CSTR      
10B3                EXPECTM_0_2220S43:      
10B3   E1                     POP   HL   
10B4                          ;*Macro unroll:  test "-1 1 +",0
10B4   31 80 36               LD   SP,STACK   
10B7   CD 25 09               CALL   init   
10BA   CD 28 35               CALL   execStr   
10BD   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
10C4                          ;*Macro unroll:  expect "-1 1 +",0
10C4   E1                     POP   HL   
10C5   E5                     PUSH   HL   
10C6   11 00 00               LD   DE,0   
10C9   B7                     OR   A   
10CA   ED 52                  SBC   HL,DE   
10CC   7D                     LD   A,L   
10CD   B4                     OR   H   
10CE   28 51                  JR   Z,expectM_0_2221S43   
10D0   CD 1E 09               CALL   printStr   
10D3   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
10E0   CD 1E 09               CALL   printStr   
10E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10F2   21 00 00               LD   HL,0   
10F5   CD 6C 08               CALL   prtdec   
10F8   CD 1E 09               CALL   printStr   
10FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1108   E1                     POP   hl   
1109   E5                     PUSH   hl   
110A   CD 6C 08               CALL   prtdec   
110D   E1                     POP   hl   
110E   CD 1E 09               CALL   printStr   
1111   20 28 23 00            .CSTR   " (#"   
1115   CD B4 08               CALL   prthex   
1118   CD 1E 09               CALL   printStr   
111B   29 0D 0A 00            .CSTR   ")\r\n"   
111F   76                     HALT      
1120   00                     .CSTR      
1121                EXPECTM_0_2221S43:      
1121   E1                     POP   HL   
1122                          ;*Macro unroll:  test "1 2 +", 3
1122   31 80 36               LD   SP,STACK   
1125   CD 25 09               CALL   init   
1128   CD 28 35               CALL   execStr   
112B   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1131                          ;*Macro unroll:  expect "1 2 +",3
1131   E1                     POP   HL   
1132   E5                     PUSH   HL   
1133   11 03 00               LD   DE,3   
1136   B7                     OR   A   
1137   ED 52                  SBC   HL,DE   
1139   7D                     LD   A,L   
113A   B4                     OR   H   
113B   28 50                  JR   Z,expectM_0_2222S43   
113D   CD 1E 09               CALL   printStr   
1140   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
114C   CD 1E 09               CALL   printStr   
114F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
115E   21 03 00               LD   HL,3   
1161   CD 6C 08               CALL   prtdec   
1164   CD 1E 09               CALL   printStr   
1167   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1174   E1                     POP   hl   
1175   E5                     PUSH   hl   
1176   CD 6C 08               CALL   prtdec   
1179   E1                     POP   hl   
117A   CD 1E 09               CALL   printStr   
117D   20 28 23 00            .CSTR   " (#"   
1181   CD B4 08               CALL   prthex   
1184   CD 1E 09               CALL   printStr   
1187   29 0D 0A 00            .CSTR   ")\r\n"   
118B   76                     HALT      
118C   00                     .CSTR      
118D                EXPECTM_0_2222S43:      
118D   E1                     POP   HL   
118E                          ;*Macro unroll:  test "4 1 2 +", 3
118E   31 80 36               LD   SP,STACK   
1191   CD 25 09               CALL   init   
1194   CD 28 35               CALL   execStr   
1197   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
119F                          ;*Macro unroll:  expect "4 1 2 +",3
119F   E1                     POP   HL   
11A0   E5                     PUSH   HL   
11A1   11 03 00               LD   DE,3   
11A4   B7                     OR   A   
11A5   ED 52                  SBC   HL,DE   
11A7   7D                     LD   A,L   
11A8   B4                     OR   H   
11A9   28 52                  JR   Z,expectM_0_2223S43   
11AB   CD 1E 09               CALL   printStr   
11AE   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
11BC   CD 1E 09               CALL   printStr   
11BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11CE   21 03 00               LD   HL,3   
11D1   CD 6C 08               CALL   prtdec   
11D4   CD 1E 09               CALL   printStr   
11D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11E4   E1                     POP   hl   
11E5   E5                     PUSH   hl   
11E6   CD 6C 08               CALL   prtdec   
11E9   E1                     POP   hl   
11EA   CD 1E 09               CALL   printStr   
11ED   20 28 23 00            .CSTR   " (#"   
11F1   CD B4 08               CALL   prthex   
11F4   CD 1E 09               CALL   printStr   
11F7   29 0D 0A 00            .CSTR   ")\r\n"   
11FB   76                     HALT      
11FC   00                     .CSTR      
11FD                EXPECTM_0_2223S43:      
11FD   E1                     POP   HL   
11FE                          ;*Macro unroll:  test "1 2 +", 3
11FE   31 80 36               LD   SP,STACK   
1201   CD 25 09               CALL   init   
1204   CD 28 35               CALL   execStr   
1207   31 20 32 20 2B 00      .CSTR   "1 2 +"   
120D                          ;*Macro unroll:  expect "1 2 +",3
120D   E1                     POP   HL   
120E   E5                     PUSH   HL   
120F   11 03 00               LD   DE,3   
1212   B7                     OR   A   
1213   ED 52                  SBC   HL,DE   
1215   7D                     LD   A,L   
1216   B4                     OR   H   
1217   28 50                  JR   Z,expectM_0_2224S43   
1219   CD 1E 09               CALL   printStr   
121C   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1228   CD 1E 09               CALL   printStr   
122B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123A   21 03 00               LD   HL,3   
123D   CD 6C 08               CALL   prtdec   
1240   CD 1E 09               CALL   printStr   
1243   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1250   E1                     POP   hl   
1251   E5                     PUSH   hl   
1252   CD 6C 08               CALL   prtdec   
1255   E1                     POP   hl   
1256   CD 1E 09               CALL   printStr   
1259   20 28 23 00            .CSTR   " (#"   
125D   CD B4 08               CALL   prthex   
1260   CD 1E 09               CALL   printStr   
1263   29 0D 0A 00            .CSTR   ")\r\n"   
1267   76                     HALT      
1268   00                     .CSTR      
1269                EXPECTM_0_2224S43:      
1269   E1                     POP   HL   
126A                          ;*Macro unroll:  test "123 456 +", 123+456
126A   31 80 36               LD   SP,STACK   
126D   CD 25 09               CALL   init   
1270   CD 28 35               CALL   execStr   
1273   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
127D                          ;*Macro unroll:  expect "123 456 +",123+456
127D   E1                     POP   HL   
127E   E5                     PUSH   HL   
127F   11 43 02               LD   DE,123+456   
1282   B7                     OR   A   
1283   ED 52                  SBC   HL,DE   
1285   7D                     LD   A,L   
1286   B4                     OR   H   
1287   28 54                  JR   Z,expectM_0_2225S43   
1289   CD 1E 09               CALL   printStr   
128C   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
129C   CD 1E 09               CALL   printStr   
129F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12AE   21 43 02               LD   HL,123+456   
12B1   CD 6C 08               CALL   prtdec   
12B4   CD 1E 09               CALL   printStr   
12B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C4   E1                     POP   hl   
12C5   E5                     PUSH   hl   
12C6   CD 6C 08               CALL   prtdec   
12C9   E1                     POP   hl   
12CA   CD 1E 09               CALL   printStr   
12CD   20 28 23 00            .CSTR   " (#"   
12D1   CD B4 08               CALL   prthex   
12D4   CD 1E 09               CALL   printStr   
12D7   29 0D 0A 00            .CSTR   ")\r\n"   
12DB   76                     HALT      
12DC   00                     .CSTR      
12DD                EXPECTM_0_2225S43:      
12DD   E1                     POP   HL   
12DE                          ;*Macro unroll:  test "64 128 +", 64+128
12DE   31 80 36               LD   SP,STACK   
12E1   CD 25 09               CALL   init   
12E4   CD 28 35               CALL   execStr   
12E7   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12F0                          ;*Macro unroll:  expect "64 128 +",64+128
12F0   E1                     POP   HL   
12F1   E5                     PUSH   HL   
12F2   11 C0 00               LD   DE,64+128   
12F5   B7                     OR   A   
12F6   ED 52                  SBC   HL,DE   
12F8   7D                     LD   A,L   
12F9   B4                     OR   H   
12FA   28 53                  JR   Z,expectM_0_2226S43   
12FC   CD 1E 09               CALL   printStr   
12FF   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
130E   CD 1E 09               CALL   printStr   
1311   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1320   21 C0 00               LD   HL,64+128   
1323   CD 6C 08               CALL   prtdec   
1326   CD 1E 09               CALL   printStr   
1329   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1336   E1                     POP   hl   
1337   E5                     PUSH   hl   
1338   CD 6C 08               CALL   prtdec   
133B   E1                     POP   hl   
133C   CD 1E 09               CALL   printStr   
133F   20 28 23 00            .CSTR   " (#"   
1343   CD B4 08               CALL   prthex   
1346   CD 1E 09               CALL   printStr   
1349   29 0D 0A 00            .CSTR   ")\r\n"   
134D   76                     HALT      
134E   00                     .CSTR      
134F                EXPECTM_0_2226S43:      
134F   E1                     POP   HL   
1350                          ;*Macro unroll:  test "1 a= a++ a",2
1350   31 80 36               LD   SP,STACK   
1353   CD 25 09               CALL   init   
1356   CD 28 35               CALL   execStr   
1359   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
1364                          ;*Macro unroll:  expect "1 a= a++ a",2
1364   E1                     POP   HL   
1365   E5                     PUSH   HL   
1366   11 02 00               LD   DE,2   
1369   B7                     OR   A   
136A   ED 52                  SBC   HL,DE   
136C   7D                     LD   A,L   
136D   B4                     OR   H   
136E   28 55                  JR   Z,expectM_0_2227S43   
1370   CD 1E 09               CALL   printStr   
1373   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
1384   CD 1E 09               CALL   printStr   
1387   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1396   21 02 00               LD   HL,2   
1399   CD 6C 08               CALL   prtdec   
139C   CD 1E 09               CALL   printStr   
139F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13AC   E1                     POP   hl   
13AD   E5                     PUSH   hl   
13AE   CD 6C 08               CALL   prtdec   
13B1   E1                     POP   hl   
13B2   CD 1E 09               CALL   printStr   
13B5   20 28 23 00            .CSTR   " (#"   
13B9   CD B4 08               CALL   prthex   
13BC   CD 1E 09               CALL   printStr   
13BF   29 0D 0A 00            .CSTR   ")\r\n"   
13C3   76                     HALT      
13C4   00                     .CSTR      
13C5                EXPECTM_0_2227S43:      
13C5   E1                     POP   HL   
13C6                          ;*Macro unroll:  test "1 a= 2 a += a",3
13C6   31 80 36               LD   SP,STACK   
13C9   CD 25 09               CALL   init   
13CC   CD 28 35               CALL   execStr   
13CF   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
13DD                          ;*Macro unroll:  expect "1 a= 2 a += a",3
13DD   E1                     POP   HL   
13DE   E5                     PUSH   HL   
13DF   11 03 00               LD   DE,3   
13E2   B7                     OR   A   
13E3   ED 52                  SBC   HL,DE   
13E5   7D                     LD   A,L   
13E6   B4                     OR   H   
13E7   28 58                  JR   Z,expectM_0_2228S43   
13E9   CD 1E 09               CALL   printStr   
13EC   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
1400   CD 1E 09               CALL   printStr   
1403   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1412   21 03 00               LD   HL,3   
1415   CD 6C 08               CALL   prtdec   
1418   CD 1E 09               CALL   printStr   
141B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1428   E1                     POP   hl   
1429   E5                     PUSH   hl   
142A   CD 6C 08               CALL   prtdec   
142D   E1                     POP   hl   
142E   CD 1E 09               CALL   printStr   
1431   20 28 23 00            .CSTR   " (#"   
1435   CD B4 08               CALL   prthex   
1438   CD 1E 09               CALL   printStr   
143B   29 0D 0A 00            .CSTR   ")\r\n"   
143F   76                     HALT      
1440   00                     .CSTR      
1441                EXPECTM_0_2228S43:      
1441   E1                     POP   HL   
1442                          ;*Macro unroll:  test "-1 -1 -",0
1442   31 80 36               LD   SP,STACK   
1445   CD 25 09               CALL   init   
1448   CD 28 35               CALL   execStr   
144B   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1453                          ;*Macro unroll:  expect "-1 -1 -",0
1453   E1                     POP   HL   
1454   E5                     PUSH   HL   
1455   11 00 00               LD   DE,0   
1458   B7                     OR   A   
1459   ED 52                  SBC   HL,DE   
145B   7D                     LD   A,L   
145C   B4                     OR   H   
145D   28 52                  JR   Z,expectM_0_2229S43   
145F   CD 1E 09               CALL   printStr   
1462   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1470   CD 1E 09               CALL   printStr   
1473   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1482   21 00 00               LD   HL,0   
1485   CD 6C 08               CALL   prtdec   
1488   CD 1E 09               CALL   printStr   
148B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1498   E1                     POP   hl   
1499   E5                     PUSH   hl   
149A   CD 6C 08               CALL   prtdec   
149D   E1                     POP   hl   
149E   CD 1E 09               CALL   printStr   
14A1   20 28 23 00            .CSTR   " (#"   
14A5   CD B4 08               CALL   prthex   
14A8   CD 1E 09               CALL   printStr   
14AB   29 0D 0A 00            .CSTR   ")\r\n"   
14AF   76                     HALT      
14B0   00                     .CSTR      
14B1                EXPECTM_0_2229S43:      
14B1   E1                     POP   HL   
14B2                          ;*Macro unroll:  test "5 3 -", 2
14B2   31 80 36               LD   SP,STACK   
14B5   CD 25 09               CALL   init   
14B8   CD 28 35               CALL   execStr   
14BB   35 20 33 20 2D 00      .CSTR   "5 3 -"   
14C1                          ;*Macro unroll:  expect "5 3 -",2
14C1   E1                     POP   HL   
14C2   E5                     PUSH   HL   
14C3   11 02 00               LD   DE,2   
14C6   B7                     OR   A   
14C7   ED 52                  SBC   HL,DE   
14C9   7D                     LD   A,L   
14CA   B4                     OR   H   
14CB   28 50                  JR   Z,expectM_0_2230S43   
14CD   CD 1E 09               CALL   printStr   
14D0   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
14DC   CD 1E 09               CALL   printStr   
14DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14EE   21 02 00               LD   HL,2   
14F1   CD 6C 08               CALL   prtdec   
14F4   CD 1E 09               CALL   printStr   
14F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1504   E1                     POP   hl   
1505   E5                     PUSH   hl   
1506   CD 6C 08               CALL   prtdec   
1509   E1                     POP   hl   
150A   CD 1E 09               CALL   printStr   
150D   20 28 23 00            .CSTR   " (#"   
1511   CD B4 08               CALL   prthex   
1514   CD 1E 09               CALL   printStr   
1517   29 0D 0A 00            .CSTR   ")\r\n"   
151B   76                     HALT      
151C   00                     .CSTR      
151D                EXPECTM_0_2230S43:      
151D   E1                     POP   HL   
151E                          ;*Macro unroll:  test "2 1 -",1
151E   31 80 36               LD   SP,STACK   
1521   CD 25 09               CALL   init   
1524   CD 28 35               CALL   execStr   
1527   32 20 31 20 2D 00      .CSTR   "2 1 -"   
152D                          ;*Macro unroll:  expect "2 1 -",1
152D   E1                     POP   HL   
152E   E5                     PUSH   HL   
152F   11 01 00               LD   DE,1   
1532   B7                     OR   A   
1533   ED 52                  SBC   HL,DE   
1535   7D                     LD   A,L   
1536   B4                     OR   H   
1537   28 50                  JR   Z,expectM_0_2231S43   
1539   CD 1E 09               CALL   printStr   
153C   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1548   CD 1E 09               CALL   printStr   
154B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
155A   21 01 00               LD   HL,1   
155D   CD 6C 08               CALL   prtdec   
1560   CD 1E 09               CALL   printStr   
1563   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1570   E1                     POP   hl   
1571   E5                     PUSH   hl   
1572   CD 6C 08               CALL   prtdec   
1575   E1                     POP   hl   
1576   CD 1E 09               CALL   printStr   
1579   20 28 23 00            .CSTR   " (#"   
157D   CD B4 08               CALL   prthex   
1580   CD 1E 09               CALL   printStr   
1583   29 0D 0A 00            .CSTR   ")\r\n"   
1587   76                     HALT      
1588   00                     .CSTR      
1589                EXPECTM_0_2231S43:      
1589   E1                     POP   HL   
158A                          ;*Macro unroll:  test "3 a= a-- a",2
158A   31 80 36               LD   SP,STACK   
158D   CD 25 09               CALL   init   
1590   CD 28 35               CALL   execStr   
1593   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
159E                          ;*Macro unroll:  expect "3 a= a-- a",2
159E   E1                     POP   HL   
159F   E5                     PUSH   HL   
15A0   11 02 00               LD   DE,2   
15A3   B7                     OR   A   
15A4   ED 52                  SBC   HL,DE   
15A6   7D                     LD   A,L   
15A7   B4                     OR   H   
15A8   28 55                  JR   Z,expectM_0_2232S43   
15AA   CD 1E 09               CALL   printStr   
15AD   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
15BE   CD 1E 09               CALL   printStr   
15C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15D0   21 02 00               LD   HL,2   
15D3   CD 6C 08               CALL   prtdec   
15D6   CD 1E 09               CALL   printStr   
15D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E6   E1                     POP   hl   
15E7   E5                     PUSH   hl   
15E8   CD 6C 08               CALL   prtdec   
15EB   E1                     POP   hl   
15EC   CD 1E 09               CALL   printStr   
15EF   20 28 23 00            .CSTR   " (#"   
15F3   CD B4 08               CALL   prthex   
15F6   CD 1E 09               CALL   printStr   
15F9   29 0D 0A 00            .CSTR   ")\r\n"   
15FD   76                     HALT      
15FE   00                     .CSTR      
15FF                EXPECTM_0_2232S43:      
15FF   E1                     POP   HL   
1600                          ;*Macro unroll:  test "4 a= 2 a -= a",2
1600   31 80 36               LD   SP,STACK   
1603   CD 25 09               CALL   init   
1606   CD 28 35               CALL   execStr   
1609   34 20 61 3D 20 32 20 61 20 2D 3D 20 61 00 .CSTR   "4 a= 2 a -= a"   
1617                          ;*Macro unroll:  expect "4 a= 2 a -= a",2
1617   E1                     POP   HL   
1618   E5                     PUSH   HL   
1619   11 02 00               LD   DE,2   
161C   B7                     OR   A   
161D   ED 52                  SBC   HL,DE   
161F   7D                     LD   A,L   
1620   B4                     OR   H   
1621   28 58                  JR   Z,expectM_0_2233S43   
1623   CD 1E 09               CALL   printStr   
1626   43 6F 64 65 3A 20 34 20 61 3D 20 32 20 61 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= 2 a -= a"   
163A   CD 1E 09               CALL   printStr   
163D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164C   21 02 00               LD   HL,2   
164F   CD 6C 08               CALL   prtdec   
1652   CD 1E 09               CALL   printStr   
1655   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1662   E1                     POP   hl   
1663   E5                     PUSH   hl   
1664   CD 6C 08               CALL   prtdec   
1667   E1                     POP   hl   
1668   CD 1E 09               CALL   printStr   
166B   20 28 23 00            .CSTR   " (#"   
166F   CD B4 08               CALL   prthex   
1672   CD 1E 09               CALL   printStr   
1675   29 0D 0A 00            .CSTR   ")\r\n"   
1679   76                     HALT      
167A   00                     .CSTR      
167B                EXPECTM_0_2233S43:      
167B   E1                     POP   HL   
167C                          ;*Macro unroll:  test "3 5 &", 1
167C   31 80 36               LD   SP,STACK   
167F   CD 25 09               CALL   init   
1682   CD 28 35               CALL   execStr   
1685   33 20 35 20 26 00      .CSTR   "3 5 &"   
168B                          ;*Macro unroll:  expect "3 5 &",1
168B   E1                     POP   HL   
168C   E5                     PUSH   HL   
168D   11 01 00               LD   DE,1   
1690   B7                     OR   A   
1691   ED 52                  SBC   HL,DE   
1693   7D                     LD   A,L   
1694   B4                     OR   H   
1695   28 50                  JR   Z,expectM_0_2234S43   
1697   CD 1E 09               CALL   printStr   
169A   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
16A6   CD 1E 09               CALL   printStr   
16A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16B8   21 01 00               LD   HL,1   
16BB   CD 6C 08               CALL   prtdec   
16BE   CD 1E 09               CALL   printStr   
16C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16CE   E1                     POP   hl   
16CF   E5                     PUSH   hl   
16D0   CD 6C 08               CALL   prtdec   
16D3   E1                     POP   hl   
16D4   CD 1E 09               CALL   printStr   
16D7   20 28 23 00            .CSTR   " (#"   
16DB   CD B4 08               CALL   prthex   
16DE   CD 1E 09               CALL   printStr   
16E1   29 0D 0A 00            .CSTR   ")\r\n"   
16E5   76                     HALT      
16E6   00                     .CSTR      
16E7                EXPECTM_0_2234S43:      
16E7   E1                     POP   HL   
16E8                          ;*Macro unroll:  test "3 5 |", 7
16E8   31 80 36               LD   SP,STACK   
16EB   CD 25 09               CALL   init   
16EE   CD 28 35               CALL   execStr   
16F1   33 20 35 20 7C 00      .CSTR   "3 5 |"   
16F7                          ;*Macro unroll:  expect "3 5 |",7
16F7   E1                     POP   HL   
16F8   E5                     PUSH   HL   
16F9   11 07 00               LD   DE,7   
16FC   B7                     OR   A   
16FD   ED 52                  SBC   HL,DE   
16FF   7D                     LD   A,L   
1700   B4                     OR   H   
1701   28 50                  JR   Z,expectM_0_2235S43   
1703   CD 1E 09               CALL   printStr   
1706   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1712   CD 1E 09               CALL   printStr   
1715   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1724   21 07 00               LD   HL,7   
1727   CD 6C 08               CALL   prtdec   
172A   CD 1E 09               CALL   printStr   
172D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
173A   E1                     POP   hl   
173B   E5                     PUSH   hl   
173C   CD 6C 08               CALL   prtdec   
173F   E1                     POP   hl   
1740   CD 1E 09               CALL   printStr   
1743   20 28 23 00            .CSTR   " (#"   
1747   CD B4 08               CALL   prthex   
174A   CD 1E 09               CALL   printStr   
174D   29 0D 0A 00            .CSTR   ")\r\n"   
1751   76                     HALT      
1752   00                     .CSTR      
1753                EXPECTM_0_2235S43:      
1753   E1                     POP   HL   
1754                          ;*Macro unroll:  test "2 3 *", 6
1754   31 80 36               LD   SP,STACK   
1757   CD 25 09               CALL   init   
175A   CD 28 35               CALL   execStr   
175D   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1763                          ;*Macro unroll:  expect "2 3 *",6
1763   E1                     POP   HL   
1764   E5                     PUSH   HL   
1765   11 06 00               LD   DE,6   
1768   B7                     OR   A   
1769   ED 52                  SBC   HL,DE   
176B   7D                     LD   A,L   
176C   B4                     OR   H   
176D   28 50                  JR   Z,expectM_0_2236S43   
176F   CD 1E 09               CALL   printStr   
1772   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
177E   CD 1E 09               CALL   printStr   
1781   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1790   21 06 00               LD   HL,6   
1793   CD 6C 08               CALL   prtdec   
1796   CD 1E 09               CALL   printStr   
1799   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17A6   E1                     POP   hl   
17A7   E5                     PUSH   hl   
17A8   CD 6C 08               CALL   prtdec   
17AB   E1                     POP   hl   
17AC   CD 1E 09               CALL   printStr   
17AF   20 28 23 00            .CSTR   " (#"   
17B3   CD B4 08               CALL   prthex   
17B6   CD 1E 09               CALL   printStr   
17B9   29 0D 0A 00            .CSTR   ")\r\n"   
17BD   76                     HALT      
17BE   00                     .CSTR      
17BF                EXPECTM_0_2236S43:      
17BF   E1                     POP   HL   
17C0                          ;*Macro unroll:  test "1 2 3 + *", 5
17C0   31 80 36               LD   SP,STACK   
17C3   CD 25 09               CALL   init   
17C6   CD 28 35               CALL   execStr   
17C9   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
17D3                          ;*Macro unroll:  expect "1 2 3 + *",5
17D3   E1                     POP   HL   
17D4   E5                     PUSH   HL   
17D5   11 05 00               LD   DE,5   
17D8   B7                     OR   A   
17D9   ED 52                  SBC   HL,DE   
17DB   7D                     LD   A,L   
17DC   B4                     OR   H   
17DD   28 54                  JR   Z,expectM_0_2237S43   
17DF   CD 1E 09               CALL   printStr   
17E2   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
17F2   CD 1E 09               CALL   printStr   
17F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1804   21 05 00               LD   HL,5   
1807   CD 6C 08               CALL   prtdec   
180A   CD 1E 09               CALL   printStr   
180D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
181A   E1                     POP   hl   
181B   E5                     PUSH   hl   
181C   CD 6C 08               CALL   prtdec   
181F   E1                     POP   hl   
1820   CD 1E 09               CALL   printStr   
1823   20 28 23 00            .CSTR   " (#"   
1827   CD B4 08               CALL   prthex   
182A   CD 1E 09               CALL   printStr   
182D   29 0D 0A 00            .CSTR   ")\r\n"   
1831   76                     HALT      
1832   00                     .CSTR      
1833                EXPECTM_0_2237S43:      
1833   E1                     POP   HL   
1834                          ;*Macro unroll:  test "7 3 /", 2
1834   31 80 36               LD   SP,STACK   
1837   CD 25 09               CALL   init   
183A   CD 28 35               CALL   execStr   
183D   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1843                          ;*Macro unroll:  expect "7 3 /",2
1843   E1                     POP   HL   
1844   E5                     PUSH   HL   
1845   11 02 00               LD   DE,2   
1848   B7                     OR   A   
1849   ED 52                  SBC   HL,DE   
184B   7D                     LD   A,L   
184C   B4                     OR   H   
184D   28 50                  JR   Z,expectM_0_2238S43   
184F   CD 1E 09               CALL   printStr   
1852   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
185E   CD 1E 09               CALL   printStr   
1861   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1870   21 02 00               LD   HL,2   
1873   CD 6C 08               CALL   prtdec   
1876   CD 1E 09               CALL   printStr   
1879   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1886   E1                     POP   hl   
1887   E5                     PUSH   hl   
1888   CD 6C 08               CALL   prtdec   
188B   E1                     POP   hl   
188C   CD 1E 09               CALL   printStr   
188F   20 28 23 00            .CSTR   " (#"   
1893   CD B4 08               CALL   prthex   
1896   CD 1E 09               CALL   printStr   
1899   29 0D 0A 00            .CSTR   ")\r\n"   
189D   76                     HALT      
189E   00                     .CSTR      
189F                EXPECTM_0_2238S43:      
189F   E1                     POP   HL   
18A0                          ;*Macro unroll:  test "7 3 / _", 1
18A0   31 80 36               LD   SP,STACK   
18A3   CD 25 09               CALL   init   
18A6   CD 28 35               CALL   execStr   
18A9   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
18B1                          ;*Macro unroll:  expect "7 3 / _",1
18B1   E1                     POP   HL   
18B2   E5                     PUSH   HL   
18B3   11 01 00               LD   DE,1   
18B6   B7                     OR   A   
18B7   ED 52                  SBC   HL,DE   
18B9   7D                     LD   A,L   
18BA   B4                     OR   H   
18BB   28 52                  JR   Z,expectM_0_2239S43   
18BD   CD 1E 09               CALL   printStr   
18C0   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
18CE   CD 1E 09               CALL   printStr   
18D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E0   21 01 00               LD   HL,1   
18E3   CD 6C 08               CALL   prtdec   
18E6   CD 1E 09               CALL   printStr   
18E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F6   E1                     POP   hl   
18F7   E5                     PUSH   hl   
18F8   CD 6C 08               CALL   prtdec   
18FB   E1                     POP   hl   
18FC   CD 1E 09               CALL   printStr   
18FF   20 28 23 00            .CSTR   " (#"   
1903   CD B4 08               CALL   prthex   
1906   CD 1E 09               CALL   printStr   
1909   29 0D 0A 00            .CSTR   ")\r\n"   
190D   76                     HALT      
190E   00                     .CSTR      
190F                EXPECTM_0_2239S43:      
190F   E1                     POP   HL   
1910                          ;*Macro unroll:  test "2 3 ==", FALSE
1910   31 80 36               LD   SP,STACK   
1913   CD 25 09               CALL   init   
1916   CD 28 35               CALL   execStr   
1919   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1920                          ;*Macro unroll:  expect "2 3 ==",FALSE
1920   E1                     POP   HL   
1921   E5                     PUSH   HL   
1922   11 00 00               LD   DE,FALSE   
1925   B7                     OR   A   
1926   ED 52                  SBC   HL,DE   
1928   7D                     LD   A,L   
1929   B4                     OR   H   
192A   28 51                  JR   Z,expectM_0_2240S43   
192C   CD 1E 09               CALL   printStr   
192F   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
193C   CD 1E 09               CALL   printStr   
193F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194E   21 00 00               LD   HL,FALSE   
1951   CD 6C 08               CALL   prtdec   
1954   CD 1E 09               CALL   printStr   
1957   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1964   E1                     POP   hl   
1965   E5                     PUSH   hl   
1966   CD 6C 08               CALL   prtdec   
1969   E1                     POP   hl   
196A   CD 1E 09               CALL   printStr   
196D   20 28 23 00            .CSTR   " (#"   
1971   CD B4 08               CALL   prthex   
1974   CD 1E 09               CALL   printStr   
1977   29 0D 0A 00            .CSTR   ")\r\n"   
197B   76                     HALT      
197C   00                     .CSTR      
197D                EXPECTM_0_2240S43:      
197D   E1                     POP   HL   
197E                          ;*Macro unroll:  test "3 3 ==", TRUE
197E   31 80 36               LD   SP,STACK   
1981   CD 25 09               CALL   init   
1984   CD 28 35               CALL   execStr   
1987   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
198E                          ;*Macro unroll:  expect "3 3 ==",TRUE
198E   E1                     POP   HL   
198F   E5                     PUSH   HL   
1990   11 FF FF               LD   DE,TRUE   
1993   B7                     OR   A   
1994   ED 52                  SBC   HL,DE   
1996   7D                     LD   A,L   
1997   B4                     OR   H   
1998   28 51                  JR   Z,expectM_0_2241S43   
199A   CD 1E 09               CALL   printStr   
199D   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
19AA   CD 1E 09               CALL   printStr   
19AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19BC   21 FF FF               LD   HL,TRUE   
19BF   CD 6C 08               CALL   prtdec   
19C2   CD 1E 09               CALL   printStr   
19C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19D2   E1                     POP   hl   
19D3   E5                     PUSH   hl   
19D4   CD 6C 08               CALL   prtdec   
19D7   E1                     POP   hl   
19D8   CD 1E 09               CALL   printStr   
19DB   20 28 23 00            .CSTR   " (#"   
19DF   CD B4 08               CALL   prthex   
19E2   CD 1E 09               CALL   printStr   
19E5   29 0D 0A 00            .CSTR   ")\r\n"   
19E9   76                     HALT      
19EA   00                     .CSTR      
19EB                EXPECTM_0_2241S43:      
19EB   E1                     POP   HL   
19EC                          ;*Macro unroll:  test "1 2 <", TRUE
19EC   31 80 36               LD   SP,STACK   
19EF   CD 25 09               CALL   init   
19F2   CD 28 35               CALL   execStr   
19F5   31 20 32 20 3C 00      .CSTR   "1 2 <"   
19FB                          ;*Macro unroll:  expect "1 2 <",TRUE
19FB   E1                     POP   HL   
19FC   E5                     PUSH   HL   
19FD   11 FF FF               LD   DE,TRUE   
1A00   B7                     OR   A   
1A01   ED 52                  SBC   HL,DE   
1A03   7D                     LD   A,L   
1A04   B4                     OR   H   
1A05   28 50                  JR   Z,expectM_0_2242S43   
1A07   CD 1E 09               CALL   printStr   
1A0A   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1A16   CD 1E 09               CALL   printStr   
1A19   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A28   21 FF FF               LD   HL,TRUE   
1A2B   CD 6C 08               CALL   prtdec   
1A2E   CD 1E 09               CALL   printStr   
1A31   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A3E   E1                     POP   hl   
1A3F   E5                     PUSH   hl   
1A40   CD 6C 08               CALL   prtdec   
1A43   E1                     POP   hl   
1A44   CD 1E 09               CALL   printStr   
1A47   20 28 23 00            .CSTR   " (#"   
1A4B   CD B4 08               CALL   prthex   
1A4E   CD 1E 09               CALL   printStr   
1A51   29 0D 0A 00            .CSTR   ")\r\n"   
1A55   76                     HALT      
1A56   00                     .CSTR      
1A57                EXPECTM_0_2242S43:      
1A57   E1                     POP   HL   
1A58                          ;*Macro unroll:  test "2 1 <", FALSE
1A58   31 80 36               LD   SP,STACK   
1A5B   CD 25 09               CALL   init   
1A5E   CD 28 35               CALL   execStr   
1A61   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1A67                          ;*Macro unroll:  expect "2 1 <",FALSE
1A67   E1                     POP   HL   
1A68   E5                     PUSH   HL   
1A69   11 00 00               LD   DE,FALSE   
1A6C   B7                     OR   A   
1A6D   ED 52                  SBC   HL,DE   
1A6F   7D                     LD   A,L   
1A70   B4                     OR   H   
1A71   28 50                  JR   Z,expectM_0_2243S43   
1A73   CD 1E 09               CALL   printStr   
1A76   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1A82   CD 1E 09               CALL   printStr   
1A85   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A94   21 00 00               LD   HL,FALSE   
1A97   CD 6C 08               CALL   prtdec   
1A9A   CD 1E 09               CALL   printStr   
1A9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AAA   E1                     POP   hl   
1AAB   E5                     PUSH   hl   
1AAC   CD 6C 08               CALL   prtdec   
1AAF   E1                     POP   hl   
1AB0   CD 1E 09               CALL   printStr   
1AB3   20 28 23 00            .CSTR   " (#"   
1AB7   CD B4 08               CALL   prthex   
1ABA   CD 1E 09               CALL   printStr   
1ABD   29 0D 0A 00            .CSTR   ")\r\n"   
1AC1   76                     HALT      
1AC2   00                     .CSTR      
1AC3                EXPECTM_0_2243S43:      
1AC3   E1                     POP   HL   
1AC4                          ;*Macro unroll:  test "2 3 <", TRUE
1AC4   31 80 36               LD   SP,STACK   
1AC7   CD 25 09               CALL   init   
1ACA   CD 28 35               CALL   execStr   
1ACD   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1AD3                          ;*Macro unroll:  expect "2 3 <",TRUE
1AD3   E1                     POP   HL   
1AD4   E5                     PUSH   HL   
1AD5   11 FF FF               LD   DE,TRUE   
1AD8   B7                     OR   A   
1AD9   ED 52                  SBC   HL,DE   
1ADB   7D                     LD   A,L   
1ADC   B4                     OR   H   
1ADD   28 50                  JR   Z,expectM_0_2244S43   
1ADF   CD 1E 09               CALL   printStr   
1AE2   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1AEE   CD 1E 09               CALL   printStr   
1AF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B00   21 FF FF               LD   HL,TRUE   
1B03   CD 6C 08               CALL   prtdec   
1B06   CD 1E 09               CALL   printStr   
1B09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B16   E1                     POP   hl   
1B17   E5                     PUSH   hl   
1B18   CD 6C 08               CALL   prtdec   
1B1B   E1                     POP   hl   
1B1C   CD 1E 09               CALL   printStr   
1B1F   20 28 23 00            .CSTR   " (#"   
1B23   CD B4 08               CALL   prthex   
1B26   CD 1E 09               CALL   printStr   
1B29   29 0D 0A 00            .CSTR   ")\r\n"   
1B2D   76                     HALT      
1B2E   00                     .CSTR      
1B2F                EXPECTM_0_2244S43:      
1B2F   E1                     POP   HL   
1B30                          ;*Macro unroll:  test "3 3 <", FALSE
1B30   31 80 36               LD   SP,STACK   
1B33   CD 25 09               CALL   init   
1B36   CD 28 35               CALL   execStr   
1B39   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1B3F                          ;*Macro unroll:  expect "3 3 <",FALSE
1B3F   E1                     POP   HL   
1B40   E5                     PUSH   HL   
1B41   11 00 00               LD   DE,FALSE   
1B44   B7                     OR   A   
1B45   ED 52                  SBC   HL,DE   
1B47   7D                     LD   A,L   
1B48   B4                     OR   H   
1B49   28 50                  JR   Z,expectM_0_2245S43   
1B4B   CD 1E 09               CALL   printStr   
1B4E   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1B5A   CD 1E 09               CALL   printStr   
1B5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B6C   21 00 00               LD   HL,FALSE   
1B6F   CD 6C 08               CALL   prtdec   
1B72   CD 1E 09               CALL   printStr   
1B75   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B82   E1                     POP   hl   
1B83   E5                     PUSH   hl   
1B84   CD 6C 08               CALL   prtdec   
1B87   E1                     POP   hl   
1B88   CD 1E 09               CALL   printStr   
1B8B   20 28 23 00            .CSTR   " (#"   
1B8F   CD B4 08               CALL   prthex   
1B92   CD 1E 09               CALL   printStr   
1B95   29 0D 0A 00            .CSTR   ")\r\n"   
1B99   76                     HALT      
1B9A   00                     .CSTR      
1B9B                EXPECTM_0_2245S43:      
1B9B   E1                     POP   HL   
1B9C                          ;*Macro unroll:  test "1 2 >", FALSE
1B9C   31 80 36               LD   SP,STACK   
1B9F   CD 25 09               CALL   init   
1BA2   CD 28 35               CALL   execStr   
1BA5   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1BAB                          ;*Macro unroll:  expect "1 2 >",FALSE
1BAB   E1                     POP   HL   
1BAC   E5                     PUSH   HL   
1BAD   11 00 00               LD   DE,FALSE   
1BB0   B7                     OR   A   
1BB1   ED 52                  SBC   HL,DE   
1BB3   7D                     LD   A,L   
1BB4   B4                     OR   H   
1BB5   28 50                  JR   Z,expectM_0_2246S43   
1BB7   CD 1E 09               CALL   printStr   
1BBA   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1BC6   CD 1E 09               CALL   printStr   
1BC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BD8   21 00 00               LD   HL,FALSE   
1BDB   CD 6C 08               CALL   prtdec   
1BDE   CD 1E 09               CALL   printStr   
1BE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BEE   E1                     POP   hl   
1BEF   E5                     PUSH   hl   
1BF0   CD 6C 08               CALL   prtdec   
1BF3   E1                     POP   hl   
1BF4   CD 1E 09               CALL   printStr   
1BF7   20 28 23 00            .CSTR   " (#"   
1BFB   CD B4 08               CALL   prthex   
1BFE   CD 1E 09               CALL   printStr   
1C01   29 0D 0A 00            .CSTR   ")\r\n"   
1C05   76                     HALT      
1C06   00                     .CSTR      
1C07                EXPECTM_0_2246S43:      
1C07   E1                     POP   HL   
1C08                          ;*Macro unroll:  test "2 1 >", TRUE
1C08   31 80 36               LD   SP,STACK   
1C0B   CD 25 09               CALL   init   
1C0E   CD 28 35               CALL   execStr   
1C11   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1C17                          ;*Macro unroll:  expect "2 1 >",TRUE
1C17   E1                     POP   HL   
1C18   E5                     PUSH   HL   
1C19   11 FF FF               LD   DE,TRUE   
1C1C   B7                     OR   A   
1C1D   ED 52                  SBC   HL,DE   
1C1F   7D                     LD   A,L   
1C20   B4                     OR   H   
1C21   28 50                  JR   Z,expectM_0_2247S43   
1C23   CD 1E 09               CALL   printStr   
1C26   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1C32   CD 1E 09               CALL   printStr   
1C35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C44   21 FF FF               LD   HL,TRUE   
1C47   CD 6C 08               CALL   prtdec   
1C4A   CD 1E 09               CALL   printStr   
1C4D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C5A   E1                     POP   hl   
1C5B   E5                     PUSH   hl   
1C5C   CD 6C 08               CALL   prtdec   
1C5F   E1                     POP   hl   
1C60   CD 1E 09               CALL   printStr   
1C63   20 28 23 00            .CSTR   " (#"   
1C67   CD B4 08               CALL   prthex   
1C6A   CD 1E 09               CALL   printStr   
1C6D   29 0D 0A 00            .CSTR   ")\r\n"   
1C71   76                     HALT      
1C72   00                     .CSTR      
1C73                EXPECTM_0_2247S43:      
1C73   E1                     POP   HL   
1C74                          ;*Macro unroll:  test "3 3 >", FALSE
1C74   31 80 36               LD   SP,STACK   
1C77   CD 25 09               CALL   init   
1C7A   CD 28 35               CALL   execStr   
1C7D   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1C83                          ;*Macro unroll:  expect "3 3 >",FALSE
1C83   E1                     POP   HL   
1C84   E5                     PUSH   HL   
1C85   11 00 00               LD   DE,FALSE   
1C88   B7                     OR   A   
1C89   ED 52                  SBC   HL,DE   
1C8B   7D                     LD   A,L   
1C8C   B4                     OR   H   
1C8D   28 50                  JR   Z,expectM_0_2248S43   
1C8F   CD 1E 09               CALL   printStr   
1C92   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1C9E   CD 1E 09               CALL   printStr   
1CA1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CB0   21 00 00               LD   HL,FALSE   
1CB3   CD 6C 08               CALL   prtdec   
1CB6   CD 1E 09               CALL   printStr   
1CB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CC6   E1                     POP   hl   
1CC7   E5                     PUSH   hl   
1CC8   CD 6C 08               CALL   prtdec   
1CCB   E1                     POP   hl   
1CCC   CD 1E 09               CALL   printStr   
1CCF   20 28 23 00            .CSTR   " (#"   
1CD3   CD B4 08               CALL   prthex   
1CD6   CD 1E 09               CALL   printStr   
1CD9   29 0D 0A 00            .CSTR   ")\r\n"   
1CDD   76                     HALT      
1CDE   00                     .CSTR      
1CDF                EXPECTM_0_2248S43:      
1CDF   E1                     POP   HL   
1CE0                          ;*Macro unroll:  test "4 3 >", TRUE
1CE0   31 80 36               LD   SP,STACK   
1CE3   CD 25 09               CALL   init   
1CE6   CD 28 35               CALL   execStr   
1CE9   34 20 33 20 3E 00      .CSTR   "4 3 >"   
1CEF                          ;*Macro unroll:  expect "4 3 >",TRUE
1CEF   E1                     POP   HL   
1CF0   E5                     PUSH   HL   
1CF1   11 FF FF               LD   DE,TRUE   
1CF4   B7                     OR   A   
1CF5   ED 52                  SBC   HL,DE   
1CF7   7D                     LD   A,L   
1CF8   B4                     OR   H   
1CF9   28 50                  JR   Z,expectM_0_2249S43   
1CFB   CD 1E 09               CALL   printStr   
1CFE   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1D0A   CD 1E 09               CALL   printStr   
1D0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D1C   21 FF FF               LD   HL,TRUE   
1D1F   CD 6C 08               CALL   prtdec   
1D22   CD 1E 09               CALL   printStr   
1D25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D32   E1                     POP   hl   
1D33   E5                     PUSH   hl   
1D34   CD 6C 08               CALL   prtdec   
1D37   E1                     POP   hl   
1D38   CD 1E 09               CALL   printStr   
1D3B   20 28 23 00            .CSTR   " (#"   
1D3F   CD B4 08               CALL   prthex   
1D42   CD 1E 09               CALL   printStr   
1D45   29 0D 0A 00            .CSTR   ")\r\n"   
1D49   76                     HALT      
1D4A   00                     .CSTR      
1D4B                EXPECTM_0_2249S43:      
1D4B   E1                     POP   HL   
1D4C                          ;*Macro unroll:  test "2 2 <=", TRUE
1D4C   31 80 36               LD   SP,STACK   
1D4F   CD 25 09               CALL   init   
1D52   CD 28 35               CALL   execStr   
1D55   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
1D5C                          ;*Macro unroll:  expect "2 2 <=",TRUE
1D5C   E1                     POP   HL   
1D5D   E5                     PUSH   HL   
1D5E   11 FF FF               LD   DE,TRUE   
1D61   B7                     OR   A   
1D62   ED 52                  SBC   HL,DE   
1D64   7D                     LD   A,L   
1D65   B4                     OR   H   
1D66   28 51                  JR   Z,expectM_0_2250S43   
1D68   CD 1E 09               CALL   printStr   
1D6B   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
1D78   CD 1E 09               CALL   printStr   
1D7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D8A   21 FF FF               LD   HL,TRUE   
1D8D   CD 6C 08               CALL   prtdec   
1D90   CD 1E 09               CALL   printStr   
1D93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DA0   E1                     POP   hl   
1DA1   E5                     PUSH   hl   
1DA2   CD 6C 08               CALL   prtdec   
1DA5   E1                     POP   hl   
1DA6   CD 1E 09               CALL   printStr   
1DA9   20 28 23 00            .CSTR   " (#"   
1DAD   CD B4 08               CALL   prthex   
1DB0   CD 1E 09               CALL   printStr   
1DB3   29 0D 0A 00            .CSTR   ")\r\n"   
1DB7   76                     HALT      
1DB8   00                     .CSTR      
1DB9                EXPECTM_0_2250S43:      
1DB9   E1                     POP   HL   
1DBA                          ;*Macro unroll:  test "2 2 >=", TRUE
1DBA   31 80 36               LD   SP,STACK   
1DBD   CD 25 09               CALL   init   
1DC0   CD 28 35               CALL   execStr   
1DC3   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
1DCA                          ;*Macro unroll:  expect "2 2 >=",TRUE
1DCA   E1                     POP   HL   
1DCB   E5                     PUSH   HL   
1DCC   11 FF FF               LD   DE,TRUE   
1DCF   B7                     OR   A   
1DD0   ED 52                  SBC   HL,DE   
1DD2   7D                     LD   A,L   
1DD3   B4                     OR   H   
1DD4   28 51                  JR   Z,expectM_0_2251S43   
1DD6   CD 1E 09               CALL   printStr   
1DD9   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
1DE6   CD 1E 09               CALL   printStr   
1DE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DF8   21 FF FF               LD   HL,TRUE   
1DFB   CD 6C 08               CALL   prtdec   
1DFE   CD 1E 09               CALL   printStr   
1E01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E0E   E1                     POP   hl   
1E0F   E5                     PUSH   hl   
1E10   CD 6C 08               CALL   prtdec   
1E13   E1                     POP   hl   
1E14   CD 1E 09               CALL   printStr   
1E17   20 28 23 00            .CSTR   " (#"   
1E1B   CD B4 08               CALL   prthex   
1E1E   CD 1E 09               CALL   printStr   
1E21   29 0D 0A 00            .CSTR   ")\r\n"   
1E25   76                     HALT      
1E26   00                     .CSTR      
1E27                EXPECTM_0_2251S43:      
1E27   E1                     POP   HL   
1E28                          ;*Macro unroll:  test "3 1 <<", 6
1E28   31 80 36               LD   SP,STACK   
1E2B   CD 25 09               CALL   init   
1E2E   CD 28 35               CALL   execStr   
1E31   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
1E38                          ;*Macro unroll:  expect "3 1 <<",6
1E38   E1                     POP   HL   
1E39   E5                     PUSH   HL   
1E3A   11 06 00               LD   DE,6   
1E3D   B7                     OR   A   
1E3E   ED 52                  SBC   HL,DE   
1E40   7D                     LD   A,L   
1E41   B4                     OR   H   
1E42   28 51                  JR   Z,expectM_0_2252S43   
1E44   CD 1E 09               CALL   printStr   
1E47   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
1E54   CD 1E 09               CALL   printStr   
1E57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E66   21 06 00               LD   HL,6   
1E69   CD 6C 08               CALL   prtdec   
1E6C   CD 1E 09               CALL   printStr   
1E6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7C   E1                     POP   hl   
1E7D   E5                     PUSH   hl   
1E7E   CD 6C 08               CALL   prtdec   
1E81   E1                     POP   hl   
1E82   CD 1E 09               CALL   printStr   
1E85   20 28 23 00            .CSTR   " (#"   
1E89   CD B4 08               CALL   prthex   
1E8C   CD 1E 09               CALL   printStr   
1E8F   29 0D 0A 00            .CSTR   ")\r\n"   
1E93   76                     HALT      
1E94   00                     .CSTR      
1E95                EXPECTM_0_2252S43:      
1E95   E1                     POP   HL   
1E96                          ;*Macro unroll:  test "10 1 >>", 5
1E96   31 80 36               LD   SP,STACK   
1E99   CD 25 09               CALL   init   
1E9C   CD 28 35               CALL   execStr   
1E9F   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
1EA7                          ;*Macro unroll:  expect "10 1 >>",5
1EA7   E1                     POP   HL   
1EA8   E5                     PUSH   HL   
1EA9   11 05 00               LD   DE,5   
1EAC   B7                     OR   A   
1EAD   ED 52                  SBC   HL,DE   
1EAF   7D                     LD   A,L   
1EB0   B4                     OR   H   
1EB1   28 52                  JR   Z,expectM_0_2253S43   
1EB3   CD 1E 09               CALL   printStr   
1EB6   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
1EC4   CD 1E 09               CALL   printStr   
1EC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED6   21 05 00               LD   HL,5   
1ED9   CD 6C 08               CALL   prtdec   
1EDC   CD 1E 09               CALL   printStr   
1EDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EEC   E1                     POP   hl   
1EED   E5                     PUSH   hl   
1EEE   CD 6C 08               CALL   prtdec   
1EF1   E1                     POP   hl   
1EF2   CD 1E 09               CALL   printStr   
1EF5   20 28 23 00            .CSTR   " (#"   
1EF9   CD B4 08               CALL   prthex   
1EFC   CD 1E 09               CALL   printStr   
1EFF   29 0D 0A 00            .CSTR   ")\r\n"   
1F03   76                     HALT      
1F04   00                     .CSTR      
1F05                EXPECTM_0_2253S43:      
1F05   E1                     POP   HL   
1F06                          ;*Macro unroll:  test "1 x = x", 1
1F06   31 80 36               LD   SP,STACK   
1F09   CD 25 09               CALL   init   
1F0C   CD 28 35               CALL   execStr   
1F0F   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
1F17                          ;*Macro unroll:  expect "1 x = x",1
1F17   E1                     POP   HL   
1F18   E5                     PUSH   HL   
1F19   11 01 00               LD   DE,1   
1F1C   B7                     OR   A   
1F1D   ED 52                  SBC   HL,DE   
1F1F   7D                     LD   A,L   
1F20   B4                     OR   H   
1F21   28 52                  JR   Z,expectM_0_2254S43   
1F23   CD 1E 09               CALL   printStr   
1F26   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
1F34   CD 1E 09               CALL   printStr   
1F37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F46   21 01 00               LD   HL,1   
1F49   CD 6C 08               CALL   prtdec   
1F4C   CD 1E 09               CALL   printStr   
1F4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F5C   E1                     POP   hl   
1F5D   E5                     PUSH   hl   
1F5E   CD 6C 08               CALL   prtdec   
1F61   E1                     POP   hl   
1F62   CD 1E 09               CALL   printStr   
1F65   20 28 23 00            .CSTR   " (#"   
1F69   CD B4 08               CALL   prthex   
1F6C   CD 1E 09               CALL   printStr   
1F6F   29 0D 0A 00            .CSTR   ")\r\n"   
1F73   76                     HALT      
1F74   00                     .CSTR      
1F75                EXPECTM_0_2254S43:      
1F75   E1                     POP   HL   
1F76                          ;*Macro unroll:  test "1{}:", 1
1F76   31 80 36               LD   SP,STACK   
1F79   CD 25 09               CALL   init   
1F7C   CD 28 35               CALL   execStr   
1F7F   31 7B 7D 3A 00         .CSTR   "1{}:"   
1F84                          ;*Macro unroll:  expect "1{}:",1
1F84   E1                     POP   HL   
1F85   E5                     PUSH   HL   
1F86   11 01 00               LD   DE,1   
1F89   B7                     OR   A   
1F8A   ED 52                  SBC   HL,DE   
1F8C   7D                     LD   A,L   
1F8D   B4                     OR   H   
1F8E   28 4F                  JR   Z,expectM_0_2255S43   
1F90   CD 1E 09               CALL   printStr   
1F93   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
1F9E   CD 1E 09               CALL   printStr   
1FA1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FB0   21 01 00               LD   HL,1   
1FB3   CD 6C 08               CALL   prtdec   
1FB6   CD 1E 09               CALL   printStr   
1FB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FC6   E1                     POP   hl   
1FC7   E5                     PUSH   hl   
1FC8   CD 6C 08               CALL   prtdec   
1FCB   E1                     POP   hl   
1FCC   CD 1E 09               CALL   printStr   
1FCF   20 28 23 00            .CSTR   " (#"   
1FD3   CD B4 08               CALL   prthex   
1FD6   CD 1E 09               CALL   printStr   
1FD9   29 0D 0A 00            .CSTR   ")\r\n"   
1FDD   76                     HALT      
1FDE   00                     .CSTR      
1FDF                EXPECTM_0_2255S43:      
1FDF   E1                     POP   HL   
1FE0                          ;*Macro unroll:  test "{1}:", 1
1FE0   31 80 36               LD   SP,STACK   
1FE3   CD 25 09               CALL   init   
1FE6   CD 28 35               CALL   execStr   
1FE9   7B 31 7D 3A 00         .CSTR   "{1}:"   
1FEE                          ;*Macro unroll:  expect "{1}:",1
1FEE   E1                     POP   HL   
1FEF   E5                     PUSH   HL   
1FF0   11 01 00               LD   DE,1   
1FF3   B7                     OR   A   
1FF4   ED 52                  SBC   HL,DE   
1FF6   7D                     LD   A,L   
1FF7   B4                     OR   H   
1FF8   28 4F                  JR   Z,expectM_0_2256S43   
1FFA   CD 1E 09               CALL   printStr   
1FFD   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
2008   CD 1E 09               CALL   printStr   
200B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
201A   21 01 00               LD   HL,1   
201D   CD 6C 08               CALL   prtdec   
2020   CD 1E 09               CALL   printStr   
2023   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2030   E1                     POP   hl   
2031   E5                     PUSH   hl   
2032   CD 6C 08               CALL   prtdec   
2035   E1                     POP   hl   
2036   CD 1E 09               CALL   printStr   
2039   20 28 23 00            .CSTR   " (#"   
203D   CD B4 08               CALL   prthex   
2040   CD 1E 09               CALL   printStr   
2043   29 0D 0A 00            .CSTR   ")\r\n"   
2047   76                     HALT      
2048   00                     .CSTR      
2049                EXPECTM_0_2256S43:      
2049   E1                     POP   HL   
204A                          ;*Macro unroll:  test "{{1}:}:", 1
204A   31 80 36               LD   SP,STACK   
204D   CD 25 09               CALL   init   
2050   CD 28 35               CALL   execStr   
2053   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
205B                          ;*Macro unroll:  expect "{{1}:}:",1
205B   E1                     POP   HL   
205C   E5                     PUSH   HL   
205D   11 01 00               LD   DE,1   
2060   B7                     OR   A   
2061   ED 52                  SBC   HL,DE   
2063   7D                     LD   A,L   
2064   B4                     OR   H   
2065   28 52                  JR   Z,expectM_0_2257S43   
2067   CD 1E 09               CALL   printStr   
206A   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
2078   CD 1E 09               CALL   printStr   
207B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
208A   21 01 00               LD   HL,1   
208D   CD 6C 08               CALL   prtdec   
2090   CD 1E 09               CALL   printStr   
2093   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A0   E1                     POP   hl   
20A1   E5                     PUSH   hl   
20A2   CD 6C 08               CALL   prtdec   
20A5   E1                     POP   hl   
20A6   CD 1E 09               CALL   printStr   
20A9   20 28 23 00            .CSTR   " (#"   
20AD   CD B4 08               CALL   prthex   
20B0   CD 1E 09               CALL   printStr   
20B3   29 0D 0A 00            .CSTR   ")\r\n"   
20B7   76                     HALT      
20B8   00                     .CSTR      
20B9                EXPECTM_0_2257S43:      
20B9   E1                     POP   HL   
20BA                          ;*Macro unroll:  test "{{{1}:}:}:", 1
20BA   31 80 36               LD   SP,STACK   
20BD   CD 25 09               CALL   init   
20C0   CD 28 35               CALL   execStr   
20C3   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
20CE                          ;*Macro unroll:  expect "{{{1}:}:}:",1
20CE   E1                     POP   HL   
20CF   E5                     PUSH   HL   
20D0   11 01 00               LD   DE,1   
20D3   B7                     OR   A   
20D4   ED 52                  SBC   HL,DE   
20D6   7D                     LD   A,L   
20D7   B4                     OR   H   
20D8   28 55                  JR   Z,expectM_0_2258S43   
20DA   CD 1E 09               CALL   printStr   
20DD   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
20EE   CD 1E 09               CALL   printStr   
20F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2100   21 01 00               LD   HL,1   
2103   CD 6C 08               CALL   prtdec   
2106   CD 1E 09               CALL   printStr   
2109   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2116   E1                     POP   hl   
2117   E5                     PUSH   hl   
2118   CD 6C 08               CALL   prtdec   
211B   E1                     POP   hl   
211C   CD 1E 09               CALL   printStr   
211F   20 28 23 00            .CSTR   " (#"   
2123   CD B4 08               CALL   prthex   
2126   CD 1E 09               CALL   printStr   
2129   29 0D 0A 00            .CSTR   ")\r\n"   
212D   76                     HALT      
212E   00                     .CSTR      
212F                EXPECTM_0_2258S43:      
212F   E1                     POP   HL   
2130                          ;*Macro unroll:  test "5 \\F {10} ?", 5
2130   31 80 36               LD   SP,STACK   
2133   CD 25 09               CALL   init   
2136   CD 28 35               CALL   execStr   
2139   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
2145                          ;*Macro unroll:  expect "5 \\F {10} ?",5
2145   E1                     POP   HL   
2146   E5                     PUSH   HL   
2147   11 05 00               LD   DE,5   
214A   B7                     OR   A   
214B   ED 52                  SBC   HL,DE   
214D   7D                     LD   A,L   
214E   B4                     OR   H   
214F   28 56                  JR   Z,expectM_0_2259S43   
2151   CD 1E 09               CALL   printStr   
2154   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
2166   CD 1E 09               CALL   printStr   
2169   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2178   21 05 00               LD   HL,5   
217B   CD 6C 08               CALL   prtdec   
217E   CD 1E 09               CALL   printStr   
2181   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
218E   E1                     POP   hl   
218F   E5                     PUSH   hl   
2190   CD 6C 08               CALL   prtdec   
2193   E1                     POP   hl   
2194   CD 1E 09               CALL   printStr   
2197   20 28 23 00            .CSTR   " (#"   
219B   CD B4 08               CALL   prthex   
219E   CD 1E 09               CALL   printStr   
21A1   29 0D 0A 00            .CSTR   ")\r\n"   
21A5   76                     HALT      
21A6   00                     .CSTR      
21A7                EXPECTM_0_2259S43:      
21A7   E1                     POP   HL   
21A8                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
21A8   31 80 36               LD   SP,STACK   
21AB   CD 25 09               CALL   init   
21AE   CD 28 35               CALL   execStr   
21B1   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
21BF                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
21BF   E1                     POP   HL   
21C0   E5                     PUSH   HL   
21C1   11 0F 00               LD   DE,15   
21C4   B7                     OR   A   
21C5   ED 52                  SBC   HL,DE   
21C7   7D                     LD   A,L   
21C8   B4                     OR   H   
21C9   28 58                  JR   Z,expectM_0_2260S43   
21CB   CD 1E 09               CALL   printStr   
21CE   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
21E2   CD 1E 09               CALL   printStr   
21E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F4   21 0F 00               LD   HL,15   
21F7   CD 6C 08               CALL   prtdec   
21FA   CD 1E 09               CALL   printStr   
21FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
220A   E1                     POP   hl   
220B   E5                     PUSH   hl   
220C   CD 6C 08               CALL   prtdec   
220F   E1                     POP   hl   
2210   CD 1E 09               CALL   printStr   
2213   20 28 23 00            .CSTR   " (#"   
2217   CD B4 08               CALL   prthex   
221A   CD 1E 09               CALL   printStr   
221D   29 0D 0A 00            .CSTR   ")\r\n"   
2221   76                     HALT      
2222   00                     .CSTR      
2223                EXPECTM_0_2260S43:      
2223   E1                     POP   HL   
2224                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
2224   31 80 36               LD   SP,STACK   
2227   CD 25 09               CALL   init   
222A   CD 28 35               CALL   execStr   
222D   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
2241                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
2241   E1                     POP   HL   
2242   E5                     PUSH   HL   
2243   11 15 00               LD   DE,21   
2246   B7                     OR   A   
2247   ED 52                  SBC   HL,DE   
2249   7D                     LD   A,L   
224A   B4                     OR   H   
224B   28 5E                  JR   Z,expectM_0_2261S43   
224D   CD 1E 09               CALL   printStr   
2250   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
226A   CD 1E 09               CALL   printStr   
226D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
227C   21 15 00               LD   HL,21   
227F   CD 6C 08               CALL   prtdec   
2282   CD 1E 09               CALL   printStr   
2285   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2292   E1                     POP   hl   
2293   E5                     PUSH   hl   
2294   CD 6C 08               CALL   prtdec   
2297   E1                     POP   hl   
2298   CD 1E 09               CALL   printStr   
229B   20 28 23 00            .CSTR   " (#"   
229F   CD B4 08               CALL   prthex   
22A2   CD 1E 09               CALL   printStr   
22A5   29 0D 0A 00            .CSTR   ")\r\n"   
22A9   76                     HALT      
22AA   00                     .CSTR      
22AB                EXPECTM_0_2261S43:      
22AB   E1                     POP   HL   
22AC                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
22AC   31 80 36               LD   SP,STACK   
22AF   CD 25 09               CALL   init   
22B2   CD 28 35               CALL   execStr   
22B5   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
22C9                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
22C9   E1                     POP   HL   
22CA   E5                     PUSH   HL   
22CB   11 0B 00               LD   DE,11   
22CE   B7                     OR   A   
22CF   ED 52                  SBC   HL,DE   
22D1   7D                     LD   A,L   
22D2   B4                     OR   H   
22D3   28 5E                  JR   Z,expectM_0_2262S43   
22D5   CD 1E 09               CALL   printStr   
22D8   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
22F2   CD 1E 09               CALL   printStr   
22F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2304   21 0B 00               LD   HL,11   
2307   CD 6C 08               CALL   prtdec   
230A   CD 1E 09               CALL   printStr   
230D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
231A   E1                     POP   hl   
231B   E5                     PUSH   hl   
231C   CD 6C 08               CALL   prtdec   
231F   E1                     POP   hl   
2320   CD 1E 09               CALL   printStr   
2323   20 28 23 00            .CSTR   " (#"   
2327   CD B4 08               CALL   prthex   
232A   CD 1E 09               CALL   printStr   
232D   29 0D 0A 00            .CSTR   ")\r\n"   
2331   76                     HALT      
2332   00                     .CSTR      
2333                EXPECTM_0_2262S43:      
2333   E1                     POP   HL   
2334                          ;*Macro unroll:  test "() -2%", $0000
2334   31 80 36               LD   SP,STACK   
2337   CD 25 09               CALL   init   
233A   CD 28 35               CALL   execStr   
233D   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
2344                          ;*Macro unroll:  expect "() -2%",$0000
2344   E1                     POP   HL   
2345   E5                     PUSH   HL   
2346   11 00 00               LD   DE,$0000   
2349   B7                     OR   A   
234A   ED 52                  SBC   HL,DE   
234C   7D                     LD   A,L   
234D   B4                     OR   H   
234E   28 51                  JR   Z,expectM_0_2263S43   
2350   CD 1E 09               CALL   printStr   
2353   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
2360   CD 1E 09               CALL   printStr   
2363   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2372   21 00 00               LD   HL,$0000   
2375   CD 6C 08               CALL   prtdec   
2378   CD 1E 09               CALL   printStr   
237B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2388   E1                     POP   hl   
2389   E5                     PUSH   hl   
238A   CD 6C 08               CALL   prtdec   
238D   E1                     POP   hl   
238E   CD 1E 09               CALL   printStr   
2391   20 28 23 00            .CSTR   " (#"   
2395   CD B4 08               CALL   prthex   
2398   CD 1E 09               CALL   printStr   
239B   29 0D 0A 00            .CSTR   ")\r\n"   
239F   76                     HALT      
23A0   00                     .CSTR      
23A1                EXPECTM_0_2263S43:      
23A1   E1                     POP   HL   
23A2                          ;*Macro unroll:  test "(a) -1%", $0001
23A2   31 80 36               LD   SP,STACK   
23A5   CD 25 09               CALL   init   
23A8   CD 28 35               CALL   execStr   
23AB   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
23B3                          ;*Macro unroll:  expect "(a) -1%",$0001
23B3   E1                     POP   HL   
23B4   E5                     PUSH   HL   
23B5   11 01 00               LD   DE,$0001   
23B8   B7                     OR   A   
23B9   ED 52                  SBC   HL,DE   
23BB   7D                     LD   A,L   
23BC   B4                     OR   H   
23BD   28 52                  JR   Z,expectM_0_2264S43   
23BF   CD 1E 09               CALL   printStr   
23C2   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
23D0   CD 1E 09               CALL   printStr   
23D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23E2   21 01 00               LD   HL,$0001   
23E5   CD 6C 08               CALL   prtdec   
23E8   CD 1E 09               CALL   printStr   
23EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F8   E1                     POP   hl   
23F9   E5                     PUSH   hl   
23FA   CD 6C 08               CALL   prtdec   
23FD   E1                     POP   hl   
23FE   CD 1E 09               CALL   printStr   
2401   20 28 23 00            .CSTR   " (#"   
2405   CD B4 08               CALL   prthex   
2408   CD 1E 09               CALL   printStr   
240B   29 0D 0A 00            .CSTR   ")\r\n"   
240F   76                     HALT      
2410   00                     .CSTR      
2411                EXPECTM_0_2264S43:      
2411   E1                     POP   HL   
2412                          ;*Macro unroll:  test "(a:) -1%", $0001
2412   31 80 36               LD   SP,STACK   
2415   CD 25 09               CALL   init   
2418   CD 28 35               CALL   execStr   
241B   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
2424                          ;*Macro unroll:  expect "(a:) -1%",$0001
2424   E1                     POP   HL   
2425   E5                     PUSH   HL   
2426   11 01 00               LD   DE,$0001   
2429   B7                     OR   A   
242A   ED 52                  SBC   HL,DE   
242C   7D                     LD   A,L   
242D   B4                     OR   H   
242E   28 53                  JR   Z,expectM_0_2265S43   
2430   CD 1E 09               CALL   printStr   
2433   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
2442   CD 1E 09               CALL   printStr   
2445   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2454   21 01 00               LD   HL,$0001   
2457   CD 6C 08               CALL   prtdec   
245A   CD 1E 09               CALL   printStr   
245D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
246A   E1                     POP   hl   
246B   E5                     PUSH   hl   
246C   CD 6C 08               CALL   prtdec   
246F   E1                     POP   hl   
2470   CD 1E 09               CALL   printStr   
2473   20 28 23 00            .CSTR   " (#"   
2477   CD B4 08               CALL   prthex   
247A   CD 1E 09               CALL   printStr   
247D   29 0D 0A 00            .CSTR   ")\r\n"   
2481   76                     HALT      
2482   00                     .CSTR      
2483                EXPECTM_0_2265S43:      
2483   E1                     POP   HL   
2484                          ;*Macro unroll:  test "(a:b) -1%", $0102
2484   31 80 36               LD   SP,STACK   
2487   CD 25 09               CALL   init   
248A   CD 28 35               CALL   execStr   
248D   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
2497                          ;*Macro unroll:  expect "(a:b) -1%",$0102
2497   E1                     POP   HL   
2498   E5                     PUSH   HL   
2499   11 02 01               LD   DE,$0102   
249C   B7                     OR   A   
249D   ED 52                  SBC   HL,DE   
249F   7D                     LD   A,L   
24A0   B4                     OR   H   
24A1   28 54                  JR   Z,expectM_0_2266S43   
24A3   CD 1E 09               CALL   printStr   
24A6   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
24B6   CD 1E 09               CALL   printStr   
24B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24C8   21 02 01               LD   HL,$0102   
24CB   CD 6C 08               CALL   prtdec   
24CE   CD 1E 09               CALL   printStr   
24D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DE   E1                     POP   hl   
24DF   E5                     PUSH   hl   
24E0   CD 6C 08               CALL   prtdec   
24E3   E1                     POP   hl   
24E4   CD 1E 09               CALL   printStr   
24E7   20 28 23 00            .CSTR   " (#"   
24EB   CD B4 08               CALL   prthex   
24EE   CD 1E 09               CALL   printStr   
24F1   29 0D 0A 00            .CSTR   ")\r\n"   
24F5   76                     HALT      
24F6   00                     .CSTR      
24F7                EXPECTM_0_2266S43:      
24F7   E1                     POP   HL   
24F8                          ;*Macro unroll:  test "(:b) -1%", $0101
24F8   31 80 36               LD   SP,STACK   
24FB   CD 25 09               CALL   init   
24FE   CD 28 35               CALL   execStr   
2501   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
250A                          ;*Macro unroll:  expect "(:b) -1%",$0101
250A   E1                     POP   HL   
250B   E5                     PUSH   HL   
250C   11 01 01               LD   DE,$0101   
250F   B7                     OR   A   
2510   ED 52                  SBC   HL,DE   
2512   7D                     LD   A,L   
2513   B4                     OR   H   
2514   28 53                  JR   Z,expectM_0_2267S43   
2516   CD 1E 09               CALL   printStr   
2519   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
2528   CD 1E 09               CALL   printStr   
252B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253A   21 01 01               LD   HL,$0101   
253D   CD 6C 08               CALL   prtdec   
2540   CD 1E 09               CALL   printStr   
2543   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2550   E1                     POP   hl   
2551   E5                     PUSH   hl   
2552   CD 6C 08               CALL   prtdec   
2555   E1                     POP   hl   
2556   CD 1E 09               CALL   printStr   
2559   20 28 23 00            .CSTR   " (#"   
255D   CD B4 08               CALL   prthex   
2560   CD 1E 09               CALL   printStr   
2563   29 0D 0A 00            .CSTR   ")\r\n"   
2567   76                     HALT      
2568   00                     .CSTR      
2569                EXPECTM_0_2267S43:      
2569   E1                     POP   HL   
256A                          ;*Macro unroll:  test "() {2} \\f:", 2
256A   31 80 36               LD   SP,STACK   
256D   CD 25 09               CALL   init   
2570   CD 28 35               CALL   execStr   
2573   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
257E                          ;*Macro unroll:  expect "() {2} \\f:",2
257E   E1                     POP   HL   
257F   E5                     PUSH   HL   
2580   11 02 00               LD   DE,2   
2583   B7                     OR   A   
2584   ED 52                  SBC   HL,DE   
2586   7D                     LD   A,L   
2587   B4                     OR   H   
2588   28 55                  JR   Z,expectM_0_2268S43   
258A   CD 1E 09               CALL   printStr   
258D   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
259E   CD 1E 09               CALL   printStr   
25A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B0   21 02 00               LD   HL,2   
25B3   CD 6C 08               CALL   prtdec   
25B6   CD 1E 09               CALL   printStr   
25B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25C6   E1                     POP   hl   
25C7   E5                     PUSH   hl   
25C8   CD 6C 08               CALL   prtdec   
25CB   E1                     POP   hl   
25CC   CD 1E 09               CALL   printStr   
25CF   20 28 23 00            .CSTR   " (#"   
25D3   CD B4 08               CALL   prthex   
25D6   CD 1E 09               CALL   printStr   
25D9   29 0D 0A 00            .CSTR   ")\r\n"   
25DD   76                     HALT      
25DE   00                     .CSTR      
25DF                EXPECTM_0_2268S43:      
25DF   E1                     POP   HL   
25E0                          ;*Macro unroll:  test "(a) {2} \\f:", 2
25E0   31 80 36               LD   SP,STACK   
25E3   CD 25 09               CALL   init   
25E6   CD 28 35               CALL   execStr   
25E9   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
25F5                          ;*Macro unroll:  expect "(a) {2} \\f:",2
25F5   E1                     POP   HL   
25F6   E5                     PUSH   HL   
25F7   11 02 00               LD   DE,2   
25FA   B7                     OR   A   
25FB   ED 52                  SBC   HL,DE   
25FD   7D                     LD   A,L   
25FE   B4                     OR   H   
25FF   28 56                  JR   Z,expectM_0_2269S43   
2601   CD 1E 09               CALL   printStr   
2604   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
2616   CD 1E 09               CALL   printStr   
2619   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2628   21 02 00               LD   HL,2   
262B   CD 6C 08               CALL   prtdec   
262E   CD 1E 09               CALL   printStr   
2631   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
263E   E1                     POP   hl   
263F   E5                     PUSH   hl   
2640   CD 6C 08               CALL   prtdec   
2643   E1                     POP   hl   
2644   CD 1E 09               CALL   printStr   
2647   20 28 23 00            .CSTR   " (#"   
264B   CD B4 08               CALL   prthex   
264E   CD 1E 09               CALL   printStr   
2651   29 0D 0A 00            .CSTR   ")\r\n"   
2655   76                     HALT      
2656   00                     .CSTR      
2657                EXPECTM_0_2269S43:      
2657   E1                     POP   HL   
2658                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
2658   31 80 36               LD   SP,STACK   
265B   CD 25 09               CALL   init   
265E   CD 28 35               CALL   execStr   
2661   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2670                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2670   E1                     POP   HL   
2671   E5                     PUSH   HL   
2672   11 05 00               LD   DE,5   
2675   B7                     OR   A   
2676   ED 52                  SBC   HL,DE   
2678   7D                     LD   A,L   
2679   B4                     OR   H   
267A   28 59                  JR   Z,expectM_0_2270S43   
267C   CD 1E 09               CALL   printStr   
267F   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
2694   CD 1E 09               CALL   printStr   
2697   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26A6   21 05 00               LD   HL,5   
26A9   CD 6C 08               CALL   prtdec   
26AC   CD 1E 09               CALL   printStr   
26AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26BC   E1                     POP   hl   
26BD   E5                     PUSH   hl   
26BE   CD 6C 08               CALL   prtdec   
26C1   E1                     POP   hl   
26C2   CD 1E 09               CALL   printStr   
26C5   20 28 23 00            .CSTR   " (#"   
26C9   CD B4 08               CALL   prthex   
26CC   CD 1E 09               CALL   printStr   
26CF   29 0D 0A 00            .CSTR   ")\r\n"   
26D3   76                     HALT      
26D4   00                     .CSTR      
26D5                EXPECTM_0_2270S43:      
26D5   E1                     POP   HL   
26D6                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
26D6   31 80 36               LD   SP,STACK   
26D9   CD 25 09               CALL   init   
26DC   CD 28 35               CALL   execStr   
26DF   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
26F0                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
26F0   E1                     POP   HL   
26F1   E5                     PUSH   HL   
26F2   11 05 00               LD   DE,5   
26F5   B7                     OR   A   
26F6   ED 52                  SBC   HL,DE   
26F8   7D                     LD   A,L   
26F9   B4                     OR   H   
26FA   28 5B                  JR   Z,expectM_0_2271S43   
26FC   CD 1E 09               CALL   printStr   
26FF   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
2716   CD 1E 09               CALL   printStr   
2719   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2728   21 05 00               LD   HL,5   
272B   CD 6C 08               CALL   prtdec   
272E   CD 1E 09               CALL   printStr   
2731   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
273E   E1                     POP   hl   
273F   E5                     PUSH   hl   
2740   CD 6C 08               CALL   prtdec   
2743   E1                     POP   hl   
2744   CD 1E 09               CALL   printStr   
2747   20 28 23 00            .CSTR   " (#"   
274B   CD B4 08               CALL   prthex   
274E   CD 1E 09               CALL   printStr   
2751   29 0D 0A 00            .CSTR   ")\r\n"   
2755   76                     HALT      
2756   00                     .CSTR      
2757                EXPECTM_0_2271S43:      
2757   E1                     POP   HL   
2758                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
2758   31 80 36               LD   SP,STACK   
275B   CD 25 09               CALL   init   
275E   CD 28 35               CALL   execStr   
2761   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2770                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2770   E1                     POP   HL   
2771   E5                     PUSH   HL   
2772   11 02 00               LD   DE,2   
2775   B7                     OR   A   
2776   ED 52                  SBC   HL,DE   
2778   7D                     LD   A,L   
2779   B4                     OR   H   
277A   28 59                  JR   Z,expectM_0_2272S43   
277C   CD 1E 09               CALL   printStr   
277F   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
2794   CD 1E 09               CALL   printStr   
2797   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27A6   21 02 00               LD   HL,2   
27A9   CD 6C 08               CALL   prtdec   
27AC   CD 1E 09               CALL   printStr   
27AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27BC   E1                     POP   hl   
27BD   E5                     PUSH   hl   
27BE   CD 6C 08               CALL   prtdec   
27C1   E1                     POP   hl   
27C2   CD 1E 09               CALL   printStr   
27C5   20 28 23 00            .CSTR   " (#"   
27C9   CD B4 08               CALL   prthex   
27CC   CD 1E 09               CALL   printStr   
27CF   29 0D 0A 00            .CSTR   ")\r\n"   
27D3   76                     HALT      
27D4   00                     .CSTR      
27D5                EXPECTM_0_2272S43:      
27D5   E1                     POP   HL   
27D6                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
27D6   31 80 36               LD   SP,STACK   
27D9   CD 25 09               CALL   init   
27DC   CD 28 35               CALL   execStr   
27DF   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
27F3                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
27F3   E1                     POP   HL   
27F4   E5                     PUSH   HL   
27F5   11 05 00               LD   DE,5   
27F8   B7                     OR   A   
27F9   ED 52                  SBC   HL,DE   
27FB   7D                     LD   A,L   
27FC   B4                     OR   H   
27FD   28 5E                  JR   Z,expectM_0_2273S43   
27FF   CD 1E 09               CALL   printStr   
2802   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
281C   CD 1E 09               CALL   printStr   
281F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
282E   21 05 00               LD   HL,5   
2831   CD 6C 08               CALL   prtdec   
2834   CD 1E 09               CALL   printStr   
2837   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2844   E1                     POP   hl   
2845   E5                     PUSH   hl   
2846   CD 6C 08               CALL   prtdec   
2849   E1                     POP   hl   
284A   CD 1E 09               CALL   printStr   
284D   20 28 23 00            .CSTR   " (#"   
2851   CD B4 08               CALL   prthex   
2854   CD 1E 09               CALL   printStr   
2857   29 0D 0A 00            .CSTR   ")\r\n"   
285B   76                     HALT      
285C   00                     .CSTR      
285D                EXPECTM_0_2273S43:      
285D   E1                     POP   HL   
285E                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
285E   31 80 36               LD   SP,STACK   
2861   CD 25 09               CALL   init   
2864   CD 28 35               CALL   execStr   
2867   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
287C                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
287C   E1                     POP   HL   
287D   E5                     PUSH   HL   
287E   11 01 00               LD   DE,1   
2881   B7                     OR   A   
2882   ED 52                  SBC   HL,DE   
2884   7D                     LD   A,L   
2885   B4                     OR   H   
2886   28 5F                  JR   Z,expectM_0_2274S43   
2888   CD 1E 09               CALL   printStr   
288B   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
28A6   CD 1E 09               CALL   printStr   
28A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B8   21 01 00               LD   HL,1   
28BB   CD 6C 08               CALL   prtdec   
28BE   CD 1E 09               CALL   printStr   
28C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28CE   E1                     POP   hl   
28CF   E5                     PUSH   hl   
28D0   CD 6C 08               CALL   prtdec   
28D3   E1                     POP   hl   
28D4   CD 1E 09               CALL   printStr   
28D7   20 28 23 00            .CSTR   " (#"   
28DB   CD B4 08               CALL   prthex   
28DE   CD 1E 09               CALL   printStr   
28E1   29 0D 0A 00            .CSTR   ")\r\n"   
28E5   76                     HALT      
28E6   00                     .CSTR      
28E7                EXPECTM_0_2274S43:      
28E7   E1                     POP   HL   
28E8                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
28E8   31 80 36               LD   SP,STACK   
28EB   CD 25 09               CALL   init   
28EE   CD 28 35               CALL   execStr   
28F1   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
2909                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
2909   E1                     POP   HL   
290A   E5                     PUSH   HL   
290B   11 07 00               LD   DE,7   
290E   B7                     OR   A   
290F   ED 52                  SBC   HL,DE   
2911   7D                     LD   A,L   
2912   B4                     OR   H   
2913   28 62                  JR   Z,expectM_0_2275S43   
2915   CD 1E 09               CALL   printStr   
2918   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
2936   CD 1E 09               CALL   printStr   
2939   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2948   21 07 00               LD   HL,7   
294B   CD 6C 08               CALL   prtdec   
294E   CD 1E 09               CALL   printStr   
2951   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
295E   E1                     POP   hl   
295F   E5                     PUSH   hl   
2960   CD 6C 08               CALL   prtdec   
2963   E1                     POP   hl   
2964   CD 1E 09               CALL   printStr   
2967   20 28 23 00            .CSTR   " (#"   
296B   CD B4 08               CALL   prthex   
296E   CD 1E 09               CALL   printStr   
2971   29 0D 0A 00            .CSTR   ")\r\n"   
2975   76                     HALT      
2976   00                     .CSTR      
2977                EXPECTM_0_2275S43:      
2977   E1                     POP   HL   
2978                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
2978   31 80 36               LD   SP,STACK   
297B   CD 25 09               CALL   init   
297E   CD 28 35               CALL   execStr   
2981   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
299B                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
299B   E1                     POP   HL   
299C   E5                     PUSH   HL   
299D   11 06 00               LD   DE,6   
29A0   B7                     OR   A   
29A1   ED 52                  SBC   HL,DE   
29A3   7D                     LD   A,L   
29A4   B4                     OR   H   
29A5   28 64                  JR   Z,expectM_0_2276S43   
29A7   CD 1E 09               CALL   printStr   
29AA   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
29CA   CD 1E 09               CALL   printStr   
29CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29DC   21 06 00               LD   HL,6   
29DF   CD 6C 08               CALL   prtdec   
29E2   CD 1E 09               CALL   printStr   
29E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29F2   E1                     POP   hl   
29F3   E5                     PUSH   hl   
29F4   CD 6C 08               CALL   prtdec   
29F7   E1                     POP   hl   
29F8   CD 1E 09               CALL   printStr   
29FB   20 28 23 00            .CSTR   " (#"   
29FF   CD B4 08               CALL   prthex   
2A02   CD 1E 09               CALL   printStr   
2A05   29 0D 0A 00            .CSTR   ")\r\n"   
2A09   76                     HALT      
2A0A   00                     .CSTR      
2A0B                EXPECTM_0_2276S43:      
2A0B   E1                     POP   HL   
2A0C                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
2A0C   31 80 36               LD   SP,STACK   
2A0F   CD 25 09               CALL   init   
2A12   CD 28 35               CALL   execStr   
2A15   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
2A28                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
2A28   E1                     POP   HL   
2A29   E5                     PUSH   HL   
2A2A   11 02 00               LD   DE,2   
2A2D   B7                     OR   A   
2A2E   ED 52                  SBC   HL,DE   
2A30   7D                     LD   A,L   
2A31   B4                     OR   H   
2A32   28 5D                  JR   Z,expectM_0_2277S43   
2A34   CD 1E 09               CALL   printStr   
2A37   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
2A50   CD 1E 09               CALL   printStr   
2A53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A62   21 02 00               LD   HL,2   
2A65   CD 6C 08               CALL   prtdec   
2A68   CD 1E 09               CALL   printStr   
2A6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A78   E1                     POP   hl   
2A79   E5                     PUSH   hl   
2A7A   CD 6C 08               CALL   prtdec   
2A7D   E1                     POP   hl   
2A7E   CD 1E 09               CALL   printStr   
2A81   20 28 23 00            .CSTR   " (#"   
2A85   CD B4 08               CALL   prthex   
2A88   CD 1E 09               CALL   printStr   
2A8B   29 0D 0A 00            .CSTR   ")\r\n"   
2A8F   76                     HALT      
2A90   00                     .CSTR      
2A91                EXPECTM_0_2277S43:      
2A91   E1                     POP   HL   
2A92                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2A92   31 80 36               LD   SP,STACK   
2A95   CD 25 09               CALL   init   
2A98   CD 28 35               CALL   execStr   
2A9B   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2AB1                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2AB1   E1                     POP   HL   
2AB2   E5                     PUSH   HL   
2AB3   11 01 00               LD   DE,1   
2AB6   B7                     OR   A   
2AB7   ED 52                  SBC   HL,DE   
2AB9   7D                     LD   A,L   
2ABA   B4                     OR   H   
2ABB   28 60                  JR   Z,expectM_0_2278S43   
2ABD   CD 1E 09               CALL   printStr   
2AC0   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2ADC   CD 1E 09               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 01 00               LD   HL,1   
2AF1   CD 6C 08               CALL   prtdec   
2AF4   CD 1E 09               CALL   printStr   
2AF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B04   E1                     POP   hl   
2B05   E5                     PUSH   hl   
2B06   CD 6C 08               CALL   prtdec   
2B09   E1                     POP   hl   
2B0A   CD 1E 09               CALL   printStr   
2B0D   20 28 23 00            .CSTR   " (#"   
2B11   CD B4 08               CALL   prthex   
2B14   CD 1E 09               CALL   printStr   
2B17   29 0D 0A 00            .CSTR   ")\r\n"   
2B1B   76                     HALT      
2B1C   00                     .CSTR      
2B1D                EXPECTM_0_2278S43:      
2B1D   E1                     POP   HL   
2B1E                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2B1E   31 80 36               LD   SP,STACK   
2B21   CD 25 09               CALL   init   
2B24   CD 28 35               CALL   execStr   
2B27   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2B3E                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2B3E   E1                     POP   HL   
2B3F   E5                     PUSH   HL   
2B40   11 02 00               LD   DE,2   
2B43   B7                     OR   A   
2B44   ED 52                  SBC   HL,DE   
2B46   7D                     LD   A,L   
2B47   B4                     OR   H   
2B48   28 61                  JR   Z,expectM_0_2279S43   
2B4A   CD 1E 09               CALL   printStr   
2B4D   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2B6A   CD 1E 09               CALL   printStr   
2B6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B7C   21 02 00               LD   HL,2   
2B7F   CD 6C 08               CALL   prtdec   
2B82   CD 1E 09               CALL   printStr   
2B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B92   E1                     POP   hl   
2B93   E5                     PUSH   hl   
2B94   CD 6C 08               CALL   prtdec   
2B97   E1                     POP   hl   
2B98   CD 1E 09               CALL   printStr   
2B9B   20 28 23 00            .CSTR   " (#"   
2B9F   CD B4 08               CALL   prthex   
2BA2   CD 1E 09               CALL   printStr   
2BA5   29 0D 0A 00            .CSTR   ")\r\n"   
2BA9   76                     HALT      
2BAA   00                     .CSTR      
2BAB                EXPECTM_0_2279S43:      
2BAB   E1                     POP   HL   
2BAC                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2BAC   31 80 36               LD   SP,STACK   
2BAF   CD 25 09               CALL   init   
2BB2   CD 28 35               CALL   execStr   
2BB5   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2BCD                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2BCD   E1                     POP   HL   
2BCE   E5                     PUSH   HL   
2BCF   11 02 00               LD   DE,2   
2BD2   B7                     OR   A   
2BD3   ED 52                  SBC   HL,DE   
2BD5   7D                     LD   A,L   
2BD6   B4                     OR   H   
2BD7   28 62                  JR   Z,expectM_0_2280S43   
2BD9   CD 1E 09               CALL   printStr   
2BDC   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
2BFA   CD 1E 09               CALL   printStr   
2BFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C0C   21 02 00               LD   HL,2   
2C0F   CD 6C 08               CALL   prtdec   
2C12   CD 1E 09               CALL   printStr   
2C15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C22   E1                     POP   hl   
2C23   E5                     PUSH   hl   
2C24   CD 6C 08               CALL   prtdec   
2C27   E1                     POP   hl   
2C28   CD 1E 09               CALL   printStr   
2C2B   20 28 23 00            .CSTR   " (#"   
2C2F   CD B4 08               CALL   prthex   
2C32   CD 1E 09               CALL   printStr   
2C35   29 0D 0A 00            .CSTR   ")\r\n"   
2C39   76                     HALT      
2C3A   00                     .CSTR      
2C3B                EXPECTM_0_2280S43:      
2C3B   E1                     POP   HL   
2C3C                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2C3C   31 80 36               LD   SP,STACK   
2C3F   CD 25 09               CALL   init   
2C42   CD 28 35               CALL   execStr   
2C45   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2C5C                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2C5C   E1                     POP   HL   
2C5D   E5                     PUSH   HL   
2C5E   11 02 00               LD   DE,2   
2C61   B7                     OR   A   
2C62   ED 52                  SBC   HL,DE   
2C64   7D                     LD   A,L   
2C65   B4                     OR   H   
2C66   28 61                  JR   Z,expectM_0_2281S43   
2C68   CD 1E 09               CALL   printStr   
2C6B   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2C88   CD 1E 09               CALL   printStr   
2C8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C9A   21 02 00               LD   HL,2   
2C9D   CD 6C 08               CALL   prtdec   
2CA0   CD 1E 09               CALL   printStr   
2CA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CB0   E1                     POP   hl   
2CB1   E5                     PUSH   hl   
2CB2   CD 6C 08               CALL   prtdec   
2CB5   E1                     POP   hl   
2CB6   CD 1E 09               CALL   printStr   
2CB9   20 28 23 00            .CSTR   " (#"   
2CBD   CD B4 08               CALL   prthex   
2CC0   CD 1E 09               CALL   printStr   
2CC3   29 0D 0A 00            .CSTR   ")\r\n"   
2CC7   76                     HALT      
2CC8   00                     .CSTR      
2CC9                EXPECTM_0_2281S43:      
2CC9   E1                     POP   HL   
2CCA                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
2CCA   31 80 36               LD   SP,STACK   
2CCD   CD 25 09               CALL   init   
2CD0   CD 28 35               CALL   execStr   
2CD3   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
2CF1                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
2CF1   E1                     POP   HL   
2CF2   E5                     PUSH   HL   
2CF3   11 05 00               LD   DE,5   
2CF6   B7                     OR   A   
2CF7   ED 52                  SBC   HL,DE   
2CF9   7D                     LD   A,L   
2CFA   B4                     OR   H   
2CFB   28 68                  JR   Z,expectM_0_2282S43   
2CFD   CD 1E 09               CALL   printStr   
2D00   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
2D24   CD 1E 09               CALL   printStr   
2D27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D36   21 05 00               LD   HL,5   
2D39   CD 6C 08               CALL   prtdec   
2D3C   CD 1E 09               CALL   printStr   
2D3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D4C   E1                     POP   hl   
2D4D   E5                     PUSH   hl   
2D4E   CD 6C 08               CALL   prtdec   
2D51   E1                     POP   hl   
2D52   CD 1E 09               CALL   printStr   
2D55   20 28 23 00            .CSTR   " (#"   
2D59   CD B4 08               CALL   prthex   
2D5C   CD 1E 09               CALL   printStr   
2D5F   29 0D 0A 00            .CSTR   ")\r\n"   
2D63   76                     HALT      
2D64   00                     .CSTR      
2D65                EXPECTM_0_2282S43:      
2D65   E1                     POP   HL   
2D66                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
2D66   31 80 36               LD   SP,STACK   
2D69   CD 25 09               CALL   init   
2D6C   CD 28 35               CALL   execStr   
2D6F   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
2D84                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
2D84   E1                     POP   HL   
2D85   E5                     PUSH   HL   
2D86   11 02 00               LD   DE,2   
2D89   B7                     OR   A   
2D8A   ED 52                  SBC   HL,DE   
2D8C   7D                     LD   A,L   
2D8D   B4                     OR   H   
2D8E   28 5F                  JR   Z,expectM_0_2283S43   
2D90   CD 1E 09               CALL   printStr   
2D93   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
2DAE   CD 1E 09               CALL   printStr   
2DB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DC0   21 02 00               LD   HL,2   
2DC3   CD 6C 08               CALL   prtdec   
2DC6   CD 1E 09               CALL   printStr   
2DC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DD6   E1                     POP   hl   
2DD7   E5                     PUSH   hl   
2DD8   CD 6C 08               CALL   prtdec   
2DDB   E1                     POP   hl   
2DDC   CD 1E 09               CALL   printStr   
2DDF   20 28 23 00            .CSTR   " (#"   
2DE3   CD B4 08               CALL   prthex   
2DE6   CD 1E 09               CALL   printStr   
2DE9   29 0D 0A 00            .CSTR   ")\r\n"   
2DED   76                     HALT      
2DEE   00                     .CSTR      
2DEF                EXPECTM_0_2283S43:      
2DEF   E1                     POP   HL   
2DF0                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
2DF0   31 80 36               LD   SP,STACK   
2DF3   CD 25 09               CALL   init   
2DF6   CD 28 35               CALL   execStr   
2DF9   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
2E14                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
2E14   E1                     POP   HL   
2E15   E5                     PUSH   HL   
2E16   11 64 00               LD   DE,100   
2E19   B7                     OR   A   
2E1A   ED 52                  SBC   HL,DE   
2E1C   7D                     LD   A,L   
2E1D   B4                     OR   H   
2E1E   28 65                  JR   Z,expectM_0_2284S43   
2E20   CD 1E 09               CALL   printStr   
2E23   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
2E44   CD 1E 09               CALL   printStr   
2E47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E56   21 64 00               LD   HL,100   
2E59   CD 6C 08               CALL   prtdec   
2E5C   CD 1E 09               CALL   printStr   
2E5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E6C   E1                     POP   hl   
2E6D   E5                     PUSH   hl   
2E6E   CD 6C 08               CALL   prtdec   
2E71   E1                     POP   hl   
2E72   CD 1E 09               CALL   printStr   
2E75   20 28 23 00            .CSTR   " (#"   
2E79   CD B4 08               CALL   prthex   
2E7C   CD 1E 09               CALL   printStr   
2E7F   29 0D 0A 00            .CSTR   ")\r\n"   
2E83   76                     HALT      
2E84   00                     .CSTR      
2E85                EXPECTM_0_2284S43:      
2E85   E1                     POP   HL   
2E86                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
2E86   31 80 36               LD   SP,STACK   
2E89   CD 25 09               CALL   init   
2E8C   CD 28 35               CALL   execStr   
2E8F   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
2EAB                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
2EAB   E1                     POP   HL   
2EAC   E5                     PUSH   HL   
2EAD   11 01 00               LD   DE,1   
2EB0   B7                     OR   A   
2EB1   ED 52                  SBC   HL,DE   
2EB3   7D                     LD   A,L   
2EB4   B4                     OR   H   
2EB5   28 66                  JR   Z,expectM_0_2285S43   
2EB7   CD 1E 09               CALL   printStr   
2EBA   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
2EDC   CD 1E 09               CALL   printStr   
2EDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EEE   21 01 00               LD   HL,1   
2EF1   CD 6C 08               CALL   prtdec   
2EF4   CD 1E 09               CALL   printStr   
2EF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F04   E1                     POP   hl   
2F05   E5                     PUSH   hl   
2F06   CD 6C 08               CALL   prtdec   
2F09   E1                     POP   hl   
2F0A   CD 1E 09               CALL   printStr   
2F0D   20 28 23 00            .CSTR   " (#"   
2F11   CD B4 08               CALL   prthex   
2F14   CD 1E 09               CALL   printStr   
2F17   29 0D 0A 00            .CSTR   ")\r\n"   
2F1B   76                     HALT      
2F1C   00                     .CSTR      
2F1D                EXPECTM_0_2285S43:      
2F1D   E1                     POP   HL   
2F1E                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
2F1E   31 80 36               LD   SP,STACK   
2F21   CD 25 09               CALL   init   
2F24   CD 28 35               CALL   execStr   
2F27   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
2F44                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
2F44   E1                     POP   HL   
2F45   E5                     PUSH   HL   
2F46   11 02 00               LD   DE,2   
2F49   B7                     OR   A   
2F4A   ED 52                  SBC   HL,DE   
2F4C   7D                     LD   A,L   
2F4D   B4                     OR   H   
2F4E   28 67                  JR   Z,expectM_0_2286S43   
2F50   CD 1E 09               CALL   printStr   
2F53   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
2F76   CD 1E 09               CALL   printStr   
2F79   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F88   21 02 00               LD   HL,2   
2F8B   CD 6C 08               CALL   prtdec   
2F8E   CD 1E 09               CALL   printStr   
2F91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F9E   E1                     POP   hl   
2F9F   E5                     PUSH   hl   
2FA0   CD 6C 08               CALL   prtdec   
2FA3   E1                     POP   hl   
2FA4   CD 1E 09               CALL   printStr   
2FA7   20 28 23 00            .CSTR   " (#"   
2FAB   CD B4 08               CALL   prthex   
2FAE   CD 1E 09               CALL   printStr   
2FB1   29 0D 0A 00            .CSTR   ")\r\n"   
2FB5   76                     HALT      
2FB6   00                     .CSTR      
2FB7                EXPECTM_0_2286S43:      
2FB7   E1                     POP   HL   
2FB8                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
2FB8   31 80 36               LD   SP,STACK   
2FBB   CD 25 09               CALL   init   
2FBE   CD 28 35               CALL   execStr   
2FC1   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2FE6                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
2FE6   E1                     POP   HL   
2FE7   E5                     PUSH   HL   
2FE8   11 0B 00               LD   DE,11   
2FEB   B7                     OR   A   
2FEC   ED 52                  SBC   HL,DE   
2FEE   7D                     LD   A,L   
2FEF   B4                     OR   H   
2FF0   28 6F                  JR   Z,expectM_0_2287S43   
2FF2   CD 1E 09               CALL   printStr   
2FF5   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
3020   CD 1E 09               CALL   printStr   
3023   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3032   21 0B 00               LD   HL,11   
3035   CD 6C 08               CALL   prtdec   
3038   CD 1E 09               CALL   printStr   
303B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3048   E1                     POP   hl   
3049   E5                     PUSH   hl   
304A   CD 6C 08               CALL   prtdec   
304D   E1                     POP   hl   
304E   CD 1E 09               CALL   printStr   
3051   20 28 23 00            .CSTR   " (#"   
3055   CD B4 08               CALL   prthex   
3058   CD 1E 09               CALL   printStr   
305B   29 0D 0A 00            .CSTR   ")\r\n"   
305F   76                     HALT      
3060   00                     .CSTR      
3061                EXPECTM_0_2287S43:      
3061   E1                     POP   HL   
3062                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
3062   31 80 36               LD   SP,STACK   
3065   CD 25 09               CALL   init   
3068   CD 28 35               CALL   execStr   
306B   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
3090                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
3090   E1                     POP   HL   
3091   E5                     PUSH   HL   
3092   11 15 00               LD   DE,21   
3095   B7                     OR   A   
3096   ED 52                  SBC   HL,DE   
3098   7D                     LD   A,L   
3099   B4                     OR   H   
309A   28 6F                  JR   Z,expectM_0_2288S43   
309C   CD 1E 09               CALL   printStr   
309F   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
30CA   CD 1E 09               CALL   printStr   
30CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30DC   21 15 00               LD   HL,21   
30DF   CD 6C 08               CALL   prtdec   
30E2   CD 1E 09               CALL   printStr   
30E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F2   E1                     POP   hl   
30F3   E5                     PUSH   hl   
30F4   CD 6C 08               CALL   prtdec   
30F7   E1                     POP   hl   
30F8   CD 1E 09               CALL   printStr   
30FB   20 28 23 00            .CSTR   " (#"   
30FF   CD B4 08               CALL   prthex   
3102   CD 1E 09               CALL   printStr   
3105   29 0D 0A 00            .CSTR   ")\r\n"   
3109   76                     HALT      
310A   00                     .CSTR      
310B                EXPECTM_0_2288S43:      
310B   E1                     POP   HL   
310C                          ;*Macro unroll:  test "[10 20 30] 1%", 20
310C   31 80 36               LD   SP,STACK   
310F   CD 25 09               CALL   init   
3112   CD 28 35               CALL   execStr   
3115   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3123                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3123   E1                     POP   HL   
3124   E5                     PUSH   HL   
3125   11 14 00               LD   DE,20   
3128   B7                     OR   A   
3129   ED 52                  SBC   HL,DE   
312B   7D                     LD   A,L   
312C   B4                     OR   H   
312D   28 58                  JR   Z,expectM_0_2289S43   
312F   CD 1E 09               CALL   printStr   
3132   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
3146   CD 1E 09               CALL   printStr   
3149   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3158   21 14 00               LD   HL,20   
315B   CD 6C 08               CALL   prtdec   
315E   CD 1E 09               CALL   printStr   
3161   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
316E   E1                     POP   hl   
316F   E5                     PUSH   hl   
3170   CD 6C 08               CALL   prtdec   
3173   E1                     POP   hl   
3174   CD 1E 09               CALL   printStr   
3177   20 28 23 00            .CSTR   " (#"   
317B   CD B4 08               CALL   prthex   
317E   CD 1E 09               CALL   printStr   
3181   29 0D 0A 00            .CSTR   ")\r\n"   
3185   76                     HALT      
3186   00                     .CSTR      
3187                EXPECTM_0_2289S43:      
3187   E1                     POP   HL   
3188                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
3188   31 80 36               LD   SP,STACK   
318B   CD 25 09               CALL   init   
318E   CD 28 35               CALL   execStr   
3191   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
319F                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
319F   E1                     POP   HL   
31A0   E5                     PUSH   HL   
31A1   11 02 00               LD   DE,2   
31A4   B7                     OR   A   
31A5   ED 52                  SBC   HL,DE   
31A7   7D                     LD   A,L   
31A8   B4                     OR   H   
31A9   28 58                  JR   Z,expectM_0_2290S43   
31AB   CD 1E 09               CALL   printStr   
31AE   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
31C2   CD 1E 09               CALL   printStr   
31C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31D4   21 02 00               LD   HL,2   
31D7   CD 6C 08               CALL   prtdec   
31DA   CD 1E 09               CALL   printStr   
31DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31EA   E1                     POP   hl   
31EB   E5                     PUSH   hl   
31EC   CD 6C 08               CALL   prtdec   
31EF   E1                     POP   hl   
31F0   CD 1E 09               CALL   printStr   
31F3   20 28 23 00            .CSTR   " (#"   
31F7   CD B4 08               CALL   prthex   
31FA   CD 1E 09               CALL   printStr   
31FD   29 0D 0A 00            .CSTR   ")\r\n"   
3201   76                     HALT      
3202   00                     .CSTR      
3203                EXPECTM_0_2290S43:      
3203   E1                     POP   HL   
3204                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
3204   31 80 36               LD   SP,STACK   
3207   CD 25 09               CALL   init   
320A   CD 28 35               CALL   execStr   
320D   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
3221                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
3221   E1                     POP   HL   
3222   E5                     PUSH   HL   
3223   11 42 00               LD   DE,66   
3226   B7                     OR   A   
3227   ED 52                  SBC   HL,DE   
3229   7D                     LD   A,L   
322A   B4                     OR   H   
322B   28 5E                  JR   Z,expectM_0_2291S43   
322D   CD 1E 09               CALL   printStr   
3230   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
324A   CD 1E 09               CALL   printStr   
324D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
325C   21 42 00               LD   HL,66   
325F   CD 6C 08               CALL   prtdec   
3262   CD 1E 09               CALL   printStr   
3265   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3272   E1                     POP   hl   
3273   E5                     PUSH   hl   
3274   CD 6C 08               CALL   prtdec   
3277   E1                     POP   hl   
3278   CD 1E 09               CALL   printStr   
327B   20 28 23 00            .CSTR   " (#"   
327F   CD B4 08               CALL   prthex   
3282   CD 1E 09               CALL   printStr   
3285   29 0D 0A 00            .CSTR   ")\r\n"   
3289   76                     HALT      
328A   00                     .CSTR      
328B                EXPECTM_0_2291S43:      
328B   E1                     POP   HL   
328C                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
328C   31 80 36               LD   SP,STACK   
328F   CD 25 09               CALL   init   
3292   CD 28 35               CALL   execStr   
3295   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
32AB                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
32AB   E1                     POP   HL   
32AC   E5                     PUSH   HL   
32AD   11 0A 00               LD   DE,10   
32B0   B7                     OR   A   
32B1   ED 52                  SBC   HL,DE   
32B3   7D                     LD   A,L   
32B4   B4                     OR   H   
32B5   28 60                  JR   Z,expectM_0_2292S43   
32B7   CD 1E 09               CALL   printStr   
32BA   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
32D6   CD 1E 09               CALL   printStr   
32D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32E8   21 0A 00               LD   HL,10   
32EB   CD 6C 08               CALL   prtdec   
32EE   CD 1E 09               CALL   printStr   
32F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32FE   E1                     POP   hl   
32FF   E5                     PUSH   hl   
3300   CD 6C 08               CALL   prtdec   
3303   E1                     POP   hl   
3304   CD 1E 09               CALL   printStr   
3307   20 28 23 00            .CSTR   " (#"   
330B   CD B4 08               CALL   prthex   
330E   CD 1E 09               CALL   printStr   
3311   29 0D 0A 00            .CSTR   ")\r\n"   
3315   76                     HALT      
3316   00                     .CSTR      
3317                EXPECTM_0_2292S43:      
3317   E1                     POP   HL   
3318                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
3318   31 80 36               LD   SP,STACK   
331B   CD 25 09               CALL   init   
331E   CD 28 35               CALL   execStr   
3321   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3345                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
3345   E1                     POP   HL   
3346   E5                     PUSH   HL   
3347   11 0A 00               LD   DE,10   
334A   B7                     OR   A   
334B   ED 52                  SBC   HL,DE   
334D   7D                     LD   A,L   
334E   B4                     OR   H   
334F   28 6E                  JR   Z,expectM_0_2293S43   
3351   CD 1E 09               CALL   printStr   
3354   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
337E   CD 1E 09               CALL   printStr   
3381   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3390   21 0A 00               LD   HL,10   
3393   CD 6C 08               CALL   prtdec   
3396   CD 1E 09               CALL   printStr   
3399   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33A6   E1                     POP   hl   
33A7   E5                     PUSH   hl   
33A8   CD 6C 08               CALL   prtdec   
33AB   E1                     POP   hl   
33AC   CD 1E 09               CALL   printStr   
33AF   20 28 23 00            .CSTR   " (#"   
33B3   CD B4 08               CALL   prthex   
33B6   CD 1E 09               CALL   printStr   
33B9   29 0D 0A 00            .CSTR   ")\r\n"   
33BD   76                     HALT      
33BE   00                     .CSTR      
33BF                EXPECTM_0_2293S43:      
33BF   E1                     POP   HL   
33C0                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
33C0   31 80 36               LD   SP,STACK   
33C3   CD 25 09               CALL   init   
33C6   CD 28 35               CALL   execStr   
33C9   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
33EF                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
33EF   E1                     POP   HL   
33F0   E5                     PUSH   HL   
33F1   11 0A 00               LD   DE,10   
33F4   B7                     OR   A   
33F5   ED 52                  SBC   HL,DE   
33F7   7D                     LD   A,L   
33F8   B4                     OR   H   
33F9   28 70                  JR   Z,expectM_0_2294S43   
33FB   CD 1E 09               CALL   printStr   
33FE   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
342A   CD 1E 09               CALL   printStr   
342D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
343C   21 0A 00               LD   HL,10   
343F   CD 6C 08               CALL   prtdec   
3442   CD 1E 09               CALL   printStr   
3445   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3452   E1                     POP   hl   
3453   E5                     PUSH   hl   
3454   CD 6C 08               CALL   prtdec   
3457   E1                     POP   hl   
3458   CD 1E 09               CALL   printStr   
345B   20 28 23 00            .CSTR   " (#"   
345F   CD B4 08               CALL   prthex   
3462   CD 1E 09               CALL   printStr   
3465   29 0D 0A 00            .CSTR   ")\r\n"   
3469   76                     HALT      
346A   00                     .CSTR      
346B                EXPECTM_0_2294S43:      
346B   E1                     POP   HL   
346C                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
346C   31 80 36               LD   SP,STACK   
346F   CD 25 09               CALL   init   
3472   CD 28 35               CALL   execStr   
3475   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
349B                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
349B   E1                     POP   HL   
349C   E5                     PUSH   HL   
349D   11 14 00               LD   DE,20   
34A0   B7                     OR   A   
34A1   ED 52                  SBC   HL,DE   
34A3   7D                     LD   A,L   
34A4   B4                     OR   H   
34A5   28 70                  JR   Z,expectM_0_2295S43   
34A7   CD 1E 09               CALL   printStr   
34AA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
34D6   CD 1E 09               CALL   printStr   
34D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34E8   21 14 00               LD   HL,20   
34EB   CD 6C 08               CALL   prtdec   
34EE   CD 1E 09               CALL   printStr   
34F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34FE   E1                     POP   hl   
34FF   E5                     PUSH   hl   
3500   CD 6C 08               CALL   prtdec   
3503   E1                     POP   hl   
3504   CD 1E 09               CALL   printStr   
3507   20 28 23 00            .CSTR   " (#"   
350B   CD B4 08               CALL   prthex   
350E   CD 1E 09               CALL   printStr   
3511   29 0D 0A 00            .CSTR   ")\r\n"   
3515   76                     HALT      
3516   00                     .CSTR      
3517                EXPECTM_0_2295S43:      
3517   E1                     POP   HL   
3518                             ; 
3518                             ; 
3518                             ; 
3518                             ; 
3518                             ; 
3518                             ; 
3518                             ; 
3518                             ; test "10 sqrt", 3
3518                             ; test "10 sqrt %", 1
3518                             ; test "[ 1 ] closure call", 1
3518                             ; test "[ [ 2 ] ] closure call 0%", 2
3518   CD 1E 09               CALL   printStr   
351B   44 6F 6E 65 21 00      .CSTR   "Done!"   
3521   76                     HALT      
3522                          ALIGN   2   
3522                PRINTER:      
3522   E1                     POP   hl   
3523   CD 6C 08               CALL   prtdec   
3526   DD E9                  JP   (ix)   
3528                             ; executes a null teminated string (null executes exit_)
3528                             ; the string should be immedaitely following the call
3528                EXECSTR:      ; create a root stack frame
3528   C1                     POP   bc   ; bc = code*
3529   0B                     DEC   bc   ; dec to prepare for next routine
352A   11 00 00               LD   de,0   
352D   D5                     PUSH   de   ; push fake IP
352E   D5                     PUSH   de   ; push null arg_list*
352F   D5                     PUSH   de   ; push null first_arg*
3530   D5                     PUSH   de   ; push fake BP
3531   DD E9                  JP   (ix)   
3533                          ALIGN   $100   
3600                             ; .org RAMSTART
3600                          DS   DSIZE   
3680                STACK:       
3680                          ALIGN   $100   
3700                VARS:        
3700                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
37D0                RESTARTS:      
37D0                RST08:    DS   2   
37D2                RST10:    DS   2   
37D4                RST18:    DS   2   
37D6                RST20:    DS   2   
37D8                RST28:    DS   2   
37DA                RST30:    DS   2   ; 
37DC                BAUD:     DS   2   ; 
37DE                INTVEC:   DS   2   ; 
37E0                NMIVEC:   DS   2   ; 
37E2                GETCVEC:   DS   2   ; 
37E4                PUTCVEC:   DS   2   ; 
37E6                SYSVARS:      
37E6                             ; initialised sys variables
37E6                VDATAWIDTH:   DS   2   ; 
37E8                VTIBPTR:   DS   2   ; 
37EA                VNEXT:    DS   2   ; 
37EC                VHEAPPTR:   DS   2   ; 
37EE                             ; uninitialised sys variables
37EE                VBLOCKEND:   DS   2   ; 
37F0                VPOINTER:   DS   2   ; 
37F2                VHASHSTR:   DS   2   ; 
37F4                VLASTDEF:   DS   2   ; 
37F6                VREMAIN:   DS   2   ; 
37F8                VTEMP1:   DS   2   ; 
37FA                VTEMP2:   DS   2   ; 
37FC                TBPTR:    DS   2   ; reserved for tests
37FE                          ALIGN   $100   
3800                TIB:      DS   TIBSIZE   
3900                          ALIGN   $100   
3900                PAD:      DS   $100   
3A00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               086A DEFINED AT LINE 1387 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1242 IN monty.asm
                    > USED AT LINE 1654 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 759 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
                    > USED AT LINE 1505 IN monty.asm
                    > USED AT LINE 1529 IN monty.asm
                    > USED AT LINE 1532 IN monty.asm
                    > USED AT LINE 1685 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 817 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 822 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1721 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1096 IN monty.asm
                    > USED AT LINE 1551 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1609 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
REMAIN_:            0327 DEFINED AT LINE 241 IN monty.asm
GO_:                032A DEFINED AT LINE 243 IN monty.asm
IDENTU_:            032D DEFINED AT LINE 245 IN monty.asm
IDENTL_:            0330 DEFINED AT LINE 247 IN monty.asm
IF_:                0333 DEFINED AT LINE 249 IN monty.asm
INV_:               0336 DEFINED AT LINE 251 IN monty.asm
MUL_:               033C DEFINED AT LINE 254 IN monty.asm
NOT_:               033F DEFINED AT LINE 256 IN monty.asm
NUM_:               0344 DEFINED AT LINE 259 IN monty.asm
                    > USED AT LINE 1123 IN monty.asm
HEXNUM_:            0347 DEFINED AT LINE 261 IN monty.asm
OR_:                034A DEFINED AT LINE 263 IN monty.asm
XOR_:               034D DEFINED AT LINE 265 IN monty.asm
STRING_:            0350 DEFINED AT LINE 267 IN monty.asm
SUB_:               0353 DEFINED AT LINE 269 IN monty.asm
EQ_:                0356 DEFINED AT LINE 271 IN monty.asm
EQ0:                0360 DEFINED AT LINE 278 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
EQ1:                0361 DEFINED AT LINE 280 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
GT_:                0365 DEFINED AT LINE 284 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
DIV_:               0382 DEFINED AT LINE 306 IN monty.asm
NOP_:               0391 DEFINED AT LINE 317 IN monty.asm
ADD:                0393 DEFINED AT LINE 324 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               03A0 DEFINED AT LINE 334 IN monty.asm
                    > USED AT LINE 329 IN monty.asm
ADD2:               03AB DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 336 IN monty.asm
ADDR:               03B1 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03BD DEFINED AT LINE 356 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03C4 DEFINED AT LINE 364 IN monty.asm
                    > USED AT LINE 376 IN monty.asm
                    > USED AT LINE 386 IN monty.asm
OR:                 03C8 DEFINED AT LINE 368 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
XOR:                03D1 DEFINED AT LINE 377 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
XOR1:               03D2 DEFINED AT LINE 379 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
ARG:                03DA DEFINED AT LINE 391 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03F8 DEFINED AT LINE 412 IN monty.asm
                    > USED AT LINE 418 IN monty.asm
ARG0A:              0401 DEFINED AT LINE 420 IN monty.asm
                    > USED AT LINE 397 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
ARG1:               0406 DEFINED AT LINE 423 IN monty.asm
                    > USED AT LINE 416 IN monty.asm
ARG1A:              040E DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 422 IN monty.asm
ARG_LIST:           0411 DEFINED AT LINE 439 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          041B DEFINED AT LINE 446 IN monty.asm
                    > USED AT LINE 464 IN monty.asm
ARG_LIST2:          0427 DEFINED AT LINE 454 IN monty.asm
                    > USED AT LINE 451 IN monty.asm
ARG_LIST3:          042F DEFINED AT LINE 462 IN monty.asm
                    > USED AT LINE 453 IN monty.asm
                    > USED AT LINE 460 IN monty.asm
ARG_LIST4:          0432 DEFINED AT LINE 465 IN monty.asm
                    > USED AT LINE 449 IN monty.asm
ARG_LIST5:          0437 DEFINED AT LINE 470 IN monty.asm
                    > USED AT LINE 468 IN monty.asm
ARRBEGIN:           0443 DEFINED AT LINE 481 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             045F DEFINED AT LINE 495 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            0479 DEFINED AT LINE 511 IN monty.asm
                    > USED AT LINE 527 IN monty.asm
ARREND2:            0489 DEFINED AT LINE 521 IN monty.asm
                    > USED AT LINE 517 IN monty.asm
ARRINDEX:           04AD DEFINED AT LINE 548 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04B5 DEFINED AT LINE 554 IN monty.asm
ARRINDEX1:          04B6 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 553 IN monty.asm
ARRINDEX2:          04C2 DEFINED AT LINE 565 IN monty.asm
                    > USED AT LINE 562 IN monty.asm
ASSIGN:             04C5 DEFINED AT LINE 570 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
ASSIGN0:            04C7 DEFINED AT LINE 573 IN monty.asm
                    > USED AT LINE 333 IN monty.asm
                    > USED AT LINE 341 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
                    > USED AT LINE 1139 IN monty.asm
ASSIGNX:            04C8 DEFINED AT LINE 575 IN monty.asm
ASSIGN1:            04D4 DEFINED AT LINE 583 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
BLOCK:              04D6 DEFINED AT LINE 586 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04DA DEFINED AT LINE 590 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
BLOCK2:             0506 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
BLOCK3:             0509 DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
                    > USED AT LINE 613 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
BLOCK4:             0511 DEFINED AT LINE 626 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
BLOCK5:             0514 DEFINED AT LINE 629 IN monty.asm
                    > USED AT LINE 625 IN monty.asm
BLOCK6:             053C DEFINED AT LINE 648 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
BLOCKEND:           053F DEFINED AT LINE 652 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1304 IN monty.asm
BLOCKEND1:          056B DEFINED AT LINE 674 IN monty.asm
                    > USED AT LINE 667 IN monty.asm
BLOCKEND2:          0577 DEFINED AT LINE 681 IN monty.asm
                    > USED AT LINE 673 IN monty.asm
BLOCKEND3:          0589 DEFINED AT LINE 695 IN monty.asm
                    > USED AT LINE 687 IN monty.asm
CHAR:               0594 DEFINED AT LINE 706 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              0597 DEFINED AT LINE 708 IN monty.asm
                    > USED AT LINE 719 IN monty.asm
CHAR2:              05A3 DEFINED AT LINE 717 IN monty.asm
                    > USED AT LINE 714 IN monty.asm
CHAR3:              05A6 DEFINED AT LINE 720 IN monty.asm
                    > USED AT LINE 712 IN monty.asm
DOT:                05A9 DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05B5 DEFINED AT LINE 750 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
DOT2:               05BE DEFINED AT LINE 755 IN monty.asm
                    > USED AT LINE 752 IN monty.asm
DOT3:               05C8 DEFINED AT LINE 761 IN monty.asm
                    > USED AT LINE 757 IN monty.asm
DOT4:               05CC DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 749 IN monty.asm
                    > USED AT LINE 754 IN monty.asm
                    > USED AT LINE 760 IN monty.asm
DIVIDE:             05D3 DEFINED AT LINE 772 IN monty.asm
                    > USED AT LINE 311 IN monty.asm
DIVIDE1:            05D8 DEFINED AT LINE 775 IN monty.asm
                    > USED AT LINE 787 IN monty.asm
DIVIDE2:            05E5 DEFINED AT LINE 783 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
DIVIDE3:            05E6 DEFINED AT LINE 785 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
EQUALS:             05EC DEFINED AT LINE 793 IN monty.asm
                    > USED AT LINE 282 IN monty.asm
LESSTHANEQ:         05F4 DEFINED AT LINE 801 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           05F9 DEFINED AT LINE 808 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          05FE DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 804 IN monty.asm
TRUE1:              0601 DEFINED AT LINE 816 IN monty.asm
                    > USED AT LINE 796 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
NULL1:              0607 DEFINED AT LINE 820 IN monty.asm
FALSE1:             0607 DEFINED AT LINE 821 IN monty.asm
                    > USED AT LINE 797 IN monty.asm
                    > USED AT LINE 811 IN monty.asm
                    > USED AT LINE 814 IN monty.asm
                    > USED AT LINE 1163 IN monty.asm
GO:                 060D DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
                    > USED AT LINE 1267 IN monty.asm
GO1:                060E DEFINED AT LINE 832 IN monty.asm
                    > USED AT LINE 975 IN monty.asm
                    > USED AT LINE 977 IN monty.asm
                    > USED AT LINE 1279 IN monty.asm
GO2:                0614 DEFINED AT LINE 837 IN monty.asm
                    > USED AT LINE 835 IN monty.asm
GOFUNC:             061A DEFINED AT LINE 842 IN monty.asm
GOFUNC1:            062D DEFINED AT LINE 860 IN monty.asm
                    > USED AT LINE 857 IN monty.asm
GOFUNC2:            0633 DEFINED AT LINE 866 IN monty.asm
                    > USED AT LINE 870 IN monty.asm
GOFUNC3:            0638 DEFINED AT LINE 871 IN monty.asm
                    > USED AT LINE 865 IN monty.asm
GOBLOCK:            0646 DEFINED AT LINE 884 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
GOBLOCK2:           0667 DEFINED AT LINE 902 IN monty.asm
                    > USED AT LINE 859 IN monty.asm
                    > USED AT LINE 894 IN monty.asm
GOBLOCK3:           066C DEFINED AT LINE 906 IN monty.asm
                    > USED AT LINE 901 IN monty.asm
GOBLOCK4:           066D DEFINED AT LINE 908 IN monty.asm
                    > USED AT LINE 882 IN monty.asm
HEXNUM:             067A DEFINED AT LINE 916 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
HEXNUM1:            067D DEFINED AT LINE 918 IN monty.asm
                    > USED AT LINE 935 IN monty.asm
HEXNUM2:            0685 DEFINED AT LINE 924 IN monty.asm
                    > USED AT LINE 922 IN monty.asm
IDENTU:             0697 DEFINED AT LINE 936 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
IDENTL:             069C DEFINED AT LINE 940 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             06A1 DEFINED AT LINE 944 IN monty.asm
                    > USED AT LINE 939 IN monty.asm
IF:                 06AE DEFINED AT LINE 957 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IFTE:               06BA DEFINED AT LINE 967 IN monty.asm
                    > USED AT LINE 961 IN monty.asm
IFTE1:              06BB DEFINED AT LINE 969 IN monty.asm
                    > USED AT LINE 964 IN monty.asm
MUL:                06C7 DEFINED AT LINE 979 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
MUL2:               06D1 DEFINED AT LINE 988 IN monty.asm
                    > USED AT LINE 997 IN monty.asm
NUM:                06E3 DEFINED AT LINE 1002 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
NUM0:               06EC DEFINED AT LINE 1008 IN monty.asm
                    > USED AT LINE 1006 IN monty.asm
NUM1:               06ED DEFINED AT LINE 1010 IN monty.asm
                    > USED AT LINE 1027 IN monty.asm
NUM2:               0705 DEFINED AT LINE 1028 IN monty.asm
                    > USED AT LINE 926 IN monty.asm
                    > USED AT LINE 928 IN monty.asm
                    > USED AT LINE 1013 IN monty.asm
                    > USED AT LINE 1015 IN monty.asm
NUM3:               0710 DEFINED AT LINE 1036 IN monty.asm
                    > USED AT LINE 1031 IN monty.asm
REMAIN:             0713 DEFINED AT LINE 1040 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
SHIFTLEFT:          0719 DEFINED AT LINE 1047 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         0721 DEFINED AT LINE 1054 IN monty.asm
                    > USED AT LINE 1057 IN monty.asm
SHIFTLEFT2:         0722 DEFINED AT LINE 1056 IN monty.asm
                    > USED AT LINE 1053 IN monty.asm
SHIFTRIGHT:         0729 DEFINED AT LINE 1064 IN monty.asm
                    > USED AT LINE 288 IN monty.asm
SHIFTRIGHT1:        0731 DEFINED AT LINE 1071 IN monty.asm
                    > USED AT LINE 1075 IN monty.asm
SHIFTRIGHT2:        0735 DEFINED AT LINE 1074 IN monty.asm
                    > USED AT LINE 1070 IN monty.asm
STRING:             073C DEFINED AT LINE 1083 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
STRING1:            0745 DEFINED AT LINE 1090 IN monty.asm
                    > USED AT LINE 1097 IN monty.asm
                    > USED AT LINE 1099 IN monty.asm
STRING2:            0748 DEFINED AT LINE 1094 IN monty.asm
                    > USED AT LINE 1089 IN monty.asm
SUB:                0764 DEFINED AT LINE 1116 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
SUB1:               0770 DEFINED AT LINE 1124 IN monty.asm
                    > USED AT LINE 1121 IN monty.asm
SUB2:               077A DEFINED AT LINE 1131 IN monty.asm
                    > USED AT LINE 1126 IN monty.asm
SUB3:               0787 DEFINED AT LINE 1140 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
COMMAND:            078F DEFINED AT LINE 1151 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               07D8 DEFINED AT LINE 1184 IN monty.asm
                    > USED AT LINE 1157 IN monty.asm
COMMENT:            07E5 DEFINED AT LINE 1197 IN monty.asm
                    > USED AT LINE 1155 IN monty.asm
                    > USED AT LINE 1201 IN monty.asm
BYTES:              07EE DEFINED AT LINE 1205 IN monty.asm
                    > USED AT LINE 1159 IN monty.asm
BYTES1:             07F1 DEFINED AT LINE 1207 IN monty.asm
                    > USED AT LINE 1283 IN monty.asm
FUNC:               07F6 DEFINED AT LINE 1212 IN monty.asm
                    > USED AT LINE 1161 IN monty.asm
INPUT:              080D DEFINED AT LINE 1231 IN monty.asm
                    > USED AT LINE 1165 IN monty.asm
KEY:                0818 DEFINED AT LINE 1241 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
OUTPUT:             0821 DEFINED AT LINE 1250 IN monty.asm
                    > USED AT LINE 1169 IN monty.asm
REPEAT:             082A DEFINED AT LINE 1261 IN monty.asm
                    > USED AT LINE 1171 IN monty.asm
SELECT:             0832 DEFINED AT LINE 1271 IN monty.asm
                    > USED AT LINE 1173 IN monty.asm
WORDS:              083C DEFINED AT LINE 1281 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
BLOCKEXIT:          0842 DEFINED AT LINE 1285 IN monty.asm
                    > USED AT LINE 1179 IN monty.asm
BLOCKEXIT1:         0849 DEFINED AT LINE 1291 IN monty.asm
                    > USED AT LINE 1289 IN monty.asm
LOOP:               0868 DEFINED AT LINE 1314 IN monty.asm
FILTER:             086A DEFINED AT LINE 1385 IN monty.asm
MAP:                086A DEFINED AT LINE 1386 IN monty.asm
PRTDEC:             086C DEFINED AT LINE 1460 IN monty.asm
                    > USED AT LINE 763 IN monty.asm
                    > USED AT LINE 1731 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 139
PRTDEC0:            087B DEFINED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
PRTDEC1:            089D DEFINED AT LINE 1487 IN monty.asm
                    > USED AT LINE 1475 IN monty.asm
                    > USED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1479 IN monty.asm
                    > USED AT LINE 1481 IN monty.asm
                    > USED AT LINE 1484 IN monty.asm
PRTDEC2:            089F DEFINED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1492 IN monty.asm
PRTDEC3:            08AF DEFINED AT LINE 1501 IN monty.asm
                    > USED AT LINE 1496 IN monty.asm
PRTDEC4:            08B0 DEFINED AT LINE 1503 IN monty.asm
                    > USED AT LINE 1500 IN monty.asm
PRTHEX:             08B4 DEFINED AT LINE 1507 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            08BF DEFINED AT LINE 1515 IN monty.asm
                    > USED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
PRTHEX3:            08C8 DEFINED AT LINE 1523 IN monty.asm
                    > USED AT LINE 1521 IN monty.asm
PRTSTR0:            08D3 DEFINED AT LINE 1531 IN monty.asm
                    > USED AT LINE 1537 IN monty.asm
PRTSTR:             08D7 DEFINED AT LINE 1534 IN monty.asm
                    > USED AT LINE 753 IN monty.asm
                    > USED AT LINE 1601 IN monty.asm
NESTING:            08DC DEFINED AT LINE 1550 IN monty.asm
                    > USED AT LINE 1645 IN monty.asm
                    > USED AT LINE 1686 IN monty.asm
NESTING0:           08E6 DEFINED AT LINE 1556 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
                    > USED AT LINE 1554 IN monty.asm
NESTING1A:          08ED DEFINED AT LINE 1561 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
NESTING1:           08F0 DEFINED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
NESTING2:           08FF DEFINED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1568 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
NESTING3:           0901 DEFINED AT LINE 1576 IN monty.asm
                    > USED AT LINE 1572 IN monty.asm
NESTING4:           090C DEFINED AT LINE 1583 IN monty.asm
                    > USED AT LINE 1578 IN monty.asm
                    > USED AT LINE 1580 IN monty.asm
PROMPT:             090E DEFINED AT LINE 1587 IN monty.asm
                    > USED AT LINE 1629 IN monty.asm
CRLF:               0917 DEFINED AT LINE 1592 IN monty.asm
                    > USED AT LINE 1698 IN monty.asm
PRINTSTR:           091E DEFINED AT LINE 1599 IN monty.asm
                    > USED AT LINE 1588 IN monty.asm
                    > USED AT LINE 1593 IN monty.asm
                    > USED AT LINE 1625 IN monty.asm
                    > USED AT LINE 1729 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 132
INIT:               0925 DEFINED AT LINE 1606 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1624 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              093E DEFINED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1619 IN monty.asm
START:              0943 DEFINED AT LINE 1622 IN monty.asm
INTERPRET:          0959 DEFINED AT LINE 1628 IN monty.asm
                    > USED AT LINE 1723 IN monty.asm
                    > USED AT LINE 1732 IN monty.asm
INTERPRET2:         0963 DEFINED AT LINE 1634 IN monty.asm
                    > USED AT LINE 1678 IN monty.asm
INTERPRET3:         096B DEFINED AT LINE 1641 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
INTERPRET4:         0971 DEFINED AT LINE 1647 IN monty.asm
                    > USED AT LINE 1639 IN monty.asm
INTERPRET5:         0976 DEFINED AT LINE 1653 IN monty.asm
                    > USED AT LINE 1687 IN monty.asm
                    > USED AT LINE 1701 IN monty.asm
INTERPRET6:         0987 DEFINED AT LINE 1680 IN monty.asm
                    > USED AT LINE 1656 IN monty.asm
INTERPRET7:         0995 DEFINED AT LINE 1689 IN monty.asm
                    > USED AT LINE 1661 IN monty.asm
INTERPRET8:         09A8 DEFINED AT LINE 1703 IN monty.asm
                    > USED AT LINE 1659 IN monty.asm
NEXT:               09B0 DEFINED AT LINE 1709 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1713 IN monty.asm
NEXT1:              09BF DEFINED AT LINE 1720 IN monty.asm
                    > USED AT LINE 1714 IN monty.asm
EXIT_:              09C6 DEFINED AT LINE 1724 IN monty.asm
                    > USED AT LINE 1722 IN monty.asm
ERROR:              09C9 DEFINED AT LINE 1728 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
TESTSSTART:         0A00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2201S43:  0AAD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  0B13 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  0B79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  0BDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  0C41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  0CA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  0D09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  0D6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  0DD7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  0E3D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  0EA3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  0F0B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  0F75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  0FDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  1045 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  10B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  1121 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  118D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  11FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2224S43:  1269 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2225S43:  12DD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2226S43:  134F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2227S43:  13C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2228S43:  1441 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2229S43:  14B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2230S43:  151D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2231S43:  1589 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2232S43:  15FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2233S43:  167B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2234S43:  16E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2235S43:  1753 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2236S43:  17BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2237S43:  1833 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2238S43:  189F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2239S43:  190F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2240S43:  197D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2241S43:  19EB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2242S43:  1A57 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2243S43:  1AC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2244S43:  1B2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2245S43:  1B9B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2246S43:  1C07 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2247S43:  1C73 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2248S43:  1CDF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2249S43:  1D4B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2250S43:  1DB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2251S43:  1E27 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2252S43:  1E95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2253S43:  1F05 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2254S43:  1F75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2255S43:  1FDF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2256S43:  2049 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2257S43:  20B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2258S43:  212F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2259S43:  21A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2260S43:  2223 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2261S43:  22AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2262S43:  2333 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2263S43:  23A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2264S43:  2411 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  2483 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2266S43:  24F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2267S43:  2569 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2268S43:  25DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2269S43:  2657 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2270S43:  26D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2271S43:  2757 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2272S43:  27D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2273S43:  285D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2274S43:  28E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2275S43:  2977 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2276S43:  2A0B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2277S43:  2A91 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2278S43:  2B1D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2279S43:  2BAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2280S43:  2C3B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2281S43:  2CC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2282S43:  2D65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2283S43:  2DEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2284S43:  2E85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2285S43:  2F1D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2286S43:  2FB7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2287S43:  3061 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2288S43:  310B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2289S43:  3187 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2290S43:  3203 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2291S43:  328B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2292S43:  3317 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2293S43:  33BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2294S43:  346B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2295S43:  3517 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3522 DEFINED AT LINE 137
EXECSTR:            3528 DEFINED AT LINE 144
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3680 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 887 IN monty.asm
                    > USED AT LINE 1608 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3700 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1613 IN monty.asm
RESTARTS:           37D0 DEFINED AT LINE 11 IN ram.asm
RST08:              37D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              37D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              37D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              37D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              37D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              37DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               37DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             37DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             37E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            37E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            37E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            37E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1610 IN monty.asm
VDATAWIDTH:         37E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 515 IN monty.asm
                    > USED AT LINE 551 IN monty.asm
                    > USED AT LINE 578 IN monty.asm
                    > USED AT LINE 1208 IN monty.asm
VTIBPTR:            37E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1632 IN monty.asm
                    > USED AT LINE 1704 IN monty.asm
VNEXT:              37EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1607 IN monty.asm
VHEAPPTR:           37EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 441 IN monty.asm
                    > USED AT LINE 472 IN monty.asm
                    > USED AT LINE 505 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
                    > USED AT LINE 538 IN monty.asm
                    > USED AT LINE 643 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
                    > USED AT LINE 1084 IN monty.asm
                    > USED AT LINE 1103 IN monty.asm
                    > USED AT LINE 1214 IN monty.asm
                    > USED AT LINE 1224 IN monty.asm
                    > USED AT LINE 1226 IN monty.asm
VBLOCKEND:          37EE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           37F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 351 IN monty.asm
                    > USED AT LINE 353 IN monty.asm
                    > USED AT LINE 354 IN monty.asm
                    > USED AT LINE 426 IN monty.asm
                    > USED AT LINE 558 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
                    > USED AT LINE 948 IN monty.asm
VHASHSTR:           37F2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           37F4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            37F6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 312 IN monty.asm
                    > USED AT LINE 1041 IN monty.asm
VTEMP1:             37F8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 498 IN monty.asm
                    > USED AT LINE 539 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 647 IN monty.asm
VTEMP2:             37FA DEFINED AT LINE 42 IN ram.asm
TBPTR:              37FC DEFINED AT LINE 43 IN ram.asm
TIB:                3800 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1638 IN monty.asm
                    > USED AT LINE 1681 IN monty.asm
                    > USED AT LINE 1690 IN monty.asm
                    > USED AT LINE 1705 IN monty.asm
PAD:                3900 DEFINED AT LINE 49 IN ram.asm
HEAP:               3A00 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 631 IN monty.asm
