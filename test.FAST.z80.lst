0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 56               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 56               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 56               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 56               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 56               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 56               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 56               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 56               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 56               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 56               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 54               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 56               LD   (RST08),HL   
0094   22 D2 56               LD   (RST10),HL   
0097   22 D4 56               LD   (RST18),HL   
009A   22 D6 56               LD   (RST20),HL   
009D   22 D8 56               LD   (RST28),HL   
00A0   22 DA 56               LD   (RST30),HL   
00A3   22 DE 56               LD   (INTVEC),HL   
00A6   22 E0 56               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 56               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 56               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   1E                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5B                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7B                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   73                     DB   lsb(rparen_)   ; )     1
0189   AD                     DB   lsb(star_)   ; *     1
018A   D1                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   85                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   ED                     DB   lsb(colon_)   ; :     2
019A   F5                     DB   lsb(semicolon_)   ; ;     2
019B   49                     DB   lsb(lt_)   ; <     1
019C   2F                     DB   lsb(eq_)   ; =     1
019D   3E                     DB   lsb(gt_)   ; >     1
019E   1B                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   F0                     DB   lsb(upcase_)   ; A     1
01A1   F0                     DB   lsb(upcase_)   ; B
01A2   F0                     DB   lsb(upcase_)   ; C
01A3   F0                     DB   lsb(upcase_)   ; D
01A4   F0                     DB   lsb(upcase_)   ; E
01A5   F0                     DB   lsb(upcase_)   ; F
01A6   F0                     DB   lsb(upcase_)   ; G
01A7   F0                     DB   lsb(upcase_)   ; h
01A8   F0                     DB   lsb(upcase_)   ; I
01A9   F0                     DB   lsb(upcase_)   ; J
01AA   F0                     DB   lsb(upcase_)   ; K
01AB   F0                     DB   lsb(upcase_)   ; L
01AC   F0                     DB   lsb(upcase_)   ; M
01AD   F0                     DB   lsb(upcase_)   ; N
01AE   F0                     DB   lsb(upcase_)   ; O
01AF   F0                     DB   lsb(upcase_)   ; p
01B0   F0                     DB   lsb(upcase_)   ; Q
01B1   F0                     DB   lsb(upcase_)   ; R
01B2   F0                     DB   lsb(upcase_)   ; S
01B3   F0                     DB   lsb(upcase_)   ; T
01B4   F0                     DB   lsb(upcase_)   ; U
01B5   F0                     DB   lsb(upcase_)   ; V
01B6   F0                     DB   lsb(upcase_)   ; W
01B7   F0                     DB   lsb(upcase_)   ; X
01B8   F0                     DB   lsb(upcase_)   ; Y
01B9   F0                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 54                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 55                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   E0 0F                  DW   next   ; nNext
01E4   22 57                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E6   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E8   0A 00                  DW   10   ; vNumBase = 10
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 DB 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 1F 0B               JP   percent   
020C                QUOTE_:      
020C   C3 05 0B               JP   quote   
020F                LPAREN_:      
020F   C3 CB 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 54 0B               JP   num   
021B                QUESTION_:      
021B   C3 F8 0A               JP   question   
021E                BANG_:       
021E                BANG:        ; logical invert, any non zero value
021E   03                     INC   bc   
021F   0A                     LD   a,(bc)   
0220   FE 3D                  CP   "="   
0222   20 05                  JR   nz,not   
0224   E1                     POP   hl   
0225   D1                     POP   de   
0226   C3 96 0C               JP   notequals   
0229                NOT:         
0229   0B                     DEC   bc   
022A   21 00 00               LD   hl,0   ; is considered true
022D   18 0B                  JR   eq1   
022F                EQ_:         
022F                EQ:          
022F   03                     INC   bc   
0230   0A                     LD   a,(bc)   
0231   FE 3D                  CP   "="   
0233   28 04                  JR   z,eq0   
0235   0B                     DEC   bc   
0236   C3 7E 0C               JP   assign   
0239                EQ0:         
0239   E1                     POP   hl   
023A                EQ1:         
023A   D1                     POP   de   
023B   C3 8F 0C               JP   equals   
023E                GT_:         
023E                GT:          
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3E                  CP   ">"   
0242   CA F6 0C               JP   z,shiftRight   
0245   D1                     POP   de   
0246   E1                     POP   hl   
0247   18 09                  JR   lt1   
0249                LT_:         
0249                LT:          
0249   03                     INC   bc   
024A   0A                     LD   a,(bc)   
024B   FE 3C                  CP   "<"   
024D   CA DA 0C               JP   z,shiftLeft   
0250   E1                     POP   hl   
0251   D1                     POP   de   
0252                LT1:         
0252   FE 3D                  CP   "="   
0254   CA 9D 0C               JP   z,lessthaneq   
0257   0B                     DEC   bc   
0258   C3 A2 0C               JP   lessthan   
025B                             ; index of an array, based on vDataWidth 22
025B                             ; array* num -- value    ; also sets vPointer to address
025B                HASH_:       
025B                HASH:        
025B                ARRAYINDEX:      
025B   E1                     POP   hl   ; hl = index
025C   D1                     POP   de   ; de = array
025D   3A EE 56               LD   a,(vDataWidth)   ; a = data width
0260   3D                     DEC   a   
0261   28 01                  JR   z,arrayIndex1   
0263                ARRAYINDEX0:      
0263   29                     ADD   hl,hl   ; if data width = 2 then double
0264                ARRAYINDEX1:      
0264   19                     ADD   hl,de   ; add addr
0265   22 F8 56               LD   (vPointer),hl   ; store address in setter
0268   16 00                  LD   d,0   
026A   5E                     LD   e,(hl)   
026B   B7                     OR   a   ; check data width again
026C   28 02                  JR   z,arrayIndex2   
026E   23                     INC   hl   
026F   56                     LD   d,(hl)   
0270                ARRAYINDEX2:      
0270   D5                     PUSH   de   
0271   DD E9                  JP   (ix)   
0273                             ;                               4
0273                RPAREN_:      
0273                             ; jp rparen
0273                RPAREN:      
0273   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0276   FD 46 09               LD   b,(iy+9)   
0279   DD E9                  JP   (ix)   
027B                             ; & and                          14
027B                             ; a b -- c
027B                AMPER_:      
027B                AMPER:       
027B                AND:         
027B   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027C   E1                     POP   hl   
027D   7B                     LD   a,e   
027E   A5                     AND   l   
027F   6F                     LD   l,a   
0280   7A                     LD   a,d   
0281   A4                     AND   h   
0282   67                     LD   h,a   
0283   18 5B                  JR   add3   
0285                             ; - sub
0285                             ; a b -- c
0285                             ; -- sub
0285                             ; b1 -- b2
0285                             ; -= sub
0285                             ; a b1 -- b2
0285                MINUS_:      
0285                MINUS:       
0285   03                     INC   bc   ; check if sign of a number
0286   0A                     LD   a,(bc)   
0287   0B                     DEC   bc   
0288   FE 30                  CP   "0"   
028A   38 05                  JR   c,sub   
028C   FE 3A                  CP   "9"+1   
028E   DA 54 0B               JP   c,num   
0291                SUB:         ; Subtract the value 2nd on stack from top of stack
0291   E1                     POP   hl   ; hl = arg_b
0292   03                     INC   bc   
0293   FE 2D                  CP   "-"   
0295   20 04                  JR   nz,sub1   
0297   2B                     DEC   hl   ; --
0298   C3 80 0C               JP   assign0   
029B                SUB1:        
029B   D1                     POP   de   ; de = arg_a
029C   FE 3D                  CP   "="   
029E   28 02                  JR   z,sub2   
02A0   0B                     DEC   bc   ; -
02A1   EB                     EX   de,hl   
02A2                SUB2:        
02A2   B7                     OR   a   ; -=
02A3   ED 52                  SBC   hl,de   
02A5                SUB3:        
02A5   FE 3D                  CP   "="   
02A7   CA 80 0C               JP   z,assign0   
02AA   E5                     PUSH   hl   
02AB   DD E9                  JP   (ix)   
02AD                STAR_:       ; 21
02AD                STAR:        
02AD   03                     INC   bc   ; check for ** spread
02AE   0A                     LD   a,(bc)   
02AF   FE 2A                  CP   "*"   
02B1   CA B6 0C               JP   z,spread   
02B4   0B                     DEC   bc   
02B5                MUL:         
02B5   D1                     POP   de   ; get first value
02B6   E1                     POP   hl   
02B7                MUL2:        
02B7   C5                     PUSH   bc   ; Preserve the IP
02B8   44 4D                  LD   bc,hl   ; bc = 2nd value
02BA   21 00 00               LD   hl,0   
02BD   3E 10                  LD   a,16   
02BF                MUL3:        
02BF   29                     ADD   hl,hl   
02C0   CB 13                  RL   e   
02C2   CB 12                  RL   d   
02C4   30 04                  JR   nc,$+6   
02C6   09                     ADD   hl,bc   
02C7   30 01                  JR   nc,$+3   
02C9   13                     INC   de   
02CA   3D                     DEC   a   
02CB   20 F2                  JR   nz,mul3   
02CD   C1                     POP   bc   ; Restore the IP
02CE   C3 E0 02               JP   add3   
02D1                             ; + add                         25
02D1                             ; a b -- c
02D1                PLUS_:       
02D1                PLUS:        
02D1                ADD:         
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 2B                  CP   "+"   ; ++ increment variable
02D5   20 05                  JR   nz,add1   
02D7   E1                     POP   hl   
02D8   23                     INC   hl   
02D9   C3 80 0C               JP   assign0   
02DC                ADD1:        
02DC   0B                     DEC   bc   
02DD   D1                     POP   de   ; second term
02DE   E1                     POP   hl   ; first term
02DF   19                     ADD   hl,de   
02E0                ADD3:        
02E0   03                     INC   bc   
02E1   0A                     LD   a,(bc)   
02E2   FE 3D                  CP   "="   
02E4   28 04                  JR   z,add4   
02E6   0B                     DEC   bc   
02E7   E5                     PUSH   hl   
02E8   DD E9                  JP   (ix)   
02EA                ADD4:        
02EA   C3 80 0C               JP   assign0   
02ED                COLON_:      
02ED   C3 A7 0A               JP   colon   
02F0                             ;                               18
02F0                UPCASE_:      
02F0                UPCASE:      
02F0   0A                     LD   a,(bc)   ; a = identifier char
02F1   D6 41                  SUB   "A"   ; "A" = 0
02F3   18 10                  JR   ident1   
02F5                             ; ;
02F5                SEMICOLON_:      
02F5   C3 BD 0A               JP   semicolon   
02F8                             ;********************** PAGE 2 END *********************************************
02F8                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 56                  LD   h,msb(vars)   
0309   22 F8 56               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 48 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 04 10               JP   error   
0343                LAMBDA2:      
0343   CD 7E 0D               CALL   parseBlock   
0346   CD E8 0D               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EC 56               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 56               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EC 56            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EC 56               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA F1 0B               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 24 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA F1 0B               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 56            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 56            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 2E 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 7E 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 E0 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 84 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 D1 0A               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 56            LD   de,(vPointer)   
03ED   21 F8 56               LD   hl,vPointer   
03F0   C3 3D 07               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD A0 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   5F 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B E8 56            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 E8 56            LD   (vBufPtr),de   ; save buffer*'
041E   C3 2E 0D               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B E8 56            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 E8 56            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 2E 0D               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A F0 56               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B E8 56            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A EE 56               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 E8 56            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 2E 0D               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B E8 56            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B E8 56            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A EE 56               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 E8 56            LD   (vBufPtr),de   
04CC   C3 2E 0D               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 58 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 8A 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EB 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   F9 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   E5 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   1A 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   23 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   7F 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   55 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   51 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   37 06                  DW   break   
0541   00                     DB   NUL   
0542   7F 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   73 06                  DW   decBase   
0547   00                     DB   NUL   
0548   73 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   8A 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   DB 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   26 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   2D 09                  DW   filter   
0556   31                     DB   "1"   
0557   46 10                  DW   f1   
0559   32                     DB   "2"   
055A   52 10                  DW   f2   
055C   33                     DB   "3"   
055D   5E 10                  DW   f3   
055F   34                     DB   "4"   
0560   6A 10                  DW   f4   
0562   00                     DB   NUL   
0563   B0 0C                  DW   false1   
0565                COMMAND_H_:      
0565   78                     DB   "x"   ; /hx hex
0566   7A 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   7F 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   85 06                  DW   input   
056E   00                     DB   NUL   
056F   7F 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   90 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   EC 08                  DW   map   
0577   00                     DB   NUL   
0578   7F 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   99 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   7F 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   A2 06                  DW   quit   
0583   00                     DB   NUL   
0584   7F 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   AC 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   B2 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   53 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   7F 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   B8 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   0A 07                  DW   stringCompare   
0598   65                     DB   "e"   
0599   C0 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   65 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   EF 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   FE 06                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   7F 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   AA 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   22 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   2B 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   34 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   6D 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   61 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   67 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   7F 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   43 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   7F 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   48 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   E1                     POP   hl   ; hl = arg_b
05D1   D1                     POP   de   ; de = arg_a
05D2   03                     INC   bc   
05D3   0A                     LD   a,(bc)   
05D4   FE 3D                  CP   "="   
05D6   28 02                  JR   z,div2   
05D8   0B                     DEC   bc   ; /
05D9   EB                     EX   de,hl   
05DA                DIV2:        
05DA   F5                     PUSH   af   ; preserve af, bc
05DB   C5                     PUSH   bc   
05DC   44 4D                  LD   bc,hl   
05DE   CD 15 0D               CALL   divide   
05E1   EB                     EX   de,hl   
05E2   ED 53 FA 56            LD   (vRemain),de   
05E6   C1                     POP   bc   ; restore
05E7   F1                     POP   af   
05E8   C3 A5 02               JP   sub3   
05EB                             ; /ab absolute
05EB                             ; num -- num
05EB                ABSOLUTE:      
05EB   E1                     POP   hl   
05EC   CB 7C                  BIT   7,h   
05EE   28 06                  JR   z,absolute1   
05F0   AF                     XOR   a   
05F1   95                     SUB   l   
05F2   6F                     LD   l,a   
05F3   9F                     SBC   a,a   
05F4   94                     SUB   h   
05F5   67                     LD   h,a   
05F6                ABSOLUTE1:      
05F6   E5                     PUSH   hl   
05F7   DD E9                  JP   (ix)   
05F9                             ; /ad addrOf                    24
05F9                             ; char -- addr
05F9                ADDROF:      
05F9   E1                     POP   hl   ; a = char
05FA   7D                     LD   a,l   
05FB   FE 7B                  CP   "z"+1   ; if a > z then exit
05FD   30 19                  JR   nc,addrOf2   
05FF   D6 41                  SUB   "A"   ; a - 65
0601   38 15                  JR   c,addrOf2   ; if < A then exit
0603   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0605   38 06                  JR   c,addrOf1   
0607   D6 06                  SUB   "a"-("Z"+1)   
0609   FE 1A                  CP   "Z"-"A"+1   
060B   38 0B                  JR   c,addrOf2   ; if < a then exit
060D                ADDROF1:      
060D   87                     ADD   a,a   ; double a
060E   21 00 56               LD   hl,VARS   ; hl = VARS + a
0611   85                     ADD   a,l   
0612   6F                     LD   l,a   
0613   3E 00                  LD   a,0   
0615   8C                     ADC   a,h   
0616   67                     LD   h,a   
0617   E5                     PUSH   hl   
0618                ADDROF2:      
0618   DD E9                  JP   (ix)   
061A                             ; /al length of an array, num elements
061A                             ; array* -- num
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /as size in bytes of an array, based on current data width
0623                             ; array* -- num
0623                ARRAYSIZE:      
0623                          ;*Macro unroll:  PERFORM arrayLength
0623   DD 21 2A 06            LD   ix,performM_1544S1066   
0627   C3 1A 06               JP   arrayLength   
062A                PERFORMM_1544S1066:      
062A   E1                     POP   hl   
062B   3A EE 56               LD   a,(vDataWidth)   
062E   3D                     DEC   a   
062F   28 EF                  JR   z,arrayLength1   
0631   CB 3C                  SRL   h   
0633   CB 1D                  RR   l   
0635   18 E9                  JR   arrayLength1   
0637                             ; 13
0637                             ; /br break from loop
0637                             ; --
0637                BREAK:       
0637   E1                     POP   hl   ; hl = condition, break if false
0638   7D                     LD   a,l   
0639   B4                     OR   h   
063A   28 02                  JR   z,break1   
063C   DD E9                  JP   (ix)   
063E                BREAK1:      
063E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0640   FD 54                  LD   d,iyh   
0642   21 08 00               LD   hl,8   
0645   19                     ADD   hl,de   
0646   23                     INC   hl   
0647   23                     INC   hl   
0648   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
064B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
064E   C3 84 0B               JP   blockEnd   
0651                             ; /b
0651                BYTEMODE:      
0651   3E 01                  LD   a,1   
0653                BYTEMODE1:      
0653   32 EE 56               LD   (vDataWidth),a   
0656   DD E9                  JP   (ix)   
0658                             ; //
0658                COMMENT:      
0658   03                     INC   bc   ; point to next char
0659   0A                     LD   a,(bc)   
065A   FE 20                  CP   " "   ; terminate on any char less than SP
065C   30 FA                  JR   nc,comment   
065E   0B                     DEC   bc   
065F   DD E9                  JP   (ix)   
0661                CONSTHEAPSTART:      
0661   11 22 57               LD   de,HEAP   
0664   C3 40 07               JP   constant   
0667                CONSTTIBSTART:      
0667   11 00 54               LD   de,TIB   
066A   C3 40 07               JP   constant   
066D                CONSTBUFSTART:      
066D   11 00 55               LD   de,BUFFER   
0670   C3 40 07               JP   constant   
0673                DECBASE:      
0673   3E 0A                  LD   a,10   
0675                DECBASE1:      
0675   32 F0 56               LD   (vNumBase),a   
0678   DD E9                  JP   (ix)   
067A                HEXBASE:      
067A   3E 10                  LD   a,16   
067C   C3 75 06               JP   decBase1   
067F                ERROR1:      
067F   21 01 00               LD   hl,1   ; error 1: unknown command
0682   C3 04 10               JP   error   
0685                             ; Z80 port input
0685                             ; port -- value
0685                INPUT:       
0685   E1                     POP   hl   
0686   59                     LD   e,c   ; save IP
0687   4D                     LD   c,l   
0688   ED 68                  IN   l,(c)   
068A   26 00                  LD   h,0   
068C   4B                     LD   c,e   ; restore IP
068D   E5                     PUSH   hl   
068E   DD E9                  JP   (ix)   
0690                             ; /k                              6
0690                KEY:         
0690   CD 81 00               CALL   getchar   
0693   26 00                  LD   h,0   
0695   6F                     LD   l,a   
0696   E5                     PUSH   hl   
0697   DD E9                  JP   (ix)   
0699                             ; /o Z80 port output
0699                             ; value port --
0699                OUTPUT:      
0699   E1                     POP   hl   
069A   59                     LD   e,c   ; save IP
069B   4D                     LD   c,l   
069C   E1                     POP   hl   
069D   ED 69                  OUT   (c),l   
069F   4B                     LD   c,e   ; restore IP
06A0   DD E9                  JP   (ix)   
06A2                             ; /qt
06A2                             ; bool --
06A2                QUIT:        
06A2   E1                     POP   hl   ; hl = condition, exit if true
06A3   7D                     LD   a,l   
06A4   B4                     OR   h   
06A5   20 02                  JR   nz,quit1   
06A7   DD E9                  JP   (ix)   
06A9                QUIT1:       
06A9   C3 84 0B               JP   blockEnd   
06AC                RECUR:       
06AC   E1                     POP   hl   
06AD   22 F2 56               LD   (vRecur),hl   
06B0   DD E9                  JP   (ix)   
06B2                REMAIN:      
06B2   2A FA 56               LD   hl,(vRemain)   
06B5   E5                     PUSH   hl   
06B6   DD E9                  JP   (ix)   
06B8                STRINGBEGIN:      
06B8   21 FF FF               LD   hl,TRUE   ; string mode = true
06BB   22 F6 56               LD   (vStrMode),hl   
06BE   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06C0                STRINGEND:      
06C0   21 00 00               LD   hl,FALSE   ; string mode = false
06C3   22 F6 56               LD   (vStrMode),hl   
06C6   2A E8 56               LD   hl,(vBufPtr)   ; append NUL to string
06C9   AF                     XOR   a   
06CA   77                     LD   (hl),a   
06CB   23                     INC   hl   ; hl = string_end*
06CC   ED 43 04 57            LD   (vTemp1),bc   ; save IP
06D0   11 00 55               LD   de,BUFFER   ; de = string*
06D3   B7                     OR   a   ; bc = size
06D4   ED 52                  SBC   hl,de   
06D6   44 4D                  LD   bc,hl   
06D8   2A EC 56               LD   hl,(vHeapPtr)   ; hl = hstring*
06DB   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06DC   D5                     PUSH   de   ; return hstring*
06DD   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06DF   ED 53 EC 56            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06E3   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
06E7                STRINGEND1:      
06E7   21 00 55               LD   hl,BUFFER   ; reset vBufPtr
06EA   22 E8 56               LD   (vBufPtr),hl   
06ED   DD E9                  JP   (ix)   
06EF                STRINGLENGTH:      
06EF   D1                     POP   de   
06F0   21 00 00               LD   hl,0   
06F3   18 02                  JR   stringLength2   
06F5                STRINGLENGTH1:      
06F5   13                     INC   de   
06F6   23                     INC   hl   
06F7                STRINGLENGTH2:      
06F7   1A                     LD   a,(de)   
06F8   B7                     OR   a   
06F9   20 FA                  JR   nz,stringLength1   
06FB                STRINGLENGTH3:      
06FB   E5                     PUSH   hl   
06FC   DD E9                  JP   (ix)   
06FE                STRINGSIZE:      
06FE                          ;*Macro unroll:  PERFORM stringLength
06FE   DD 21 05 07            LD   ix,performM_1692S1234   
0702   C3 EF 06               JP   stringLength   
0705                PERFORMM_1692S1234:      
0705   E1                     POP   hl   
0706   23                     INC   hl   
0707   C3 FB 06               JP   stringLength3   
070A                             ; /sc string compare
070A                             ; string1* string2* -- bool
070A                             ; Compares two null terminated strings.
070A                STRINGCOMPARE:      
070A   D1                     POP   de   
070B   E1                     POP   hl   
070C                STRINGCOMPARE1:      
070C   1A                     LD   a,(de)   
070D   BE                     CP   (hl)   
070E   20 07                  JR   nz,stringCompare2   
0710   B7                     OR   a   
0711   28 09                  JR   z,stringCompare3   
0713   13                     INC   de   
0714   23                     INC   hl   
0715   18 F5                  JR   stringCompare1   
0717                STRINGCOMPARE2:      
0717   21 00 00               LD   hl,FALSE   
071A   18 03                  JR   stringCompare4   
071C                STRINGCOMPARE3:      
071C   21 FF FF               LD   hl,TRUE   
071F                STRINGCOMPARE4:      
071F   E5                     PUSH   hl   
0720   DD E9                  JP   (ix)   
0722                VARBUFPTR:      
0722   ED 5B E8 56            LD   de,(vBufPtr)   
0726   21 E8 56               LD   hl,vBufPtr   
0729   18 12                  JR   variable   
072B                VARHEAPPTR:      
072B   ED 5B EC 56            LD   de,(vHeapPtr)   
072F   21 EC 56               LD   hl,vHeapPtr   
0732   18 09                  JR   variable   
0734                VARTIBPTR:      
0734   ED 5B E6 56            LD   de,(vTIBPtr)   
0738   21 E6 56               LD   hl,vTIBPtr   
073B   18 00                  JR   variable   
073D                VARIABLE:      
073D   22 F8 56               LD   (vPointer),hl   
0740                CONSTANT:      
0740   D5                     PUSH   de   
0741   DD E9                  JP   (ix)   
0743                             ; /wm
0743                WORDMODE:      
0743   3E 02                  LD   a,2   
0745   C3 53 06               JP   byteMode1   
0748                             ; /x
0748                XOR:         
0748   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0749                XOR1:        
0749   E1                     POP   hl   
074A   7B                     LD   a,e   
074B   AD                     XOR   l   
074C   6F                     LD   l,a   
074D   7A                     LD   a,d   
074E   AC                     XOR   h   
074F   67                     LD   h,a   
0750   C3 E0 02               JP   add3   
0753                             ;*******************************************************************
0753                             ; Monty implementations
0753                             ;*******************************************************************
0753                             ; /rg rangeSrc
0753                             ; begin end step -- src
0753                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0753                RANGESRC:      ; range source: begin, end, step, local: L
0753   CD 9F 03               CALL   go   
0756   00 00                  DW   NUL   
0758   62 07                  DW   rangeSrcM_1757S1308   
075A   5C 07                  DW   $+2   
075C   01                     DB   1   
075D   04 62 65 73 4C         .PSTR   "besL"   
0762                RANGESRCM_1757S1308:      
0762   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0763   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0787   5C 6B 74 7B            DB   "\\kt{"   
078B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0793   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0799   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07A1   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07A9   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07B3   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07BB   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07C0   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07D4   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
07DB   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07E2   7D                     DB   "}"   
07E3   7D                     DB   "}"   
07E4   00                     DB   0   
07E5                             ; /ai arrayIter
07E5                             ; array* -- src
07E5                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07E5                ARRAYITER:      
07E5   CD 9F 03               CALL   go   
07E8   00 00                  DW   NUL   
07EA   F2 07                  DW   arrayIterM_1776S1328   
07EC   EE 07                  DW   $+2   
07EE   01                     DB   1   
07EF   02 61 4C               .PSTR   "aL"   
07F2                ARRAYITERM_1776S1328:      
07F2   7B                     DB   "{"   
07F3   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0803   5C 6B 74 7B            DB   "\\kt{"   
0807   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
080F   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0815   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
081D   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0825   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
082C   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0834   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
083D   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0854   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
085B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0862   7D                     DB   "}"   
0863   7D                     DB   "}"   
0864   00                     DB   0   
0865                             ; /si stringIter
0865                             ; string* -- src
0865                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0865                STRINGITER:      
0865   CD 9F 03               CALL   go   
0868   00 00                  DW   NUL   
086A   72 08                  DW   stringIterM_1795S1348   
086C   6E 08                  DW   $+2   
086E   01                     DB   1   
086F   02 73 4C               .PSTR   "sL"   
0872                STRINGITERM_1795S1348:      
0872   7B                     DB   "{"   
0873   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
087D   5C 6B 74 7B            DB   "\\kt{"   
0881   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0889   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0890   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0898   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08A0   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08A7   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
08B8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08C0   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08C7   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08DB   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
08E2   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E9   7D                     DB   "}"   
08EA   7D                     DB   "}"   
08EB   00                     DB   0   
08EC                             ; /mp map
08EC                             ; src func -- src1
08EC                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08EC                MAP:         ; map: source, function
08EC   CD 9F 03               CALL   go   
08EF   00 00                  DW   NUL   
08F1   F9 08                  DW   mapM_1815S1370   
08F3   F5 08                  DW   $+2   
08F5   00                     DB   0   
08F6   02 73 66               .PSTR   "sf"   
08F9                MAPM_1815S1370:      
08F9   7B                     DB   "{"   
08FA   5C 6B 74 7B            DB   "\\kt{"   
08FE   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0906   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
090A   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
090F   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
091B   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0923   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
092A   7D                     DB   "}"   
092B   7D                     DB   "}"   
092C   00                     DB   0   
092D                             ; /ft filter
092D                             ; src pred -- src1
092D                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
092D                FILTER:      ; filter: source, predicate, local: T
092D   CD 9F 03               CALL   go   
0930   00 00                  DW   NUL   
0932   3B 09                  DW   filterM_1829S1385   
0934   36 09                  DW   $+2   
0936   01                     DB   1   
0937   03 73 70 54            .PSTR   "spT"   
093B                FILTERM_1829S1385:      
093B   7B                     DB   "{"   
093C   5B 30 5D 25 54 3D      DB   "[0]%T="   
0942   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0946   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
094A   5B                     DB   "["   
094B   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0958   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0960   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0964   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0969   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
097F   3F                     DB   "?"   
0980   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0987   7D                     DB   "}"   
0988   7D                     DB   "}"   
0989   00                     DB   0   
098A                             ; /fd fold
098A                             ; reducer is a function like: \\da00bbLi4u
098A                             ; src init reducer -- src1
098A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
098A                FOLD:        ; src, init, reducer
098A   CD 9F 03               CALL   go   
098D   00 00                  DW   NUL   
098F   99 09                  DW   foldM_1848S1405   
0991   93 09                  DW   $+2   
0993   01                     DB   1   
0994   04 73 69 72 41         .PSTR   "sirA"   
0999                FOLDM_1848S1405:      
0999   7B                     DB   "{"   ; reducer: \\da00bbLi4u
099A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09A1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09A5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09A9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09AE   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09C9   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09D1   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09D8   7D                     DB   "}"   
09D9   7D                     DB   "}"   
09DA   00                     DB   0   
09DB                             ; /fe forEach
09DB                             ; src proc --
09DB                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09DB                FOREACH:      ; forEach: source, procedure, local: T
09DB   CD 9F 03               CALL   go   
09DE   00 00                  DW   NUL   
09E0   E9 09                  DW   forEachM_1862S1420   
09E2   E4 09                  DW   $+2   
09E4   01                     DB   1   
09E5   03 73 70 54            .PSTR   "spT"   
09E9                FOREACHM_1862S1420:      
09E9   7B                     DB   "{"   
09EA   5B 30 5D 25 54 3D      DB   "[0]%T="   
09F0   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09F4   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09FC   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A01   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A13   3F                     DB   "?"   ; ifte:
0A14   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A1D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A24   7D                     DB   "}"   
0A25   00                     DB   0   
0A26                             ; ; /fs funcSrc
0A26                             ; ; func -- src
0A26                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A26                FUNCSRC:      ; :f func or block
0A26   CD 9F 03               CALL   go   
0A29   00 00                  DW   NUL   
0A2B   32 0A                  DW   funcSrcM_1876S1435   
0A2D   2F 0A                  DW   $+2   
0A2F   00                     DB   0   
0A30   01 66                  .PSTR   "f"   
0A32                FUNCSRCM_1876S1435:      
0A32   7B                     DB   "{"   
0A33   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A37   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A3F   5C 64 74 7B            DB   "\\dt{"   
0A43   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A55   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A5C   7D                     DB   "}"   
0A5D   7D                     DB   "}"   
0A5E   00                     DB   0   
0A5F                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A5F                PRINTARRAY:      
0A5F   CD 9F 03               CALL   go   
0A62   00 00                  DW   NUL   
0A64   6D 0A                  DW   printArrayM_1886S1446   
0A66   68 0A                  DW   $+2   
0A68   02                     DB   2   
0A69   03 61 62 63            .PSTR   "abc"   
0A6D                PRINTARRAYM_1886S1446:      
0A6D   7B                     DB   "{"   
0A6E   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AA5   7D                     DB   "}"   
0AA6   00                     DB   0   
0AA7                             ;*******************************************************************
0AA7                             ; implementations continued
0AA7                             ;*******************************************************************
0AA7                COLON:       
0AA7   03                     INC   bc   ; arg_list must ve immediately followed by {
0AA8   0A                     LD   a,(bc)   
0AA9   FE 3D                  CP   "="   ; := definition
0AAB   28 07                  JR   z,defineStart   
0AAD   0B                     DEC   bc   
0AAE   21 01 00               LD   hl,1   
0AB1   C3 04 10               JP   error   
0AB4                DEFINESTART:      
0AB4   E1                     POP   hl   ; discard variable value
0AB5   2A F8 56               LD   hl,(vPointer)   ; vDefine = vPointer
0AB8   22 F4 56               LD   (vDefine),hl   
0ABB   DD E9                  JP   (ix)   
0ABD                SEMICOLON:      
0ABD                DEFINEEND:      
0ABD   2A F4 56               LD   hl,(vDefine)   ; hl = define*
0AC0   7D                     LD   a,l   
0AC1   B4                     OR   h   
0AC2   28 0B                  JR   z,defineEnd1   
0AC4   11 00 00               LD   de,NUL   ; set vDefine=NUL
0AC7   ED 53 F4 56            LD   (vDefine),de   
0ACB   D1                     POP   de   ; de = value
0ACC   C3 84 0C               JP   assign1   
0ACF                DEFINEEND1:      
0ACF   DD E9                  JP   (ix)   
0AD1                             ; ~ bitwise invert
0AD1                TILDE:       
0AD1                INVERT:      
0AD1   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0AD2   7D                     LD   a,l   
0AD3   2F                     CPL      
0AD4   6F                     LD   l,a   
0AD5   7C                     LD   a,h   
0AD6   2F                     CPL      
0AD7   67                     LD   h,a   
0AD8   C3 E0 02               JP   add3   
0ADB                             ; $ hex                         ; 22
0ADB                DOLLAR:      
0ADB                HEXNUM:      
0ADB   21 00 00               LD   hl,0   ; Clear hl to accept the number
0ADE                HEXNUM1:      
0ADE   03                     INC   bc   
0ADF   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AE0   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AE2   28 02                  JR   z,hexnum2   ; no a decimal
0AE4   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AE6                HEXNUM2:      
0AE6   D6 30                  SUB   $30   ; form decimal digit
0AE8   DA 76 0B               JP   c,num2   
0AEB   FE 10                  CP   $0F+1   
0AED   D2 76 0B               JP   nc,num2   
0AF0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AF1   29                     ADD   hl,hl   ; 4X
0AF2   29                     ADD   hl,hl   ; 8X
0AF3   29                     ADD   hl,hl   ; 16X
0AF4   85                     ADD   a,l   ; add into bottom of hl
0AF5   6F                     LD   l,a   
0AF6   18 E6                  JR   hexnum1   
0AF8                             ; ? if                            23
0AF8                             ; condition then else -- value
0AF8                QUESTION:      
0AF8                IF:          
0AF8   D1                     POP   de   ; de = else
0AF9   E1                     POP   hl   ; hl = then
0AFA   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AFB   7C                     LD   a,h   
0AFC   B5                     OR   l   
0AFD   E1                     POP   hl   ; hl = then
0AFE   CA A0 03               JP   z,go1   ; if z de = else
0B01   EB                     EX   de,hl   ; condition = false, de = then
0B02   C3 A0 03               JP   go1   
0B05                             ; string                        ;38
0B05                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B05                QUOTE:       
0B05                STRING:      
0B05   2A EC 56               LD   hl,(vHeapPtr)   ; hl = heap*
0B08   E5                     PUSH   hl   ; save start of string
0B09   0A                     LD   a,(bc)   
0B0A   5F                     LD   e,a   ; e = matching terminator
0B0B   03                     INC   bc   ; point to next char
0B0C   18 03                  JR   string2   
0B0E                STRING1:      
0B0E   77                     LD   (hl),a   
0B0F   23                     INC   hl   ; increase count
0B10   03                     INC   bc   ; point to next char
0B11                STRING2:      
0B11   0A                     LD   a,(bc)   
0B12   BB                     CP   e   ; is it the string terminator
0B13   28 02                  JR   z,string3   
0B15   18 F7                  JR   string1   
0B17                STRING3:      
0B17   AF                     XOR   a   ; write NUL to terminate string
0B18   77                     LD   (hl),a   ; hl = end of string
0B19   23                     INC   hl   
0B1A   22 EC 56               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B1D   DD E9                  JP   (ix)   
0B1F                             ; %a .. %z                      43
0B1F                             ; -- value
0B1F                             ; returns value of arg
0B1F                PERCENT:      
0B1F                ARG:         
0B1F   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B22   FD 56 05               LD   d,(iy+5)   
0B25   EB                     EX   de,hl   
0B26   7D                     LD   a,l   ; arg_list* == null, skip
0B27   B4                     OR   h   
0B28   28 1A                  JR   z,arg0a   
0B2A   23                     INC   hl   ; a = num_args, hl = arg_list*
0B2B   7E                     LD   a,(hl)   
0B2C   23                     INC   hl   
0B2D   B7                     OR   a   
0B2E   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B30   5F                     LD   e,a   ; e = a = num_args
0B31   03                     INC   bc   ; a = next char = dollar_name
0B32   0A                     LD   a,(bc)   
0B33   C5                     PUSH   bc   ; save IP
0B34   43                     LD   b,e   ; b = e = num_args
0B35   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B38   FD 56 03               LD   d,(iy+3)   
0B3B                ARG0:        
0B3B   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B3C   1B                     DEC   de   
0B3D   BE                     CP   (hl)   
0B3E   28 09                  JR   z,arg1   
0B40   23                     INC   hl   ; hl = next arg_list*
0B41   10 F8                  DJNZ   arg0   
0B43   C1                     POP   bc   ; no match, restore IP
0B44                ARG0A:       
0B44   11 00 00               LD   de,0   ; return 0
0B47   18 08                  JR   arg1a   
0B49                ARG1:        
0B49   C1                     POP   bc   ; restore IP
0B4A   EB                     EX   de,hl   ; hl = arg*
0B4B   22 F8 56               LD   (vPointer),hl   ; store arg* in setter
0B4E   5E                     LD   e,(hl)   
0B4F   23                     INC   hl   
0B50   56                     LD   d,(hl)   ; de = arg
0B51                ARG1A:       
0B51   D5                     PUSH   de   ; push arg
0B52   DD E9                  JP   (ix)   
0B54                             ; 0..9 number                   37
0B54                NUM:         
0B54   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B57   0A                     LD   a,(bc)   ; Get numeral or -
0B58   FE 2D                  CP   "-"   
0B5A   20 01                  JR   nz,num0   
0B5C   03                     INC   bc   ; move to next char, no flags affected
0B5D                NUM0:        
0B5D   08                     EX   af,af'   ; save zero flag = 0 for later
0B5E                NUM1:        
0B5E   0A                     LD   a,(bc)   ; read digit
0B5F   D6 30                  SUB   "0"   ; less than 0?
0B61   38 13                  JR   c,num2   ; not a digit, exit loop
0B63   FE 0A                  CP   10   ; greater that 9?
0B65   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B67   03                     INC   bc   ; inc IP
0B68   54 5D                  LD   de,hl   ; multiply hl * 10
0B6A   29                     ADD   hl,hl   
0B6B   29                     ADD   hl,hl   
0B6C   19                     ADD   hl,de   
0B6D   29                     ADD   hl,hl   
0B6E   85                     ADD   a,l   ; add digit in a to hl
0B6F   6F                     LD   l,a   
0B70   3E 00                  LD   a,0   
0B72   8C                     ADC   a,h   
0B73   67                     LD   h,a   
0B74   18 E8                  JR   num1   
0B76                NUM2:        
0B76   0B                     DEC   bc   
0B77   08                     EX   af,af'   ; restore zero flag
0B78   20 07                  JR   nz,num3   
0B7A   EB                     EX   de,hl   ; negate the value of hl
0B7B   21 00 00               LD   hl,0   
0B7E   B7                     OR   a   ; jump to sub2
0B7F   ED 52                  SBC   hl,de   
0B81                NUM3:        
0B81   E5                     PUSH   hl   ; Put the number on the stack
0B82   DD E9                  JP   (ix)   ; and process the next character
0B84                             ; }                               58
0B84                RBRACE:      
0B84                BLOCKEND:      
0B84   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B87   FD 56 01               LD   d,(iy+1)   
0B8A   ED 53 04 57            LD   (vTemp1),de   
0B8E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B91   FD 56 07               LD   d,(iy+7)   
0B94   ED 53 06 57            LD   (vTemp2),de   
0B98   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B9B   FD 56 03               LD   d,(iy+3)   
0B9E   EB                     EX   de,hl   
0B9F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BA2   FD 56 01               LD   d,(iy+1)   
0BA5   13                     INC   de   ; for carry flag <=
0BA6   B7                     OR   a   
0BA7   ED 52                  SBC   hl,de   
0BA9   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BAB   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BAD   FD 5D                  LD   e,iyl   
0BAF   21 08 00               LD   hl,8   
0BB2   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BB3   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BB4   18 0C                  JR   blockEnd2   
0BB6                BLOCKEND1:      ; same scope
0BB6   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BB9   FD 56 03               LD   d,(iy+3)   
0BBC   EB                     EX   de,hl   
0BBD   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BBF   FD 5D                  LD   e,iyl   
0BC1   EB                     EX   de,hl   
0BC2                BLOCKEND2:      
0BC2   44 4D                  LD   bc,hl   ; bc = hl = BP
0BC4   B7                     OR   a   ; hl = BP - SP = count
0BC5   ED 72                  SBC   hl,sp   
0BC7   7D                     LD   a,l   
0BC8   B4                     OR   h   
0BC9   28 09                  JR   z,blockEnd3   
0BCB   C5                     PUSH   bc   ; bc = count, hl = BP
0BCC   44 4D                  LD   bc,hl   
0BCE   E1                     POP   hl   
0BCF   2B                     DEC   hl   ; hl = BP-1
0BD0   1B                     DEC   de   ; de = args*-1
0BD1   ED B8                  LDDR      
0BD3   13                     INC   de   
0BD4                BLOCKEND3:      
0BD4   EB                     EX   de,hl   ; sp = de = new tos*
0BD5   F9                     LD   sp,hl   
0BD6   ED 4B 06 57            LD   bc,(vTemp2)   
0BDA   FD 2A 04 57            LD   iy,(vTemp1)   
0BDE   ED 5B F2 56            LD   de,(vRecur)   ; de = recur vector
0BE2   7B                     LD   a,e   ; check for NUL
0BE3   B2                     OR   d   
0BE4   20 02                  JR   nz,blockEnd4   
0BE6   DD E9                  JP   (ix)   
0BE8                BLOCKEND4:      
0BE8   21 00 00               LD   hl,0   ; clear recur vector
0BEB   22 F2 56               LD   (vRecur),hl   
0BEE   C3 A0 03               JP   go1   ; execute de
0BF1                GOBLOCK:      
0BF1   ED 53 04 57            LD   (vTemp1),de   ; save de
0BF5   21 00 54               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BF8   FD 54                  LD   d,iyh   
0BFA   FD 5D                  LD   e,iyl   
0BFC   B7                     OR   a   ; if stack* == BP then this is the root_scope
0BFD   ED 52                  SBC   hl,de   
0BFF   ED 5B 04 57            LD   de,(vTemp1)   ; restore de
0C03   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C04   B4                     OR   h   
0C05   3E 00                  LD   a,0   
0C07   28 6A                  JR   z,goFunc8   
0C09   C5                     PUSH   bc   ; push IP
0C0A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C0D   FD 46 05               LD   b,(iy+5)   
0C10   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C13   FD 66 03               LD   h,(iy+3)   
0C16                GOBLOCK2:      
0C16   C5                     PUSH   bc   ; arg_list*
0C17   E5                     PUSH   hl   ; first_arg*
0C18   FD E5                  PUSH   iy   ; push BP
0C1A   FD 21 00 00            LD   iy,0   ; BP = SP
0C1E   FD 39                  ADD   iy,sp   
0C20                GOBLOCK3:      
0C20   42 4B                  LD   bc,de   ; bc = de = block*-1
0C22   DD E9                  JP   (ix)   
0C24                GOFUNC:      ; execute func
0C24   EB                     EX   de,hl   ; hl = func*
0C25   5E                     LD   e,(hl)   ; de = partial_array*
0C26   23                     INC   hl   
0C27   56                     LD   d,(hl)   
0C28   23                     INC   hl   
0C29   7B                     LD   a,e   ; if partial_array* == null skip
0C2A   B2                     OR   d   
0C2B   28 21                  JR   z,goFunc3   
0C2D   ED 43 04 57            LD   (vTemp1),bc   
0C31   22 06 57               LD   (vTemp2),hl   ; save bc,hl
0C34   EB                     EX   de,hl   ; hl = partial_array*
0C35   2B                     DEC   hl   ; bc = count
0C36   46                     LD   b,(hl)   
0C37   2B                     DEC   hl   
0C38   4E                     LD   c,(hl)   
0C39   23                     INC   hl   ; hl = array data*
0C3A   23                     INC   hl   
0C3B   18 06                  JR   goFunc2   ; push each item on stack
0C3D                GOFUNC1:      
0C3D   5E                     LD   e,(hl)   ; de = partial item
0C3E   23                     INC   hl   
0C3F   56                     LD   d,(hl)   
0C40   23                     INC   hl   
0C41   D5                     PUSH   de   ; push on stack
0C42   0B                     DEC   bc   
0C43                GOFUNC2:      
0C43   79                     LD   a,c   ; if count != 0 then loop
0C44   B0                     OR   b   
0C45   20 F6                  JR   nz,goFunc1   
0C47   ED 4B 04 57            LD   bc,(vTemp1)   ; restore bc
0C4B   2A 06 57               LD   hl,(vTemp2)   ; restore hl
0C4E                GOFUNC3:      
0C4E   5E                     LD   e,(hl)   ; de = block*
0C4F   23                     INC   hl   
0C50   56                     LD   d,(hl)   
0C51   23                     INC   hl   
0C52   ED 53 04 57            LD   (vTemp1),de   ; save block*
0C56   5E                     LD   e,(hl)   ; de = arg_list*
0C57   23                     INC   hl   
0C58   56                     LD   d,(hl)   
0C59   23                     INC   hl   
0C5A   EB                     EX   de,hl   ; hl = arg_list*
0C5B   ED 5B 04 57            LD   de,(vTemp1)   ; restore de = block*
0C5F   7D                     LD   a,l   ; if arg_list* == null a = 0
0C60   B4                     OR   h   
0C61   20 03                  JR   nz,goFunc4   
0C63   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C64   18 0D                  JR   goFunc8   
0C66                GOFUNC4:      ; allocate locals
0C66   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C67   18 03                  JR   goFunc6   
0C69                GOFUNC5:      ; loop
0C69   3B                     DEC   sp   
0C6A   3B                     DEC   sp   
0C6B   3D                     DEC   a   
0C6C                GOFUNC6:      
0C6C   B7                     OR   a   
0C6D   20 FA                  JR   nz,goFunc5   ; end loop
0C6F                GOFUNC7:      
0C6F   23                     INC   hl   ; a = num_args* x 2
0C70   7E                     LD   a,(hl)   
0C71   2B                     DEC   hl   
0C72   87                     ADD   a,a   ; a *= 2
0C73                GOFUNC8:      
0C73   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C74   44 4D                  LD   bc,hl   
0C76   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C79   85                     ADD   a,l   
0C7A   6F                     LD   l,a   
0C7B   39                     ADD   hl,sp   
0C7C   18 98                  JR   goBlock2   
0C7E                             ; =                              21
0C7E                             ; value _oldValue --            ; uses address in vPointer 15
0C7E                ASSIGN:      
0C7E   E1                     POP   hl   ; discard last accessed value
0C7F   E1                     POP   hl   ; hl = new value
0C80                ASSIGN0:      
0C80   EB                     EX   de,hl   ; de = new value
0C81   2A F8 56               LD   hl,(vPointer)   
0C84                ASSIGN1:      ; entry point from defineEnd
0C84   73                     LD   (hl),e   
0C85   3A EE 56               LD   a,(vDataWidth)   
0C88   3D                     DEC   a   ; is it byte?
0C89   28 02                  JR   z,assign2   
0C8B   23                     INC   hl   
0C8C   72                     LD   (hl),d   
0C8D                ASSIGN2:      
0C8D   DD E9                  JP   (ix)   
0C8F                             ; hl = value1, de = value2
0C8F                             ; hl = result
0C8F                EQUALS:      
0C8F   B7                     OR   a   ; reset the carry flag
0C90   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C92   28 16                  JR   z,true1   
0C94   18 1A                  JR   false1   
0C96                NOTEQUALS:      
0C96   B7                     OR   a   ; reset the carry flag
0C97   ED 52                  SBC   hl,de   
0C99   20 0F                  JR   nz,true1   
0C9B   18 13                  JR   false1   
0C9D                             ; hl = value1 de = value2
0C9D                             ; hl = result
0C9D                LESSTHANEQ:      
0C9D   B7                     OR   a   
0C9E   ED 52                  SBC   hl,de   
0CA0   18 05                  JR   lessthan1   
0CA2                             ; hl = value1 de = value2
0CA2                             ; hl = result
0CA2                LESSTHAN:      
0CA2   B7                     OR   a   
0CA3   ED 52                  SBC   hl,de   
0CA5   28 09                  JR   z,false1   
0CA7                LESSTHAN1:      
0CA7   FA B0 0C               JP   m,false1   
0CAA                TRUE1:       
0CAA   21 FF FF               LD   hl,TRUE   
0CAD   E5                     PUSH   hl   
0CAE   DD E9                  JP   (ix)   
0CB0                NULL1:       
0CB0                FALSE1:      
0CB0   21 00 00               LD   hl,FALSE   
0CB3   E5                     PUSH   hl   
0CB4   DD E9                  JP   (ix)   
0CB6                SPREAD:      
0CB6   E1                     POP   hl   ; hl = array*
0CB7   ED 43 04 57            LD   (vTemp1),bc   ; save bc
0CBB   2B                     DEC   hl   ; bc = length
0CBC   46                     LD   b,(hl)   
0CBD   2B                     DEC   hl   
0CBE   4E                     LD   c,(hl)   
0CBF   23                     INC   hl   ; move back to array 0
0CC0   23                     INC   hl   
0CC1   18 0D                  JR   spread3   
0CC3                SPREAD1:      
0CC3   5E                     LD   e,(hl)   ; e = lsb data at hl
0CC4   23                     INC   hl   
0CC5   3A EE 56               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0CC8   57                     LD   d,a   
0CC9   15                     DEC   d   
0CCA   28 02                  JR   z,spread2   
0CCC   56                     LD   d,(hl)   ; d = msb data at hl
0CCD   23                     INC   hl   
0CCE                SPREAD2:      
0CCE   D5                     PUSH   de   ; return de
0CCF   0B                     DEC   bc   ; count--
0CD0                SPREAD3:      
0CD0   79                     LD   a,c   ; exit loop if bc == 0
0CD1   B0                     OR   b   
0CD2   20 EF                  JR   nz,spread1   
0CD4   ED 4B 04 57            LD   bc,(vTemp1)   ; restore bc
0CD8   DD E9                  JP   (ix)   
0CDA                             ; shiftLeft
0CDA                             ; value count <<
0CDA                             ; count variable <<=
0CDA                SHIFTLEFT:      
0CDA   E1                     POP   hl   ; de = arg_a, hl = arg_b
0CDB   D1                     POP   de   
0CDC   03                     INC   bc   
0CDD   0A                     LD   a,(bc)   
0CDE   FE 3D                  CP   "="   
0CE0   28 02                  JR   z,shiftLeft2   
0CE2   0B                     DEC   bc   
0CE3   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0CE4                SHIFTLEFT2:      
0CE4   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0CE8   43                     LD   b,e   ; b = loop counter
0CE9   04                     INC   b   ; test for counter=0 case
0CEA   18 01                  JR   shiftLeft4   
0CEC                SHIFTLEFT3:      
0CEC   29                     ADD   hl,hl   ; left shift hl
0CED                SHIFTLEFT4:      
0CED   10 FD                  DJNZ   shiftLeft3   
0CEF   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0CF3   C3 A5 02               JP   sub3   
0CF6                             ; shiftRight
0CF6                             ; value count >>
0CF6                             ; count variable >>=
0CF6                SHIFTRIGHT:      
0CF6   E1                     POP   hl   ; de = arg_a, hl = arg_b
0CF7   D1                     POP   de   
0CF8   03                     INC   bc   
0CF9   0A                     LD   a,(bc)   
0CFA   FE 3D                  CP   "="   
0CFC   28 02                  JR   z,shiftRight2   
0CFE   0B                     DEC   bc   
0CFF   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0D00                SHIFTRIGHT2:      
0D00   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0D04   43                     LD   b,e   ; b = loop counter
0D05   04                     INC   b   ; test for counter=0 case
0D06   18 04                  JR   shiftRight4   
0D08                SHIFTRIGHT3:      
0D08   CB 3C                  SRL   h   ; right shift hl
0D0A   CB 1D                  RR   l   
0D0C                SHIFTRIGHT4:      
0D0C   10 FA                  DJNZ   shiftRight3   
0D0E   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0D12   C3 A5 02               JP   sub3   
0D15                             ; division subroutine.
0D15                             ; bc: divisor, de: dividend, hl: remainder
0D15                DIVIDE:      
0D15   21 00 00               LD   hl,0   ; zero the remainder
0D18   3E 10                  LD   a,16   ; loop counter
0D1A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D1A   CB 21                  SLA   c   
0D1C   CB 10                  RL   b   
0D1E   ED 6A                  ADC   hl,hl   
0D20   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D22   38 03                  JR   c,divide2   
0D24   0C                     INC   c   
0D25   18 01                  JR   divide3   
0D27                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D27   19                     ADD   hl,de   
0D28                DIVIDE3:      
0D28   3D                     DEC   a   
0D29   20 EF                  JR   nz,divide1   
0D2B   50 59                  LD   de,bc   ; result from bc to de
0D2D   C9                     RET      
0D2E                DOTNEXT:      
0D2E   3A F6 56               LD   a,(vStrMode)   ; if string mode then exit
0D31   3C                     INC   a   
0D32   20 02                  JR   nz,dotNext1   
0D34   DD E9                  JP   (ix)   
0D36                DOTNEXT1:      
0D36   11 00 55               LD   de,BUFFER   
0D39   2A E8 56               LD   hl,(vBufPtr)   
0D3C   36 00                  LD   (hl),0   ; store NUL at end of string
0D3E   ED 53 E8 56            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D42   EB                     EX   de,hl   ; hl = BUFFER
0D43   CD BC 0E               CALL   putstr   
0D46   DD E9                  JP   (ix)   
0D48                             ; arg_list - parses arg_list e.g. ab:c
0D48                             ; -- arg_list*
0D48                PARSEARGS:      
0D48   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D4B   2A EC 56               LD   hl,(vHeapPtr)   ; hl = heap*
0D4E   E5                     PUSH   hl   ; save start of arg_list
0D4F   23                     INC   hl   ; skip length fields to start of string
0D50   23                     INC   hl   
0D51   03                     INC   bc   ; point to next char
0D52                PARSEARGS1:      
0D52   0A                     LD   a,(bc)   
0D53   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D55   20 03                  JR   nz,parseArgs1a   
0D57   14                     INC   d   ; non zero value local count acts as flag
0D58   18 10                  JR   parseArgs3   
0D5A                PARSEARGS1A:      
0D5A   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D5C   38 0F                  JR   c,parseArgs4   
0D5E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D60   30 0B                  JR   nc,parseArgs4   
0D62                PARSEARGS2:      
0D62   77                     LD   (hl),a   
0D63   23                     INC   hl   
0D64   1C                     INC   e   ; increase arg count
0D65   AF                     XOR   a   
0D66   B2                     OR   d   
0D67   28 01                  JR   z,parseArgs3   
0D69   14                     INC   d   ; if d > 0 increase local count
0D6A                PARSEARGS3:      
0D6A   03                     INC   bc   ; point to next char
0D6B   18 E5                  JR   parseArgs1   
0D6D                PARSEARGS4:      
0D6D   0B                     DEC   bc   
0D6E   AF                     XOR   a   
0D6F   B2                     OR   d   
0D70   28 01                  JR   z,parseArgs5   
0D72   15                     DEC   d   ; remove initial inc
0D73                PARSEARGS5:      
0D73   23                     INC   hl   
0D74   22 EC 56               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D77   E1                     POP   hl   ; hl = start of arg_list
0D78   72                     LD   (hl),d   ; write number of locals at start - 1
0D79   23                     INC   hl   
0D7A   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D7B   2B                     DEC   hl   
0D7C   E3                     EX   (sp),hl   
0D7D   E9                     JP   (hl)   
0D7E                             ; create block: parses block e.g. 00bbIC4uLi4g
0D7E                             ; -- block*
0D7E                PARSEBLOCK:      
0D7E   C5                     PUSH   bc   ; return pointer to first { of block
0D7F   03                     INC   bc   
0D80   16 01                  LD   d,1   ; nesting: count first parenthesis
0D82                PARSEBLOCK1:      ; Skip to end of definition
0D82   0A                     LD   a,(bc)   ; Get the next character
0D83   03                     INC   bc   ; Point to next character
0D84   FE 21                  CP   " " + 1   ; ignore whitespace
0D86   38 FA                  JR   c,parseBlock1   
0D88   FE 29                  CP   ")"   
0D8A   28 2D                  JR   z,parseBlock4   
0D8C   FE 7D                  CP   "}"   
0D8E   28 29                  JR   z,parseBlock4   
0D90   FE 5D                  CP   "]"   
0D92   28 25                  JR   z,parseBlock4   
0D94   FE 28                  CP   "("   
0D96   28 16                  JR   z,parseBlock2   
0D98   FE 7B                  CP   "{"   
0D9A   28 12                  JR   z,parseBlock2   
0D9C   FE 5B                  CP   "["   
0D9E   28 0E                  JR   z,parseBlock2   
0DA0   FE 27                  CP   "'"   
0DA2   28 0D                  JR   z,parseBlock3   
0DA4   FE 60                  CP   "`"   
0DA6   28 09                  JR   z,parseBlock3   
0DA8   FE 22                  CP   DQ   
0DAA   28 05                  JR   z,parseBlock3   
0DAC   18 D4                  JR   parseBlock1   
0DAE                PARSEBLOCK2:      
0DAE   14                     INC   d   
0DAF   18 D1                  JR   parseBlock1   
0DB1                PARSEBLOCK3:      
0DB1   3E 80                  LD   a,$80   
0DB3   AA                     XOR   d   
0DB4   57                     LD   d,a   
0DB5   20 CB                  JR   nz,parseBlock1   
0DB7   18 03                  JR   parseBlock5   
0DB9                PARSEBLOCK4:      
0DB9   15                     DEC   d   
0DBA   20 C6                  JR   nz,parseBlock1   ; get the next element
0DBC                PARSEBLOCK5:      
0DBC   60 69                  LD   hl,bc   ; hl = IP
0DBE   11 22 57               LD   de,HEAP   ; is IP pointing to object in heap
0DC1   B7                     OR   a   ; IP - HEAP
0DC2   ED 52                  SBC   hl,de   
0DC4   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0DC6   28 1C                  JR   z,parseBlock6   
0DC8   60 69                  LD   hl,bc   ; hl = IP
0DCA   D1                     POP   de   ; de = block*
0DCB   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0DCF   B7                     OR   a   ; bc = size
0DD0   ED 52                  SBC   hl,de   
0DD2   44 4D                  LD   bc,hl   
0DD4   EB                     EX   de,hl   ; hl = block* de = heap*
0DD5   ED 5B EC 56            LD   de,(vHeapPtr)   
0DD9   D5                     PUSH   de   ; return hblock*
0DDA   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0DDC   ED 53 EC 56            LD   (vHeapPtr),de   ; heap* += size
0DE0   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0DE4                PARSEBLOCK6:      
0DE4   0B                     DEC   bc   ; balanced, exit
0DE5   E1                     POP   hl   ; hl = block*
0DE6   E3                     EX   (sp),hl   ; return to caller
0DE7   E9                     JP   (hl)   
0DE8                             ; create function
0DE8                             ; arg_list* block* -- func*
0DE8                CREATEFUNC:      
0DE8   E1                     POP   hl   ; save retrn address
0DE9   22 08 57               LD   (vTemp3),hl   
0DEC   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0DF0   E1                     POP   hl   ; hl = block*
0DF1   22 06 57               LD   (vTemp2),hl   ; save block*
0DF4   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0DF7   FD 56 05               LD   d,(iy+5)   
0DFA   7B                     LD   a,e   ; if arg_list == null then make a func
0DFB   B2                     OR   d   
0DFC   20 09                  JR   nz,createFunc0   
0DFE   21 00 00               LD   hl,0   ; partial_array = null
0E01   ED 5B EC 56            LD   de,(vHeapPtr)   ; de = compile*
0E05   18 65                  JR   createFunc5   
0E07                CREATEFUNC0:      
0E07   E1                     POP   hl   ; hl = inner_arg_list*
0E08   E5                     PUSH   hl   ; save inner_arg_list
0E09   ED 5B EC 56            LD   de,(vHeapPtr)   ; de = compile*
0E0D   7E                     LD   a,(hl)   ; compile inner_num_locals
0E0E   4F                     LD   c,a   ; b = inner_num_locals
0E0F   12                     LD   (de),a   
0E10   23                     INC   hl   
0E11   13                     INC   de   
0E12   7E                     LD   a,(hl)   ; compile inner_length
0E13   12                     LD   (de),a   
0E14   91                     SUB   c   ; a = inner_num args
0E15   23                     INC   hl   
0E16   13                     INC   de   
0E17   B7                     OR   a   ; compile args if inner_length > 0
0E18   28 05                  JR   z,createFunc1   
0E1A   4F                     LD   c,a   ; bc = a
0E1B   06 00                  LD   b,0   
0E1D   ED B0                  LDIR      
0E1F                CREATEFUNC1:      
0E1F   EB                     EX   de,hl   ; hl = outer_arg_list
0E20   FD 5E 04               LD   e,(iy+4)   
0E23   FD 56 05               LD   d,(iy+5)   
0E26   EB                     EX   de,hl   
0E27   23                     INC   hl   ; a = outer_length
0E28   7E                     LD   a,(hl)   
0E29   23                     INC   hl   
0E2A   B7                     OR   a   
0E2B   28 05                  JR   z,createFunc2   
0E2D   4F                     LD   c,a   
0E2E   06 00                  LD   b,0   
0E30   ED B0                  LDIR      ; append outer_args
0E32                CREATEFUNC2:      ; a = outer_length
0E32   47                     LD   b,a   ; b = a = outer_length
0E33   2A EC 56               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E36   23                     INC   hl   
0E37   7E                     LD   a,(hl)   ; add outer_length to new length
0E38   80                     ADD   a,b   
0E39   77                     LD   (hl),a   
0E3A   2B                     DEC   hl   
0E3B   78                     LD   a,b   ; save outer_length in a'
0E3C   08                     EX   af,af'   
0E3D   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E3E   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E3F   B7                     OR   a   
0E40   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E42   4F                     LD   c,a   ; c = inner_num_locals
0E43   06 00                  LD   b,0   ; bc = inner_num_locals
0E45   23                     INC   hl   ; a = inner_length
0E46   7E                     LD   a,(hl)   
0E47   91                     SUB   c   ; a = inner_num_args
0E48   23                     INC   hl   ; hl = inner_arg_chars
0E49   85                     ADD   a,l   ; hl += a
0E4A   6F                     LD   l,a   
0E4B   3E 00                  LD   a,0   
0E4D   84                     ADD   a,h   
0E4E   67                     LD   h,a   
0E4F   ED B0                  LDIR      ; append inner_locals
0E51                CREATEFUNC2A:      
0E51   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E52   12                     LD   (de),a   ; compile partial_array length field
0E53   13                     INC   de   
0E54   AF                     XOR   a   
0E55   12                     LD   (de),a   
0E56   13                     INC   de   
0E57   D5                     PUSH   de   ; push partial_array*
0E58   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E59   FD 5E 02               LD   e,(iy+2)   
0E5C   FD 56 03               LD   d,(iy+3)   
0E5F   EB                     EX   de,hl   
0E60                CREATEFUNC3:      
0E60   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E61   4E                     LD   c,(hl)   
0E62   2B                     DEC   hl   
0E63   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E64   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E65   13                     INC   de   
0E66   79                     LD   a,c   
0E67   12                     LD   (de),a   
0E68   13                     INC   de   
0E69   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E6B                CREATEFUNC4:      
0E6B   E1                     POP   hl   ; hl = partial_array*
0E6C                CREATEFUNC5:      
0E6C   C1                     POP   bc   ; bc = new_arg_list*
0E6D   D5                     PUSH   de   ; return new func*
0E6E   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E6F   73                     LD   (hl),e   ; compile partial_array* to func
0E70   23                     INC   hl   
0E71   72                     LD   (hl),d   
0E72   23                     INC   hl   
0E73   ED 5B 06 57            LD   de,(vTemp2)   ; de = block*
0E77   73                     LD   (hl),e   ; compile block* to func
0E78   23                     INC   hl   
0E79   72                     LD   (hl),d   
0E7A   23                     INC   hl   
0E7B   71                     LD   (hl),c   ; compile new_arg_list* to func
0E7C   23                     INC   hl   
0E7D   70                     LD   (hl),b   
0E7E   23                     INC   hl   
0E7F   22 EC 56               LD   (vHeapPtr),hl   ; bump heap ptr
0E82   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0E86   2A 08 57               LD   hl,(vTemp3)   ; jump to return address
0E89   E9                     JP   (hl)   
0E8A                             ;*******************************************************************
0E8A                             ; general routines
0E8A                             ;*******************************************************************
0E8A                             ; followed by a table
0E8A                             ; indexed on the 0-25 lowercase letter
0E8A                             ; db lsb(addr)
0E8A                             ; the final item index 26 matches any other char
0E8A                LOWERCASETABLE:      
0E8A   03                     INC   bc   
0E8B   0A                     LD   a,(bc)   
0E8C   FE 7B                  CP   "z"+1   
0E8E   30 0B                  JR   nc,lowerCaseTable2   
0E90   D6 61                  SUB   "a"   
0E92   38 07                  JR   c,lowerCaseTable2   
0E94                LOWERCASETABLE1:      
0E94   E1                     POP   hl   
0E95   85                     ADD   a,l   
0E96   6F                     LD   l,a   
0E97   6E                     LD   l,(hl)   ; must have the same msb as the table
0E98   C3 A1 0E               JP   commandTable1   
0E9B                LOWERCASETABLE2:      
0E9B   3E 1A                  LD   a,26   
0E9D   0B                     DEC   bc   
0E9E   18 F4                  JR   lowerCaseTable1   
0EA0                             ; followed by a table
0EA0                             ; db char
0EA0                             ; dw addr
0EA0                             ; the final item must have char == NUL
0EA0                COMMANDTABLE:      
0EA0   E1                     POP   hl   
0EA1                COMMANDTABLE1:      
0EA1   03                     INC   bc   
0EA2                COMMANDTABLE2:      
0EA2   AF                     XOR   a   
0EA3   BE                     CP   (hl)   
0EA4   20 03                  JR   nz,commandTable3   
0EA6   0B                     DEC   bc   
0EA7   18 09                  JR   commandTable4   
0EA9                COMMANDTABLE3:      
0EA9   0A                     LD   a,(bc)   
0EAA   BE                     CP   (hl)   
0EAB   28 05                  JR   z,commandTable4   
0EAD   23                     INC   hl   
0EAE   23                     INC   hl   
0EAF   23                     INC   hl   
0EB0   18 F0                  JR   commandTable2   
0EB2                COMMANDTABLE4:      
0EB2   23                     INC   hl   
0EB3   5E                     LD   e,(hl)   
0EB4   23                     INC   hl   
0EB5   56                     LD   d,(hl)   
0EB6   EB                     EX   de,hl   
0EB7   E9                     JP   (hl)   
0EB8                PUTSTR0:      
0EB8   CD 85 00               CALL   putchar   
0EBB   23                     INC   hl   
0EBC                PUTSTR:      
0EBC   7E                     LD   a,(hl)   
0EBD   B7                     OR   a   
0EBE   20 F8                  JR   nz,putstr0   
0EC0   C9                     RET      
0EC1                             ; **************************************************************************
0EC1                             ; calculate nesting value
0EC1                             ; a is char to be tested,
0EC1                             ; e is the nesting value (initially 0)
0EC1                             ; e is increased by ( and [
0EC1                             ; e is decreased by ) and ]
0EC1                             ; e has its bit 7 toggled by `
0EC1                             ; limited to 127 levels
0EC1                             ; **************************************************************************
0EC1                NESTING:      
0EC1   FE 22                  CP   DQ   ; quote char
0EC3   28 06                  JR   z,nesting0   
0EC5   FE 60                  CP   "`"   ; quote char
0EC7   28 02                  JR   z,nesting0   
0EC9   18 0A                  JR   nesting1   
0ECB                NESTING0:      
0ECB   CB 7B                  BIT   7,e   
0ECD   28 03                  JR   z,nesting1a   
0ECF   CB BB                  RES   7,e   
0ED1   C9                     RET      
0ED2                NESTING1A:      
0ED2   CB FB                  SET   7,e   
0ED4   C9                     RET      
0ED5                NESTING1:      
0ED5   CB 7B                  BIT   7,e   
0ED7   C0                     RET   nz   
0ED8   FE 7B                  CP   "{"   
0EDA   28 08                  JR   z,nesting2   
0EDC   FE 5B                  CP   "["   
0EDE   28 04                  JR   z,nesting2   
0EE0   FE 28                  CP   "("   
0EE2   20 02                  JR   nz,nesting3   
0EE4                NESTING2:      
0EE4   1C                     INC   e   
0EE5   C9                     RET      
0EE6                NESTING3:      
0EE6   FE 7D                  CP   "}"   
0EE8   28 07                  JR   z,nesting4   
0EEA   FE 5D                  CP   "]"   
0EEC   28 03                  JR   z,nesting4   
0EEE   FE 29                  CP   ")"   
0EF0   C0                     RET   nz   
0EF1                NESTING4:      
0EF1   1D                     DEC   e   
0EF2   C9                     RET      
0EF3                PROMPT:      
0EF3   CD 03 0F               CALL   printStr   
0EF6   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0EFB   C9                     RET      
0EFC                CRLF:        
0EFC   CD 03 0F               CALL   printStr   
0EFF   0D 0A 00               .CSTR   "\r\n"   
0F02   C9                     RET      
0F03                             ; prints a null teminated string
0F03                             ; the string should be immediately following the call
0F03                PRINTSTR:      
0F03   E3                     EX   (sp),hl   ; swap			
0F04   CD BC 0E               CALL   putstr   
0F07   23                     INC   hl   ; inc past NUL
0F08   E3                     EX   (sp),hl   ; put it back	
0F09   C9                     RET      
0F0A                INIT:        
0F0A   21 F0 01               LD   hl,titleStr   
0F0D   11 0E 57               LD   de,titleBuf   
0F10   06 14                  LD   b,20   
0F12                INIT1:       
0F12   1A                     LD   a,(de)   
0F13   BE                     CP   (hl)   
0F14   20 17                  JR   nz,coldBoot0   
0F16   13                     INC   de   
0F17   23                     INC   hl   
0F18   10 F8                  DJNZ   init1   
0F1A                WARMINIT:      
0F1A   ED 4B FC 56            LD   bc,(vSavedIP)   ; restore IP
0F1E   ED 7B FE 56            LD   sp,(vSavedSP)   ; restore SP
0F22   DD 2A 00 57            LD   ix,(vSavedNext)   ; restore Next
0F26   FD 2A 02 57            LD   iy,(vSavedBP)   ; restore BP
0F2A   C3 64 0F               JP   start1   
0F2D                COLDBOOT0:      
0F2D   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0F30   11 0E 57               LD   de,titleBuf   
0F33   06 14                  LD   b,20   
0F35   ED B0                  LDIR      
0F37                COLDINIT:      
0F37   21 DE 01               LD   hl,isysVars   
0F3A   11 E6 56               LD   de,sysVars   
0F3D   01 12 00               LD   bc,9 * 2   
0F40   ED B0                  LDIR      
0F42   21 00 56               LD   hl,vars   ; 52 vars LO HI
0F45   06 34                  LD   b,26*2   
0F47   AF                     XOR   a   
0F48                COLDBOOT1:      
0F48   77                     LD   (hl),a   
0F49   23                     INC   hl   
0F4A   10 FC                  DJNZ   coldBoot1   
0F4C   DD 2A EA 56            LD   ix,(vNext)   
0F50   FD 21 00 54            LD   iy,STACK   
0F54   C9                     RET      
0F55                COLDSTART:      
0F55   31 00 54               LD   sp,STACK   
0F58   CD 2D 0F               CALL   coldBoot0   
0F5B   C3 64 0F               JP   start1   
0F5E                START:       
0F5E   31 00 54               LD   sp,STACK   ; start Monty
0F61   CD 0A 0F               CALL   init   ; setups
0F64                START1:      
0F64   21 0E 57               LD   hl,titleBuf   
0F67   CD BC 0E               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0F6A                INTERPRET:      
0F6A   CD F3 0E               CALL   prompt   
0F6D   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F70   21 00 54               LD   hl,TIB   
0F73   22 E6 56               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F76                INTERPRET2:      ; calculate nesting
0F76   1E 00                  LD   e,0   ; initilize nesting value
0F78   C5                     PUSH   bc   ; save offset into TIB,
0F79                             ; bc is also the count of chars in TIB
0F79   21 00 54               LD   hl,TIB   ; hl is start of TIB
0F7C   18 06                  JR   interpret4   
0F7E                INTERPRET3:      
0F7E   7E                     LD   a,(hl)   ; a = char in TIB
0F7F   23                     INC   hl   ; inc pointer into TIB
0F80   0B                     DEC   bc   ; dec count of chars in TIB
0F81   CD C1 0E               CALL   nesting   ; update nesting value
0F84                INTERPRET4:      
0F84   79                     LD   a,c   ; is count zero?
0F85   B0                     OR   b   
0F86   20 F6                  JR   nz,interpret3   ; if not loop
0F88   C1                     POP   bc   ; restore offset into TIB
0F89                INTERPRET5:      
0F89   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F8C   FE 20                  CP   $20   ; compare to space
0F8E   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F90   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F92   28 31                  JR   z,interpret8   
0F94   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F96   28 1A                  JR   z,interpret7   ; if anything else its macro/control
0F98   FE 08                  CP   CTRL_H   
0F9A   CA 16 10               JP   z,backSpace_   
0F9D   FE 0A                  CP   CTRL_J   
0F9F   CA 26 10               JP   z,reEdit_   
0FA2                INTERPRET5A:      
0FA2   18 D2                  JR   interpret2   
0FA4                INTERPRET6:      
0FA4   21 00 54               LD   hl,TIB   
0FA7   09                     ADD   hl,bc   
0FA8   77                     LD   (hl),a   ; store the character in textbuf
0FA9   03                     INC   bc   
0FAA   CD 85 00               CALL   putchar   ; echo character to screen
0FAD   CD C1 0E               CALL   nesting   
0FB0   18 D7                  JR   interpret5   ; wait for next character
0FB2                INTERPRET7:      
0FB2   21 00 54               LD   hl,TIB   
0FB5   09                     ADD   hl,bc   
0FB6   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0FB8   23                     INC   hl   
0FB9   36 0A                  LD   (hl),"\n"   
0FBB   23                     INC   hl   
0FBC   03                     INC   bc   
0FBD   03                     INC   bc   
0FBE   CD FC 0E               CALL   crlf   ; echo character to screen
0FC1   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0FC2   B7                     OR   a   
0FC3   20 C4                  JR   nz,interpret5   
0FC5                INTERPRET8:      
0FC5   21 00 54               LD   hl,TIB   
0FC8   09                     ADD   hl,bc   
0FC9   22 E6 56               LD   (vTIBPtr),hl   
0FCC   01 00 54               LD   bc,TIB   
0FCF   ED 43 FC 56            LD   (vSavedIP),bc   ; save IP
0FD3   ED 73 FE 56            LD   (vSavedSP),sp   ; save SP
0FD7   DD 22 00 57            LD   (vSavedNext),ix   ; save Next
0FDB   FD 22 02 57            LD   (vSavedBP),iy   ; save BP
0FDF   0B                     DEC   bc   
0FE0                NEXT:        
0FE0   03                     INC   bc   ; Increment the IP
0FE1   0A                     LD   a,(bc)   ; Get the next character and dispatch
0FE2   FE 20                  CP   " "   ; whitespace?
0FE4   28 FA                  JR   z,next   ; space? ignore
0FE6   38 0D                  JR   c,next1   
0FE8   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0FEA   6F                     LD   l,a   ; index into table
0FEB   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0FED   6E                     LD   l,(hl)   ; get low jump address
0FEE   24                     INC   h   ; page 2
0FEF   FE BA                  CP   "Z" - "!" + 1 + $80   
0FF1   38 01                  JR   c,next0   
0FF3   24                     INC   h   ; page 3
0FF4                NEXT0:       
0FF4   E9                     JP   (hl)   ; Jump to routine
0FF5                NEXT1:       
0FF5   FE 00                  CP   NUL   ; end of input string?
0FF7   28 03                  JR   z,exit   
0FF9   C3 6A 0F               JP   interpret   ; no, other whitespace, macros?
0FFC                EXIT:        
0FFC   03                     INC   bc   
0FFD   60 69                  LD   hl,bc   
0FFF   E9                     JP   (hl)   
1000                RUN:         
1000   C1                     POP   bc   
1001   0B                     DEC   bc   
1002   DD E9                  JP   (ix)   
1004                ERROR:       
1004   E5                     PUSH   hl   
1005   CD 00 10               CALL   run   
1008   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1013   C3 6A 0F               JP   interpret   
1016                BACKSPACE_:      
1016   79                     LD   a,c   
1017   B0                     OR   b   
1018   CA 76 0F               JP   z,interpret2   
101B   0B                     DEC   bc   
101C   CD 03 0F               CALL   printStr   
101F   08 20 08 00            .CSTR   "\b \b"   
1023   C3 76 0F               JP   interpret2   
1026                REEDIT_:      
1026   CD 03 0F               CALL   printStr   
1029   0D 3E 20 00            .CSTR   "\r> "   
102D   21 00 54               LD   hl,TIB   
1030   18 04                  JR   reEdit1   
1032                REEDIT0:      
1032   CD 85 00               CALL   putchar   
1035   23                     INC   hl   
1036                REEDIT1:      
1036   7E                     LD   a,(hl)   
1037   FE 0D                  CP   "\r"   
1039   20 F7                  JR   nz,reEdit0   
103B   11 00 54               LD   de,TIB   
103E   B7                     OR   a   
103F   ED 52                  SBC   hl,de   
1041   44 4D                  LD   bc,hl   
1043   C3 76 0F               JP   interpret2   
1046                          ;*Macro unroll: FUNC f1, 0, ""
1046                F1:          
1046   CD 9F 03               CALL   go   
1049   00 00                  DW   NUL   
104B   51 10                  DW   f1M_2915S12   
104D   4F 10                  DW   $+2   
104F   00                     DB   0   
1050   00                     .PSTR   ""   
1051                F1M_2915S12:      
1051   00                     DB   0   
1052                          ;*Macro unroll: FUNC f2, 0, ""
1052                F2:          
1052   CD 9F 03               CALL   go   
1055   00 00                  DW   NUL   
1057   5D 10                  DW   f2M_2917S15   
1059   5B 10                  DW   $+2   
105B   00                     DB   0   
105C   00                     .PSTR   ""   
105D                F2M_2917S15:      
105D   00                     DB   0   
105E                          ;*Macro unroll: FUNC f3, 0, ""
105E                F3:          
105E   CD 9F 03               CALL   go   
1061   00 00                  DW   NUL   
1063   69 10                  DW   f3M_2919S18   
1065   67 10                  DW   $+2   
1067   00                     DB   0   
1068   00                     .PSTR   ""   
1069                F3M_2919S18:      
1069   00                     DB   0   
106A                          ;*Macro unroll: FUNC f4, 0, ""
106A                F4:          
106A   CD 9F 03               CALL   go   
106D   00 00                  DW   NUL   
106F   75 10                  DW   f4M_2921S21   
1071   73 10                  DW   $+2   
1073   00                     DB   0   
1074   00                     .PSTR   ""   
1075                F4M_2921S21:      
1075   00                     DB   0   
1076                          ALIGN   $100   
1100                TESTSSTART:      
1100                          ;*Macro unroll:  test "0 10 1 /rg \\a{%a.} /fe", 0
1100   31 00 54               LD   SP,STACK   
1103   CD 37 0F               CALL   coldInit   
1106   CD 63 52               CALL   execStr   
1109   30 20 31 30 20 31 20 2F 72 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 65 00 DB   "0 10 1 /rg \\a{%a.} /fe",0   
1120   E1                     POP   HL   
1121   E5                     PUSH   HL   
1122   11 00 00               LD   DE,0   
1125   B7                     OR   A   
1126   ED 52                  SBC   HL,DE   
1128   7D                     LD   A,L   
1129   B4                     OR   H   
112A   CA 90 11               JP   Z,expectM_2925S27   
112D   CD 03 0F               CALL   printStr   
1130   43 6F 64 65 3A 20 30 20 31 30 20 31 20 2F 72 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 65 00 .CSTR   "Code: ","0 10 1 /rg \\a{%a.} /fe"   
114D   CD 03 0F               CALL   printStr   
1150   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
115F   21 00 00               LD   hl,0   
1162   E5                     PUSH   hl   
1163   E5                     PUSH   hl   
1164   CD 00 10               CALL   run   
1167   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
116E   CD 03 0F               CALL   printStr   
1171   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
117E   E1                     POP   hl   
117F   E5                     PUSH   hl   
1180   E5                     PUSH   hl   
1181   CD 00 10               CALL   run   
1184   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
118F   76                     HALT      
1190                EXPECTM_2925S27:      
1190   E1                     POP   HL   
1191                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1191                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1191                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1191                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1191                             ; test "[1 2 3].a", 0
1191                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1191                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1191                             ; test "/hx/bm$1234.",0
1191                             ; test "/bm257.",0
1191                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1191                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1191                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1191                             ; test "0 x = 2 x + = x .", false
1191                             ; test "3 1 <<", 6
1191                             ; test "10 1 >>", 5
1191                             ; test "3x= 1 x <<= x", 6
1191                             ; test "10x= 1 x >>= x", 5
1191   CD 03 0F               CALL   printStr   
1194   44 6F 6E 65 21 00      .CSTR   "Done!"   
119A   76                     HALT      
119B                          ;*Macro unroll:  test "/f", false
119B   31 00 54               LD   SP,STACK   
119E   CD 37 0F               CALL   coldInit   
11A1   CD 63 52               CALL   execStr   
11A4   2F 66 00               DB   "/f",0   
11A7   E1                     POP   HL   
11A8   E5                     PUSH   HL   
11A9   11 00 00               LD   DE,false   
11AC   B7                     OR   A   
11AD   ED 52                  SBC   HL,DE   
11AF   7D                     LD   A,L   
11B0   B4                     OR   H   
11B1   CA 03 12               JP   Z,expectM_2946S53   
11B4   CD 03 0F               CALL   printStr   
11B7   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
11C0   CD 03 0F               CALL   printStr   
11C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11D2   21 00 00               LD   hl,false   
11D5   E5                     PUSH   hl   
11D6   E5                     PUSH   hl   
11D7   CD 00 10               CALL   run   
11DA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
11E1   CD 03 0F               CALL   printStr   
11E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11F1   E1                     POP   hl   
11F2   E5                     PUSH   hl   
11F3   E5                     PUSH   hl   
11F4   CD 00 10               CALL   run   
11F7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1202   76                     HALT      
1203                EXPECTM_2946S53:      
1203   E1                     POP   HL   
1204                          ;*Macro unroll:  test "/t", true
1204   31 00 54               LD   SP,STACK   
1207   CD 37 0F               CALL   coldInit   
120A   CD 63 52               CALL   execStr   
120D   2F 74 00               DB   "/t",0   
1210   E1                     POP   HL   
1211   E5                     PUSH   HL   
1212   11 FF FF               LD   DE,true   
1215   B7                     OR   A   
1216   ED 52                  SBC   HL,DE   
1218   7D                     LD   A,L   
1219   B4                     OR   H   
121A   CA 6C 12               JP   Z,expectM_2947S54   
121D   CD 03 0F               CALL   printStr   
1220   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1229   CD 03 0F               CALL   printStr   
122C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123B   21 FF FF               LD   hl,true   
123E   E5                     PUSH   hl   
123F   E5                     PUSH   hl   
1240   CD 00 10               CALL   run   
1243   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
124A   CD 03 0F               CALL   printStr   
124D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
125A   E1                     POP   hl   
125B   E5                     PUSH   hl   
125C   E5                     PUSH   hl   
125D   CD 00 10               CALL   run   
1260   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
126B   76                     HALT      
126C                EXPECTM_2947S54:      
126C   E1                     POP   HL   
126D                          ;*Macro unroll:  test "1", 1
126D   31 00 54               LD   SP,STACK   
1270   CD 37 0F               CALL   coldInit   
1273   CD 63 52               CALL   execStr   
1276   31 00                  DB   "1",0   
1278   E1                     POP   HL   
1279   E5                     PUSH   HL   
127A   11 01 00               LD   DE,1   
127D   B7                     OR   A   
127E   ED 52                  SBC   HL,DE   
1280   7D                     LD   A,L   
1281   B4                     OR   H   
1282   CA D3 12               JP   Z,expectM_2948S55   
1285   CD 03 0F               CALL   printStr   
1288   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1290   CD 03 0F               CALL   printStr   
1293   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12A2   21 01 00               LD   hl,1   
12A5   E5                     PUSH   hl   
12A6   E5                     PUSH   hl   
12A7   CD 00 10               CALL   run   
12AA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12B1   CD 03 0F               CALL   printStr   
12B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C1   E1                     POP   hl   
12C2   E5                     PUSH   hl   
12C3   E5                     PUSH   hl   
12C4   CD 00 10               CALL   run   
12C7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
12D2   76                     HALT      
12D3                EXPECTM_2948S55:      
12D3   E1                     POP   HL   
12D4                          ;*Macro unroll:  test "2", 2
12D4   31 00 54               LD   SP,STACK   
12D7   CD 37 0F               CALL   coldInit   
12DA   CD 63 52               CALL   execStr   
12DD   32 00                  DB   "2",0   
12DF   E1                     POP   HL   
12E0   E5                     PUSH   HL   
12E1   11 02 00               LD   DE,2   
12E4   B7                     OR   A   
12E5   ED 52                  SBC   HL,DE   
12E7   7D                     LD   A,L   
12E8   B4                     OR   H   
12E9   CA 3A 13               JP   Z,expectM_2949S56   
12EC   CD 03 0F               CALL   printStr   
12EF   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
12F7   CD 03 0F               CALL   printStr   
12FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1309   21 02 00               LD   hl,2   
130C   E5                     PUSH   hl   
130D   E5                     PUSH   hl   
130E   CD 00 10               CALL   run   
1311   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1318   CD 03 0F               CALL   printStr   
131B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1328   E1                     POP   hl   
1329   E5                     PUSH   hl   
132A   E5                     PUSH   hl   
132B   CD 00 10               CALL   run   
132E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1339   76                     HALT      
133A                EXPECTM_2949S56:      
133A   E1                     POP   HL   
133B                          ;*Macro unroll:  test "1", 1
133B   31 00 54               LD   SP,STACK   
133E   CD 37 0F               CALL   coldInit   
1341   CD 63 52               CALL   execStr   
1344   31 00                  DB   "1",0   
1346   E1                     POP   HL   
1347   E5                     PUSH   HL   
1348   11 01 00               LD   DE,1   
134B   B7                     OR   A   
134C   ED 52                  SBC   HL,DE   
134E   7D                     LD   A,L   
134F   B4                     OR   H   
1350   CA A1 13               JP   Z,expectM_2950S57   
1353   CD 03 0F               CALL   printStr   
1356   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
135E   CD 03 0F               CALL   printStr   
1361   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1370   21 01 00               LD   hl,1   
1373   E5                     PUSH   hl   
1374   E5                     PUSH   hl   
1375   CD 00 10               CALL   run   
1378   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
137F   CD 03 0F               CALL   printStr   
1382   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
138F   E1                     POP   hl   
1390   E5                     PUSH   hl   
1391   E5                     PUSH   hl   
1392   CD 00 10               CALL   run   
1395   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13A0   76                     HALT      
13A1                EXPECTM_2950S57:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "0", 0
13A2   31 00 54               LD   SP,STACK   
13A5   CD 37 0F               CALL   coldInit   
13A8   CD 63 52               CALL   execStr   
13AB   30 00                  DB   "0",0   
13AD   E1                     POP   HL   
13AE   E5                     PUSH   HL   
13AF   11 00 00               LD   DE,0   
13B2   B7                     OR   A   
13B3   ED 52                  SBC   HL,DE   
13B5   7D                     LD   A,L   
13B6   B4                     OR   H   
13B7   CA 08 14               JP   Z,expectM_2951S58   
13BA   CD 03 0F               CALL   printStr   
13BD   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
13C5   CD 03 0F               CALL   printStr   
13C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D7   21 00 00               LD   hl,0   
13DA   E5                     PUSH   hl   
13DB   E5                     PUSH   hl   
13DC   CD 00 10               CALL   run   
13DF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
13E6   CD 03 0F               CALL   printStr   
13E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13F6   E1                     POP   hl   
13F7   E5                     PUSH   hl   
13F8   E5                     PUSH   hl   
13F9   CD 00 10               CALL   run   
13FC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1407   76                     HALT      
1408                EXPECTM_2951S58:      
1408   E1                     POP   HL   
1409                          ;*Macro unroll:  test "10", 10
1409   31 00 54               LD   SP,STACK   
140C   CD 37 0F               CALL   coldInit   
140F   CD 63 52               CALL   execStr   
1412   31 30 00               DB   "10",0   
1415   E1                     POP   HL   
1416   E5                     PUSH   HL   
1417   11 0A 00               LD   DE,10   
141A   B7                     OR   A   
141B   ED 52                  SBC   HL,DE   
141D   7D                     LD   A,L   
141E   B4                     OR   H   
141F   CA 71 14               JP   Z,expectM_2952S59   
1422   CD 03 0F               CALL   printStr   
1425   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
142E   CD 03 0F               CALL   printStr   
1431   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1440   21 0A 00               LD   hl,10   
1443   E5                     PUSH   hl   
1444   E5                     PUSH   hl   
1445   CD 00 10               CALL   run   
1448   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
144F   CD 03 0F               CALL   printStr   
1452   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
145F   E1                     POP   hl   
1460   E5                     PUSH   hl   
1461   E5                     PUSH   hl   
1462   CD 00 10               CALL   run   
1465   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1470   76                     HALT      
1471                EXPECTM_2952S59:      
1471   E1                     POP   HL   
1472                          ;*Macro unroll:  test "123", 123
1472   31 00 54               LD   SP,STACK   
1475   CD 37 0F               CALL   coldInit   
1478   CD 63 52               CALL   execStr   
147B   31 32 33 00            DB   "123",0   
147F   E1                     POP   HL   
1480   E5                     PUSH   HL   
1481   11 7B 00               LD   DE,123   
1484   B7                     OR   A   
1485   ED 52                  SBC   HL,DE   
1487   7D                     LD   A,L   
1488   B4                     OR   H   
1489   CA DC 14               JP   Z,expectM_2953S60   
148C   CD 03 0F               CALL   printStr   
148F   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1499   CD 03 0F               CALL   printStr   
149C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14AB   21 7B 00               LD   hl,123   
14AE   E5                     PUSH   hl   
14AF   E5                     PUSH   hl   
14B0   CD 00 10               CALL   run   
14B3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14BA   CD 03 0F               CALL   printStr   
14BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14CA   E1                     POP   hl   
14CB   E5                     PUSH   hl   
14CC   E5                     PUSH   hl   
14CD   CD 00 10               CALL   run   
14D0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14DB   76                     HALT      
14DC                EXPECTM_2953S60:      
14DC   E1                     POP   HL   
14DD                          ;*Macro unroll:  test "-1",-1
14DD   31 00 54               LD   SP,STACK   
14E0   CD 37 0F               CALL   coldInit   
14E3   CD 63 52               CALL   execStr   
14E6   2D 31 00               DB   "-1",0   
14E9   E1                     POP   HL   
14EA   E5                     PUSH   HL   
14EB   11 FF FF               LD   DE,-1   
14EE   B7                     OR   A   
14EF   ED 52                  SBC   HL,DE   
14F1   7D                     LD   A,L   
14F2   B4                     OR   H   
14F3   CA 45 15               JP   Z,expectM_2954S61   
14F6   CD 03 0F               CALL   printStr   
14F9   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1502   CD 03 0F               CALL   printStr   
1505   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1514   21 FF FF               LD   hl,-1   
1517   E5                     PUSH   hl   
1518   E5                     PUSH   hl   
1519   CD 00 10               CALL   run   
151C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1523   CD 03 0F               CALL   printStr   
1526   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1533   E1                     POP   hl   
1534   E5                     PUSH   hl   
1535   E5                     PUSH   hl   
1536   CD 00 10               CALL   run   
1539   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1544   76                     HALT      
1545                EXPECTM_2954S61:      
1545   E1                     POP   HL   
1546                          ;*Macro unroll:  test "-1/ab",1
1546   31 00 54               LD   SP,STACK   
1549   CD 37 0F               CALL   coldInit   
154C   CD 63 52               CALL   execStr   
154F   2D 31 2F 61 62 00      DB   "-1/ab",0   
1555   E1                     POP   HL   
1556   E5                     PUSH   HL   
1557   11 01 00               LD   DE,1   
155A   B7                     OR   A   
155B   ED 52                  SBC   HL,DE   
155D   7D                     LD   A,L   
155E   B4                     OR   H   
155F   CA B4 15               JP   Z,expectM_2955S62   
1562   CD 03 0F               CALL   printStr   
1565   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
1571   CD 03 0F               CALL   printStr   
1574   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1583   21 01 00               LD   hl,1   
1586   E5                     PUSH   hl   
1587   E5                     PUSH   hl   
1588   CD 00 10               CALL   run   
158B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1592   CD 03 0F               CALL   printStr   
1595   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15A2   E1                     POP   hl   
15A3   E5                     PUSH   hl   
15A4   E5                     PUSH   hl   
15A5   CD 00 10               CALL   run   
15A8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15B3   76                     HALT      
15B4                EXPECTM_2955S62:      
15B4   E1                     POP   HL   
15B5                          ;*Macro unroll:  test "_a", $61
15B5   31 00 54               LD   SP,STACK   
15B8   CD 37 0F               CALL   coldInit   
15BB   CD 63 52               CALL   execStr   
15BE   5F 61 00               DB   "_a",0   
15C1   E1                     POP   HL   
15C2   E5                     PUSH   HL   
15C3   11 61 00               LD   DE,$61   
15C6   B7                     OR   A   
15C7   ED 52                  SBC   HL,DE   
15C9   7D                     LD   A,L   
15CA   B4                     OR   H   
15CB   CA 1D 16               JP   Z,expectM_2956S63   
15CE   CD 03 0F               CALL   printStr   
15D1   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
15DA   CD 03 0F               CALL   printStr   
15DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15EC   21 61 00               LD   hl,$61   
15EF   E5                     PUSH   hl   
15F0   E5                     PUSH   hl   
15F1   CD 00 10               CALL   run   
15F4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
15FB   CD 03 0F               CALL   printStr   
15FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
160B   E1                     POP   hl   
160C   E5                     PUSH   hl   
160D   E5                     PUSH   hl   
160E   CD 00 10               CALL   run   
1611   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
161C   76                     HALT      
161D                EXPECTM_2956S63:      
161D   E1                     POP   HL   
161E                          ;*Macro unroll:  test "__", $5F
161E   31 00 54               LD   SP,STACK   
1621   CD 37 0F               CALL   coldInit   
1624   CD 63 52               CALL   execStr   
1627   5F 5F 00               DB   "__",0   
162A   E1                     POP   HL   
162B   E5                     PUSH   HL   
162C   11 5F 00               LD   DE,$5F   
162F   B7                     OR   A   
1630   ED 52                  SBC   HL,DE   
1632   7D                     LD   A,L   
1633   B4                     OR   H   
1634   CA 86 16               JP   Z,expectM_2957S64   
1637   CD 03 0F               CALL   printStr   
163A   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
1643   CD 03 0F               CALL   printStr   
1646   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1655   21 5F 00               LD   hl,$5F   
1658   E5                     PUSH   hl   
1659   E5                     PUSH   hl   
165A   CD 00 10               CALL   run   
165D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1664   CD 03 0F               CALL   printStr   
1667   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1674   E1                     POP   hl   
1675   E5                     PUSH   hl   
1676   E5                     PUSH   hl   
1677   CD 00 10               CALL   run   
167A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1685   76                     HALT      
1686                EXPECTM_2957S64:      
1686   E1                     POP   HL   
1687                          ;*Macro unroll:  test "$10", $10
1687   31 00 54               LD   SP,STACK   
168A   CD 37 0F               CALL   coldInit   
168D   CD 63 52               CALL   execStr   
1690   24 31 30 00            DB   "$10",0   
1694   E1                     POP   HL   
1695   E5                     PUSH   HL   
1696   11 10 00               LD   DE,$10   
1699   B7                     OR   A   
169A   ED 52                  SBC   HL,DE   
169C   7D                     LD   A,L   
169D   B4                     OR   H   
169E   CA F1 16               JP   Z,expectM_2958S65   
16A1   CD 03 0F               CALL   printStr   
16A4   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
16AE   CD 03 0F               CALL   printStr   
16B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16C0   21 10 00               LD   hl,$10   
16C3   E5                     PUSH   hl   
16C4   E5                     PUSH   hl   
16C5   CD 00 10               CALL   run   
16C8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
16CF   CD 03 0F               CALL   printStr   
16D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16DF   E1                     POP   hl   
16E0   E5                     PUSH   hl   
16E1   E5                     PUSH   hl   
16E2   CD 00 10               CALL   run   
16E5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
16F0   76                     HALT      
16F1                EXPECTM_2958S65:      
16F1   E1                     POP   HL   
16F2                          ;*Macro unroll:  test "$FF", $FF
16F2   31 00 54               LD   SP,STACK   
16F5   CD 37 0F               CALL   coldInit   
16F8   CD 63 52               CALL   execStr   
16FB   24 46 46 00            DB   "$FF",0   
16FF   E1                     POP   HL   
1700   E5                     PUSH   HL   
1701   11 FF 00               LD   DE,$FF   
1704   B7                     OR   A   
1705   ED 52                  SBC   HL,DE   
1707   7D                     LD   A,L   
1708   B4                     OR   H   
1709   CA 5C 17               JP   Z,expectM_2959S66   
170C   CD 03 0F               CALL   printStr   
170F   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1719   CD 03 0F               CALL   printStr   
171C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
172B   21 FF 00               LD   hl,$FF   
172E   E5                     PUSH   hl   
172F   E5                     PUSH   hl   
1730   CD 00 10               CALL   run   
1733   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
173A   CD 03 0F               CALL   printStr   
173D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
174A   E1                     POP   hl   
174B   E5                     PUSH   hl   
174C   E5                     PUSH   hl   
174D   CD 00 10               CALL   run   
1750   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
175B   76                     HALT      
175C                EXPECTM_2959S66:      
175C   E1                     POP   HL   
175D                          ;*Macro unroll:  test "-1 2 +",1
175D   31 00 54               LD   SP,STACK   
1760   CD 37 0F               CALL   coldInit   
1763   CD 63 52               CALL   execStr   
1766   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
176D   E1                     POP   HL   
176E   E5                     PUSH   HL   
176F   11 01 00               LD   DE,1   
1772   B7                     OR   A   
1773   ED 52                  SBC   HL,DE   
1775   7D                     LD   A,L   
1776   B4                     OR   H   
1777   CA CD 17               JP   Z,expectM_2960S67   
177A   CD 03 0F               CALL   printStr   
177D   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
178A   CD 03 0F               CALL   printStr   
178D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
179C   21 01 00               LD   hl,1   
179F   E5                     PUSH   hl   
17A0   E5                     PUSH   hl   
17A1   CD 00 10               CALL   run   
17A4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17AB   CD 03 0F               CALL   printStr   
17AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17BB   E1                     POP   hl   
17BC   E5                     PUSH   hl   
17BD   E5                     PUSH   hl   
17BE   CD 00 10               CALL   run   
17C1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
17CC   76                     HALT      
17CD                EXPECTM_2960S67:      
17CD   E1                     POP   HL   
17CE                          ;*Macro unroll:  test "-1 1 +",0
17CE   31 00 54               LD   SP,STACK   
17D1   CD 37 0F               CALL   coldInit   
17D4   CD 63 52               CALL   execStr   
17D7   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17DE   E1                     POP   HL   
17DF   E5                     PUSH   HL   
17E0   11 00 00               LD   DE,0   
17E3   B7                     OR   A   
17E4   ED 52                  SBC   HL,DE   
17E6   7D                     LD   A,L   
17E7   B4                     OR   H   
17E8   CA 3E 18               JP   Z,expectM_2961S68   
17EB   CD 03 0F               CALL   printStr   
17EE   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
17FB   CD 03 0F               CALL   printStr   
17FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
180D   21 00 00               LD   hl,0   
1810   E5                     PUSH   hl   
1811   E5                     PUSH   hl   
1812   CD 00 10               CALL   run   
1815   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
181C   CD 03 0F               CALL   printStr   
181F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
182C   E1                     POP   hl   
182D   E5                     PUSH   hl   
182E   E5                     PUSH   hl   
182F   CD 00 10               CALL   run   
1832   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
183D   76                     HALT      
183E                EXPECTM_2961S68:      
183E   E1                     POP   HL   
183F                          ;*Macro unroll:  test "1 2 +", 3
183F   31 00 54               LD   SP,STACK   
1842   CD 37 0F               CALL   coldInit   
1845   CD 63 52               CALL   execStr   
1848   31 20 32 20 2B 00      DB   "1 2 +",0   
184E   E1                     POP   HL   
184F   E5                     PUSH   HL   
1850   11 03 00               LD   DE,3   
1853   B7                     OR   A   
1854   ED 52                  SBC   HL,DE   
1856   7D                     LD   A,L   
1857   B4                     OR   H   
1858   CA AD 18               JP   Z,expectM_2962S69   
185B   CD 03 0F               CALL   printStr   
185E   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
186A   CD 03 0F               CALL   printStr   
186D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
187C   21 03 00               LD   hl,3   
187F   E5                     PUSH   hl   
1880   E5                     PUSH   hl   
1881   CD 00 10               CALL   run   
1884   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
188B   CD 03 0F               CALL   printStr   
188E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
189B   E1                     POP   hl   
189C   E5                     PUSH   hl   
189D   E5                     PUSH   hl   
189E   CD 00 10               CALL   run   
18A1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18AC   76                     HALT      
18AD                EXPECTM_2962S69:      
18AD   E1                     POP   HL   
18AE                          ;*Macro unroll:  test "4 1 2 +", 3
18AE   31 00 54               LD   SP,STACK   
18B1   CD 37 0F               CALL   coldInit   
18B4   CD 63 52               CALL   execStr   
18B7   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18BF   E1                     POP   HL   
18C0   E5                     PUSH   HL   
18C1   11 03 00               LD   DE,3   
18C4   B7                     OR   A   
18C5   ED 52                  SBC   HL,DE   
18C7   7D                     LD   A,L   
18C8   B4                     OR   H   
18C9   CA 20 19               JP   Z,expectM_2963S70   
18CC   CD 03 0F               CALL   printStr   
18CF   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18DD   CD 03 0F               CALL   printStr   
18E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18EF   21 03 00               LD   hl,3   
18F2   E5                     PUSH   hl   
18F3   E5                     PUSH   hl   
18F4   CD 00 10               CALL   run   
18F7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
18FE   CD 03 0F               CALL   printStr   
1901   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
190E   E1                     POP   hl   
190F   E5                     PUSH   hl   
1910   E5                     PUSH   hl   
1911   CD 00 10               CALL   run   
1914   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
191F   76                     HALT      
1920                EXPECTM_2963S70:      
1920   E1                     POP   HL   
1921                          ;*Macro unroll:  test "123 456 +", 123+456
1921   31 00 54               LD   SP,STACK   
1924   CD 37 0F               CALL   coldInit   
1927   CD 63 52               CALL   execStr   
192A   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1934   E1                     POP   HL   
1935   E5                     PUSH   HL   
1936   11 43 02               LD   DE,123+456   
1939   B7                     OR   A   
193A   ED 52                  SBC   HL,DE   
193C   7D                     LD   A,L   
193D   B4                     OR   H   
193E   CA 97 19               JP   Z,expectM_2964S71   
1941   CD 03 0F               CALL   printStr   
1944   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1954   CD 03 0F               CALL   printStr   
1957   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1966   21 43 02               LD   hl,123+456   
1969   E5                     PUSH   hl   
196A   E5                     PUSH   hl   
196B   CD 00 10               CALL   run   
196E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1975   CD 03 0F               CALL   printStr   
1978   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1985   E1                     POP   hl   
1986   E5                     PUSH   hl   
1987   E5                     PUSH   hl   
1988   CD 00 10               CALL   run   
198B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1996   76                     HALT      
1997                EXPECTM_2964S71:      
1997   E1                     POP   HL   
1998                          ;*Macro unroll:  test "64 128 +", 64+128
1998   31 00 54               LD   SP,STACK   
199B   CD 37 0F               CALL   coldInit   
199E   CD 63 52               CALL   execStr   
19A1   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19AA   E1                     POP   HL   
19AB   E5                     PUSH   HL   
19AC   11 C0 00               LD   DE,64+128   
19AF   B7                     OR   A   
19B0   ED 52                  SBC   HL,DE   
19B2   7D                     LD   A,L   
19B3   B4                     OR   H   
19B4   CA 0C 1A               JP   Z,expectM_2965S72   
19B7   CD 03 0F               CALL   printStr   
19BA   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
19C9   CD 03 0F               CALL   printStr   
19CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19DB   21 C0 00               LD   hl,64+128   
19DE   E5                     PUSH   hl   
19DF   E5                     PUSH   hl   
19E0   CD 00 10               CALL   run   
19E3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
19EA   CD 03 0F               CALL   printStr   
19ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19FA   E1                     POP   hl   
19FB   E5                     PUSH   hl   
19FC   E5                     PUSH   hl   
19FD   CD 00 10               CALL   run   
1A00   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A0B   76                     HALT      
1A0C                EXPECTM_2965S72:      
1A0C   E1                     POP   HL   
1A0D                          ;*Macro unroll:  test "1 2 +", 3
1A0D   31 00 54               LD   SP,STACK   
1A10   CD 37 0F               CALL   coldInit   
1A13   CD 63 52               CALL   execStr   
1A16   31 20 32 20 2B 00      DB   "1 2 +",0   
1A1C   E1                     POP   HL   
1A1D   E5                     PUSH   HL   
1A1E   11 03 00               LD   DE,3   
1A21   B7                     OR   A   
1A22   ED 52                  SBC   HL,DE   
1A24   7D                     LD   A,L   
1A25   B4                     OR   H   
1A26   CA 7B 1A               JP   Z,expectM_2966S73   
1A29   CD 03 0F               CALL   printStr   
1A2C   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A38   CD 03 0F               CALL   printStr   
1A3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4A   21 03 00               LD   hl,3   
1A4D   E5                     PUSH   hl   
1A4E   E5                     PUSH   hl   
1A4F   CD 00 10               CALL   run   
1A52   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A59   CD 03 0F               CALL   printStr   
1A5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A69   E1                     POP   hl   
1A6A   E5                     PUSH   hl   
1A6B   E5                     PUSH   hl   
1A6C   CD 00 10               CALL   run   
1A6F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A7A   76                     HALT      
1A7B                EXPECTM_2966S73:      
1A7B   E1                     POP   HL   
1A7C                          ;*Macro unroll:  test "1a= a++ a",2
1A7C   31 00 54               LD   SP,STACK   
1A7F   CD 37 0F               CALL   coldInit   
1A82   CD 63 52               CALL   execStr   
1A85   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A8F   E1                     POP   HL   
1A90   E5                     PUSH   HL   
1A91   11 02 00               LD   DE,2   
1A94   B7                     OR   A   
1A95   ED 52                  SBC   HL,DE   
1A97   7D                     LD   A,L   
1A98   B4                     OR   H   
1A99   CA F2 1A               JP   Z,expectM_2967S74   
1A9C   CD 03 0F               CALL   printStr   
1A9F   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1AAF   CD 03 0F               CALL   printStr   
1AB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC1   21 02 00               LD   hl,2   
1AC4   E5                     PUSH   hl   
1AC5   E5                     PUSH   hl   
1AC6   CD 00 10               CALL   run   
1AC9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AD0   CD 03 0F               CALL   printStr   
1AD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AE0   E1                     POP   hl   
1AE1   E5                     PUSH   hl   
1AE2   E5                     PUSH   hl   
1AE3   CD 00 10               CALL   run   
1AE6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1AF1   76                     HALT      
1AF2                EXPECTM_2967S74:      
1AF2   E1                     POP   HL   
1AF3                          ;*Macro unroll:  test "-1 -1 -",0
1AF3   31 00 54               LD   SP,STACK   
1AF6   CD 37 0F               CALL   coldInit   
1AF9   CD 63 52               CALL   execStr   
1AFC   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1B04   E1                     POP   HL   
1B05   E5                     PUSH   HL   
1B06   11 00 00               LD   DE,0   
1B09   B7                     OR   A   
1B0A   ED 52                  SBC   HL,DE   
1B0C   7D                     LD   A,L   
1B0D   B4                     OR   H   
1B0E   CA 65 1B               JP   Z,expectM_2968S75   
1B11   CD 03 0F               CALL   printStr   
1B14   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B22   CD 03 0F               CALL   printStr   
1B25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B34   21 00 00               LD   hl,0   
1B37   E5                     PUSH   hl   
1B38   E5                     PUSH   hl   
1B39   CD 00 10               CALL   run   
1B3C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B43   CD 03 0F               CALL   printStr   
1B46   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B53   E1                     POP   hl   
1B54   E5                     PUSH   hl   
1B55   E5                     PUSH   hl   
1B56   CD 00 10               CALL   run   
1B59   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B64   76                     HALT      
1B65                EXPECTM_2968S75:      
1B65   E1                     POP   HL   
1B66                          ;*Macro unroll:  test "5 3 -", 2
1B66   31 00 54               LD   SP,STACK   
1B69   CD 37 0F               CALL   coldInit   
1B6C   CD 63 52               CALL   execStr   
1B6F   35 20 33 20 2D 00      DB   "5 3 -",0   
1B75   E1                     POP   HL   
1B76   E5                     PUSH   HL   
1B77   11 02 00               LD   DE,2   
1B7A   B7                     OR   A   
1B7B   ED 52                  SBC   HL,DE   
1B7D   7D                     LD   A,L   
1B7E   B4                     OR   H   
1B7F   CA D4 1B               JP   Z,expectM_2969S76   
1B82   CD 03 0F               CALL   printStr   
1B85   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1B91   CD 03 0F               CALL   printStr   
1B94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA3   21 02 00               LD   hl,2   
1BA6   E5                     PUSH   hl   
1BA7   E5                     PUSH   hl   
1BA8   CD 00 10               CALL   run   
1BAB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BB2   CD 03 0F               CALL   printStr   
1BB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BC2   E1                     POP   hl   
1BC3   E5                     PUSH   hl   
1BC4   E5                     PUSH   hl   
1BC5   CD 00 10               CALL   run   
1BC8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BD3   76                     HALT      
1BD4                EXPECTM_2969S76:      
1BD4   E1                     POP   HL   
1BD5                          ;*Macro unroll:  test "2 1 -",1
1BD5   31 00 54               LD   SP,STACK   
1BD8   CD 37 0F               CALL   coldInit   
1BDB   CD 63 52               CALL   execStr   
1BDE   32 20 31 20 2D 00      DB   "2 1 -",0   
1BE4   E1                     POP   HL   
1BE5   E5                     PUSH   HL   
1BE6   11 01 00               LD   DE,1   
1BE9   B7                     OR   A   
1BEA   ED 52                  SBC   HL,DE   
1BEC   7D                     LD   A,L   
1BED   B4                     OR   H   
1BEE   CA 43 1C               JP   Z,expectM_2970S77   
1BF1   CD 03 0F               CALL   printStr   
1BF4   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C00   CD 03 0F               CALL   printStr   
1C03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C12   21 01 00               LD   hl,1   
1C15   E5                     PUSH   hl   
1C16   E5                     PUSH   hl   
1C17   CD 00 10               CALL   run   
1C1A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C21   CD 03 0F               CALL   printStr   
1C24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C31   E1                     POP   hl   
1C32   E5                     PUSH   hl   
1C33   E5                     PUSH   hl   
1C34   CD 00 10               CALL   run   
1C37   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C42   76                     HALT      
1C43                EXPECTM_2970S77:      
1C43   E1                     POP   HL   
1C44                          ;*Macro unroll:  test "3a= a-- a",2
1C44   31 00 54               LD   SP,STACK   
1C47   CD 37 0F               CALL   coldInit   
1C4A   CD 63 52               CALL   execStr   
1C4D   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C57   E1                     POP   HL   
1C58   E5                     PUSH   HL   
1C59   11 02 00               LD   DE,2   
1C5C   B7                     OR   A   
1C5D   ED 52                  SBC   HL,DE   
1C5F   7D                     LD   A,L   
1C60   B4                     OR   H   
1C61   CA BA 1C               JP   Z,expectM_2971S78   
1C64   CD 03 0F               CALL   printStr   
1C67   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C77   CD 03 0F               CALL   printStr   
1C7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C89   21 02 00               LD   hl,2   
1C8C   E5                     PUSH   hl   
1C8D   E5                     PUSH   hl   
1C8E   CD 00 10               CALL   run   
1C91   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C98   CD 03 0F               CALL   printStr   
1C9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CA8   E1                     POP   hl   
1CA9   E5                     PUSH   hl   
1CAA   E5                     PUSH   hl   
1CAB   CD 00 10               CALL   run   
1CAE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CB9   76                     HALT      
1CBA                EXPECTM_2971S78:      
1CBA   E1                     POP   HL   
1CBB                          ;*Macro unroll:  test "3 5 &", 1
1CBB   31 00 54               LD   SP,STACK   
1CBE   CD 37 0F               CALL   coldInit   
1CC1   CD 63 52               CALL   execStr   
1CC4   33 20 35 20 26 00      DB   "3 5 &",0   
1CCA   E1                     POP   HL   
1CCB   E5                     PUSH   HL   
1CCC   11 01 00               LD   DE,1   
1CCF   B7                     OR   A   
1CD0   ED 52                  SBC   HL,DE   
1CD2   7D                     LD   A,L   
1CD3   B4                     OR   H   
1CD4   CA 29 1D               JP   Z,expectM_2972S79   
1CD7   CD 03 0F               CALL   printStr   
1CDA   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1CE6   CD 03 0F               CALL   printStr   
1CE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF8   21 01 00               LD   hl,1   
1CFB   E5                     PUSH   hl   
1CFC   E5                     PUSH   hl   
1CFD   CD 00 10               CALL   run   
1D00   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D07   CD 03 0F               CALL   printStr   
1D0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D17   E1                     POP   hl   
1D18   E5                     PUSH   hl   
1D19   E5                     PUSH   hl   
1D1A   CD 00 10               CALL   run   
1D1D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D28   76                     HALT      
1D29                EXPECTM_2972S79:      
1D29   E1                     POP   HL   
1D2A                          ;*Macro unroll:  test "3 5 |", 7
1D2A   31 00 54               LD   SP,STACK   
1D2D   CD 37 0F               CALL   coldInit   
1D30   CD 63 52               CALL   execStr   
1D33   33 20 35 20 7C 00      DB   "3 5 |",0   
1D39   E1                     POP   HL   
1D3A   E5                     PUSH   HL   
1D3B   11 07 00               LD   DE,7   
1D3E   B7                     OR   A   
1D3F   ED 52                  SBC   HL,DE   
1D41   7D                     LD   A,L   
1D42   B4                     OR   H   
1D43   CA 98 1D               JP   Z,expectM_2973S80   
1D46   CD 03 0F               CALL   printStr   
1D49   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D55   CD 03 0F               CALL   printStr   
1D58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D67   21 07 00               LD   hl,7   
1D6A   E5                     PUSH   hl   
1D6B   E5                     PUSH   hl   
1D6C   CD 00 10               CALL   run   
1D6F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D76   CD 03 0F               CALL   printStr   
1D79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D86   E1                     POP   hl   
1D87   E5                     PUSH   hl   
1D88   E5                     PUSH   hl   
1D89   CD 00 10               CALL   run   
1D8C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D97   76                     HALT      
1D98                EXPECTM_2973S80:      
1D98   E1                     POP   HL   
1D99                          ;*Macro unroll:  test "3 5 /x", 6
1D99   31 00 54               LD   SP,STACK   
1D9C   CD 37 0F               CALL   coldInit   
1D9F   CD 63 52               CALL   execStr   
1DA2   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1DA9   E1                     POP   HL   
1DAA   E5                     PUSH   HL   
1DAB   11 06 00               LD   DE,6   
1DAE   B7                     OR   A   
1DAF   ED 52                  SBC   HL,DE   
1DB1   7D                     LD   A,L   
1DB2   B4                     OR   H   
1DB3   CA 09 1E               JP   Z,expectM_2974S81   
1DB6   CD 03 0F               CALL   printStr   
1DB9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1DC6   CD 03 0F               CALL   printStr   
1DC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD8   21 06 00               LD   hl,6   
1DDB   E5                     PUSH   hl   
1DDC   E5                     PUSH   hl   
1DDD   CD 00 10               CALL   run   
1DE0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DE7   CD 03 0F               CALL   printStr   
1DEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF7   E1                     POP   hl   
1DF8   E5                     PUSH   hl   
1DF9   E5                     PUSH   hl   
1DFA   CD 00 10               CALL   run   
1DFD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E08   76                     HALT      
1E09                EXPECTM_2974S81:      
1E09   E1                     POP   HL   
1E0A                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1E0A   31 00 54               LD   SP,STACK   
1E0D   CD 37 0F               CALL   coldInit   
1E10   CD 63 52               CALL   execStr   
1E13   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E22   E1                     POP   HL   
1E23   E5                     PUSH   HL   
1E24   11 06 00               LD   DE,6   
1E27   B7                     OR   A   
1E28   ED 52                  SBC   HL,DE   
1E2A   7D                     LD   A,L   
1E2B   B4                     OR   H   
1E2C   CA 8A 1E               JP   Z,expectM_2975S82   
1E2F   CD 03 0F               CALL   printStr   
1E32   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E47   CD 03 0F               CALL   printStr   
1E4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E59   21 06 00               LD   hl,6   
1E5C   E5                     PUSH   hl   
1E5D   E5                     PUSH   hl   
1E5E   CD 00 10               CALL   run   
1E61   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E68   CD 03 0F               CALL   printStr   
1E6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E78   E1                     POP   hl   
1E79   E5                     PUSH   hl   
1E7A   E5                     PUSH   hl   
1E7B   CD 00 10               CALL   run   
1E7E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E89   76                     HALT      
1E8A                EXPECTM_2975S82:      
1E8A   E1                     POP   HL   
1E8B                          ;*Macro unroll:  test "0 !", true
1E8B   31 00 54               LD   SP,STACK   
1E8E   CD 37 0F               CALL   coldInit   
1E91   CD 63 52               CALL   execStr   
1E94   30 20 21 00            DB   "0 !",0   
1E98   E1                     POP   HL   
1E99   E5                     PUSH   HL   
1E9A   11 FF FF               LD   DE,true   
1E9D   B7                     OR   A   
1E9E   ED 52                  SBC   HL,DE   
1EA0   7D                     LD   A,L   
1EA1   B4                     OR   H   
1EA2   CA F5 1E               JP   Z,expectM_2976S83   
1EA5   CD 03 0F               CALL   printStr   
1EA8   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1EB2   CD 03 0F               CALL   printStr   
1EB5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EC4   21 FF FF               LD   hl,true   
1EC7   E5                     PUSH   hl   
1EC8   E5                     PUSH   hl   
1EC9   CD 00 10               CALL   run   
1ECC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1ED3   CD 03 0F               CALL   printStr   
1ED6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EE3   E1                     POP   hl   
1EE4   E5                     PUSH   hl   
1EE5   E5                     PUSH   hl   
1EE6   CD 00 10               CALL   run   
1EE9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1EF4   76                     HALT      
1EF5                EXPECTM_2976S83:      
1EF5   E1                     POP   HL   
1EF6                          ;*Macro unroll:  test "2 !", false
1EF6   31 00 54               LD   SP,STACK   
1EF9   CD 37 0F               CALL   coldInit   
1EFC   CD 63 52               CALL   execStr   
1EFF   32 20 21 00            DB   "2 !",0   
1F03   E1                     POP   HL   
1F04   E5                     PUSH   HL   
1F05   11 00 00               LD   DE,false   
1F08   B7                     OR   A   
1F09   ED 52                  SBC   HL,DE   
1F0B   7D                     LD   A,L   
1F0C   B4                     OR   H   
1F0D   CA 60 1F               JP   Z,expectM_2977S84   
1F10   CD 03 0F               CALL   printStr   
1F13   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
1F1D   CD 03 0F               CALL   printStr   
1F20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F2F   21 00 00               LD   hl,false   
1F32   E5                     PUSH   hl   
1F33   E5                     PUSH   hl   
1F34   CD 00 10               CALL   run   
1F37   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F3E   CD 03 0F               CALL   printStr   
1F41   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F4E   E1                     POP   hl   
1F4F   E5                     PUSH   hl   
1F50   E5                     PUSH   hl   
1F51   CD 00 10               CALL   run   
1F54   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F5F   76                     HALT      
1F60                EXPECTM_2977S84:      
1F60   E1                     POP   HL   
1F61                          ;*Macro unroll:  test "0 !!", false
1F61   31 00 54               LD   SP,STACK   
1F64   CD 37 0F               CALL   coldInit   
1F67   CD 63 52               CALL   execStr   
1F6A   30 20 21 21 00         DB   "0 !!",0   
1F6F   E1                     POP   HL   
1F70   E5                     PUSH   HL   
1F71   11 00 00               LD   DE,false   
1F74   B7                     OR   A   
1F75   ED 52                  SBC   HL,DE   
1F77   7D                     LD   A,L   
1F78   B4                     OR   H   
1F79   CA CD 1F               JP   Z,expectM_2978S85   
1F7C   CD 03 0F               CALL   printStr   
1F7F   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
1F8A   CD 03 0F               CALL   printStr   
1F8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F9C   21 00 00               LD   hl,false   
1F9F   E5                     PUSH   hl   
1FA0   E5                     PUSH   hl   
1FA1   CD 00 10               CALL   run   
1FA4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1FAB   CD 03 0F               CALL   printStr   
1FAE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FBB   E1                     POP   hl   
1FBC   E5                     PUSH   hl   
1FBD   E5                     PUSH   hl   
1FBE   CD 00 10               CALL   run   
1FC1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1FCC   76                     HALT      
1FCD                EXPECTM_2978S85:      
1FCD   E1                     POP   HL   
1FCE                          ;*Macro unroll:  test "2 !!", true
1FCE   31 00 54               LD   SP,STACK   
1FD1   CD 37 0F               CALL   coldInit   
1FD4   CD 63 52               CALL   execStr   
1FD7   32 20 21 21 00         DB   "2 !!",0   
1FDC   E1                     POP   HL   
1FDD   E5                     PUSH   HL   
1FDE   11 FF FF               LD   DE,true   
1FE1   B7                     OR   A   
1FE2   ED 52                  SBC   HL,DE   
1FE4   7D                     LD   A,L   
1FE5   B4                     OR   H   
1FE6   CA 3A 20               JP   Z,expectM_2979S86   
1FE9   CD 03 0F               CALL   printStr   
1FEC   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
1FF7   CD 03 0F               CALL   printStr   
1FFA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2009   21 FF FF               LD   hl,true   
200C   E5                     PUSH   hl   
200D   E5                     PUSH   hl   
200E   CD 00 10               CALL   run   
2011   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2018   CD 03 0F               CALL   printStr   
201B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2028   E1                     POP   hl   
2029   E5                     PUSH   hl   
202A   E5                     PUSH   hl   
202B   CD 00 10               CALL   run   
202E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2039   76                     HALT      
203A                EXPECTM_2979S86:      
203A   E1                     POP   HL   
203B                          ;*Macro unroll:  test "2 3 *", 6
203B   31 00 54               LD   SP,STACK   
203E   CD 37 0F               CALL   coldInit   
2041   CD 63 52               CALL   execStr   
2044   32 20 33 20 2A 00      DB   "2 3 *",0   
204A   E1                     POP   HL   
204B   E5                     PUSH   HL   
204C   11 06 00               LD   DE,6   
204F   B7                     OR   A   
2050   ED 52                  SBC   HL,DE   
2052   7D                     LD   A,L   
2053   B4                     OR   H   
2054   CA A9 20               JP   Z,expectM_2980S87   
2057   CD 03 0F               CALL   printStr   
205A   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
2066   CD 03 0F               CALL   printStr   
2069   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2078   21 06 00               LD   hl,6   
207B   E5                     PUSH   hl   
207C   E5                     PUSH   hl   
207D   CD 00 10               CALL   run   
2080   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2087   CD 03 0F               CALL   printStr   
208A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2097   E1                     POP   hl   
2098   E5                     PUSH   hl   
2099   E5                     PUSH   hl   
209A   CD 00 10               CALL   run   
209D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
20A8   76                     HALT      
20A9                EXPECTM_2980S87:      
20A9   E1                     POP   HL   
20AA                          ;*Macro unroll:  test "1 2 3 + *", 5
20AA   31 00 54               LD   SP,STACK   
20AD   CD 37 0F               CALL   coldInit   
20B0   CD 63 52               CALL   execStr   
20B3   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
20BD   E1                     POP   HL   
20BE   E5                     PUSH   HL   
20BF   11 05 00               LD   DE,5   
20C2   B7                     OR   A   
20C3   ED 52                  SBC   HL,DE   
20C5   7D                     LD   A,L   
20C6   B4                     OR   H   
20C7   CA 20 21               JP   Z,expectM_2981S88   
20CA   CD 03 0F               CALL   printStr   
20CD   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
20DD   CD 03 0F               CALL   printStr   
20E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20EF   21 05 00               LD   hl,5   
20F2   E5                     PUSH   hl   
20F3   E5                     PUSH   hl   
20F4   CD 00 10               CALL   run   
20F7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
20FE   CD 03 0F               CALL   printStr   
2101   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
210E   E1                     POP   hl   
210F   E5                     PUSH   hl   
2110   E5                     PUSH   hl   
2111   CD 00 10               CALL   run   
2114   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
211F   76                     HALT      
2120                EXPECTM_2981S88:      
2120   E1                     POP   HL   
2121                          ;*Macro unroll:  test "7 3 /", 2
2121   31 00 54               LD   SP,STACK   
2124   CD 37 0F               CALL   coldInit   
2127   CD 63 52               CALL   execStr   
212A   37 20 33 20 2F 00      DB   "7 3 /",0   
2130   E1                     POP   HL   
2131   E5                     PUSH   HL   
2132   11 02 00               LD   DE,2   
2135   B7                     OR   A   
2136   ED 52                  SBC   HL,DE   
2138   7D                     LD   A,L   
2139   B4                     OR   H   
213A   CA 8F 21               JP   Z,expectM_2982S89   
213D   CD 03 0F               CALL   printStr   
2140   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
214C   CD 03 0F               CALL   printStr   
214F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
215E   21 02 00               LD   hl,2   
2161   E5                     PUSH   hl   
2162   E5                     PUSH   hl   
2163   CD 00 10               CALL   run   
2166   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
216D   CD 03 0F               CALL   printStr   
2170   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
217D   E1                     POP   hl   
217E   E5                     PUSH   hl   
217F   E5                     PUSH   hl   
2180   CD 00 10               CALL   run   
2183   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
218E   76                     HALT      
218F                EXPECTM_2982S89:      
218F   E1                     POP   HL   
2190                          ;*Macro unroll:  test "100a= 1a+= a", 101
2190   31 00 54               LD   SP,STACK   
2193   CD 37 0F               CALL   coldInit   
2196   CD 63 52               CALL   execStr   
2199   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
21A6   E1                     POP   HL   
21A7   E5                     PUSH   HL   
21A8   11 65 00               LD   DE,101   
21AB   B7                     OR   A   
21AC   ED 52                  SBC   HL,DE   
21AE   7D                     LD   A,L   
21AF   B4                     OR   H   
21B0   CA 0C 22               JP   Z,expectM_2983S90   
21B3   CD 03 0F               CALL   printStr   
21B6   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
21C9   CD 03 0F               CALL   printStr   
21CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21DB   21 65 00               LD   hl,101   
21DE   E5                     PUSH   hl   
21DF   E5                     PUSH   hl   
21E0   CD 00 10               CALL   run   
21E3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
21EA   CD 03 0F               CALL   printStr   
21ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21FA   E1                     POP   hl   
21FB   E5                     PUSH   hl   
21FC   E5                     PUSH   hl   
21FD   CD 00 10               CALL   run   
2200   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
220B   76                     HALT      
220C                EXPECTM_2983S90:      
220C   E1                     POP   HL   
220D                          ;*Macro unroll:  test "100a= 1a-= a", 99
220D   31 00 54               LD   SP,STACK   
2210   CD 37 0F               CALL   coldInit   
2213   CD 63 52               CALL   execStr   
2216   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
2223   E1                     POP   HL   
2224   E5                     PUSH   HL   
2225   11 63 00               LD   DE,99   
2228   B7                     OR   A   
2229   ED 52                  SBC   HL,DE   
222B   7D                     LD   A,L   
222C   B4                     OR   H   
222D   CA 89 22               JP   Z,expectM_2984S91   
2230   CD 03 0F               CALL   printStr   
2233   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
2246   CD 03 0F               CALL   printStr   
2249   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2258   21 63 00               LD   hl,99   
225B   E5                     PUSH   hl   
225C   E5                     PUSH   hl   
225D   CD 00 10               CALL   run   
2260   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2267   CD 03 0F               CALL   printStr   
226A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2277   E1                     POP   hl   
2278   E5                     PUSH   hl   
2279   E5                     PUSH   hl   
227A   CD 00 10               CALL   run   
227D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2288   76                     HALT      
2289                EXPECTM_2984S91:      
2289   E1                     POP   HL   
228A                          ;*Macro unroll:  test "100a= 2a*= a", 200
228A   31 00 54               LD   SP,STACK   
228D   CD 37 0F               CALL   coldInit   
2290   CD 63 52               CALL   execStr   
2293   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
22A0   E1                     POP   HL   
22A1   E5                     PUSH   HL   
22A2   11 C8 00               LD   DE,200   
22A5   B7                     OR   A   
22A6   ED 52                  SBC   HL,DE   
22A8   7D                     LD   A,L   
22A9   B4                     OR   H   
22AA   CA 06 23               JP   Z,expectM_2985S92   
22AD   CD 03 0F               CALL   printStr   
22B0   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
22C3   CD 03 0F               CALL   printStr   
22C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D5   21 C8 00               LD   hl,200   
22D8   E5                     PUSH   hl   
22D9   E5                     PUSH   hl   
22DA   CD 00 10               CALL   run   
22DD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
22E4   CD 03 0F               CALL   printStr   
22E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22F4   E1                     POP   hl   
22F5   E5                     PUSH   hl   
22F6   E5                     PUSH   hl   
22F7   CD 00 10               CALL   run   
22FA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2305   76                     HALT      
2306                EXPECTM_2985S92:      
2306   E1                     POP   HL   
2307                          ;*Macro unroll:  test "100a= 2 a/= a", 50
2307   31 00 54               LD   SP,STACK   
230A   CD 37 0F               CALL   coldInit   
230D   CD 63 52               CALL   execStr   
2310   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
231E   E1                     POP   HL   
231F   E5                     PUSH   HL   
2320   11 32 00               LD   DE,50   
2323   B7                     OR   A   
2324   ED 52                  SBC   HL,DE   
2326   7D                     LD   A,L   
2327   B4                     OR   H   
2328   CA 85 23               JP   Z,expectM_2986S93   
232B   CD 03 0F               CALL   printStr   
232E   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2342   CD 03 0F               CALL   printStr   
2345   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2354   21 32 00               LD   hl,50   
2357   E5                     PUSH   hl   
2358   E5                     PUSH   hl   
2359   CD 00 10               CALL   run   
235C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2363   CD 03 0F               CALL   printStr   
2366   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2373   E1                     POP   hl   
2374   E5                     PUSH   hl   
2375   E5                     PUSH   hl   
2376   CD 00 10               CALL   run   
2379   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2384   76                     HALT      
2385                EXPECTM_2986S93:      
2385   E1                     POP   HL   
2386                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
2386   31 00 54               LD   SP,STACK   
2389   CD 37 0F               CALL   coldInit   
238C   CD 63 52               CALL   execStr   
238F   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
239F   E1                     POP   HL   
23A0   E5                     PUSH   HL   
23A1   11 05 00               LD   DE,5   
23A4   B7                     OR   A   
23A5   ED 52                  SBC   HL,DE   
23A7   7D                     LD   A,L   
23A8   B4                     OR   H   
23A9   CA 08 24               JP   Z,expectM_2987S94   
23AC   CD 03 0F               CALL   printStr   
23AF   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
23C5   CD 03 0F               CALL   printStr   
23C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D7   21 05 00               LD   hl,5   
23DA   E5                     PUSH   hl   
23DB   E5                     PUSH   hl   
23DC   CD 00 10               CALL   run   
23DF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23E6   CD 03 0F               CALL   printStr   
23E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F6   E1                     POP   hl   
23F7   E5                     PUSH   hl   
23F8   E5                     PUSH   hl   
23F9   CD 00 10               CALL   run   
23FC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2407   76                     HALT      
2408                EXPECTM_2987S94:      
2408   E1                     POP   HL   
2409                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
2409   31 00 54               LD   SP,STACK   
240C   CD 37 0F               CALL   coldInit   
240F   CD 63 52               CALL   execStr   
2412   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2422   E1                     POP   HL   
2423   E5                     PUSH   HL   
2424   11 01 00               LD   DE,1   
2427   B7                     OR   A   
2428   ED 52                  SBC   HL,DE   
242A   7D                     LD   A,L   
242B   B4                     OR   H   
242C   CA 8B 24               JP   Z,expectM_2988S95   
242F   CD 03 0F               CALL   printStr   
2432   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
2448   CD 03 0F               CALL   printStr   
244B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
245A   21 01 00               LD   hl,1   
245D   E5                     PUSH   hl   
245E   E5                     PUSH   hl   
245F   CD 00 10               CALL   run   
2462   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2469   CD 03 0F               CALL   printStr   
246C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2479   E1                     POP   hl   
247A   E5                     PUSH   hl   
247B   E5                     PUSH   hl   
247C   CD 00 10               CALL   run   
247F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
248A   76                     HALT      
248B                EXPECTM_2988S95:      
248B   E1                     POP   HL   
248C                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
248C   31 00 54               LD   SP,STACK   
248F   CD 37 0F               CALL   coldInit   
2492   CD 63 52               CALL   execStr   
2495   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
24A5   E1                     POP   HL   
24A6   E5                     PUSH   HL   
24A7   11 06 00               LD   DE,6   
24AA   B7                     OR   A   
24AB   ED 52                  SBC   HL,DE   
24AD   7D                     LD   A,L   
24AE   B4                     OR   H   
24AF   CA 0E 25               JP   Z,expectM_2989S96   
24B2   CD 03 0F               CALL   printStr   
24B5   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
24CB   CD 03 0F               CALL   printStr   
24CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24DD   21 06 00               LD   hl,6   
24E0   E5                     PUSH   hl   
24E1   E5                     PUSH   hl   
24E2   CD 00 10               CALL   run   
24E5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24EC   CD 03 0F               CALL   printStr   
24EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24FC   E1                     POP   hl   
24FD   E5                     PUSH   hl   
24FE   E5                     PUSH   hl   
24FF   CD 00 10               CALL   run   
2502   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
250D   76                     HALT      
250E                EXPECTM_2989S96:      
250E   E1                     POP   HL   
250F                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
250F   31 00 54               LD   SP,STACK   
2512   CD 37 0F               CALL   coldInit   
2515   CD 63 52               CALL   execStr   
2518   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2528   E1                     POP   HL   
2529   E5                     PUSH   HL   
252A   11 03 00               LD   DE,3   
252D   B7                     OR   A   
252E   ED 52                  SBC   HL,DE   
2530   7D                     LD   A,L   
2531   B4                     OR   H   
2532   CA 91 25               JP   Z,expectM_2990S97   
2535   CD 03 0F               CALL   printStr   
2538   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
254E   CD 03 0F               CALL   printStr   
2551   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2560   21 03 00               LD   hl,3   
2563   E5                     PUSH   hl   
2564   E5                     PUSH   hl   
2565   CD 00 10               CALL   run   
2568   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
256F   CD 03 0F               CALL   printStr   
2572   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
257F   E1                     POP   hl   
2580   E5                     PUSH   hl   
2581   E5                     PUSH   hl   
2582   CD 00 10               CALL   run   
2585   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2590   76                     HALT      
2591                EXPECTM_2990S97:      
2591   E1                     POP   HL   
2592                          ;*Macro unroll:  test "$55a= $AAa&= a",0
2592   31 00 54               LD   SP,STACK   
2595   CD 37 0F               CALL   coldInit   
2598   CD 63 52               CALL   execStr   
259B   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
25AA   E1                     POP   HL   
25AB   E5                     PUSH   HL   
25AC   11 00 00               LD   DE,0   
25AF   B7                     OR   A   
25B0   ED 52                  SBC   HL,DE   
25B2   7D                     LD   A,L   
25B3   B4                     OR   H   
25B4   CA 12 26               JP   Z,expectM_2991S98   
25B7   CD 03 0F               CALL   printStr   
25BA   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
25CF   CD 03 0F               CALL   printStr   
25D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25E1   21 00 00               LD   hl,0   
25E4   E5                     PUSH   hl   
25E5   E5                     PUSH   hl   
25E6   CD 00 10               CALL   run   
25E9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
25F0   CD 03 0F               CALL   printStr   
25F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2600   E1                     POP   hl   
2601   E5                     PUSH   hl   
2602   E5                     PUSH   hl   
2603   CD 00 10               CALL   run   
2606   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2611   76                     HALT      
2612                EXPECTM_2991S98:      
2612   E1                     POP   HL   
2613                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2613   31 00 54               LD   SP,STACK   
2616   CD 37 0F               CALL   coldInit   
2619   CD 63 52               CALL   execStr   
261C   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
262B   E1                     POP   HL   
262C   E5                     PUSH   HL   
262D   11 FF 00               LD   DE,$FF   
2630   B7                     OR   A   
2631   ED 52                  SBC   HL,DE   
2633   7D                     LD   A,L   
2634   B4                     OR   H   
2635   CA 93 26               JP   Z,expectM_2992S99   
2638   CD 03 0F               CALL   printStr   
263B   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2650   CD 03 0F               CALL   printStr   
2653   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2662   21 FF 00               LD   hl,$FF   
2665   E5                     PUSH   hl   
2666   E5                     PUSH   hl   
2667   CD 00 10               CALL   run   
266A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2671   CD 03 0F               CALL   printStr   
2674   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2681   E1                     POP   hl   
2682   E5                     PUSH   hl   
2683   E5                     PUSH   hl   
2684   CD 00 10               CALL   run   
2687   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2692   76                     HALT      
2693                EXPECTM_2992S99:      
2693   E1                     POP   HL   
2694                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
2694   31 00 54               LD   SP,STACK   
2697   CD 37 0F               CALL   coldInit   
269A   CD 63 52               CALL   execStr   
269D   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
26AE   E1                     POP   HL   
26AF   E5                     PUSH   HL   
26B0   11 0F 00               LD   DE,$0F   
26B3   B7                     OR   A   
26B4   ED 52                  SBC   HL,DE   
26B6   7D                     LD   A,L   
26B7   B4                     OR   H   
26B8   CA 18 27               JP   Z,expectM_2993S100   
26BB   CD 03 0F               CALL   printStr   
26BE   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
26D5   CD 03 0F               CALL   printStr   
26D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E7   21 0F 00               LD   hl,$0F   
26EA   E5                     PUSH   hl   
26EB   E5                     PUSH   hl   
26EC   CD 00 10               CALL   run   
26EF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
26F6   CD 03 0F               CALL   printStr   
26F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2706   E1                     POP   hl   
2707   E5                     PUSH   hl   
2708   E5                     PUSH   hl   
2709   CD 00 10               CALL   run   
270C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2717   76                     HALT      
2718                EXPECTM_2993S100:      
2718   E1                     POP   HL   
2719                          ;*Macro unroll:  test "$00AA~",$FF55
2719   31 00 54               LD   SP,STACK   
271C   CD 37 0F               CALL   coldInit   
271F   CD 63 52               CALL   execStr   
2722   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2729   E1                     POP   HL   
272A   E5                     PUSH   HL   
272B   11 55 FF               LD   DE,$FF55   
272E   B7                     OR   A   
272F   ED 52                  SBC   HL,DE   
2731   7D                     LD   A,L   
2732   B4                     OR   H   
2733   CA 89 27               JP   Z,expectM_2994S101   
2736   CD 03 0F               CALL   printStr   
2739   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2746   CD 03 0F               CALL   printStr   
2749   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2758   21 55 FF               LD   hl,$FF55   
275B   E5                     PUSH   hl   
275C   E5                     PUSH   hl   
275D   CD 00 10               CALL   run   
2760   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2767   CD 03 0F               CALL   printStr   
276A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2777   E1                     POP   hl   
2778   E5                     PUSH   hl   
2779   E5                     PUSH   hl   
277A   CD 00 10               CALL   run   
277D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2788   76                     HALT      
2789                EXPECTM_2994S101:      
2789   E1                     POP   HL   
278A                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
278A   31 00 54               LD   SP,STACK   
278D   CD 37 0F               CALL   coldInit   
2790   CD 63 52               CALL   execStr   
2793   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
27A1   E1                     POP   HL   
27A2   E5                     PUSH   HL   
27A3   11 55 55               LD   DE,$5555   
27A6   B7                     OR   A   
27A7   ED 52                  SBC   HL,DE   
27A9   7D                     LD   A,L   
27AA   B4                     OR   H   
27AB   CA 08 28               JP   Z,expectM_2995S102   
27AE   CD 03 0F               CALL   printStr   
27B1   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
27C5   CD 03 0F               CALL   printStr   
27C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27D7   21 55 55               LD   hl,$5555   
27DA   E5                     PUSH   hl   
27DB   E5                     PUSH   hl   
27DC   CD 00 10               CALL   run   
27DF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27E6   CD 03 0F               CALL   printStr   
27E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27F6   E1                     POP   hl   
27F7   E5                     PUSH   hl   
27F8   E5                     PUSH   hl   
27F9   CD 00 10               CALL   run   
27FC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2807   76                     HALT      
2808                EXPECTM_2995S102:      
2808   E1                     POP   HL   
2809                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
2809   31 00 54               LD   SP,STACK   
280C   CD 37 0F               CALL   coldInit   
280F   CD 63 52               CALL   execStr   
2812   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2820   E1                     POP   HL   
2821   E5                     PUSH   HL   
2822   11 06 00               LD   DE,6   
2825   B7                     OR   A   
2826   ED 52                  SBC   HL,DE   
2828   7D                     LD   A,L   
2829   B4                     OR   H   
282A   CA 87 28               JP   Z,expectM_2996S103   
282D   CD 03 0F               CALL   printStr   
2830   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2844   CD 03 0F               CALL   printStr   
2847   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2856   21 06 00               LD   hl,6   
2859   E5                     PUSH   hl   
285A   E5                     PUSH   hl   
285B   CD 00 10               CALL   run   
285E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2865   CD 03 0F               CALL   printStr   
2868   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2875   E1                     POP   hl   
2876   E5                     PUSH   hl   
2877   E5                     PUSH   hl   
2878   CD 00 10               CALL   run   
287B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2886   76                     HALT      
2887                EXPECTM_2996S103:      
2887   E1                     POP   HL   
2888                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2888   31 00 54               LD   SP,STACK   
288B   CD 37 0F               CALL   coldInit   
288E   CD 63 52               CALL   execStr   
2891   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
28A0   E1                     POP   HL   
28A1   E5                     PUSH   HL   
28A2   11 05 00               LD   DE,5   
28A5   B7                     OR   A   
28A6   ED 52                  SBC   HL,DE   
28A8   7D                     LD   A,L   
28A9   B4                     OR   H   
28AA   CA 08 29               JP   Z,expectM_2997S104   
28AD   CD 03 0F               CALL   printStr   
28B0   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
28C5   CD 03 0F               CALL   printStr   
28C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D7   21 05 00               LD   hl,5   
28DA   E5                     PUSH   hl   
28DB   E5                     PUSH   hl   
28DC   CD 00 10               CALL   run   
28DF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
28E6   CD 03 0F               CALL   printStr   
28E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28F6   E1                     POP   hl   
28F7   E5                     PUSH   hl   
28F8   E5                     PUSH   hl   
28F9   CD 00 10               CALL   run   
28FC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2907   76                     HALT      
2908                EXPECTM_2997S104:      
2908   E1                     POP   HL   
2909                          ;*Macro unroll:  test "7 3 / /re", 1
2909   31 00 54               LD   SP,STACK   
290C   CD 37 0F               CALL   coldInit   
290F   CD 63 52               CALL   execStr   
2912   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
291C   E1                     POP   HL   
291D   E5                     PUSH   HL   
291E   11 01 00               LD   DE,1   
2921   B7                     OR   A   
2922   ED 52                  SBC   HL,DE   
2924   7D                     LD   A,L   
2925   B4                     OR   H   
2926   CA 7F 29               JP   Z,expectM_2998S105   
2929   CD 03 0F               CALL   printStr   
292C   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
293C   CD 03 0F               CALL   printStr   
293F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
294E   21 01 00               LD   hl,1   
2951   E5                     PUSH   hl   
2952   E5                     PUSH   hl   
2953   CD 00 10               CALL   run   
2956   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
295D   CD 03 0F               CALL   printStr   
2960   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
296D   E1                     POP   hl   
296E   E5                     PUSH   hl   
296F   E5                     PUSH   hl   
2970   CD 00 10               CALL   run   
2973   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
297E   76                     HALT      
297F                EXPECTM_2998S105:      
297F   E1                     POP   HL   
2980                          ;*Macro unroll:  test "7 3 /", 2
2980   31 00 54               LD   SP,STACK   
2983   CD 37 0F               CALL   coldInit   
2986   CD 63 52               CALL   execStr   
2989   37 20 33 20 2F 00      DB   "7 3 /",0   
298F   E1                     POP   HL   
2990   E5                     PUSH   HL   
2991   11 02 00               LD   DE,2   
2994   B7                     OR   A   
2995   ED 52                  SBC   HL,DE   
2997   7D                     LD   A,L   
2998   B4                     OR   H   
2999   CA EE 29               JP   Z,expectM_2999S106   
299C   CD 03 0F               CALL   printStr   
299F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
29AB   CD 03 0F               CALL   printStr   
29AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29BD   21 02 00               LD   hl,2   
29C0   E5                     PUSH   hl   
29C1   E5                     PUSH   hl   
29C2   CD 00 10               CALL   run   
29C5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
29CC   CD 03 0F               CALL   printStr   
29CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29DC   E1                     POP   hl   
29DD   E5                     PUSH   hl   
29DE   E5                     PUSH   hl   
29DF   CD 00 10               CALL   run   
29E2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
29ED   76                     HALT      
29EE                EXPECTM_2999S106:      
29EE   E1                     POP   HL   
29EF                          ;*Macro unroll:  test "2 3 ==", FALSE
29EF   31 00 54               LD   SP,STACK   
29F2   CD 37 0F               CALL   coldInit   
29F5   CD 63 52               CALL   execStr   
29F8   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
29FF   E1                     POP   HL   
2A00   E5                     PUSH   HL   
2A01   11 00 00               LD   DE,FALSE   
2A04   B7                     OR   A   
2A05   ED 52                  SBC   HL,DE   
2A07   7D                     LD   A,L   
2A08   B4                     OR   H   
2A09   CA 5F 2A               JP   Z,expectM_3000S107   
2A0C   CD 03 0F               CALL   printStr   
2A0F   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2A1C   CD 03 0F               CALL   printStr   
2A1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A2E   21 00 00               LD   hl,FALSE   
2A31   E5                     PUSH   hl   
2A32   E5                     PUSH   hl   
2A33   CD 00 10               CALL   run   
2A36   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A3D   CD 03 0F               CALL   printStr   
2A40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A4D   E1                     POP   hl   
2A4E   E5                     PUSH   hl   
2A4F   E5                     PUSH   hl   
2A50   CD 00 10               CALL   run   
2A53   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A5E   76                     HALT      
2A5F                EXPECTM_3000S107:      
2A5F   E1                     POP   HL   
2A60                          ;*Macro unroll:  test "3 3 ==", TRUE
2A60   31 00 54               LD   SP,STACK   
2A63   CD 37 0F               CALL   coldInit   
2A66   CD 63 52               CALL   execStr   
2A69   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2A70   E1                     POP   HL   
2A71   E5                     PUSH   HL   
2A72   11 FF FF               LD   DE,TRUE   
2A75   B7                     OR   A   
2A76   ED 52                  SBC   HL,DE   
2A78   7D                     LD   A,L   
2A79   B4                     OR   H   
2A7A   CA D0 2A               JP   Z,expectM_3001S108   
2A7D   CD 03 0F               CALL   printStr   
2A80   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2A8D   CD 03 0F               CALL   printStr   
2A90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A9F   21 FF FF               LD   hl,TRUE   
2AA2   E5                     PUSH   hl   
2AA3   E5                     PUSH   hl   
2AA4   CD 00 10               CALL   run   
2AA7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2AAE   CD 03 0F               CALL   printStr   
2AB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ABE   E1                     POP   hl   
2ABF   E5                     PUSH   hl   
2AC0   E5                     PUSH   hl   
2AC1   CD 00 10               CALL   run   
2AC4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2ACF   76                     HALT      
2AD0                EXPECTM_3001S108:      
2AD0   E1                     POP   HL   
2AD1                          ;*Macro unroll:  test "1 2 <", TRUE
2AD1   31 00 54               LD   SP,STACK   
2AD4   CD 37 0F               CALL   coldInit   
2AD7   CD 63 52               CALL   execStr   
2ADA   31 20 32 20 3C 00      DB   "1 2 <",0   
2AE0   E1                     POP   HL   
2AE1   E5                     PUSH   HL   
2AE2   11 FF FF               LD   DE,TRUE   
2AE5   B7                     OR   A   
2AE6   ED 52                  SBC   HL,DE   
2AE8   7D                     LD   A,L   
2AE9   B4                     OR   H   
2AEA   CA 3F 2B               JP   Z,expectM_3002S109   
2AED   CD 03 0F               CALL   printStr   
2AF0   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2AFC   CD 03 0F               CALL   printStr   
2AFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B0E   21 FF FF               LD   hl,TRUE   
2B11   E5                     PUSH   hl   
2B12   E5                     PUSH   hl   
2B13   CD 00 10               CALL   run   
2B16   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B1D   CD 03 0F               CALL   printStr   
2B20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B2D   E1                     POP   hl   
2B2E   E5                     PUSH   hl   
2B2F   E5                     PUSH   hl   
2B30   CD 00 10               CALL   run   
2B33   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B3E   76                     HALT      
2B3F                EXPECTM_3002S109:      
2B3F   E1                     POP   HL   
2B40                          ;*Macro unroll:  test "2 1 <", FALSE
2B40   31 00 54               LD   SP,STACK   
2B43   CD 37 0F               CALL   coldInit   
2B46   CD 63 52               CALL   execStr   
2B49   32 20 31 20 3C 00      DB   "2 1 <",0   
2B4F   E1                     POP   HL   
2B50   E5                     PUSH   HL   
2B51   11 00 00               LD   DE,FALSE   
2B54   B7                     OR   A   
2B55   ED 52                  SBC   HL,DE   
2B57   7D                     LD   A,L   
2B58   B4                     OR   H   
2B59   CA AE 2B               JP   Z,expectM_3003S110   
2B5C   CD 03 0F               CALL   printStr   
2B5F   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2B6B   CD 03 0F               CALL   printStr   
2B6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B7D   21 00 00               LD   hl,FALSE   
2B80   E5                     PUSH   hl   
2B81   E5                     PUSH   hl   
2B82   CD 00 10               CALL   run   
2B85   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B8C   CD 03 0F               CALL   printStr   
2B8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9C   E1                     POP   hl   
2B9D   E5                     PUSH   hl   
2B9E   E5                     PUSH   hl   
2B9F   CD 00 10               CALL   run   
2BA2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BAD   76                     HALT      
2BAE                EXPECTM_3003S110:      
2BAE   E1                     POP   HL   
2BAF                          ;*Macro unroll:  test "2 3 <", TRUE
2BAF   31 00 54               LD   SP,STACK   
2BB2   CD 37 0F               CALL   coldInit   
2BB5   CD 63 52               CALL   execStr   
2BB8   32 20 33 20 3C 00      DB   "2 3 <",0   
2BBE   E1                     POP   HL   
2BBF   E5                     PUSH   HL   
2BC0   11 FF FF               LD   DE,TRUE   
2BC3   B7                     OR   A   
2BC4   ED 52                  SBC   HL,DE   
2BC6   7D                     LD   A,L   
2BC7   B4                     OR   H   
2BC8   CA 1D 2C               JP   Z,expectM_3004S111   
2BCB   CD 03 0F               CALL   printStr   
2BCE   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2BDA   CD 03 0F               CALL   printStr   
2BDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEC   21 FF FF               LD   hl,TRUE   
2BEF   E5                     PUSH   hl   
2BF0   E5                     PUSH   hl   
2BF1   CD 00 10               CALL   run   
2BF4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BFB   CD 03 0F               CALL   printStr   
2BFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C0B   E1                     POP   hl   
2C0C   E5                     PUSH   hl   
2C0D   E5                     PUSH   hl   
2C0E   CD 00 10               CALL   run   
2C11   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C1C   76                     HALT      
2C1D                EXPECTM_3004S111:      
2C1D   E1                     POP   HL   
2C1E                          ;*Macro unroll:  test "3 3 <", FALSE
2C1E   31 00 54               LD   SP,STACK   
2C21   CD 37 0F               CALL   coldInit   
2C24   CD 63 52               CALL   execStr   
2C27   33 20 33 20 3C 00      DB   "3 3 <",0   
2C2D   E1                     POP   HL   
2C2E   E5                     PUSH   HL   
2C2F   11 00 00               LD   DE,FALSE   
2C32   B7                     OR   A   
2C33   ED 52                  SBC   HL,DE   
2C35   7D                     LD   A,L   
2C36   B4                     OR   H   
2C37   CA 8C 2C               JP   Z,expectM_3005S112   
2C3A   CD 03 0F               CALL   printStr   
2C3D   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2C49   CD 03 0F               CALL   printStr   
2C4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C5B   21 00 00               LD   hl,FALSE   
2C5E   E5                     PUSH   hl   
2C5F   E5                     PUSH   hl   
2C60   CD 00 10               CALL   run   
2C63   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C6A   CD 03 0F               CALL   printStr   
2C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C7A   E1                     POP   hl   
2C7B   E5                     PUSH   hl   
2C7C   E5                     PUSH   hl   
2C7D   CD 00 10               CALL   run   
2C80   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C8B   76                     HALT      
2C8C                EXPECTM_3005S112:      
2C8C   E1                     POP   HL   
2C8D                          ;*Macro unroll:  test "1 2 >", FALSE
2C8D   31 00 54               LD   SP,STACK   
2C90   CD 37 0F               CALL   coldInit   
2C93   CD 63 52               CALL   execStr   
2C96   31 20 32 20 3E 00      DB   "1 2 >",0   
2C9C   E1                     POP   HL   
2C9D   E5                     PUSH   HL   
2C9E   11 00 00               LD   DE,FALSE   
2CA1   B7                     OR   A   
2CA2   ED 52                  SBC   HL,DE   
2CA4   7D                     LD   A,L   
2CA5   B4                     OR   H   
2CA6   CA FB 2C               JP   Z,expectM_3006S113   
2CA9   CD 03 0F               CALL   printStr   
2CAC   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2CB8   CD 03 0F               CALL   printStr   
2CBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CCA   21 00 00               LD   hl,FALSE   
2CCD   E5                     PUSH   hl   
2CCE   E5                     PUSH   hl   
2CCF   CD 00 10               CALL   run   
2CD2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2CD9   CD 03 0F               CALL   printStr   
2CDC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CE9   E1                     POP   hl   
2CEA   E5                     PUSH   hl   
2CEB   E5                     PUSH   hl   
2CEC   CD 00 10               CALL   run   
2CEF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CFA   76                     HALT      
2CFB                EXPECTM_3006S113:      
2CFB   E1                     POP   HL   
2CFC                          ;*Macro unroll:  test "2 1 >", TRUE
2CFC   31 00 54               LD   SP,STACK   
2CFF   CD 37 0F               CALL   coldInit   
2D02   CD 63 52               CALL   execStr   
2D05   32 20 31 20 3E 00      DB   "2 1 >",0   
2D0B   E1                     POP   HL   
2D0C   E5                     PUSH   HL   
2D0D   11 FF FF               LD   DE,TRUE   
2D10   B7                     OR   A   
2D11   ED 52                  SBC   HL,DE   
2D13   7D                     LD   A,L   
2D14   B4                     OR   H   
2D15   CA 6A 2D               JP   Z,expectM_3007S114   
2D18   CD 03 0F               CALL   printStr   
2D1B   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2D27   CD 03 0F               CALL   printStr   
2D2A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D39   21 FF FF               LD   hl,TRUE   
2D3C   E5                     PUSH   hl   
2D3D   E5                     PUSH   hl   
2D3E   CD 00 10               CALL   run   
2D41   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D48   CD 03 0F               CALL   printStr   
2D4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D58   E1                     POP   hl   
2D59   E5                     PUSH   hl   
2D5A   E5                     PUSH   hl   
2D5B   CD 00 10               CALL   run   
2D5E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D69   76                     HALT      
2D6A                EXPECTM_3007S114:      
2D6A   E1                     POP   HL   
2D6B                          ;*Macro unroll:  test "3 3 >", FALSE
2D6B   31 00 54               LD   SP,STACK   
2D6E   CD 37 0F               CALL   coldInit   
2D71   CD 63 52               CALL   execStr   
2D74   33 20 33 20 3E 00      DB   "3 3 >",0   
2D7A   E1                     POP   HL   
2D7B   E5                     PUSH   HL   
2D7C   11 00 00               LD   DE,FALSE   
2D7F   B7                     OR   A   
2D80   ED 52                  SBC   HL,DE   
2D82   7D                     LD   A,L   
2D83   B4                     OR   H   
2D84   CA D9 2D               JP   Z,expectM_3008S115   
2D87   CD 03 0F               CALL   printStr   
2D8A   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2D96   CD 03 0F               CALL   printStr   
2D99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DA8   21 00 00               LD   hl,FALSE   
2DAB   E5                     PUSH   hl   
2DAC   E5                     PUSH   hl   
2DAD   CD 00 10               CALL   run   
2DB0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DB7   CD 03 0F               CALL   printStr   
2DBA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DC7   E1                     POP   hl   
2DC8   E5                     PUSH   hl   
2DC9   E5                     PUSH   hl   
2DCA   CD 00 10               CALL   run   
2DCD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2DD8   76                     HALT      
2DD9                EXPECTM_3008S115:      
2DD9   E1                     POP   HL   
2DDA                          ;*Macro unroll:  test "4 3 >", TRUE
2DDA   31 00 54               LD   SP,STACK   
2DDD   CD 37 0F               CALL   coldInit   
2DE0   CD 63 52               CALL   execStr   
2DE3   34 20 33 20 3E 00      DB   "4 3 >",0   
2DE9   E1                     POP   HL   
2DEA   E5                     PUSH   HL   
2DEB   11 FF FF               LD   DE,TRUE   
2DEE   B7                     OR   A   
2DEF   ED 52                  SBC   HL,DE   
2DF1   7D                     LD   A,L   
2DF2   B4                     OR   H   
2DF3   CA 48 2E               JP   Z,expectM_3009S116   
2DF6   CD 03 0F               CALL   printStr   
2DF9   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2E05   CD 03 0F               CALL   printStr   
2E08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E17   21 FF FF               LD   hl,TRUE   
2E1A   E5                     PUSH   hl   
2E1B   E5                     PUSH   hl   
2E1C   CD 00 10               CALL   run   
2E1F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E26   CD 03 0F               CALL   printStr   
2E29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E36   E1                     POP   hl   
2E37   E5                     PUSH   hl   
2E38   E5                     PUSH   hl   
2E39   CD 00 10               CALL   run   
2E3C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E47   76                     HALT      
2E48                EXPECTM_3009S116:      
2E48   E1                     POP   HL   
2E49                          ;*Macro unroll:  test "2 2 <=", TRUE
2E49   31 00 54               LD   SP,STACK   
2E4C   CD 37 0F               CALL   coldInit   
2E4F   CD 63 52               CALL   execStr   
2E52   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2E59   E1                     POP   HL   
2E5A   E5                     PUSH   HL   
2E5B   11 FF FF               LD   DE,TRUE   
2E5E   B7                     OR   A   
2E5F   ED 52                  SBC   HL,DE   
2E61   7D                     LD   A,L   
2E62   B4                     OR   H   
2E63   CA B9 2E               JP   Z,expectM_3010S117   
2E66   CD 03 0F               CALL   printStr   
2E69   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2E76   CD 03 0F               CALL   printStr   
2E79   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E88   21 FF FF               LD   hl,TRUE   
2E8B   E5                     PUSH   hl   
2E8C   E5                     PUSH   hl   
2E8D   CD 00 10               CALL   run   
2E90   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E97   CD 03 0F               CALL   printStr   
2E9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EA7   E1                     POP   hl   
2EA8   E5                     PUSH   hl   
2EA9   E5                     PUSH   hl   
2EAA   CD 00 10               CALL   run   
2EAD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2EB8   76                     HALT      
2EB9                EXPECTM_3010S117:      
2EB9   E1                     POP   HL   
2EBA                          ;*Macro unroll:  test "2 2 >=", TRUE
2EBA   31 00 54               LD   SP,STACK   
2EBD   CD 37 0F               CALL   coldInit   
2EC0   CD 63 52               CALL   execStr   
2EC3   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2ECA   E1                     POP   HL   
2ECB   E5                     PUSH   HL   
2ECC   11 FF FF               LD   DE,TRUE   
2ECF   B7                     OR   A   
2ED0   ED 52                  SBC   HL,DE   
2ED2   7D                     LD   A,L   
2ED3   B4                     OR   H   
2ED4   CA 2A 2F               JP   Z,expectM_3011S118   
2ED7   CD 03 0F               CALL   printStr   
2EDA   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2EE7   CD 03 0F               CALL   printStr   
2EEA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EF9   21 FF FF               LD   hl,TRUE   
2EFC   E5                     PUSH   hl   
2EFD   E5                     PUSH   hl   
2EFE   CD 00 10               CALL   run   
2F01   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F08   CD 03 0F               CALL   printStr   
2F0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F18   E1                     POP   hl   
2F19   E5                     PUSH   hl   
2F1A   E5                     PUSH   hl   
2F1B   CD 00 10               CALL   run   
2F1E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F29   76                     HALT      
2F2A                EXPECTM_3011S118:      
2F2A   E1                     POP   HL   
2F2B                          ;*Macro unroll:  test "3 1 <<", 6
2F2B   31 00 54               LD   SP,STACK   
2F2E   CD 37 0F               CALL   coldInit   
2F31   CD 63 52               CALL   execStr   
2F34   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2F3B   E1                     POP   HL   
2F3C   E5                     PUSH   HL   
2F3D   11 06 00               LD   DE,6   
2F40   B7                     OR   A   
2F41   ED 52                  SBC   HL,DE   
2F43   7D                     LD   A,L   
2F44   B4                     OR   H   
2F45   CA 9B 2F               JP   Z,expectM_3012S119   
2F48   CD 03 0F               CALL   printStr   
2F4B   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2F58   CD 03 0F               CALL   printStr   
2F5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F6A   21 06 00               LD   hl,6   
2F6D   E5                     PUSH   hl   
2F6E   E5                     PUSH   hl   
2F6F   CD 00 10               CALL   run   
2F72   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F79   CD 03 0F               CALL   printStr   
2F7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F89   E1                     POP   hl   
2F8A   E5                     PUSH   hl   
2F8B   E5                     PUSH   hl   
2F8C   CD 00 10               CALL   run   
2F8F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F9A   76                     HALT      
2F9B                EXPECTM_3012S119:      
2F9B   E1                     POP   HL   
2F9C                          ;*Macro unroll:  test "10 1 >>", 5
2F9C   31 00 54               LD   SP,STACK   
2F9F   CD 37 0F               CALL   coldInit   
2FA2   CD 63 52               CALL   execStr   
2FA5   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2FAD   E1                     POP   HL   
2FAE   E5                     PUSH   HL   
2FAF   11 05 00               LD   DE,5   
2FB2   B7                     OR   A   
2FB3   ED 52                  SBC   HL,DE   
2FB5   7D                     LD   A,L   
2FB6   B4                     OR   H   
2FB7   CA 0E 30               JP   Z,expectM_3013S120   
2FBA   CD 03 0F               CALL   printStr   
2FBD   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2FCB   CD 03 0F               CALL   printStr   
2FCE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FDD   21 05 00               LD   hl,5   
2FE0   E5                     PUSH   hl   
2FE1   E5                     PUSH   hl   
2FE2   CD 00 10               CALL   run   
2FE5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2FEC   CD 03 0F               CALL   printStr   
2FEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FFC   E1                     POP   hl   
2FFD   E5                     PUSH   hl   
2FFE   E5                     PUSH   hl   
2FFF   CD 00 10               CALL   run   
3002   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
300D   76                     HALT      
300E                EXPECTM_3013S120:      
300E   E1                     POP   HL   
300F                          ;*Macro unroll:  test "1 x = x", 1
300F   31 00 54               LD   SP,STACK   
3012   CD 37 0F               CALL   coldInit   
3015   CD 63 52               CALL   execStr   
3018   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
3020   E1                     POP   HL   
3021   E5                     PUSH   HL   
3022   11 01 00               LD   DE,1   
3025   B7                     OR   A   
3026   ED 52                  SBC   HL,DE   
3028   7D                     LD   A,L   
3029   B4                     OR   H   
302A   CA 81 30               JP   Z,expectM_3014S121   
302D   CD 03 0F               CALL   printStr   
3030   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
303E   CD 03 0F               CALL   printStr   
3041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3050   21 01 00               LD   hl,1   
3053   E5                     PUSH   hl   
3054   E5                     PUSH   hl   
3055   CD 00 10               CALL   run   
3058   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
305F   CD 03 0F               CALL   printStr   
3062   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
306F   E1                     POP   hl   
3070   E5                     PUSH   hl   
3071   E5                     PUSH   hl   
3072   CD 00 10               CALL   run   
3075   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3080   76                     HALT      
3081                EXPECTM_3014S121:      
3081   E1                     POP   HL   
3082                          ;*Macro unroll:  test "1{}^", 1
3082   31 00 54               LD   SP,STACK   
3085   CD 37 0F               CALL   coldInit   
3088   CD 63 52               CALL   execStr   
308B   31 7B 7D 5E 00         DB   "1{}^",0   
3090   E1                     POP   HL   
3091   E5                     PUSH   HL   
3092   11 01 00               LD   DE,1   
3095   B7                     OR   A   
3096   ED 52                  SBC   HL,DE   
3098   7D                     LD   A,L   
3099   B4                     OR   H   
309A   CA EE 30               JP   Z,expectM_3015S122   
309D   CD 03 0F               CALL   printStr   
30A0   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
30AB   CD 03 0F               CALL   printStr   
30AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30BD   21 01 00               LD   hl,1   
30C0   E5                     PUSH   hl   
30C1   E5                     PUSH   hl   
30C2   CD 00 10               CALL   run   
30C5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
30CC   CD 03 0F               CALL   printStr   
30CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30DC   E1                     POP   hl   
30DD   E5                     PUSH   hl   
30DE   E5                     PUSH   hl   
30DF   CD 00 10               CALL   run   
30E2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
30ED   76                     HALT      
30EE                EXPECTM_3015S122:      
30EE   E1                     POP   HL   
30EF                          ;*Macro unroll:  test "{1}^", 1
30EF   31 00 54               LD   SP,STACK   
30F2   CD 37 0F               CALL   coldInit   
30F5   CD 63 52               CALL   execStr   
30F8   7B 31 7D 5E 00         DB   "{1}^",0   
30FD   E1                     POP   HL   
30FE   E5                     PUSH   HL   
30FF   11 01 00               LD   DE,1   
3102   B7                     OR   A   
3103   ED 52                  SBC   HL,DE   
3105   7D                     LD   A,L   
3106   B4                     OR   H   
3107   CA 5B 31               JP   Z,expectM_3016S123   
310A   CD 03 0F               CALL   printStr   
310D   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
3118   CD 03 0F               CALL   printStr   
311B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312A   21 01 00               LD   hl,1   
312D   E5                     PUSH   hl   
312E   E5                     PUSH   hl   
312F   CD 00 10               CALL   run   
3132   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3139   CD 03 0F               CALL   printStr   
313C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3149   E1                     POP   hl   
314A   E5                     PUSH   hl   
314B   E5                     PUSH   hl   
314C   CD 00 10               CALL   run   
314F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
315A   76                     HALT      
315B                EXPECTM_3016S123:      
315B   E1                     POP   HL   
315C                          ;*Macro unroll:  test "{{1}^}^", 1
315C   31 00 54               LD   SP,STACK   
315F   CD 37 0F               CALL   coldInit   
3162   CD 63 52               CALL   execStr   
3165   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
316D   E1                     POP   HL   
316E   E5                     PUSH   HL   
316F   11 01 00               LD   DE,1   
3172   B7                     OR   A   
3173   ED 52                  SBC   HL,DE   
3175   7D                     LD   A,L   
3176   B4                     OR   H   
3177   CA CE 31               JP   Z,expectM_3017S124   
317A   CD 03 0F               CALL   printStr   
317D   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
318B   CD 03 0F               CALL   printStr   
318E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
319D   21 01 00               LD   hl,1   
31A0   E5                     PUSH   hl   
31A1   E5                     PUSH   hl   
31A2   CD 00 10               CALL   run   
31A5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
31AC   CD 03 0F               CALL   printStr   
31AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31BC   E1                     POP   hl   
31BD   E5                     PUSH   hl   
31BE   E5                     PUSH   hl   
31BF   CD 00 10               CALL   run   
31C2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31CD   76                     HALT      
31CE                EXPECTM_3017S124:      
31CE   E1                     POP   HL   
31CF                          ;*Macro unroll:  test "{{{1}^}^}^", 1
31CF   31 00 54               LD   SP,STACK   
31D2   CD 37 0F               CALL   coldInit   
31D5   CD 63 52               CALL   execStr   
31D8   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
31E3   E1                     POP   HL   
31E4   E5                     PUSH   HL   
31E5   11 01 00               LD   DE,1   
31E8   B7                     OR   A   
31E9   ED 52                  SBC   HL,DE   
31EB   7D                     LD   A,L   
31EC   B4                     OR   H   
31ED   CA 47 32               JP   Z,expectM_3018S125   
31F0   CD 03 0F               CALL   printStr   
31F3   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
3204   CD 03 0F               CALL   printStr   
3207   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3216   21 01 00               LD   hl,1   
3219   E5                     PUSH   hl   
321A   E5                     PUSH   hl   
321B   CD 00 10               CALL   run   
321E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3225   CD 03 0F               CALL   printStr   
3228   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3235   E1                     POP   hl   
3236   E5                     PUSH   hl   
3237   E5                     PUSH   hl   
3238   CD 00 10               CALL   run   
323B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3246   76                     HALT      
3247                EXPECTM_3018S125:      
3247   E1                     POP   HL   
3248                          ;*Macro unroll:  test "1 /f{10}{20} ? +", 21
3248   31 00 54               LD   SP,STACK   
324B   CD 37 0F               CALL   coldInit   
324E   CD 63 52               CALL   execStr   
3251   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /f{10}{20} ? +",0   
3262   E1                     POP   HL   
3263   E5                     PUSH   HL   
3264   11 15 00               LD   DE,21   
3267   B7                     OR   A   
3268   ED 52                  SBC   HL,DE   
326A   7D                     LD   A,L   
326B   B4                     OR   H   
326C   CA CC 32               JP   Z,expectM_3019S126   
326F   CD 03 0F               CALL   printStr   
3272   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ? +"   
3289   CD 03 0F               CALL   printStr   
328C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
329B   21 15 00               LD   hl,21   
329E   E5                     PUSH   hl   
329F   E5                     PUSH   hl   
32A0   CD 00 10               CALL   run   
32A3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
32AA   CD 03 0F               CALL   printStr   
32AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32BA   E1                     POP   hl   
32BB   E5                     PUSH   hl   
32BC   E5                     PUSH   hl   
32BD   CD 00 10               CALL   run   
32C0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32CB   76                     HALT      
32CC                EXPECTM_3019S126:      
32CC   E1                     POP   HL   
32CD                          ;*Macro unroll:  test "1 /t{10}{20} ? +", 11
32CD   31 00 54               LD   SP,STACK   
32D0   CD 37 0F               CALL   coldInit   
32D3   CD 63 52               CALL   execStr   
32D6   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /t{10}{20} ? +",0   
32E7   E1                     POP   HL   
32E8   E5                     PUSH   HL   
32E9   11 0B 00               LD   DE,11   
32EC   B7                     OR   A   
32ED   ED 52                  SBC   HL,DE   
32EF   7D                     LD   A,L   
32F0   B4                     OR   H   
32F1   CA 51 33               JP   Z,expectM_3020S127   
32F4   CD 03 0F               CALL   printStr   
32F7   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ? +"   
330E   CD 03 0F               CALL   printStr   
3311   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3320   21 0B 00               LD   hl,11   
3323   E5                     PUSH   hl   
3324   E5                     PUSH   hl   
3325   CD 00 10               CALL   run   
3328   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
332F   CD 03 0F               CALL   printStr   
3332   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
333F   E1                     POP   hl   
3340   E5                     PUSH   hl   
3341   E5                     PUSH   hl   
3342   CD 00 10               CALL   run   
3345   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3350   76                     HALT      
3351                EXPECTM_3020S127:      
3351   E1                     POP   HL   
3352                          ;*Macro unroll:  test "\\{2}^", 2
3352   31 00 54               LD   SP,STACK   
3355   CD 37 0F               CALL   coldInit   
3358   CD 63 52               CALL   execStr   
335B   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
3361   E1                     POP   HL   
3362   E5                     PUSH   HL   
3363   11 02 00               LD   DE,2   
3366   B7                     OR   A   
3367   ED 52                  SBC   HL,DE   
3369   7D                     LD   A,L   
336A   B4                     OR   H   
336B   CA C0 33               JP   Z,expectM_3021S128   
336E   CD 03 0F               CALL   printStr   
3371   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
337D   CD 03 0F               CALL   printStr   
3380   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
338F   21 02 00               LD   hl,2   
3392   E5                     PUSH   hl   
3393   E5                     PUSH   hl   
3394   CD 00 10               CALL   run   
3397   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
339E   CD 03 0F               CALL   printStr   
33A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33AE   E1                     POP   hl   
33AF   E5                     PUSH   hl   
33B0   E5                     PUSH   hl   
33B1   CD 00 10               CALL   run   
33B4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
33BF   76                     HALT      
33C0                EXPECTM_3021S128:      
33C0   E1                     POP   HL   
33C1                          ;*Macro unroll:  test "\\a{2}^", 2
33C1   31 00 54               LD   SP,STACK   
33C4   CD 37 0F               CALL   coldInit   
33C7   CD 63 52               CALL   execStr   
33CA   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
33D1   E1                     POP   HL   
33D2   E5                     PUSH   HL   
33D3   11 02 00               LD   DE,2   
33D6   B7                     OR   A   
33D7   ED 52                  SBC   HL,DE   
33D9   7D                     LD   A,L   
33DA   B4                     OR   H   
33DB   CA 31 34               JP   Z,expectM_3022S129   
33DE   CD 03 0F               CALL   printStr   
33E1   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
33EE   CD 03 0F               CALL   printStr   
33F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3400   21 02 00               LD   hl,2   
3403   E5                     PUSH   hl   
3404   E5                     PUSH   hl   
3405   CD 00 10               CALL   run   
3408   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
340F   CD 03 0F               CALL   printStr   
3412   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
341F   E1                     POP   hl   
3420   E5                     PUSH   hl   
3421   E5                     PUSH   hl   
3422   CD 00 10               CALL   run   
3425   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3430   76                     HALT      
3431                EXPECTM_3022S129:      
3431   E1                     POP   HL   
3432                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3432   31 00 54               LD   SP,STACK   
3435   CD 37 0F               CALL   coldInit   
3438   CD 63 52               CALL   execStr   
343B   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3445   E1                     POP   HL   
3446   E5                     PUSH   HL   
3447   11 05 00               LD   DE,5   
344A   B7                     OR   A   
344B   ED 52                  SBC   HL,DE   
344D   7D                     LD   A,L   
344E   B4                     OR   H   
344F   CA A8 34               JP   Z,expectM_3023S130   
3452   CD 03 0F               CALL   printStr   
3455   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
3465   CD 03 0F               CALL   printStr   
3468   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3477   21 05 00               LD   hl,5   
347A   E5                     PUSH   hl   
347B   E5                     PUSH   hl   
347C   CD 00 10               CALL   run   
347F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3486   CD 03 0F               CALL   printStr   
3489   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3496   E1                     POP   hl   
3497   E5                     PUSH   hl   
3498   E5                     PUSH   hl   
3499   CD 00 10               CALL   run   
349C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
34A7   76                     HALT      
34A8                EXPECTM_3023S130:      
34A8   E1                     POP   HL   
34A9                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
34A9   31 00 54               LD   SP,STACK   
34AC   CD 37 0F               CALL   coldInit   
34AF   CD 63 52               CALL   execStr   
34B2   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
34BE   E1                     POP   HL   
34BF   E5                     PUSH   HL   
34C0   11 05 00               LD   DE,5   
34C3   B7                     OR   A   
34C4   ED 52                  SBC   HL,DE   
34C6   7D                     LD   A,L   
34C7   B4                     OR   H   
34C8   CA 23 35               JP   Z,expectM_3024S131   
34CB   CD 03 0F               CALL   printStr   
34CE   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
34E0   CD 03 0F               CALL   printStr   
34E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34F2   21 05 00               LD   hl,5   
34F5   E5                     PUSH   hl   
34F6   E5                     PUSH   hl   
34F7   CD 00 10               CALL   run   
34FA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3501   CD 03 0F               CALL   printStr   
3504   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3511   E1                     POP   hl   
3512   E5                     PUSH   hl   
3513   E5                     PUSH   hl   
3514   CD 00 10               CALL   run   
3517   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3522   76                     HALT      
3523                EXPECTM_3024S131:      
3523   E1                     POP   HL   
3524                          ;*Macro unroll:  test "\\a{{2}^}^", 2
3524   31 00 54               LD   SP,STACK   
3527   CD 37 0F               CALL   coldInit   
352A   CD 63 52               CALL   execStr   
352D   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3537   E1                     POP   HL   
3538   E5                     PUSH   HL   
3539   11 02 00               LD   DE,2   
353C   B7                     OR   A   
353D   ED 52                  SBC   HL,DE   
353F   7D                     LD   A,L   
3540   B4                     OR   H   
3541   CA 9A 35               JP   Z,expectM_3025S132   
3544   CD 03 0F               CALL   printStr   
3547   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3557   CD 03 0F               CALL   printStr   
355A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3569   21 02 00               LD   hl,2   
356C   E5                     PUSH   hl   
356D   E5                     PUSH   hl   
356E   CD 00 10               CALL   run   
3571   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3578   CD 03 0F               CALL   printStr   
357B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3588   E1                     POP   hl   
3589   E5                     PUSH   hl   
358A   E5                     PUSH   hl   
358B   CD 00 10               CALL   run   
358E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3599   76                     HALT      
359A                EXPECTM_3025S132:      
359A   E1                     POP   HL   
359B                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
359B   31 00 54               LD   SP,STACK   
359E   CD 37 0F               CALL   coldInit   
35A1   CD 63 52               CALL   execStr   
35A4   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
35B3   E1                     POP   HL   
35B4   E5                     PUSH   HL   
35B5   11 05 00               LD   DE,5   
35B8   B7                     OR   A   
35B9   ED 52                  SBC   HL,DE   
35BB   7D                     LD   A,L   
35BC   B4                     OR   H   
35BD   CA 1B 36               JP   Z,expectM_3026S133   
35C0   CD 03 0F               CALL   printStr   
35C3   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
35D8   CD 03 0F               CALL   printStr   
35DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35EA   21 05 00               LD   hl,5   
35ED   E5                     PUSH   hl   
35EE   E5                     PUSH   hl   
35EF   CD 00 10               CALL   run   
35F2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
35F9   CD 03 0F               CALL   printStr   
35FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3609   E1                     POP   hl   
360A   E5                     PUSH   hl   
360B   E5                     PUSH   hl   
360C   CD 00 10               CALL   run   
360F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
361A   76                     HALT      
361B                EXPECTM_3026S133:      
361B   E1                     POP   HL   
361C                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
361C   31 00 54               LD   SP,STACK   
361F   CD 37 0F               CALL   coldInit   
3622   CD 63 52               CALL   execStr   
3625   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3635   E1                     POP   HL   
3636   E5                     PUSH   HL   
3637   11 01 00               LD   DE,1   
363A   B7                     OR   A   
363B   ED 52                  SBC   HL,DE   
363D   7D                     LD   A,L   
363E   B4                     OR   H   
363F   CA 9E 36               JP   Z,expectM_3027S134   
3642   CD 03 0F               CALL   printStr   
3645   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
365B   CD 03 0F               CALL   printStr   
365E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
366D   21 01 00               LD   hl,1   
3670   E5                     PUSH   hl   
3671   E5                     PUSH   hl   
3672   CD 00 10               CALL   run   
3675   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
367C   CD 03 0F               CALL   printStr   
367F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
368C   E1                     POP   hl   
368D   E5                     PUSH   hl   
368E   E5                     PUSH   hl   
368F   CD 00 10               CALL   run   
3692   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
369D   76                     HALT      
369E                EXPECTM_3027S134:      
369E   E1                     POP   HL   
369F                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
369F   31 00 54               LD   SP,STACK   
36A2   CD 37 0F               CALL   coldInit   
36A5   CD 63 52               CALL   execStr   
36A8   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
36BB   E1                     POP   HL   
36BC   E5                     PUSH   HL   
36BD   11 07 00               LD   DE,7   
36C0   B7                     OR   A   
36C1   ED 52                  SBC   HL,DE   
36C3   7D                     LD   A,L   
36C4   B4                     OR   H   
36C5   CA 27 37               JP   Z,expectM_3028S135   
36C8   CD 03 0F               CALL   printStr   
36CB   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
36E4   CD 03 0F               CALL   printStr   
36E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36F6   21 07 00               LD   hl,7   
36F9   E5                     PUSH   hl   
36FA   E5                     PUSH   hl   
36FB   CD 00 10               CALL   run   
36FE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3705   CD 03 0F               CALL   printStr   
3708   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3715   E1                     POP   hl   
3716   E5                     PUSH   hl   
3717   E5                     PUSH   hl   
3718   CD 00 10               CALL   run   
371B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3726   76                     HALT      
3727                EXPECTM_3028S135:      
3727   E1                     POP   HL   
3728                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3728   31 00 54               LD   SP,STACK   
372B   CD 37 0F               CALL   coldInit   
372E   CD 63 52               CALL   execStr   
3731   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3746   E1                     POP   HL   
3747   E5                     PUSH   HL   
3748   11 06 00               LD   DE,6   
374B   B7                     OR   A   
374C   ED 52                  SBC   HL,DE   
374E   7D                     LD   A,L   
374F   B4                     OR   H   
3750   CA B4 37               JP   Z,expectM_3029S136   
3753   CD 03 0F               CALL   printStr   
3756   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3771   CD 03 0F               CALL   printStr   
3774   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3783   21 06 00               LD   hl,6   
3786   E5                     PUSH   hl   
3787   E5                     PUSH   hl   
3788   CD 00 10               CALL   run   
378B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3792   CD 03 0F               CALL   printStr   
3795   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37A2   E1                     POP   hl   
37A3   E5                     PUSH   hl   
37A4   E5                     PUSH   hl   
37A5   CD 00 10               CALL   run   
37A8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
37B3   76                     HALT      
37B4                EXPECTM_3029S136:      
37B4   E1                     POP   HL   
37B5                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
37B5   31 00 54               LD   SP,STACK   
37B8   CD 37 0F               CALL   coldInit   
37BB   CD 63 52               CALL   execStr   
37BE   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
37CC   E1                     POP   HL   
37CD   E5                     PUSH   HL   
37CE   11 02 00               LD   DE,2   
37D1   B7                     OR   A   
37D2   ED 52                  SBC   HL,DE   
37D4   7D                     LD   A,L   
37D5   B4                     OR   H   
37D6   CA 33 38               JP   Z,expectM_3030S137   
37D9   CD 03 0F               CALL   printStr   
37DC   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
37F0   CD 03 0F               CALL   printStr   
37F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3802   21 02 00               LD   hl,2   
3805   E5                     PUSH   hl   
3806   E5                     PUSH   hl   
3807   CD 00 10               CALL   run   
380A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3811   CD 03 0F               CALL   printStr   
3814   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3821   E1                     POP   hl   
3822   E5                     PUSH   hl   
3823   E5                     PUSH   hl   
3824   CD 00 10               CALL   run   
3827   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3832   76                     HALT      
3833                EXPECTM_3030S137:      
3833   E1                     POP   HL   
3834                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3834   31 00 54               LD   SP,STACK   
3837   CD 37 0F               CALL   coldInit   
383A   CD 63 52               CALL   execStr   
383D   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
384E   E1                     POP   HL   
384F   E5                     PUSH   HL   
3850   11 01 00               LD   DE,1   
3853   B7                     OR   A   
3854   ED 52                  SBC   HL,DE   
3856   7D                     LD   A,L   
3857   B4                     OR   H   
3858   CA B8 38               JP   Z,expectM_3031S138   
385B   CD 03 0F               CALL   printStr   
385E   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3875   CD 03 0F               CALL   printStr   
3878   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3887   21 01 00               LD   hl,1   
388A   E5                     PUSH   hl   
388B   E5                     PUSH   hl   
388C   CD 00 10               CALL   run   
388F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3896   CD 03 0F               CALL   printStr   
3899   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38A6   E1                     POP   hl   
38A7   E5                     PUSH   hl   
38A8   E5                     PUSH   hl   
38A9   CD 00 10               CALL   run   
38AC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
38B7   76                     HALT      
38B8                EXPECTM_3031S138:      
38B8   E1                     POP   HL   
38B9                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
38B9   31 00 54               LD   SP,STACK   
38BC   CD 37 0F               CALL   coldInit   
38BF   CD 63 52               CALL   execStr   
38C2   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
38D4   E1                     POP   HL   
38D5   E5                     PUSH   HL   
38D6   11 02 00               LD   DE,2   
38D9   B7                     OR   A   
38DA   ED 52                  SBC   HL,DE   
38DC   7D                     LD   A,L   
38DD   B4                     OR   H   
38DE   CA 3F 39               JP   Z,expectM_3032S139   
38E1   CD 03 0F               CALL   printStr   
38E4   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
38FC   CD 03 0F               CALL   printStr   
38FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
390E   21 02 00               LD   hl,2   
3911   E5                     PUSH   hl   
3912   E5                     PUSH   hl   
3913   CD 00 10               CALL   run   
3916   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
391D   CD 03 0F               CALL   printStr   
3920   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
392D   E1                     POP   hl   
392E   E5                     PUSH   hl   
392F   E5                     PUSH   hl   
3930   CD 00 10               CALL   run   
3933   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
393E   76                     HALT      
393F                EXPECTM_3032S139:      
393F   E1                     POP   HL   
3940                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3940   31 00 54               LD   SP,STACK   
3943   CD 37 0F               CALL   coldInit   
3946   CD 63 52               CALL   execStr   
3949   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
395C   E1                     POP   HL   
395D   E5                     PUSH   HL   
395E   11 02 00               LD   DE,2   
3961   B7                     OR   A   
3962   ED 52                  SBC   HL,DE   
3964   7D                     LD   A,L   
3965   B4                     OR   H   
3966   CA C8 39               JP   Z,expectM_3033S140   
3969   CD 03 0F               CALL   printStr   
396C   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3985   CD 03 0F               CALL   printStr   
3988   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3997   21 02 00               LD   hl,2   
399A   E5                     PUSH   hl   
399B   E5                     PUSH   hl   
399C   CD 00 10               CALL   run   
399F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
39A6   CD 03 0F               CALL   printStr   
39A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39B6   E1                     POP   hl   
39B7   E5                     PUSH   hl   
39B8   E5                     PUSH   hl   
39B9   CD 00 10               CALL   run   
39BC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
39C7   76                     HALT      
39C8                EXPECTM_3033S140:      
39C8   E1                     POP   HL   
39C9                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
39C9   31 00 54               LD   SP,STACK   
39CC   CD 37 0F               CALL   coldInit   
39CF   CD 63 52               CALL   execStr   
39D2   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
39E4   E1                     POP   HL   
39E5   E5                     PUSH   HL   
39E6   11 02 00               LD   DE,2   
39E9   B7                     OR   A   
39EA   ED 52                  SBC   HL,DE   
39EC   7D                     LD   A,L   
39ED   B4                     OR   H   
39EE   CA 4F 3A               JP   Z,expectM_3034S141   
39F1   CD 03 0F               CALL   printStr   
39F4   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3A0C   CD 03 0F               CALL   printStr   
3A0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A1E   21 02 00               LD   hl,2   
3A21   E5                     PUSH   hl   
3A22   E5                     PUSH   hl   
3A23   CD 00 10               CALL   run   
3A26   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A2D   CD 03 0F               CALL   printStr   
3A30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A3D   E1                     POP   hl   
3A3E   E5                     PUSH   hl   
3A3F   E5                     PUSH   hl   
3A40   CD 00 10               CALL   run   
3A43   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A4E   76                     HALT      
3A4F                EXPECTM_3034S141:      
3A4F   E1                     POP   HL   
3A50                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3A50   31 00 54               LD   SP,STACK   
3A53   CD 37 0F               CALL   coldInit   
3A56   CD 63 52               CALL   execStr   
3A59   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3A72   E1                     POP   HL   
3A73   E5                     PUSH   HL   
3A74   11 05 00               LD   DE,5   
3A77   B7                     OR   A   
3A78   ED 52                  SBC   HL,DE   
3A7A   7D                     LD   A,L   
3A7B   B4                     OR   H   
3A7C   CA E4 3A               JP   Z,expectM_3035S142   
3A7F   CD 03 0F               CALL   printStr   
3A82   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3AA1   CD 03 0F               CALL   printStr   
3AA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AB3   21 05 00               LD   hl,5   
3AB6   E5                     PUSH   hl   
3AB7   E5                     PUSH   hl   
3AB8   CD 00 10               CALL   run   
3ABB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3AC2   CD 03 0F               CALL   printStr   
3AC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AD2   E1                     POP   hl   
3AD3   E5                     PUSH   hl   
3AD4   E5                     PUSH   hl   
3AD5   CD 00 10               CALL   run   
3AD8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3AE3   76                     HALT      
3AE4                EXPECTM_3035S142:      
3AE4   E1                     POP   HL   
3AE5                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3AE5   31 00 54               LD   SP,STACK   
3AE8   CD 37 0F               CALL   coldInit   
3AEB   CD 63 52               CALL   execStr   
3AEE   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3AFE   E1                     POP   HL   
3AFF   E5                     PUSH   HL   
3B00   11 02 00               LD   DE,2   
3B03   B7                     OR   A   
3B04   ED 52                  SBC   HL,DE   
3B06   7D                     LD   A,L   
3B07   B4                     OR   H   
3B08   CA 67 3B               JP   Z,expectM_3036S143   
3B0B   CD 03 0F               CALL   printStr   
3B0E   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3B24   CD 03 0F               CALL   printStr   
3B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B36   21 02 00               LD   hl,2   
3B39   E5                     PUSH   hl   
3B3A   E5                     PUSH   hl   
3B3B   CD 00 10               CALL   run   
3B3E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B45   CD 03 0F               CALL   printStr   
3B48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B55   E1                     POP   hl   
3B56   E5                     PUSH   hl   
3B57   E5                     PUSH   hl   
3B58   CD 00 10               CALL   run   
3B5B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B66   76                     HALT      
3B67                EXPECTM_3036S143:      
3B67   E1                     POP   HL   
3B68                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3B68   31 00 54               LD   SP,STACK   
3B6B   CD 37 0F               CALL   coldInit   
3B6E   CD 63 52               CALL   execStr   
3B71   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3B88   E1                     POP   HL   
3B89   E5                     PUSH   HL   
3B8A   11 64 00               LD   DE,100   
3B8D   B7                     OR   A   
3B8E   ED 52                  SBC   HL,DE   
3B90   7D                     LD   A,L   
3B91   B4                     OR   H   
3B92   CA F8 3B               JP   Z,expectM_3037S144   
3B95   CD 03 0F               CALL   printStr   
3B98   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3BB5   CD 03 0F               CALL   printStr   
3BB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BC7   21 64 00               LD   hl,100   
3BCA   E5                     PUSH   hl   
3BCB   E5                     PUSH   hl   
3BCC   CD 00 10               CALL   run   
3BCF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3BD6   CD 03 0F               CALL   printStr   
3BD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BE6   E1                     POP   hl   
3BE7   E5                     PUSH   hl   
3BE8   E5                     PUSH   hl   
3BE9   CD 00 10               CALL   run   
3BEC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3BF7   76                     HALT      
3BF8                EXPECTM_3037S144:      
3BF8   E1                     POP   HL   
3BF9                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3BF9   31 00 54               LD   SP,STACK   
3BFC   CD 37 0F               CALL   coldInit   
3BFF   CD 63 52               CALL   execStr   
3C02   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3C1A   E1                     POP   HL   
3C1B   E5                     PUSH   HL   
3C1C   11 01 00               LD   DE,1   
3C1F   B7                     OR   A   
3C20   ED 52                  SBC   HL,DE   
3C22   7D                     LD   A,L   
3C23   B4                     OR   H   
3C24   CA 8B 3C               JP   Z,expectM_3038S145   
3C27   CD 03 0F               CALL   printStr   
3C2A   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3C48   CD 03 0F               CALL   printStr   
3C4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C5A   21 01 00               LD   hl,1   
3C5D   E5                     PUSH   hl   
3C5E   E5                     PUSH   hl   
3C5F   CD 00 10               CALL   run   
3C62   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C69   CD 03 0F               CALL   printStr   
3C6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C79   E1                     POP   hl   
3C7A   E5                     PUSH   hl   
3C7B   E5                     PUSH   hl   
3C7C   CD 00 10               CALL   run   
3C7F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C8A   76                     HALT      
3C8B                EXPECTM_3038S145:      
3C8B   E1                     POP   HL   
3C8C                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3C8C   31 00 54               LD   SP,STACK   
3C8F   CD 37 0F               CALL   coldInit   
3C92   CD 63 52               CALL   execStr   
3C95   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3CAE   E1                     POP   HL   
3CAF   E5                     PUSH   HL   
3CB0   11 02 00               LD   DE,2   
3CB3   B7                     OR   A   
3CB4   ED 52                  SBC   HL,DE   
3CB6   7D                     LD   A,L   
3CB7   B4                     OR   H   
3CB8   CA 20 3D               JP   Z,expectM_3039S146   
3CBB   CD 03 0F               CALL   printStr   
3CBE   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3CDD   CD 03 0F               CALL   printStr   
3CE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CEF   21 02 00               LD   hl,2   
3CF2   E5                     PUSH   hl   
3CF3   E5                     PUSH   hl   
3CF4   CD 00 10               CALL   run   
3CF7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3CFE   CD 03 0F               CALL   printStr   
3D01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D0E   E1                     POP   hl   
3D0F   E5                     PUSH   hl   
3D10   E5                     PUSH   hl   
3D11   CD 00 10               CALL   run   
3D14   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D1F   76                     HALT      
3D20                EXPECTM_3039S146:      
3D20   E1                     POP   HL   
3D21                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ?}^ +", 11
3D21   31 00 54               LD   SP,STACK   
3D24   CD 37 0F               CALL   coldInit   
3D27   CD 63 52               CALL   execStr   
3D2A   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ?}^ +",0   
3D47   E1                     POP   HL   
3D48   E5                     PUSH   HL   
3D49   11 0B 00               LD   DE,11   
3D4C   B7                     OR   A   
3D4D   ED 52                  SBC   HL,DE   
3D4F   7D                     LD   A,L   
3D50   B4                     OR   H   
3D51   CA BD 3D               JP   Z,expectM_3040S147   
3D54   CD 03 0F               CALL   printStr   
3D57   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ?}^ +"   
3D7A   CD 03 0F               CALL   printStr   
3D7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D8C   21 0B 00               LD   hl,11   
3D8F   E5                     PUSH   hl   
3D90   E5                     PUSH   hl   
3D91   CD 00 10               CALL   run   
3D94   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D9B   CD 03 0F               CALL   printStr   
3D9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DAB   E1                     POP   hl   
3DAC   E5                     PUSH   hl   
3DAD   E5                     PUSH   hl   
3DAE   CD 00 10               CALL   run   
3DB1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3DBC   76                     HALT      
3DBD                EXPECTM_3040S147:      
3DBD   E1                     POP   HL   
3DBE                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ?}^ +", 21
3DBE   31 00 54               LD   SP,STACK   
3DC1   CD 37 0F               CALL   coldInit   
3DC4   CD 63 52               CALL   execStr   
3DC7   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ?}^ +",0   
3DE4   E1                     POP   HL   
3DE5   E5                     PUSH   HL   
3DE6   11 15 00               LD   DE,21   
3DE9   B7                     OR   A   
3DEA   ED 52                  SBC   HL,DE   
3DEC   7D                     LD   A,L   
3DED   B4                     OR   H   
3DEE   CA 5A 3E               JP   Z,expectM_3041S148   
3DF1   CD 03 0F               CALL   printStr   
3DF4   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ?}^ +"   
3E17   CD 03 0F               CALL   printStr   
3E1A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E29   21 15 00               LD   hl,21   
3E2C   E5                     PUSH   hl   
3E2D   E5                     PUSH   hl   
3E2E   CD 00 10               CALL   run   
3E31   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E38   CD 03 0F               CALL   printStr   
3E3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E48   E1                     POP   hl   
3E49   E5                     PUSH   hl   
3E4A   E5                     PUSH   hl   
3E4B   CD 00 10               CALL   run   
3E4E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E59   76                     HALT      
3E5A                EXPECTM_3041S148:      
3E5A   E1                     POP   HL   
3E5B                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3E5B   31 00 54               LD   SP,STACK   
3E5E   CD 37 0F               CALL   coldInit   
3E61   CD 63 52               CALL   execStr   
3E64   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3E72   E1                     POP   HL   
3E73   E5                     PUSH   HL   
3E74   11 14 00               LD   DE,20   
3E77   B7                     OR   A   
3E78   ED 52                  SBC   HL,DE   
3E7A   7D                     LD   A,L   
3E7B   B4                     OR   H   
3E7C   CA D9 3E               JP   Z,expectM_3042S149   
3E7F   CD 03 0F               CALL   printStr   
3E82   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3E96   CD 03 0F               CALL   printStr   
3E99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EA8   21 14 00               LD   hl,20   
3EAB   E5                     PUSH   hl   
3EAC   E5                     PUSH   hl   
3EAD   CD 00 10               CALL   run   
3EB0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3EB7   CD 03 0F               CALL   printStr   
3EBA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EC7   E1                     POP   hl   
3EC8   E5                     PUSH   hl   
3EC9   E5                     PUSH   hl   
3ECA   CD 00 10               CALL   run   
3ECD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3ED8   76                     HALT      
3ED9                EXPECTM_3042S149:      
3ED9   E1                     POP   HL   
3EDA                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3EDA   31 00 54               LD   SP,STACK   
3EDD   CD 37 0F               CALL   coldInit   
3EE0   CD 63 52               CALL   execStr   
3EE3   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3EF5   E1                     POP   HL   
3EF6   E5                     PUSH   HL   
3EF7   11 04 00               LD   DE,4   
3EFA   B7                     OR   A   
3EFB   ED 52                  SBC   HL,DE   
3EFD   7D                     LD   A,L   
3EFE   B4                     OR   H   
3EFF   CA 60 3F               JP   Z,expectM_3043S150   
3F02   CD 03 0F               CALL   printStr   
3F05   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3F1D   CD 03 0F               CALL   printStr   
3F20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F2F   21 04 00               LD   hl,4   
3F32   E5                     PUSH   hl   
3F33   E5                     PUSH   hl   
3F34   CD 00 10               CALL   run   
3F37   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F3E   CD 03 0F               CALL   printStr   
3F41   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F4E   E1                     POP   hl   
3F4F   E5                     PUSH   hl   
3F50   E5                     PUSH   hl   
3F51   CD 00 10               CALL   run   
3F54   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F5F   76                     HALT      
3F60                EXPECTM_3043S150:      
3F60   E1                     POP   HL   
3F61                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3F61   31 00 54               LD   SP,STACK   
3F64   CD 37 0F               CALL   coldInit   
3F67   CD 63 52               CALL   execStr   
3F6A   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3F79   E1                     POP   HL   
3F7A   E5                     PUSH   HL   
3F7B   11 02 00               LD   DE,2   
3F7E   B7                     OR   A   
3F7F   ED 52                  SBC   HL,DE   
3F81   7D                     LD   A,L   
3F82   B4                     OR   H   
3F83   CA E1 3F               JP   Z,expectM_3044S151   
3F86   CD 03 0F               CALL   printStr   
3F89   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3F9E   CD 03 0F               CALL   printStr   
3FA1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FB0   21 02 00               LD   hl,2   
3FB3   E5                     PUSH   hl   
3FB4   E5                     PUSH   hl   
3FB5   CD 00 10               CALL   run   
3FB8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3FBF   CD 03 0F               CALL   printStr   
3FC2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FCF   E1                     POP   hl   
3FD0   E5                     PUSH   hl   
3FD1   E5                     PUSH   hl   
3FD2   CD 00 10               CALL   run   
3FD5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3FE0   76                     HALT      
3FE1                EXPECTM_3044S151:      
3FE1   E1                     POP   HL   
3FE2                          ;*Macro unroll:  test "/bm [_A _B _C] 1#", 66
3FE2   31 00 54               LD   SP,STACK   
3FE5   CD 37 0F               CALL   coldInit   
3FE8   CD 63 52               CALL   execStr   
3FEB   2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 DB   "/bm [_A _B _C] 1#",0   
3FFD   E1                     POP   HL   
3FFE   E5                     PUSH   HL   
3FFF   11 42 00               LD   DE,66   
4002   B7                     OR   A   
4003   ED 52                  SBC   HL,DE   
4005   7D                     LD   A,L   
4006   B4                     OR   H   
4007   CA 68 40               JP   Z,expectM_3045S152   
400A   CD 03 0F               CALL   printStr   
400D   43 6F 64 65 3A 20 2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [_A _B _C] 1#"   
4025   CD 03 0F               CALL   printStr   
4028   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4037   21 42 00               LD   hl,66   
403A   E5                     PUSH   hl   
403B   E5                     PUSH   hl   
403C   CD 00 10               CALL   run   
403F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4046   CD 03 0F               CALL   printStr   
4049   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4056   E1                     POP   hl   
4057   E5                     PUSH   hl   
4058   E5                     PUSH   hl   
4059   CD 00 10               CALL   run   
405C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4067   76                     HALT      
4068                EXPECTM_3045S152:      
4068   E1                     POP   HL   
4069                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
4069   31 00 54               LD   SP,STACK   
406C   CD 37 0F               CALL   coldInit   
406F   CD 63 52               CALL   execStr   
4072   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
4086   E1                     POP   HL   
4087   E5                     PUSH   HL   
4088   11 0A 00               LD   DE,10   
408B   B7                     OR   A   
408C   ED 52                  SBC   HL,DE   
408E   7D                     LD   A,L   
408F   B4                     OR   H   
4090   CA F3 40               JP   Z,expectM_3046S153   
4093   CD 03 0F               CALL   printStr   
4096   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
40B0   CD 03 0F               CALL   printStr   
40B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40C2   21 0A 00               LD   hl,10   
40C5   E5                     PUSH   hl   
40C6   E5                     PUSH   hl   
40C7   CD 00 10               CALL   run   
40CA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
40D1   CD 03 0F               CALL   printStr   
40D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40E1   E1                     POP   hl   
40E2   E5                     PUSH   hl   
40E3   E5                     PUSH   hl   
40E4   CD 00 10               CALL   run   
40E7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
40F2   76                     HALT      
40F3                EXPECTM_3046S153:      
40F3   E1                     POP   HL   
40F4                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
40F4   31 00 54               LD   SP,STACK   
40F7   CD 37 0F               CALL   coldInit   
40FA   CD 63 52               CALL   execStr   
40FD   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
4118   E1                     POP   HL   
4119   E5                     PUSH   HL   
411A   11 0A 00               LD   DE,10   
411D   B7                     OR   A   
411E   ED 52                  SBC   HL,DE   
4120   7D                     LD   A,L   
4121   B4                     OR   H   
4122   CA 8C 41               JP   Z,expectM_3047S154   
4125   CD 03 0F               CALL   printStr   
4128   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
4149   CD 03 0F               CALL   printStr   
414C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
415B   21 0A 00               LD   hl,10   
415E   E5                     PUSH   hl   
415F   E5                     PUSH   hl   
4160   CD 00 10               CALL   run   
4163   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
416A   CD 03 0F               CALL   printStr   
416D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
417A   E1                     POP   hl   
417B   E5                     PUSH   hl   
417C   E5                     PUSH   hl   
417D   CD 00 10               CALL   run   
4180   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
418B   76                     HALT      
418C                EXPECTM_3047S154:      
418C   E1                     POP   HL   
418D                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
418D   31 00 54               LD   SP,STACK   
4190   CD 37 0F               CALL   coldInit   
4193   CD 63 52               CALL   execStr   
4196   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
41B5   E1                     POP   HL   
41B6   E5                     PUSH   HL   
41B7   11 0A 00               LD   DE,10   
41BA   B7                     OR   A   
41BB   ED 52                  SBC   HL,DE   
41BD   7D                     LD   A,L   
41BE   B4                     OR   H   
41BF   CA 2D 42               JP   Z,expectM_3048S155   
41C2   CD 03 0F               CALL   printStr   
41C5   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
41EA   CD 03 0F               CALL   printStr   
41ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41FC   21 0A 00               LD   hl,10   
41FF   E5                     PUSH   hl   
4200   E5                     PUSH   hl   
4201   CD 00 10               CALL   run   
4204   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
420B   CD 03 0F               CALL   printStr   
420E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
421B   E1                     POP   hl   
421C   E5                     PUSH   hl   
421D   E5                     PUSH   hl   
421E   CD 00 10               CALL   run   
4221   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
422C   76                     HALT      
422D                EXPECTM_3048S155:      
422D   E1                     POP   HL   
422E                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
422E   31 00 54               LD   SP,STACK   
4231   CD 37 0F               CALL   coldInit   
4234   CD 63 52               CALL   execStr   
4237   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
4256   E1                     POP   HL   
4257   E5                     PUSH   HL   
4258   11 14 00               LD   DE,20   
425B   B7                     OR   A   
425C   ED 52                  SBC   HL,DE   
425E   7D                     LD   A,L   
425F   B4                     OR   H   
4260   CA CE 42               JP   Z,expectM_3049S156   
4263   CD 03 0F               CALL   printStr   
4266   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
428B   CD 03 0F               CALL   printStr   
428E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
429D   21 14 00               LD   hl,20   
42A0   E5                     PUSH   hl   
42A1   E5                     PUSH   hl   
42A2   CD 00 10               CALL   run   
42A5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42AC   CD 03 0F               CALL   printStr   
42AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42BC   E1                     POP   hl   
42BD   E5                     PUSH   hl   
42BE   E5                     PUSH   hl   
42BF   CD 00 10               CALL   run   
42C2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
42CD   76                     HALT      
42CE                EXPECTM_3049S156:      
42CE   E1                     POP   HL   
42CF                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
42CF   31 00 54               LD   SP,STACK   
42D2   CD 37 0F               CALL   coldInit   
42D5   CD 63 52               CALL   execStr   
42D8   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
42F0   E1                     POP   HL   
42F1   E5                     PUSH   HL   
42F2   11 06 00               LD   DE,6   
42F5   B7                     OR   A   
42F6   ED 52                  SBC   HL,DE   
42F8   7D                     LD   A,L   
42F9   B4                     OR   H   
42FA   CA 61 43               JP   Z,expectM_3050S157   
42FD   CD 03 0F               CALL   printStr   
4300   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
431E   CD 03 0F               CALL   printStr   
4321   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4330   21 06 00               LD   hl,6   
4333   E5                     PUSH   hl   
4334   E5                     PUSH   hl   
4335   CD 00 10               CALL   run   
4338   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
433F   CD 03 0F               CALL   printStr   
4342   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
434F   E1                     POP   hl   
4350   E5                     PUSH   hl   
4351   E5                     PUSH   hl   
4352   CD 00 10               CALL   run   
4355   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4360   76                     HALT      
4361                EXPECTM_3050S157:      
4361   E1                     POP   HL   
4362                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4362   31 00 54               LD   SP,STACK   
4365   CD 37 0F               CALL   coldInit   
4368   CD 63 52               CALL   execStr   
436B   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4386   E1                     POP   HL   
4387   E5                     PUSH   HL   
4388   11 02 00               LD   DE,2   
438B   B7                     OR   A   
438C   ED 52                  SBC   HL,DE   
438E   7D                     LD   A,L   
438F   B4                     OR   H   
4390   CA FA 43               JP   Z,expectM_3051S158   
4393   CD 03 0F               CALL   printStr   
4396   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
43B7   CD 03 0F               CALL   printStr   
43BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C9   21 02 00               LD   hl,2   
43CC   E5                     PUSH   hl   
43CD   E5                     PUSH   hl   
43CE   CD 00 10               CALL   run   
43D1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
43D8   CD 03 0F               CALL   printStr   
43DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E8   E1                     POP   hl   
43E9   E5                     PUSH   hl   
43EA   E5                     PUSH   hl   
43EB   CD 00 10               CALL   run   
43EE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
43F9   76                     HALT      
43FA                EXPECTM_3051S158:      
43FA   E1                     POP   HL   
43FB                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
43FB   31 00 54               LD   SP,STACK   
43FE   CD 37 0F               CALL   coldInit   
4401   CD 63 52               CALL   execStr   
4404   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
442A   E1                     POP   HL   
442B   E5                     PUSH   HL   
442C   11 0A 00               LD   DE,10   
442F   B7                     OR   A   
4430   ED 52                  SBC   HL,DE   
4432   7D                     LD   A,L   
4433   B4                     OR   H   
4434   CA A9 44               JP   Z,expectM_3052S159   
4437   CD 03 0F               CALL   printStr   
443A   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4466   CD 03 0F               CALL   printStr   
4469   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4478   21 0A 00               LD   hl,10   
447B   E5                     PUSH   hl   
447C   E5                     PUSH   hl   
447D   CD 00 10               CALL   run   
4480   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4487   CD 03 0F               CALL   printStr   
448A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4497   E1                     POP   hl   
4498   E5                     PUSH   hl   
4499   E5                     PUSH   hl   
449A   CD 00 10               CALL   run   
449D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
44A8   76                     HALT      
44A9                EXPECTM_3052S159:      
44A9   E1                     POP   HL   
44AA                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /br )^ j ", 10
44AA   31 00 54               LD   SP,STACK   
44AD   CD 37 0F               CALL   coldInit   
44B0   CD 63 52               CALL   execStr   
44B3   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /br )^ j ",0   
44D6   E1                     POP   HL   
44D7   E5                     PUSH   HL   
44D8   11 0A 00               LD   DE,10   
44DB   B7                     OR   A   
44DC   ED 52                  SBC   HL,DE   
44DE   7D                     LD   A,L   
44DF   B4                     OR   H   
44E0   CA 52 45               JP   Z,expectM_3053S160   
44E3   CD 03 0F               CALL   printStr   
44E6   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /br )^ j "   
450F   CD 03 0F               CALL   printStr   
4512   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4521   21 0A 00               LD   hl,10   
4524   E5                     PUSH   hl   
4525   E5                     PUSH   hl   
4526   CD 00 10               CALL   run   
4529   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4530   CD 03 0F               CALL   printStr   
4533   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4540   E1                     POP   hl   
4541   E5                     PUSH   hl   
4542   E5                     PUSH   hl   
4543   CD 00 10               CALL   run   
4546   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4551   76                     HALT      
4552                EXPECTM_3053S160:      
4552   E1                     POP   HL   
4553                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t", 12
4553   31 00 54               LD   SP,STACK   
4556   CD 37 0F               CALL   coldInit   
4559   CD 63 52               CALL   execStr   
455C   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t",0   
4586   E1                     POP   HL   
4587   E5                     PUSH   HL   
4588   11 0C 00               LD   DE,12   
458B   B7                     OR   A   
458C   ED 52                  SBC   HL,DE   
458E   7D                     LD   A,L   
458F   B4                     OR   H   
4590   CA 09 46               JP   Z,expectM_3054S161   
4593   CD 03 0F               CALL   printStr   
4596   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t"   
45C6   CD 03 0F               CALL   printStr   
45C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45D8   21 0C 00               LD   hl,12   
45DB   E5                     PUSH   hl   
45DC   E5                     PUSH   hl   
45DD   CD 00 10               CALL   run   
45E0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
45E7   CD 03 0F               CALL   printStr   
45EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45F7   E1                     POP   hl   
45F8   E5                     PUSH   hl   
45F9   E5                     PUSH   hl   
45FA   CD 00 10               CALL   run   
45FD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4608   76                     HALT      
4609                EXPECTM_3054S161:      
4609   E1                     POP   HL   
460A                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
460A   31 00 54               LD   SP,STACK   
460D   CD 37 0F               CALL   coldInit   
4610   CD 63 52               CALL   execStr   
4613   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
463E   E1                     POP   HL   
463F   E5                     PUSH   HL   
4640   11 06 00               LD   DE,6   
4643   B7                     OR   A   
4644   ED 52                  SBC   HL,DE   
4646   7D                     LD   A,L   
4647   B4                     OR   H   
4648   CA C2 46               JP   Z,expectM_3055S162   
464B   CD 03 0F               CALL   printStr   
464E   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
467F   CD 03 0F               CALL   printStr   
4682   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4691   21 06 00               LD   hl,6   
4694   E5                     PUSH   hl   
4695   E5                     PUSH   hl   
4696   CD 00 10               CALL   run   
4699   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
46A0   CD 03 0F               CALL   printStr   
46A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46B0   E1                     POP   hl   
46B1   E5                     PUSH   hl   
46B2   E5                     PUSH   hl   
46B3   CD 00 10               CALL   run   
46B6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
46C1   76                     HALT      
46C2                EXPECTM_3055S162:      
46C2   E1                     POP   HL   
46C3                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
46C3   31 00 54               LD   SP,STACK   
46C6   CD 37 0F               CALL   coldInit   
46C9   CD 63 52               CALL   execStr   
46CC   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
46E0   E1                     POP   HL   
46E1   E5                     PUSH   HL   
46E2   11 03 00               LD   DE,3   
46E5   B7                     OR   A   
46E6   ED 52                  SBC   HL,DE   
46E8   7D                     LD   A,L   
46E9   B4                     OR   H   
46EA   CA 4D 47               JP   Z,expectM_3056S163   
46ED   CD 03 0F               CALL   printStr   
46F0   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
470A   CD 03 0F               CALL   printStr   
470D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
471C   21 03 00               LD   hl,3   
471F   E5                     PUSH   hl   
4720   E5                     PUSH   hl   
4721   CD 00 10               CALL   run   
4724   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
472B   CD 03 0F               CALL   printStr   
472E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
473B   E1                     POP   hl   
473C   E5                     PUSH   hl   
473D   E5                     PUSH   hl   
473E   CD 00 10               CALL   run   
4741   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
474C   76                     HALT      
474D                EXPECTM_3056S163:      
474D   E1                     POP   HL   
474E                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
474E   31 00 54               LD   SP,STACK   
4751   CD 37 0F               CALL   coldInit   
4754   CD 63 52               CALL   execStr   
4757   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
476B   E1                     POP   HL   
476C   E5                     PUSH   HL   
476D   11 01 00               LD   DE,1   
4770   B7                     OR   A   
4771   ED 52                  SBC   HL,DE   
4773   7D                     LD   A,L   
4774   B4                     OR   H   
4775   CA D8 47               JP   Z,expectM_3057S164   
4778   CD 03 0F               CALL   printStr   
477B   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
4795   CD 03 0F               CALL   printStr   
4798   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A7   21 01 00               LD   hl,1   
47AA   E5                     PUSH   hl   
47AB   E5                     PUSH   hl   
47AC   CD 00 10               CALL   run   
47AF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
47B6   CD 03 0F               CALL   printStr   
47B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47C6   E1                     POP   hl   
47C7   E5                     PUSH   hl   
47C8   E5                     PUSH   hl   
47C9   CD 00 10               CALL   run   
47CC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
47D7   76                     HALT      
47D8                EXPECTM_3057S164:      
47D8   E1                     POP   HL   
47D9                          ;*Macro unroll:  test "_A 1 - /ad", NUL
47D9   31 00 54               LD   SP,STACK   
47DC   CD 37 0F               CALL   coldInit   
47DF   CD 63 52               CALL   execStr   
47E2   5F 41 20 31 20 2D 20 2F 61 64 00 DB   "_A 1 - /ad",0   
47ED   E1                     POP   HL   
47EE   E5                     PUSH   HL   
47EF   11 00 00               LD   DE,NUL   
47F2   B7                     OR   A   
47F3   ED 52                  SBC   HL,DE   
47F5   7D                     LD   A,L   
47F6   B4                     OR   H   
47F7   CA 51 48               JP   Z,expectM_3058S165   
47FA   CD 03 0F               CALL   printStr   
47FD   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_A 1 - /ad"   
480E   CD 03 0F               CALL   printStr   
4811   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4820   21 00 00               LD   hl,NUL   
4823   E5                     PUSH   hl   
4824   E5                     PUSH   hl   
4825   CD 00 10               CALL   run   
4828   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
482F   CD 03 0F               CALL   printStr   
4832   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
483F   E1                     POP   hl   
4840   E5                     PUSH   hl   
4841   E5                     PUSH   hl   
4842   CD 00 10               CALL   run   
4845   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4850   76                     HALT      
4851                EXPECTM_3058S165:      
4851   E1                     POP   HL   
4852                          ;*Macro unroll:  test "_Z 1 + /ad", NUL
4852   31 00 54               LD   SP,STACK   
4855   CD 37 0F               CALL   coldInit   
4858   CD 63 52               CALL   execStr   
485B   5F 5A 20 31 20 2B 20 2F 61 64 00 DB   "_Z 1 + /ad",0   
4866   E1                     POP   HL   
4867   E5                     PUSH   HL   
4868   11 00 00               LD   DE,NUL   
486B   B7                     OR   A   
486C   ED 52                  SBC   HL,DE   
486E   7D                     LD   A,L   
486F   B4                     OR   H   
4870   CA CA 48               JP   Z,expectM_3059S166   
4873   CD 03 0F               CALL   printStr   
4876   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_Z 1 + /ad"   
4887   CD 03 0F               CALL   printStr   
488A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4899   21 00 00               LD   hl,NUL   
489C   E5                     PUSH   hl   
489D   E5                     PUSH   hl   
489E   CD 00 10               CALL   run   
48A1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
48A8   CD 03 0F               CALL   printStr   
48AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48B8   E1                     POP   hl   
48B9   E5                     PUSH   hl   
48BA   E5                     PUSH   hl   
48BB   CD 00 10               CALL   run   
48BE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
48C9   76                     HALT      
48CA                EXPECTM_3059S166:      
48CA   E1                     POP   HL   
48CB                          ;*Macro unroll:  test "_a 1 - /ad", NUL
48CB   31 00 54               LD   SP,STACK   
48CE   CD 37 0F               CALL   coldInit   
48D1   CD 63 52               CALL   execStr   
48D4   5F 61 20 31 20 2D 20 2F 61 64 00 DB   "_a 1 - /ad",0   
48DF   E1                     POP   HL   
48E0   E5                     PUSH   HL   
48E1   11 00 00               LD   DE,NUL   
48E4   B7                     OR   A   
48E5   ED 52                  SBC   HL,DE   
48E7   7D                     LD   A,L   
48E8   B4                     OR   H   
48E9   CA 43 49               JP   Z,expectM_3060S167   
48EC   CD 03 0F               CALL   printStr   
48EF   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_a 1 - /ad"   
4900   CD 03 0F               CALL   printStr   
4903   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4912   21 00 00               LD   hl,NUL   
4915   E5                     PUSH   hl   
4916   E5                     PUSH   hl   
4917   CD 00 10               CALL   run   
491A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4921   CD 03 0F               CALL   printStr   
4924   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4931   E1                     POP   hl   
4932   E5                     PUSH   hl   
4933   E5                     PUSH   hl   
4934   CD 00 10               CALL   run   
4937   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4942   76                     HALT      
4943                EXPECTM_3060S167:      
4943   E1                     POP   HL   
4944                          ;*Macro unroll:  test "_z 1 + /ad", NUL
4944   31 00 54               LD   SP,STACK   
4947   CD 37 0F               CALL   coldInit   
494A   CD 63 52               CALL   execStr   
494D   5F 7A 20 31 20 2B 20 2F 61 64 00 DB   "_z 1 + /ad",0   
4958   E1                     POP   HL   
4959   E5                     PUSH   HL   
495A   11 00 00               LD   DE,NUL   
495D   B7                     OR   A   
495E   ED 52                  SBC   HL,DE   
4960   7D                     LD   A,L   
4961   B4                     OR   H   
4962   CA BC 49               JP   Z,expectM_3061S168   
4965   CD 03 0F               CALL   printStr   
4968   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_z 1 + /ad"   
4979   CD 03 0F               CALL   printStr   
497C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
498B   21 00 00               LD   hl,NUL   
498E   E5                     PUSH   hl   
498F   E5                     PUSH   hl   
4990   CD 00 10               CALL   run   
4993   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
499A   CD 03 0F               CALL   printStr   
499D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49AA   E1                     POP   hl   
49AB   E5                     PUSH   hl   
49AC   E5                     PUSH   hl   
49AD   CD 00 10               CALL   run   
49B0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
49BB   76                     HALT      
49BC                EXPECTM_3061S168:      
49BC   E1                     POP   HL   
49BD                          ;*Macro unroll:  test "_z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
49BD   31 00 54               LD   SP,STACK   
49C0   CD 37 0F               CALL   coldInit   
49C3   CD 63 52               CALL   execStr   
49C6   5F 7A 20 2F 61 64 00   DB   "_z /ad",0   
49CD   E1                     POP   HL   
49CE   E5                     PUSH   HL   
49CF   11 66 56               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49D2   B7                     OR   A   
49D3   ED 52                  SBC   HL,DE   
49D5   7D                     LD   A,L   
49D6   B4                     OR   H   
49D7   CA 2D 4A               JP   Z,expectM_3062S169   
49DA   CD 03 0F               CALL   printStr   
49DD   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 00 .CSTR   "Code: ","_z /ad"   
49EA   CD 03 0F               CALL   printStr   
49ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49FC   21 66 56               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49FF   E5                     PUSH   hl   
4A00   E5                     PUSH   hl   
4A01   CD 00 10               CALL   run   
4A04   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A0B   CD 03 0F               CALL   printStr   
4A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A1B   E1                     POP   hl   
4A1C   E5                     PUSH   hl   
4A1D   E5                     PUSH   hl   
4A1E   CD 00 10               CALL   run   
4A21   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A2C   76                     HALT      
4A2D                EXPECTM_3062S169:      
4A2D   E1                     POP   HL   
4A2E                          ;*Macro unroll:  test "_a /ad", VARS + ("Z"-"A"+1)*2
4A2E   31 00 54               LD   SP,STACK   
4A31   CD 37 0F               CALL   coldInit   
4A34   CD 63 52               CALL   execStr   
4A37   5F 61 20 2F 61 64 00   DB   "_a /ad",0   
4A3E   E1                     POP   HL   
4A3F   E5                     PUSH   HL   
4A40   11 34 56               LD   DE,VARS + ("Z"-"A"+1)*2   
4A43   B7                     OR   A   
4A44   ED 52                  SBC   HL,DE   
4A46   7D                     LD   A,L   
4A47   B4                     OR   H   
4A48   CA 9E 4A               JP   Z,expectM_3063S170   
4A4B   CD 03 0F               CALL   printStr   
4A4E   43 6F 64 65 3A 20 5F 61 20 2F 61 64 00 .CSTR   "Code: ","_a /ad"   
4A5B   CD 03 0F               CALL   printStr   
4A5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A6D   21 34 56               LD   hl,VARS + ("Z"-"A"+1)*2   
4A70   E5                     PUSH   hl   
4A71   E5                     PUSH   hl   
4A72   CD 00 10               CALL   run   
4A75   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A7C   CD 03 0F               CALL   printStr   
4A7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A8C   E1                     POP   hl   
4A8D   E5                     PUSH   hl   
4A8E   E5                     PUSH   hl   
4A8F   CD 00 10               CALL   run   
4A92   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A9D   76                     HALT      
4A9E                EXPECTM_3063S170:      
4A9E   E1                     POP   HL   
4A9F                          ;*Macro unroll:  test "_Z /ad", VARS + ("Z"-"A")*2
4A9F   31 00 54               LD   SP,STACK   
4AA2   CD 37 0F               CALL   coldInit   
4AA5   CD 63 52               CALL   execStr   
4AA8   5F 5A 20 2F 61 64 00   DB   "_Z /ad",0   
4AAF   E1                     POP   HL   
4AB0   E5                     PUSH   HL   
4AB1   11 32 56               LD   DE,VARS + ("Z"-"A")*2   
4AB4   B7                     OR   A   
4AB5   ED 52                  SBC   HL,DE   
4AB7   7D                     LD   A,L   
4AB8   B4                     OR   H   
4AB9   CA 0F 4B               JP   Z,expectM_3064S171   
4ABC   CD 03 0F               CALL   printStr   
4ABF   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 00 .CSTR   "Code: ","_Z /ad"   
4ACC   CD 03 0F               CALL   printStr   
4ACF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ADE   21 32 56               LD   hl,VARS + ("Z"-"A")*2   
4AE1   E5                     PUSH   hl   
4AE2   E5                     PUSH   hl   
4AE3   CD 00 10               CALL   run   
4AE6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4AED   CD 03 0F               CALL   printStr   
4AF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AFD   E1                     POP   hl   
4AFE   E5                     PUSH   hl   
4AFF   E5                     PUSH   hl   
4B00   CD 00 10               CALL   run   
4B03   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B0E   76                     HALT      
4B0F                EXPECTM_3064S171:      
4B0F   E1                     POP   HL   
4B10                          ;*Macro unroll:  test "_A /ad", VARS
4B10   31 00 54               LD   SP,STACK   
4B13   CD 37 0F               CALL   coldInit   
4B16   CD 63 52               CALL   execStr   
4B19   5F 41 20 2F 61 64 00   DB   "_A /ad",0   
4B20   E1                     POP   HL   
4B21   E5                     PUSH   HL   
4B22   11 00 56               LD   DE,VARS   
4B25   B7                     OR   A   
4B26   ED 52                  SBC   HL,DE   
4B28   7D                     LD   A,L   
4B29   B4                     OR   H   
4B2A   CA 80 4B               JP   Z,expectM_3065S172   
4B2D   CD 03 0F               CALL   printStr   
4B30   43 6F 64 65 3A 20 5F 41 20 2F 61 64 00 .CSTR   "Code: ","_A /ad"   
4B3D   CD 03 0F               CALL   printStr   
4B40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B4F   21 00 56               LD   hl,VARS   
4B52   E5                     PUSH   hl   
4B53   E5                     PUSH   hl   
4B54   CD 00 10               CALL   run   
4B57   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4B5E   CD 03 0F               CALL   printStr   
4B61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B6E   E1                     POP   hl   
4B6F   E5                     PUSH   hl   
4B70   E5                     PUSH   hl   
4B71   CD 00 10               CALL   run   
4B74   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B7F   76                     HALT      
4B80                EXPECTM_3065S172:      
4B80   E1                     POP   HL   
4B81                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4B81   31 00 54               LD   SP,STACK   
4B84   CD 37 0F               CALL   coldInit   
4B87   CD 63 52               CALL   execStr   
4B8A   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4B97   E1                     POP   HL   
4B98   E5                     PUSH   HL   
4B99   11 01 00               LD   DE,1   
4B9C   B7                     OR   A   
4B9D   ED 52                  SBC   HL,DE   
4B9F   7D                     LD   A,L   
4BA0   B4                     OR   H   
4BA1   CA FD 4B               JP   Z,expectM_3066S173   
4BA4   CD 03 0F               CALL   printStr   
4BA7   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4BBA   CD 03 0F               CALL   printStr   
4BBD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BCC   21 01 00               LD   hl,1   
4BCF   E5                     PUSH   hl   
4BD0   E5                     PUSH   hl   
4BD1   CD 00 10               CALL   run   
4BD4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4BDB   CD 03 0F               CALL   printStr   
4BDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BEB   E1                     POP   hl   
4BEC   E5                     PUSH   hl   
4BED   E5                     PUSH   hl   
4BEE   CD 00 10               CALL   run   
4BF1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4BFC   76                     HALT      
4BFD                EXPECTM_3066S173:      
4BFD   E1                     POP   HL   
4BFE                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4BFE   31 00 54               LD   SP,STACK   
4C01   CD 37 0F               CALL   coldInit   
4C04   CD 63 52               CALL   execStr   
4C07   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4C1B   E1                     POP   HL   
4C1C   E5                     PUSH   HL   
4C1D   11 03 00               LD   DE,3   
4C20   B7                     OR   A   
4C21   ED 52                  SBC   HL,DE   
4C23   7D                     LD   A,L   
4C24   B4                     OR   H   
4C25   CA 88 4C               JP   Z,expectM_3067S174   
4C28   CD 03 0F               CALL   printStr   
4C2B   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4C45   CD 03 0F               CALL   printStr   
4C48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C57   21 03 00               LD   hl,3   
4C5A   E5                     PUSH   hl   
4C5B   E5                     PUSH   hl   
4C5C   CD 00 10               CALL   run   
4C5F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4C66   CD 03 0F               CALL   printStr   
4C69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C76   E1                     POP   hl   
4C77   E5                     PUSH   hl   
4C78   E5                     PUSH   hl   
4C79   CD 00 10               CALL   run   
4C7C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4C87   76                     HALT      
4C88                EXPECTM_3067S174:      
4C88   E1                     POP   HL   
4C89                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4C89   31 00 54               LD   SP,STACK   
4C8C   CD 37 0F               CALL   coldInit   
4C8F   CD 63 52               CALL   execStr   
4C92   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4CA9   E1                     POP   HL   
4CAA   E5                     PUSH   HL   
4CAB   11 02 00               LD   DE,2   
4CAE   B7                     OR   A   
4CAF   ED 52                  SBC   HL,DE   
4CB1   7D                     LD   A,L   
4CB2   B4                     OR   H   
4CB3   CA 19 4D               JP   Z,expectM_3068S175   
4CB6   CD 03 0F               CALL   printStr   
4CB9   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4CD6   CD 03 0F               CALL   printStr   
4CD9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CE8   21 02 00               LD   hl,2   
4CEB   E5                     PUSH   hl   
4CEC   E5                     PUSH   hl   
4CED   CD 00 10               CALL   run   
4CF0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4CF7   CD 03 0F               CALL   printStr   
4CFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D07   E1                     POP   hl   
4D08   E5                     PUSH   hl   
4D09   E5                     PUSH   hl   
4D0A   CD 00 10               CALL   run   
4D0D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4D18   76                     HALT      
4D19                EXPECTM_3068S175:      
4D19   E1                     POP   HL   
4D1A                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4D1A   31 00 54               LD   SP,STACK   
4D1D   CD 37 0F               CALL   coldInit   
4D20   CD 63 52               CALL   execStr   
4D23   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4D46   E1                     POP   HL   
4D47   E5                     PUSH   HL   
4D48   11 01 00               LD   DE,1   
4D4B   B7                     OR   A   
4D4C   ED 52                  SBC   HL,DE   
4D4E   7D                     LD   A,L   
4D4F   B4                     OR   H   
4D50   CA C2 4D               JP   Z,expectM_3069S176   
4D53   CD 03 0F               CALL   printStr   
4D56   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4D7F   CD 03 0F               CALL   printStr   
4D82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D91   21 01 00               LD   hl,1   
4D94   E5                     PUSH   hl   
4D95   E5                     PUSH   hl   
4D96   CD 00 10               CALL   run   
4D99   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4DA0   CD 03 0F               CALL   printStr   
4DA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DB0   E1                     POP   hl   
4DB1   E5                     PUSH   hl   
4DB2   E5                     PUSH   hl   
4DB3   CD 00 10               CALL   run   
4DB6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4DC1   76                     HALT      
4DC2                EXPECTM_3069S176:      
4DC2   E1                     POP   HL   
4DC3                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4DC3   31 00 54               LD   SP,STACK   
4DC6   CD 37 0F               CALL   coldInit   
4DC9   CD 63 52               CALL   execStr   
4DCC   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4DEF   E1                     POP   HL   
4DF0   E5                     PUSH   HL   
4DF1   11 01 00               LD   DE,1   
4DF4   B7                     OR   A   
4DF5   ED 52                  SBC   HL,DE   
4DF7   7D                     LD   A,L   
4DF8   B4                     OR   H   
4DF9   CA 6B 4E               JP   Z,expectM_3070S177   
4DFC   CD 03 0F               CALL   printStr   
4DFF   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4E28   CD 03 0F               CALL   printStr   
4E2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E3A   21 01 00               LD   hl,1   
4E3D   E5                     PUSH   hl   
4E3E   E5                     PUSH   hl   
4E3F   CD 00 10               CALL   run   
4E42   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4E49   CD 03 0F               CALL   printStr   
4E4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E59   E1                     POP   hl   
4E5A   E5                     PUSH   hl   
4E5B   E5                     PUSH   hl   
4E5C   CD 00 10               CALL   run   
4E5F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4E6A   76                     HALT      
4E6B                EXPECTM_3070S177:      
4E6B   E1                     POP   HL   
4E6C                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4E6C   31 00 54               LD   SP,STACK   
4E6F   CD 37 0F               CALL   coldInit   
4E72   CD 63 52               CALL   execStr   
4E75   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4EA5   E1                     POP   HL   
4EA6   E5                     PUSH   HL   
4EA7   11 02 00               LD   DE,2   
4EAA   B7                     OR   A   
4EAB   ED 52                  SBC   HL,DE   
4EAD   7D                     LD   A,L   
4EAE   B4                     OR   H   
4EAF   CA 2E 4F               JP   Z,expectM_3071S178   
4EB2   CD 03 0F               CALL   printStr   
4EB5   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4EEB   CD 03 0F               CALL   printStr   
4EEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EFD   21 02 00               LD   hl,2   
4F00   E5                     PUSH   hl   
4F01   E5                     PUSH   hl   
4F02   CD 00 10               CALL   run   
4F05   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4F0C   CD 03 0F               CALL   printStr   
4F0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F1C   E1                     POP   hl   
4F1D   E5                     PUSH   hl   
4F1E   E5                     PUSH   hl   
4F1F   CD 00 10               CALL   run   
4F22   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4F2D   76                     HALT      
4F2E                EXPECTM_3071S178:      
4F2E   E1                     POP   HL   
4F2F                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4F2F   31 00 54               LD   SP,STACK   
4F32   CD 37 0F               CALL   coldInit   
4F35   CD 63 52               CALL   execStr   
4F38   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4F4D   E1                     POP   HL   
4F4E   E5                     PUSH   HL   
4F4F   11 02 00               LD   DE,2   
4F52   B7                     OR   A   
4F53   ED 52                  SBC   HL,DE   
4F55   7D                     LD   A,L   
4F56   B4                     OR   H   
4F57   CA BB 4F               JP   Z,expectM_3072S179   
4F5A   CD 03 0F               CALL   printStr   
4F5D   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4F78   CD 03 0F               CALL   printStr   
4F7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F8A   21 02 00               LD   hl,2   
4F8D   E5                     PUSH   hl   
4F8E   E5                     PUSH   hl   
4F8F   CD 00 10               CALL   run   
4F92   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4F99   CD 03 0F               CALL   printStr   
4F9C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FA9   E1                     POP   hl   
4FAA   E5                     PUSH   hl   
4FAB   E5                     PUSH   hl   
4FAC   CD 00 10               CALL   run   
4FAF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4FBA   76                     HALT      
4FBB                EXPECTM_3072S179:      
4FBB   E1                     POP   HL   
4FBC                          ;*Macro unroll:  test "'hello'/sl",5
4FBC   31 00 54               LD   SP,STACK   
4FBF   CD 37 0F               CALL   coldInit   
4FC2   CD 63 52               CALL   execStr   
4FC5   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
4FD0   E1                     POP   HL   
4FD1   E5                     PUSH   HL   
4FD2   11 05 00               LD   DE,5   
4FD5   B7                     OR   A   
4FD6   ED 52                  SBC   HL,DE   
4FD8   7D                     LD   A,L   
4FD9   B4                     OR   H   
4FDA   CA 34 50               JP   Z,expectM_3073S180   
4FDD   CD 03 0F               CALL   printStr   
4FE0   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
4FF1   CD 03 0F               CALL   printStr   
4FF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5003   21 05 00               LD   hl,5   
5006   E5                     PUSH   hl   
5007   E5                     PUSH   hl   
5008   CD 00 10               CALL   run   
500B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5012   CD 03 0F               CALL   printStr   
5015   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5022   E1                     POP   hl   
5023   E5                     PUSH   hl   
5024   E5                     PUSH   hl   
5025   CD 00 10               CALL   run   
5028   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5033   76                     HALT      
5034                EXPECTM_3073S180:      
5034   E1                     POP   HL   
5035                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
5035   31 00 54               LD   SP,STACK   
5038   CD 37 0F               CALL   coldInit   
503B   CD 63 52               CALL   execStr   
503E   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
5051   E1                     POP   HL   
5052   E5                     PUSH   HL   
5053   11 00 00               LD   DE,false   
5056   B7                     OR   A   
5057   ED 52                  SBC   HL,DE   
5059   7D                     LD   A,L   
505A   B4                     OR   H   
505B   CA BD 50               JP   Z,expectM_3074S181   
505E   CD 03 0F               CALL   printStr   
5061   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
507A   CD 03 0F               CALL   printStr   
507D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
508C   21 00 00               LD   hl,false   
508F   E5                     PUSH   hl   
5090   E5                     PUSH   hl   
5091   CD 00 10               CALL   run   
5094   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
509B   CD 03 0F               CALL   printStr   
509E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50AB   E1                     POP   hl   
50AC   E5                     PUSH   hl   
50AD   E5                     PUSH   hl   
50AE   CD 00 10               CALL   run   
50B1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
50BC   76                     HALT      
50BD                EXPECTM_3074S181:      
50BD   E1                     POP   HL   
50BE                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
50BE   31 00 54               LD   SP,STACK   
50C1   CD 37 0F               CALL   coldInit   
50C4   CD 63 52               CALL   execStr   
50C7   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
50DB   E1                     POP   HL   
50DC   E5                     PUSH   HL   
50DD   11 FF FF               LD   DE,true   
50E0   B7                     OR   A   
50E1   ED 52                  SBC   HL,DE   
50E3   7D                     LD   A,L   
50E4   B4                     OR   H   
50E5   CA 48 51               JP   Z,expectM_3075S182   
50E8   CD 03 0F               CALL   printStr   
50EB   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
5105   CD 03 0F               CALL   printStr   
5108   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5117   21 FF FF               LD   hl,true   
511A   E5                     PUSH   hl   
511B   E5                     PUSH   hl   
511C   CD 00 10               CALL   run   
511F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5126   CD 03 0F               CALL   printStr   
5129   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5136   E1                     POP   hl   
5137   E5                     PUSH   hl   
5138   E5                     PUSH   hl   
5139   CD 00 10               CALL   run   
513C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5147   76                     HALT      
5148                EXPECTM_3075S182:      
5148   E1                     POP   HL   
5149                          ;*Macro unroll:  test "[1 2 3]** + +", 6
5149   31 00 54               LD   SP,STACK   
514C   CD 37 0F               CALL   coldInit   
514F   CD 63 52               CALL   execStr   
5152   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
5160   E1                     POP   HL   
5161   E5                     PUSH   HL   
5162   11 06 00               LD   DE,6   
5165   B7                     OR   A   
5166   ED 52                  SBC   HL,DE   
5168   7D                     LD   A,L   
5169   B4                     OR   H   
516A   CA C7 51               JP   Z,expectM_3076S183   
516D   CD 03 0F               CALL   printStr   
5170   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
5184   CD 03 0F               CALL   printStr   
5187   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5196   21 06 00               LD   hl,6   
5199   E5                     PUSH   hl   
519A   E5                     PUSH   hl   
519B   CD 00 10               CALL   run   
519E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
51A5   CD 03 0F               CALL   printStr   
51A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51B5   E1                     POP   hl   
51B6   E5                     PUSH   hl   
51B7   E5                     PUSH   hl   
51B8   CD 00 10               CALL   run   
51BB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
51C6   76                     HALT      
51C7                EXPECTM_3076S183:      
51C7   E1                     POP   HL   
51C8                          ;*Macro unroll:  test "/bm[_a [_b _c]** _d]2#", $63
51C8   31 00 54               LD   SP,STACK   
51CB   CD 37 0F               CALL   coldInit   
51CE   CD 63 52               CALL   execStr   
51D1   2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 DB   "/bm[_a [_b _c]** _d]2#",0   
51E8   E1                     POP   HL   
51E9   E5                     PUSH   HL   
51EA   11 63 00               LD   DE,$63   
51ED   B7                     OR   A   
51EE   ED 52                  SBC   HL,DE   
51F0   7D                     LD   A,L   
51F1   B4                     OR   H   
51F2   CA 58 52               JP   Z,expectM_3077S184   
51F5   CD 03 0F               CALL   printStr   
51F8   43 6F 64 65 3A 20 2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 .CSTR   "Code: ","/bm[_a [_b _c]** _d]2#"   
5215   CD 03 0F               CALL   printStr   
5218   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5227   21 63 00               LD   hl,$63   
522A   E5                     PUSH   hl   
522B   E5                     PUSH   hl   
522C   CD 00 10               CALL   run   
522F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5236   CD 03 0F               CALL   printStr   
5239   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5246   E1                     POP   hl   
5247   E5                     PUSH   hl   
5248   E5                     PUSH   hl   
5249   CD 00 10               CALL   run   
524C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5257   76                     HALT      
5258                EXPECTM_3077S184:      
5258   E1                     POP   HL   
5259                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
5259                             ; 
5259   CD 03 0F               CALL   printStr   
525C   44 6F 6E 65 21 00      .CSTR   "Done!"   
5262   76                     HALT      
5263                             ; executes a null teminated string (null executes exit_)
5263                             ; the string should be immedaitely following the call
5263                EXECSTR:      ; create a root stack frame
5263   C1                     POP   bc   ; bc = code*
5264   0B                     DEC   bc   ; dec to prepare for next routine
5265   11 00 00               LD   de,0   
5268   D5                     PUSH   de   ; push fake IP
5269   D5                     PUSH   de   ; push null arg_list*
526A   D5                     PUSH   de   ; push null first_arg*
526B   D5                     PUSH   de   ; push fake BP
526C   DD E9                  JP   (ix)   
526E                STKSIZE:   EQU   $100   ; Stack size
526E                TIBSIZE:   EQU   $100   ; 256 bytes
526E                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
526E                          ALIGN   $100   
5300                          DS   STKSIZE   
5400                STACK:       
5400                          ALIGN   $100   
5400                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5500                          ALIGN   $100   
5500                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5600                          ALIGN   $100   
5600                VARS:        
5600                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
56D0                RESTARTS:      
56D0                RST08:    DS   2   
56D2                RST10:    DS   2   
56D4                RST18:    DS   2   
56D6                RST20:    DS   2   
56D8                RST28:    DS   2   
56DA                RST30:    DS   2   ; 
56DC                BAUD:     DS   2   ; 
56DE                INTVEC:   DS   2   ; 
56E0                NMIVEC:   DS   2   ; 
56E2                GETCVEC:   DS   2   ; 
56E4                PUTCVEC:   DS   2   ; 
56E6                SYSVARS:      
56E6                             ; initialised sys variables (preserved)
56E6                VTIBPTR:   DS   2   ; 
56E8                VBUFPTR:   DS   2   ; 
56EA                VNEXT:    DS   2   ; 
56EC                VHEAPPTR:   DS   2   ; 
56EE                VDATAWIDTH:   DS   2   ; 
56F0                VNUMBASE:   DS   2   ; 
56F2                VRECUR:   DS   2   ; 
56F4                VDEFINE:   DS   2   ; 
56F6                VSTRMODE:   DS   2   ; 
56F8                             ; uninitialised sys variables (preserved)
56F8                VPOINTER:   DS   2   ; 
56FA                VREMAIN:   DS   2   ; 
56FC                VSAVEDIP:   DS   2   ; 
56FE                VSAVEDSP:   DS   2   ; 
5700                VSAVEDNEXT:   DS   2   ; 
5702                VSAVEDBP:   DS   2   ; 
5704                             ; uninitialised sys variables (unpreserved)
5704                VTEMP1:   DS   2   ; 
5706                VTEMP2:   DS   2   ; 
5708                VTEMP3:   DS   2   ; 
570A                VLASTDEF:   DS   2   ; 
570C                TBPTR:    DS   2   ; reserved for tests
570E                TITLEBUF:   DS   20   
5722                HEAP:        
5722                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5722                             ; db "{"
5722                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5722                             ; db    "\\kt{"
5722                             ; db      "0%t!=/qt"                  ; break if type != 0
5722                             ; db      "\\dt:a{"                   ; return talkback to receive data
5722                             ; db        "%L1#!/qt"                ; if not active don't send
5722                             ; db        "%L0# %a="                ; store current index in A
5722                             ; db        "%s %L0# +="              ; inc value of index by step
5722                             ; db        "1%t!=/qt"                ; break if type != 0
5722                             ; db        "%a %e <"                 ; ifte: in range?
5722                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
5722                             ; db          "? %k/rc"              ; ifte: send to sink note: /rc recur
5722                             ; db      "} 0 %k^"                   ; init sink
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC map, 0, "sf"                   ; map
5722                             ; db "{"
5722                             ; db    "\\kt{"
5722                             ; db      "0%t!=/qt"                  ; break if type != 0
5722                             ; db      "\\dt{"                     ; call source with tb
5722                             ; db        "1%t=="                   ; ifte: type == 1 ?
5722                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5722                             ; db        "? %t %k^"               ; ifte: send to sink
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; ; /ft filter
5722                             ; ; src pred -- src1
5722                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5722                             ; db "{"
5722                             ; db    "[0]%T="
5722                             ; db    "\\kt{"                       ; return talkback to receive data
5722                             ; db      "\\dt{"                     ; call source with tb
5722                             ; db        "["
5722                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5722                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5722                             ; db          "{/t}"                  ; case 2: return true
5722                             ; db        "]%t#^"                   ; select on %t
5722                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5722                             ; db        "?"
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC forEach, 1, "spT"
5722                             ; db "{"
5722                             ; db    "[0]%T="
5722                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5722                             ; db      "2%t==/qt"                    ; if type == 2 skip
5722                             ; db      "0%t=="                   ; ifte: type = 0 ?
5722                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5722                             ; db      "?"                      ; ifte:
5722                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5722                             ; db    "} 0 %s^"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5722                             ; db "{"                                  ; reducer: \\da00bbLi4u
5722                             ; db    "[%i]%A="
5722                             ; db    "\\kt{"                         ; return talkback to receive data
5722                             ; db      "\\dt{"                         ; call source with tb
5722                             ; db        "1%t=="                       ; ifte: type == 1 ?
5722                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5722                             ; db        "? %t %k^"                    ; ifte: send to sink
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 2502 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
QUESTION_:          021B DEFINED AT LINE 198 IN MAIN.asm
BANG_:              021E DEFINED AT LINE 201 IN MAIN.asm
BANG:               021E DEFINED AT LINE 202 IN MAIN.asm
NOT:                0229 DEFINED AT LINE 210 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
EQ_:                022F DEFINED AT LINE 214 IN MAIN.asm
EQ:                 022F DEFINED AT LINE 215 IN MAIN.asm
EQ0:                0239 DEFINED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
EQ1:                023A DEFINED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
GT_:                023E DEFINED AT LINE 228 IN MAIN.asm
GT:                 023E DEFINED AT LINE 229 IN MAIN.asm
LT_:                0249 DEFINED AT LINE 237 IN MAIN.asm
LT:                 0249 DEFINED AT LINE 238 IN MAIN.asm
LT1:                0252 DEFINED AT LINE 245 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
HASH_:              025B DEFINED AT LINE 253 IN MAIN.asm
HASH:               025B DEFINED AT LINE 254 IN MAIN.asm
ARRAYINDEX:         025B DEFINED AT LINE 255 IN MAIN.asm
ARRAYINDEX0:        0263 DEFINED AT LINE 261 IN MAIN.asm
ARRAYINDEX1:        0264 DEFINED AT LINE 263 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
ARRAYINDEX2:        0270 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            0273 DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             0273 DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             027B DEFINED AT LINE 287 IN MAIN.asm
AMPER:              027B DEFINED AT LINE 288 IN MAIN.asm
AND:                027B DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             0285 DEFINED AT LINE 307 IN MAIN.asm
MINUS:              0285 DEFINED AT LINE 308 IN MAIN.asm
SUB:                0291 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               029B DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               02A2 DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               02A5 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
STAR_:              02AD DEFINED AT LINE 338 IN MAIN.asm
STAR:               02AD DEFINED AT LINE 339 IN MAIN.asm
MUL:                02B5 DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02B7 DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02BF DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02D1 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02D1 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02D1 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02DC DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02E0 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
ADD4:               02EA DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
COLON_:             02ED DEFINED AT LINE 394 IN MAIN.asm
UPCASE_:            02F0 DEFINED AT LINE 398 IN MAIN.asm
UPCASE:             02F0 DEFINED AT LINE 399 IN MAIN.asm
SEMICOLON_:         02F5 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 413 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 414 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 402 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 430 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 431 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 432 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 447 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 448 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 449 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 469 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 470 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 471 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 523 IN MAIN.asm
CARET:              039F DEFINED AT LINE 527 IN MAIN.asm
GO:                 039F DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 544 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 545 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 546 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 561 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 568 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 569 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 570 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 581 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 585 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 588 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 589 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 597 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 598 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 599 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 611 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 781 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 782 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 783 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 792 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 828 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 842 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 852 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 858 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 878 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 885 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 891 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 895 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 901 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 905 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 910 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 926 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 942 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 946 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 962 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 968 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 973 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 978 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DIV2:               05DA DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
ABSOLUTE:           05EB DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
ABSOLUTE1:          05F6 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
ADDROF:             05F9 DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
ADDROF1:            060D DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
ADDROF2:            0618 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0620 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
ARRAYSIZE:          0623 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
PERFORMM_1544S1066: 062A DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0637 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
BREAK1:             063E DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
BYTEMODE:           0651 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
BYTEMODE1:          0653 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
COMMENT:            0658 DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
CONSTHEAPSTART:     0661 DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
CONSTTIBSTART:      0667 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
CONSTBUFSTART:      066D DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
DECBASE:            0673 DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
DECBASE1:           0675 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
HEXBASE:            067A DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
ERROR1:             067F DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
INPUT:              0685 DEFINED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
KEY:                0690 DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
OUTPUT:             0699 DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
QUIT:               06A2 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
QUIT1:              06A9 DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
RECUR:              06AC DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
REMAIN:             06B2 DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
STRINGBEGIN:        06B8 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
STRINGEND:          06C0 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
STRINGEND1:         06E7 DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
STRINGLENGTH:       06EF DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06F5 DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
STRINGLENGTH2:      06F7 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
STRINGLENGTH3:      06FB DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
STRINGSIZE:         06FE DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
PERFORMM_1692S1234: 0705 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      070A DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
STRINGCOMPARE1:     070C DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
STRINGCOMPARE2:     0717 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
STRINGCOMPARE3:     071C DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
STRINGCOMPARE4:     071F DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
VARBUFPTR:          0722 DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
VARHEAPPTR:         072B DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
VARTIBPTR:          0734 DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
VARIABLE:           073D DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
CONSTANT:           0740 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
WORDMODE:           0743 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
XOR:                0748 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
XOR1:               0749 DEFINED AT LINE 1292 IN MAIN.asm
RANGESRC:           0753 DEFINED AT LINE 32
                    > USED AT LINE 922 IN MAIN.asm
RANGESRCM_1757S1308: 0762 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07E5 DEFINED AT LINE 32
                    > USED AT LINE 834 IN MAIN.asm
ARRAYITERM_1776S1328: 07F2 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0865 DEFINED AT LINE 32
                    > USED AT LINE 934 IN MAIN.asm
STRINGITERM_1795S1348: 0872 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08EC DEFINED AT LINE 32
                    > USED AT LINE 897 IN MAIN.asm
MAPM_1815S1370:     08F9 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             092D DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FILTERM_1829S1385:  093B DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               098A DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
FOLDM_1848S1405:    0999 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09DB DEFINED AT LINE 32
                    > USED AT LINE 862 IN MAIN.asm
FOREACHM_1862S1420: 09E9 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A26 DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
FUNCSRCM_1876S1435: 0A32 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A5F DEFINED AT LINE 32
                    > USED AT LINE 614 IN MAIN.asm
PRINTARRAYM_1886S1446: 0A6D DEFINED AT LINE 39
                    > USED AT LINE 35
COLON:              0AA7 DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
DEFINESTART:        0AB4 DEFINED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
SEMICOLON:          0ABD DEFINED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
DEFINEEND:          0ABD DEFINED AT LINE 1471 IN MAIN.asm
DEFINEEND1:         0ACF DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
TILDE:              0AD1 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
INVERT:             0AD1 DEFINED AT LINE 1485 IN MAIN.asm
DOLLAR:             0ADB DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0ADB DEFINED AT LINE 1497 IN MAIN.asm
HEXNUM1:            0ADE DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
HEXNUM2:            0AE6 DEFINED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
QUESTION:           0AF8 DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
IF:                 0AF8 DEFINED AT LINE 1521 IN MAIN.asm
QUOTE:              0B05 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0B05 DEFINED AT LINE 1535 IN MAIN.asm
STRING1:            0B0E DEFINED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
STRING2:            0B11 DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
STRING3:            0B17 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
PERCENT:            0B1F DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0B1F DEFINED AT LINE 1562 IN MAIN.asm
ARG0:               0B3B DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
ARG0A:              0B44 DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
ARG1:               0B49 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
ARG1A:              0B51 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
NUM:                0B54 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
NUM0:               0B5D DEFINED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
NUM1:               0B5E DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
NUM2:               0B76 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
NUM3:               0B81 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
RBRACE:             0B84 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKEND:           0B84 DEFINED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
BLOCKEND1:          0BB6 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
BLOCKEND2:          0BC2 DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
BLOCKEND3:          0BD4 DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
BLOCKEND4:          0BE8 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
GOBLOCK:            0BF1 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
GOBLOCK2:           0C16 DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
GOBLOCK3:           0C20 DEFINED AT LINE 1725 IN MAIN.asm
GOFUNC:             0C24 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
GOFUNC1:            0C3D DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
GOFUNC2:            0C43 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
GOFUNC3:            0C4E DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
GOFUNC4:            0C66 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
GOFUNC5:            0C69 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
GOFUNC6:            0C6C DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
GOFUNC7:            0C6F DEFINED AT LINE 1788 IN MAIN.asm
GOFUNC8:            0C73 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
ASSIGN:             0C7E DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
ASSIGN0:            0C80 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0C84 DEFINED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
ASSIGN2:            0C8D DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
EQUALS:             0C8F DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
NOTEQUALS:          0C96 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
LESSTHANEQ:         0C9D DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
LESSTHAN:           0CA2 DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
LESSTHAN1:          0CA7 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
TRUE1:              0CAA DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
NULL1:              0CB0 DEFINED AT LINE 1855 IN MAIN.asm
FALSE1:             0CB0 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
SPREAD:             0CB6 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0CC3 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
SPREAD2:            0CCE DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
SPREAD3:            0CD0 DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
SHIFTLEFT:          0CDA DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT2:         0CE4 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
SHIFTLEFT3:         0CEC DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
SHIFTLEFT4:         0CED DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
SHIFTRIGHT:         0CF6 DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
SHIFTRIGHT2:        0D00 DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
SHIFTRIGHT3:        0D08 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
SHIFTRIGHT4:        0D0C DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
DIVIDE:             0D15 DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DIVIDE1:            0D1A DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
DIVIDE2:            0D27 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
DIVIDE3:            0D28 DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
DOTNEXT:            0D2E DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
DOTNEXT1:           0D36 DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
PARSEARGS:          0D48 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
PARSEARGS1:         0D52 DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
PARSEARGS1A:        0D5A DEFINED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
PARSEARGS2:         0D62 DEFINED AT LINE 1996 IN MAIN.asm
PARSEARGS3:         0D6A DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
PARSEARGS4:         0D6D DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
PARSEARGS5:         0D73 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
PARSEBLOCK:         0D7E DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
PARSEBLOCK1:        0D82 DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
PARSEBLOCK2:        0DAE DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
PARSEBLOCK3:        0DB1 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
PARSEBLOCK4:        0DB9 DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
PARSEBLOCK5:        0DBC DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
PARSEBLOCK6:        0DE4 DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
CREATEFUNC:         0DE8 DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
CREATEFUNC0:        0E07 DEFINED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
CREATEFUNC1:        0E1F DEFINED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
CREATEFUNC2:        0E32 DEFINED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
CREATEFUNC2A:       0E51 DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
CREATEFUNC3:        0E60 DEFINED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
CREATEFUNC4:        0E6B DEFINED AT LINE 2191 IN MAIN.asm
CREATEFUNC5:        0E6C DEFINED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
LOWERCASETABLE:     0E8A DEFINED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
LOWERCASETABLE1:    0E94 DEFINED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
LOWERCASETABLE2:    0E9B DEFINED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
COMMANDTABLE:       0EA0 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
COMMANDTABLE1:      0EA1 DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
COMMANDTABLE2:      0EA2 DEFINED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
COMMANDTABLE3:      0EA9 DEFINED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
COMMANDTABLE4:      0EB2 DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
PUTSTR0:            0EB8 DEFINED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
PUTSTR:             0EBC DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
NESTING:            0EC1 DEFINED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
NESTING0:           0ECB DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
NESTING1A:          0ED2 DEFINED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
NESTING1:           0ED5 DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
NESTING2:           0EE4 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
NESTING3:           0EE6 DEFINED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
NESTING4:           0EF1 DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
PROMPT:             0EF3 DEFINED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
CRLF:               0EFC DEFINED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
PRINTSTR:           0F03 DEFINED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2527 IN MAIN.asm
                    > USED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 49
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 190
INIT:               0F0A DEFINED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
INIT1:              0F12 DEFINED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
WARMINIT:           0F1A DEFINED AT LINE 2358 IN MAIN.asm
COLDBOOT0:          0F2D DEFINED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
COLDINIT:           0F37 DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0F48 DEFINED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
COLDSTART:          0F55 DEFINED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
START:              0F5E DEFINED AT LINE 2393 IN MAIN.asm
START1:             0F64 DEFINED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
INTERPRET:          0F6A DEFINED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 2520 IN MAIN.asm
INTERPRET2:         0F76 DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
INTERPRET3:         0F7E DEFINED AT LINE 2416 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
INTERPRET4:         0F84 DEFINED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
INTERPRET5:         0F89 DEFINED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
INTERPRET5A:        0FA2 DEFINED AT LINE 2444 IN MAIN.asm
INTERPRET6:         0FA4 DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
INTERPRET7:         0FB2 DEFINED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
INTERPRET8:         0FC5 DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
NEXT:               0FE0 DEFINED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
NEXT0:              0FF4 DEFINED AT LINE 2499 IN MAIN.asm
                    > USED AT LINE 2497 IN MAIN.asm
NEXT1:              0FF5 DEFINED AT LINE 2501 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
EXIT:               0FFC DEFINED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
RUN:                1000 DEFINED AT LINE 2511 IN MAIN.asm
                    > USED AT LINE 2518 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              1004 DEFINED AT LINE 2516 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
BACKSPACE_:         1016 DEFINED AT LINE 2522 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
REEDIT_:            1026 DEFINED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
REEDIT0:            1032 DEFINED AT LINE 2536 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
REEDIT1:            1036 DEFINED AT LINE 2539 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
F1:                 1046 DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
F1M_2915S12:        1051 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1052 DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
F2M_2917S15:        105D DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 105E DEFINED AT LINE 32
                    > USED AT LINE 872 IN MAIN.asm
F3M_2919S18:        1069 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 106A DEFINED AT LINE 32
                    > USED AT LINE 874 IN MAIN.asm
F4M_2921S21:        1075 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2925S27:    1190 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2946S53:    1203 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2947S54:    126C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2948S55:    12D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2949S56:    133A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2950S57:    13A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2951S58:    1408 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2952S59:    1471 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2953S60:    14DC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2954S61:    1545 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2955S62:    15B4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2956S63:    161D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2957S64:    1686 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2958S65:    16F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2959S66:    175C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2960S67:    17CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2961S68:    183E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2962S69:    18AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2963S70:    1920 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2964S71:    1997 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2965S72:    1A0C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2966S73:    1A7B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2967S74:    1AF2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2968S75:    1B65 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2969S76:    1BD4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2970S77:    1C43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2971S78:    1CBA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2972S79:    1D29 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2973S80:    1D98 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2974S81:    1E09 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2975S82:    1E8A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2976S83:    1EF5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2977S84:    1F60 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2978S85:    1FCD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2979S86:    203A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2980S87:    20A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2981S88:    2120 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2982S89:    218F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2983S90:    220C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2984S91:    2289 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2985S92:    2306 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2986S93:    2385 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2987S94:    2408 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2988S95:    248B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2989S96:    250E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2990S97:    2591 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2991S98:    2612 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2992S99:    2693 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2993S100:   2718 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2994S101:   2789 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2995S102:   2808 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2996S103:   2887 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2997S104:   2908 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2998S105:   297F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2999S106:   29EE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3000S107:   2A5F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3001S108:   2AD0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3002S109:   2B3F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3003S110:   2BAE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3004S111:   2C1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3005S112:   2C8C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3006S113:   2CFB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3007S114:   2D6A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3008S115:   2DD9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3009S116:   2E48 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3010S117:   2EB9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3011S118:   2F2A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3012S119:   2F9B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3013S120:   300E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3014S121:   3081 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3015S122:   30EE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3016S123:   315B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3017S124:   31CE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3018S125:   3247 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3019S126:   32CC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3020S127:   3351 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3021S128:   33C0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3022S129:   3431 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3023S130:   34A8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3024S131:   3523 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3025S132:   359A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3026S133:   361B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3027S134:   369E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3028S135:   3727 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3029S136:   37B4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3030S137:   3833 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3031S138:   38B8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3032S139:   393F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3033S140:   39C8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3034S141:   3A4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3035S142:   3AE4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3036S143:   3B67 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3037S144:   3BF8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S145:   3C8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S146:   3D20 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S147:   3DBD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S148:   3E5A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S149:   3ED9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S150:   3F60 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S151:   3FE1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S152:   4068 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S153:   40F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S154:   418C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S155:   422D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S156:   42CE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S157:   4361 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S158:   43FA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S159:   44A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S160:   4552 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S161:   4609 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S162:   46C2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S163:   474D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S164:   47D8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S165:   4851 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S166:   48CA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S167:   4943 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S168:   49BC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S169:   4A2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S170:   4A9E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S171:   4B0F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S172:   4B80 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S173:   4BFD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S174:   4C88 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S175:   4D19 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S176:   4DC2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S177:   4E6B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S178:   4F2E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S179:   4FBB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S180:   5034 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S181:   50BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S182:   5148 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S183:   51C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S184:   5258 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5263 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5400 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5400 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2543 IN MAIN.asm
BUFFER:             5500 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
VARS:               5600 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           56D0 DEFINED AT LINE 18 IN ram.asm
RST08:              56D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              56D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              56D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              56D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              56D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              56DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               56DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             56DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             56E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            56E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            56E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            56E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2373 IN MAIN.asm
VTIBPTR:            56E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
VBUFPTR:            56E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
VNEXT:              56EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 2385 IN MAIN.asm
VHEAPPTR:           56EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
VDATAWIDTH:         56EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
VNUMBASE:           56F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
VRECUR:             56F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
VDEFINE:            56F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
VSTRMODE:           56F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
VPOINTER:           56F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
VREMAIN:            56FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
VSAVEDIP:           56FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
VSAVEDSP:           56FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
VSAVEDNEXT:         5700 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
VSAVEDBP:           5702 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
VTEMP1:             5704 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
VTEMP2:             5706 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
VTEMP3:             5708 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
VLASTDEF:           570A DEFINED AT LINE 61 IN ram.asm
TBPTR:              570C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           570E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2348 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
HEAP:               5722 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
