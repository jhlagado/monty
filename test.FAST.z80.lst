0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 19               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 19               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 19               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 19               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 19               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 19               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 19               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 19               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 19               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 19               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 19               LD   (RST08),HL   
0094   22 D2 19               LD   (RST10),HL   
0097   22 D4 19               LD   (RST18),HL   
009A   22 D6 19               LD   (RST20),HL   
009D   22 D8 19               LD   (RST28),HL   
00A0   22 DA 19               LD   (RST30),HL   
00A3   22 DE 19               LD   (INTVEC),HL   
00A6   22 E0 19               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 19               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 19               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 0D 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                DC3:      EQU   19   ; enter code (anonymous)
00CC                ESC:      EQU   27   ; escape code
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   98 09                  DW   next   ; g nNext
018E   00 1C                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available _ @ " % , ; DEL
0220   EB                     DB   lsb(nop_)   ; SP
0221   96                     DB   lsb(not_)   ; !
0222   EB                     DB   lsb(nop_)   ; "
0223   06                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   EB                     DB   lsb(nop_)   ; %
0226   57                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   EB                     DB   lsb(nop_)   ; )
022A   7F                     DB   lsb(mul_)   ; *
022B   79                     DB   lsb(add_)   ; +
022C   EB                     DB   lsb(nop_)   ; , compile
022D   82                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   C7                     DB   lsb(div_)   ; /	
0230   03                     DB   lsb(num_)   ; 0
0231   03                     DB   lsb(num_)   ; 1
0232   03                     DB   lsb(num_)   ; 2
0233   03                     DB   lsb(num_)   ; 3
0234   03                     DB   lsb(num_)   ; 4
0235   03                     DB   lsb(num_)   ; 5
0236   03                     DB   lsb(num_)   ; 6
0237   03                     DB   lsb(num_)   ; 7
0238   03                     DB   lsb(num_)   ; 8
0239   03                     DB   lsb(num_)   ; 9
023A   54                     DB   lsb(symbol_)   ; :
023B   EB                     DB   lsb(nop_)   ; ;
023C   B5                     DB   lsb(lt_)   ; <
023D   9B                     DB   lsb(eq_)   ; =
023E   AA                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   00                     DB   lsb(addr_)   ; @
0241   4E                     DB   lsb(identU_)   ; A
0242   4E                     DB   lsb(identU_)   ; B
0243   4E                     DB   lsb(identU_)   ; C
0244   4E                     DB   lsb(identU_)   ; D
0245   4E                     DB   lsb(identU_)   ; E
0246   4E                     DB   lsb(identU_)   ; F
0247   4E                     DB   lsb(identU_)   ; G
0248   4E                     DB   lsb(identU_)   ; h
0249   4E                     DB   lsb(identU_)   ; I
024A   4E                     DB   lsb(identU_)   ; J
024B   4E                     DB   lsb(identU_)   ; K
024C   4E                     DB   lsb(identU_)   ; L
024D   4E                     DB   lsb(identU_)   ; M
024E   4E                     DB   lsb(identU_)   ; N
024F   4E                     DB   lsb(identU_)   ; O
0250   4E                     DB   lsb(identU_)   ; p
0251   4E                     DB   lsb(identU_)   ; Q
0252   4E                     DB   lsb(identU_)   ; R
0253   4E                     DB   lsb(identU_)   ; S
0254   4E                     DB   lsb(identU_)   ; T
0255   4E                     DB   lsb(identU_)   ; U
0256   4E                     DB   lsb(identU_)   ; V
0257   4E                     DB   lsb(identU_)   ; W
0258   4E                     DB   lsb(identU_)   ; X
0259   4E                     DB   lsb(identU_)   ; Y
025A   4E                     DB   lsb(identU_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   D6                     DB   lsb(command_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   6B                     DB   lsb(xor_)   ; ^
025F   EB                     DB   lsb(nop_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   51                     DB   lsb(identL_)   ; a
0262   51                     DB   lsb(identL_)   ; b
0263   51                     DB   lsb(identL_)   ; c
0264   51                     DB   lsb(identL_)   ; d
0265   51                     DB   lsb(identL_)   ; e
0266   51                     DB   lsb(identL_)   ; f
0267   51                     DB   lsb(identL_)   ; g
0268   51                     DB   lsb(identL_)   ; h
0269   51                     DB   lsb(identL_)   ; i
026A   51                     DB   lsb(identL_)   ; j
026B   51                     DB   lsb(identL_)   ; k
026C   51                     DB   lsb(identL_)   ; l
026D   51                     DB   lsb(identL_)   ; m
026E   51                     DB   lsb(identL_)   ; n
026F   51                     DB   lsb(identL_)   ; o
0270   51                     DB   lsb(identL_)   ; p
0271   51                     DB   lsb(identL_)   ; q
0272   51                     DB   lsb(identL_)   ; r
0273   51                     DB   lsb(identL_)   ; s
0274   51                     DB   lsb(identL_)   ; t
0275   51                     DB   lsb(identL_)   ; u
0276   51                     DB   lsb(identL_)   ; v
0277   51                     DB   lsb(identL_)   ; w
0278   51                     DB   lsb(identL_)   ; x
0279   51                     DB   lsb(identL_)   ; y
027A   51                     DB   lsb(identL_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   62                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   74                     DB   lsb(inv_)   ; ~
027F   EB                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADDR_:       
0300   C3 ED 03               JP   addr   
0303                NUM_:        
0303   C3 38 04               JP   num   
0306                HEXNUM_:      
0306   C3 68 04               JP   hexnum   
0309                ARG_:        
0309   C3 96 08               JP   arg   
030C                STRING_:      
030C   C3 85 04               JP   string   
030F                ARG_LIST_:      
030F   C3 E5 04               JP   arg_list   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 5D 07               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 80 07               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD 15 07               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 C1 05               JP   index   
033F                BLOCK_:      
033F   C3 17 05               JP   block   
0342                BLOCKEND_:      
0342   C3 54 05               JP   blockend   
0345                CHAR_:       
0345   C3 A9 04               JP   char   
0348                ARRAY_:      
0348   C3 E8 05               JP   array   
034B                ARRAYEND_:      
034B   C3 04 06               JP   arrayEnd   
034E                IDENTU_:      
034E   C3 BE 04               JP   identU   
0351                IDENTL_:      
0351   C3 C3 04               JP   identL   
0354                SYMBOL_:      
0354   C3 70 06               JP   symbol   
0357                AND_:        
0357   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0358   E1                     POP   hl   
0359   7B                     LD   a,e   
035A   A5                     AND   l   
035B   6F                     LD   l,a   
035C   7A                     LD   a,d   
035D   A4                     AND   h   
035E                AND1:        
035E   67                     LD   h,a   
035F   E5                     PUSH   hl   
0360   DD E9                  JP   (ix)   
0362                OR_:         
0362   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0363   E1                     POP   hl   
0364   7B                     LD   a,e   
0365   B5                     OR   l   
0366   6F                     LD   l,a   
0367   7A                     LD   a,d   
0368   B4                     OR   h   
0369   18 F3                  JR   and1   
036B                XOR_:        
036B   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
036C                XOR1:        
036C   E1                     POP   hl   
036D   7B                     LD   a,e   
036E   AD                     XOR   l   
036F   6F                     LD   l,a   
0370   7A                     LD   a,d   
0371   AC                     XOR   h   
0372   18 EA                  JR   and1   
0374                INV_:        ; Bitwise INVert the top member of the stack
0374   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0377   18 F3                  JR   xor1   
0379                ADD_:        ; add the top 2 members of the stack
0379   D1                     POP   de   
037A   E1                     POP   hl   
037B   19                     ADD   hl,de   
037C   E5                     PUSH   hl   
037D   DD E9                  JP   (ix)   
037F                MUL_:        
037F   C3 1C 04               JP   mul   
0382                SUB_:        ; negative sign or subtract
0382   03                     INC   bc   ; check if sign of a number
0383   0A                     LD   a,(bc)   
0384   0B                     DEC   bc   
0385   FE 30                  CP   "0"   
0387   38 05                  JR   c,sub1   
0389   FE 3A                  CP   "9"+1   
038B   DA 03 03               JP   c,num_   
038E                SUB1:        ; Subtract the value 2nd on stack from top of stack
038E   D1                     POP   de   
038F   E1                     POP   hl   ; Entry point for INVert
0390                SUB2:        
0390   B7                     OR   a   ; Entry point for NEGate
0391   ED 52                  SBC   hl,de   
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                NOT_:        ; logical invert, any non zero value
0396   21 00 00               LD   hl,0   ; is considered true
0399   18 0B                  JR   eq1   
039B                EQ_:         
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   ; is it == ?
039D   FE 3D                  CP   "="   
039F   28 04                  JR   z,eq0   ; no its equality
03A1   0B                     DEC   bc   
03A2   C3 D5 04               JP   assign   ; no its assignment
03A5                EQ0:         
03A5   E1                     POP   hl   
03A6                EQ1:         
03A6   D1                     POP   de   
03A7   C3 92 06               JP   equals   
03AA                GT_:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3E                  CP   ">"   
03AE   CA 09 04               JP   z,shiftRight   
03B1   D1                     POP   de   
03B2   E1                     POP   hl   
03B3   18 09                  JR   lt1   
03B5                LT_:         
03B5   03                     INC   bc   
03B6   0A                     LD   a,(bc)   
03B7   FE 3C                  CP   "<"   
03B9   CA F9 03               JP   z,shiftLeft   
03BC   E1                     POP   hl   
03BD   D1                     POP   de   
03BE                LT1:         
03BE   FE 3D                  CP   "="   
03C0   CA 9A 06               JP   z,lessthaneq   
03C3   0B                     DEC   bc   
03C4   C3 9F 06               JP   lessthan   
03C7                DIV_:        
03C7   D1                     POP   de   ; get first value
03C8   E1                     POP   hl   ; get 2nd value
03C9   C5                     PUSH   bc   ; preserve the IP
03CA   44 4D                  LD   bc,hl   
03CC   CD D2 06               CALL   divide   
03CF   22 E6 19               LD   (vFrac),hl   
03D2   C1                     POP   bc   
03D3   D5                     PUSH   de   ; push result
03D4   DD E9                  JP   (ix)   
03D6                COMMAND_:      
03D6   03                     INC   bc   
03D7   0A                     LD   a,(bc)   
03D8   FE 5C                  CP   $5C   ; \\ comment
03DA   28 06                  JR   z,comment   
03DC   21 01 00               LD   hl,1   ; error 1: unknown command
03DF   C3 BB 09               JP   error   
03E2                COMMENT:      
03E2   03                     INC   bc   ; point to next char
03E3   0A                     LD   a,(bc)   
03E4   FE 20                  CP   " "   ; terminate on any char less than SP
03E6   30 FA                  JR   nc,comment   
03E8   0B                     DEC   bc   
03E9   DD E9                  JP   (ix)   
03EB                NOP_:        
03EB   DD E9                  JP   (ix)   
03ED                             ;*******************************************************************
03ED                             ; word operators
03ED                             ;*******************************************************************
03ED                             ; -- ptr
03ED                ADDR:        
03ED   2A EC 19               LD   hl,(vPointer)   
03F0   E5                     PUSH   hl   
03F1   21 EC 19               LD   hl,vPointer   
03F4   22 EC 19               LD   (vPointer),hl   
03F7   DD E9                  JP   (ix)   
03F9                             ; shiftLeft
03F9                             ; value count -- value2          shift left count places
03F9                SHIFTLEFT:      
03F9   50 59                  LD   de,bc   ; save IP
03FB   C1                     POP   bc   ; bc = count
03FC   41                     LD   b,c   ; b = loop counter
03FD   E1                     POP   hl   
03FE   04                     INC   b   ; test for counter=0 case
03FF   18 01                  JR   shiftLeft2   
0401                SHIFTLEFT1:      
0401   29                     ADD   hl,hl   ; left shift hl
0402                SHIFTLEFT2:      
0402   10 FD                  DJNZ   shiftLeft1   
0404   E5                     PUSH   hl   
0405   42 4B                  LD   bc,de   ; restore IP
0407   DD E9                  JP   (ix)   
0409                             ; shiftRight
0409                             ; value count -- value2          shift left count places
0409                SHIFTRIGHT:      
0409   50 59                  LD   de,bc   ; save IP
040B   C1                     POP   bc   ; bc = count
040C   41                     LD   b,c   ; b = loop counter
040D   E1                     POP   hl   
040E   04                     INC   b   ; test for counter=0 case
040F   18 04                  JR   shiftRight2   
0411                SHIFTRIGHT1:      
0411   CB 3C                  SRL   h   ; right shift hl
0413   CB 1D                  RR   l   
0415                SHIFTRIGHT2:      
0415   10 FA                  DJNZ   shiftRight1   
0417   E5                     PUSH   hl   
0418   42 4B                  LD   bc,de   ; restore IP
041A   DD E9                  JP   (ix)   
041C                MUL:         ;=19
041C   D1                     POP   de   ; get first value
041D   E1                     POP   hl   
041E   C5                     PUSH   bc   ; Preserve the IP
041F   44                     LD   b,h   ; bc = 2nd value
0420   4D                     LD   c,l   
0421   21 00 00               LD   hl,0   
0424   3E 10                  LD   a,16   
0426                MUL2:        
0426   29                     ADD   hl,hl   
0427   CB 13                  RL   e   
0429   CB 12                  RL   d   
042B   30 04                  JR   nc,$+6   
042D   09                     ADD   hl,bc   
042E   30 01                  JR   nc,$+3   
0430   13                     INC   de   
0431   3D                     DEC   a   
0432   20 F2                  JR   nz,mul2   
0434   C1                     POP   bc   ; Restore the IP
0435   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0436   DD E9                  JP   (ix)   
0438                NUM:         
0438   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
043B   0A                     LD   a,(bc)   ; Get numeral or -
043C   FE 2D                  CP   "-"   
043E   20 01                  JR   nz,num0   
0440   03                     INC   bc   ; move to next char, no flags affected
0441                NUM0:        
0441   08                     EX   af,af'   ; save zero flag = 0 for later
0442                NUM1:        
0442   0A                     LD   a,(bc)   ; read digit
0443   D6 30                  SUB   "0"   ; less than 0?
0445   38 13                  JR   c,num2   ; not a digit, exit loop
0447   FE 0A                  CP   10   ; greater that 9?
0449   30 0F                  JR   nc,num2   ; not a digit, exit loop
044B   03                     INC   bc   ; inc IP
044C   54 5D                  LD   de,hl   ; multiply hl * 10
044E   29                     ADD   hl,hl   
044F   29                     ADD   hl,hl   
0450   19                     ADD   hl,de   
0451   29                     ADD   hl,hl   
0452   85                     ADD   a,l   ; add digit in a to hl
0453   6F                     LD   l,a   
0454   3E 00                  LD   a,0   
0456   8C                     ADC   a,h   
0457   67                     LD   h,a   
0458   18 E8                  JR   num1   
045A                NUM2:        
045A   0B                     DEC   bc   
045B   08                     EX   af,af'   ; restore zero flag
045C   20 07                  JR   nz,num3   
045E   EB                     EX   de,hl   ; negate the value of hl
045F   21 00 00               LD   hl,0   
0462   B7                     OR   a   ; jump to sub2
0463   ED 52                  SBC   hl,de   
0465                NUM3:        
0465   E5                     PUSH   hl   ; Put the number on the stack
0466   DD E9                  JP   (ix)   ; and process the next character
0468                HEXNUM:      
0468   21 00 00               LD   hl,0   ; Clear hl to accept the number
046B                HEXNUM1:      
046B   03                     INC   bc   
046C   0A                     LD   a,(bc)   ; Get the character which is a numeral
046D   CB 77                  BIT   6,a   ; is it uppercase alpha?
046F   28 02                  JR   z,hexnum2   ; no a decimal
0471   D6 07                  SUB   7   ; sub 7  to make $a - $F
0473                HEXNUM2:      
0473   D6 30                  SUB   $30   ; form decimal digit
0475   DA 5A 04               JP   c,num2   
0478   FE 10                  CP   $0F+1   
047A   D2 5A 04               JP   nc,num2   
047D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
047E   29                     ADD   hl,hl   ; 4X
047F   29                     ADD   hl,hl   ; 8X
0480   29                     ADD   hl,hl   ; 16X
0481   85                     ADD   a,l   ; add into bottom of hl
0482   6F                     LD   l,a   
0483   18 E6                  JR   hexnum1   
0485                             ; string
0485                             ; -- ptr                        ; points to start of string chars,
0485                             ; length is stored at start - 2 bytes
0485                STRING:      
0485   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
0488   23                     INC   hl   ; skip length field to start
0489   23                     INC   hl   
048A   E5                     PUSH   hl   ; save start of string
048B   03                     INC   bc   ; point to next char
048C   18 03                  JR   string2   
048E                STRING1:      
048E   77                     LD   (hl),a   
048F   23                     INC   hl   ; increase count
0490   03                     INC   bc   ; point to next char
0491                STRING2:      
0491   0A                     LD   a,(bc)   
0492   FE 27                  CP   "'"   ; ' is the string terminator
0494   20 F8                  JR   nz,string1   
0496   AF                     XOR   a   ; write NUL to terminate string
0497   77                     LD   (hl),a   ; hl = end of string
0498   23                     INC   hl   
0499   22 F4 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
049C   2B                     DEC   hl   ; hl = end of string without terminator
049D   D1                     POP   de   ; de = start of string
049E   D5                     PUSH   de   ; return start of string
049F   B7                     OR   a   ; hl = length bytes, de = start of string
04A0   ED 52                  SBC   hl,de   
04A2   EB                     EX   de,hl   
04A3   2B                     DEC   hl   ; write length bytes to length field at start - 2
04A4   72                     LD   (hl),d   
04A5   2B                     DEC   hl   
04A6   73                     LD   (hl),e   
04A7   DD E9                  JP   (ix)   
04A9                CHAR:        
04A9   21 00 00               LD   hl,0   ; if `` is empty
04AC                CHAR1:       
04AC   03                     INC   bc   ; point to next char
04AD   0A                     LD   a,(bc)   
04AE   FE 60                  CP   "`"   ; ` is the string terminator
04B0   28 09                  JR   z,char3   
04B2   FE 5C                  CP   $5c   ; \ is the escape
04B4   20 02                  JR   nz,char2   
04B6   03                     INC   bc   
04B7   0A                     LD   a,(bc)   
04B8                CHAR2:       
04B8   6F                     LD   l,a   
04B9   18 F1                  JR   char1   
04BB                CHAR3:       
04BB   E5                     PUSH   hl   
04BC   DD E9                  JP   (ix)   
04BE                IDENTU:      
04BE   0A                     LD   a,(bc)   ; a = identifier char
04BF   D6 41                  SUB   "A"   ; "A" = 0
04C1   18 05                  JR   ident1   
04C3                IDENTL:      
04C3   0A                     LD   a,(bc)   
04C4   D6 61                  SUB   "a"   
04C6   C6 1A                  ADD   a,26   
04C8                IDENT1:      
04C8   87                     ADD   a,a   ; l = a * 2
04C9   6F                     LD   l,a   
04CA   26 19                  LD   h,msb(vars)   
04CC   22 EC 19               LD   (vPointer),hl   ; store address in setter
04CF   5E                     LD   e,(hl)   
04D0   23                     INC   hl   
04D1   56                     LD   d,(hl)   
04D2   D5                     PUSH   de   
04D3   DD E9                  JP   (ix)   
04D5                             ; value _oldValue --            ; uses address in vPointer
04D5                ASSIGN:      
04D5   E1                     POP   hl   ; discard last accessed value
04D6   D1                     POP   de   ; new value
04D7   2A EC 19               LD   hl,(vPointer)   
04DA   73                     LD   (hl),e   
04DB   3A E8 19               LD   a,(vDataWidth)   
04DE   3D                     DEC   a   ; is it byte?
04DF   28 02                  JR   z,assign1   
04E1   23                     INC   hl   
04E2   72                     LD   (hl),d   
04E3                ASSIGN1:      
04E3   DD E9                  JP   (ix)   
04E5                             ; 
04E5                             ; 
04E5                             ; 
04E5                             ; 
04E5                             ; 
04E5                             ; arg_list - parses input (ab:c)
04E5                             ; names after the : represent uninitialised locals
04E5                             ; return values are the state of the stack after the block ends
04E5                ARG_LIST:      
04E5   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04E8   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
04EB   23                     INC   hl   ; skip length field to start
04EC   23                     INC   hl   
04ED   E5                     PUSH   hl   ; save start of arg_list
04EE   03                     INC   bc   ; point to next char
04EF                ARG_LIST1:      
04EF   0A                     LD   a,(bc)   
04F0   FE 29                  CP   ")"   ; ) is the arg_list terminator
04F2   28 12                  JR   z,arg_list4   
04F4   FE 3A                  CP   ":"   
04F6   20 03                  JR   nz,arg_list2   
04F8   14                     INC   d   ; non zero value local count acts as flag
04F9   20 08                  JR   nz,arg_list3   
04FB                ARG_LIST2:      
04FB   77                     LD   (hl),a   
04FC   23                     INC   hl   
04FD   1C                     INC   e   ; increase arg count
04FE   AF                     XOR   a   
04FF   B2                     OR   d   
0500   28 01                  JR   z,arg_list3   
0502   14                     INC   d   ; if d > 0 increase local count
0503                ARG_LIST3:      
0503   03                     INC   bc   ; point to next char
0504   18 E9                  JR   arg_list1   
0506                ARG_LIST4:      
0506   AF                     XOR   a   
0507   B2                     OR   d   
0508   28 01                  JR   z,arg_list5   
050A   15                     DEC   d   ; remove initial inc
050B                ARG_LIST5:      
050B   23                     INC   hl   
050C   22 F4 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
050F   E1                     POP   hl   ; hl = start of arg_list
0510   E5                     PUSH   hl   ; return start of string
0511   2B                     DEC   hl   ; write length bytes to length field at start - 2
0512   72                     LD   (hl),d   
0513   2B                     DEC   hl   
0514   73                     LD   (hl),e   
0515   DD E9                  JP   (ix)   
0517                BLOCK:       
0517   03                     INC   bc   
0518   C5                     PUSH   bc   ; return first opcode of block
0519   16 01                  LD   d,1   ; nesting: count first parenthesis
051B                BLOCK1:      ; Skip to end of definition
051B   0A                     LD   a,(bc)   ; Get the next character
051C   03                     INC   bc   ; Point to next character
051D   FE 21                  CP   " " + 1   ; ignore whitespace
051F   38 FA                  JR   c,block1   
0521   FE 29                  CP   ")"   
0523   28 29                  JR   z,block4   
0525   FE 7D                  CP   "}"   
0527   28 25                  JR   z,block4   
0529   FE 5D                  CP   "]"   
052B   28 21                  JR   z,block4   
052D   FE 28                  CP   "("   
052F   28 12                  JR   z,block2   
0531   FE 7B                  CP   "{"   
0533   28 0E                  JR   z,block2   
0535   FE 5B                  CP   "["   
0537   28 0A                  JR   z,block2   
0539   FE 27                  CP   "'"   
053B   28 09                  JR   z,block3   
053D   FE 60                  CP   "`"   
053F   28 05                  JR   z,block3   
0541   18 D8                  JR   block1   
0543                BLOCK2:      
0543   14                     INC   d   
0544   18 D5                  JR   block1   
0546                BLOCK3:      
0546   3E 80                  LD   a,$80   
0548   AA                     XOR   d   
0549   47                     LD   b,a   
054A   20 CF                  JR   nz,block1   
054C   18 03                  JR   block5   
054E                BLOCK4:      
054E   15                     DEC   d   
054F   20 CA                  JR   nz,block1   ; get the next element
0551                BLOCK5:      
0551   0B                     DEC   bc   ; balanced, exit
0552   DD E9                  JP   (ix)   
0554                BLOCKEND:      
0554   D9                     EXX      
0555   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0558   FD 56 01               LD   d,(iy+1)   
055B   FD 4E 06               LD   c,(iy+6)   ; bc = IP
055E   FD 46 07               LD   b,(iy+7)   
0561   D9                     EXX      
0562   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0565   FD 56 03               LD   d,(iy+3)   
0568   EB                     EX   de,hl   
0569   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
056C   FD 56 01               LD   d,(iy+1)   
056F                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
056F   13                     INC   de   ; for carry flag <=
0570   B7                     OR   a   
0571   ED 52                  SBC   hl,de   
0573   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0575   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0577   FD 5D                  LD   e,iyl   
0579   21 08 00               LD   hl,8   
057C   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
057D   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
057E   18 0C                  JR   blockend2   
0580                BLOCKEND1:      ; same scope
0580   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0583   FD 56 03               LD   d,(iy+3)   
0586   EB                     EX   de,hl   
0587   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0589   FD 5D                  LD   e,iyl   
058B   EB                     EX   de,hl   
058C                BLOCKEND2:      
058C   44 4D                  LD   bc,hl   ; bc = hl = BP
058E   B7                     OR   a   ; hl = BP - SP = count
058F   ED 72                  SBC   hl,sp   
0591   C5                     PUSH   bc   ; bc = count, hl = BP
0592   44 4D                  LD   bc,hl   
0594   E1                     POP   hl   
0595   2B                     DEC   hl   ; hl = BP-1
0596   1B                     DEC   de   ; de = args*-1
0597   ED B8                  LDDR      
0599   13                     INC   de   ; hl = new tos
059A   EB                     EX   de,hl   
059B   F9                     LD   sp,hl   ; sp = new tos
059C   D9                     EXX      ; bc = IP, iy = oldBP
059D   D5                     PUSH   de   
059E   C5                     PUSH   bc   
059F   D9                     EXX      
05A0   C1                     POP   bc   
05A1   FD E1                  POP   iy   
05A3   DD E9                  JP   (ix)   
05A5                             ; if
05A5                             ; condition then -- value
05A5                IF:          
05A5   11 00 00               LD   de,0   ; NUL pointer for else
05A8   18 01                  JR   ifte1   
05AA                             ; ifte
05AA                             ; condition then else -- value
05AA                IFTE:        
05AA   D1                     POP   de   ; de = else
05AB                IFTE1:       
05AB   E1                     POP   hl   ; hl = then
05AC   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
05AD   7C                     LD   a,h   
05AE   B5                     OR   l   
05AF   E1                     POP   hl   ; hl = then
05B0   CA D6 07               JP   z,exec0   ; if z de = else
05B3   EB                     EX   de,hl   ; condition = false, hl = else
05B4   C3 D6 07               JP   exec0   
05B7                             ; switch
05B7                             ; index array -- value
05B7                SWITCH:      
05B7   D1                     POP   de   ; de = array
05B8   E1                     POP   hl   ; hl = index
05B9   29                     ADD   hl,hl   ; if data width = 2 then double
05BA   19                     ADD   hl,de   ; add addr
05BB   5E                     LD   e,(hl)   
05BC   23                     INC   hl   
05BD   56                     LD   d,(hl)   
05BE   C3 D6 07               JP   exec0   
05C1                             ; index of an array, based on vDataWidth
05C1                             ; array num -- value    ; also sets vPointer to address
05C1                INDEX:       
05C1   E1                     POP   hl   ; hl = index
05C2   D1                     POP   de   ; de = array
05C3   3A E8 19               LD   a,(vDataWidth)   ; a = data width
05C6   3D                     DEC   a   
05C7   28 01                  JR   z,index1   
05C9                INDEX0:      
05C9   29                     ADD   hl,hl   ; if data width = 2 then double
05CA                INDEX1:      
05CA   19                     ADD   hl,de   ; add addr
05CB   22 EC 19               LD   (vPointer),hl   ; store address in setter
05CE   16 00                  LD   d,0   
05D0   5E                     LD   e,(hl)   
05D1   B7                     OR   a   ; check data width again
05D2   28 02                  JR   z,index2   
05D4   23                     INC   hl   
05D5   56                     LD   d,(hl)   
05D6                INDEX2:      
05D6   D5                     PUSH   de   
05D7   DD E9                  JP   (ix)   
05D9                             ; c b --
05D9                             ; loops until c = 0
05D9                LOOP:        
05D9   DD E9                  JP   (ix)   
05DB                             ;     pop de                      ; de = block                    c
05DB                             ;     pop hl                      ; hl = condition
05DB                             ;     push de
05DB                             ;     push bc                     ; push IP
05DB                             ;     ld bc,de                    ; bc = block
05DB                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05DB                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05DB                             ;     push de                     ; push ScopeBP
05DB                             ;     push iy                     ; push BP
05DB                             ;     ld iy,0                     ; iy = sp
05DB                             ;     add iy,sp
05DB                             ; loop1:
05DB                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05DB                             ;     or h
05DB                             ;     jr z,loop3
05DB                             ;     ld de,loop2-1               ; IP return address
05DB                             ;     push de
05DB                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05DB                             ;     ld d,(iy+3)
05DB                             ;     push de                     ;
05DB                             ;     push iy                     ; push BP
05DB                             ;     ld iy,0                     ; iy = sp
05DB                             ;     add iy,sp
05DB                             ;     push hl                     ; push condition
05DB                             ;     dec bc
05DB                             ;     jp (ix)
05DB                             ; loop2:
05DB                             ;     db ESC                      ; escape from interpreter
05DB                             ;     ld c,(iy+6)                 ; bc = block
05DB                             ;     ld b,(iy+7)
05DB                             ;     pop hl                      ; hl = condition
05DB                             ;     jr loop1
05DB                             ; loop3:
05DB                             ;     ld d,iyh                    ; de = BP
05DB                             ;     ld e,iyl
05DB                             ;     ex de,hl                    ; hl = BP, de = result
05DB                             ;     ld sp,hl                    ; sp = BP
05DB                             ;     pop hl                      ; hl = old BP
05DB                             ;     pop bc                      ; pop ScopeBP (discard)
05DB                             ;     pop bc                      ; bc = IP
05DB                             ;     ld sp,hl                    ; sp = old BP
05DB                             ;     ld iy,0                     ; iy = sp
05DB                             ;     add iy,sp
05DB                             ;     ld ix,(vNext)                  ; needed?
05DB                             ;     jp (ix)
05DB                WORDS:       
05DB   21 02 00               LD   hl,2   
05DE   18 03                  JR   bytes1   
05E0                BYTES:       
05E0   21 01 00               LD   hl,1   
05E3                BYTES1:      
05E3   22 E8 19               LD   (vDataWidth),hl   
05E6   DD E9                  JP   (ix)   
05E8                ARRAY:       
05E8   11 00 00               LD   de,0   ; create stack frame
05EB   D5                     PUSH   de   ; push null for IP
05EC   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05EF   FD 56 05               LD   d,(iy+5)   ; 
05F2   D5                     PUSH   de   ; 
05F3   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05F6   FD 56 03               LD   d,(iy+3)   ; 
05F9   D5                     PUSH   de   ; 
05FA   FD E5                  PUSH   iy   ; push BP
05FC   FD 21 00 00            LD   iy,0   ; BP = SP
0600   FD 39                  ADD   iy,sp   
0602   DD E9                  JP   (ix)   
0604                ARRAYEND:      
0604   FD 54                  LD   d,iyh   ; de = BP
0606   FD 5D                  LD   e,iyl   
0608   ED 43 F6 19            LD   (vTemp1),bc   ; save IP
060C   62 6B                  LD   hl,de   ; hl = de = BP
060E   B7                     OR   a   
060F   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0611   CB 3C                  SRL   h   ; 
0613   CB 1D                  RR   l   
0615   44 4D                  LD   bc,hl   ; bc = count
0617   2A F4 19               LD   hl,(vHeapPtr)   ; hl = array[-2]
061A   71                     LD   (hl),c   ; write num items in length word
061B   23                     INC   hl   
061C   70                     LD   (hl),b   
061D   23                     INC   hl   ; hl = array[0], bc = count
061E                             ; de = BP, hl = array[0], bc = count
061E   3A E8 19               LD   a,(vDataWidth)   ; vDataWidth=1?
0621   FE 01                  CP   1   
0623   20 10                  JR   nz,arrayEnd2   
0625                ARRAYEND1:      ; byte
0625   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0628   77                     LD   (hl),a   ; write a to array item
0629   23                     INC   hl   ; move to next byte in array
062A   FD 2B                  DEC   iy   ; move tho next word on stack
062C   FD 2B                  DEC   iy   
062E   0B                     DEC   bc   ; dec items count
062F   79                     LD   a,c   ; if not zero loop
0630   B0                     OR   b   
0631   20 F2                  JR   nz,arrayEnd1   
0633   18 13                  JR   arrayEnd3   
0635                ARRAYEND2:      ; word
0635   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0638   77                     LD   (hl),a   ; write lsb of array item
0639   23                     INC   hl   ; move to msb of array item
063A   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
063D   77                     LD   (hl),a   ; write msb of array item
063E   23                     INC   hl   ; move to next word in array
063F   FD 2B                  DEC   iy   ; move to next word on stack
0641   FD 2B                  DEC   iy   
0643   0B                     DEC   bc   ; dec items count
0644   79                     LD   a,c   ; if not zero loop
0645   B0                     OR   b   
0646   20 ED                  JR   nz,arrayEnd2   
0648                ARRAYEND3:      
0648   EB                     EX   de,hl   ; de = end of array, hl = BP
0649   F9                     LD   sp,hl   ; sp = BP
064A   E1                     POP   hl   ; de = end of array, hl = old BP
064B   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
064C   FD 62                  LD   iyh,d   
064E   FD 6B                  LD   iyl,e   
0650   D1                     POP   de   ; pop arg_list (discard)
0651   D1                     POP   de   ; pop ScopeBP (discard)
0652   D1                     POP   de   ; pop IP (discard)
0653   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = array[-2]
0657   22 F4 19               LD   (vHeapPtr),hl   ; move heapPtr to end of array
065A   ED 4B F6 19            LD   bc,(vTemp1)   ; restore IP
065E   13                     INC   de   ; de = array[0]
065F   13                     INC   de   
0660   D5                     PUSH   de   ; return array[0]
0661   DD E9                  JP   (ix)   
0663                             ; str -- num
0663                HASH:        
0663                             ; pop hl
0663                             ; push bc
0663                             ; ld bc,hl
0663                             ; call hashStr
0663                             ; pop bc
0663                             ; push hl
0663   DD E9                  JP   (ix)   
0665                             ; addr -- value
0665                DOLET:       
0665   E1                     POP   hl   ; hl = return address (immediate data)
0666   22 EC 19               LD   (vPointer),hl   ; store address in setter
0669   5E                     LD   e,(hl)   ; push immediate data
066A   23                     INC   hl   
066B   56                     LD   d,(hl)   
066C   23                     INC   hl   
066D   D5                     PUSH   de   
066E   DD E9                  JP   (ix)   
0670                SYMBOL:      
0670                             ;     inc bc
0670                             ;     ld de,PAD
0670                             ;     ld h,msb(opcodesBase)                   ; this table identifies the char type
0670                             ;     jr symbol1
0670                             ; symbol0:                                 ; copy to PAD area
0670                             ;     inc bc                              ; characters that are part of the identifier
0670                             ;     inc de
0670                             ; symbol1:                                 ; 0-9 A-Z a-z _
0670                             ;     ld a,(bc)
0670                             ;     ld (de),a
0670                             ;     cp " "+1
0670                             ;     jr c,symbol2
0670                             ;     ld l,a
0670                             ;     ld a,(hl)
0670                             ;     cp lsb(ident_)
0670                             ;     jr z,symbol0
0670                             ;     cp lsb(num_)
0670                             ;     jr z,symbol0
0670                             ; symbol2:
0670                             ;     dec bc
0670                             ;     xor a
0670                             ;     ld (de),a                           ; terminate string with NUL
0670                             ;     push bc
0670                             ;     ld bc,PAD
0670                             ;     call hashStr                        ; hl = hash
0670                             ;     pop bc
0670                             ;     push hl
0670   DD E9                  JP   (ix)   
0672                FRAC:        
0672   2A E6 19               LD   hl,(vFrac)   
0675   E5                     PUSH   hl   
0676   DD E9                  JP   (ix)   
0678                SQRT1:       
0678   E1                     POP   hl   
0679   C5                     PUSH   bc   
067A   CD EB 06               CALL   squareRoot   
067D   ED 43 E6 19            LD   (vFrac),bc   
0681   C1                     POP   bc   
0682   D5                     PUSH   de   
0683   DD E9                  JP   (ix)   
0685                ABS1:        
0685   E1                     POP   hl   
0686   CB 7C                  BIT   7,h   
0688   C8                     RET   z   
0689   AF                     XOR   a   
068A   95                     SUB   l   
068B   6F                     LD   l,a   
068C   9F                     SBC   a,a   
068D   94                     SUB   h   
068E   67                     LD   h,a   
068F   E5                     PUSH   hl   
0690   DD E9                  JP   (ix)   
0692                             ; mod:
0692                             ;     pop  de                     ; get first value
0692                             ;     pop  hl                     ; get 2nd value
0692                             ;     push bc                     ; preserve the IP
0692                             ;     ld bc,hl
0692                             ;     call divide
0692                             ;     pop bc
0692                             ;     push hl                     ; push remainder
0692                             ;     jp (ix)
0692                             ; hl = value1, de = value2
0692                             ; hl = result
0692                EQUALS:      
0692   B7                     OR   a   ; reset the carry flag
0693   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0695   28 10                  JR   z,true1   
0697   C3 AD 06               JP   false1   
069A                             ; hl = value1 de = value2
069A                             ; hl = result
069A                LESSTHANEQ:      
069A   B7                     OR   a   
069B   ED 52                  SBC   hl,de   
069D   18 05                  JR   lessthan1   
069F                             ; hl = value1 de = value2
069F                             ; hl = result
069F                LESSTHAN:      
069F   B7                     OR   a   
06A0   ED 52                  SBC   hl,de   
06A2   28 09                  JR   z,false1   
06A4                LESSTHAN1:      
06A4   FA AD 06               JP   m,false1   
06A7                TRUE1:       
06A7   21 FF FF               LD   hl,TRUE   
06AA   E5                     PUSH   hl   
06AB   DD E9                  JP   (ix)   
06AD                NULL1:       
06AD                FALSE1:      
06AD   21 00 00               LD   hl,FALSE   
06B0   E5                     PUSH   hl   
06B1   DD E9                  JP   (ix)   
06B3                             ; Z80 port input
06B3                             ; port -- value
06B3                INPUT:       
06B3   E1                     POP   hl   
06B4   59                     LD   e,c   ; save IP
06B5   4D                     LD   c,l   
06B6   ED 68                  IN   l,(c)   
06B8   26 00                  LD   h,0   
06BA   4B                     LD   c,e   ; restore IP
06BB   E5                     PUSH   hl   
06BC   DD E9                  JP   (ix)   
06BE                             ; Z80 port output
06BE                             ; value port --
06BE                OUTPUT:      
06BE   E1                     POP   hl   
06BF   59                     LD   e,c   ; save IP
06C0   4D                     LD   c,l   
06C1   E1                     POP   hl   
06C2   ED 69                  OUT   (c),l   
06C4   4B                     LD   c,e   ; restore IP
06C5   DD E9                  JP   (ix)   
06C7                KEY:         
06C7   CD 81 00               CALL   getchar   
06CA   26 00                  LD   h,0   
06CC   6F                     LD   l,a   
06CD   E5                     PUSH   hl   
06CE   DD E9                  JP   (ix)   
06D0                FILTER:      
06D0                MAP:         
06D0                SCAN:        
06D0   DD E9                  JP   (ix)   
06D2                             ; -------------------------------------------------------------------------------
06D2                             ; ; hash C-string
06D2                             ; ; BC = str
06D2                             ; ; HL = hash
06D2                             ; hashStr:
06D2                             ;     ld (vHashStr),bc                    ; store source string
06D2                             ;     ld hl,0
06D2                             ; hashStr1:
06D2                             ;     ld a,(bc)                           ; load next char
06D2                             ;     inc bc
06D2                             ;     cp 0                                ; NUL?
06D2                             ;     ret z
06D2                             ; hashStr2:
06D2                             ;     ld d,0
06D2                             ;     ld e,a
06D2                             ;     add hl,de
06D2                             ;     ld de,hl                            ; hl *= 193 (11000001)
06D2                             ;     add hl,hl                           ; shift left
06D2                             ;     add hl,de                           ; add
06D2                             ;     add hl,hl                           ; shift left
06D2                             ;     add hl,hl                           ; shift left
06D2                             ;     add hl,hl                           ; shift left
06D2                             ;     add hl,hl                           ; shift left
06D2                             ;     add hl,hl                           ; shift left
06D2                             ;     add hl,hl                           ; shift left
06D2                             ;     add hl,de                           ; add
06D2                             ;     jr hashStr1
06D2                             ; ; add entry to hash slots and hash pointers
06D2                             ; ; bc = hash (b = hi, c = lo), de = addr
06D2                             ; ; sets carry if successful
06D2                             ; defineEntry:
06D2                             ;     sla c                               ; lo = lo * 2
06D2                             ;     ld l,c                              ; lo1 = lo
06D2                             ;     ld h,msb(hashSlots)                 ; hl = slots[lo*4]
06D2                             ; defineEntry0:
06D2                             ;     ld a,(hl)                           ; a = (lo1)
06D2                             ;     cp UNUSED                           ; is it unused?
06D2                             ;     jr z,defineEntry3                   ; yes, add entry
06D2                             ;     ld a,c                              ; a = lo
06D2                             ;     cp (hl)                             ; compare (lo1) with lo
06D2                             ;     jr nz,defineEntry1                  ; no match loop around
06D2                             ;     inc l
06D2                             ;     ld a,b                              ; a = hi
06D2                             ;     cp (hl)                             ; compare (lo1+1) with hi
06D2                             ;     jr z,defineEntry2                   ; identical hash, collision, exit
06D2                             ;     dec l                               ; restore l
06D2                             ; defineEntry1:
06D2                             ;     inc l                               ; try next entry
06D2                             ;     inc l
06D2                             ;     ld a,c                              ; compare lo and lo1
06D2                             ;     cp l                                ; if equal then there's no space left, reject
06D2                             ;     jr nz,defineEntry0
06D2                             ; defineEntry2:
06D2                             ;     or a                                ; clear carry flag, failure
06D2                             ;     ret
06D2                             ; defineEntry3:                           ; new entry
06D2                             ;     ld (hl),c                           ; (lo1) = hash lo
06D2                             ;     inc hl
06D2                             ;     ld (hl),b                           ; (lo1 + 1) = hash hi
06D2                             ;     ld h,msb(hashWords)                 ; hl = slots[lo*4]
06D2                             ;     ld (hl),d
06D2                             ;     dec hl
06D2                             ;     ld (hl),e                           ; (slot + 2) = address
06D2                             ;     scf                                 ; set carry flag, success
06D2                             ;     ret
06D2                             ; ; looks up hash and returns address
06D2                             ; ; bc = hash
06D2                             ; ; returns addr in hl, sets carry if successful
06D2                             ; lookupEntry:
06D2                             ;     sla c                               ; lo = lo * 2
06D2                             ;     ld l,c                              ; lo1 = lo
06D2                             ;     ld h,msb(hashSlots)                 ; hl = slots[lo*4]
06D2                             ; lookupEntry0:
06D2                             ;     ld a,(hl)                           ; a = (hl), slot
06D2                             ;     cp UNUSED                           ; is it unused?
06D2                             ;     jr z,defineEntry2                   ; yes, does not exist
06D2                             ;     ld a,c                              ; a = lo
06D2                             ;     cp (hl)                             ; compare (lo1) with lo
06D2                             ;     jr nz,lookupEntry1                  ; no match loop around
06D2                             ;     inc l
06D2                             ;     ld a,b                              ; a = hi
06D2                             ;     cp (hl)                             ; compare (lo1+1) with hi
06D2                             ;     jr z,lookupEntry3
06D2                             ;     dec l
06D2                             ; lookupEntry1:
06D2                             ;     inc l
06D2                             ;     inc l
06D2                             ;     ld a,c
06D2                             ;     cp l                                ; no space left, reject
06D2                             ;     jr nz,lookupEntry0
06D2                             ; lookupEntry2:
06D2                             ;     or a                                ; clear carry flag, failure
06D2                             ;     ret
06D2                             ; lookupEntry3:
06D2                             ;     ld h,msb(hashWords)                 ; hl = slots[lo*4]
06D2                             ;     ld d,(hl)
06D2                             ;     dec l                               ; restore l
06D2                             ;     ld e,(hl)                           ; (slot + 2) = address
06D2                             ;     ex de,hl
06D2                             ;     scf
06D2                             ;     ret
06D2                             ; division subroutine.
06D2                             ; bc: divisor, de: dividend, hl: remainder
06D2                DIVIDE:      
06D2   21 00 00               LD   hl,0   ; zero the remainder
06D5   3E 10                  LD   a,16   ; loop counter
06D7                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
06D7   CB 21                  SLA   c   
06D9   CB 10                  RL   b   
06DB   ED 6A                  ADC   hl,hl   
06DD   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
06DF   38 03                  JR   c,divide2   
06E1   0C                     INC   c   
06E2   18 01                  JR   divide3   
06E4                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
06E4   19                     ADD   hl,de   
06E5                DIVIDE3:      
06E5   3D                     DEC   a   
06E6   20 EF                  JR   nz,divide1   
06E8   50 59                  LD   de,bc   ; result from bc to de
06EA   C9                     RET      
06EB                             ; squareroot
06EB                             ; Input: HL = value
06EB                             ; Result: DE = square root BC = remainder
06EB                SQUAREROOT:      
06EB   01 00 08               LD   bc,0800h   
06EE   59                     LD   e,c   
06EF   AF                     XOR   a   
06F0                SQUAREROOT1:      
06F0   29                     ADD   hl,hl   
06F1   CB 11                  RL   c   
06F3   ED 6A                  ADC   hl,hl   
06F5   CB 11                  RL   c   
06F7   30 02                  JR   nc,$+4   
06F9   CB C5                  SET   0,l   
06FB   7B                     LD   a,e   
06FC   87                     ADD   a,a   
06FD   5F                     LD   e,a   
06FE   87                     ADD   a,a   
06FF   CB 45                  BIT   0,l   
0701   20 03                  JR   nz,$+5   
0703   91                     SUB   c   
0704   30 05                  JR   nc,squareRoot4   
0706   79                     LD   a,c   
0707   93                     SUB   e   
0708   1C                     INC   e   
0709   93                     SUB   e   
070A   4F                     LD   c,a   
070B                SQUAREROOT4:      
070B   10 E3                  DJNZ   squareRoot1   
070D   CB 45                  BIT   0,l   
070F   28 01                  JR   z,squareRoot5   
0711   04                     INC   b   
0712                SQUAREROOT5:      
0712   16 00                  LD   d,0   
0714   C9                     RET      
0715                             ; print decimal
0715                             ; hl = value
0715                PRTDEC:      
0715   CB 7C                  BIT   7,h   
0717   28 0B                  JR   z,prtdec0   
0719   3E 2D                  LD   a,"-"   
071B   CD 85 00               CALL   putchar   
071E   AF                     XOR   a   
071F   95                     SUB   l   
0720   6F                     LD   l,a   
0721   9F                     SBC   a,a   
0722   94                     SUB   h   
0723   67                     LD   h,a   
0724                PRTDEC0:      
0724   C5                     PUSH   bc   
0725   0E 00                  LD   c,0   ; leading zeros flag = false
0727   11 F0 D8               LD   de,-10000   
072A   CD 46 07               CALL   prtdec1   
072D   11 18 FC               LD   de,-1000   
0730   CD 46 07               CALL   prtdec1   
0733   11 9C FF               LD   de,-100   
0736   CD 46 07               CALL   prtdec1   
0739   1E F6                  LD   e,-10   
073B   CD 46 07               CALL   prtdec1   
073E   0C                     INC   c   ; flag = true for at least digit
073F   1E FF                  LD   e,-1   
0741   CD 46 07               CALL   prtdec1   
0744   C1                     POP   bc   
0745   C9                     RET      
0746                PRTDEC1:      
0746   06 2F                  LD   b,"0"-1   
0748                PRTDEC2:      
0748   04                     INC   b   
0749   19                     ADD   hl,de   
074A   38 FC                  JR   c,prtdec2   
074C   ED 52                  SBC   hl,de   
074E   3E 30                  LD   a,"0"   
0750   B8                     CP   b   
0751   20 05                  JR   nz,prtdec3   
0753   AF                     XOR   a   
0754   B1                     OR   c   
0755   C8                     RET   z   
0756   18 01                  JR   prtdec4   
0758                PRTDEC3:      
0758   0C                     INC   c   
0759                PRTDEC4:      
0759   78                     LD   a,b   
075A   C3 85 00               JP   putchar   
075D                PRTHEX:      ; display hl as a 16-bit number in hex.
075D   C5                     PUSH   bc   ; preserve the IP
075E   7C                     LD   a,h   
075F   CD 68 07               CALL   prthex2   
0762   7D                     LD   a,l   
0763   CD 68 07               CALL   prthex2   
0766   C1                     POP   bc   
0767   C9                     RET      
0768                PRTHEX2:      
0768   4F                     LD   c,a   
0769   1F                     RRA      
076A   1F                     RRA      
076B   1F                     RRA      
076C   1F                     RRA      
076D   CD 71 07               CALL   prthex3   
0770   79                     LD   a,c   
0771                PRTHEX3:      
0771   E6 0F                  AND   0x0F   
0773   C6 90                  ADD   a,0x90   
0775   27                     DAA      
0776   CE 40                  ADC   a,0x40   
0778   27                     DAA      
0779   C3 85 00               JP   putchar   
077C                PRTSTR0:      
077C   CD 85 00               CALL   putchar   
077F   23                     INC   hl   
0780                PRTSTR:      
0780   7E                     LD   a,(hl)   
0781   B7                     OR   a   
0782   20 F8                  JR   nz,prtstr0   
0784   C9                     RET      
0785                             ; **************************************************************************
0785                             ; calculate nesting value
0785                             ; a is char to be tested,
0785                             ; e is the nesting value (initially 0)
0785                             ; e is increased by ( and [
0785                             ; e is decreased by ) and ]
0785                             ; e has its bit 7 toggled by `
0785                             ; limited to 127 levels
0785                             ; **************************************************************************
0785                NESTING:      
0785   FE 22                  CP   $22   ; quote char
0787   20 0A                  JR   nz,nesting1   
0789   CB 7B                  BIT   7,e   
078B   28 03                  JR   z,nesting1a   
078D   CB BB                  RES   7,e   
078F   C9                     RET      
0790                NESTING1A:      
0790   CB FB                  SET   7,e   
0792   C9                     RET      
0793                NESTING1:      
0793   CB 7B                  BIT   7,e   
0795   C0                     RET   nz   
0796   FE 7B                  CP   "{"   
0798   28 08                  JR   z,nesting2   
079A   FE 5B                  CP   "["   
079C   28 04                  JR   z,nesting2   
079E   FE 28                  CP   "("   
07A0   20 02                  JR   nz,nesting3   
07A2                NESTING2:      
07A2   1C                     INC   e   
07A3   C9                     RET      
07A4                NESTING3:      
07A4   FE 7D                  CP   "}"   
07A6   28 07                  JR   z,nesting4   
07A8   FE 5D                  CP   "]"   
07AA   28 03                  JR   z,nesting4   
07AC   FE 29                  CP   ")"   
07AE   C0                     RET   nz   
07AF                NESTING4:      
07AF   1D                     DEC   e   
07B0   C9                     RET      
07B1                PROMPT:      
07B1   CD C1 07               CALL   printStr   
07B4   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07B9   C9                     RET      
07BA                CRLF:        
07BA   CD C1 07               CALL   printStr   
07BD   0D 0A 00               .CSTR   "\r\n"   
07C0   C9                     RET      
07C1                             ; prints a null teminated string
07C1                             ; the string should be immedaitely following the call
07C1                PRINTSTR:      
07C1   E3                     EX   (sp),hl   ; swap			
07C2   CD 80 07               CALL   prtstr   
07C5   23                     INC   hl   ; inc past NUL
07C6   E3                     EX   (sp),hl   ; put it back	
07C7   C9                     RET      
07C8                             ; branch:                         ; executes the address on the stack
07C8                             ;     pop bc                      ; bc = code*
07C8                             ;     dec bc                      ; dec to prepare for next routine
07C8                             ;     jp (ix)
07C8                             ; executes a null teminated string (null executes exit_)
07C8                             ; the string should be immedaitely following the call
07C8                EXECSTR:      ; create a root stack frame
07C8   C1                     POP   bc   ; bc = code*
07C9   0B                     DEC   bc   ; dec to prepare for next routine
07CA   11 00 00               LD   de,0   
07CD   D5                     PUSH   de   ; push fake IP
07CE   D5                     PUSH   de   ; push null arglist*
07CF   D5                     PUSH   de   ; push null first_arg*
07D0   D5                     PUSH   de   ; push fake BP
07D1   DD E9                  JP   (ix)   
07D3                             ; define:
07D3                             ;     pop hl
07D3                             ;     ld a,(hl)
07D3                             ;     inc hl
07D3                             ;     ld bc,hl
07D3                             ;     ld e,a
07D3                             ;     ld d,0
07D3                             ;     add hl,de
07D3                             ;     ld e,(hl)
07D3                             ;     inc hl
07D3                             ;     ld d,(hl)
07D3                             ;     inc hl
07D3                             ;     push hl                             ; bc = str
07D3                             ;     push de
07D3                             ;     call hashStr                        ; hl = hash
07D3                             ;     pop de
07D3                             ;     ld bc,hl
07D3                             ;     jp defineEntry
07D3                             ; arg1 .. argn func -- ?
07D3                CALL:        
07D3   E1                     POP   hl   
07D4   E9                     JP   (hl)   
07D5                             ; execute a block of code which ends with }
07D5                             ; creates a root scope if BP == stack
07D5                             ; else uses outer scope
07D5                EXEC:        
07D5   D1                     POP   de   ; de = block*
07D6                EXEC0:       
07D6   7B                     LD   a,e   ; if block* == null, exit
07D7   B2                     OR   d   
07D8   20 02                  JR   nz,exec1   
07DA   DD E9                  JP   (ix)   
07DC                EXEC1:       
07DC   C5                     PUSH   bc   ; push IP
07DD   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
07E0   FD 44                  LD   b,iyh   
07E2   FD 4D                  LD   c,iyl   
07E4   B7                     OR   a   ; hl = stack - BP = root_scope
07E5   ED 42                  SBC   hl,bc   
07E7   7D                     LD   a,l   ; if root_scope, skip
07E8   B4                     OR   h   
07E9   28 11                  JR   z,exec2   
07EB   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
07EE   FD 46 05               LD   b,(iy+5)   
07F1   C5                     PUSH   bc   
07F2   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
07F5   FD 46 03               LD   b,(iy+3)   
07F8   60 69                  LD   hl,bc   
07FA   18 34                  JR   doFunc4   
07FC                EXEC2:       
07FC   E5                     PUSH   hl   ; push arg_list (null)
07FD   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0800   39                     ADD   hl,sp   
0801   18 2D                  JR   doFunc4   ; 
0803                             ; call with args
0803                             ; creates a scope
0803                             ; code* -- ?
0803                DOFUNC:      ; execute code at pointer
0803   E1                     POP   hl   ; hl = code*
0804   7D                     LD   a,l   ; if code* == null, skip
0805   B4                     OR   h   
0806   28 34                  JR   z,doFunc5   
0808   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0809   23                     INC   hl   
080A   56                     LD   d,(hl)   
080B   23                     INC   hl   
080C   EB                     EX   de,hl   
080D   7D                     LD   a,l   ; if arg_list* != null skip
080E   B4                     OR   h   
080F   20 08                  JR   nz,doFunc1   
0811   C5                     PUSH   bc   ; push IP
0812   E5                     PUSH   hl   ; push arg_list (null)
0813   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0816   39                     ADD   hl,sp   
0817   18 17                  JR   doFunc4   
0819                DOFUNC1:      
0819   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
081A   7E                     LD   a,(hl)   
081B   23                     INC   hl   
081C   B7                     OR   a   
081D   28 05                  JR   z,doFunc3   
081F                DOFUNC2:      
081F   3B                     DEC   sp   
0820   3B                     DEC   sp   
0821   3D                     DEC   a   
0822   20 FB                  JR   nz,doFunc2   
0824                DOFUNC3:      
0824   C5                     PUSH   bc   ; push IP
0825   E5                     PUSH   hl   ; push arg_list*
0826   2B                     DEC   hl   ; hl = num_args*
0827   2B                     DEC   hl   
0828   7E                     LD   a,(hl)   ; hl = num_args * 2
0829   87                     ADD   a,a   
082A   C6 04                  ADD   a,4   ; offset for IP and arg_list
082C   6F                     LD   l,a   
082D   26 00                  LD   h,$0   
082F   39                     ADD   hl,sp   ; hl = first_arg*
0830                DOFUNC4:      
0830   E5                     PUSH   hl   ; push first_arg
0831   FD E5                  PUSH   iy   ; push BP
0833   FD 21 00 00            LD   iy,0   ; BP = SP
0837   FD 39                  ADD   iy,sp   
0839   42 4B                  LD   bc,de   ; bc = de = block*-1
083B   0B                     DEC   bc   
083C                DOFUNC5:      
083C   DD E9                  JP   (ix)   
083E                             ; arg_list* block* -- ptr
083E                FUNC:        
083E   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heapptr
0841   36 CD                  LD   (hl),$cd   ; compile "call doFunc"
0843   23                     INC   hl   
0844   36 03                  LD   (hl),lsb(doFunc)   
0846   23                     INC   hl   
0847   36 08                  LD   (hl),msb(doFunc)   
0849   23                     INC   hl   
084A   D1                     POP   de   ; hl = heapPtr, de = block
084B   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
084C   E3                     EX   (sp),hl   
084D   EB                     EX   de,hl   
084E   73                     LD   (hl),e   ; compile arg_list*
084F   23                     INC   hl   
0850   72                     LD   (hl),d   
0851   23                     INC   hl   
0852   D1                     POP   de   ; de = block*
0853   C5                     PUSH   bc   ; (sp) = IP
0854   06 01                  LD   b,1   ; b = nesting
0856                FUNC1:       
0856   1A                     LD   a,(de)   
0857   13                     INC   de   
0858   77                     LD   (hl),a   
0859   23                     INC   hl   
085A   FE 29                  CP   ")"   
085C   28 29                  JR   z,func4   
085E   FE 7D                  CP   "}"   
0860   28 25                  JR   z,func4   
0862   FE 5D                  CP   "]"   
0864   28 21                  JR   z,func4   
0866   FE 28                  CP   "("   
0868   28 12                  JR   z,func2   
086A   FE 7B                  CP   "{"   
086C   28 0E                  JR   z,func2   
086E   FE 5B                  CP   "["   
0870   28 0A                  JR   z,func2   
0872   FE 27                  CP   "'"   
0874   28 09                  JR   z,func3   
0876   FE 60                  CP   "`"   
0878   28 05                  JR   z,func3   
087A   18 DA                  JR   func1   
087C                FUNC2:       
087C   04                     INC   b   
087D   18 D7                  JR   func1   
087F                FUNC3:       
087F   3E 80                  LD   a,$80   
0881   A8                     XOR   b   
0882   47                     LD   b,a   
0883   20 D1                  JR   nz,func1   
0885   18 03                  JR   func4a   
0887                FUNC4:       
0887   05                     DEC   b   
0888   20 CC                  JR   nz,func1   ; get the next element
088A                FUNC4A:      
088A   23                     INC   hl   
088B   C1                     POP   bc   ; de = defstart, hl = IP
088C   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = defstart
0890   D5                     PUSH   de   
0891   22 F4 19               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0894   DD E9                  JP   (ix)   
0896                             ; $a .. $z
0896                             ; -- value
0896                             ; returns value of arg
0896                ARG:         
0896   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0899   FD 56 05               LD   d,(iy+5)   
089C   EB                     EX   de,hl   
089D   7D                     LD   a,l   ; arg_list* == null, skip
089E   B4                     OR   h   
089F   28 1C                  JR   z,arg0a   
08A1   2B                     DEC   hl   ; a = num_args, hl = arg_list*
08A2   2B                     DEC   hl   
08A3   7E                     LD   a,(hl)   
08A4   23                     INC   hl   
08A5   23                     INC   hl   
08A6   B7                     OR   a   
08A7   28 14                  JR   z,arg0a   ; num_args == 0, skip
08A9   5F                     LD   e,a   ; e = a = num_args
08AA   03                     INC   bc   ; a = next char = arg_name
08AB   0A                     LD   a,(bc)   
08AC   C5                     PUSH   bc   ; save IP
08AD   43                     LD   b,e   ; b = e = num_args
08AE   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
08B1   FD 56 03               LD   d,(iy+3)   
08B4                ARG0:        
08B4   1B                     DEC   de   ; a = arg_name, de = next arg*
08B5   1B                     DEC   de   
08B6   BE                     CP   (hl)   
08B7   28 09                  JR   z,arg1   
08B9   23                     INC   hl   ; hl = next arg_list*
08BA   10 F8                  DJNZ   arg0   
08BC   C1                     POP   bc   ; no match, restore IP
08BD                ARG0A:       
08BD   11 00 00               LD   de,0   ; return 0
08C0   18 08                  JR   arg1a   
08C2                ARG1:        
08C2   C1                     POP   bc   ; restore IP
08C3   EB                     EX   de,hl   ; hl = arg*
08C4   22 EC 19               LD   (vPointer),hl   ; store arg* in setter
08C7   5E                     LD   e,(hl)   
08C8   23                     INC   hl   
08C9   56                     LD   d,(hl)   ; de = arg
08CA                ARG1A:       
08CA   D5                     PUSH   de   ; push arg
08CB   DD E9                  JP   (ix)   
08CD                             ; closure:
08CD                             ; array -- addr
08CD                CLOSURE:      
08CD   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap_ptr
08D0   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
08D2   23                     INC   hl   
08D3   36 E7                  LD   (hl),lsb(doClosure)   
08D5   23                     INC   hl   
08D6   36 08                  LD   (hl),msb(doClosure)   
08D8   D1                     POP   de   
08D9   23                     INC   hl   
08DA   73                     LD   (hl),e   
08DB   23                     INC   hl   
08DC   72                     LD   (hl),d   
08DD   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = closure start
08E1   D5                     PUSH   de   
08E2   22 F4 19               LD   (vHeapPtr),hl   ; update heap ptr to end of closure
08E5   DD E9                  JP   (ix)   
08E7                             ; code* -- arr1 arr2 .. arrn func
08E7                DOCLOSURE:      
08E7   E1                     POP   hl   ; hl = code*
08E8   5E                     LD   e,(hl)   ; de = array
08E9   23                     INC   hl   
08EA   56                     LD   d,(hl)   
08EB   23                     INC   hl   
08EC   7B                     LD   a,e   ; de == null, skip
08ED   B2                     OR   d   
08EE   28 17                  JR   z,doClosure3   
08F0   EB                     EX   de,hl   ; hl = array
08F1   ED 43 F6 19            LD   (vTemp1),bc   ; save IP
08F5   2B                     DEC   hl   ; bc = count
08F6   46                     LD   b,(hl)   
08F7   2B                     DEC   hl   
08F8   4E                     LD   c,(hl)   
08F9   23                     INC   hl   ; push each item on stack
08FA   23                     INC   hl   
08FB   18 06                  JR   doClosure2   
08FD                DOCLOSURE1:      
08FD   5E                     LD   e,(hl)   
08FE   23                     INC   hl   
08FF   56                     LD   d,(hl)   
0900   23                     INC   hl   
0901   D5                     PUSH   de   
0902   0B                     DEC   bc   
0903                DOCLOSURE2:      
0903   79                     LD   a,c   
0904   B0                     OR   b   
0905   20 F6                  JR   nz,doClosure1   
0907                DOCLOSURE3:      
0907   ED 4B F6 19            LD   bc,(vTemp1)   ; restore IP
090B   DD E9                  JP   (ix)   
090D                             ; ; readIdent
090D                             ; ; reads identifier from input stream into buffer
090D                             ; ; input: bc = IP, de = buffer
090D                             ; readIdent:
090D                             ;     ld h,msb(opcodesBase)               ; this table identifies the char type
090D                             ;     jr readIdent1
090D                             ; readIdent0:                             ; copy to PAD area
090D                             ;     inc bc                              ; characters that are part of the identifier
090D                             ;     inc de
090D                             ; readIdent1:                             ; 0-9 A-Z a-z
090D                             ;     ld a,(bc)
090D                             ;     ld (de),a
090D                             ;     cp " "+1
090D                             ;     jr c,readIdent2
090D                             ;     ld l,a
090D                             ;     ld a,(hl)
090D                             ;     cp lsb(ident_)
090D                             ;     jr z,readIdent0
090D                             ;     cp lsb(num_)
090D                             ;     jr z,readIdent0
090D                             ; readIdent2:
090D                             ;     dec bc
090D                             ;     xor a
090D                             ;     ld (de),a                           ; terminate string with NUL
090D                             ;     ret
090D                INIT:        
090D   DD 2A F2 19            LD   ix,(vNext)   
0911   FD 21 80 18            LD   iy,STACK   
0915   21 80 01               LD   hl,isysVars   
0918   11 E6 19               LD   de,sysVars   
091B   01 10 00               LD   bc,8 * 2   
091E   ED B0                  LDIR      
0920   21 00 19               LD   hl,vars   ; 52 vars LO HI
0923   06 34                  LD   b,26*2   
0925   AF                     XOR   a   
0926                INIT0:       
0926   77                     LD   (hl),a   
0927   23                     INC   hl   
0928   10 FC                  DJNZ   init0   
092A   C9                     RET      
092B                             ; call define
092B                             ; .pstr "abs",0
092B                             ; dw abs1 \a
092B                             ; call define
092B                             ; .pstr "addr",0
092B                             ; dw addr @
092B                             ; call define
092B                             ; .pstr "bytes",0
092B                             ; dw bytes \b
092B                             ; call define
092B                             ; .pstr "call",0
092B                             ; dw call :
092B                             ; call define
092B                             ; .pstr "exec",0
092B                             ; dw exec
092B                             ; call define
092B                             ; .pstr "false",0
092B                             ; dw false1 \f
092B                             ; call define
092B                             ; .pstr "filter",0
092B                             ; dw filter \f ?
092B                             ; call define
092B                             ; .pstr "frac",0
092B                             ; dw frac %
092B                             ; call define
092B                             ; .pstr "func",0
092B                             ; dw func
092B                             ; call define
092B                             ; .pstr "hash",0
092B                             ; dw hash \h
092B                             ; call define
092B                             ; .pstr "input",0
092B                             ; dw input \in ?
092B                             ; call define
092B                             ; .pstr "if",0
092B                             ; dw if \if
092B                             ; call define
092B                             ; .pstr "ifte",0
092B                             ; dw ifte \ife
092B                             ; call define
092B                             ; .pstr "key",0
092B                             ; dw key \k
092B                             ; call define
092B                             ; .pstr "let",0
092B                             ; dw let =
092B                             ; call define
092B                             ; .pstr "loop",0
092B                             ; dw loop \rpt
092B                             ; call define
092B                             ; .pstr "map",0
092B                             ; dw map \m ?
092B                             ; call define
092B                             ; .pstr "nil",0
092B                             ; dw null1. \0 ?
092B                             ; call define
092B                             ; .pstr "output",0
092B                             ; dw output \out ?
092B                             ; call define
092B                             ; .pstr "scan",0
092B                             ; dw scan.  \fold ?
092B                             ; call define
092B                             ; .pstr "set",0
092B                             ; dw set. ?
092B                             ; call define
092B                             ; .pstr "shiftLeft",0
092B                             ; dw shiftLeft <<
092B                             ; call define
092B                             ; .pstr "shiftRight",0
092B                             ; dw shiftRight >>
092B                             ; call define
092B                             ; .pstr "sqrt",0
092B                             ; dw sqrt1 \sqt
092B                             ; call define
092B                             ; .pstr "switch",0
092B                             ; dw switch. \sw
092B                             ; call define
092B                             ; .pstr "true",0
092B                             ; dw true1.   \t
092B                             ; call define
092B                             ; .pstr "words",0
092B                             ; dw words.  \w
092B                START:       
092B   31 80 18               LD   sp,STACK   ; start of monty
092E   CD 0D 09               CALL   init   ; setups
0931   CD C1 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0934   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0941                INTERPRET:      
0941   CD B1 07               CALL   prompt   
0944   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0947   ED 43 EA 19            LD   (vTIBPtr),bc   
094B                INTERPRET2:      ; calc nesting (a macro might have changed it)
094B   1E 00                  LD   e,0   ; initilize nesting value
094D   C5                     PUSH   bc   ; save offset into TIB,
094E                             ; bc is also the count of chars in TIB
094E   21 00 1A               LD   hl,TIB   ; hl is start of TIB
0951   18 06                  JR   interpret4   
0953                INTERPRET3:      
0953   7E                     LD   a,(hl)   ; a = char in TIB
0954   23                     INC   hl   ; inc pointer into TIB
0955   0B                     DEC   bc   ; dec count of chars in TIB
0956   CD 85 07               CALL   nesting   ; update nesting value
0959                INTERPRET4:      
0959   79                     LD   a,c   ; is count zero?
095A   B0                     OR   b   
095B   20 F6                  JR   nz,interpret3   ; if not loop
095D   C1                     POP   bc   ; restore offset into TIB
095E                INTERPRET5:      
095E   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0961   FE 20                  CP   $20   ; compare to space
0963   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0965   FE 00                  CP   $0   ; is it end of string? NUL end of string
0967                             ; ???? NEEDED?
0967   28 27                  JR   z,interpret8   
0969   FE 0D                  CP   "\r"   ; carriage return? ascii 13
096B   28 10                  JR   z,interpret7   ; if anything else its macro/control
096D                             ; macro
096D                             ;  ld (vTIBPtr),bc
096D                             ;  ld hl,ctrlCodes
096D                             ;  add a,l			            ; look up key of macros
096D                             ;  ld l,a
096D                             ;  ld e,(hl)
096D                             ;  ld a,e
096D                             ;  or a
096D                             ;  jr z,macro1
096D                             ;  ld d,msb(macros)
096D                             ;  push de
096D                             ;  call call		            ; monty exec_ operation and jump to it
096D                             ;  db DC1,0
096D                             ; macro1:
096D                             ;  ld bc,(vTIBPtr)
096D   18 DC                  JR   interpret2   
096F                INTERPRET6:      
096F   21 00 1A               LD   hl,TIB   
0972   09                     ADD   hl,bc   
0973   77                     LD   (hl),a   ; store the character in textbuf
0974   03                     INC   bc   
0975   CD 85 00               CALL   putchar   ; echo character to screen
0978   CD 85 07               CALL   nesting   
097B   18 E1                  JR   interpret5   ; wait for next character
097D                INTERPRET7:      
097D   21 00 1A               LD   hl,TIB   
0980   09                     ADD   hl,bc   
0981   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0983   23                     INC   hl   
0984   36 0A                  LD   (hl),"\n"   
0986   23                     INC   hl   
0987   03                     INC   bc   
0988   03                     INC   bc   
0989   CD BA 07               CALL   crlf   ; echo character to screen
098C   7B                     LD   a,e   ; if zero nesting append and ETX after \r
098D   B7                     OR   a   
098E   20 CE                  JR   nz,interpret5   
0990                INTERPRET8:      
0990   ED 43 EA 19            LD   (vTIBPtr),bc   
0994   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0997                             ; we pressed enter
0997   0B                     DEC   bc   
0998                NEXT:        
0998   03                     INC   bc   ; Increment the IP
0999   0A                     LD   a,(bc)   ; Get the next character and dispatch
099A   FE 20                  CP   " "   ; whitespace?
099C   28 FA                  JR   z,next   ; space? ignore
099E   38 0B                  JR   c,next1   
09A0   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
09A2   30 0E                  JR   nc,next2   
09A4   6F                     LD   l,a   ; index into table
09A5   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09A7   6E                     LD   l,(hl)   ; get low jump address
09A8   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09AA   E9                     JP   (hl)   ; Jump to routine
09AB                NEXT1:       
09AB   FE 00                  CP   NUL   ; end of input string?
09AD   28 09                  JR   z,exit_   
09AF   C3 41 09               JP   interpret   ; no, other whitespace, macros?
09B2                NEXT2:       
09B2   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
09B3   03                     INC   bc   
09B4   0A                     LD   a,(bc)   
09B5   6F                     LD   l,a   
09B6   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
09B7   E9                     JP   (hl)   
09B8                EXIT_:       
09B8   60 69                  LD   hl,bc   
09BA   E9                     JP   (hl)   
09BB                ERROR:       
09BB   CD C1 07               CALL   printStr   
09BE   45 72 72 6F 72 00      .CSTR   "Error"   
09C4   CD 15 07               CALL   prtdec   
09C7   C3 41 09               JP   interpret   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                          ALIGN   $100   
1900                VARS:        
1900                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
19D0                RESTARTS:      
19D0                RST08:    DS   2   
19D2                RST10:    DS   2   
19D4                RST18:    DS   2   
19D6                RST20:    DS   2   
19D8                RST28:    DS   2   
19DA                RST30:    DS   2   ; 
19DC                BAUD:     DS   2   ; 
19DE                INTVEC:   DS   2   ; 
19E0                NMIVEC:   DS   2   ; 
19E2                GETCVEC:   DS   2   ; 
19E4                PUTCVEC:   DS   2   ; 
19E6                SYSVARS:      
19E6                VFRAC:    DS   2   ; initialised sys variables
19E8                VDATAWIDTH:   DS   2   ; 
19EA                VTIBPTR:   DS   2   ; 
19EC                VPOINTER:   DS   2   ; 
19EE                VLASTDEF:   DS   2   ; 
19F0                VHASHSTR:   DS   2   ; 
19F2                VNEXT:    DS   2   ; 
19F4                VHEAPPTR:   DS   2   ; 
19F6                VTEMP1:   DS   2   ; uninitialised sys variables
19F8                VTEMP2:   DS   2   ; 
19FA                TBPTR:    DS   2   ; reserved for tests
19FC                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "x", 0
4000   31 80 18               LD   SP,STACK   
4003   CD 0D 09               CALL   init   
4006   CD C8 07               CALL   execStr   
4009   78 00                  .CSTR   "x"   
400B                          ;*Macro unroll:  expect "x",0
400B   E1                     POP   HL   
400C   E5                     PUSH   HL   
400D   11 00 00               LD   DE,0   
4010   B7                     OR   A   
4011   ED 52                  SBC   HL,DE   
4013   7D                     LD   A,L   
4014   B4                     OR   H   
4015   28 4C                  JR   Z,expectM_0_2455S43   
4017   CD C1 07               CALL   printStr   
401A   43 6F 64 65 3A 20 78 00 .CSTR   "Code: ","x"   
4022   CD C1 07               CALL   printStr   
4025   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4034   21 00 00               LD   HL,0   
4037   CD 15 07               CALL   prtdec   
403A   CD C1 07               CALL   printStr   
403D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404A   E1                     POP   hl   
404B   E5                     PUSH   hl   
404C   CD 15 07               CALL   prtdec   
404F   E1                     POP   hl   
4050   CD C1 07               CALL   printStr   
4053   20 28 23 00            .CSTR   " (#"   
4057   CD 5D 07               CALL   prthex   
405A   CD C1 07               CALL   printStr   
405D   29 0D 0A 00            .CSTR   ")\r\n"   
4061   76                     HALT      
4062   00                     .CSTR      
4063                EXPECTM_0_2455S43:      
4063   E1                     POP   HL   
4064                          ;*Macro unroll:  test "1 x = x", 1
4064   31 80 18               LD   SP,STACK   
4067   CD 0D 09               CALL   init   
406A   CD C8 07               CALL   execStr   
406D   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
4075                          ;*Macro unroll:  expect "1 x = x",1
4075   E1                     POP   HL   
4076   E5                     PUSH   HL   
4077   11 01 00               LD   DE,1   
407A   B7                     OR   A   
407B   ED 52                  SBC   HL,DE   
407D   7D                     LD   A,L   
407E   B4                     OR   H   
407F   28 52                  JR   Z,expectM_0_2456S43   
4081   CD C1 07               CALL   printStr   
4084   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
4092   CD C1 07               CALL   printStr   
4095   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40A4   21 01 00               LD   HL,1   
40A7   CD 15 07               CALL   prtdec   
40AA   CD C1 07               CALL   printStr   
40AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40BA   E1                     POP   hl   
40BB   E5                     PUSH   hl   
40BC   CD 15 07               CALL   prtdec   
40BF   E1                     POP   hl   
40C0   CD C1 07               CALL   printStr   
40C3   20 28 23 00            .CSTR   " (#"   
40C7   CD 5D 07               CALL   prthex   
40CA   CD C1 07               CALL   printStr   
40CD   29 0D 0A 00            .CSTR   ")\r\n"   
40D1   76                     HALT      
40D2   00                     .CSTR      
40D3                EXPECTM_0_2456S43:      
40D3   E1                     POP   HL   
40D4                             ; 
40D4                          ;*Macro unroll:  test "1", 1
40D4   31 80 18               LD   SP,STACK   
40D7   CD 0D 09               CALL   init   
40DA   CD C8 07               CALL   execStr   
40DD   31 00                  .CSTR   "1"   
40DF                          ;*Macro unroll:  expect "1",1
40DF   E1                     POP   HL   
40E0   E5                     PUSH   HL   
40E1   11 01 00               LD   DE,1   
40E4   B7                     OR   A   
40E5   ED 52                  SBC   HL,DE   
40E7   7D                     LD   A,L   
40E8   B4                     OR   H   
40E9   28 4C                  JR   Z,expectM_0_2458S43   
40EB   CD C1 07               CALL   printStr   
40EE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
40F6   CD C1 07               CALL   printStr   
40F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4108   21 01 00               LD   HL,1   
410B   CD 15 07               CALL   prtdec   
410E   CD C1 07               CALL   printStr   
4111   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
411E   E1                     POP   hl   
411F   E5                     PUSH   hl   
4120   CD 15 07               CALL   prtdec   
4123   E1                     POP   hl   
4124   CD C1 07               CALL   printStr   
4127   20 28 23 00            .CSTR   " (#"   
412B   CD 5D 07               CALL   prthex   
412E   CD C1 07               CALL   printStr   
4131   29 0D 0A 00            .CSTR   ")\r\n"   
4135   76                     HALT      
4136   00                     .CSTR      
4137                EXPECTM_0_2458S43:      
4137   E1                     POP   HL   
4138                          ;*Macro unroll:  test "2", 2
4138   31 80 18               LD   SP,STACK   
413B   CD 0D 09               CALL   init   
413E   CD C8 07               CALL   execStr   
4141   32 00                  .CSTR   "2"   
4143                          ;*Macro unroll:  expect "2",2
4143   E1                     POP   HL   
4144   E5                     PUSH   HL   
4145   11 02 00               LD   DE,2   
4148   B7                     OR   A   
4149   ED 52                  SBC   HL,DE   
414B   7D                     LD   A,L   
414C   B4                     OR   H   
414D   28 4C                  JR   Z,expectM_0_2459S43   
414F   CD C1 07               CALL   printStr   
4152   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
415A   CD C1 07               CALL   printStr   
415D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
416C   21 02 00               LD   HL,2   
416F   CD 15 07               CALL   prtdec   
4172   CD C1 07               CALL   printStr   
4175   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4182   E1                     POP   hl   
4183   E5                     PUSH   hl   
4184   CD 15 07               CALL   prtdec   
4187   E1                     POP   hl   
4188   CD C1 07               CALL   printStr   
418B   20 28 23 00            .CSTR   " (#"   
418F   CD 5D 07               CALL   prthex   
4192   CD C1 07               CALL   printStr   
4195   29 0D 0A 00            .CSTR   ")\r\n"   
4199   76                     HALT      
419A   00                     .CSTR      
419B                EXPECTM_0_2459S43:      
419B   E1                     POP   HL   
419C                          ;*Macro unroll:  test "1", 1
419C   31 80 18               LD   SP,STACK   
419F   CD 0D 09               CALL   init   
41A2   CD C8 07               CALL   execStr   
41A5   31 00                  .CSTR   "1"   
41A7                          ;*Macro unroll:  expect "1",1
41A7   E1                     POP   HL   
41A8   E5                     PUSH   HL   
41A9   11 01 00               LD   DE,1   
41AC   B7                     OR   A   
41AD   ED 52                  SBC   HL,DE   
41AF   7D                     LD   A,L   
41B0   B4                     OR   H   
41B1   28 4C                  JR   Z,expectM_0_2460S43   
41B3   CD C1 07               CALL   printStr   
41B6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
41BE   CD C1 07               CALL   printStr   
41C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41D0   21 01 00               LD   HL,1   
41D3   CD 15 07               CALL   prtdec   
41D6   CD C1 07               CALL   printStr   
41D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41E6   E1                     POP   hl   
41E7   E5                     PUSH   hl   
41E8   CD 15 07               CALL   prtdec   
41EB   E1                     POP   hl   
41EC   CD C1 07               CALL   printStr   
41EF   20 28 23 00            .CSTR   " (#"   
41F3   CD 5D 07               CALL   prthex   
41F6   CD C1 07               CALL   printStr   
41F9   29 0D 0A 00            .CSTR   ")\r\n"   
41FD   76                     HALT      
41FE   00                     .CSTR      
41FF                EXPECTM_0_2460S43:      
41FF   E1                     POP   HL   
4200                          ;*Macro unroll:  test "0", 0
4200   31 80 18               LD   SP,STACK   
4203   CD 0D 09               CALL   init   
4206   CD C8 07               CALL   execStr   
4209   30 00                  .CSTR   "0"   
420B                          ;*Macro unroll:  expect "0",0
420B   E1                     POP   HL   
420C   E5                     PUSH   HL   
420D   11 00 00               LD   DE,0   
4210   B7                     OR   A   
4211   ED 52                  SBC   HL,DE   
4213   7D                     LD   A,L   
4214   B4                     OR   H   
4215   28 4C                  JR   Z,expectM_0_2461S43   
4217   CD C1 07               CALL   printStr   
421A   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
4222   CD C1 07               CALL   printStr   
4225   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4234   21 00 00               LD   HL,0   
4237   CD 15 07               CALL   prtdec   
423A   CD C1 07               CALL   printStr   
423D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
424A   E1                     POP   hl   
424B   E5                     PUSH   hl   
424C   CD 15 07               CALL   prtdec   
424F   E1                     POP   hl   
4250   CD C1 07               CALL   printStr   
4253   20 28 23 00            .CSTR   " (#"   
4257   CD 5D 07               CALL   prthex   
425A   CD C1 07               CALL   printStr   
425D   29 0D 0A 00            .CSTR   ")\r\n"   
4261   76                     HALT      
4262   00                     .CSTR      
4263                EXPECTM_0_2461S43:      
4263   E1                     POP   HL   
4264                          ;*Macro unroll:  test "10", 10
4264   31 80 18               LD   SP,STACK   
4267   CD 0D 09               CALL   init   
426A   CD C8 07               CALL   execStr   
426D   31 30 00               .CSTR   "10"   
4270                          ;*Macro unroll:  expect "10",10
4270   E1                     POP   HL   
4271   E5                     PUSH   HL   
4272   11 0A 00               LD   DE,10   
4275   B7                     OR   A   
4276   ED 52                  SBC   HL,DE   
4278   7D                     LD   A,L   
4279   B4                     OR   H   
427A   28 4D                  JR   Z,expectM_0_2462S43   
427C   CD C1 07               CALL   printStr   
427F   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
4288   CD C1 07               CALL   printStr   
428B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
429A   21 0A 00               LD   HL,10   
429D   CD 15 07               CALL   prtdec   
42A0   CD C1 07               CALL   printStr   
42A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B0   E1                     POP   hl   
42B1   E5                     PUSH   hl   
42B2   CD 15 07               CALL   prtdec   
42B5   E1                     POP   hl   
42B6   CD C1 07               CALL   printStr   
42B9   20 28 23 00            .CSTR   " (#"   
42BD   CD 5D 07               CALL   prthex   
42C0   CD C1 07               CALL   printStr   
42C3   29 0D 0A 00            .CSTR   ")\r\n"   
42C7   76                     HALT      
42C8   00                     .CSTR      
42C9                EXPECTM_0_2462S43:      
42C9   E1                     POP   HL   
42CA                          ;*Macro unroll:  test "123", 123
42CA   31 80 18               LD   SP,STACK   
42CD   CD 0D 09               CALL   init   
42D0   CD C8 07               CALL   execStr   
42D3   31 32 33 00            .CSTR   "123"   
42D7                          ;*Macro unroll:  expect "123",123
42D7   E1                     POP   HL   
42D8   E5                     PUSH   HL   
42D9   11 7B 00               LD   DE,123   
42DC   B7                     OR   A   
42DD   ED 52                  SBC   HL,DE   
42DF   7D                     LD   A,L   
42E0   B4                     OR   H   
42E1   28 4E                  JR   Z,expectM_0_2463S43   
42E3   CD C1 07               CALL   printStr   
42E6   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
42F0   CD C1 07               CALL   printStr   
42F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4302   21 7B 00               LD   HL,123   
4305   CD 15 07               CALL   prtdec   
4308   CD C1 07               CALL   printStr   
430B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4318   E1                     POP   hl   
4319   E5                     PUSH   hl   
431A   CD 15 07               CALL   prtdec   
431D   E1                     POP   hl   
431E   CD C1 07               CALL   printStr   
4321   20 28 23 00            .CSTR   " (#"   
4325   CD 5D 07               CALL   prthex   
4328   CD C1 07               CALL   printStr   
432B   29 0D 0A 00            .CSTR   ")\r\n"   
432F   76                     HALT      
4330   00                     .CSTR      
4331                EXPECTM_0_2463S43:      
4331   E1                     POP   HL   
4332                          ;*Macro unroll:  test "-1",-1
4332   31 80 18               LD   SP,STACK   
4335   CD 0D 09               CALL   init   
4338   CD C8 07               CALL   execStr   
433B   2D 31 00               .CSTR   "-1"   
433E                          ;*Macro unroll:  expect "-1",-1
433E   E1                     POP   HL   
433F   E5                     PUSH   HL   
4340   11 FF FF               LD   DE,-1   
4343   B7                     OR   A   
4344   ED 52                  SBC   HL,DE   
4346   7D                     LD   A,L   
4347   B4                     OR   H   
4348   28 4D                  JR   Z,expectM_0_2464S43   
434A   CD C1 07               CALL   printStr   
434D   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
4356   CD C1 07               CALL   printStr   
4359   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4368   21 FF FF               LD   HL,-1   
436B   CD 15 07               CALL   prtdec   
436E   CD C1 07               CALL   printStr   
4371   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
437E   E1                     POP   hl   
437F   E5                     PUSH   hl   
4380   CD 15 07               CALL   prtdec   
4383   E1                     POP   hl   
4384   CD C1 07               CALL   printStr   
4387   20 28 23 00            .CSTR   " (#"   
438B   CD 5D 07               CALL   prthex   
438E   CD C1 07               CALL   printStr   
4391   29 0D 0A 00            .CSTR   ")\r\n"   
4395   76                     HALT      
4396   00                     .CSTR      
4397                EXPECTM_0_2464S43:      
4397   E1                     POP   HL   
4398                          ;*Macro unroll:  test "``", 0
4398   31 80 18               LD   SP,STACK   
439B   CD 0D 09               CALL   init   
439E   CD C8 07               CALL   execStr   
43A1   60 60 00               .CSTR   "``"   
43A4                          ;*Macro unroll:  expect "``",0
43A4   E1                     POP   HL   
43A5   E5                     PUSH   HL   
43A6   11 00 00               LD   DE,0   
43A9   B7                     OR   A   
43AA   ED 52                  SBC   HL,DE   
43AC   7D                     LD   A,L   
43AD   B4                     OR   H   
43AE   28 4D                  JR   Z,expectM_0_2465S43   
43B0   CD C1 07               CALL   printStr   
43B3   43 6F 64 65 3A 20 60 60 00 .CSTR   "Code: ","``"   
43BC   CD C1 07               CALL   printStr   
43BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43CE   21 00 00               LD   HL,0   
43D1   CD 15 07               CALL   prtdec   
43D4   CD C1 07               CALL   printStr   
43D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E4   E1                     POP   hl   
43E5   E5                     PUSH   hl   
43E6   CD 15 07               CALL   prtdec   
43E9   E1                     POP   hl   
43EA   CD C1 07               CALL   printStr   
43ED   20 28 23 00            .CSTR   " (#"   
43F1   CD 5D 07               CALL   prthex   
43F4   CD C1 07               CALL   printStr   
43F7   29 0D 0A 00            .CSTR   ")\r\n"   
43FB   76                     HALT      
43FC   00                     .CSTR      
43FD                EXPECTM_0_2465S43:      
43FD   E1                     POP   HL   
43FE                          ;*Macro unroll:  test "`a`", $61
43FE   31 80 18               LD   SP,STACK   
4401   CD 0D 09               CALL   init   
4404   CD C8 07               CALL   execStr   
4407   60 61 60 00            .CSTR   "`a`"   
440B                          ;*Macro unroll:  expect "`a`",$61
440B   E1                     POP   HL   
440C   E5                     PUSH   HL   
440D   11 61 00               LD   DE,$61   
4410   B7                     OR   A   
4411   ED 52                  SBC   HL,DE   
4413   7D                     LD   A,L   
4414   B4                     OR   H   
4415   28 4E                  JR   Z,expectM_0_2466S43   
4417   CD C1 07               CALL   printStr   
441A   43 6F 64 65 3A 20 60 61 60 00 .CSTR   "Code: ","`a`"   
4424   CD C1 07               CALL   printStr   
4427   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4436   21 61 00               LD   HL,$61   
4439   CD 15 07               CALL   prtdec   
443C   CD C1 07               CALL   printStr   
443F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
444C   E1                     POP   hl   
444D   E5                     PUSH   hl   
444E   CD 15 07               CALL   prtdec   
4451   E1                     POP   hl   
4452   CD C1 07               CALL   printStr   
4455   20 28 23 00            .CSTR   " (#"   
4459   CD 5D 07               CALL   prthex   
445C   CD C1 07               CALL   printStr   
445F   29 0D 0A 00            .CSTR   ")\r\n"   
4463   76                     HALT      
4464   00                     .CSTR      
4465                EXPECTM_0_2466S43:      
4465   E1                     POP   HL   
4466                          ;*Macro unroll:  test "`\\``", $60
4466   31 80 18               LD   SP,STACK   
4469   CD 0D 09               CALL   init   
446C   CD C8 07               CALL   execStr   
446F   60 5C 60 60 00         .CSTR   "`\\``"   
4474                          ;*Macro unroll:  expect "`\\``",$60
4474   E1                     POP   HL   
4475   E5                     PUSH   HL   
4476   11 60 00               LD   DE,$60   
4479   B7                     OR   A   
447A   ED 52                  SBC   HL,DE   
447C   7D                     LD   A,L   
447D   B4                     OR   H   
447E   28 4F                  JR   Z,expectM_0_2467S43   
4480   CD C1 07               CALL   printStr   
4483   43 6F 64 65 3A 20 60 5C 60 60 00 .CSTR   "Code: ","`\\``"   
448E   CD C1 07               CALL   printStr   
4491   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44A0   21 60 00               LD   HL,$60   
44A3   CD 15 07               CALL   prtdec   
44A6   CD C1 07               CALL   printStr   
44A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44B6   E1                     POP   hl   
44B7   E5                     PUSH   hl   
44B8   CD 15 07               CALL   prtdec   
44BB   E1                     POP   hl   
44BC   CD C1 07               CALL   printStr   
44BF   20 28 23 00            .CSTR   " (#"   
44C3   CD 5D 07               CALL   prthex   
44C6   CD C1 07               CALL   printStr   
44C9   29 0D 0A 00            .CSTR   ")\r\n"   
44CD   76                     HALT      
44CE   00                     .CSTR      
44CF                EXPECTM_0_2467S43:      
44CF   E1                     POP   HL   
44D0                          ;*Macro unroll:  test "#10", $10
44D0   31 80 18               LD   SP,STACK   
44D3   CD 0D 09               CALL   init   
44D6   CD C8 07               CALL   execStr   
44D9   23 31 30 00            .CSTR   "#10"   
44DD                          ;*Macro unroll:  expect "#10",$10
44DD   E1                     POP   HL   
44DE   E5                     PUSH   HL   
44DF   11 10 00               LD   DE,$10   
44E2   B7                     OR   A   
44E3   ED 52                  SBC   HL,DE   
44E5   7D                     LD   A,L   
44E6   B4                     OR   H   
44E7   28 4E                  JR   Z,expectM_0_2468S43   
44E9   CD C1 07               CALL   printStr   
44EC   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
44F6   CD C1 07               CALL   printStr   
44F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4508   21 10 00               LD   HL,$10   
450B   CD 15 07               CALL   prtdec   
450E   CD C1 07               CALL   printStr   
4511   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
451E   E1                     POP   hl   
451F   E5                     PUSH   hl   
4520   CD 15 07               CALL   prtdec   
4523   E1                     POP   hl   
4524   CD C1 07               CALL   printStr   
4527   20 28 23 00            .CSTR   " (#"   
452B   CD 5D 07               CALL   prthex   
452E   CD C1 07               CALL   printStr   
4531   29 0D 0A 00            .CSTR   ")\r\n"   
4535   76                     HALT      
4536   00                     .CSTR      
4537                EXPECTM_0_2468S43:      
4537   E1                     POP   HL   
4538                          ;*Macro unroll:  test "#FF", $FF
4538   31 80 18               LD   SP,STACK   
453B   CD 0D 09               CALL   init   
453E   CD C8 07               CALL   execStr   
4541   23 46 46 00            .CSTR   "#FF"   
4545                          ;*Macro unroll:  expect "#FF",$FF
4545   E1                     POP   HL   
4546   E5                     PUSH   HL   
4547   11 FF 00               LD   DE,$FF   
454A   B7                     OR   A   
454B   ED 52                  SBC   HL,DE   
454D   7D                     LD   A,L   
454E   B4                     OR   H   
454F   28 4E                  JR   Z,expectM_0_2469S43   
4551   CD C1 07               CALL   printStr   
4554   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
455E   CD C1 07               CALL   printStr   
4561   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4570   21 FF 00               LD   HL,$FF   
4573   CD 15 07               CALL   prtdec   
4576   CD C1 07               CALL   printStr   
4579   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4586   E1                     POP   hl   
4587   E5                     PUSH   hl   
4588   CD 15 07               CALL   prtdec   
458B   E1                     POP   hl   
458C   CD C1 07               CALL   printStr   
458F   20 28 23 00            .CSTR   " (#"   
4593   CD 5D 07               CALL   prthex   
4596   CD C1 07               CALL   printStr   
4599   29 0D 0A 00            .CSTR   ")\r\n"   
459D   76                     HALT      
459E   00                     .CSTR      
459F                EXPECTM_0_2469S43:      
459F   E1                     POP   HL   
45A0                          ;*Macro unroll:  test "-1 2 +",1
45A0   31 80 18               LD   SP,STACK   
45A3   CD 0D 09               CALL   init   
45A6   CD C8 07               CALL   execStr   
45A9   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
45B0                          ;*Macro unroll:  expect "-1 2 +",1
45B0   E1                     POP   HL   
45B1   E5                     PUSH   HL   
45B2   11 01 00               LD   DE,1   
45B5   B7                     OR   A   
45B6   ED 52                  SBC   HL,DE   
45B8   7D                     LD   A,L   
45B9   B4                     OR   H   
45BA   28 51                  JR   Z,expectM_0_2470S43   
45BC   CD C1 07               CALL   printStr   
45BF   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
45CC   CD C1 07               CALL   printStr   
45CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45DE   21 01 00               LD   HL,1   
45E1   CD 15 07               CALL   prtdec   
45E4   CD C1 07               CALL   printStr   
45E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45F4   E1                     POP   hl   
45F5   E5                     PUSH   hl   
45F6   CD 15 07               CALL   prtdec   
45F9   E1                     POP   hl   
45FA   CD C1 07               CALL   printStr   
45FD   20 28 23 00            .CSTR   " (#"   
4601   CD 5D 07               CALL   prthex   
4604   CD C1 07               CALL   printStr   
4607   29 0D 0A 00            .CSTR   ")\r\n"   
460B   76                     HALT      
460C   00                     .CSTR      
460D                EXPECTM_0_2470S43:      
460D   E1                     POP   HL   
460E                          ;*Macro unroll:  test "-1 1 +",0
460E   31 80 18               LD   SP,STACK   
4611   CD 0D 09               CALL   init   
4614   CD C8 07               CALL   execStr   
4617   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
461E                          ;*Macro unroll:  expect "-1 1 +",0
461E   E1                     POP   HL   
461F   E5                     PUSH   HL   
4620   11 00 00               LD   DE,0   
4623   B7                     OR   A   
4624   ED 52                  SBC   HL,DE   
4626   7D                     LD   A,L   
4627   B4                     OR   H   
4628   28 51                  JR   Z,expectM_0_2471S43   
462A   CD C1 07               CALL   printStr   
462D   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
463A   CD C1 07               CALL   printStr   
463D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
464C   21 00 00               LD   HL,0   
464F   CD 15 07               CALL   prtdec   
4652   CD C1 07               CALL   printStr   
4655   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4662   E1                     POP   hl   
4663   E5                     PUSH   hl   
4664   CD 15 07               CALL   prtdec   
4667   E1                     POP   hl   
4668   CD C1 07               CALL   printStr   
466B   20 28 23 00            .CSTR   " (#"   
466F   CD 5D 07               CALL   prthex   
4672   CD C1 07               CALL   printStr   
4675   29 0D 0A 00            .CSTR   ")\r\n"   
4679   76                     HALT      
467A   00                     .CSTR      
467B                EXPECTM_0_2471S43:      
467B   E1                     POP   HL   
467C                          ;*Macro unroll:  test "1 2 +", 3
467C   31 80 18               LD   SP,STACK   
467F   CD 0D 09               CALL   init   
4682   CD C8 07               CALL   execStr   
4685   31 20 32 20 2B 00      .CSTR   "1 2 +"   
468B                          ;*Macro unroll:  expect "1 2 +",3
468B   E1                     POP   HL   
468C   E5                     PUSH   HL   
468D   11 03 00               LD   DE,3   
4690   B7                     OR   A   
4691   ED 52                  SBC   HL,DE   
4693   7D                     LD   A,L   
4694   B4                     OR   H   
4695   28 50                  JR   Z,expectM_0_2472S43   
4697   CD C1 07               CALL   printStr   
469A   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
46A6   CD C1 07               CALL   printStr   
46A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46B8   21 03 00               LD   HL,3   
46BB   CD 15 07               CALL   prtdec   
46BE   CD C1 07               CALL   printStr   
46C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46CE   E1                     POP   hl   
46CF   E5                     PUSH   hl   
46D0   CD 15 07               CALL   prtdec   
46D3   E1                     POP   hl   
46D4   CD C1 07               CALL   printStr   
46D7   20 28 23 00            .CSTR   " (#"   
46DB   CD 5D 07               CALL   prthex   
46DE   CD C1 07               CALL   printStr   
46E1   29 0D 0A 00            .CSTR   ")\r\n"   
46E5   76                     HALT      
46E6   00                     .CSTR      
46E7                EXPECTM_0_2472S43:      
46E7   E1                     POP   HL   
46E8                          ;*Macro unroll:  test "4 1 2 +", 3
46E8   31 80 18               LD   SP,STACK   
46EB   CD 0D 09               CALL   init   
46EE   CD C8 07               CALL   execStr   
46F1   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
46F9                          ;*Macro unroll:  expect "4 1 2 +",3
46F9   E1                     POP   HL   
46FA   E5                     PUSH   HL   
46FB   11 03 00               LD   DE,3   
46FE   B7                     OR   A   
46FF   ED 52                  SBC   HL,DE   
4701   7D                     LD   A,L   
4702   B4                     OR   H   
4703   28 52                  JR   Z,expectM_0_2473S43   
4705   CD C1 07               CALL   printStr   
4708   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
4716   CD C1 07               CALL   printStr   
4719   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4728   21 03 00               LD   HL,3   
472B   CD 15 07               CALL   prtdec   
472E   CD C1 07               CALL   printStr   
4731   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
473E   E1                     POP   hl   
473F   E5                     PUSH   hl   
4740   CD 15 07               CALL   prtdec   
4743   E1                     POP   hl   
4744   CD C1 07               CALL   printStr   
4747   20 28 23 00            .CSTR   " (#"   
474B   CD 5D 07               CALL   prthex   
474E   CD C1 07               CALL   printStr   
4751   29 0D 0A 00            .CSTR   ")\r\n"   
4755   76                     HALT      
4756   00                     .CSTR      
4757                EXPECTM_0_2473S43:      
4757   E1                     POP   HL   
4758                          ;*Macro unroll:  test "1 2 +", 3
4758   31 80 18               LD   SP,STACK   
475B   CD 0D 09               CALL   init   
475E   CD C8 07               CALL   execStr   
4761   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4767                          ;*Macro unroll:  expect "1 2 +",3
4767   E1                     POP   HL   
4768   E5                     PUSH   HL   
4769   11 03 00               LD   DE,3   
476C   B7                     OR   A   
476D   ED 52                  SBC   HL,DE   
476F   7D                     LD   A,L   
4770   B4                     OR   H   
4771   28 50                  JR   Z,expectM_0_2474S43   
4773   CD C1 07               CALL   printStr   
4776   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
4782   CD C1 07               CALL   printStr   
4785   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4794   21 03 00               LD   HL,3   
4797   CD 15 07               CALL   prtdec   
479A   CD C1 07               CALL   printStr   
479D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47AA   E1                     POP   hl   
47AB   E5                     PUSH   hl   
47AC   CD 15 07               CALL   prtdec   
47AF   E1                     POP   hl   
47B0   CD C1 07               CALL   printStr   
47B3   20 28 23 00            .CSTR   " (#"   
47B7   CD 5D 07               CALL   prthex   
47BA   CD C1 07               CALL   printStr   
47BD   29 0D 0A 00            .CSTR   ")\r\n"   
47C1   76                     HALT      
47C2   00                     .CSTR      
47C3                EXPECTM_0_2474S43:      
47C3   E1                     POP   HL   
47C4                          ;*Macro unroll:  test "123 456 +", 123+456
47C4   31 80 18               LD   SP,STACK   
47C7   CD 0D 09               CALL   init   
47CA   CD C8 07               CALL   execStr   
47CD   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
47D7                          ;*Macro unroll:  expect "123 456 +",123+456
47D7   E1                     POP   HL   
47D8   E5                     PUSH   HL   
47D9   11 43 02               LD   DE,123+456   
47DC   B7                     OR   A   
47DD   ED 52                  SBC   HL,DE   
47DF   7D                     LD   A,L   
47E0   B4                     OR   H   
47E1   28 54                  JR   Z,expectM_0_2475S43   
47E3   CD C1 07               CALL   printStr   
47E6   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
47F6   CD C1 07               CALL   printStr   
47F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4808   21 43 02               LD   HL,123+456   
480B   CD 15 07               CALL   prtdec   
480E   CD C1 07               CALL   printStr   
4811   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
481E   E1                     POP   hl   
481F   E5                     PUSH   hl   
4820   CD 15 07               CALL   prtdec   
4823   E1                     POP   hl   
4824   CD C1 07               CALL   printStr   
4827   20 28 23 00            .CSTR   " (#"   
482B   CD 5D 07               CALL   prthex   
482E   CD C1 07               CALL   printStr   
4831   29 0D 0A 00            .CSTR   ")\r\n"   
4835   76                     HALT      
4836   00                     .CSTR      
4837                EXPECTM_0_2475S43:      
4837   E1                     POP   HL   
4838                          ;*Macro unroll:  test "64 128 +", 64+128
4838   31 80 18               LD   SP,STACK   
483B   CD 0D 09               CALL   init   
483E   CD C8 07               CALL   execStr   
4841   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
484A                          ;*Macro unroll:  expect "64 128 +",64+128
484A   E1                     POP   HL   
484B   E5                     PUSH   HL   
484C   11 C0 00               LD   DE,64+128   
484F   B7                     OR   A   
4850   ED 52                  SBC   HL,DE   
4852   7D                     LD   A,L   
4853   B4                     OR   H   
4854   28 53                  JR   Z,expectM_0_2476S43   
4856   CD C1 07               CALL   printStr   
4859   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
4868   CD C1 07               CALL   printStr   
486B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
487A   21 C0 00               LD   HL,64+128   
487D   CD 15 07               CALL   prtdec   
4880   CD C1 07               CALL   printStr   
4883   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4890   E1                     POP   hl   
4891   E5                     PUSH   hl   
4892   CD 15 07               CALL   prtdec   
4895   E1                     POP   hl   
4896   CD C1 07               CALL   printStr   
4899   20 28 23 00            .CSTR   " (#"   
489D   CD 5D 07               CALL   prthex   
48A0   CD C1 07               CALL   printStr   
48A3   29 0D 0A 00            .CSTR   ")\r\n"   
48A7   76                     HALT      
48A8   00                     .CSTR      
48A9                EXPECTM_0_2476S43:      
48A9   E1                     POP   HL   
48AA                          ;*Macro unroll:  test "-1 -1 -",0
48AA   31 80 18               LD   SP,STACK   
48AD   CD 0D 09               CALL   init   
48B0   CD C8 07               CALL   execStr   
48B3   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
48BB                          ;*Macro unroll:  expect "-1 -1 -",0
48BB   E1                     POP   HL   
48BC   E5                     PUSH   HL   
48BD   11 00 00               LD   DE,0   
48C0   B7                     OR   A   
48C1   ED 52                  SBC   HL,DE   
48C3   7D                     LD   A,L   
48C4   B4                     OR   H   
48C5   28 52                  JR   Z,expectM_0_2477S43   
48C7   CD C1 07               CALL   printStr   
48CA   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
48D8   CD C1 07               CALL   printStr   
48DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48EA   21 00 00               LD   HL,0   
48ED   CD 15 07               CALL   prtdec   
48F0   CD C1 07               CALL   printStr   
48F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4900   E1                     POP   hl   
4901   E5                     PUSH   hl   
4902   CD 15 07               CALL   prtdec   
4905   E1                     POP   hl   
4906   CD C1 07               CALL   printStr   
4909   20 28 23 00            .CSTR   " (#"   
490D   CD 5D 07               CALL   prthex   
4910   CD C1 07               CALL   printStr   
4913   29 0D 0A 00            .CSTR   ")\r\n"   
4917   76                     HALT      
4918   00                     .CSTR      
4919                EXPECTM_0_2477S43:      
4919   E1                     POP   HL   
491A                          ;*Macro unroll:  test "5 3 -", 2
491A   31 80 18               LD   SP,STACK   
491D   CD 0D 09               CALL   init   
4920   CD C8 07               CALL   execStr   
4923   35 20 33 20 2D 00      .CSTR   "5 3 -"   
4929                          ;*Macro unroll:  expect "5 3 -",2
4929   E1                     POP   HL   
492A   E5                     PUSH   HL   
492B   11 02 00               LD   DE,2   
492E   B7                     OR   A   
492F   ED 52                  SBC   HL,DE   
4931   7D                     LD   A,L   
4932   B4                     OR   H   
4933   28 50                  JR   Z,expectM_0_2478S43   
4935   CD C1 07               CALL   printStr   
4938   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
4944   CD C1 07               CALL   printStr   
4947   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4956   21 02 00               LD   HL,2   
4959   CD 15 07               CALL   prtdec   
495C   CD C1 07               CALL   printStr   
495F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
496C   E1                     POP   hl   
496D   E5                     PUSH   hl   
496E   CD 15 07               CALL   prtdec   
4971   E1                     POP   hl   
4972   CD C1 07               CALL   printStr   
4975   20 28 23 00            .CSTR   " (#"   
4979   CD 5D 07               CALL   prthex   
497C   CD C1 07               CALL   printStr   
497F   29 0D 0A 00            .CSTR   ")\r\n"   
4983   76                     HALT      
4984   00                     .CSTR      
4985                EXPECTM_0_2478S43:      
4985   E1                     POP   HL   
4986                          ;*Macro unroll:  test "3 5 &", 1
4986   31 80 18               LD   SP,STACK   
4989   CD 0D 09               CALL   init   
498C   CD C8 07               CALL   execStr   
498F   33 20 35 20 26 00      .CSTR   "3 5 &"   
4995                          ;*Macro unroll:  expect "3 5 &",1
4995   E1                     POP   HL   
4996   E5                     PUSH   HL   
4997   11 01 00               LD   DE,1   
499A   B7                     OR   A   
499B   ED 52                  SBC   HL,DE   
499D   7D                     LD   A,L   
499E   B4                     OR   H   
499F   28 50                  JR   Z,expectM_0_2479S43   
49A1   CD C1 07               CALL   printStr   
49A4   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
49B0   CD C1 07               CALL   printStr   
49B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49C2   21 01 00               LD   HL,1   
49C5   CD 15 07               CALL   prtdec   
49C8   CD C1 07               CALL   printStr   
49CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49D8   E1                     POP   hl   
49D9   E5                     PUSH   hl   
49DA   CD 15 07               CALL   prtdec   
49DD   E1                     POP   hl   
49DE   CD C1 07               CALL   printStr   
49E1   20 28 23 00            .CSTR   " (#"   
49E5   CD 5D 07               CALL   prthex   
49E8   CD C1 07               CALL   printStr   
49EB   29 0D 0A 00            .CSTR   ")\r\n"   
49EF   76                     HALT      
49F0   00                     .CSTR      
49F1                EXPECTM_0_2479S43:      
49F1   E1                     POP   HL   
49F2                          ;*Macro unroll:  test "3 5 |", 7
49F2   31 80 18               LD   SP,STACK   
49F5   CD 0D 09               CALL   init   
49F8   CD C8 07               CALL   execStr   
49FB   33 20 35 20 7C 00      .CSTR   "3 5 |"   
4A01                          ;*Macro unroll:  expect "3 5 |",7
4A01   E1                     POP   HL   
4A02   E5                     PUSH   HL   
4A03   11 07 00               LD   DE,7   
4A06   B7                     OR   A   
4A07   ED 52                  SBC   HL,DE   
4A09   7D                     LD   A,L   
4A0A   B4                     OR   H   
4A0B   28 50                  JR   Z,expectM_0_2480S43   
4A0D   CD C1 07               CALL   printStr   
4A10   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4A1C   CD C1 07               CALL   printStr   
4A1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A2E   21 07 00               LD   HL,7   
4A31   CD 15 07               CALL   prtdec   
4A34   CD C1 07               CALL   printStr   
4A37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A44   E1                     POP   hl   
4A45   E5                     PUSH   hl   
4A46   CD 15 07               CALL   prtdec   
4A49   E1                     POP   hl   
4A4A   CD C1 07               CALL   printStr   
4A4D   20 28 23 00            .CSTR   " (#"   
4A51   CD 5D 07               CALL   prthex   
4A54   CD C1 07               CALL   printStr   
4A57   29 0D 0A 00            .CSTR   ")\r\n"   
4A5B   76                     HALT      
4A5C   00                     .CSTR      
4A5D                EXPECTM_0_2480S43:      
4A5D   E1                     POP   HL   
4A5E                          ;*Macro unroll:  test "2 3 *", 6
4A5E   31 80 18               LD   SP,STACK   
4A61   CD 0D 09               CALL   init   
4A64   CD C8 07               CALL   execStr   
4A67   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4A6D                          ;*Macro unroll:  expect "2 3 *",6
4A6D   E1                     POP   HL   
4A6E   E5                     PUSH   HL   
4A6F   11 06 00               LD   DE,6   
4A72   B7                     OR   A   
4A73   ED 52                  SBC   HL,DE   
4A75   7D                     LD   A,L   
4A76   B4                     OR   H   
4A77   28 50                  JR   Z,expectM_0_2481S43   
4A79   CD C1 07               CALL   printStr   
4A7C   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
4A88   CD C1 07               CALL   printStr   
4A8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A9A   21 06 00               LD   HL,6   
4A9D   CD 15 07               CALL   prtdec   
4AA0   CD C1 07               CALL   printStr   
4AA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AB0   E1                     POP   hl   
4AB1   E5                     PUSH   hl   
4AB2   CD 15 07               CALL   prtdec   
4AB5   E1                     POP   hl   
4AB6   CD C1 07               CALL   printStr   
4AB9   20 28 23 00            .CSTR   " (#"   
4ABD   CD 5D 07               CALL   prthex   
4AC0   CD C1 07               CALL   printStr   
4AC3   29 0D 0A 00            .CSTR   ")\r\n"   
4AC7   76                     HALT      
4AC8   00                     .CSTR      
4AC9                EXPECTM_0_2481S43:      
4AC9   E1                     POP   HL   
4ACA                          ;*Macro unroll:  test "1 2 3 + *", 5
4ACA   31 80 18               LD   SP,STACK   
4ACD   CD 0D 09               CALL   init   
4AD0   CD C8 07               CALL   execStr   
4AD3   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4ADD                          ;*Macro unroll:  expect "1 2 3 + *",5
4ADD   E1                     POP   HL   
4ADE   E5                     PUSH   HL   
4ADF   11 05 00               LD   DE,5   
4AE2   B7                     OR   A   
4AE3   ED 52                  SBC   HL,DE   
4AE5   7D                     LD   A,L   
4AE6   B4                     OR   H   
4AE7   28 54                  JR   Z,expectM_0_2482S43   
4AE9   CD C1 07               CALL   printStr   
4AEC   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4AFC   CD C1 07               CALL   printStr   
4AFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B0E   21 05 00               LD   HL,5   
4B11   CD 15 07               CALL   prtdec   
4B14   CD C1 07               CALL   printStr   
4B17   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B24   E1                     POP   hl   
4B25   E5                     PUSH   hl   
4B26   CD 15 07               CALL   prtdec   
4B29   E1                     POP   hl   
4B2A   CD C1 07               CALL   printStr   
4B2D   20 28 23 00            .CSTR   " (#"   
4B31   CD 5D 07               CALL   prthex   
4B34   CD C1 07               CALL   printStr   
4B37   29 0D 0A 00            .CSTR   ")\r\n"   
4B3B   76                     HALT      
4B3C   00                     .CSTR      
4B3D                EXPECTM_0_2482S43:      
4B3D   E1                     POP   HL   
4B3E                          ;*Macro unroll:  test "7 3 /", 2
4B3E   31 80 18               LD   SP,STACK   
4B41   CD 0D 09               CALL   init   
4B44   CD C8 07               CALL   execStr   
4B47   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4B4D                          ;*Macro unroll:  expect "7 3 /",2
4B4D   E1                     POP   HL   
4B4E   E5                     PUSH   HL   
4B4F   11 02 00               LD   DE,2   
4B52   B7                     OR   A   
4B53   ED 52                  SBC   HL,DE   
4B55   7D                     LD   A,L   
4B56   B4                     OR   H   
4B57   28 50                  JR   Z,expectM_0_2483S43   
4B59   CD C1 07               CALL   printStr   
4B5C   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4B68   CD C1 07               CALL   printStr   
4B6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B7A   21 02 00               LD   HL,2   
4B7D   CD 15 07               CALL   prtdec   
4B80   CD C1 07               CALL   printStr   
4B83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B90   E1                     POP   hl   
4B91   E5                     PUSH   hl   
4B92   CD 15 07               CALL   prtdec   
4B95   E1                     POP   hl   
4B96   CD C1 07               CALL   printStr   
4B99   20 28 23 00            .CSTR   " (#"   
4B9D   CD 5D 07               CALL   prthex   
4BA0   CD C1 07               CALL   printStr   
4BA3   29 0D 0A 00            .CSTR   ")\r\n"   
4BA7   76                     HALT      
4BA8   00                     .CSTR      
4BA9                EXPECTM_0_2483S43:      
4BA9   E1                     POP   HL   
4BAA                          ;*Macro unroll:  test "2 3 ==", FALSE
4BAA   31 80 18               LD   SP,STACK   
4BAD   CD 0D 09               CALL   init   
4BB0   CD C8 07               CALL   execStr   
4BB3   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
4BBA                          ;*Macro unroll:  expect "2 3 ==",FALSE
4BBA   E1                     POP   HL   
4BBB   E5                     PUSH   HL   
4BBC   11 00 00               LD   DE,FALSE   
4BBF   B7                     OR   A   
4BC0   ED 52                  SBC   HL,DE   
4BC2   7D                     LD   A,L   
4BC3   B4                     OR   H   
4BC4   28 51                  JR   Z,expectM_0_2484S43   
4BC6   CD C1 07               CALL   printStr   
4BC9   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
4BD6   CD C1 07               CALL   printStr   
4BD9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BE8   21 00 00               LD   HL,FALSE   
4BEB   CD 15 07               CALL   prtdec   
4BEE   CD C1 07               CALL   printStr   
4BF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BFE   E1                     POP   hl   
4BFF   E5                     PUSH   hl   
4C00   CD 15 07               CALL   prtdec   
4C03   E1                     POP   hl   
4C04   CD C1 07               CALL   printStr   
4C07   20 28 23 00            .CSTR   " (#"   
4C0B   CD 5D 07               CALL   prthex   
4C0E   CD C1 07               CALL   printStr   
4C11   29 0D 0A 00            .CSTR   ")\r\n"   
4C15   76                     HALT      
4C16   00                     .CSTR      
4C17                EXPECTM_0_2484S43:      
4C17   E1                     POP   HL   
4C18                          ;*Macro unroll:  test "3 3 ==", TRUE
4C18   31 80 18               LD   SP,STACK   
4C1B   CD 0D 09               CALL   init   
4C1E   CD C8 07               CALL   execStr   
4C21   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
4C28                          ;*Macro unroll:  expect "3 3 ==",TRUE
4C28   E1                     POP   HL   
4C29   E5                     PUSH   HL   
4C2A   11 FF FF               LD   DE,TRUE   
4C2D   B7                     OR   A   
4C2E   ED 52                  SBC   HL,DE   
4C30   7D                     LD   A,L   
4C31   B4                     OR   H   
4C32   28 51                  JR   Z,expectM_0_2485S43   
4C34   CD C1 07               CALL   printStr   
4C37   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
4C44   CD C1 07               CALL   printStr   
4C47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C56   21 FF FF               LD   HL,TRUE   
4C59   CD 15 07               CALL   prtdec   
4C5C   CD C1 07               CALL   printStr   
4C5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C6C   E1                     POP   hl   
4C6D   E5                     PUSH   hl   
4C6E   CD 15 07               CALL   prtdec   
4C71   E1                     POP   hl   
4C72   CD C1 07               CALL   printStr   
4C75   20 28 23 00            .CSTR   " (#"   
4C79   CD 5D 07               CALL   prthex   
4C7C   CD C1 07               CALL   printStr   
4C7F   29 0D 0A 00            .CSTR   ")\r\n"   
4C83   76                     HALT      
4C84   00                     .CSTR      
4C85                EXPECTM_0_2485S43:      
4C85   E1                     POP   HL   
4C86                          ;*Macro unroll:  test "1 2 <", TRUE
4C86   31 80 18               LD   SP,STACK   
4C89   CD 0D 09               CALL   init   
4C8C   CD C8 07               CALL   execStr   
4C8F   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4C95                          ;*Macro unroll:  expect "1 2 <",TRUE
4C95   E1                     POP   HL   
4C96   E5                     PUSH   HL   
4C97   11 FF FF               LD   DE,TRUE   
4C9A   B7                     OR   A   
4C9B   ED 52                  SBC   HL,DE   
4C9D   7D                     LD   A,L   
4C9E   B4                     OR   H   
4C9F   28 50                  JR   Z,expectM_0_2486S43   
4CA1   CD C1 07               CALL   printStr   
4CA4   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4CB0   CD C1 07               CALL   printStr   
4CB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CC2   21 FF FF               LD   HL,TRUE   
4CC5   CD 15 07               CALL   prtdec   
4CC8   CD C1 07               CALL   printStr   
4CCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CD8   E1                     POP   hl   
4CD9   E5                     PUSH   hl   
4CDA   CD 15 07               CALL   prtdec   
4CDD   E1                     POP   hl   
4CDE   CD C1 07               CALL   printStr   
4CE1   20 28 23 00            .CSTR   " (#"   
4CE5   CD 5D 07               CALL   prthex   
4CE8   CD C1 07               CALL   printStr   
4CEB   29 0D 0A 00            .CSTR   ")\r\n"   
4CEF   76                     HALT      
4CF0   00                     .CSTR      
4CF1                EXPECTM_0_2486S43:      
4CF1   E1                     POP   HL   
4CF2                          ;*Macro unroll:  test "2 1 <", FALSE
4CF2   31 80 18               LD   SP,STACK   
4CF5   CD 0D 09               CALL   init   
4CF8   CD C8 07               CALL   execStr   
4CFB   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4D01                          ;*Macro unroll:  expect "2 1 <",FALSE
4D01   E1                     POP   HL   
4D02   E5                     PUSH   HL   
4D03   11 00 00               LD   DE,FALSE   
4D06   B7                     OR   A   
4D07   ED 52                  SBC   HL,DE   
4D09   7D                     LD   A,L   
4D0A   B4                     OR   H   
4D0B   28 50                  JR   Z,expectM_0_2487S43   
4D0D   CD C1 07               CALL   printStr   
4D10   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4D1C   CD C1 07               CALL   printStr   
4D1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D2E   21 00 00               LD   HL,FALSE   
4D31   CD 15 07               CALL   prtdec   
4D34   CD C1 07               CALL   printStr   
4D37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D44   E1                     POP   hl   
4D45   E5                     PUSH   hl   
4D46   CD 15 07               CALL   prtdec   
4D49   E1                     POP   hl   
4D4A   CD C1 07               CALL   printStr   
4D4D   20 28 23 00            .CSTR   " (#"   
4D51   CD 5D 07               CALL   prthex   
4D54   CD C1 07               CALL   printStr   
4D57   29 0D 0A 00            .CSTR   ")\r\n"   
4D5B   76                     HALT      
4D5C   00                     .CSTR      
4D5D                EXPECTM_0_2487S43:      
4D5D   E1                     POP   HL   
4D5E                          ;*Macro unroll:  test "2 3 <", TRUE
4D5E   31 80 18               LD   SP,STACK   
4D61   CD 0D 09               CALL   init   
4D64   CD C8 07               CALL   execStr   
4D67   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4D6D                          ;*Macro unroll:  expect "2 3 <",TRUE
4D6D   E1                     POP   HL   
4D6E   E5                     PUSH   HL   
4D6F   11 FF FF               LD   DE,TRUE   
4D72   B7                     OR   A   
4D73   ED 52                  SBC   HL,DE   
4D75   7D                     LD   A,L   
4D76   B4                     OR   H   
4D77   28 50                  JR   Z,expectM_0_2488S43   
4D79   CD C1 07               CALL   printStr   
4D7C   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4D88   CD C1 07               CALL   printStr   
4D8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D9A   21 FF FF               LD   HL,TRUE   
4D9D   CD 15 07               CALL   prtdec   
4DA0   CD C1 07               CALL   printStr   
4DA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DB0   E1                     POP   hl   
4DB1   E5                     PUSH   hl   
4DB2   CD 15 07               CALL   prtdec   
4DB5   E1                     POP   hl   
4DB6   CD C1 07               CALL   printStr   
4DB9   20 28 23 00            .CSTR   " (#"   
4DBD   CD 5D 07               CALL   prthex   
4DC0   CD C1 07               CALL   printStr   
4DC3   29 0D 0A 00            .CSTR   ")\r\n"   
4DC7   76                     HALT      
4DC8   00                     .CSTR      
4DC9                EXPECTM_0_2488S43:      
4DC9   E1                     POP   HL   
4DCA                          ;*Macro unroll:  test "3 3 <", FALSE
4DCA   31 80 18               LD   SP,STACK   
4DCD   CD 0D 09               CALL   init   
4DD0   CD C8 07               CALL   execStr   
4DD3   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4DD9                          ;*Macro unroll:  expect "3 3 <",FALSE
4DD9   E1                     POP   HL   
4DDA   E5                     PUSH   HL   
4DDB   11 00 00               LD   DE,FALSE   
4DDE   B7                     OR   A   
4DDF   ED 52                  SBC   HL,DE   
4DE1   7D                     LD   A,L   
4DE2   B4                     OR   H   
4DE3   28 50                  JR   Z,expectM_0_2489S43   
4DE5   CD C1 07               CALL   printStr   
4DE8   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4DF4   CD C1 07               CALL   printStr   
4DF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E06   21 00 00               LD   HL,FALSE   
4E09   CD 15 07               CALL   prtdec   
4E0C   CD C1 07               CALL   printStr   
4E0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E1C   E1                     POP   hl   
4E1D   E5                     PUSH   hl   
4E1E   CD 15 07               CALL   prtdec   
4E21   E1                     POP   hl   
4E22   CD C1 07               CALL   printStr   
4E25   20 28 23 00            .CSTR   " (#"   
4E29   CD 5D 07               CALL   prthex   
4E2C   CD C1 07               CALL   printStr   
4E2F   29 0D 0A 00            .CSTR   ")\r\n"   
4E33   76                     HALT      
4E34   00                     .CSTR      
4E35                EXPECTM_0_2489S43:      
4E35   E1                     POP   HL   
4E36                          ;*Macro unroll:  test "1 2 >", FALSE
4E36   31 80 18               LD   SP,STACK   
4E39   CD 0D 09               CALL   init   
4E3C   CD C8 07               CALL   execStr   
4E3F   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4E45                          ;*Macro unroll:  expect "1 2 >",FALSE
4E45   E1                     POP   HL   
4E46   E5                     PUSH   HL   
4E47   11 00 00               LD   DE,FALSE   
4E4A   B7                     OR   A   
4E4B   ED 52                  SBC   HL,DE   
4E4D   7D                     LD   A,L   
4E4E   B4                     OR   H   
4E4F   28 50                  JR   Z,expectM_0_2490S43   
4E51   CD C1 07               CALL   printStr   
4E54   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4E60   CD C1 07               CALL   printStr   
4E63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E72   21 00 00               LD   HL,FALSE   
4E75   CD 15 07               CALL   prtdec   
4E78   CD C1 07               CALL   printStr   
4E7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E88   E1                     POP   hl   
4E89   E5                     PUSH   hl   
4E8A   CD 15 07               CALL   prtdec   
4E8D   E1                     POP   hl   
4E8E   CD C1 07               CALL   printStr   
4E91   20 28 23 00            .CSTR   " (#"   
4E95   CD 5D 07               CALL   prthex   
4E98   CD C1 07               CALL   printStr   
4E9B   29 0D 0A 00            .CSTR   ")\r\n"   
4E9F   76                     HALT      
4EA0   00                     .CSTR      
4EA1                EXPECTM_0_2490S43:      
4EA1   E1                     POP   HL   
4EA2                          ;*Macro unroll:  test "2 1 >", TRUE
4EA2   31 80 18               LD   SP,STACK   
4EA5   CD 0D 09               CALL   init   
4EA8   CD C8 07               CALL   execStr   
4EAB   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4EB1                          ;*Macro unroll:  expect "2 1 >",TRUE
4EB1   E1                     POP   HL   
4EB2   E5                     PUSH   HL   
4EB3   11 FF FF               LD   DE,TRUE   
4EB6   B7                     OR   A   
4EB7   ED 52                  SBC   HL,DE   
4EB9   7D                     LD   A,L   
4EBA   B4                     OR   H   
4EBB   28 50                  JR   Z,expectM_0_2491S43   
4EBD   CD C1 07               CALL   printStr   
4EC0   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4ECC   CD C1 07               CALL   printStr   
4ECF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EDE   21 FF FF               LD   HL,TRUE   
4EE1   CD 15 07               CALL   prtdec   
4EE4   CD C1 07               CALL   printStr   
4EE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EF4   E1                     POP   hl   
4EF5   E5                     PUSH   hl   
4EF6   CD 15 07               CALL   prtdec   
4EF9   E1                     POP   hl   
4EFA   CD C1 07               CALL   printStr   
4EFD   20 28 23 00            .CSTR   " (#"   
4F01   CD 5D 07               CALL   prthex   
4F04   CD C1 07               CALL   printStr   
4F07   29 0D 0A 00            .CSTR   ")\r\n"   
4F0B   76                     HALT      
4F0C   00                     .CSTR      
4F0D                EXPECTM_0_2491S43:      
4F0D   E1                     POP   HL   
4F0E                          ;*Macro unroll:  test "3 3 >", FALSE
4F0E   31 80 18               LD   SP,STACK   
4F11   CD 0D 09               CALL   init   
4F14   CD C8 07               CALL   execStr   
4F17   33 20 33 20 3E 00      .CSTR   "3 3 >"   
4F1D                          ;*Macro unroll:  expect "3 3 >",FALSE
4F1D   E1                     POP   HL   
4F1E   E5                     PUSH   HL   
4F1F   11 00 00               LD   DE,FALSE   
4F22   B7                     OR   A   
4F23   ED 52                  SBC   HL,DE   
4F25   7D                     LD   A,L   
4F26   B4                     OR   H   
4F27   28 50                  JR   Z,expectM_0_2492S43   
4F29   CD C1 07               CALL   printStr   
4F2C   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
4F38   CD C1 07               CALL   printStr   
4F3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F4A   21 00 00               LD   HL,FALSE   
4F4D   CD 15 07               CALL   prtdec   
4F50   CD C1 07               CALL   printStr   
4F53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F60   E1                     POP   hl   
4F61   E5                     PUSH   hl   
4F62   CD 15 07               CALL   prtdec   
4F65   E1                     POP   hl   
4F66   CD C1 07               CALL   printStr   
4F69   20 28 23 00            .CSTR   " (#"   
4F6D   CD 5D 07               CALL   prthex   
4F70   CD C1 07               CALL   printStr   
4F73   29 0D 0A 00            .CSTR   ")\r\n"   
4F77   76                     HALT      
4F78   00                     .CSTR      
4F79                EXPECTM_0_2492S43:      
4F79   E1                     POP   HL   
4F7A                          ;*Macro unroll:  test "4 3 >", TRUE
4F7A   31 80 18               LD   SP,STACK   
4F7D   CD 0D 09               CALL   init   
4F80   CD C8 07               CALL   execStr   
4F83   34 20 33 20 3E 00      .CSTR   "4 3 >"   
4F89                          ;*Macro unroll:  expect "4 3 >",TRUE
4F89   E1                     POP   HL   
4F8A   E5                     PUSH   HL   
4F8B   11 FF FF               LD   DE,TRUE   
4F8E   B7                     OR   A   
4F8F   ED 52                  SBC   HL,DE   
4F91   7D                     LD   A,L   
4F92   B4                     OR   H   
4F93   28 50                  JR   Z,expectM_0_2493S43   
4F95   CD C1 07               CALL   printStr   
4F98   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
4FA4   CD C1 07               CALL   printStr   
4FA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FB6   21 FF FF               LD   HL,TRUE   
4FB9   CD 15 07               CALL   prtdec   
4FBC   CD C1 07               CALL   printStr   
4FBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FCC   E1                     POP   hl   
4FCD   E5                     PUSH   hl   
4FCE   CD 15 07               CALL   prtdec   
4FD1   E1                     POP   hl   
4FD2   CD C1 07               CALL   printStr   
4FD5   20 28 23 00            .CSTR   " (#"   
4FD9   CD 5D 07               CALL   prthex   
4FDC   CD C1 07               CALL   printStr   
4FDF   29 0D 0A 00            .CSTR   ")\r\n"   
4FE3   76                     HALT      
4FE4   00                     .CSTR      
4FE5                EXPECTM_0_2493S43:      
4FE5   E1                     POP   HL   
4FE6                          ;*Macro unroll:  test "2 2 <=", TRUE
4FE6   31 80 18               LD   SP,STACK   
4FE9   CD 0D 09               CALL   init   
4FEC   CD C8 07               CALL   execStr   
4FEF   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
4FF6                          ;*Macro unroll:  expect "2 2 <=",TRUE
4FF6   E1                     POP   HL   
4FF7   E5                     PUSH   HL   
4FF8   11 FF FF               LD   DE,TRUE   
4FFB   B7                     OR   A   
4FFC   ED 52                  SBC   HL,DE   
4FFE   7D                     LD   A,L   
4FFF   B4                     OR   H   
5000   28 51                  JR   Z,expectM_0_2494S43   
5002   CD C1 07               CALL   printStr   
5005   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
5012   CD C1 07               CALL   printStr   
5015   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5024   21 FF FF               LD   HL,TRUE   
5027   CD 15 07               CALL   prtdec   
502A   CD C1 07               CALL   printStr   
502D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
503A   E1                     POP   hl   
503B   E5                     PUSH   hl   
503C   CD 15 07               CALL   prtdec   
503F   E1                     POP   hl   
5040   CD C1 07               CALL   printStr   
5043   20 28 23 00            .CSTR   " (#"   
5047   CD 5D 07               CALL   prthex   
504A   CD C1 07               CALL   printStr   
504D   29 0D 0A 00            .CSTR   ")\r\n"   
5051   76                     HALT      
5052   00                     .CSTR      
5053                EXPECTM_0_2494S43:      
5053   E1                     POP   HL   
5054                          ;*Macro unroll:  test "2 2 >=", TRUE
5054   31 80 18               LD   SP,STACK   
5057   CD 0D 09               CALL   init   
505A   CD C8 07               CALL   execStr   
505D   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
5064                          ;*Macro unroll:  expect "2 2 >=",TRUE
5064   E1                     POP   HL   
5065   E5                     PUSH   HL   
5066   11 FF FF               LD   DE,TRUE   
5069   B7                     OR   A   
506A   ED 52                  SBC   HL,DE   
506C   7D                     LD   A,L   
506D   B4                     OR   H   
506E   28 51                  JR   Z,expectM_0_2495S43   
5070   CD C1 07               CALL   printStr   
5073   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
5080   CD C1 07               CALL   printStr   
5083   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5092   21 FF FF               LD   HL,TRUE   
5095   CD 15 07               CALL   prtdec   
5098   CD C1 07               CALL   printStr   
509B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50A8   E1                     POP   hl   
50A9   E5                     PUSH   hl   
50AA   CD 15 07               CALL   prtdec   
50AD   E1                     POP   hl   
50AE   CD C1 07               CALL   printStr   
50B1   20 28 23 00            .CSTR   " (#"   
50B5   CD 5D 07               CALL   prthex   
50B8   CD C1 07               CALL   printStr   
50BB   29 0D 0A 00            .CSTR   ")\r\n"   
50BF   76                     HALT      
50C0   00                     .CSTR      
50C1                EXPECTM_0_2495S43:      
50C1   E1                     POP   HL   
50C2                          ;*Macro unroll:  test "3 1 <<", 6
50C2   31 80 18               LD   SP,STACK   
50C5   CD 0D 09               CALL   init   
50C8   CD C8 07               CALL   execStr   
50CB   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
50D2                          ;*Macro unroll:  expect "3 1 <<",6
50D2   E1                     POP   HL   
50D3   E5                     PUSH   HL   
50D4   11 06 00               LD   DE,6   
50D7   B7                     OR   A   
50D8   ED 52                  SBC   HL,DE   
50DA   7D                     LD   A,L   
50DB   B4                     OR   H   
50DC   28 51                  JR   Z,expectM_0_2496S43   
50DE   CD C1 07               CALL   printStr   
50E1   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
50EE   CD C1 07               CALL   printStr   
50F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5100   21 06 00               LD   HL,6   
5103   CD 15 07               CALL   prtdec   
5106   CD C1 07               CALL   printStr   
5109   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5116   E1                     POP   hl   
5117   E5                     PUSH   hl   
5118   CD 15 07               CALL   prtdec   
511B   E1                     POP   hl   
511C   CD C1 07               CALL   printStr   
511F   20 28 23 00            .CSTR   " (#"   
5123   CD 5D 07               CALL   prthex   
5126   CD C1 07               CALL   printStr   
5129   29 0D 0A 00            .CSTR   ")\r\n"   
512D   76                     HALT      
512E   00                     .CSTR      
512F                EXPECTM_0_2496S43:      
512F   E1                     POP   HL   
5130                          ;*Macro unroll:  test "10 1 >>", 5
5130   31 80 18               LD   SP,STACK   
5133   CD 0D 09               CALL   init   
5136   CD C8 07               CALL   execStr   
5139   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
5141                          ;*Macro unroll:  expect "10 1 >>",5
5141   E1                     POP   HL   
5142   E5                     PUSH   HL   
5143   11 05 00               LD   DE,5   
5146   B7                     OR   A   
5147   ED 52                  SBC   HL,DE   
5149   7D                     LD   A,L   
514A   B4                     OR   H   
514B   28 52                  JR   Z,expectM_0_2497S43   
514D   CD C1 07               CALL   printStr   
5150   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
515E   CD C1 07               CALL   printStr   
5161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5170   21 05 00               LD   HL,5   
5173   CD 15 07               CALL   prtdec   
5176   CD C1 07               CALL   printStr   
5179   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5186   E1                     POP   hl   
5187   E5                     PUSH   hl   
5188   CD 15 07               CALL   prtdec   
518B   E1                     POP   hl   
518C   CD C1 07               CALL   printStr   
518F   20 28 23 00            .CSTR   " (#"   
5193   CD 5D 07               CALL   prthex   
5196   CD C1 07               CALL   printStr   
5199   29 0D 0A 00            .CSTR   ")\r\n"   
519D   76                     HALT      
519E   00                     .CSTR      
519F                EXPECTM_0_2497S43:      
519F   E1                     POP   HL   
51A0                             ; 
51A0                             ; 
51A0                             ; 
51A0                             ; 
51A0                             ; 
51A0                             ; 
51A0                             ; 
51A0                             ; test "7 3 / frac", 1
51A0                             ; test "10 sqrt", 3
51A0                             ; test "10 sqrt frac", 1
51A0                             ; test "() -2?", $0000
51A0                             ; test "(a) -1?", $0001
51A0                             ; test "(a:) -1?", $0001
51A0                             ; test "(a:b) -1?", $0102
51A0                             ; test "(:b) -1?", $0101
51A0                             ; test ":x 20 let 100 x set x", 100
51A0                             ; test "[10 20 30] 1?", 20
51A0                             ; test ":x [10 20 30] let 50 x 1? set x 1?", 50
51A0                             ; test "bytes [1 2 3] 1?", 2
51A0                             ; test "bytes :x [1 2 3] let x 1?", 2
51A0                             ; test "bytes [`A` `B` `C`] 1?", 66
51A0                             ; test "{1} exec", 1
51A0                             ; test "{{1} exec} exec", 1
51A0                             ; test "{{{1} exec} exec} exec", 1
51A0                             ; test "1 5 (a) {2} func call", 2
51A0                             ; test "1 5 (a) {$a} func call", 5
51A0                             ; test "1 5 (a:b) {$a} func call ", 5
51A0                             ; test "1 5 (a) {{2} exec} func call", 2
51A0                             ; test "1 5 (a) {{$a} exec} func call", 5
51A0                             ; test "1 5 (a) {{$a 1 +} exec} func call", 6
51A0                             ; test "1 10 20 (ab) {-1 {$a} {$b} ifte} func call", 10
51A0                             ; test "1 10 20 (ab) {0 {$a} {$b} ifte} func call", 20
51A0                             ; test ":x (a) {2} def 1 x", 2
51A0                             ; test ":x (a) {$a} def 0 1 x", 1
51A0                             ; test ":x (a) {$a} def 1 2 x", 2
51A0                             ; test ":x (a:b) {$a} def 1 2 x", 2
51A0                             ; test ":x (ab) {$b} def 1 2 x", 2
51A0                             ; test ":x (ab) {$b $a} def 10 15 x -", 5
51A0                             ; test ":x (a:b) {2} def 1 x", 2
51A0                             ; test ":x (:b) {100 $b set $b} def x", 100
51A0                             ; test ":x (a:b) {1 $b set $b} def 2 x", 1
51A0                             ; test ":x (a:b) {$a $b set $b} def 2 x", 2
51A0                             ; test "0 [{10} {20} {30}] switch", 10
51A0                             ; test "1 10 20 (ab) {0 [{$a} {$b}] switch} func call", 10
51A0                             ; test "0 10 20 (iab) {$i [{$a} {$b}] switch} func call", 10
51A0                             ; test "1 10 20 (iab) {$i [{$a} {$b}] switch} func call", 20
51A0                             ; test "false", false
51A0                             ; test "true", true
51A0                             ; test "1 5 false {10} if", 5
51A0                             ; test "1 5 true {10} if", 10
51A0                             ; test "1 false {10} {20} ifte", 20
51A0                             ; test "1 true {10} {20} ifte", 10
51A0                             ; test "[ 1 ] closure call", 1
51A0                             ; test "[ [ 2 ] ] closure call 0?", 2
51A0                             ; call execStr
51A0                             ; db "9"
51A0                             ; kall sqrt1
51A0                             ; db 0
51A0                             ; expect "9 sqrt",3
51A0   CD C1 07               CALL   printStr   
51A3   44 6F 6E 65 21 00      .CSTR   "Done!"   
51A9   76                     HALT      
51AA                          ALIGN   2   
51AA                PRINTER:      
51AA   E1                     POP   hl   
51AB   CD 15 07               CALL   prtdec   
51AE   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 55 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               06D0 DEFINED AT LINE 1132 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1124 IN monty.asm
                    > USED AT LINE 1922 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 253 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
                    > USED AT LINE 1307 IN monty.asm
                    > USED AT LINE 1348 IN monty.asm
                    > USED AT LINE 1372 IN monty.asm
                    > USED AT LINE 1375 IN monty.asm
                    > USED AT LINE 1953 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 41 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 1096 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1991 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 28 IN monty.asm
MACROS:             0180 DEFINED AT LINE 60 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 65 IN monty.asm
                    > USED AT LINE 1768 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 77 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 79 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 113 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 216 IN monty.asm
ADDR_:              0300 DEFINED AT LINE 218 IN monty.asm
NUM_:               0303 DEFINED AT LINE 221 IN monty.asm
                    > USED AT LINE 338 IN monty.asm
HEXNUM_:            0306 DEFINED AT LINE 224 IN monty.asm
ARG_:               0309 DEFINED AT LINE 227 IN monty.asm
STRING_:            030C DEFINED AT LINE 230 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 233 IN monty.asm
DOT_:               0312 DEFINED AT LINE 236 IN monty.asm
DOT1:               031E DEFINED AT LINE 244 IN monty.asm
                    > USED AT LINE 241 IN monty.asm
DOT2:               0327 DEFINED AT LINE 249 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
DOT3:               0331 DEFINED AT LINE 255 IN monty.asm
                    > USED AT LINE 251 IN monty.asm
DOT4:               0335 DEFINED AT LINE 258 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
INDEX_:             033C DEFINED AT LINE 264 IN monty.asm
BLOCK_:             033F DEFINED AT LINE 267 IN monty.asm
BLOCKEND_:          0342 DEFINED AT LINE 269 IN monty.asm
CHAR_:              0345 DEFINED AT LINE 271 IN monty.asm
ARRAY_:             0348 DEFINED AT LINE 273 IN monty.asm
ARRAYEND_:          034B DEFINED AT LINE 275 IN monty.asm
IDENTU_:            034E DEFINED AT LINE 277 IN monty.asm
IDENTL_:            0351 DEFINED AT LINE 279 IN monty.asm
SYMBOL_:            0354 DEFINED AT LINE 281 IN monty.asm
AND_:               0357 DEFINED AT LINE 283 IN monty.asm
AND1:               035E DEFINED AT LINE 291 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
                    > USED AT LINE 315 IN monty.asm
OR_:                0362 DEFINED AT LINE 296 IN monty.asm
XOR_:               036B DEFINED AT LINE 306 IN monty.asm
XOR1:               036C DEFINED AT LINE 308 IN monty.asm
                    > USED AT LINE 319 IN monty.asm
INV_:               0374 DEFINED AT LINE 317 IN monty.asm
ADD_:               0379 DEFINED AT LINE 321 IN monty.asm
MUL_:               037F DEFINED AT LINE 328 IN monty.asm
SUB_:               0382 DEFINED AT LINE 331 IN monty.asm
SUB1:               038E DEFINED AT LINE 339 IN monty.asm
                    > USED AT LINE 336 IN monty.asm
SUB2:               0390 DEFINED AT LINE 342 IN monty.asm
NOT_:               0396 DEFINED AT LINE 348 IN monty.asm
EQ_:                039B DEFINED AT LINE 352 IN monty.asm
EQ0:                03A5 DEFINED AT LINE 359 IN monty.asm
                    > USED AT LINE 356 IN monty.asm
EQ1:                03A6 DEFINED AT LINE 361 IN monty.asm
                    > USED AT LINE 350 IN monty.asm
GT_:                03AA DEFINED AT LINE 365 IN monty.asm
LT_:                03B5 DEFINED AT LINE 374 IN monty.asm
LT1:                03BE DEFINED AT LINE 381 IN monty.asm
                    > USED AT LINE 372 IN monty.asm
DIV_:               03C7 DEFINED AT LINE 387 IN monty.asm
COMMAND_:           03D6 DEFINED AT LINE 398 IN monty.asm
COMMENT:            03E2 DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 402 IN monty.asm
                    > USED AT LINE 410 IN monty.asm
NOP_:               03EB DEFINED AT LINE 414 IN monty.asm
ADDR:               03ED DEFINED AT LINE 422 IN monty.asm
                    > USED AT LINE 219 IN monty.asm
SHIFTLEFT:          03F9 DEFINED AT LINE 431 IN monty.asm
                    > USED AT LINE 378 IN monty.asm
SHIFTLEFT1:         0401 DEFINED AT LINE 438 IN monty.asm
                    > USED AT LINE 441 IN monty.asm
SHIFTLEFT2:         0402 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 437 IN monty.asm
SHIFTRIGHT:         0409 DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 369 IN monty.asm
SHIFTRIGHT1:        0411 DEFINED AT LINE 455 IN monty.asm
                    > USED AT LINE 459 IN monty.asm
SHIFTRIGHT2:        0415 DEFINED AT LINE 458 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
MUL:                041C DEFINED AT LINE 464 IN monty.asm
                    > USED AT LINE 329 IN monty.asm
MUL2:               0426 DEFINED AT LINE 473 IN monty.asm
                    > USED AT LINE 482 IN monty.asm
NUM:                0438 DEFINED AT LINE 487 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
NUM0:               0441 DEFINED AT LINE 493 IN monty.asm
                    > USED AT LINE 491 IN monty.asm
NUM1:               0442 DEFINED AT LINE 495 IN monty.asm
                    > USED AT LINE 512 IN monty.asm
NUM2:               045A DEFINED AT LINE 513 IN monty.asm
                    > USED AT LINE 498 IN monty.asm
                    > USED AT LINE 500 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
NUM3:               0465 DEFINED AT LINE 521 IN monty.asm
                    > USED AT LINE 516 IN monty.asm
HEXNUM:             0468 DEFINED AT LINE 525 IN monty.asm
                    > USED AT LINE 225 IN monty.asm
HEXNUM1:            046B DEFINED AT LINE 527 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
HEXNUM2:            0473 DEFINED AT LINE 533 IN monty.asm
                    > USED AT LINE 531 IN monty.asm
STRING:             0485 DEFINED AT LINE 549 IN monty.asm
                    > USED AT LINE 231 IN monty.asm
STRING1:            048E DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 563 IN monty.asm
STRING2:            0491 DEFINED AT LINE 560 IN monty.asm
                    > USED AT LINE 555 IN monty.asm
CHAR:               04A9 DEFINED AT LINE 580 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
CHAR1:              04AC DEFINED AT LINE 582 IN monty.asm
                    > USED AT LINE 593 IN monty.asm
CHAR2:              04B8 DEFINED AT LINE 591 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
CHAR3:              04BB DEFINED AT LINE 594 IN monty.asm
                    > USED AT LINE 586 IN monty.asm
IDENTU:             04BE DEFINED AT LINE 598 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
IDENTL:             04C3 DEFINED AT LINE 602 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
IDENT1:             04C8 DEFINED AT LINE 606 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
ASSIGN:             04D5 DEFINED AT LINE 618 IN monty.asm
                    > USED AT LINE 358 IN monty.asm
ASSIGN1:            04E3 DEFINED AT LINE 628 IN monty.asm
                    > USED AT LINE 625 IN monty.asm
ARG_LIST:           04E5 DEFINED AT LINE 645 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARG_LIST1:          04EF DEFINED AT LINE 652 IN monty.asm
                    > USED AT LINE 670 IN monty.asm
ARG_LIST2:          04FB DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 657 IN monty.asm
ARG_LIST3:          0503 DEFINED AT LINE 668 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
                    > USED AT LINE 666 IN monty.asm
ARG_LIST4:          0506 DEFINED AT LINE 671 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
ARG_LIST5:          050B DEFINED AT LINE 676 IN monty.asm
                    > USED AT LINE 674 IN monty.asm
BLOCK:              0517 DEFINED AT LINE 687 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
BLOCK1:             051B DEFINED AT LINE 691 IN monty.asm
                    > USED AT LINE 695 IN monty.asm
                    > USED AT LINE 715 IN monty.asm
                    > USED AT LINE 718 IN monty.asm
                    > USED AT LINE 723 IN monty.asm
                    > USED AT LINE 727 IN monty.asm
BLOCK2:             0543 DEFINED AT LINE 716 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
                    > USED AT LINE 707 IN monty.asm
                    > USED AT LINE 709 IN monty.asm
BLOCK3:             0546 DEFINED AT LINE 719 IN monty.asm
                    > USED AT LINE 712 IN monty.asm
                    > USED AT LINE 714 IN monty.asm
BLOCK4:             054E DEFINED AT LINE 725 IN monty.asm
                    > USED AT LINE 698 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
                    > USED AT LINE 702 IN monty.asm
BLOCK5:             0551 DEFINED AT LINE 728 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
BLOCKEND:           0554 DEFINED AT LINE 732 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
BLOCKEND1:          0580 DEFINED AT LINE 755 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
BLOCKEND2:          058C DEFINED AT LINE 762 IN monty.asm
                    > USED AT LINE 754 IN monty.asm
IF:                 05A5 DEFINED AT LINE 785 IN monty.asm
IFTE:               05AA DEFINED AT LINE 791 IN monty.asm
IFTE1:              05AB DEFINED AT LINE 793 IN monty.asm
                    > USED AT LINE 787 IN monty.asm
SWITCH:             05B7 DEFINED AT LINE 805 IN monty.asm
INDEX:              05C1 DEFINED AT LINE 817 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
INDEX0:             05C9 DEFINED AT LINE 823 IN monty.asm
INDEX1:             05CA DEFINED AT LINE 825 IN monty.asm
                    > USED AT LINE 822 IN monty.asm
INDEX2:             05D6 DEFINED AT LINE 834 IN monty.asm
                    > USED AT LINE 831 IN monty.asm
LOOP:               05D9 DEFINED AT LINE 840 IN monty.asm
WORDS:              05DB DEFINED AT LINE 890 IN monty.asm
BYTES:              05E0 DEFINED AT LINE 893 IN monty.asm
BYTES1:             05E3 DEFINED AT LINE 895 IN monty.asm
                    > USED AT LINE 892 IN monty.asm
ARRAY:              05E8 DEFINED AT LINE 899 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
ARRAYEND:           0604 DEFINED AT LINE 913 IN monty.asm
                    > USED AT LINE 276 IN monty.asm
ARRAYEND1:          0625 DEFINED AT LINE 933 IN monty.asm
                    > USED AT LINE 942 IN monty.asm
ARRAYEND2:          0635 DEFINED AT LINE 945 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
                    > USED AT LINE 957 IN monty.asm
ARRAYEND3:          0648 DEFINED AT LINE 959 IN monty.asm
                    > USED AT LINE 943 IN monty.asm
HASH:               0663 DEFINED AT LINE 978 IN monty.asm
DOLET:              0665 DEFINED AT LINE 988 IN monty.asm
SYMBOL:             0670 DEFINED AT LINE 998 IN monty.asm
                    > USED AT LINE 282 IN monty.asm
FRAC:               0672 DEFINED AT LINE 1028 IN monty.asm
SQRT1:              0678 DEFINED AT LINE 1033 IN monty.asm
ABS1:               0685 DEFINED AT LINE 1042 IN monty.asm
EQUALS:             0692 DEFINED AT LINE 1067 IN monty.asm
                    > USED AT LINE 363 IN monty.asm
LESSTHANEQ:         069A DEFINED AT LINE 1075 IN monty.asm
                    > USED AT LINE 383 IN monty.asm
LESSTHAN:           069F DEFINED AT LINE 1082 IN monty.asm
                    > USED AT LINE 385 IN monty.asm
LESSTHAN1:          06A4 DEFINED AT LINE 1087 IN monty.asm
                    > USED AT LINE 1078 IN monty.asm
TRUE1:              06A7 DEFINED AT LINE 1090 IN monty.asm
                    > USED AT LINE 1070 IN monty.asm
NULL1:              06AD DEFINED AT LINE 1094 IN monty.asm
FALSE1:             06AD DEFINED AT LINE 1095 IN monty.asm
                    > USED AT LINE 1071 IN monty.asm
                    > USED AT LINE 1085 IN monty.asm
                    > USED AT LINE 1088 IN monty.asm
INPUT:              06B3 DEFINED AT LINE 1102 IN monty.asm
OUTPUT:             06BE DEFINED AT LINE 1114 IN monty.asm
KEY:                06C7 DEFINED AT LINE 1123 IN monty.asm
FILTER:             06D0 DEFINED AT LINE 1130 IN monty.asm
MAP:                06D0 DEFINED AT LINE 1131 IN monty.asm
DIVIDE:             06D2 DEFINED AT LINE 1245 IN monty.asm
                    > USED AT LINE 392 IN monty.asm
DIVIDE1:            06D7 DEFINED AT LINE 1248 IN monty.asm
                    > USED AT LINE 1260 IN monty.asm
DIVIDE2:            06E4 DEFINED AT LINE 1256 IN monty.asm
                    > USED AT LINE 1253 IN monty.asm
DIVIDE3:            06E5 DEFINED AT LINE 1258 IN monty.asm
                    > USED AT LINE 1255 IN monty.asm
SQUAREROOT:         06EB DEFINED AT LINE 1268 IN monty.asm
                    > USED AT LINE 1036 IN monty.asm
SQUAREROOT1:        06F0 DEFINED AT LINE 1272 IN monty.asm
                    > USED AT LINE 1293 IN monty.asm
SQUAREROOT4:        070B DEFINED AT LINE 1292 IN monty.asm
                    > USED AT LINE 1286 IN monty.asm
SQUAREROOT5:        0712 DEFINED AT LINE 1297 IN monty.asm
                    > USED AT LINE 1295 IN monty.asm
PRTDEC:             0715 DEFINED AT LINE 1303 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
                    > USED AT LINE 2009 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 142
PRTDEC0:            0724 DEFINED AT LINE 1314 IN monty.asm
                    > USED AT LINE 1305 IN monty.asm
PRTDEC1:            0746 DEFINED AT LINE 1330 IN monty.asm
                    > USED AT LINE 1318 IN monty.asm
                    > USED AT LINE 1320 IN monty.asm
                    > USED AT LINE 1322 IN monty.asm
                    > USED AT LINE 1324 IN monty.asm
                    > USED AT LINE 1327 IN monty.asm
PRTDEC2:            0748 DEFINED AT LINE 1332 IN monty.asm
                    > USED AT LINE 1335 IN monty.asm
PRTDEC3:            0758 DEFINED AT LINE 1344 IN monty.asm
                    > USED AT LINE 1339 IN monty.asm
PRTDEC4:            0759 DEFINED AT LINE 1346 IN monty.asm
                    > USED AT LINE 1343 IN monty.asm
PRTHEX:             075D DEFINED AT LINE 1350 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0768 DEFINED AT LINE 1358 IN monty.asm
                    > USED AT LINE 1353 IN monty.asm
                    > USED AT LINE 1355 IN monty.asm
PRTHEX3:            0771 DEFINED AT LINE 1366 IN monty.asm
                    > USED AT LINE 1364 IN monty.asm
PRTSTR0:            077C DEFINED AT LINE 1374 IN monty.asm
                    > USED AT LINE 1380 IN monty.asm
PRTSTR:             0780 DEFINED AT LINE 1377 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
                    > USED AT LINE 1440 IN monty.asm
NESTING:            0785 DEFINED AT LINE 1393 IN monty.asm
                    > USED AT LINE 1913 IN monty.asm
                    > USED AT LINE 1954 IN monty.asm
NESTING1A:          0790 DEFINED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1397 IN monty.asm
NESTING1:           0793 DEFINED AT LINE 1403 IN monty.asm
                    > USED AT LINE 1395 IN monty.asm
NESTING2:           07A2 DEFINED AT LINE 1412 IN monty.asm
                    > USED AT LINE 1407 IN monty.asm
                    > USED AT LINE 1409 IN monty.asm
NESTING3:           07A4 DEFINED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1411 IN monty.asm
NESTING4:           07AF DEFINED AT LINE 1422 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
                    > USED AT LINE 1419 IN monty.asm
PROMPT:             07B1 DEFINED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1897 IN monty.asm
CRLF:               07BA DEFINED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1966 IN monty.asm
PRINTSTR:           07C1 DEFINED AT LINE 1438 IN monty.asm
                    > USED AT LINE 1427 IN monty.asm
                    > USED AT LINE 1432 IN monty.asm
                    > USED AT LINE 1893 IN monty.asm
                    > USED AT LINE 2007 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 135
EXECSTR:            07C8 DEFINED AT LINE 1452 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               07D3 DEFINED AT LINE 1482 IN monty.asm
EXEC:               07D5 DEFINED AT LINE 1489 IN monty.asm
EXEC0:              07D6 DEFINED AT LINE 1491 IN monty.asm
                    > USED AT LINE 799 IN monty.asm
                    > USED AT LINE 801 IN monty.asm
                    > USED AT LINE 813 IN monty.asm
EXEC1:              07DC DEFINED AT LINE 1496 IN monty.asm
                    > USED AT LINE 1494 IN monty.asm
EXEC2:              07FC DEFINED AT LINE 1513 IN monty.asm
                    > USED AT LINE 1505 IN monty.asm
DOFUNC:             0803 DEFINED AT LINE 1522 IN monty.asm
DOFUNC1:            0819 DEFINED AT LINE 1540 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
DOFUNC2:            081F DEFINED AT LINE 1546 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
DOFUNC3:            0824 DEFINED AT LINE 1551 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
DOFUNC4:            0830 DEFINED AT LINE 1562 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1517 IN monty.asm
                    > USED AT LINE 1539 IN monty.asm
DOFUNC5:            083C DEFINED AT LINE 1569 IN monty.asm
                    > USED AT LINE 1526 IN monty.asm
FUNC:               083E DEFINED AT LINE 1573 IN monty.asm
FUNC1:              0856 DEFINED AT LINE 1594 IN monty.asm
                    > USED AT LINE 1618 IN monty.asm
                    > USED AT LINE 1621 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
                    > USED AT LINE 1630 IN monty.asm
FUNC2:              087C DEFINED AT LINE 1619 IN monty.asm
                    > USED AT LINE 1608 IN monty.asm
                    > USED AT LINE 1610 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
FUNC3:              087F DEFINED AT LINE 1622 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
                    > USED AT LINE 1617 IN monty.asm
FUNC4:              0887 DEFINED AT LINE 1628 IN monty.asm
                    > USED AT LINE 1601 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
                    > USED AT LINE 1605 IN monty.asm
FUNC4A:             088A DEFINED AT LINE 1631 IN monty.asm
                    > USED AT LINE 1627 IN monty.asm
ARG:                0896 DEFINED AT LINE 1642 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG0:               08B4 DEFINED AT LINE 1663 IN monty.asm
                    > USED AT LINE 1669 IN monty.asm
ARG0A:              08BD DEFINED AT LINE 1671 IN monty.asm
                    > USED AT LINE 1648 IN monty.asm
                    > USED AT LINE 1655 IN monty.asm
ARG1:               08C2 DEFINED AT LINE 1674 IN monty.asm
                    > USED AT LINE 1667 IN monty.asm
ARG1A:              08CA DEFINED AT LINE 1681 IN monty.asm
                    > USED AT LINE 1673 IN monty.asm
CLOSURE:            08CD DEFINED AT LINE 1687 IN monty.asm
DOCLOSURE:          08E7 DEFINED AT LINE 1705 IN monty.asm
DOCLOSURE1:         08FD DEFINED AT LINE 1723 IN monty.asm
                    > USED AT LINE 1733 IN monty.asm
DOCLOSURE2:         0903 DEFINED AT LINE 1730 IN monty.asm
                    > USED AT LINE 1722 IN monty.asm
DOCLOSURE3:         0907 DEFINED AT LINE 1734 IN monty.asm
                    > USED AT LINE 1713 IN monty.asm
INIT:               090D DEFINED AT LINE 1765 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1892 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0926 DEFINED AT LINE 1775 IN monty.asm
                    > USED AT LINE 1778 IN monty.asm
START:              092B DEFINED AT LINE 1890 IN monty.asm
INTERPRET:          0941 DEFINED AT LINE 1896 IN monty.asm
                    > USED AT LINE 1993 IN monty.asm
                    > USED AT LINE 2010 IN monty.asm
INTERPRET2:         094B DEFINED AT LINE 1902 IN monty.asm
                    > USED AT LINE 1946 IN monty.asm
INTERPRET3:         0953 DEFINED AT LINE 1909 IN monty.asm
                    > USED AT LINE 1918 IN monty.asm
INTERPRET4:         0959 DEFINED AT LINE 1915 IN monty.asm
                    > USED AT LINE 1907 IN monty.asm
INTERPRET5:         095E DEFINED AT LINE 1921 IN monty.asm
                    > USED AT LINE 1955 IN monty.asm
                    > USED AT LINE 1969 IN monty.asm
INTERPRET6:         096F DEFINED AT LINE 1948 IN monty.asm
                    > USED AT LINE 1924 IN monty.asm
INTERPRET7:         097D DEFINED AT LINE 1957 IN monty.asm
                    > USED AT LINE 1929 IN monty.asm
INTERPRET8:         0990 DEFINED AT LINE 1971 IN monty.asm
                    > USED AT LINE 1927 IN monty.asm
NEXT:               0998 DEFINED AT LINE 1977 IN monty.asm
                    > USED AT LINE 72 IN monty.asm
                    > USED AT LINE 1981 IN monty.asm
NEXT1:              09AB DEFINED AT LINE 1990 IN monty.asm
                    > USED AT LINE 1982 IN monty.asm
NEXT2:              09B2 DEFINED AT LINE 1994 IN monty.asm
                    > USED AT LINE 1984 IN monty.asm
EXIT_:              09B8 DEFINED AT LINE 2002 IN monty.asm
                    > USED AT LINE 1992 IN monty.asm
ERROR:              09BB DEFINED AT LINE 2006 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1498 IN monty.asm
                    > USED AT LINE 1767 IN monty.asm
                    > USED AT LINE 1891 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1772 IN monty.asm
RESTARTS:           19D0 DEFINED AT LINE 10 IN ram.asm
RST08:              19D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              19D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              19D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              19D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              19D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              19DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               19DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             19DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             19E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            19E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            19E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            19E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1769 IN monty.asm
VFRAC:              19E6 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 393 IN monty.asm
                    > USED AT LINE 1029 IN monty.asm
                    > USED AT LINE 1037 IN monty.asm
VDATAWIDTH:         19E8 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 623 IN monty.asm
                    > USED AT LINE 820 IN monty.asm
                    > USED AT LINE 896 IN monty.asm
                    > USED AT LINE 929 IN monty.asm
VTIBPTR:            19EA DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1900 IN monty.asm
                    > USED AT LINE 1972 IN monty.asm
VPOINTER:           19EC DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 423 IN monty.asm
                    > USED AT LINE 425 IN monty.asm
                    > USED AT LINE 426 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
                    > USED AT LINE 827 IN monty.asm
                    > USED AT LINE 990 IN monty.asm
                    > USED AT LINE 1677 IN monty.asm
VLASTDEF:           19EE DEFINED AT LINE 30 IN ram.asm
VHASHSTR:           19F0 DEFINED AT LINE 31 IN ram.asm
VNEXT:              19F2 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1766 IN monty.asm
VHEAPPTR:           19F4 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 550 IN monty.asm
                    > USED AT LINE 567 IN monty.asm
                    > USED AT LINE 647 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
                    > USED AT LINE 923 IN monty.asm
                    > USED AT LINE 969 IN monty.asm
                    > USED AT LINE 970 IN monty.asm
                    > USED AT LINE 1574 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
                    > USED AT LINE 1636 IN monty.asm
                    > USED AT LINE 1688 IN monty.asm
                    > USED AT LINE 1699 IN monty.asm
                    > USED AT LINE 1701 IN monty.asm
VTEMP1:             19F6 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 916 IN monty.asm
                    > USED AT LINE 971 IN monty.asm
                    > USED AT LINE 1715 IN monty.asm
                    > USED AT LINE 1735 IN monty.asm
VTEMP2:             19F8 DEFINED AT LINE 36 IN ram.asm
TBPTR:              19FA DEFINED AT LINE 38 IN ram.asm
TIB:                1A00 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1906 IN monty.asm
                    > USED AT LINE 1949 IN monty.asm
                    > USED AT LINE 1958 IN monty.asm
                    > USED AT LINE 1973 IN monty.asm
PAD:                1B00 DEFINED AT LINE 44 IN ram.asm
HEAP:               1C00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 73 IN monty.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2455S43:  4063 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2456S43:  40D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2458S43:  4137 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2459S43:  419B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2460S43:  41FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2461S43:  4263 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2462S43:  42C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2463S43:  4331 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2464S43:  4397 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2465S43:  43FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2466S43:  4465 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2467S43:  44CF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2468S43:  4537 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2469S43:  459F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2470S43:  460D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2471S43:  467B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2472S43:  46E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2473S43:  4757 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2474S43:  47C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2475S43:  4837 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2476S43:  48A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2477S43:  4919 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2478S43:  4985 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2479S43:  49F1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2480S43:  4A5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2481S43:  4AC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2482S43:  4B3D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2483S43:  4BA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2484S43:  4C17 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2485S43:  4C85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2486S43:  4CF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2487S43:  4D5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2488S43:  4DC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2489S43:  4E35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2490S43:  4EA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2491S43:  4F0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2492S43:  4F79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2493S43:  4FE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2494S43:  5053 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2495S43:  50C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2496S43:  512F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2497S43:  519F DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            51AA DEFINED AT LINE 140
