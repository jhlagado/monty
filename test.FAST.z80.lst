0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 56               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 56               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 56               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 56               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 56               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 56               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 56               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 56               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 56               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 56               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 54               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 56               LD   (RST08),HL   
0094   22 D2 56               LD   (RST10),HL   
0097   22 D4 56               LD   (RST18),HL   
009A   22 D6 56               LD   (RST20),HL   
009D   22 D8 56               LD   (RST28),HL   
00A0   22 DA 56               LD   (RST30),HL   
00A3   22 DE 56               LD   (INTVEC),HL   
00A6   22 E0 56               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 56               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 56               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 54                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 55                  DW   BUF   ; vBUFPtr pointer into BUF
0188   6C 0F                  DW   next   ; nNext
018A   1C 57                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 95 0B               JP   dollar   
030C                LBRACK_:      
030C   C3 0F 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 2B 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 DA 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 10 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 79 05               JP   rbrace   
031B                TICK_:       
031B   C3 0A 06               JP   tick   
031E                SEMICOLON_:      
031E   C3 0E 08               JP   semicolon   
0321                DOT_:        
0321   C3 D8 08               JP   dot   
0324                COLON_:      
0324   C3 9B 04               JP   colon   
0327                UPCASE_:      
0327   C3 B2 0B               JP   upcase   
032A                LOWCASE_:      
032A   C3 B7 0B               JP   lowcase   
032D                QUESTION_:      
032D   C3 C9 0B               JP   question   
0330                STAR_:       
0330   C3 4C 0C               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 33 0A               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 68 0C               JP   num   
0347                HASH_:       
0347   C3 7B 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 F6 0A               JP   caret   
0350                COMMA_:      
0350   C3 AA 08               JP   comma   
0353                DQUOTE_:      
0353   C3 45 0D               JP   dquote   
0356                MINUS_:      
0356   C3 6D 0D               JP   minus   
0359                EQ_:         
0359   CD 0D 0E               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   D1 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 2B 0A               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA 32 0D               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA 22 0D               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 3C 0A               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 41 0A               JP   lessthan   
0384                SLASH_:      
0384   C3 28 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 1A 0D               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 D3 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 D3 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 56            LD   de,(vPointer)   
03AD   21 F4 56               LD   hl,vPointer   
03B0   C3 D4 0D               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   C3 C1 03               JP   or   
03C1                OR:          
03C1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C2   E1                     POP   hl   
03C3   7B                     LD   a,e   
03C4   B5                     OR   l   
03C5   6F                     LD   l,a   
03C6   7A                     LD   a,d   
03C7   B4                     OR   h   
03C8   18 F0                  JR   and1   
03CA                XOR:         
03CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CB                XOR1:        
03CB   E1                     POP   hl   
03CC   7B                     LD   a,e   
03CD   AD                     XOR   l   
03CE   6F                     LD   l,a   
03CF   7A                     LD   a,d   
03D0   AC                     XOR   h   
03D1   67                     LD   h,a   
03D2   E5                     PUSH   hl   
03D3   DD E9                  JP   (ix)   
03D5                INVERT:      ; Bitwise INVert the top member of the stack
03D5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D8   18 F1                  JR   xor1   
03DA                             ; %a .. %z
03DA                             ; -- value
03DA                             ; returns value of arg
03DA                PERCENT:      
03DA                ARG:         
03DA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DD   FD 56 05               LD   d,(iy+5)   
03E0   EB                     EX   de,hl   
03E1   7D                     LD   a,l   ; arg_list* == null, skip
03E2   B4                     OR   h   
03E3   28 1A                  JR   z,arg0a   
03E5   23                     INC   hl   ; a = num_args, hl = arg_list*
03E6   7E                     LD   a,(hl)   
03E7   23                     INC   hl   
03E8   B7                     OR   a   
03E9   28 14                  JR   z,arg0a   ; num_args == 0, skip
03EB   5F                     LD   e,a   ; e = a = num_args
03EC   03                     INC   bc   ; a = next char = dollar_name
03ED   0A                     LD   a,(bc)   
03EE   C5                     PUSH   bc   ; save IP
03EF   43                     LD   b,e   ; b = e = num_args
03F0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F3   FD 56 03               LD   d,(iy+3)   
03F6                ARG0:        
03F6   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F7   1B                     DEC   de   
03F8   BE                     CP   (hl)   
03F9   28 09                  JR   z,arg1   
03FB   23                     INC   hl   ; hl = next arg_list*
03FC   10 F8                  DJNZ   arg0   
03FE   C1                     POP   bc   ; no match, restore IP
03FF                ARG0A:       
03FF   11 00 00               LD   de,0   ; return 0
0402   18 08                  JR   arg1a   
0404                ARG1:        
0404   C1                     POP   bc   ; restore IP
0405   EB                     EX   de,hl   ; hl = arg*
0406   22 F4 56               LD   (vPointer),hl   ; store arg* in setter
0409   5E                     LD   e,(hl)   
040A   23                     INC   hl   
040B   56                     LD   d,(hl)   ; de = arg
040C                ARG1A:       
040C   D5                     PUSH   de   ; push arg
040D   DD E9                  JP   (ix)   
040F                LBRACK:      
040F                ARRAYSTART:      
040F   11 00 00               LD   de,0   ; create stack frame
0412   D5                     PUSH   de   ; push null for IP
0413   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0416   FD 56 05               LD   d,(iy+5)   ; 
0419   D5                     PUSH   de   ; 
041A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
041D   FD 56 03               LD   d,(iy+3)   ; 
0420   D5                     PUSH   de   ; 
0421   FD E5                  PUSH   iy   ; push BP
0423   FD 21 00 00            LD   iy,0   ; BP = SP
0427   FD 39                  ADD   iy,sp   
0429   DD E9                  JP   (ix)   
042B                RBRACK:      
042B                ARRAYEND:      
042B   FD 54                  LD   d,iyh   ; de = BP
042D   FD 5D                  LD   e,iyl   
042F   ED 43 00 57            LD   (vTemp1),bc   ; save IP
0433   62 6B                  LD   hl,de   ; hl = de = BP
0435   B7                     OR   a   
0436   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0438   CB 3C                  SRL   h   ; 
043A   CB 1D                  RR   l   
043C   44 4D                  LD   bc,hl   ; bc = count
043E   2A F0 56               LD   hl,(vHeapPtr)   ; hl = array[-4]
0441   71                     LD   (hl),c   ; write num items in length word
0442   23                     INC   hl   
0443   70                     LD   (hl),b   
0444   23                     INC   hl   ; hl = array[0], bc = count
0445                             ; de = BP, hl = array[0], bc = count
0445   18 15                  JR   arrayEnd3   
0447                ARRAYEND1:      
0447   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
044A   77                     LD   (hl),a   ; write lsb of array item
044B   23                     INC   hl   ; move to msb of array item
044C   3A E6 56               LD   a,(vDataWidth)   ; vDataWidth=1?
044F   3D                     DEC   a   
0450   28 05                  JR   z,arrayEnd2   
0452   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0455   77                     LD   (hl),a   ; write msb of array item
0456   23                     INC   hl   ; move to next word in array
0457                ARRAYEND2:      
0457   FD 2B                  DEC   iy   ; move to next word on stack
0459   FD 2B                  DEC   iy   
045B   0B                     DEC   bc   ; dec items count
045C                ARRAYEND3:      
045C   79                     LD   a,c   ; if not zero loop
045D   B0                     OR   b   
045E   20 E7                  JR   nz,arrayEnd1   
0460   EB                     EX   de,hl   ; de = end of array, hl = BP
0461   F9                     LD   sp,hl   ; sp = BP
0462   E1                     POP   hl   ; de = end of array, hl = old BP
0463   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0464   FD 62                  LD   iyh,d   
0466   FD 6B                  LD   iyl,e   
0468   D1                     POP   de   ; pop arg_list (discard)
0469   D1                     POP   de   ; pop first_arg* (discard)
046A   D1                     POP   de   ; pop IP (discard)
046B   ED 5B F0 56            LD   de,(vHeapPtr)   ; de = array[-2]
046F   13                     INC   de   
0470   13                     INC   de   
0471   D5                     PUSH   de   ; return array[0]
0472   22 F0 56               LD   (vHeapPtr),hl   ; move heap* to end of array
0475   ED 4B 00 57            LD   bc,(vTemp1)   ; restore IP
0479   DD E9                  JP   (ix)   
047B                             ; index of an array, based on vDataWidth
047B                             ; array* num -- value    ; also sets vPointer to address
047B                HASH:        
047B                ARRAYINDEX:      
047B   E1                     POP   hl   ; hl = index
047C   D1                     POP   de   ; de = array
047D   3A E6 56               LD   a,(vDataWidth)   ; a = data width
0480   3D                     DEC   a   
0481   28 01                  JR   z,arrayIndex1   
0483                ARRAYINDEX0:      
0483   29                     ADD   hl,hl   ; if data width = 2 then double
0484                ARRAYINDEX1:      
0484   19                     ADD   hl,de   ; add addr
0485   22 F4 56               LD   (vPointer),hl   ; store address in setter
0488   16 00                  LD   d,0   
048A   5E                     LD   e,(hl)   
048B   B7                     OR   a   ; check data width again
048C   28 02                  JR   z,arrayIndex2   
048E   23                     INC   hl   
048F   56                     LD   d,(hl)   
0490                ARRAYINDEX2:      
0490   D5                     PUSH   de   
0491   DD E9                  JP   (ix)   
0493                             ; /as size of an array, num elements, ignores vDataWidth :-/
0493                             ; array* -- num
0493                ARRAYSIZE:      
0493   E1                     POP   hl   
0494   2B                     DEC   hl   ; msb size
0495   56                     LD   d,(hl)   
0496   2B                     DEC   hl   ; lsb size
0497   5E                     LD   e,(hl)   
0498   D5                     PUSH   de   
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                             ; format: numLocals totNumArgs argChars...
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 56               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   E5                     PUSH   hl   ; save start of arg_list
04A2   23                     INC   hl   ; skip length fields to start of string
04A3   23                     INC   hl   
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 61                  CP   "a"   ; < "a" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 56               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   72                     LD   (hl),d   ; write number of locals at start - 1
04CD   23                     INC   hl   
04CE   73                     LD   (hl),e   ; write number of args + locals at start - 2
04CF   DD E9                  JP   (ix)   
04D1                             ; value _oldValue --            ; uses address in vPointer
04D1                ASSIGN:      
04D1   E1                     POP   hl   ; discard last accessed value
04D2   E1                     POP   hl   ; hl = new value
04D3                ASSIGN0:      
04D3   EB                     EX   de,hl   ; de = new value
04D4                ASSIGNX:      
04D4   2A F4 56               LD   hl,(vPointer)   
04D7   73                     LD   (hl),e   
04D8   3A E6 56               LD   a,(vDataWidth)   
04DB   3D                     DEC   a   ; is it byte?
04DC   28 02                  JR   z,assign1   
04DE   23                     INC   hl   
04DF   72                     LD   (hl),d   
04E0                ASSIGN1:      
04E0   DD E9                  JP   (ix)   
04E2                             ; /ab absolute
04E2                             ; num -- num
04E2                ABSOLUTE:      
04E2   E1                     POP   hl   
04E3   CB 7C                  BIT   7,h   
04E5   C8                     RET   z   
04E6   AF                     XOR   a   
04E7   95                     SUB   l   
04E8   6F                     LD   l,a   
04E9   9F                     SBC   a,a   
04EA   94                     SUB   h   
04EB   67                     LD   h,a   
04EC   E5                     PUSH   hl   
04ED   DD E9                  JP   (ix)   
04EF                             ; /ad addrOf
04EF                             ; char -- addr
04EF                ADDROF:      
04EF   E1                     POP   hl   ; a = char
04F0   7D                     LD   a,l   
04F1   FE 7B                  CP   "z"+1   ; if a > z then exit
04F3   30 19                  JR   nc,addrOf2   
04F5   D6 41                  SUB   "A"   ; a - 65
04F7   38 15                  JR   c,addrOf2   ; if < A then exit
04F9   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04FB   38 06                  JR   c,addrOf1   
04FD   D6 06                  SUB   "a"-("Z"+1)   
04FF   FE 1A                  CP   "Z"-"A"+1   
0501   38 0B                  JR   c,addrOf2   ; if < a then exit
0503                ADDROF1:      
0503   87                     ADD   a,a   ; double a
0504   21 00 56               LD   hl,VARS   ; hl = VARS + a
0507   85                     ADD   a,l   
0508   6F                     LD   l,a   
0509   3E 00                  LD   a,0   
050B   8C                     ADC   a,h   
050C   67                     LD   h,a   
050D   E5                     PUSH   hl   
050E                ADDROF2:      
050E   DD E9                  JP   (ix)   
0510                LBRACE:      
0510                BLOCKSTART:      
0510   C5                     PUSH   bc   ; return pointer to first { of block
0511   03                     INC   bc   
0512   16 01                  LD   d,1   ; nesting: count first parenthesis
0514                BLOCKSTART1:      ; Skip to end of definition
0514   0A                     LD   a,(bc)   ; Get the next character
0515   03                     INC   bc   ; Point to next character
0516   FE 21                  CP   " " + 1   ; ignore whitespace
0518   38 FA                  JR   c,blockStart1   
051A   FE 29                  CP   ")"   
051C   28 2D                  JR   z,blockStart4   
051E   FE 7D                  CP   "}"   
0520   28 29                  JR   z,blockStart4   
0522   FE 5D                  CP   "]"   
0524   28 25                  JR   z,blockStart4   
0526   FE 28                  CP   "("   
0528   28 16                  JR   z,blockStart2   
052A   FE 7B                  CP   "{"   
052C   28 12                  JR   z,blockStart2   
052E   FE 5B                  CP   "["   
0530   28 0E                  JR   z,blockStart2   
0532   FE 27                  CP   "'"   
0534   28 0D                  JR   z,blockStart3   
0536   FE 60                  CP   "`"   
0538   28 09                  JR   z,blockStart3   
053A   FE 22                  CP   DQ   
053C   28 05                  JR   z,blockStart3   
053E   18 D4                  JR   blockStart1   
0540                BLOCKSTART2:      
0540   14                     INC   d   
0541   18 D1                  JR   blockStart1   
0543                BLOCKSTART3:      
0543   3E 80                  LD   a,$80   
0545   AA                     XOR   d   
0546   57                     LD   d,a   
0547   20 CB                  JR   nz,blockStart1   
0549   18 03                  JR   blockStart5   
054B                BLOCKSTART4:      
054B   15                     DEC   d   
054C   20 C6                  JR   nz,blockStart1   ; get the next element
054E                BLOCKSTART5:      
054E   60 69                  LD   hl,bc   ; hl = IP
0550   11 1C 57               LD   de,HEAP   ; is IP pointing to object in heap
0553   B7                     OR   a   ; IP - HEAP
0554   ED 52                  SBC   hl,de   
0556   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0558   28 1C                  JR   z,blockStart6   
055A   60 69                  LD   hl,bc   ; hl = IP
055C   D1                     POP   de   ; de = block*
055D   ED 43 00 57            LD   (vTemp1),bc   ; save IP
0561   B7                     OR   a   ; bc = size
0562   ED 52                  SBC   hl,de   
0564   44 4D                  LD   bc,hl   
0566   EB                     EX   de,hl   ; hl = block* de = heap*
0567   ED 5B F0 56            LD   de,(vHeapPtr)   
056B   D5                     PUSH   de   ; return hblock*
056C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
056E   ED 53 F0 56            LD   (vHeapPtr),de   ; heap* += size
0572   ED 4B 00 57            LD   bc,(vTemp1)   ; restore IP
0576                BLOCKSTART6:      
0576   0B                     DEC   bc   ; balanced, exit
0577   DD E9                  JP   (ix)   
0579                RBRACE:      
0579                BLOCKEND:      
0579   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
057C   FD 56 01               LD   d,(iy+1)   
057F   ED 53 00 57            LD   (vTemp1),de   
0583   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0586   FD 56 07               LD   d,(iy+7)   
0589   ED 53 02 57            LD   (vTemp2),de   
058D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0590   FD 56 03               LD   d,(iy+3)   
0593   EB                     EX   de,hl   
0594   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0597   FD 56 01               LD   d,(iy+1)   
059A   13                     INC   de   ; for carry flag <=
059B   B7                     OR   a   
059C   ED 52                  SBC   hl,de   
059E   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
05A0   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
05A2   FD 5D                  LD   e,iyl   
05A4   21 08 00               LD   hl,8   
05A7   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A8   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A9   18 0C                  JR   blockEnd2   
05AB                BLOCKEND1:      ; same scope
05AB   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05AE   FD 56 03               LD   d,(iy+3)   
05B1   EB                     EX   de,hl   
05B2   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05B4   FD 5D                  LD   e,iyl   
05B6   EB                     EX   de,hl   
05B7                BLOCKEND2:      
05B7   44 4D                  LD   bc,hl   ; bc = hl = BP
05B9   B7                     OR   a   ; hl = BP - SP = count
05BA   ED 72                  SBC   hl,sp   
05BC   7D                     LD   a,l   
05BD   B4                     OR   h   
05BE   28 09                  JR   z,blockEnd3   
05C0   C5                     PUSH   bc   ; bc = count, hl = BP
05C1   44 4D                  LD   bc,hl   
05C3   E1                     POP   hl   
05C4   2B                     DEC   hl   ; hl = BP-1
05C5   1B                     DEC   de   ; de = args*-1
05C6   ED B8                  LDDR      
05C8   13                     INC   de   
05C9                BLOCKEND3:      
05C9   EB                     EX   de,hl   ; sp = de = new tos*
05CA   F9                     LD   sp,hl   
05CB   ED 4B 02 57            LD   bc,(vTemp2)   
05CF   FD 2A 00 57            LD   iy,(vTemp1)   
05D3   ED 5B F2 56            LD   de,(vRecur)   ; de = recur vector
05D7   7B                     LD   a,e   ; check for NUL
05D8   B2                     OR   d   
05D9   20 02                  JR   nz,blockEnd4   
05DB   DD E9                  JP   (ix)   
05DD                BLOCKEND4:      
05DD   21 00 00               LD   hl,0   ; clear recur vector
05E0   22 F2 56               LD   (vRecur),hl   
05E3   C3 F7 0A               JP   go1   ; execute de
05E6                             ; /br break from loop
05E6                             ; --
05E6                BREAK:       
05E6   E1                     POP   hl   ; hl = condition, break if false
05E7   7D                     LD   a,l   
05E8   B4                     OR   h   
05E9   28 02                  JR   z,break1   
05EB   DD E9                  JP   (ix)   
05ED                BREAK1:      
05ED   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05EF   FD 54                  LD   d,iyh   
05F1   21 08 00               LD   hl,8   
05F4   19                     ADD   hl,de   
05F5   23                     INC   hl   
05F6   23                     INC   hl   
05F7   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05FA   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05FD   C3 79 05               JP   blockEnd   
0600                QUIT:        
0600   E1                     POP   hl   ; hl = condition, exit if true
0601   7D                     LD   a,l   
0602   B4                     OR   h   
0603   20 02                  JR   nz,quit1   
0605   DD E9                  JP   (ix)   
0607                QUIT1:       
0607   C3 79 05               JP   blockEnd   
060A                TICK:        
060A                CHAR:        
060A   21 00 00               LD   hl,0   ; if "" is empty or null
060D                CHAR1:       
060D   03                     INC   bc   ; point to next char
060E   0A                     LD   a,(bc)   
060F   FE 27                  CP   "'"   ; ' is the terminator
0611   28 09                  JR   z,char3   
0613   FE 5C                  CP   $5c   ; \ is the escape
0615   20 02                  JR   nz,char2   
0617   03                     INC   bc   
0618   0A                     LD   a,(bc)   
0619                CHAR2:       
0619   6F                     LD   l,a   
061A   18 F1                  JR   char1   
061C                CHAR3:       
061C   E5                     PUSH   hl   
061D   DD E9                  JP   (ix)   
061F                COMMENT:      
061F   03                     INC   bc   ; point to next char
0620   0A                     LD   a,(bc)   
0621   FE 20                  CP   " "   ; terminate on any char less than SP
0623   30 FA                  JR   nc,comment   
0625   0B                     DEC   bc   
0626   DD E9                  JP   (ix)   
0628                SLASH:       
0628                COMMAND:      
0628   03                     INC   bc   
0629   0A                     LD   a,(bc)   
062A   FE 2F                  CP   "/"   ; // comment
062C   28 F1                  JR   z,comment   
062E   0B                     DEC   bc   
062F   CD F3 0D               CALL   commandTable   
0632   02                     DB   lsb(command_a_)   
0633   11                     DB   lsb(command_b_)   
0634   00                     DB   lsb(command_nop_)   
0635   E9                     DB   lsb(decimal_)   
0636   00                     DB   lsb(command_nop_)   
0637   1D                     DB   lsb(command_f_)   
0638   00                     DB   lsb(command_nop_)   
0639   EC                     DB   lsb(hexadecimal_)   
063A   3B                     DB   lsb(command_i_)   
063B   00                     DB   lsb(command_nop_)   
063C   EF                     DB   lsb(key_)   
063D   47                     DB   lsb(command_l_)   
063E   50                     DB   lsb(command_m_)   
063F   00                     DB   lsb(command_nop_)   
0640   F2                     DB   lsb(output_)   
0641   59                     DB   lsb(command_p_)   
0642   62                     DB   lsb(command_q_)   
0643   6B                     DB   lsb(command_r_)   
0644   00                     DB   lsb(command_nop_)   
0645   F5                     DB   lsb(true_)   
0646   00                     DB   lsb(command_nop_)   
0647   7A                     DB   lsb(command_v_)   
0648   FB                     DB   lsb(words_)   
0649   FE                     DB   lsb(xor_)   
064A   00                     DB   lsb(command_nop_)   
064B   00                     DB   lsb(command_nop_)   
064C   9E                     DB   lsb(div_)   
064D                          ALIGN   $100   
0700                COMMANDS:      
0700                COMMAND_NOP_:      
0700   DD E9                  JP   (ix)   
0702                COMMAND_A_:      
0702   CD 0D 0E               CALL   jumpTable   
0705   62                     DB   "b"   ; /ab absolute
0706   8F 07                  DW   absolute_   
0708   64                     DB   "d"   ; /ad address of
0709   92 07                  DW   addrOf_   
070B   73                     DB   "s"   ; /as array size
070C   95 07                  DW   arraySize_   
070E   00                     DB   NUL   
070F   A1 07                  DW   error1_   
0711                COMMAND_B_:      
0711   CD 0D 0E               CALL   jumpTable   
0714   72                     DB   "r"   ; /br break
0715   98 07                  DW   break_   
0717   79                     DB   "y"   ; /by cold boot
0718   9B 07                  DW   coldStart_   
071A   00                     DB   NUL   
071B   F8 07                  DW   bytes_   ; /b bytes
071D                COMMAND_F_:      
071D   CD 0D 0E               CALL   jumpTable   
0720   65                     DB   "e"   ; /fe forEach
0721   A4 07                  DW   forEach_   
0723   6C                     DB   "l"   ; /fl flush output buffer
0724   A7 07                  DW   flush_   
0726   73                     DB   "s"   ; /fs funcSrc
0727   AA 07                  DW   funcSrc_   
0729   31                     DB   "1"   
072A   AD 07                  DW   f1_   
072C   32                     DB   "2"   
072D   B0 07                  DW   f2_   
072F   33                     DB   "3"   
0730   B3 07                  DW   f3_   
0732   34                     DB   "4"   
0733   B6 07                  DW   f4_   
0735   7A                     DB   "z"   
0736   B9 07                  DW   fz_   
0738   00                     DB   NUL   
0739   BC 07                  DW   false_   
073B                COMMAND_I_:      
073B   CD 0D 0E               CALL   jumpTable   
073E   6E                     DB   "n"   ; /in input
073F   BF 07                  DW   input_   
0741   76                     DB   "v"   ; /iv invert
0742   C2 07                  DW   invert_   
0744   00                     DB   NUL   
0745   A1 07                  DW   error1_   
0747                COMMAND_L_:      
0747   CD 0D 0E               CALL   jumpTable   
074A   69                     DB   "i"   ; /li literal
074B   C5 07                  DW   literal_   
074D   00                     DB   NUL   
074E   A1 07                  DW   error1_   
0750                COMMAND_M_:      
0750   CD 0D 0E               CALL   jumpTable   
0753   70                     DB   "p"   ; /mp map
0754   C8 07                  DW   map_   
0756   00                     DB   NUL   
0757   A1 07                  DW   error1_   
0759                COMMAND_P_:      
0759   CD 0D 0E               CALL   jumpTable   
075C   63                     DB   "c"   ; /pc print chars
075D   CB 07                  DW   printChars_   
075F   00                     DB   NUL   
0760   A1 07                  DW   error1_   
0762                COMMAND_Q_:      
0762   CD 0D 0E               CALL   jumpTable   
0765   74                     DB   "t"   ; /qt quit
0766   CE 07                  DW   quit_   
0768   00                     DB   NUL   
0769   A1 07                  DW   error1_   
076B                COMMAND_R_:      
076B   CD 0D 0E               CALL   jumpTable   
076E   63                     DB   "c"   ; /rc tail call optimisation
076F   D1 07                  DW   recur_   
0771   65                     DB   "e"   ; /re remainder
0772   D4 07                  DW   remain_   
0774   67                     DB   "g"   ; /rg range src
0775   D7 07                  DW   rangeSrc_   
0777   00                     DB   NUL   
0778   A1 07                  DW   error1_   
077A                COMMAND_V_:      
077A   CD 0D 0E               CALL   jumpTable   
077D   62                     DB   "b"   
077E   DA 07                  DW   varBufPtr_   
0780   68                     DB   "h"   
0781   DD 07                  DW   varHeapPtr_   
0783   74                     DB   "t"   
0784   E0 07                  DW   varTIBPtr_   
0786   42                     DB   "B"   
0787   E3 07                  DW   constBufStart_   
0789   54                     DB   "T"   
078A   E6 07                  DW   constTIBStart_   
078C   00                     DB   NUL   
078D   A1 07                  DW   error1_   
078F                ABSOLUTE_:      
078F   C3 E2 04               JP   absolute   
0792                ADDROF_:      
0792   C3 EF 04               JP   addrOf   
0795                ARRAYSIZE_:      
0795   C3 93 04               JP   arraySize   
0798                BREAK_:      
0798   C3 E6 05               JP   break   
079B                COLDSTART_:      
079B   C3 D4 0E               JP   coldStart   
079E                DIV_:        
079E   C3 B9 08               JP   div   
07A1                ERROR1_:      
07A1   C3 55 0A               JP   error1   
07A4                FOREACH_:      
07A4   C3 61 0A               JP   forEach   
07A7                FLUSH_:      
07A7   C3 5C 0A               JP   flush   
07AA                FUNCSRC_:      
07AA   C3 AE 0A               JP   funcSrc   
07AD                F1_:         
07AD   C3 D4 0F               JP   f1   
07B0                F2_:         
07B0   C3 E0 0F               JP   f2   
07B3                F3_:         
07B3   C3 EC 0F               JP   f3   
07B6                F4_:         
07B6   C3 F8 0F               JP   f4   
07B9                FZ_:         
07B9   C3 E9 0A               JP   fz   
07BC                FALSE_:      
07BC   C3 4F 0A               JP   false1   
07BF                INPUT_:      
07BF   C3 E2 0B               JP   input   
07C2                INVERT_:      
07C2   C3 D5 03               JP   invert   
07C5                LITERAL_:      
07C5   C3 F6 0B               JP   literal   
07C8                MAP_:        
07C8   C3 08 0C               JP   map   
07CB                PRINTCHARS_:      
07CB   C3 8C 0D               JP   printChars   
07CE                QUIT_:       
07CE   C3 00 06               JP   quit   
07D1                RECUR_:      
07D1   C3 9E 0D               JP   recur   
07D4                REMAIN_:      
07D4   C3 A4 0D               JP   remain   
07D7                RANGESRC_:      
07D7   C3 98 0C               JP   rangeSrc   
07DA                VARBUFPTR_:      
07DA   C3 B9 0D               JP   varBufPtr   
07DD                VARHEAPPTR_:      
07DD   C3 C2 0D               JP   varHeapPtr   
07E0                VARTIBPTR_:      
07E0   C3 CB 0D               JP   varTIBPtr   
07E3                CONSTBUFSTART_:      
07E3   C3 AA 0D               JP   constBufStart   
07E6                CONSTTIBSTART_:      
07E6   C3 B4 0D               JP   constTIBStart   
07E9                DECIMAL_:      
07E9   C3 CA 08               JP   decimal   
07EC                HEXADECIMAL_:      
07EC   C3 D2 08               JP   hexadecimal   
07EF                KEY_:        
07EF   C3 EF 07               JP   key_   
07F2                OUTPUT_:      
07F2   C3 FF 0B               JP   output   
07F5                TRUE_:       
07F5   C3 49 0A               JP   true1   
07F8                BYTES_:      
07F8   C3 06 08               JP   bytes   
07FB                WORDS_:      
07FB   C3 01 08               JP   words   
07FE                XOR_:        
07FE   C3 CA 03               JP   xor   
0801                             ; 
0801                WORDS:       
0801   21 02 00               LD   hl,2   
0804   18 03                  JR   bytes1   
0806                BYTES:       
0806   21 01 00               LD   hl,1   
0809                BYTES1:      
0809   22 E6 56               LD   (vDataWidth),hl   
080C   DD E9                  JP   (ix)   
080E                             ; ";" createFunc
080E                             ; arg_list* block* -- func*
080E                SEMICOLON:      
080E                CREATEFUNC:      
080E   ED 43 00 57            LD   (vTemp1),bc   ; save IP
0812   E1                     POP   hl   ; hl = block*
0813   22 02 57               LD   (vTemp2),hl   ; save block*
0816   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0819   FD 56 05               LD   d,(iy+5)   
081C   7B                     LD   a,e   ; if arg_list == null then make a func
081D   B2                     OR   d   
081E   20 09                  JR   nz,createFunc0   
0820   21 00 00               LD   hl,0   ; partial_array = null
0823   ED 5B F0 56            LD   de,(vHeapPtr)   ; de = compile*
0827   18 65                  JR   createFunc5   
0829                CREATEFUNC0:      
0829   E1                     POP   hl   ; hl = inner_arg_list*
082A   E5                     PUSH   hl   ; save inner_arg_list
082B   ED 5B F0 56            LD   de,(vHeapPtr)   ; de = compile*
082F   7E                     LD   a,(hl)   ; compile inner_num_locals
0830   4F                     LD   c,a   ; b = inner_num_locals
0831   12                     LD   (de),a   
0832   23                     INC   hl   
0833   13                     INC   de   
0834   7E                     LD   a,(hl)   ; compile inner_length
0835   12                     LD   (de),a   
0836   91                     SUB   c   ; a = inner_num args
0837   23                     INC   hl   
0838   13                     INC   de   
0839   B7                     OR   a   ; compile args if inner_length > 0
083A   28 05                  JR   z,createFunc1   
083C   4F                     LD   c,a   ; bc = a
083D   06 00                  LD   b,0   
083F   ED B0                  LDIR      
0841                CREATEFUNC1:      
0841   EB                     EX   de,hl   ; hl = outer_arg_list
0842   FD 5E 04               LD   e,(iy+4)   
0845   FD 56 05               LD   d,(iy+5)   
0848   EB                     EX   de,hl   
0849   23                     INC   hl   ; a = outer_length
084A   7E                     LD   a,(hl)   
084B   23                     INC   hl   
084C   B7                     OR   a   
084D   28 05                  JR   z,createFunc2   
084F   4F                     LD   c,a   
0850   06 00                  LD   b,0   
0852   ED B0                  LDIR      ; append outer_args
0854                CREATEFUNC2:      ; a = outer_length
0854   47                     LD   b,a   ; b = a = outer_length
0855   2A F0 56               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0858   23                     INC   hl   
0859   7E                     LD   a,(hl)   ; add outer_length to new length
085A   80                     ADD   a,b   
085B   77                     LD   (hl),a   
085C   2B                     DEC   hl   
085D   78                     LD   a,b   ; save outer_length in a'
085E   08                     EX   af,af'   
085F   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0860   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0861   B7                     OR   a   
0862   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0864   4F                     LD   c,a   ; c = inner_num_locals
0865   06 00                  LD   b,0   ; bc = inner_num_locals
0867   23                     INC   hl   ; a = inner_length
0868   7E                     LD   a,(hl)   
0869   91                     SUB   c   ; a = inner_num_args
086A   23                     INC   hl   ; hl = inner_arg_chars
086B   85                     ADD   a,l   ; hl += a
086C   6F                     LD   l,a   
086D   3E 00                  LD   a,0   
086F   84                     ADD   a,h   
0870   67                     LD   h,a   
0871   ED B0                  LDIR      ; append inner_locals
0873                CREATEFUNC2A:      
0873   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0874   12                     LD   (de),a   ; compile partial_array length field
0875   13                     INC   de   
0876   AF                     XOR   a   
0877   12                     LD   (de),a   
0878   13                     INC   de   
0879   D5                     PUSH   de   ; push partial_array*
087A   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
087B   FD 5E 02               LD   e,(iy+2)   
087E   FD 56 03               LD   d,(iy+3)   
0881   EB                     EX   de,hl   
0882                CREATEFUNC3:      
0882   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0883   4E                     LD   c,(hl)   
0884   2B                     DEC   hl   
0885   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0886   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0887   13                     INC   de   
0888   79                     LD   a,c   
0889   12                     LD   (de),a   
088A   13                     INC   de   
088B   10 F5                  DJNZ   createFunc3   ; b = outer_length
088D                CREATEFUNC4:      
088D   E1                     POP   hl   ; hl = partial_array*
088E                CREATEFUNC5:      
088E   C1                     POP   bc   ; bc = new_arg_list*
088F   D5                     PUSH   de   ; return new func*
0890   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0891   73                     LD   (hl),e   ; compile partial_array* to func
0892   23                     INC   hl   
0893   72                     LD   (hl),d   
0894   23                     INC   hl   
0895   ED 5B 02 57            LD   de,(vTemp2)   ; de = block*
0899   73                     LD   (hl),e   ; compile block* to func
089A   23                     INC   hl   
089B   72                     LD   (hl),d   
089C   23                     INC   hl   
089D   71                     LD   (hl),c   ; compile new_arg_list* to func
089E   23                     INC   hl   
089F   70                     LD   (hl),b   
08A0   23                     INC   hl   
08A1   22 F0 56               LD   (vHeapPtr),hl   ; bump heap ptr
08A4   ED 4B 00 57            LD   bc,(vTemp1)   ; restore IP
08A8   DD E9                  JP   (ix)   
08AA                             ; , discard stack item
08AA                             ; x y -- x
08AA                COMMA:       
08AA                DISCARD:      
08AA   FD 54                  LD   d,iyh   ; limit this to SP <= BP
08AC   FD 5D                  LD   e,iyl   
08AE   EB                     EX   de,hl   
08AF   B7                     OR   a   
08B0   ED 72                  SBC   hl,sp   
08B2   CB 7C                  BIT   7,h   
08B4   20 01                  JR   nz,discard1   
08B6   E1                     POP   hl   
08B7                DISCARD1:      
08B7   DD E9                  JP   (ix)   
08B9                DIV:         
08B9   D1                     POP   de   
08BA   E1                     POP   hl   
08BB   C5                     PUSH   bc   ; preserve the IP
08BC   44 4D                  LD   bc,hl   
08BE   CD 12 0A               CALL   divide   
08C1   EB                     EX   de,hl   
08C2   ED 53 F6 56            LD   (vRemain),de   
08C6   C1                     POP   bc   
08C7   C3 9B 03               JP   add3   
08CA                DECIMAL:      
08CA   21 0A 00               LD   hl,10   
08CD                DECIMAL1:      
08CD   22 E8 56               LD   (vNumBase),hl   
08D0   DD E9                  JP   (ix)   
08D2                HEXADECIMAL:      
08D2   21 10 00               LD   hl,16   
08D5   C3 CD 08               JP   decimal1   
08D8                DOT:         
08D8   CD 0D 0E               CALL   jumpTable   
08DB   61                     DB   "a"   ; .a print array
08DC   EA 08                  DW   dotArray   
08DE   63                     DB   "c"   ; .c print char
08DF   F1 09                  DW   dotChar   
08E1   73                     DB   "s"   ; .s print string
08E2   D7 09                  DW   dotString   
08E4   78                     DB   "x"   ; .x print x chars
08E5   F6 09                  DW   dotXChars   
08E7   00                     DB   NUL   ; .  print number
08E8   32 09                  DW   dotNumber   
08EA                          ;*Macro unroll: FUNC dotArray, 2, "abc"
08EA                DOTARRAY:      
08EA   CD F6 0A               CALL   go   
08ED   00 00                  DW   NUL   
08EF   F8 08                  DW   dotArrayM_1706S1235   
08F1   F3 08                  DW   $+2   
08F3   02                     DB   2   
08F4   03 61 62 63            .PSTR   "abc"   
08F8                DOTARRAYM_1706S1235:      
08F8   7B                     DB   "{"   
08F9   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
0930   7D                     DB   "}"   
0931   00                     DB   0   
0932                             ; /bd buffer decimal
0932                             ; value --
0932                DOTNUMBER:      
0932   3A E8 56               LD   a,(vNumBase)   
0935   FE 10                  CP   16   
0937   28 66                  JR   z,bufferHex   ; else falls through
0939                             ; /bd buffer decimal
0939                             ; value --
0939                BUFFERDEC:      
0939   ED 5B EC 56            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
093D   D9                     EXX      
093E   E1                     POP   hl   ; hl = value
093F   CD 53 09               CALL   bufferDec0   
0942   D9                     EXX      ; de = buffer*' bc = IP
0943   3E 20                  LD   a," "   ; append space to buffer
0945   12                     LD   (de),a   
0946   1C                     INC   e   ; buffer*++, wraparound
0947   CC DC 0D               CALL   z,flushBuffer   
094A   2A EC 56               LD   hl,(vBufPtr)   ; hl = buffer*
094D   ED 53 EC 56            LD   (vBufPtr),de   ; update buffer* with buffer*'
0951   DD E9                  JP   (ix)   
0953                             ; hl = value
0953                             ; de' = buffer*
0953                             ; a, bc, de, hl destroyed
0953                BUFFERDEC0:      
0953   CB 7C                  BIT   7,h   
0955   28 0C                  JR   z,bufferDec1   
0957   D9                     EXX      
0958   3E 2D                  LD   a,"-"   
095A   12                     LD   (de),a   
095B   13                     INC   de   
095C   D9                     EXX      
095D   AF                     XOR   a   
095E   95                     SUB   l   
095F   6F                     LD   l,a   
0960   9F                     SBC   a,a   
0961   94                     SUB   h   
0962   67                     LD   h,a   
0963                BUFFERDEC1:      
0963   0E 00                  LD   c,0   ; leading zeros flag = false
0965   11 F0 D8               LD   de,-10000   
0968   CD 83 09               CALL   bufferDec2   
096B   11 18 FC               LD   de,-1000   
096E   CD 83 09               CALL   bufferDec2   
0971   11 9C FF               LD   de,-100   
0974   CD 83 09               CALL   bufferDec2   
0977   1E F6                  LD   e,-10   
0979   CD 83 09               CALL   bufferDec2   
097C   0C                     INC   c   ; flag = true for at least digit
097D   1E FF                  LD   e,-1   
097F   CD 83 09               CALL   bufferDec2   
0982   C9                     RET      
0983                BUFFERDEC2:      
0983   06 2F                  LD   b,"0"-1   
0985                BUFFERDEC3:      
0985   04                     INC   b   
0986   19                     ADD   hl,de   
0987   38 FC                  JR   c,bufferDec3   
0989   ED 52                  SBC   hl,de   
098B   3E 30                  LD   a,"0"   
098D   B8                     CP   b   
098E   20 05                  JR   nz,bufferDec4   
0990   AF                     XOR   a   
0991   B1                     OR   c   
0992   C8                     RET   z   
0993   18 01                  JR   bufferDec5   
0995                BUFFERDEC4:      
0995   0C                     INC   c   
0996                BUFFERDEC5:      
0996   78                     LD   a,b   
0997   D9                     EXX      
0998   12                     LD   (de),a   
0999   1C                     INC   e   
099A   CC DC 0D               CALL   z,flushBuffer   
099D   D9                     EXX      
099E   C9                     RET      
099F                             ; /bh buffer hex
099F                             ; value --
099F                BUFFERHEX:      
099F   E1                     POP   hl   ; hl = value
09A0   ED 5B EC 56            LD   de,(vBufPtr)   
09A4   3E 24                  LD   a,"$"   ; # prefix
09A6   12                     LD   (de),a   
09A7   1C                     INC   e   ; buffer*++, wraparound
09A8   CC DC 0D               CALL   z,flushBuffer   
09AB   7C                     LD   a,h   
09AC   CD C0 09               CALL   bufferHex1   
09AF   7D                     LD   a,l   
09B0   CD C0 09               CALL   bufferHex1   
09B3   3E 20                  LD   a," "   ; append space to buffer
09B5   12                     LD   (de),a   
09B6   1C                     INC   e   ; buffer*++, wraparound
09B7   CC DC 0D               CALL   z,flushBuffer   
09BA   ED 53 EC 56            LD   (vBufPtr),de   
09BE   DD E9                  JP   (ix)   
09C0                BUFFERHEX1:      
09C0   F5                     PUSH   af   
09C1   1F                     RRA      
09C2   1F                     RRA      
09C3   1F                     RRA      
09C4   1F                     RRA      
09C5   CD C9 09               CALL   bufferHex2   
09C8   F1                     POP   af   
09C9                BUFFERHEX2:      
09C9   E6 0F                  AND   0x0F   
09CB   C6 90                  ADD   a,0x90   
09CD   27                     DAA      
09CE   CE 40                  ADC   a,0x40   
09D0   27                     DAA      
09D1   12                     LD   (de),a   
09D2   1C                     INC   e   ; buffer*++, wraparound
09D3   CC DC 0D               CALL   z,flushBuffer   
09D6   C9                     RET      
09D7                             ; /bs buffered string
09D7                             ; string* --
09D7                DOTSTRING:      
09D7   E1                     POP   hl   ; hl = string*
09D8   ED 5B EC 56            LD   de,(vBufPtr)   ; de = buffer*
09DC   18 06                  JR   dotString1   
09DE                DOTSTRING0:      
09DE   12                     LD   (de),a   ; a -> buffer*
09DF   1C                     INC   e   ; buffer*++, wraparound
09E0   CC DC 0D               CALL   z,flushBuffer   
09E3   23                     INC   hl   
09E4                DOTSTRING1:      
09E4   7E                     LD   a,(hl)   ; a <- string*
09E5   B7                     OR   a   ; if NUL exit loop
09E6   20 F6                  JR   nz,dotString0   
09E8   2A EC 56               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09EB   ED 53 EC 56            LD   (vBufPtr),de   ; save buffer*' in pointer
09EF   DD E9                  JP   (ix)   
09F1                             ; /bc buffer char
09F1                             ; char --
09F1                DOTCHAR:      
09F1   21 01 00               LD   hl,1   
09F4   18 01                  JR   dotXChars0   
09F6                             ; /bx buffered x chars
09F6                             ; char length --
09F6                DOTXCHARS:      
09F6   E1                     POP   hl   ; hl = length
09F7                DOTXCHARS0:      
09F7   D1                     POP   de   ; a' = char
09F8   7B                     LD   a,e   
09F9   08                     EX   af,af'   
09FA   ED 5B EC 56            LD   de,(vBufPtr)   ; de = buffer*
09FE   18 08                  JR   dotXChars2   
0A00                DOTXCHARS1:      
0A00   08                     EX   af,af'   
0A01   12                     LD   (de),a   
0A02   08                     EX   af,af'   
0A03   1C                     INC   e   ; buffer*++, wraparound
0A04   CC DC 0D               CALL   z,flushBuffer   
0A07   2B                     DEC   hl   
0A08                DOTXCHARS2:      
0A08   7D                     LD   a,l   
0A09   B4                     OR   h   
0A0A   20 F4                  JR   nz,dotXChars1   
0A0C   ED 53 EC 56            LD   (vBufPtr),de   ; save buffer*'
0A10   DD E9                  JP   (ix)   
0A12                             ; division subroutine.
0A12                             ; bc: divisor, de: dividend, hl: remainder
0A12                DIVIDE:      
0A12   21 00 00               LD   hl,0   ; zero the remainder
0A15   3E 10                  LD   a,16   ; loop counter
0A17                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0A17   CB 21                  SLA   c   
0A19   CB 10                  RL   b   
0A1B   ED 6A                  ADC   hl,hl   
0A1D   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A1F   38 03                  JR   c,divide2   
0A21   0C                     INC   c   
0A22   18 01                  JR   divide3   
0A24                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A24   19                     ADD   hl,de   
0A25                DIVIDE3:      
0A25   3D                     DEC   a   
0A26   20 EF                  JR   nz,divide1   
0A28   50 59                  LD   de,bc   ; result from bc to de
0A2A   C9                     RET      
0A2B                             ; hl = value1, de = value2
0A2B                             ; hl = result
0A2B                EQUALS:      
0A2B   B7                     OR   a   ; reset the carry flag
0A2C   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0A2E   28 19                  JR   z,true1   
0A30   C3 4F 0A               JP   false1   
0A33                NOTEQUALS:      
0A33   B7                     OR   a   ; reset the carry flag
0A34   ED 52                  SBC   hl,de   
0A36   C2 49 0A               JP   nz,true1   
0A39   C3 4F 0A               JP   false1   
0A3C                             ; hl = value1 de = value2
0A3C                             ; hl = result
0A3C                LESSTHANEQ:      
0A3C   B7                     OR   a   
0A3D   ED 52                  SBC   hl,de   
0A3F   18 05                  JR   lessthan1   
0A41                             ; hl = value1 de = value2
0A41                             ; hl = result
0A41                LESSTHAN:      
0A41   B7                     OR   a   
0A42   ED 52                  SBC   hl,de   
0A44   28 09                  JR   z,false1   
0A46                LESSTHAN1:      
0A46   FA 4F 0A               JP   m,false1   
0A49                TRUE1:       
0A49   21 FF FF               LD   hl,TRUE   
0A4C   E5                     PUSH   hl   
0A4D   DD E9                  JP   (ix)   
0A4F                NULL1:       
0A4F                FALSE1:      
0A4F   21 00 00               LD   hl,FALSE   
0A52   E5                     PUSH   hl   
0A53   DD E9                  JP   (ix)   
0A55                ERROR1:      
0A55   21 01 00               LD   hl,1   ; error 1: unknown command
0A58   E5                     PUSH   hl   
0A59   C3 8C 0F               JP   error   
0A5C                             ; /fl flush
0A5C                             ; --
0A5C                FLUSH:       
0A5C   CD DC 0D               CALL   flushBuffer   
0A5F   DD E9                  JP   (ix)   
0A61                             ; /fe forEach
0A61                             ; src proc --
0A61                          ;*Macro unroll: FUNC forEach, 1, "spT"
0A61                FOREACH:      
0A61   CD F6 0A               CALL   go   
0A64   00 00                  DW   NUL   
0A66   6F 0A                  DW   forEachM_1936S1483   
0A68   6A 0A                  DW   $+2   
0A6A   01                     DB   1   
0A6B   03 73 70 54            .PSTR   "spT"   
0A6F                FOREACHM_1936S1483:      
0A6F   7B                     DB   "{"   
0A70   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A76   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
0A7A   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0A80   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A85   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A97   3F 3F                  DB   "??"   ; ifte:
0A99   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0AA2   7D 3F                  DB   "}?"   
0AA4   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0AAC   7D                     DB   "}"   
0AAD   00                     DB   0   
0AAE                             ; ; /fs funcSrc
0AAE                             ; ; func -- src
0AAE                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0AAE                FUNCSRC:      ; :f func or block
0AAE   CD F6 0A               CALL   go   
0AB1   00 00                  DW   NUL   
0AB3   BA 0A                  DW   funcSrcM_1951S1499   
0AB5   B7 0A                  DW   $+2   
0AB7   00                     DB   0   
0AB8   01 66                  .PSTR   "f"   
0ABA                FUNCSRCM_1951S1499:      
0ABA   7B                     DB   "{"   
0ABB   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0ABF   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0AC7   3A 64 74 7B            DB   ":dt{"   
0ACB   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0ADD   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0AE5   7D 3B                  DB   "};"   
0AE7   7D                     DB   "}"   
0AE8   00                     DB   0   
0AE9                FZ:          
0AE9   21 00 54               LD   hl,STACK   
0AEC   ED 72                  SBC   hl,sp   
0AEE   CB 3C                  SRL   h   
0AF0   CB 1D                  RR   l   
0AF2   E5                     PUSH   hl   
0AF3   C3 32 09               JP   dotNumber   
0AF6                             ; execute a block of code which ends with }
0AF6                             ; creates a root scope if BP == stack
0AF6                             ; else uses outer scope
0AF6                CARET:       
0AF6                GO:          
0AF6   D1                     POP   de   ; de = block*
0AF7                GO1:         
0AF7   7B                     LD   a,e   ; if block* == null, exit
0AF8   B2                     OR   d   
0AF9   20 02                  JR   nz,go2   
0AFB   DD E9                  JP   (ix)   
0AFD                GO2:         
0AFD   1A                     LD   a,(de)   
0AFE   FE 7B                  CP   "{"   
0B00   28 06                  JR   z,goBlock   
0B02   FE 28                  CP   "("   
0B04   C2 3B 0B               JP   nz,goFunc   
0B07   D5                     PUSH   de   ; push de just before stack frame
0B08                GOBLOCK:      
0B08   ED 53 00 57            LD   (vTemp1),de   ; save de
0B0C   21 00 54               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0B0F   FD 54                  LD   d,iyh   
0B11   FD 5D                  LD   e,iyl   
0B13   B7                     OR   a   ; if stack* == BP then this is the root_scope
0B14   ED 52                  SBC   hl,de   
0B16   ED 5B 00 57            LD   de,(vTemp1)   ; restore de
0B1A   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0B1B   B4                     OR   h   
0B1C   3E 00                  LD   a,0   
0B1E   28 6A                  JR   z,goFunc8   
0B20   C5                     PUSH   bc   ; push IP
0B21   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0B24   FD 46 05               LD   b,(iy+5)   
0B27   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0B2A   FD 66 03               LD   h,(iy+3)   
0B2D                GOBLOCK2:      
0B2D   C5                     PUSH   bc   ; arg_list*
0B2E   E5                     PUSH   hl   ; first_arg*
0B2F   FD E5                  PUSH   iy   ; push BP
0B31   FD 21 00 00            LD   iy,0   ; BP = SP
0B35   FD 39                  ADD   iy,sp   
0B37                GOBLOCK3:      
0B37   42 4B                  LD   bc,de   ; bc = de = block*-1
0B39   DD E9                  JP   (ix)   
0B3B                GOFUNC:      ; execute func
0B3B   EB                     EX   de,hl   ; hl = func*
0B3C   5E                     LD   e,(hl)   ; de = partial_array*
0B3D   23                     INC   hl   
0B3E   56                     LD   d,(hl)   
0B3F   23                     INC   hl   
0B40   7B                     LD   a,e   ; if partial_array* == null skip
0B41   B2                     OR   d   
0B42   28 21                  JR   z,goFunc3   
0B44   ED 43 00 57            LD   (vTemp1),bc   
0B48   22 02 57               LD   (vTemp2),hl   ; save bc,hl
0B4B   EB                     EX   de,hl   ; hl = partial_array*
0B4C   2B                     DEC   hl   ; bc = count
0B4D   46                     LD   b,(hl)   
0B4E   2B                     DEC   hl   
0B4F   4E                     LD   c,(hl)   
0B50   23                     INC   hl   ; hl = array data*
0B51   23                     INC   hl   
0B52   18 06                  JR   goFunc2   ; push each item on stack
0B54                GOFUNC1:      
0B54   5E                     LD   e,(hl)   ; de = partial item
0B55   23                     INC   hl   
0B56   56                     LD   d,(hl)   
0B57   23                     INC   hl   
0B58   D5                     PUSH   de   ; push on stack
0B59   0B                     DEC   bc   
0B5A                GOFUNC2:      
0B5A   79                     LD   a,c   ; if count != 0 then loop
0B5B   B0                     OR   b   
0B5C   20 F6                  JR   nz,goFunc1   
0B5E   ED 4B 00 57            LD   bc,(vTemp1)   ; restore bc
0B62   2A 02 57               LD   hl,(vTemp2)   ; restore hl
0B65                GOFUNC3:      
0B65   5E                     LD   e,(hl)   ; de = block*
0B66   23                     INC   hl   
0B67   56                     LD   d,(hl)   
0B68   23                     INC   hl   
0B69   ED 53 00 57            LD   (vTemp1),de   ; save block*
0B6D   5E                     LD   e,(hl)   ; de = arg_list*
0B6E   23                     INC   hl   
0B6F   56                     LD   d,(hl)   
0B70   23                     INC   hl   
0B71   EB                     EX   de,hl   ; hl = arg_list*
0B72   ED 5B 00 57            LD   de,(vTemp1)   ; restore de = block*
0B76   7D                     LD   a,l   ; if arg_list* == null a = 0
0B77   B4                     OR   h   
0B78   20 03                  JR   nz,goFunc4   
0B7A   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0B7B   18 0D                  JR   goFunc8   
0B7D                GOFUNC4:      ; allocate locals
0B7D   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0B7E   18 03                  JR   goFunc6   
0B80                GOFUNC5:      ; loop
0B80   3B                     DEC   sp   
0B81   3B                     DEC   sp   
0B82   3D                     DEC   a   
0B83                GOFUNC6:      
0B83   B7                     OR   a   
0B84   20 FA                  JR   nz,goFunc5   ; end loop
0B86                GOFUNC7:      
0B86   23                     INC   hl   ; a = num_args* x 2
0B87   7E                     LD   a,(hl)   
0B88   2B                     DEC   hl   
0B89   87                     ADD   a,a   ; a *= 2
0B8A                GOFUNC8:      
0B8A   C5                     PUSH   bc   ; push IP
0B8B   44 4D                  LD   bc,hl   
0B8D   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0B90   85                     ADD   a,l   
0B91   6F                     LD   l,a   
0B92   39                     ADD   hl,sp   
0B93   18 98                  JR   goBlock2   
0B95                DOLLAR:      
0B95                HEXNUM:      
0B95   21 00 00               LD   hl,0   ; Clear hl to accept the number
0B98                HEXNUM1:      
0B98   03                     INC   bc   
0B99   0A                     LD   a,(bc)   ; Get the character which is a numeral
0B9A   CB 77                  BIT   6,a   ; is it uppercase alpha?
0B9C   28 02                  JR   z,hexnum2   ; no a decimal
0B9E   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BA0                HEXNUM2:      
0BA0   D6 30                  SUB   $30   ; form decimal digit
0BA2   DA 8A 0C               JP   c,num2   
0BA5   FE 10                  CP   $0F+1   
0BA7   D2 8A 0C               JP   nc,num2   
0BAA   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BAB   29                     ADD   hl,hl   ; 4X
0BAC   29                     ADD   hl,hl   ; 8X
0BAD   29                     ADD   hl,hl   ; 16X
0BAE   85                     ADD   a,l   ; add into bottom of hl
0BAF   6F                     LD   l,a   
0BB0   18 E6                  JR   hexnum1   
0BB2                UPCASE:      
0BB2   0A                     LD   a,(bc)   ; a = identifier char
0BB3   D6 41                  SUB   "A"   ; "A" = 0
0BB5   18 05                  JR   ident1   
0BB7                LOWCASE:      
0BB7   0A                     LD   a,(bc)   
0BB8   D6 61                  SUB   "a"   
0BBA   C6 1A                  ADD   a,26   
0BBC                IDENT1:      
0BBC   87                     ADD   a,a   ; l = a * 2
0BBD   6F                     LD   l,a   
0BBE   26 56                  LD   h,msb(vars)   
0BC0   22 F4 56               LD   (vPointer),hl   ; store address in setter
0BC3   5E                     LD   e,(hl)   
0BC4   23                     INC   hl   
0BC5   56                     LD   d,(hl)   
0BC6   D5                     PUSH   de   
0BC7   DD E9                  JP   (ix)   
0BC9                             ; if
0BC9                             ; condition then -- value
0BC9                QUESTION:      
0BC9                IF:          
0BC9   03                     INC   bc   
0BCA   0A                     LD   a,(bc)   
0BCB   FE 3F                  CP   "?"   
0BCD   28 06                  JR   z,ifte   
0BCF   0B                     DEC   bc   
0BD0   11 00 00               LD   de,NUL   ; NUL pointer for else
0BD3   18 01                  JR   ifte1   
0BD5                             ; ifte
0BD5                             ; condition then else -- value
0BD5                IFTE:        
0BD5   D1                     POP   de   ; de = else
0BD6                IFTE1:       
0BD6   E1                     POP   hl   ; hl = then
0BD7   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BD8   7C                     LD   a,h   
0BD9   B5                     OR   l   
0BDA   E1                     POP   hl   ; hl = then
0BDB   CA F7 0A               JP   z,go1   ; if z de = else
0BDE   EB                     EX   de,hl   ; condition = false, de = then
0BDF   C3 F7 0A               JP   go1   
0BE2                             ; Z80 port input
0BE2                             ; port -- value
0BE2                INPUT:       
0BE2   E1                     POP   hl   
0BE3   59                     LD   e,c   ; save IP
0BE4   4D                     LD   c,l   
0BE5   ED 68                  IN   l,(c)   
0BE7   26 00                  LD   h,0   
0BE9   4B                     LD   c,e   ; restore IP
0BEA   E5                     PUSH   hl   
0BEB   DD E9                  JP   (ix)   
0BED                KEY:         
0BED   CD 81 00               CALL   getchar   
0BF0   26 00                  LD   h,0   
0BF2   6F                     LD   l,a   
0BF3   E5                     PUSH   hl   
0BF4   DD E9                  JP   (ix)   
0BF6                             ; /li literal
0BF6                             ; low level operation
0BF6                             ; reads the next two bytes and
0BF6                             ; pushes a word on the stack
0BF6                             ; -- value
0BF6                LITERAL:      
0BF6   03                     INC   bc   
0BF7   0A                     LD   a,(bc)   
0BF8   6F                     LD   l,a   
0BF9   03                     INC   bc   
0BFA   0A                     LD   a,(bc)   
0BFB   67                     LD   h,a   
0BFC   E5                     PUSH   hl   
0BFD   DD E9                  JP   (ix)   
0BFF                             ; Z80 port output
0BFF                             ; value port --
0BFF                OUTPUT:      
0BFF   E1                     POP   hl   
0C00   59                     LD   e,c   ; save IP
0C01   4D                     LD   c,l   
0C02   E1                     POP   hl   
0C03   ED 69                  OUT   (c),l   
0C05   4B                     LD   c,e   ; restore IP
0C06   DD E9                  JP   (ix)   
0C08                             ; /mp map
0C08                             ; src func -- src1
0C08                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
0C08                MAP:         ; map
0C08   CD F6 0A               CALL   go   
0C0B   00 00                  DW   NUL   
0C0D   15 0C                  DW   mapM_2190S1750   
0C0F   11 0C                  DW   $+2   
0C11   00                     DB   0   
0C12   02 73 66               .PSTR   "sf"   
0C15                MAPM_2190S1750:      
0C15   7B                     DB   "{"   
0C16   3A 6B 74 7B            DB   ":kt{"   
0C1A   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0C22   3A 64 74 7B            DB   ":dt{"   ; call source with tb
0C26   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0C2B   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0C37   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0C40   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0C48   7D 3B                  DB   "};"   
0C4A   7D                     DB   "}"   
0C4B   00                     DB   0   
0C4C                STAR:        
0C4C                MUL:         
0C4C   D1                     POP   de   ; get first value
0C4D   E1                     POP   hl   
0C4E                MUL2:        
0C4E   C5                     PUSH   bc   ; Preserve the IP
0C4F   44 4D                  LD   bc,hl   ; bc = 2nd value
0C51   21 00 00               LD   hl,0   
0C54   3E 10                  LD   a,16   
0C56                MUL3:        
0C56   29                     ADD   hl,hl   
0C57   CB 13                  RL   e   
0C59   CB 12                  RL   d   
0C5B   30 04                  JR   nc,$+6   
0C5D   09                     ADD   hl,bc   
0C5E   30 01                  JR   nc,$+3   
0C60   13                     INC   de   
0C61   3D                     DEC   a   
0C62   20 F2                  JR   nz,mul3   
0C64   C1                     POP   bc   ; Restore the IP
0C65   C3 9B 03               JP   add3   
0C68                NUM:         
0C68   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C6B   0A                     LD   a,(bc)   ; Get numeral or -
0C6C   FE 2D                  CP   "-"   
0C6E   20 01                  JR   nz,num0   
0C70   03                     INC   bc   ; move to next char, no flags affected
0C71                NUM0:        
0C71   08                     EX   af,af'   ; save zero flag = 0 for later
0C72                NUM1:        
0C72   0A                     LD   a,(bc)   ; read digit
0C73   D6 30                  SUB   "0"   ; less than 0?
0C75   38 13                  JR   c,num2   ; not a digit, exit loop
0C77   FE 0A                  CP   10   ; greater that 9?
0C79   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C7B   03                     INC   bc   ; inc IP
0C7C   54 5D                  LD   de,hl   ; multiply hl * 10
0C7E   29                     ADD   hl,hl   
0C7F   29                     ADD   hl,hl   
0C80   19                     ADD   hl,de   
0C81   29                     ADD   hl,hl   
0C82   85                     ADD   a,l   ; add digit in a to hl
0C83   6F                     LD   l,a   
0C84   3E 00                  LD   a,0   
0C86   8C                     ADC   a,h   
0C87   67                     LD   h,a   
0C88   18 E8                  JR   num1   
0C8A                NUM2:        
0C8A   0B                     DEC   bc   
0C8B   08                     EX   af,af'   ; restore zero flag
0C8C   20 07                  JR   nz,num3   
0C8E   EB                     EX   de,hl   ; negate the value of hl
0C8F   21 00 00               LD   hl,0   
0C92   B7                     OR   a   ; jump to sub2
0C93   ED 52                  SBC   hl,de   
0C95                NUM3:        
0C95   E5                     PUSH   hl   ; Put the number on the stack
0C96   DD E9                  JP   (ix)   ; and process the next character
0C98                             ; /rg rangeSrc
0C98                             ; begin end step -- src
0C98                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0C98                RANGESRC:      ; range source (begin end step)
0C98   CD F6 0A               CALL   go   
0C9B   00 00                  DW   NUL   
0C9D   A7 0C                  DW   rangeSrcM_2262S1825   
0C9F   A1 0C                  DW   $+2   
0CA1   01                     DB   1   
0CA2   04 62 65 73 4C         .PSTR   "besL"   
0CA7                RANGESRCM_2262S1825:      
0CA7   7B                     DB   "{"   
0CA8   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0CB3   3A 6B 74 7B            DB   ":kt{"   
0CB7   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0CBF   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0CC5   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
0CCC   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0CD4   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0CE3   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0CEB   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0CF2   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0D06   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0D0E   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0D16   7D 3B                  DB   "};"   
0D18   7D                     DB   "}"   
0D19   00                     DB   0   
0D1A                RPAREN:      
0D1A   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0D1D   FD 46 09               LD   b,(iy+9)   
0D20   DD E9                  JP   (ix)   
0D22                             ; shiftLeft
0D22                             ; value count -- value2          shift left count places
0D22                SHIFTLEFT:      
0D22   50 59                  LD   de,bc   ; save IP
0D24   C1                     POP   bc   ; bc = count
0D25   41                     LD   b,c   ; b = loop counter
0D26   E1                     POP   hl   
0D27   04                     INC   b   ; test for counter=0 case
0D28   18 01                  JR   shiftLeft2   
0D2A                SHIFTLEFT1:      
0D2A   29                     ADD   hl,hl   ; left shift hl
0D2B                SHIFTLEFT2:      
0D2B   10 FD                  DJNZ   shiftLeft1   
0D2D   E5                     PUSH   hl   
0D2E   42 4B                  LD   bc,de   ; restore IP
0D30   DD E9                  JP   (ix)   
0D32                             ; shiftRight
0D32                             ; value count -- value2          shift left count places
0D32                SHIFTRIGHT:      
0D32   50 59                  LD   de,bc   ; save IP
0D34   C1                     POP   bc   ; bc = count
0D35   41                     LD   b,c   ; b = loop counter
0D36   E1                     POP   hl   
0D37   04                     INC   b   ; test for counter=0 case
0D38   18 04                  JR   shiftRight2   
0D3A                SHIFTRIGHT1:      
0D3A   CB 3C                  SRL   h   ; right shift hl
0D3C   CB 1D                  RR   l   
0D3E                SHIFTRIGHT2:      
0D3E   10 FA                  DJNZ   shiftRight1   
0D40   E5                     PUSH   hl   
0D41   42 4B                  LD   bc,de   ; restore IP
0D43   DD E9                  JP   (ix)   
0D45                             ; string
0D45                             ; -- ptr                        ; points to start of string chars,
0D45                             ; length is stored at start - 2 bytes
0D45                DQUOTE:      
0D45                STRING:      
0D45   2A F0 56               LD   hl,(vHeapPtr)   ; hl = heap*
0D48   23                     INC   hl   ; skip length field to start
0D49   23                     INC   hl   
0D4A   E5                     PUSH   hl   ; save start of string
0D4B   03                     INC   bc   ; point to next char
0D4C   18 03                  JR   string2   
0D4E                STRING1:      
0D4E   77                     LD   (hl),a   
0D4F   23                     INC   hl   ; increase count
0D50   03                     INC   bc   ; point to next char
0D51                STRING2:      
0D51   0A                     LD   a,(bc)   
0D52   FE 22                  CP   DQ   ; " is the string terminator
0D54   28 04                  JR   z,string3   
0D56   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0D58   20 F4                  JR   nz,string1   
0D5A                STRING3:      
0D5A   AF                     XOR   a   ; write NUL to terminate string
0D5B   77                     LD   (hl),a   ; hl = end of string
0D5C   23                     INC   hl   
0D5D   22 F0 56               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D60   2B                     DEC   hl   ; hl = end of string without terminator
0D61   D1                     POP   de   ; de = start of string
0D62   D5                     PUSH   de   ; return start of string
0D63   B7                     OR   a   ; hl = length bytes, de = start of string
0D64   ED 52                  SBC   hl,de   
0D66   EB                     EX   de,hl   
0D67   2B                     DEC   hl   ; write length bytes to length field at start - 2
0D68   72                     LD   (hl),d   
0D69   2B                     DEC   hl   
0D6A   73                     LD   (hl),e   
0D6B   DD E9                  JP   (ix)   
0D6D                MINUS:       ; negative sign or subtract
0D6D   03                     INC   bc   ; check if sign of a number
0D6E   0A                     LD   a,(bc)   
0D6F   0B                     DEC   bc   
0D70   FE 30                  CP   "0"   
0D72   38 05                  JR   c,sub   
0D74   FE 3A                  CP   "9"+1   
0D76   DA 44 03               JP   c,num_   
0D79                SUB:         ; Subtract the value 2nd on stack from top of stack
0D79   03                     INC   bc   
0D7A   FE 2D                  CP   "-"   
0D7C   20 05                  JR   nz,sub1   
0D7E   E1                     POP   hl   
0D7F   2B                     DEC   hl   
0D80   C3 D3 04               JP   assign0   
0D83                SUB1:        
0D83   0B                     DEC   bc   
0D84   D1                     POP   de   
0D85   E1                     POP   hl   
0D86   B7                     OR   a   
0D87   ED 52                  SBC   hl,de   
0D89   C3 9B 03               JP   add3   
0D8C                             ; /pc printChars
0D8C                             ; char* len --
0D8C                PRINTCHARS:      
0D8C   E1                     POP   hl   ; hl = count
0D8D   D1                     POP   de   ; de = char*
0D8E   CD 99 0D               CALL   printChars2   
0D91   DD E9                  JP   (ix)   
0D93                PRINTCHARS1:      
0D93   1A                     LD   a,(de)   ; print char at char*
0D94   CD 85 00               CALL   putchar   
0D97   13                     INC   de   ; char*++
0D98   2B                     DEC   hl   ; count--
0D99                PRINTCHARS2:      
0D99   7D                     LD   a,l   ; count == 0?
0D9A   B4                     OR   h   
0D9B   C8                     RET   z   
0D9C   18 F5                  JR   printChars1   ; if not loop
0D9E                RECUR:       
0D9E   E1                     POP   hl   
0D9F   22 F2 56               LD   (vRecur),hl   
0DA2   DD E9                  JP   (ix)   
0DA4                REMAIN:      
0DA4   2A F6 56               LD   hl,(vRemain)   
0DA7   E5                     PUSH   hl   
0DA8   DD E9                  JP   (ix)   
0DAA                CONSTBUFSTART:      
0DAA   11 00 55               LD   de,BUF   
0DAD   18 28                  JR   constant   
0DAF                CONSTHEAPSTART:      
0DAF   11 1C 57               LD   de,HEAP   
0DB2   18 23                  JR   constant   
0DB4                CONSTTIBSTART:      
0DB4   11 00 54               LD   de,TIB   
0DB7   18 1E                  JR   constant   
0DB9                VARBUFPTR:      
0DB9   ED 5B EC 56            LD   de,(vBufPtr)   
0DBD   21 EC 56               LD   hl,vBufPtr   
0DC0   18 12                  JR   variable   
0DC2                VARHEAPPTR:      
0DC2   ED 5B F0 56            LD   de,(vHeapPtr)   
0DC6   21 F0 56               LD   hl,vHeapPtr   
0DC9   18 09                  JR   variable   
0DCB                VARTIBPTR:      
0DCB   ED 5B EA 56            LD   de,(vTIBPtr)   
0DCF   21 EA 56               LD   hl,vTIBPtr   
0DD2   18 00                  JR   variable   
0DD4                VARIABLE:      
0DD4   22 F4 56               LD   (vPointer),hl   
0DD7                CONSTANT:      
0DD7   D5                     PUSH   de   
0DD8   DD E9                  JP   (ix)   
0DDA                             ; 
0DDA                FILTER:      
0DDA                SCAN:        
0DDA   DD E9                  JP   (ix)   
0DDC                             ;*******************************************************************
0DDC                             ; general routines
0DDC                             ;*******************************************************************
0DDC                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0DDC                FLUSHBUFFER:      
0DDC   F5                     PUSH   af   
0DDD   D5                     PUSH   de   
0DDE   E5                     PUSH   hl   
0DDF   2A EC 56               LD   hl,(vBufPtr)   
0DE2   11 00 55               LD   de,BUF   
0DE5   ED 53 EC 56            LD   (vBufPtr),de   
0DE9   B7                     OR   a   
0DEA   ED 52                  SBC   hl,de   
0DEC   CD 99 0D               CALL   printChars2   
0DEF   E1                     POP   hl   
0DF0   D1                     POP   de   
0DF1   F1                     POP   af   
0DF2   C9                     RET      
0DF3                COMMANDTABLE:      
0DF3   03                     INC   bc   
0DF4   0A                     LD   a,(bc)   
0DF5   FE 7B                  CP   "z"+1   
0DF7   30 0F                  JR   nc,commandTable2   
0DF9   D6 61                  SUB   "a"   
0DFB   38 0B                  JR   c,commandTable2   
0DFD                COMMANDTABLE1:      
0DFD   E1                     POP   hl   
0DFE   85                     ADD   a,l   
0DFF   6F                     LD   l,a   
0E00   3E 00                  LD   a,0   
0E02   8C                     ADC   a,h   
0E03   67                     LD   h,a   
0E04   6E                     LD   l,(hl)   
0E05   26 07                  LD   h,msb(COMMANDS)   
0E07   E9                     JP   (hl)   
0E08                COMMANDTABLE2:      
0E08   3E 1A                  LD   a,26   
0E0A   0B                     DEC   bc   
0E0B   18 F0                  JR   commandTable1   
0E0D                             ; followed by a table
0E0D                             ; db char
0E0D                             ; dw addr
0E0D                             ; the final item must have char == NUL
0E0D                JUMPTABLE:      
0E0D   03                     INC   bc   
0E0E   E1                     POP   hl   
0E0F                JUMPTABLE0:      
0E0F   AF                     XOR   a   
0E10   BE                     CP   (hl)   
0E11   28 09                  JR   z,jumpTable1   
0E13   0A                     LD   a,(bc)   
0E14   BE                     CP   (hl)   
0E15   28 06                  JR   z,jumpTable2   
0E17   23                     INC   hl   
0E18   23                     INC   hl   
0E19   23                     INC   hl   
0E1A   18 F3                  JR   jumpTable0   
0E1C                JUMPTABLE1:      
0E1C   0B                     DEC   bc   
0E1D                JUMPTABLE2:      
0E1D   23                     INC   hl   
0E1E   5E                     LD   e,(hl)   
0E1F   23                     INC   hl   
0E20   56                     LD   d,(hl)   
0E21   EB                     EX   de,hl   
0E22   E9                     JP   (hl)   
0E23                PRTSTR0:      
0E23   CD 85 00               CALL   putchar   
0E26   23                     INC   hl   
0E27                PRTSTR:      
0E27   7E                     LD   a,(hl)   
0E28   B7                     OR   a   
0E29   20 F8                  JR   nz,prtstr0   
0E2B   C9                     RET      
0E2C                             ; **************************************************************************
0E2C                             ; calculate nesting value
0E2C                             ; a is char to be tested,
0E2C                             ; e is the nesting value (initially 0)
0E2C                             ; e is increased by ( and [
0E2C                             ; e is decreased by ) and ]
0E2C                             ; e has its bit 7 toggled by `
0E2C                             ; limited to 127 levels
0E2C                             ; **************************************************************************
0E2C                NESTING:      
0E2C   FE 22                  CP   DQ   ; quote char
0E2E   28 06                  JR   z,nesting0   
0E30   FE 60                  CP   "`"   ; quote char
0E32   28 02                  JR   z,nesting0   
0E34   18 0A                  JR   nesting1   
0E36                NESTING0:      
0E36   CB 7B                  BIT   7,e   
0E38   28 03                  JR   z,nesting1a   
0E3A   CB BB                  RES   7,e   
0E3C   C9                     RET      
0E3D                NESTING1A:      
0E3D   CB FB                  SET   7,e   
0E3F   C9                     RET      
0E40                NESTING1:      
0E40   CB 7B                  BIT   7,e   
0E42   C0                     RET   nz   
0E43   FE 7B                  CP   "{"   
0E45   28 08                  JR   z,nesting2   
0E47   FE 5B                  CP   "["   
0E49   28 04                  JR   z,nesting2   
0E4B   FE 28                  CP   "("   
0E4D   20 02                  JR   nz,nesting3   
0E4F                NESTING2:      
0E4F   1C                     INC   e   
0E50   C9                     RET      
0E51                NESTING3:      
0E51   FE 7D                  CP   "}"   
0E53   28 07                  JR   z,nesting4   
0E55   FE 5D                  CP   "]"   
0E57   28 03                  JR   z,nesting4   
0E59   FE 29                  CP   ")"   
0E5B   C0                     RET   nz   
0E5C                NESTING4:      
0E5C   1D                     DEC   e   
0E5D   C9                     RET      
0E5E                PROMPT:      
0E5E   CD 6E 0E               CALL   printStr   
0E61   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E66   C9                     RET      
0E67                CRLF:        
0E67   CD 6E 0E               CALL   printStr   
0E6A   0D 0A 00               .CSTR   "\r\n"   
0E6D   C9                     RET      
0E6E                             ; prints a null teminated string
0E6E                             ; the string should be immediately following the call
0E6E                PRINTSTR:      
0E6E   E3                     EX   (sp),hl   ; swap			
0E6F   CD 27 0E               CALL   prtstr   
0E72   23                     INC   hl   ; inc past NUL
0E73   E3                     EX   (sp),hl   ; put it back	
0E74   C9                     RET      
0E75                TITLESTR:      
0E75   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0E89                INIT:        
0E89   21 75 0E               LD   hl,titleStr   
0E8C   11 08 57               LD   de,titleBuf   
0E8F   06 14                  LD   b,20   
0E91                INIT1:       
0E91   1A                     LD   a,(de)   
0E92   BE                     CP   (hl)   
0E93   20 17                  JR   nz,coldBoot0   
0E95   13                     INC   de   
0E96   23                     INC   hl   
0E97   10 F8                  DJNZ   init1   
0E99                WARMINIT:      
0E99   ED 4B F8 56            LD   bc,(vSavedIP)   ; restore IP
0E9D   ED 7B FA 56            LD   sp,(vSavedSP)   ; restore SP
0EA1   DD 2A FC 56            LD   ix,(vSavedNext)   ; restore Next
0EA5   FD 2A FE 56            LD   iy,(vSavedBP)   ; restore BP
0EA9   C3 E3 0E               JP   start1   
0EAC                COLDBOOT0:      
0EAC   21 75 0E               LD   hl,titleStr   ; copy titleStr to titleBuf
0EAF   11 08 57               LD   de,titleBuf   
0EB2   06 14                  LD   b,20   
0EB4   ED B0                  LDIR      
0EB6                COLDINIT:      
0EB6   21 80 01               LD   hl,isysVars   
0EB9   11 E6 56               LD   de,sysVars   
0EBC   01 10 00               LD   bc,8 * 2   
0EBF   ED B0                  LDIR      
0EC1   21 00 56               LD   hl,vars   ; 52 vars LO HI
0EC4   06 34                  LD   b,26*2   
0EC6   AF                     XOR   a   
0EC7                COLDBOOT1:      
0EC7   77                     LD   (hl),a   
0EC8   23                     INC   hl   
0EC9   10 FC                  DJNZ   coldBoot1   
0ECB   DD 2A EE 56            LD   ix,(vNext)   
0ECF   FD 21 00 54            LD   iy,STACK   
0ED3   C9                     RET      
0ED4                COLDSTART:      
0ED4   31 00 54               LD   sp,STACK   
0ED7   CD AC 0E               CALL   coldBoot0   
0EDA   C3 E3 0E               JP   start1   
0EDD                START:       
0EDD   31 00 54               LD   sp,STACK   ; start Monty
0EE0   CD 89 0E               CALL   init   ; setups
0EE3                START1:      
0EE3   21 08 57               LD   hl,titleBuf   
0EE6   CD 27 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EE9                INTERPRET:      
0EE9   CD DC 0D               CALL   flushBuffer   
0EEC   CD 5E 0E               CALL   prompt   
0EEF   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EF2   21 00 54               LD   hl,TIB   
0EF5   22 EA 56               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EF8                INTERPRET2:      ; calculate nesting
0EF8   1E 00                  LD   e,0   ; initilize nesting value
0EFA   C5                     PUSH   bc   ; save offset into TIB,
0EFB                             ; bc is also the count of chars in TIB
0EFB   21 00 54               LD   hl,TIB   ; hl is start of TIB
0EFE   18 0B                  JR   interpret4   
0F00                INTERPRET3:      
0F00   3E 33                  LD   a,"3"   
0F02   CD 85 00               CALL   putchar   
0F05   7E                     LD   a,(hl)   ; a = char in TIB
0F06   23                     INC   hl   ; inc pointer into TIB
0F07   0B                     DEC   bc   ; dec count of chars in TIB
0F08   CD 2C 0E               CALL   nesting   ; update nesting value
0F0B                INTERPRET4:      
0F0B   79                     LD   a,c   ; is count zero?
0F0C   B0                     OR   b   
0F0D   20 F1                  JR   nz,interpret3   ; if not loop
0F0F   C1                     POP   bc   ; restore offset into TIB
0F10                INTERPRET5:      
0F10   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F13   FE 20                  CP   $20   ; compare to space
0F15   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F17   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F19                             ; ???? NEEDED?
0F19   28 36                  JR   z,interpret8   
0F1B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F1D   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F1F   FE 05                  CP   CTRL_E   
0F21   CA AF 0F               JP   z,edit_   
0F24   FE 08                  CP   CTRL_H   
0F26   CA 9F 0F               JP   z,backSpace_   
0F29   FE 0A                  CP   CTRL_J   
0F2B   CA C7 0F               JP   z,reEdit_   
0F2E                             ; cp CTRL_S
0F2E                             ; jp z,printStack_
0F2E                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F2E                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F2E                             ; DB     lsb(list_)       ; FF  ^L 12
0F2E                             ; DB     lsb(printStack_) ; DLE ^P 16
0F2E                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F2E                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F2E                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F2E                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F2E                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F2E                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F2E                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F2E                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F2E                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F2E                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F2E                INTERPRET5A:      
0F2E                             ; ld (vTIBPtr),bc
0F2E                             ; ld bc,(vTIBPtr)
0F2E   18 C8                  JR   interpret2   
0F30                INTERPRET6:      
0F30   21 00 54               LD   hl,TIB   
0F33   09                     ADD   hl,bc   
0F34   77                     LD   (hl),a   ; store the character in textbuf
0F35   03                     INC   bc   
0F36   CD 85 00               CALL   putchar   ; echo character to screen
0F39   CD 2C 0E               CALL   nesting   
0F3C   18 D2                  JR   interpret5   ; wait for next character
0F3E                INTERPRET7:      
0F3E   21 00 54               LD   hl,TIB   
0F41   09                     ADD   hl,bc   
0F42   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F44   23                     INC   hl   
0F45   36 0A                  LD   (hl),"\n"   
0F47   23                     INC   hl   
0F48   03                     INC   bc   
0F49   03                     INC   bc   
0F4A   CD 67 0E               CALL   crlf   ; echo character to screen
0F4D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F4E   B7                     OR   a   
0F4F   20 BF                  JR   nz,interpret5   
0F51                INTERPRET8:      
0F51   21 00 54               LD   hl,TIB   
0F54   09                     ADD   hl,bc   
0F55   22 EA 56               LD   (vTIBPtr),hl   
0F58   01 00 54               LD   bc,TIB   
0F5B   ED 43 F8 56            LD   (vSavedIP),bc   ; save IP
0F5F   ED 73 FA 56            LD   (vSavedSP),sp   ; save SP
0F63   DD 22 FC 56            LD   (vSavedNext),ix   ; save Next
0F67   FD 22 FE 56            LD   (vSavedBP),iy   ; save BP
0F6B   0B                     DEC   bc   
0F6C                NEXT:        
0F6C   03                     INC   bc   ; Increment the IP
0F6D   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F6E   FE 20                  CP   " "   ; whitespace?
0F70   28 FA                  JR   z,next   ; space? ignore
0F72   38 09                  JR   c,next1   
0F74   D6 20                  SUB   " "   
0F76   6F                     LD   l,a   ; index into table
0F77   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0F79   6E                     LD   l,(hl)   ; get low jump address
0F7A   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0F7C   E9                     JP   (hl)   ; Jump to routine
0F7D                NEXT1:       
0F7D   FE 00                  CP   NUL   ; end of input string?
0F7F   28 03                  JR   z,exit   
0F81   C3 E9 0E               JP   interpret   ; no, other whitespace, macros?
0F84                EXIT:        
0F84   03                     INC   bc   
0F85   60 69                  LD   hl,bc   
0F87   E9                     JP   (hl)   
0F88                RUN:         
0F88   C1                     POP   bc   
0F89   0B                     DEC   bc   
0F8A   DD E9                  JP   (ix)   
0F8C                ERROR:       
0F8C   CD 88 0F               CALL   run   
0F8F   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F9C   C3 E9 0E               JP   interpret   
0F9F                BACKSPACE_:      
0F9F   79                     LD   a,c   
0FA0   B0                     OR   b   
0FA1   CA F8 0E               JP   z,interpret2   
0FA4   0B                     DEC   bc   
0FA5   CD 6E 0E               CALL   printStr   
0FA8   08 20 08 00            .CSTR   "\b \b"   
0FAC   C3 F8 0E               JP   interpret2   
0FAF                             ; edit
0FAF                EDIT_:       
0FAF   CD 88 0F               CALL   run   
0FB2   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FC4   C3 E9 0E               JP   interpret   
0FC7                REEDIT_:      
0FC7   C3 E9 0E               JP   interpret   
0FCA                PRINTSTACK_:      
0FCA   CD 88 0F               CALL   run   
0FCD   2F 70 6B 00            .CSTR   "/pk"   
0FD1   C3 E9 0E               JP   interpret   
0FD4                             ; editDef:
0FD4                             ;     pop hl                      ; pop ret address
0FD4                             ;     ex (sp),hl                  ; swap with TOS
0FD4                             ;     push hl                     ; dup TOS
0FD4                             ;     ld a,l                      ; a = ident
0FD4                             ;     ld de,TIB                   ; de = start of TIB
0FD4                             ;     ld (vTIBPtr),de             ; update TIB*
0FD4                             ;     push ix                     ; save NEXT
0FD4                             ;     ld ix,editDef0              ; NEXT = editDef0
0FD4                             ;     jp lookupRef                ; convert letter into address
0FD4                             ; editDef0:
0FD4                             ;     ld e,(hl)                   ; de = (hl++)
0FD4                             ;     inc hl
0FD4                             ;     ld d,(hl)
0FD4                             ;     ld a,d                      ; de == 0 ?
0FD4                             ;     or e
0FD4                             ;     jr z,editDef4
0FD4                             ;     ld ix,editDef3              ; NEXT = editDef3
0FD4                             ;     ex de,hl
0FD4                             ;     ld a,(hl)
0FD4                             ;     cp "{"
0FD4                             ;     jr nz,editDef1
0FD4                             ;     jp editBlock0               ; convert letter into address
0FD4                             ; editDef1:
0FD4                             ;     cp "("
0FD4                             ;     jr nz,editDef2
0FD4                             ;     jp editBlock0               ; convert letter into address
0FD4                             ; editDef2:
0FD4                             ;     jp editFunc
0FD4                             ; editDef3:
0FD4                             ;     ld a," "                    ; write assign
0FD4                             ;     call writeChar
0FD4                             ;     pop hl                      ; a = ident
0FD4                             ;     ld a,l
0FD4                             ;     call writeChar
0FD4                             ;     ld a,"="                    ; write assign
0FD4                             ;     call writeChar
0FD4                             ;     ld ix,editDef4              ; NEXT = editDef4
0FD4                             ;     jp printTIB
0FD4                             ; editDef4:
0FD4                             ;     pop ix                      ; restore NEXT
0FD4                             ;     jp (ix)
0FD4                             ; writeChar:
0FD4                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FD4                             ;     ld (de),a                   ; write ident
0FD4                             ;     inc de
0FD4                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FD4                             ;     ret
0FD4                             ; ; printTIB
0FD4                             ; printTIB:
0FD4                             ;     ld hl,(vTIBPtr)
0FD4                             ;     ld de,TIB
0FD4                             ;     or a
0FD4                             ;     sbc hl,de
0FD4                             ;     jp printTIB2
0FD4                             ; printTIB1:
0FD4                             ;     ld a,(de)
0FD4                             ;     call putchar
0FD4                             ; printTIB2:
0FD4                             ;     ld a,l
0FD4                             ;     or h
0FD4                             ;     jr nz,printTIB1
0FD4                             ;     jp (ix)
0FD4                             ; editBlock:
0FD4                             ;     pop hl                      ; hl = block*
0FD4                             ; editBlock0:
0FD4                             ;     push ix                     ; save next
0FD4                             ;     push hl                     ; push block*
0FD4                             ;     push hl                     ; push block*
0FD4                             ;     ld ix,(editBlock2)
0FD4                             ;     jp blockLength
0FD4                             ; editBlock1:
0FD4                             ;     pop hl                      ; bc = length, (sp) = IP
0FD4                             ;     pop de                      ; de = block*
0FD4                             ;     ld a,l
0FD4                             ;     or h
0FD4                             ;     jr z,editBlock2
0FD4                             ;     push bc
0FD4                             ;     ld bc,hl
0FD4                             ;     ex de,hl                    ; hl = block*
0FD4                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FD4                             ;     ldir                        ; copy block to TIB
0FD4                             ;     ld (vTIBPtr),de              ; save TIB*
0FD4                             ;     pop bc
0FD4                             ; editBlock2:
0FD4                             ;     pop ix                      ; restore next
0FD4                             ;     jp (ix)
0FD4                             ; editFunc:
0FD4                             ;     jp (ix)
0FD4                             ; editArray:
0FD4                             ;     jp (ix)
0FD4                             ; editArglist:
0FD4                             ;     jp (ix)
0FD4                             ; ; blockLength
0FD4                             ; ; addr1 -- length
0FD4                             ; blockLength:
0FD4                             ;     pop hl                      ; block*
0FD4                             ;     push hl                     ; save block*
0FD4                             ;     inc hl                      ; skip first char
0FD4                             ;     ld d,1                      ; increase nesting
0FD4                             ; blockLength1:                   ; Skip to end of definition
0FD4                             ;     ld a,(hl)                   ; Get the next character
0FD4                             ;     inc hl                      ; Point to next character
0FD4                             ;     cp " " + 1                  ; ignore whitespace
0FD4                             ;     jr c,blockLength1
0FD4                             ;     cp ")"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "}"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "]"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "("
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "{"
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "["
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "'"
0FD4                             ;     jr z,blockLength3
0FD4                             ;     cp "`"
0FD4                             ;     jr z,blockLength3
0FD4                             ;     cp DQ
0FD4                             ;     jr z,blockLength3
0FD4                             ;     jr blockLength1
0FD4                             ; blockLength2:
0FD4                             ;     inc d
0FD4                             ;     jr blockLength1
0FD4                             ; blockLength4:
0FD4                             ;     dec d
0FD4                             ;     jr nz, blockLength1         ; get the next element
0FD4                             ; blockLength3:
0FD4                             ;     ld a,$80
0FD4                             ;     xor d
0FD4                             ;     ld d,a
0FD4                             ;     jr nz, blockLength1
0FD4                             ;     pop hl                      ; hl = block*
0FD4                             ;     or a
0FD4                             ;     sbc hl,de
0FD4                             ;     push hl
0FD4                             ;     jp (ix)
0FD4                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FD4                             ; \a start of stack \#3 depth \b base \$ prompt
0FD4                             ; DW dStack               ; a vS0 start of datastack			
0FD4                             ; DW FALSE                ; b vBase16
0FD4                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FD4                             ; DW 0                    ; d
0FD4                             ; DW 65                   ; e vLastDef "A" last command u defined
0FD4                             ; DW 0                    ; f
0FD4                             ; DW page6                ; g 256 bytes limits
0FD4                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FD4                          ;*Macro unroll: FUNC f1, 1, ""
0FD4                F1:          
0FD4   CD F6 0A               CALL   go   
0FD7   00 00                  DW   NUL   
0FD9   DF 0F                  DW   f1M_2901S12   
0FDB   DD 0F                  DW   $+2   
0FDD   01                     DB   1   
0FDE   00                     .PSTR   ""   
0FDF                F1M_2901S12:      
0FDF   00                     DB   0   
0FE0                          ;*Macro unroll: FUNC f2, 1, ""
0FE0                F2:          
0FE0   CD F6 0A               CALL   go   
0FE3   00 00                  DW   NUL   
0FE5   EB 0F                  DW   f2M_2903S15   
0FE7   E9 0F                  DW   $+2   
0FE9   01                     DB   1   
0FEA   00                     .PSTR   ""   
0FEB                F2M_2903S15:      
0FEB   00                     DB   0   
0FEC                          ;*Macro unroll: FUNC f3, 0, ""
0FEC                F3:          
0FEC   CD F6 0A               CALL   go   
0FEF   00 00                  DW   NUL   
0FF1   F7 0F                  DW   f3M_2905S18   
0FF3   F5 0F                  DW   $+2   
0FF5   00                     DB   0   
0FF6   00                     .PSTR   ""   
0FF7                F3M_2905S18:      
0FF7   00                     DB   0   
0FF8                          ;*Macro unroll: FUNC f4, 1, ""
0FF8                F4:          
0FF8   CD F6 0A               CALL   go   
0FFB   00 00                  DW   NUL   
0FFD   03 10                  DW   f4M_2907S21   
0FFF   01 10                  DW   $+2   
1001   01                     DB   1   
1002   00                     .PSTR   ""   
1003                F4M_2907S21:      
1003   00                     DB   0   
1004                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; ; test "[1 2 5]/as.",0
1100                             ; ; test "0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe", 0
1100                          ;*Macro unroll:  test "[1 2 5].a 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe", 0
1100   31 00 54               LD   SP,STACK   
1103   CD B6 0E               CALL   coldInit   
1106   CD 86 52               CALL   execStr   
1109   5B 31 20 32 20 35 5D 2E 61 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 65 00 DB   "[1 2 5].a 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe",0   
1140   CD DC 0D               CALL   flushBuffer   
1143   E1                     POP   HL   
1144   E5                     PUSH   HL   
1145   11 00 00               LD   DE,0   
1148   B7                     OR   A   
1149   ED 52                  SBC   HL,DE   
114B   7D                     LD   A,L   
114C   B4                     OR   H   
114D   CA DE 11               JP   Z,expectM_2913S29   
1150   CD 6E 0E               CALL   printStr   
1153   43 6F 64 65 3A 20 5B 31 20 32 20 35 5D 2E 61 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 65 00 .CSTR   "Code: ","[1 2 5].a 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe"   
1190   CD 6E 0E               CALL   printStr   
1193   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11A2   21 00 00               LD   hl,0   
11A5   E5                     PUSH   hl   
11A6   E5                     PUSH   hl   
11A7   CD 88 0F               CALL   run   
11AA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11B2   CD DC 0D               CALL   flushBuffer   
11B5   CD 6E 0E               CALL   printStr   
11B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C5   E1                     POP   hl   
11C6   E5                     PUSH   hl   
11C7   E5                     PUSH   hl   
11C8   CD 88 0F               CALL   run   
11CB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11DA   CD DC 0D               CALL   flushBuffer   
11DD   76                     HALT      
11DE                EXPECTM_2913S29:      
11DE   E1                     POP   HL   
11DF   CD 6E 0E               CALL   printStr   
11E2   44 6F 6E 65 21 00      .CSTR   "Done!"   
11E8   76                     HALT      
11E9                             ; 
11E9                          ;*Macro unroll:  test "/f", false
11E9   31 00 54               LD   SP,STACK   
11EC   CD B6 0E               CALL   coldInit   
11EF   CD 86 52               CALL   execStr   
11F2   2F 66 00               DB   "/f",0   
11F5   CD DC 0D               CALL   flushBuffer   
11F8   E1                     POP   HL   
11F9   E5                     PUSH   HL   
11FA   11 00 00               LD   DE,false   
11FD   B7                     OR   A   
11FE   ED 52                  SBC   HL,DE   
1200   7D                     LD   A,L   
1201   B4                     OR   H   
1202   CA 5F 12               JP   Z,expectM_2918S37   
1205   CD 6E 0E               CALL   printStr   
1208   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1211   CD 6E 0E               CALL   printStr   
1214   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1223   21 00 00               LD   hl,false   
1226   E5                     PUSH   hl   
1227   E5                     PUSH   hl   
1228   CD 88 0F               CALL   run   
122B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1233   CD DC 0D               CALL   flushBuffer   
1236   CD 6E 0E               CALL   printStr   
1239   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1246   E1                     POP   hl   
1247   E5                     PUSH   hl   
1248   E5                     PUSH   hl   
1249   CD 88 0F               CALL   run   
124C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
125B   CD DC 0D               CALL   flushBuffer   
125E   76                     HALT      
125F                EXPECTM_2918S37:      
125F   E1                     POP   HL   
1260                          ;*Macro unroll:  test "/t", true
1260   31 00 54               LD   SP,STACK   
1263   CD B6 0E               CALL   coldInit   
1266   CD 86 52               CALL   execStr   
1269   2F 74 00               DB   "/t",0   
126C   CD DC 0D               CALL   flushBuffer   
126F   E1                     POP   HL   
1270   E5                     PUSH   HL   
1271   11 FF FF               LD   DE,true   
1274   B7                     OR   A   
1275   ED 52                  SBC   HL,DE   
1277   7D                     LD   A,L   
1278   B4                     OR   H   
1279   CA D6 12               JP   Z,expectM_2919S38   
127C   CD 6E 0E               CALL   printStr   
127F   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1288   CD 6E 0E               CALL   printStr   
128B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
129A   21 FF FF               LD   hl,true   
129D   E5                     PUSH   hl   
129E   E5                     PUSH   hl   
129F   CD 88 0F               CALL   run   
12A2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12AA   CD DC 0D               CALL   flushBuffer   
12AD   CD 6E 0E               CALL   printStr   
12B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12BD   E1                     POP   hl   
12BE   E5                     PUSH   hl   
12BF   E5                     PUSH   hl   
12C0   CD 88 0F               CALL   run   
12C3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12D2   CD DC 0D               CALL   flushBuffer   
12D5   76                     HALT      
12D6                EXPECTM_2919S38:      
12D6   E1                     POP   HL   
12D7                          ;*Macro unroll:  test "1", 1
12D7   31 00 54               LD   SP,STACK   
12DA   CD B6 0E               CALL   coldInit   
12DD   CD 86 52               CALL   execStr   
12E0   31 00                  DB   "1",0   
12E2   CD DC 0D               CALL   flushBuffer   
12E5   E1                     POP   HL   
12E6   E5                     PUSH   HL   
12E7   11 01 00               LD   DE,1   
12EA   B7                     OR   A   
12EB   ED 52                  SBC   HL,DE   
12ED   7D                     LD   A,L   
12EE   B4                     OR   H   
12EF   CA 4B 13               JP   Z,expectM_2920S39   
12F2   CD 6E 0E               CALL   printStr   
12F5   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12FD   CD 6E 0E               CALL   printStr   
1300   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
130F   21 01 00               LD   hl,1   
1312   E5                     PUSH   hl   
1313   E5                     PUSH   hl   
1314   CD 88 0F               CALL   run   
1317   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
131F   CD DC 0D               CALL   flushBuffer   
1322   CD 6E 0E               CALL   printStr   
1325   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1332   E1                     POP   hl   
1333   E5                     PUSH   hl   
1334   E5                     PUSH   hl   
1335   CD 88 0F               CALL   run   
1338   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1347   CD DC 0D               CALL   flushBuffer   
134A   76                     HALT      
134B                EXPECTM_2920S39:      
134B   E1                     POP   HL   
134C                          ;*Macro unroll:  test "2", 2
134C   31 00 54               LD   SP,STACK   
134F   CD B6 0E               CALL   coldInit   
1352   CD 86 52               CALL   execStr   
1355   32 00                  DB   "2",0   
1357   CD DC 0D               CALL   flushBuffer   
135A   E1                     POP   HL   
135B   E5                     PUSH   HL   
135C   11 02 00               LD   DE,2   
135F   B7                     OR   A   
1360   ED 52                  SBC   HL,DE   
1362   7D                     LD   A,L   
1363   B4                     OR   H   
1364   CA C0 13               JP   Z,expectM_2921S40   
1367   CD 6E 0E               CALL   printStr   
136A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1372   CD 6E 0E               CALL   printStr   
1375   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1384   21 02 00               LD   hl,2   
1387   E5                     PUSH   hl   
1388   E5                     PUSH   hl   
1389   CD 88 0F               CALL   run   
138C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1394   CD DC 0D               CALL   flushBuffer   
1397   CD 6E 0E               CALL   printStr   
139A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13A7   E1                     POP   hl   
13A8   E5                     PUSH   hl   
13A9   E5                     PUSH   hl   
13AA   CD 88 0F               CALL   run   
13AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13BC   CD DC 0D               CALL   flushBuffer   
13BF   76                     HALT      
13C0                EXPECTM_2921S40:      
13C0   E1                     POP   HL   
13C1                          ;*Macro unroll:  test "1", 1
13C1   31 00 54               LD   SP,STACK   
13C4   CD B6 0E               CALL   coldInit   
13C7   CD 86 52               CALL   execStr   
13CA   31 00                  DB   "1",0   
13CC   CD DC 0D               CALL   flushBuffer   
13CF   E1                     POP   HL   
13D0   E5                     PUSH   HL   
13D1   11 01 00               LD   DE,1   
13D4   B7                     OR   A   
13D5   ED 52                  SBC   HL,DE   
13D7   7D                     LD   A,L   
13D8   B4                     OR   H   
13D9   CA 35 14               JP   Z,expectM_2922S41   
13DC   CD 6E 0E               CALL   printStr   
13DF   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
13E7   CD 6E 0E               CALL   printStr   
13EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13F9   21 01 00               LD   hl,1   
13FC   E5                     PUSH   hl   
13FD   E5                     PUSH   hl   
13FE   CD 88 0F               CALL   run   
1401   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1409   CD DC 0D               CALL   flushBuffer   
140C   CD 6E 0E               CALL   printStr   
140F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
141C   E1                     POP   hl   
141D   E5                     PUSH   hl   
141E   E5                     PUSH   hl   
141F   CD 88 0F               CALL   run   
1422   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1431   CD DC 0D               CALL   flushBuffer   
1434   76                     HALT      
1435                EXPECTM_2922S41:      
1435   E1                     POP   HL   
1436                          ;*Macro unroll:  test "0", 0
1436   31 00 54               LD   SP,STACK   
1439   CD B6 0E               CALL   coldInit   
143C   CD 86 52               CALL   execStr   
143F   30 00                  DB   "0",0   
1441   CD DC 0D               CALL   flushBuffer   
1444   E1                     POP   HL   
1445   E5                     PUSH   HL   
1446   11 00 00               LD   DE,0   
1449   B7                     OR   A   
144A   ED 52                  SBC   HL,DE   
144C   7D                     LD   A,L   
144D   B4                     OR   H   
144E   CA AA 14               JP   Z,expectM_2923S42   
1451   CD 6E 0E               CALL   printStr   
1454   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
145C   CD 6E 0E               CALL   printStr   
145F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
146E   21 00 00               LD   hl,0   
1471   E5                     PUSH   hl   
1472   E5                     PUSH   hl   
1473   CD 88 0F               CALL   run   
1476   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
147E   CD DC 0D               CALL   flushBuffer   
1481   CD 6E 0E               CALL   printStr   
1484   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1491   E1                     POP   hl   
1492   E5                     PUSH   hl   
1493   E5                     PUSH   hl   
1494   CD 88 0F               CALL   run   
1497   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14A6   CD DC 0D               CALL   flushBuffer   
14A9   76                     HALT      
14AA                EXPECTM_2923S42:      
14AA   E1                     POP   HL   
14AB                          ;*Macro unroll:  test "10", 10
14AB   31 00 54               LD   SP,STACK   
14AE   CD B6 0E               CALL   coldInit   
14B1   CD 86 52               CALL   execStr   
14B4   31 30 00               DB   "10",0   
14B7   CD DC 0D               CALL   flushBuffer   
14BA   E1                     POP   HL   
14BB   E5                     PUSH   HL   
14BC   11 0A 00               LD   DE,10   
14BF   B7                     OR   A   
14C0   ED 52                  SBC   HL,DE   
14C2   7D                     LD   A,L   
14C3   B4                     OR   H   
14C4   CA 21 15               JP   Z,expectM_2924S43   
14C7   CD 6E 0E               CALL   printStr   
14CA   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
14D3   CD 6E 0E               CALL   printStr   
14D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14E5   21 0A 00               LD   hl,10   
14E8   E5                     PUSH   hl   
14E9   E5                     PUSH   hl   
14EA   CD 88 0F               CALL   run   
14ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14F5   CD DC 0D               CALL   flushBuffer   
14F8   CD 6E 0E               CALL   printStr   
14FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1508   E1                     POP   hl   
1509   E5                     PUSH   hl   
150A   E5                     PUSH   hl   
150B   CD 88 0F               CALL   run   
150E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
151D   CD DC 0D               CALL   flushBuffer   
1520   76                     HALT      
1521                EXPECTM_2924S43:      
1521   E1                     POP   HL   
1522                          ;*Macro unroll:  test "123", 123
1522   31 00 54               LD   SP,STACK   
1525   CD B6 0E               CALL   coldInit   
1528   CD 86 52               CALL   execStr   
152B   31 32 33 00            DB   "123",0   
152F   CD DC 0D               CALL   flushBuffer   
1532   E1                     POP   HL   
1533   E5                     PUSH   HL   
1534   11 7B 00               LD   DE,123   
1537   B7                     OR   A   
1538   ED 52                  SBC   HL,DE   
153A   7D                     LD   A,L   
153B   B4                     OR   H   
153C   CA 9A 15               JP   Z,expectM_2925S44   
153F   CD 6E 0E               CALL   printStr   
1542   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
154C   CD 6E 0E               CALL   printStr   
154F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
155E   21 7B 00               LD   hl,123   
1561   E5                     PUSH   hl   
1562   E5                     PUSH   hl   
1563   CD 88 0F               CALL   run   
1566   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
156E   CD DC 0D               CALL   flushBuffer   
1571   CD 6E 0E               CALL   printStr   
1574   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1581   E1                     POP   hl   
1582   E5                     PUSH   hl   
1583   E5                     PUSH   hl   
1584   CD 88 0F               CALL   run   
1587   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1596   CD DC 0D               CALL   flushBuffer   
1599   76                     HALT      
159A                EXPECTM_2925S44:      
159A   E1                     POP   HL   
159B                          ;*Macro unroll:  test "-1",-1
159B   31 00 54               LD   SP,STACK   
159E   CD B6 0E               CALL   coldInit   
15A1   CD 86 52               CALL   execStr   
15A4   2D 31 00               DB   "-1",0   
15A7   CD DC 0D               CALL   flushBuffer   
15AA   E1                     POP   HL   
15AB   E5                     PUSH   HL   
15AC   11 FF FF               LD   DE,-1   
15AF   B7                     OR   A   
15B0   ED 52                  SBC   HL,DE   
15B2   7D                     LD   A,L   
15B3   B4                     OR   H   
15B4   CA 11 16               JP   Z,expectM_2926S45   
15B7   CD 6E 0E               CALL   printStr   
15BA   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
15C3   CD 6E 0E               CALL   printStr   
15C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15D5   21 FF FF               LD   hl,-1   
15D8   E5                     PUSH   hl   
15D9   E5                     PUSH   hl   
15DA   CD 88 0F               CALL   run   
15DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15E5   CD DC 0D               CALL   flushBuffer   
15E8   CD 6E 0E               CALL   printStr   
15EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15F8   E1                     POP   hl   
15F9   E5                     PUSH   hl   
15FA   E5                     PUSH   hl   
15FB   CD 88 0F               CALL   run   
15FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
160D   CD DC 0D               CALL   flushBuffer   
1610   76                     HALT      
1611                EXPECTM_2926S45:      
1611   E1                     POP   HL   
1612                          ;*Macro unroll:  test "''", 0
1612   31 00 54               LD   SP,STACK   
1615   CD B6 0E               CALL   coldInit   
1618   CD 86 52               CALL   execStr   
161B   27 27 00               DB   "''",0   
161E   CD DC 0D               CALL   flushBuffer   
1621   E1                     POP   HL   
1622   E5                     PUSH   HL   
1623   11 00 00               LD   DE,0   
1626   B7                     OR   A   
1627   ED 52                  SBC   HL,DE   
1629   7D                     LD   A,L   
162A   B4                     OR   H   
162B   CA 88 16               JP   Z,expectM_2927S46   
162E   CD 6E 0E               CALL   printStr   
1631   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
163A   CD 6E 0E               CALL   printStr   
163D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164C   21 00 00               LD   hl,0   
164F   E5                     PUSH   hl   
1650   E5                     PUSH   hl   
1651   CD 88 0F               CALL   run   
1654   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
165C   CD DC 0D               CALL   flushBuffer   
165F   CD 6E 0E               CALL   printStr   
1662   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
166F   E1                     POP   hl   
1670   E5                     PUSH   hl   
1671   E5                     PUSH   hl   
1672   CD 88 0F               CALL   run   
1675   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1684   CD DC 0D               CALL   flushBuffer   
1687   76                     HALT      
1688                EXPECTM_2927S46:      
1688   E1                     POP   HL   
1689                          ;*Macro unroll:  test "'a'", $61
1689   31 00 54               LD   SP,STACK   
168C   CD B6 0E               CALL   coldInit   
168F   CD 86 52               CALL   execStr   
1692   27 61 27 00            DB   "'a'",0   
1696   CD DC 0D               CALL   flushBuffer   
1699   E1                     POP   HL   
169A   E5                     PUSH   HL   
169B   11 61 00               LD   DE,$61   
169E   B7                     OR   A   
169F   ED 52                  SBC   HL,DE   
16A1   7D                     LD   A,L   
16A2   B4                     OR   H   
16A3   CA 01 17               JP   Z,expectM_2928S47   
16A6   CD 6E 0E               CALL   printStr   
16A9   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
16B3   CD 6E 0E               CALL   printStr   
16B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16C5   21 61 00               LD   hl,$61   
16C8   E5                     PUSH   hl   
16C9   E5                     PUSH   hl   
16CA   CD 88 0F               CALL   run   
16CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16D5   CD DC 0D               CALL   flushBuffer   
16D8   CD 6E 0E               CALL   printStr   
16DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16E8   E1                     POP   hl   
16E9   E5                     PUSH   hl   
16EA   E5                     PUSH   hl   
16EB   CD 88 0F               CALL   run   
16EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16FD   CD DC 0D               CALL   flushBuffer   
1700   76                     HALT      
1701                EXPECTM_2928S47:      
1701   E1                     POP   HL   
1702                          ;*Macro unroll:  test "'\\''", $27
1702   31 00 54               LD   SP,STACK   
1705   CD B6 0E               CALL   coldInit   
1708   CD 86 52               CALL   execStr   
170B   27 5C 27 27 00         DB   "'\\''",0   
1710   CD DC 0D               CALL   flushBuffer   
1713   E1                     POP   HL   
1714   E5                     PUSH   HL   
1715   11 27 00               LD   DE,$27   
1718   B7                     OR   A   
1719   ED 52                  SBC   HL,DE   
171B   7D                     LD   A,L   
171C   B4                     OR   H   
171D   CA 7C 17               JP   Z,expectM_2929S48   
1720   CD 6E 0E               CALL   printStr   
1723   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
172E   CD 6E 0E               CALL   printStr   
1731   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1740   21 27 00               LD   hl,$27   
1743   E5                     PUSH   hl   
1744   E5                     PUSH   hl   
1745   CD 88 0F               CALL   run   
1748   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1750   CD DC 0D               CALL   flushBuffer   
1753   CD 6E 0E               CALL   printStr   
1756   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1763   E1                     POP   hl   
1764   E5                     PUSH   hl   
1765   E5                     PUSH   hl   
1766   CD 88 0F               CALL   run   
1769   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1778   CD DC 0D               CALL   flushBuffer   
177B   76                     HALT      
177C                EXPECTM_2929S48:      
177C   E1                     POP   HL   
177D                          ;*Macro unroll:  test "$10", $10
177D   31 00 54               LD   SP,STACK   
1780   CD B6 0E               CALL   coldInit   
1783   CD 86 52               CALL   execStr   
1786   24 31 30 00            DB   "$10",0   
178A   CD DC 0D               CALL   flushBuffer   
178D   E1                     POP   HL   
178E   E5                     PUSH   HL   
178F   11 10 00               LD   DE,$10   
1792   B7                     OR   A   
1793   ED 52                  SBC   HL,DE   
1795   7D                     LD   A,L   
1796   B4                     OR   H   
1797   CA F5 17               JP   Z,expectM_2930S49   
179A   CD 6E 0E               CALL   printStr   
179D   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
17A7   CD 6E 0E               CALL   printStr   
17AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17B9   21 10 00               LD   hl,$10   
17BC   E5                     PUSH   hl   
17BD   E5                     PUSH   hl   
17BE   CD 88 0F               CALL   run   
17C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17C9   CD DC 0D               CALL   flushBuffer   
17CC   CD 6E 0E               CALL   printStr   
17CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17DC   E1                     POP   hl   
17DD   E5                     PUSH   hl   
17DE   E5                     PUSH   hl   
17DF   CD 88 0F               CALL   run   
17E2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17F1   CD DC 0D               CALL   flushBuffer   
17F4   76                     HALT      
17F5                EXPECTM_2930S49:      
17F5   E1                     POP   HL   
17F6                          ;*Macro unroll:  test "$FF", $FF
17F6   31 00 54               LD   SP,STACK   
17F9   CD B6 0E               CALL   coldInit   
17FC   CD 86 52               CALL   execStr   
17FF   24 46 46 00            DB   "$FF",0   
1803   CD DC 0D               CALL   flushBuffer   
1806   E1                     POP   HL   
1807   E5                     PUSH   HL   
1808   11 FF 00               LD   DE,$FF   
180B   B7                     OR   A   
180C   ED 52                  SBC   HL,DE   
180E   7D                     LD   A,L   
180F   B4                     OR   H   
1810   CA 6E 18               JP   Z,expectM_2931S50   
1813   CD 6E 0E               CALL   printStr   
1816   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1820   CD 6E 0E               CALL   printStr   
1823   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1832   21 FF 00               LD   hl,$FF   
1835   E5                     PUSH   hl   
1836   E5                     PUSH   hl   
1837   CD 88 0F               CALL   run   
183A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1842   CD DC 0D               CALL   flushBuffer   
1845   CD 6E 0E               CALL   printStr   
1848   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1855   E1                     POP   hl   
1856   E5                     PUSH   hl   
1857   E5                     PUSH   hl   
1858   CD 88 0F               CALL   run   
185B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
186A   CD DC 0D               CALL   flushBuffer   
186D   76                     HALT      
186E                EXPECTM_2931S50:      
186E   E1                     POP   HL   
186F                          ;*Macro unroll:  test "-1 2 +",1
186F   31 00 54               LD   SP,STACK   
1872   CD B6 0E               CALL   coldInit   
1875   CD 86 52               CALL   execStr   
1878   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
187F   CD DC 0D               CALL   flushBuffer   
1882   E1                     POP   HL   
1883   E5                     PUSH   HL   
1884   11 01 00               LD   DE,1   
1887   B7                     OR   A   
1888   ED 52                  SBC   HL,DE   
188A   7D                     LD   A,L   
188B   B4                     OR   H   
188C   CA ED 18               JP   Z,expectM_2932S51   
188F   CD 6E 0E               CALL   printStr   
1892   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
189F   CD 6E 0E               CALL   printStr   
18A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18B1   21 01 00               LD   hl,1   
18B4   E5                     PUSH   hl   
18B5   E5                     PUSH   hl   
18B6   CD 88 0F               CALL   run   
18B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18C1   CD DC 0D               CALL   flushBuffer   
18C4   CD 6E 0E               CALL   printStr   
18C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18D4   E1                     POP   hl   
18D5   E5                     PUSH   hl   
18D6   E5                     PUSH   hl   
18D7   CD 88 0F               CALL   run   
18DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18E9   CD DC 0D               CALL   flushBuffer   
18EC   76                     HALT      
18ED                EXPECTM_2932S51:      
18ED   E1                     POP   HL   
18EE                          ;*Macro unroll:  test "-1 1 +",0
18EE   31 00 54               LD   SP,STACK   
18F1   CD B6 0E               CALL   coldInit   
18F4   CD 86 52               CALL   execStr   
18F7   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
18FE   CD DC 0D               CALL   flushBuffer   
1901   E1                     POP   HL   
1902   E5                     PUSH   HL   
1903   11 00 00               LD   DE,0   
1906   B7                     OR   A   
1907   ED 52                  SBC   HL,DE   
1909   7D                     LD   A,L   
190A   B4                     OR   H   
190B   CA 6C 19               JP   Z,expectM_2933S52   
190E   CD 6E 0E               CALL   printStr   
1911   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
191E   CD 6E 0E               CALL   printStr   
1921   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1930   21 00 00               LD   hl,0   
1933   E5                     PUSH   hl   
1934   E5                     PUSH   hl   
1935   CD 88 0F               CALL   run   
1938   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1940   CD DC 0D               CALL   flushBuffer   
1943   CD 6E 0E               CALL   printStr   
1946   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1953   E1                     POP   hl   
1954   E5                     PUSH   hl   
1955   E5                     PUSH   hl   
1956   CD 88 0F               CALL   run   
1959   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1968   CD DC 0D               CALL   flushBuffer   
196B   76                     HALT      
196C                EXPECTM_2933S52:      
196C   E1                     POP   HL   
196D                          ;*Macro unroll:  test "1 2 +", 3
196D   31 00 54               LD   SP,STACK   
1970   CD B6 0E               CALL   coldInit   
1973   CD 86 52               CALL   execStr   
1976   31 20 32 20 2B 00      DB   "1 2 +",0   
197C   CD DC 0D               CALL   flushBuffer   
197F   E1                     POP   HL   
1980   E5                     PUSH   HL   
1981   11 03 00               LD   DE,3   
1984   B7                     OR   A   
1985   ED 52                  SBC   HL,DE   
1987   7D                     LD   A,L   
1988   B4                     OR   H   
1989   CA E9 19               JP   Z,expectM_2934S53   
198C   CD 6E 0E               CALL   printStr   
198F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
199B   CD 6E 0E               CALL   printStr   
199E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19AD   21 03 00               LD   hl,3   
19B0   E5                     PUSH   hl   
19B1   E5                     PUSH   hl   
19B2   CD 88 0F               CALL   run   
19B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19BD   CD DC 0D               CALL   flushBuffer   
19C0   CD 6E 0E               CALL   printStr   
19C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19D0   E1                     POP   hl   
19D1   E5                     PUSH   hl   
19D2   E5                     PUSH   hl   
19D3   CD 88 0F               CALL   run   
19D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19E5   CD DC 0D               CALL   flushBuffer   
19E8   76                     HALT      
19E9                EXPECTM_2934S53:      
19E9   E1                     POP   HL   
19EA                          ;*Macro unroll:  test "4 1 2 +", 3
19EA   31 00 54               LD   SP,STACK   
19ED   CD B6 0E               CALL   coldInit   
19F0   CD 86 52               CALL   execStr   
19F3   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
19FB   CD DC 0D               CALL   flushBuffer   
19FE   E1                     POP   HL   
19FF   E5                     PUSH   HL   
1A00   11 03 00               LD   DE,3   
1A03   B7                     OR   A   
1A04   ED 52                  SBC   HL,DE   
1A06   7D                     LD   A,L   
1A07   B4                     OR   H   
1A08   CA 6A 1A               JP   Z,expectM_2935S54   
1A0B   CD 6E 0E               CALL   printStr   
1A0E   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1A1C   CD 6E 0E               CALL   printStr   
1A1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A2E   21 03 00               LD   hl,3   
1A31   E5                     PUSH   hl   
1A32   E5                     PUSH   hl   
1A33   CD 88 0F               CALL   run   
1A36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A3E   CD DC 0D               CALL   flushBuffer   
1A41   CD 6E 0E               CALL   printStr   
1A44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A51   E1                     POP   hl   
1A52   E5                     PUSH   hl   
1A53   E5                     PUSH   hl   
1A54   CD 88 0F               CALL   run   
1A57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A66   CD DC 0D               CALL   flushBuffer   
1A69   76                     HALT      
1A6A                EXPECTM_2935S54:      
1A6A   E1                     POP   HL   
1A6B                          ;*Macro unroll:  test "123 456 +", 123+456
1A6B   31 00 54               LD   SP,STACK   
1A6E   CD B6 0E               CALL   coldInit   
1A71   CD 86 52               CALL   execStr   
1A74   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1A7E   CD DC 0D               CALL   flushBuffer   
1A81   E1                     POP   HL   
1A82   E5                     PUSH   HL   
1A83   11 43 02               LD   DE,123+456   
1A86   B7                     OR   A   
1A87   ED 52                  SBC   HL,DE   
1A89   7D                     LD   A,L   
1A8A   B4                     OR   H   
1A8B   CA EF 1A               JP   Z,expectM_2936S55   
1A8E   CD 6E 0E               CALL   printStr   
1A91   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1AA1   CD 6E 0E               CALL   printStr   
1AA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB3   21 43 02               LD   hl,123+456   
1AB6   E5                     PUSH   hl   
1AB7   E5                     PUSH   hl   
1AB8   CD 88 0F               CALL   run   
1ABB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AC3   CD DC 0D               CALL   flushBuffer   
1AC6   CD 6E 0E               CALL   printStr   
1AC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AD6   E1                     POP   hl   
1AD7   E5                     PUSH   hl   
1AD8   E5                     PUSH   hl   
1AD9   CD 88 0F               CALL   run   
1ADC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AEB   CD DC 0D               CALL   flushBuffer   
1AEE   76                     HALT      
1AEF                EXPECTM_2936S55:      
1AEF   E1                     POP   HL   
1AF0                          ;*Macro unroll:  test "64 128 +", 64+128
1AF0   31 00 54               LD   SP,STACK   
1AF3   CD B6 0E               CALL   coldInit   
1AF6   CD 86 52               CALL   execStr   
1AF9   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1B02   CD DC 0D               CALL   flushBuffer   
1B05   E1                     POP   HL   
1B06   E5                     PUSH   HL   
1B07   11 C0 00               LD   DE,64+128   
1B0A   B7                     OR   A   
1B0B   ED 52                  SBC   HL,DE   
1B0D   7D                     LD   A,L   
1B0E   B4                     OR   H   
1B0F   CA 72 1B               JP   Z,expectM_2937S56   
1B12   CD 6E 0E               CALL   printStr   
1B15   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1B24   CD 6E 0E               CALL   printStr   
1B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B36   21 C0 00               LD   hl,64+128   
1B39   E5                     PUSH   hl   
1B3A   E5                     PUSH   hl   
1B3B   CD 88 0F               CALL   run   
1B3E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B46   CD DC 0D               CALL   flushBuffer   
1B49   CD 6E 0E               CALL   printStr   
1B4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B59   E1                     POP   hl   
1B5A   E5                     PUSH   hl   
1B5B   E5                     PUSH   hl   
1B5C   CD 88 0F               CALL   run   
1B5F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B6E   CD DC 0D               CALL   flushBuffer   
1B71   76                     HALT      
1B72                EXPECTM_2937S56:      
1B72   E1                     POP   HL   
1B73                          ;*Macro unroll:  test "1 2 +", 3
1B73   31 00 54               LD   SP,STACK   
1B76   CD B6 0E               CALL   coldInit   
1B79   CD 86 52               CALL   execStr   
1B7C   31 20 32 20 2B 00      DB   "1 2 +",0   
1B82   CD DC 0D               CALL   flushBuffer   
1B85   E1                     POP   HL   
1B86   E5                     PUSH   HL   
1B87   11 03 00               LD   DE,3   
1B8A   B7                     OR   A   
1B8B   ED 52                  SBC   HL,DE   
1B8D   7D                     LD   A,L   
1B8E   B4                     OR   H   
1B8F   CA EF 1B               JP   Z,expectM_2938S57   
1B92   CD 6E 0E               CALL   printStr   
1B95   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1BA1   CD 6E 0E               CALL   printStr   
1BA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BB3   21 03 00               LD   hl,3   
1BB6   E5                     PUSH   hl   
1BB7   E5                     PUSH   hl   
1BB8   CD 88 0F               CALL   run   
1BBB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BC3   CD DC 0D               CALL   flushBuffer   
1BC6   CD 6E 0E               CALL   printStr   
1BC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BD6   E1                     POP   hl   
1BD7   E5                     PUSH   hl   
1BD8   E5                     PUSH   hl   
1BD9   CD 88 0F               CALL   run   
1BDC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BEB   CD DC 0D               CALL   flushBuffer   
1BEE   76                     HALT      
1BEF                EXPECTM_2938S57:      
1BEF   E1                     POP   HL   
1BF0                          ;*Macro unroll:  test "1a= a++ a",2
1BF0   31 00 54               LD   SP,STACK   
1BF3   CD B6 0E               CALL   coldInit   
1BF6   CD 86 52               CALL   execStr   
1BF9   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1C03   CD DC 0D               CALL   flushBuffer   
1C06   E1                     POP   HL   
1C07   E5                     PUSH   HL   
1C08   11 02 00               LD   DE,2   
1C0B   B7                     OR   A   
1C0C   ED 52                  SBC   HL,DE   
1C0E   7D                     LD   A,L   
1C0F   B4                     OR   H   
1C10   CA 74 1C               JP   Z,expectM_2939S58   
1C13   CD 6E 0E               CALL   printStr   
1C16   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1C26   CD 6E 0E               CALL   printStr   
1C29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C38   21 02 00               LD   hl,2   
1C3B   E5                     PUSH   hl   
1C3C   E5                     PUSH   hl   
1C3D   CD 88 0F               CALL   run   
1C40   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C48   CD DC 0D               CALL   flushBuffer   
1C4B   CD 6E 0E               CALL   printStr   
1C4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C5B   E1                     POP   hl   
1C5C   E5                     PUSH   hl   
1C5D   E5                     PUSH   hl   
1C5E   CD 88 0F               CALL   run   
1C61   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C70   CD DC 0D               CALL   flushBuffer   
1C73   76                     HALT      
1C74                EXPECTM_2939S58:      
1C74   E1                     POP   HL   
1C75                          ;*Macro unroll:  test "-1 -1 -",0
1C75   31 00 54               LD   SP,STACK   
1C78   CD B6 0E               CALL   coldInit   
1C7B   CD 86 52               CALL   execStr   
1C7E   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1C86   CD DC 0D               CALL   flushBuffer   
1C89   E1                     POP   HL   
1C8A   E5                     PUSH   HL   
1C8B   11 00 00               LD   DE,0   
1C8E   B7                     OR   A   
1C8F   ED 52                  SBC   HL,DE   
1C91   7D                     LD   A,L   
1C92   B4                     OR   H   
1C93   CA F5 1C               JP   Z,expectM_2940S59   
1C96   CD 6E 0E               CALL   printStr   
1C99   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1CA7   CD 6E 0E               CALL   printStr   
1CAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CB9   21 00 00               LD   hl,0   
1CBC   E5                     PUSH   hl   
1CBD   E5                     PUSH   hl   
1CBE   CD 88 0F               CALL   run   
1CC1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CC9   CD DC 0D               CALL   flushBuffer   
1CCC   CD 6E 0E               CALL   printStr   
1CCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CDC   E1                     POP   hl   
1CDD   E5                     PUSH   hl   
1CDE   E5                     PUSH   hl   
1CDF   CD 88 0F               CALL   run   
1CE2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CF1   CD DC 0D               CALL   flushBuffer   
1CF4   76                     HALT      
1CF5                EXPECTM_2940S59:      
1CF5   E1                     POP   HL   
1CF6                          ;*Macro unroll:  test "5 3 -", 2
1CF6   31 00 54               LD   SP,STACK   
1CF9   CD B6 0E               CALL   coldInit   
1CFC   CD 86 52               CALL   execStr   
1CFF   35 20 33 20 2D 00      DB   "5 3 -",0   
1D05   CD DC 0D               CALL   flushBuffer   
1D08   E1                     POP   HL   
1D09   E5                     PUSH   HL   
1D0A   11 02 00               LD   DE,2   
1D0D   B7                     OR   A   
1D0E   ED 52                  SBC   HL,DE   
1D10   7D                     LD   A,L   
1D11   B4                     OR   H   
1D12   CA 72 1D               JP   Z,expectM_2941S60   
1D15   CD 6E 0E               CALL   printStr   
1D18   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1D24   CD 6E 0E               CALL   printStr   
1D27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D36   21 02 00               LD   hl,2   
1D39   E5                     PUSH   hl   
1D3A   E5                     PUSH   hl   
1D3B   CD 88 0F               CALL   run   
1D3E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D46   CD DC 0D               CALL   flushBuffer   
1D49   CD 6E 0E               CALL   printStr   
1D4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D59   E1                     POP   hl   
1D5A   E5                     PUSH   hl   
1D5B   E5                     PUSH   hl   
1D5C   CD 88 0F               CALL   run   
1D5F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D6E   CD DC 0D               CALL   flushBuffer   
1D71   76                     HALT      
1D72                EXPECTM_2941S60:      
1D72   E1                     POP   HL   
1D73                          ;*Macro unroll:  test "2 1 -",1
1D73   31 00 54               LD   SP,STACK   
1D76   CD B6 0E               CALL   coldInit   
1D79   CD 86 52               CALL   execStr   
1D7C   32 20 31 20 2D 00      DB   "2 1 -",0   
1D82   CD DC 0D               CALL   flushBuffer   
1D85   E1                     POP   HL   
1D86   E5                     PUSH   HL   
1D87   11 01 00               LD   DE,1   
1D8A   B7                     OR   A   
1D8B   ED 52                  SBC   HL,DE   
1D8D   7D                     LD   A,L   
1D8E   B4                     OR   H   
1D8F   CA EF 1D               JP   Z,expectM_2942S61   
1D92   CD 6E 0E               CALL   printStr   
1D95   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1DA1   CD 6E 0E               CALL   printStr   
1DA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DB3   21 01 00               LD   hl,1   
1DB6   E5                     PUSH   hl   
1DB7   E5                     PUSH   hl   
1DB8   CD 88 0F               CALL   run   
1DBB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DC3   CD DC 0D               CALL   flushBuffer   
1DC6   CD 6E 0E               CALL   printStr   
1DC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DD6   E1                     POP   hl   
1DD7   E5                     PUSH   hl   
1DD8   E5                     PUSH   hl   
1DD9   CD 88 0F               CALL   run   
1DDC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DEB   CD DC 0D               CALL   flushBuffer   
1DEE   76                     HALT      
1DEF                EXPECTM_2942S61:      
1DEF   E1                     POP   HL   
1DF0                          ;*Macro unroll:  test "3a= a-- a",2
1DF0   31 00 54               LD   SP,STACK   
1DF3   CD B6 0E               CALL   coldInit   
1DF6   CD 86 52               CALL   execStr   
1DF9   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1E03   CD DC 0D               CALL   flushBuffer   
1E06   E1                     POP   HL   
1E07   E5                     PUSH   HL   
1E08   11 02 00               LD   DE,2   
1E0B   B7                     OR   A   
1E0C   ED 52                  SBC   HL,DE   
1E0E   7D                     LD   A,L   
1E0F   B4                     OR   H   
1E10   CA 74 1E               JP   Z,expectM_2943S62   
1E13   CD 6E 0E               CALL   printStr   
1E16   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1E26   CD 6E 0E               CALL   printStr   
1E29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E38   21 02 00               LD   hl,2   
1E3B   E5                     PUSH   hl   
1E3C   E5                     PUSH   hl   
1E3D   CD 88 0F               CALL   run   
1E40   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E48   CD DC 0D               CALL   flushBuffer   
1E4B   CD 6E 0E               CALL   printStr   
1E4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E5B   E1                     POP   hl   
1E5C   E5                     PUSH   hl   
1E5D   E5                     PUSH   hl   
1E5E   CD 88 0F               CALL   run   
1E61   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E70   CD DC 0D               CALL   flushBuffer   
1E73   76                     HALT      
1E74                EXPECTM_2943S62:      
1E74   E1                     POP   HL   
1E75                          ;*Macro unroll:  test "3 5 &", 1
1E75   31 00 54               LD   SP,STACK   
1E78   CD B6 0E               CALL   coldInit   
1E7B   CD 86 52               CALL   execStr   
1E7E   33 20 35 20 26 00      DB   "3 5 &",0   
1E84   CD DC 0D               CALL   flushBuffer   
1E87   E1                     POP   HL   
1E88   E5                     PUSH   HL   
1E89   11 01 00               LD   DE,1   
1E8C   B7                     OR   A   
1E8D   ED 52                  SBC   HL,DE   
1E8F   7D                     LD   A,L   
1E90   B4                     OR   H   
1E91   CA F1 1E               JP   Z,expectM_2944S63   
1E94   CD 6E 0E               CALL   printStr   
1E97   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1EA3   CD 6E 0E               CALL   printStr   
1EA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EB5   21 01 00               LD   hl,1   
1EB8   E5                     PUSH   hl   
1EB9   E5                     PUSH   hl   
1EBA   CD 88 0F               CALL   run   
1EBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EC5   CD DC 0D               CALL   flushBuffer   
1EC8   CD 6E 0E               CALL   printStr   
1ECB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED8   E1                     POP   hl   
1ED9   E5                     PUSH   hl   
1EDA   E5                     PUSH   hl   
1EDB   CD 88 0F               CALL   run   
1EDE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EED   CD DC 0D               CALL   flushBuffer   
1EF0   76                     HALT      
1EF1                EXPECTM_2944S63:      
1EF1   E1                     POP   HL   
1EF2                          ;*Macro unroll:  test "3 5 |", 7
1EF2   31 00 54               LD   SP,STACK   
1EF5   CD B6 0E               CALL   coldInit   
1EF8   CD 86 52               CALL   execStr   
1EFB   33 20 35 20 7C 00      DB   "3 5 |",0   
1F01   CD DC 0D               CALL   flushBuffer   
1F04   E1                     POP   HL   
1F05   E5                     PUSH   HL   
1F06   11 07 00               LD   DE,7   
1F09   B7                     OR   A   
1F0A   ED 52                  SBC   HL,DE   
1F0C   7D                     LD   A,L   
1F0D   B4                     OR   H   
1F0E   CA 6E 1F               JP   Z,expectM_2945S64   
1F11   CD 6E 0E               CALL   printStr   
1F14   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1F20   CD 6E 0E               CALL   printStr   
1F23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F32   21 07 00               LD   hl,7   
1F35   E5                     PUSH   hl   
1F36   E5                     PUSH   hl   
1F37   CD 88 0F               CALL   run   
1F3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F42   CD DC 0D               CALL   flushBuffer   
1F45   CD 6E 0E               CALL   printStr   
1F48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F55   E1                     POP   hl   
1F56   E5                     PUSH   hl   
1F57   E5                     PUSH   hl   
1F58   CD 88 0F               CALL   run   
1F5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F6A   CD DC 0D               CALL   flushBuffer   
1F6D   76                     HALT      
1F6E                EXPECTM_2945S64:      
1F6E   E1                     POP   HL   
1F6F                          ;*Macro unroll:  test "3 5 /x", 6
1F6F   31 00 54               LD   SP,STACK   
1F72   CD B6 0E               CALL   coldInit   
1F75   CD 86 52               CALL   execStr   
1F78   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1F7F   CD DC 0D               CALL   flushBuffer   
1F82   E1                     POP   HL   
1F83   E5                     PUSH   HL   
1F84   11 06 00               LD   DE,6   
1F87   B7                     OR   A   
1F88   ED 52                  SBC   HL,DE   
1F8A   7D                     LD   A,L   
1F8B   B4                     OR   H   
1F8C   CA ED 1F               JP   Z,expectM_2946S65   
1F8F   CD 6E 0E               CALL   printStr   
1F92   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1F9F   CD 6E 0E               CALL   printStr   
1FA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FB1   21 06 00               LD   hl,6   
1FB4   E5                     PUSH   hl   
1FB5   E5                     PUSH   hl   
1FB6   CD 88 0F               CALL   run   
1FB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FC1   CD DC 0D               CALL   flushBuffer   
1FC4   CD 6E 0E               CALL   printStr   
1FC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FD4   E1                     POP   hl   
1FD5   E5                     PUSH   hl   
1FD6   E5                     PUSH   hl   
1FD7   CD 88 0F               CALL   run   
1FDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FE9   CD DC 0D               CALL   flushBuffer   
1FEC   76                     HALT      
1FED                EXPECTM_2946S65:      
1FED   E1                     POP   HL   
1FEE                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1FEE   31 00 54               LD   SP,STACK   
1FF1   CD B6 0E               CALL   coldInit   
1FF4   CD 86 52               CALL   execStr   
1FF7   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
2006   CD DC 0D               CALL   flushBuffer   
2009   E1                     POP   HL   
200A   E5                     PUSH   HL   
200B   11 06 00               LD   DE,6   
200E   B7                     OR   A   
200F   ED 52                  SBC   HL,DE   
2011   7D                     LD   A,L   
2012   B4                     OR   H   
2013   CA 7C 20               JP   Z,expectM_2947S66   
2016   CD 6E 0E               CALL   printStr   
2019   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
202E   CD 6E 0E               CALL   printStr   
2031   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2040   21 06 00               LD   hl,6   
2043   E5                     PUSH   hl   
2044   E5                     PUSH   hl   
2045   CD 88 0F               CALL   run   
2048   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2050   CD DC 0D               CALL   flushBuffer   
2053   CD 6E 0E               CALL   printStr   
2056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2063   E1                     POP   hl   
2064   E5                     PUSH   hl   
2065   E5                     PUSH   hl   
2066   CD 88 0F               CALL   run   
2069   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2078   CD DC 0D               CALL   flushBuffer   
207B   76                     HALT      
207C                EXPECTM_2947S66:      
207C   E1                     POP   HL   
207D                          ;*Macro unroll:  test "2 3 *", 6
207D   31 00 54               LD   SP,STACK   
2080   CD B6 0E               CALL   coldInit   
2083   CD 86 52               CALL   execStr   
2086   32 20 33 20 2A 00      DB   "2 3 *",0   
208C   CD DC 0D               CALL   flushBuffer   
208F   E1                     POP   HL   
2090   E5                     PUSH   HL   
2091   11 06 00               LD   DE,6   
2094   B7                     OR   A   
2095   ED 52                  SBC   HL,DE   
2097   7D                     LD   A,L   
2098   B4                     OR   H   
2099   CA F9 20               JP   Z,expectM_2948S67   
209C   CD 6E 0E               CALL   printStr   
209F   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
20AB   CD 6E 0E               CALL   printStr   
20AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20BD   21 06 00               LD   hl,6   
20C0   E5                     PUSH   hl   
20C1   E5                     PUSH   hl   
20C2   CD 88 0F               CALL   run   
20C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20CD   CD DC 0D               CALL   flushBuffer   
20D0   CD 6E 0E               CALL   printStr   
20D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E0   E1                     POP   hl   
20E1   E5                     PUSH   hl   
20E2   E5                     PUSH   hl   
20E3   CD 88 0F               CALL   run   
20E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20F5   CD DC 0D               CALL   flushBuffer   
20F8   76                     HALT      
20F9                EXPECTM_2948S67:      
20F9   E1                     POP   HL   
20FA                          ;*Macro unroll:  test "1 2 3 + *", 5
20FA   31 00 54               LD   SP,STACK   
20FD   CD B6 0E               CALL   coldInit   
2100   CD 86 52               CALL   execStr   
2103   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
210D   CD DC 0D               CALL   flushBuffer   
2110   E1                     POP   HL   
2111   E5                     PUSH   HL   
2112   11 05 00               LD   DE,5   
2115   B7                     OR   A   
2116   ED 52                  SBC   HL,DE   
2118   7D                     LD   A,L   
2119   B4                     OR   H   
211A   CA 7E 21               JP   Z,expectM_2949S68   
211D   CD 6E 0E               CALL   printStr   
2120   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2130   CD 6E 0E               CALL   printStr   
2133   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2142   21 05 00               LD   hl,5   
2145   E5                     PUSH   hl   
2146   E5                     PUSH   hl   
2147   CD 88 0F               CALL   run   
214A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2152   CD DC 0D               CALL   flushBuffer   
2155   CD 6E 0E               CALL   printStr   
2158   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2165   E1                     POP   hl   
2166   E5                     PUSH   hl   
2167   E5                     PUSH   hl   
2168   CD 88 0F               CALL   run   
216B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
217A   CD DC 0D               CALL   flushBuffer   
217D   76                     HALT      
217E                EXPECTM_2949S68:      
217E   E1                     POP   HL   
217F                          ;*Macro unroll:  test "7 3 /", 2
217F   31 00 54               LD   SP,STACK   
2182   CD B6 0E               CALL   coldInit   
2185   CD 86 52               CALL   execStr   
2188   37 20 33 20 2F 00      DB   "7 3 /",0   
218E   CD DC 0D               CALL   flushBuffer   
2191   E1                     POP   HL   
2192   E5                     PUSH   HL   
2193   11 02 00               LD   DE,2   
2196   B7                     OR   A   
2197   ED 52                  SBC   HL,DE   
2199   7D                     LD   A,L   
219A   B4                     OR   H   
219B   CA FB 21               JP   Z,expectM_2950S69   
219E   CD 6E 0E               CALL   printStr   
21A1   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
21AD   CD 6E 0E               CALL   printStr   
21B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21BF   21 02 00               LD   hl,2   
21C2   E5                     PUSH   hl   
21C3   E5                     PUSH   hl   
21C4   CD 88 0F               CALL   run   
21C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21CF   CD DC 0D               CALL   flushBuffer   
21D2   CD 6E 0E               CALL   printStr   
21D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E2   E1                     POP   hl   
21E3   E5                     PUSH   hl   
21E4   E5                     PUSH   hl   
21E5   CD 88 0F               CALL   run   
21E8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21F7   CD DC 0D               CALL   flushBuffer   
21FA   76                     HALT      
21FB                EXPECTM_2950S69:      
21FB   E1                     POP   HL   
21FC                          ;*Macro unroll:  test "100a= 1a+= a", 101
21FC   31 00 54               LD   SP,STACK   
21FF   CD B6 0E               CALL   coldInit   
2202   CD 86 52               CALL   execStr   
2205   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2212   CD DC 0D               CALL   flushBuffer   
2215   E1                     POP   HL   
2216   E5                     PUSH   HL   
2217   11 65 00               LD   DE,101   
221A   B7                     OR   A   
221B   ED 52                  SBC   HL,DE   
221D   7D                     LD   A,L   
221E   B4                     OR   H   
221F   CA 86 22               JP   Z,expectM_2951S70   
2222   CD 6E 0E               CALL   printStr   
2225   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2238   CD 6E 0E               CALL   printStr   
223B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
224A   21 65 00               LD   hl,101   
224D   E5                     PUSH   hl   
224E   E5                     PUSH   hl   
224F   CD 88 0F               CALL   run   
2252   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
225A   CD DC 0D               CALL   flushBuffer   
225D   CD 6E 0E               CALL   printStr   
2260   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
226D   E1                     POP   hl   
226E   E5                     PUSH   hl   
226F   E5                     PUSH   hl   
2270   CD 88 0F               CALL   run   
2273   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2282   CD DC 0D               CALL   flushBuffer   
2285   76                     HALT      
2286                EXPECTM_2951S70:      
2286   E1                     POP   HL   
2287                          ;*Macro unroll:  test "100a= a1-= a", 99
2287   31 00 54               LD   SP,STACK   
228A   CD B6 0E               CALL   coldInit   
228D   CD 86 52               CALL   execStr   
2290   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
229D   CD DC 0D               CALL   flushBuffer   
22A0   E1                     POP   HL   
22A1   E5                     PUSH   HL   
22A2   11 63 00               LD   DE,99   
22A5   B7                     OR   A   
22A6   ED 52                  SBC   HL,DE   
22A8   7D                     LD   A,L   
22A9   B4                     OR   H   
22AA   CA 11 23               JP   Z,expectM_2952S71   
22AD   CD 6E 0E               CALL   printStr   
22B0   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
22C3   CD 6E 0E               CALL   printStr   
22C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D5   21 63 00               LD   hl,99   
22D8   E5                     PUSH   hl   
22D9   E5                     PUSH   hl   
22DA   CD 88 0F               CALL   run   
22DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22E5   CD DC 0D               CALL   flushBuffer   
22E8   CD 6E 0E               CALL   printStr   
22EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22F8   E1                     POP   hl   
22F9   E5                     PUSH   hl   
22FA   E5                     PUSH   hl   
22FB   CD 88 0F               CALL   run   
22FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
230D   CD DC 0D               CALL   flushBuffer   
2310   76                     HALT      
2311                EXPECTM_2952S71:      
2311   E1                     POP   HL   
2312                          ;*Macro unroll:  test "100a= a2*= a", 200
2312   31 00 54               LD   SP,STACK   
2315   CD B6 0E               CALL   coldInit   
2318   CD 86 52               CALL   execStr   
231B   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2328   CD DC 0D               CALL   flushBuffer   
232B   E1                     POP   HL   
232C   E5                     PUSH   HL   
232D   11 C8 00               LD   DE,200   
2330   B7                     OR   A   
2331   ED 52                  SBC   HL,DE   
2333   7D                     LD   A,L   
2334   B4                     OR   H   
2335   CA 9C 23               JP   Z,expectM_2953S72   
2338   CD 6E 0E               CALL   printStr   
233B   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
234E   CD 6E 0E               CALL   printStr   
2351   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2360   21 C8 00               LD   hl,200   
2363   E5                     PUSH   hl   
2364   E5                     PUSH   hl   
2365   CD 88 0F               CALL   run   
2368   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2370   CD DC 0D               CALL   flushBuffer   
2373   CD 6E 0E               CALL   printStr   
2376   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2383   E1                     POP   hl   
2384   E5                     PUSH   hl   
2385   E5                     PUSH   hl   
2386   CD 88 0F               CALL   run   
2389   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2398   CD DC 0D               CALL   flushBuffer   
239B   76                     HALT      
239C                EXPECTM_2953S72:      
239C   E1                     POP   HL   
239D                          ;*Macro unroll:  test "100a= a2/= a", 50
239D   31 00 54               LD   SP,STACK   
23A0   CD B6 0E               CALL   coldInit   
23A3   CD 86 52               CALL   execStr   
23A6   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
23B3   CD DC 0D               CALL   flushBuffer   
23B6   E1                     POP   HL   
23B7   E5                     PUSH   HL   
23B8   11 32 00               LD   DE,50   
23BB   B7                     OR   A   
23BC   ED 52                  SBC   HL,DE   
23BE   7D                     LD   A,L   
23BF   B4                     OR   H   
23C0   CA 27 24               JP   Z,expectM_2954S73   
23C3   CD 6E 0E               CALL   printStr   
23C6   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
23D9   CD 6E 0E               CALL   printStr   
23DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23EB   21 32 00               LD   hl,50   
23EE   E5                     PUSH   hl   
23EF   E5                     PUSH   hl   
23F0   CD 88 0F               CALL   run   
23F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23FB   CD DC 0D               CALL   flushBuffer   
23FE   CD 6E 0E               CALL   printStr   
2401   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
240E   E1                     POP   hl   
240F   E5                     PUSH   hl   
2410   E5                     PUSH   hl   
2411   CD 88 0F               CALL   run   
2414   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2423   CD DC 0D               CALL   flushBuffer   
2426   76                     HALT      
2427                EXPECTM_2954S73:      
2427   E1                     POP   HL   
2428                          ;*Macro unroll:  test "7 3 / /re", 1
2428   31 00 54               LD   SP,STACK   
242B   CD B6 0E               CALL   coldInit   
242E   CD 86 52               CALL   execStr   
2431   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
243B   CD DC 0D               CALL   flushBuffer   
243E   E1                     POP   HL   
243F   E5                     PUSH   HL   
2440   11 01 00               LD   DE,1   
2443   B7                     OR   A   
2444   ED 52                  SBC   HL,DE   
2446   7D                     LD   A,L   
2447   B4                     OR   H   
2448   CA AC 24               JP   Z,expectM_2955S74   
244B   CD 6E 0E               CALL   printStr   
244E   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
245E   CD 6E 0E               CALL   printStr   
2461   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2470   21 01 00               LD   hl,1   
2473   E5                     PUSH   hl   
2474   E5                     PUSH   hl   
2475   CD 88 0F               CALL   run   
2478   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2480   CD DC 0D               CALL   flushBuffer   
2483   CD 6E 0E               CALL   printStr   
2486   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2493   E1                     POP   hl   
2494   E5                     PUSH   hl   
2495   E5                     PUSH   hl   
2496   CD 88 0F               CALL   run   
2499   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24A8   CD DC 0D               CALL   flushBuffer   
24AB   76                     HALT      
24AC                EXPECTM_2955S74:      
24AC   E1                     POP   HL   
24AD                          ;*Macro unroll:  test "7 3 /", 2
24AD   31 00 54               LD   SP,STACK   
24B0   CD B6 0E               CALL   coldInit   
24B3   CD 86 52               CALL   execStr   
24B6   37 20 33 20 2F 00      DB   "7 3 /",0   
24BC   CD DC 0D               CALL   flushBuffer   
24BF   E1                     POP   HL   
24C0   E5                     PUSH   HL   
24C1   11 02 00               LD   DE,2   
24C4   B7                     OR   A   
24C5   ED 52                  SBC   HL,DE   
24C7   7D                     LD   A,L   
24C8   B4                     OR   H   
24C9   CA 29 25               JP   Z,expectM_2956S75   
24CC   CD 6E 0E               CALL   printStr   
24CF   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
24DB   CD 6E 0E               CALL   printStr   
24DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24ED   21 02 00               LD   hl,2   
24F0   E5                     PUSH   hl   
24F1   E5                     PUSH   hl   
24F2   CD 88 0F               CALL   run   
24F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24FD   CD DC 0D               CALL   flushBuffer   
2500   CD 6E 0E               CALL   printStr   
2503   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2510   E1                     POP   hl   
2511   E5                     PUSH   hl   
2512   E5                     PUSH   hl   
2513   CD 88 0F               CALL   run   
2516   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2525   CD DC 0D               CALL   flushBuffer   
2528   76                     HALT      
2529                EXPECTM_2956S75:      
2529   E1                     POP   HL   
252A                          ;*Macro unroll:  test "2 3 ==", FALSE
252A   31 00 54               LD   SP,STACK   
252D   CD B6 0E               CALL   coldInit   
2530   CD 86 52               CALL   execStr   
2533   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
253A   CD DC 0D               CALL   flushBuffer   
253D   E1                     POP   HL   
253E   E5                     PUSH   HL   
253F   11 00 00               LD   DE,FALSE   
2542   B7                     OR   A   
2543   ED 52                  SBC   HL,DE   
2545   7D                     LD   A,L   
2546   B4                     OR   H   
2547   CA A8 25               JP   Z,expectM_2957S76   
254A   CD 6E 0E               CALL   printStr   
254D   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
255A   CD 6E 0E               CALL   printStr   
255D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
256C   21 00 00               LD   hl,FALSE   
256F   E5                     PUSH   hl   
2570   E5                     PUSH   hl   
2571   CD 88 0F               CALL   run   
2574   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
257C   CD DC 0D               CALL   flushBuffer   
257F   CD 6E 0E               CALL   printStr   
2582   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
258F   E1                     POP   hl   
2590   E5                     PUSH   hl   
2591   E5                     PUSH   hl   
2592   CD 88 0F               CALL   run   
2595   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25A4   CD DC 0D               CALL   flushBuffer   
25A7   76                     HALT      
25A8                EXPECTM_2957S76:      
25A8   E1                     POP   HL   
25A9                          ;*Macro unroll:  test "3 3 ==", TRUE
25A9   31 00 54               LD   SP,STACK   
25AC   CD B6 0E               CALL   coldInit   
25AF   CD 86 52               CALL   execStr   
25B2   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
25B9   CD DC 0D               CALL   flushBuffer   
25BC   E1                     POP   HL   
25BD   E5                     PUSH   HL   
25BE   11 FF FF               LD   DE,TRUE   
25C1   B7                     OR   A   
25C2   ED 52                  SBC   HL,DE   
25C4   7D                     LD   A,L   
25C5   B4                     OR   H   
25C6   CA 27 26               JP   Z,expectM_2958S77   
25C9   CD 6E 0E               CALL   printStr   
25CC   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
25D9   CD 6E 0E               CALL   printStr   
25DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25EB   21 FF FF               LD   hl,TRUE   
25EE   E5                     PUSH   hl   
25EF   E5                     PUSH   hl   
25F0   CD 88 0F               CALL   run   
25F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25FB   CD DC 0D               CALL   flushBuffer   
25FE   CD 6E 0E               CALL   printStr   
2601   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
260E   E1                     POP   hl   
260F   E5                     PUSH   hl   
2610   E5                     PUSH   hl   
2611   CD 88 0F               CALL   run   
2614   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2623   CD DC 0D               CALL   flushBuffer   
2626   76                     HALT      
2627                EXPECTM_2958S77:      
2627   E1                     POP   HL   
2628                          ;*Macro unroll:  test "1 2 <", TRUE
2628   31 00 54               LD   SP,STACK   
262B   CD B6 0E               CALL   coldInit   
262E   CD 86 52               CALL   execStr   
2631   31 20 32 20 3C 00      DB   "1 2 <",0   
2637   CD DC 0D               CALL   flushBuffer   
263A   E1                     POP   HL   
263B   E5                     PUSH   HL   
263C   11 FF FF               LD   DE,TRUE   
263F   B7                     OR   A   
2640   ED 52                  SBC   HL,DE   
2642   7D                     LD   A,L   
2643   B4                     OR   H   
2644   CA A4 26               JP   Z,expectM_2959S78   
2647   CD 6E 0E               CALL   printStr   
264A   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2656   CD 6E 0E               CALL   printStr   
2659   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2668   21 FF FF               LD   hl,TRUE   
266B   E5                     PUSH   hl   
266C   E5                     PUSH   hl   
266D   CD 88 0F               CALL   run   
2670   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2678   CD DC 0D               CALL   flushBuffer   
267B   CD 6E 0E               CALL   printStr   
267E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
268B   E1                     POP   hl   
268C   E5                     PUSH   hl   
268D   E5                     PUSH   hl   
268E   CD 88 0F               CALL   run   
2691   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26A0   CD DC 0D               CALL   flushBuffer   
26A3   76                     HALT      
26A4                EXPECTM_2959S78:      
26A4   E1                     POP   HL   
26A5                          ;*Macro unroll:  test "2 1 <", FALSE
26A5   31 00 54               LD   SP,STACK   
26A8   CD B6 0E               CALL   coldInit   
26AB   CD 86 52               CALL   execStr   
26AE   32 20 31 20 3C 00      DB   "2 1 <",0   
26B4   CD DC 0D               CALL   flushBuffer   
26B7   E1                     POP   HL   
26B8   E5                     PUSH   HL   
26B9   11 00 00               LD   DE,FALSE   
26BC   B7                     OR   A   
26BD   ED 52                  SBC   HL,DE   
26BF   7D                     LD   A,L   
26C0   B4                     OR   H   
26C1   CA 21 27               JP   Z,expectM_2960S79   
26C4   CD 6E 0E               CALL   printStr   
26C7   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
26D3   CD 6E 0E               CALL   printStr   
26D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E5   21 00 00               LD   hl,FALSE   
26E8   E5                     PUSH   hl   
26E9   E5                     PUSH   hl   
26EA   CD 88 0F               CALL   run   
26ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26F5   CD DC 0D               CALL   flushBuffer   
26F8   CD 6E 0E               CALL   printStr   
26FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2708   E1                     POP   hl   
2709   E5                     PUSH   hl   
270A   E5                     PUSH   hl   
270B   CD 88 0F               CALL   run   
270E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
271D   CD DC 0D               CALL   flushBuffer   
2720   76                     HALT      
2721                EXPECTM_2960S79:      
2721   E1                     POP   HL   
2722                          ;*Macro unroll:  test "2 3 <", TRUE
2722   31 00 54               LD   SP,STACK   
2725   CD B6 0E               CALL   coldInit   
2728   CD 86 52               CALL   execStr   
272B   32 20 33 20 3C 00      DB   "2 3 <",0   
2731   CD DC 0D               CALL   flushBuffer   
2734   E1                     POP   HL   
2735   E5                     PUSH   HL   
2736   11 FF FF               LD   DE,TRUE   
2739   B7                     OR   A   
273A   ED 52                  SBC   HL,DE   
273C   7D                     LD   A,L   
273D   B4                     OR   H   
273E   CA 9E 27               JP   Z,expectM_2961S80   
2741   CD 6E 0E               CALL   printStr   
2744   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2750   CD 6E 0E               CALL   printStr   
2753   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2762   21 FF FF               LD   hl,TRUE   
2765   E5                     PUSH   hl   
2766   E5                     PUSH   hl   
2767   CD 88 0F               CALL   run   
276A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2772   CD DC 0D               CALL   flushBuffer   
2775   CD 6E 0E               CALL   printStr   
2778   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2785   E1                     POP   hl   
2786   E5                     PUSH   hl   
2787   E5                     PUSH   hl   
2788   CD 88 0F               CALL   run   
278B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
279A   CD DC 0D               CALL   flushBuffer   
279D   76                     HALT      
279E                EXPECTM_2961S80:      
279E   E1                     POP   HL   
279F                          ;*Macro unroll:  test "3 3 <", FALSE
279F   31 00 54               LD   SP,STACK   
27A2   CD B6 0E               CALL   coldInit   
27A5   CD 86 52               CALL   execStr   
27A8   33 20 33 20 3C 00      DB   "3 3 <",0   
27AE   CD DC 0D               CALL   flushBuffer   
27B1   E1                     POP   HL   
27B2   E5                     PUSH   HL   
27B3   11 00 00               LD   DE,FALSE   
27B6   B7                     OR   A   
27B7   ED 52                  SBC   HL,DE   
27B9   7D                     LD   A,L   
27BA   B4                     OR   H   
27BB   CA 1B 28               JP   Z,expectM_2962S81   
27BE   CD 6E 0E               CALL   printStr   
27C1   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
27CD   CD 6E 0E               CALL   printStr   
27D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DF   21 00 00               LD   hl,FALSE   
27E2   E5                     PUSH   hl   
27E3   E5                     PUSH   hl   
27E4   CD 88 0F               CALL   run   
27E7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27EF   CD DC 0D               CALL   flushBuffer   
27F2   CD 6E 0E               CALL   printStr   
27F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2802   E1                     POP   hl   
2803   E5                     PUSH   hl   
2804   E5                     PUSH   hl   
2805   CD 88 0F               CALL   run   
2808   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2817   CD DC 0D               CALL   flushBuffer   
281A   76                     HALT      
281B                EXPECTM_2962S81:      
281B   E1                     POP   HL   
281C                          ;*Macro unroll:  test "1 2 >", FALSE
281C   31 00 54               LD   SP,STACK   
281F   CD B6 0E               CALL   coldInit   
2822   CD 86 52               CALL   execStr   
2825   31 20 32 20 3E 00      DB   "1 2 >",0   
282B   CD DC 0D               CALL   flushBuffer   
282E   E1                     POP   HL   
282F   E5                     PUSH   HL   
2830   11 00 00               LD   DE,FALSE   
2833   B7                     OR   A   
2834   ED 52                  SBC   HL,DE   
2836   7D                     LD   A,L   
2837   B4                     OR   H   
2838   CA 98 28               JP   Z,expectM_2963S82   
283B   CD 6E 0E               CALL   printStr   
283E   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
284A   CD 6E 0E               CALL   printStr   
284D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285C   21 00 00               LD   hl,FALSE   
285F   E5                     PUSH   hl   
2860   E5                     PUSH   hl   
2861   CD 88 0F               CALL   run   
2864   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
286C   CD DC 0D               CALL   flushBuffer   
286F   CD 6E 0E               CALL   printStr   
2872   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
287F   E1                     POP   hl   
2880   E5                     PUSH   hl   
2881   E5                     PUSH   hl   
2882   CD 88 0F               CALL   run   
2885   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2894   CD DC 0D               CALL   flushBuffer   
2897   76                     HALT      
2898                EXPECTM_2963S82:      
2898   E1                     POP   HL   
2899                          ;*Macro unroll:  test "2 1 >", TRUE
2899   31 00 54               LD   SP,STACK   
289C   CD B6 0E               CALL   coldInit   
289F   CD 86 52               CALL   execStr   
28A2   32 20 31 20 3E 00      DB   "2 1 >",0   
28A8   CD DC 0D               CALL   flushBuffer   
28AB   E1                     POP   HL   
28AC   E5                     PUSH   HL   
28AD   11 FF FF               LD   DE,TRUE   
28B0   B7                     OR   A   
28B1   ED 52                  SBC   HL,DE   
28B3   7D                     LD   A,L   
28B4   B4                     OR   H   
28B5   CA 15 29               JP   Z,expectM_2964S83   
28B8   CD 6E 0E               CALL   printStr   
28BB   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
28C7   CD 6E 0E               CALL   printStr   
28CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D9   21 FF FF               LD   hl,TRUE   
28DC   E5                     PUSH   hl   
28DD   E5                     PUSH   hl   
28DE   CD 88 0F               CALL   run   
28E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28E9   CD DC 0D               CALL   flushBuffer   
28EC   CD 6E 0E               CALL   printStr   
28EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28FC   E1                     POP   hl   
28FD   E5                     PUSH   hl   
28FE   E5                     PUSH   hl   
28FF   CD 88 0F               CALL   run   
2902   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2911   CD DC 0D               CALL   flushBuffer   
2914   76                     HALT      
2915                EXPECTM_2964S83:      
2915   E1                     POP   HL   
2916                          ;*Macro unroll:  test "3 3 >", FALSE
2916   31 00 54               LD   SP,STACK   
2919   CD B6 0E               CALL   coldInit   
291C   CD 86 52               CALL   execStr   
291F   33 20 33 20 3E 00      DB   "3 3 >",0   
2925   CD DC 0D               CALL   flushBuffer   
2928   E1                     POP   HL   
2929   E5                     PUSH   HL   
292A   11 00 00               LD   DE,FALSE   
292D   B7                     OR   A   
292E   ED 52                  SBC   HL,DE   
2930   7D                     LD   A,L   
2931   B4                     OR   H   
2932   CA 92 29               JP   Z,expectM_2965S84   
2935   CD 6E 0E               CALL   printStr   
2938   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2944   CD 6E 0E               CALL   printStr   
2947   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2956   21 00 00               LD   hl,FALSE   
2959   E5                     PUSH   hl   
295A   E5                     PUSH   hl   
295B   CD 88 0F               CALL   run   
295E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2966   CD DC 0D               CALL   flushBuffer   
2969   CD 6E 0E               CALL   printStr   
296C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2979   E1                     POP   hl   
297A   E5                     PUSH   hl   
297B   E5                     PUSH   hl   
297C   CD 88 0F               CALL   run   
297F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
298E   CD DC 0D               CALL   flushBuffer   
2991   76                     HALT      
2992                EXPECTM_2965S84:      
2992   E1                     POP   HL   
2993                          ;*Macro unroll:  test "4 3 >", TRUE
2993   31 00 54               LD   SP,STACK   
2996   CD B6 0E               CALL   coldInit   
2999   CD 86 52               CALL   execStr   
299C   34 20 33 20 3E 00      DB   "4 3 >",0   
29A2   CD DC 0D               CALL   flushBuffer   
29A5   E1                     POP   HL   
29A6   E5                     PUSH   HL   
29A7   11 FF FF               LD   DE,TRUE   
29AA   B7                     OR   A   
29AB   ED 52                  SBC   HL,DE   
29AD   7D                     LD   A,L   
29AE   B4                     OR   H   
29AF   CA 0F 2A               JP   Z,expectM_2966S85   
29B2   CD 6E 0E               CALL   printStr   
29B5   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
29C1   CD 6E 0E               CALL   printStr   
29C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29D3   21 FF FF               LD   hl,TRUE   
29D6   E5                     PUSH   hl   
29D7   E5                     PUSH   hl   
29D8   CD 88 0F               CALL   run   
29DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29E3   CD DC 0D               CALL   flushBuffer   
29E6   CD 6E 0E               CALL   printStr   
29E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29F6   E1                     POP   hl   
29F7   E5                     PUSH   hl   
29F8   E5                     PUSH   hl   
29F9   CD 88 0F               CALL   run   
29FC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A0B   CD DC 0D               CALL   flushBuffer   
2A0E   76                     HALT      
2A0F                EXPECTM_2966S85:      
2A0F   E1                     POP   HL   
2A10                          ;*Macro unroll:  test "2 2 <=", TRUE
2A10   31 00 54               LD   SP,STACK   
2A13   CD B6 0E               CALL   coldInit   
2A16   CD 86 52               CALL   execStr   
2A19   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2A20   CD DC 0D               CALL   flushBuffer   
2A23   E1                     POP   HL   
2A24   E5                     PUSH   HL   
2A25   11 FF FF               LD   DE,TRUE   
2A28   B7                     OR   A   
2A29   ED 52                  SBC   HL,DE   
2A2B   7D                     LD   A,L   
2A2C   B4                     OR   H   
2A2D   CA 8E 2A               JP   Z,expectM_2967S86   
2A30   CD 6E 0E               CALL   printStr   
2A33   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2A40   CD 6E 0E               CALL   printStr   
2A43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A52   21 FF FF               LD   hl,TRUE   
2A55   E5                     PUSH   hl   
2A56   E5                     PUSH   hl   
2A57   CD 88 0F               CALL   run   
2A5A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A62   CD DC 0D               CALL   flushBuffer   
2A65   CD 6E 0E               CALL   printStr   
2A68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A75   E1                     POP   hl   
2A76   E5                     PUSH   hl   
2A77   E5                     PUSH   hl   
2A78   CD 88 0F               CALL   run   
2A7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A8A   CD DC 0D               CALL   flushBuffer   
2A8D   76                     HALT      
2A8E                EXPECTM_2967S86:      
2A8E   E1                     POP   HL   
2A8F                          ;*Macro unroll:  test "2 2 >=", TRUE
2A8F   31 00 54               LD   SP,STACK   
2A92   CD B6 0E               CALL   coldInit   
2A95   CD 86 52               CALL   execStr   
2A98   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2A9F   CD DC 0D               CALL   flushBuffer   
2AA2   E1                     POP   HL   
2AA3   E5                     PUSH   HL   
2AA4   11 FF FF               LD   DE,TRUE   
2AA7   B7                     OR   A   
2AA8   ED 52                  SBC   HL,DE   
2AAA   7D                     LD   A,L   
2AAB   B4                     OR   H   
2AAC   CA 0D 2B               JP   Z,expectM_2968S87   
2AAF   CD 6E 0E               CALL   printStr   
2AB2   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2ABF   CD 6E 0E               CALL   printStr   
2AC2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AD1   21 FF FF               LD   hl,TRUE   
2AD4   E5                     PUSH   hl   
2AD5   E5                     PUSH   hl   
2AD6   CD 88 0F               CALL   run   
2AD9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AE1   CD DC 0D               CALL   flushBuffer   
2AE4   CD 6E 0E               CALL   printStr   
2AE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AF4   E1                     POP   hl   
2AF5   E5                     PUSH   hl   
2AF6   E5                     PUSH   hl   
2AF7   CD 88 0F               CALL   run   
2AFA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B09   CD DC 0D               CALL   flushBuffer   
2B0C   76                     HALT      
2B0D                EXPECTM_2968S87:      
2B0D   E1                     POP   HL   
2B0E                          ;*Macro unroll:  test "3 1 <<", 6
2B0E   31 00 54               LD   SP,STACK   
2B11   CD B6 0E               CALL   coldInit   
2B14   CD 86 52               CALL   execStr   
2B17   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2B1E   CD DC 0D               CALL   flushBuffer   
2B21   E1                     POP   HL   
2B22   E5                     PUSH   HL   
2B23   11 06 00               LD   DE,6   
2B26   B7                     OR   A   
2B27   ED 52                  SBC   HL,DE   
2B29   7D                     LD   A,L   
2B2A   B4                     OR   H   
2B2B   CA 8C 2B               JP   Z,expectM_2969S88   
2B2E   CD 6E 0E               CALL   printStr   
2B31   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2B3E   CD 6E 0E               CALL   printStr   
2B41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B50   21 06 00               LD   hl,6   
2B53   E5                     PUSH   hl   
2B54   E5                     PUSH   hl   
2B55   CD 88 0F               CALL   run   
2B58   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B60   CD DC 0D               CALL   flushBuffer   
2B63   CD 6E 0E               CALL   printStr   
2B66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B73   E1                     POP   hl   
2B74   E5                     PUSH   hl   
2B75   E5                     PUSH   hl   
2B76   CD 88 0F               CALL   run   
2B79   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B88   CD DC 0D               CALL   flushBuffer   
2B8B   76                     HALT      
2B8C                EXPECTM_2969S88:      
2B8C   E1                     POP   HL   
2B8D                          ;*Macro unroll:  test "10 1 >>", 5
2B8D   31 00 54               LD   SP,STACK   
2B90   CD B6 0E               CALL   coldInit   
2B93   CD 86 52               CALL   execStr   
2B96   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2B9E   CD DC 0D               CALL   flushBuffer   
2BA1   E1                     POP   HL   
2BA2   E5                     PUSH   HL   
2BA3   11 05 00               LD   DE,5   
2BA6   B7                     OR   A   
2BA7   ED 52                  SBC   HL,DE   
2BA9   7D                     LD   A,L   
2BAA   B4                     OR   H   
2BAB   CA 0D 2C               JP   Z,expectM_2970S89   
2BAE   CD 6E 0E               CALL   printStr   
2BB1   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2BBF   CD 6E 0E               CALL   printStr   
2BC2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BD1   21 05 00               LD   hl,5   
2BD4   E5                     PUSH   hl   
2BD5   E5                     PUSH   hl   
2BD6   CD 88 0F               CALL   run   
2BD9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BE1   CD DC 0D               CALL   flushBuffer   
2BE4   CD 6E 0E               CALL   printStr   
2BE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BF4   E1                     POP   hl   
2BF5   E5                     PUSH   hl   
2BF6   E5                     PUSH   hl   
2BF7   CD 88 0F               CALL   run   
2BFA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C09   CD DC 0D               CALL   flushBuffer   
2C0C   76                     HALT      
2C0D                EXPECTM_2970S89:      
2C0D   E1                     POP   HL   
2C0E                          ;*Macro unroll:  test "1 x = x", 1
2C0E   31 00 54               LD   SP,STACK   
2C11   CD B6 0E               CALL   coldInit   
2C14   CD 86 52               CALL   execStr   
2C17   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2C1F   CD DC 0D               CALL   flushBuffer   
2C22   E1                     POP   HL   
2C23   E5                     PUSH   HL   
2C24   11 01 00               LD   DE,1   
2C27   B7                     OR   A   
2C28   ED 52                  SBC   HL,DE   
2C2A   7D                     LD   A,L   
2C2B   B4                     OR   H   
2C2C   CA 8E 2C               JP   Z,expectM_2971S90   
2C2F   CD 6E 0E               CALL   printStr   
2C32   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2C40   CD 6E 0E               CALL   printStr   
2C43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C52   21 01 00               LD   hl,1   
2C55   E5                     PUSH   hl   
2C56   E5                     PUSH   hl   
2C57   CD 88 0F               CALL   run   
2C5A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C62   CD DC 0D               CALL   flushBuffer   
2C65   CD 6E 0E               CALL   printStr   
2C68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C75   E1                     POP   hl   
2C76   E5                     PUSH   hl   
2C77   E5                     PUSH   hl   
2C78   CD 88 0F               CALL   run   
2C7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C8A   CD DC 0D               CALL   flushBuffer   
2C8D   76                     HALT      
2C8E                EXPECTM_2971S90:      
2C8E   E1                     POP   HL   
2C8F                          ;*Macro unroll:  test "1{}^", 1
2C8F   31 00 54               LD   SP,STACK   
2C92   CD B6 0E               CALL   coldInit   
2C95   CD 86 52               CALL   execStr   
2C98   31 7B 7D 5E 00         DB   "1{}^",0   
2C9D   CD DC 0D               CALL   flushBuffer   
2CA0   E1                     POP   HL   
2CA1   E5                     PUSH   HL   
2CA2   11 01 00               LD   DE,1   
2CA5   B7                     OR   A   
2CA6   ED 52                  SBC   HL,DE   
2CA8   7D                     LD   A,L   
2CA9   B4                     OR   H   
2CAA   CA 09 2D               JP   Z,expectM_2972S91   
2CAD   CD 6E 0E               CALL   printStr   
2CB0   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2CBB   CD 6E 0E               CALL   printStr   
2CBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CCD   21 01 00               LD   hl,1   
2CD0   E5                     PUSH   hl   
2CD1   E5                     PUSH   hl   
2CD2   CD 88 0F               CALL   run   
2CD5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CDD   CD DC 0D               CALL   flushBuffer   
2CE0   CD 6E 0E               CALL   printStr   
2CE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CF0   E1                     POP   hl   
2CF1   E5                     PUSH   hl   
2CF2   E5                     PUSH   hl   
2CF3   CD 88 0F               CALL   run   
2CF6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D05   CD DC 0D               CALL   flushBuffer   
2D08   76                     HALT      
2D09                EXPECTM_2972S91:      
2D09   E1                     POP   HL   
2D0A                          ;*Macro unroll:  test "{1}^", 1
2D0A   31 00 54               LD   SP,STACK   
2D0D   CD B6 0E               CALL   coldInit   
2D10   CD 86 52               CALL   execStr   
2D13   7B 31 7D 5E 00         DB   "{1}^",0   
2D18   CD DC 0D               CALL   flushBuffer   
2D1B   E1                     POP   HL   
2D1C   E5                     PUSH   HL   
2D1D   11 01 00               LD   DE,1   
2D20   B7                     OR   A   
2D21   ED 52                  SBC   HL,DE   
2D23   7D                     LD   A,L   
2D24   B4                     OR   H   
2D25   CA 84 2D               JP   Z,expectM_2973S92   
2D28   CD 6E 0E               CALL   printStr   
2D2B   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2D36   CD 6E 0E               CALL   printStr   
2D39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D48   21 01 00               LD   hl,1   
2D4B   E5                     PUSH   hl   
2D4C   E5                     PUSH   hl   
2D4D   CD 88 0F               CALL   run   
2D50   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D58   CD DC 0D               CALL   flushBuffer   
2D5B   CD 6E 0E               CALL   printStr   
2D5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D6B   E1                     POP   hl   
2D6C   E5                     PUSH   hl   
2D6D   E5                     PUSH   hl   
2D6E   CD 88 0F               CALL   run   
2D71   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D80   CD DC 0D               CALL   flushBuffer   
2D83   76                     HALT      
2D84                EXPECTM_2973S92:      
2D84   E1                     POP   HL   
2D85                          ;*Macro unroll:  test "{{1}^}^", 1
2D85   31 00 54               LD   SP,STACK   
2D88   CD B6 0E               CALL   coldInit   
2D8B   CD 86 52               CALL   execStr   
2D8E   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2D96   CD DC 0D               CALL   flushBuffer   
2D99   E1                     POP   HL   
2D9A   E5                     PUSH   HL   
2D9B   11 01 00               LD   DE,1   
2D9E   B7                     OR   A   
2D9F   ED 52                  SBC   HL,DE   
2DA1   7D                     LD   A,L   
2DA2   B4                     OR   H   
2DA3   CA 05 2E               JP   Z,expectM_2974S93   
2DA6   CD 6E 0E               CALL   printStr   
2DA9   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2DB7   CD 6E 0E               CALL   printStr   
2DBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DC9   21 01 00               LD   hl,1   
2DCC   E5                     PUSH   hl   
2DCD   E5                     PUSH   hl   
2DCE   CD 88 0F               CALL   run   
2DD1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DD9   CD DC 0D               CALL   flushBuffer   
2DDC   CD 6E 0E               CALL   printStr   
2DDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DEC   E1                     POP   hl   
2DED   E5                     PUSH   hl   
2DEE   E5                     PUSH   hl   
2DEF   CD 88 0F               CALL   run   
2DF2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E01   CD DC 0D               CALL   flushBuffer   
2E04   76                     HALT      
2E05                EXPECTM_2974S93:      
2E05   E1                     POP   HL   
2E06                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2E06   31 00 54               LD   SP,STACK   
2E09   CD B6 0E               CALL   coldInit   
2E0C   CD 86 52               CALL   execStr   
2E0F   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2E1A   CD DC 0D               CALL   flushBuffer   
2E1D   E1                     POP   HL   
2E1E   E5                     PUSH   HL   
2E1F   11 01 00               LD   DE,1   
2E22   B7                     OR   A   
2E23   ED 52                  SBC   HL,DE   
2E25   7D                     LD   A,L   
2E26   B4                     OR   H   
2E27   CA 8C 2E               JP   Z,expectM_2975S94   
2E2A   CD 6E 0E               CALL   printStr   
2E2D   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2E3E   CD 6E 0E               CALL   printStr   
2E41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E50   21 01 00               LD   hl,1   
2E53   E5                     PUSH   hl   
2E54   E5                     PUSH   hl   
2E55   CD 88 0F               CALL   run   
2E58   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E60   CD DC 0D               CALL   flushBuffer   
2E63   CD 6E 0E               CALL   printStr   
2E66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E73   E1                     POP   hl   
2E74   E5                     PUSH   hl   
2E75   E5                     PUSH   hl   
2E76   CD 88 0F               CALL   run   
2E79   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E88   CD DC 0D               CALL   flushBuffer   
2E8B   76                     HALT      
2E8C                EXPECTM_2975S94:      
2E8C   E1                     POP   HL   
2E8D                          ;*Macro unroll:  test "5 /f{10} ?", 5
2E8D   31 00 54               LD   SP,STACK   
2E90   CD B6 0E               CALL   coldInit   
2E93   CD 86 52               CALL   execStr   
2E96   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2EA1   CD DC 0D               CALL   flushBuffer   
2EA4   E1                     POP   HL   
2EA5   E5                     PUSH   HL   
2EA6   11 05 00               LD   DE,5   
2EA9   B7                     OR   A   
2EAA   ED 52                  SBC   HL,DE   
2EAC   7D                     LD   A,L   
2EAD   B4                     OR   H   
2EAE   CA 13 2F               JP   Z,expectM_2976S95   
2EB1   CD 6E 0E               CALL   printStr   
2EB4   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2EC5   CD 6E 0E               CALL   printStr   
2EC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ED7   21 05 00               LD   hl,5   
2EDA   E5                     PUSH   hl   
2EDB   E5                     PUSH   hl   
2EDC   CD 88 0F               CALL   run   
2EDF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EE7   CD DC 0D               CALL   flushBuffer   
2EEA   CD 6E 0E               CALL   printStr   
2EED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EFA   E1                     POP   hl   
2EFB   E5                     PUSH   hl   
2EFC   E5                     PUSH   hl   
2EFD   CD 88 0F               CALL   run   
2F00   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F0F   CD DC 0D               CALL   flushBuffer   
2F12   76                     HALT      
2F13                EXPECTM_2976S95:      
2F13   E1                     POP   HL   
2F14                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2F14   31 00 54               LD   SP,STACK   
2F17   CD B6 0E               CALL   coldInit   
2F1A   CD 86 52               CALL   execStr   
2F1D   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2F2A   CD DC 0D               CALL   flushBuffer   
2F2D   E1                     POP   HL   
2F2E   E5                     PUSH   HL   
2F2F   11 0F 00               LD   DE,15   
2F32   B7                     OR   A   
2F33   ED 52                  SBC   HL,DE   
2F35   7D                     LD   A,L   
2F36   B4                     OR   H   
2F37   CA 9E 2F               JP   Z,expectM_2977S96   
2F3A   CD 6E 0E               CALL   printStr   
2F3D   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2F50   CD 6E 0E               CALL   printStr   
2F53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F62   21 0F 00               LD   hl,15   
2F65   E5                     PUSH   hl   
2F66   E5                     PUSH   hl   
2F67   CD 88 0F               CALL   run   
2F6A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F72   CD DC 0D               CALL   flushBuffer   
2F75   CD 6E 0E               CALL   printStr   
2F78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F85   E1                     POP   hl   
2F86   E5                     PUSH   hl   
2F87   E5                     PUSH   hl   
2F88   CD 88 0F               CALL   run   
2F8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F9A   CD DC 0D               CALL   flushBuffer   
2F9D   76                     HALT      
2F9E                EXPECTM_2977S96:      
2F9E   E1                     POP   HL   
2F9F                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2F9F   31 00 54               LD   SP,STACK   
2FA2   CD B6 0E               CALL   coldInit   
2FA5   CD 86 52               CALL   execStr   
2FA8   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2FBA   CD DC 0D               CALL   flushBuffer   
2FBD   E1                     POP   HL   
2FBE   E5                     PUSH   HL   
2FBF   11 15 00               LD   DE,21   
2FC2   B7                     OR   A   
2FC3   ED 52                  SBC   HL,DE   
2FC5   7D                     LD   A,L   
2FC6   B4                     OR   H   
2FC7   CA 33 30               JP   Z,expectM_2978S97   
2FCA   CD 6E 0E               CALL   printStr   
2FCD   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2FE5   CD 6E 0E               CALL   printStr   
2FE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FF7   21 15 00               LD   hl,21   
2FFA   E5                     PUSH   hl   
2FFB   E5                     PUSH   hl   
2FFC   CD 88 0F               CALL   run   
2FFF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3007   CD DC 0D               CALL   flushBuffer   
300A   CD 6E 0E               CALL   printStr   
300D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
301A   E1                     POP   hl   
301B   E5                     PUSH   hl   
301C   E5                     PUSH   hl   
301D   CD 88 0F               CALL   run   
3020   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
302F   CD DC 0D               CALL   flushBuffer   
3032   76                     HALT      
3033                EXPECTM_2978S97:      
3033   E1                     POP   HL   
3034                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
3034   31 00 54               LD   SP,STACK   
3037   CD B6 0E               CALL   coldInit   
303A   CD 86 52               CALL   execStr   
303D   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
304F   CD DC 0D               CALL   flushBuffer   
3052   E1                     POP   HL   
3053   E5                     PUSH   HL   
3054   11 0B 00               LD   DE,11   
3057   B7                     OR   A   
3058   ED 52                  SBC   HL,DE   
305A   7D                     LD   A,L   
305B   B4                     OR   H   
305C   CA C8 30               JP   Z,expectM_2979S98   
305F   CD 6E 0E               CALL   printStr   
3062   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
307A   CD 6E 0E               CALL   printStr   
307D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
308C   21 0B 00               LD   hl,11   
308F   E5                     PUSH   hl   
3090   E5                     PUSH   hl   
3091   CD 88 0F               CALL   run   
3094   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
309C   CD DC 0D               CALL   flushBuffer   
309F   CD 6E 0E               CALL   printStr   
30A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30AF   E1                     POP   hl   
30B0   E5                     PUSH   hl   
30B1   E5                     PUSH   hl   
30B2   CD 88 0F               CALL   run   
30B5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30C4   CD DC 0D               CALL   flushBuffer   
30C7   76                     HALT      
30C8                EXPECTM_2979S98:      
30C8   E1                     POP   HL   
30C9                          ;*Macro unroll:  test ": 0#", $0000
30C9   31 00 54               LD   SP,STACK   
30CC   CD B6 0E               CALL   coldInit   
30CF   CD 86 52               CALL   execStr   
30D2   3A 20 30 23 00         DB   ": 0#",0   
30D7   CD DC 0D               CALL   flushBuffer   
30DA   E1                     POP   HL   
30DB   E5                     PUSH   HL   
30DC   11 00 00               LD   DE,$0000   
30DF   B7                     OR   A   
30E0   ED 52                  SBC   HL,DE   
30E2   7D                     LD   A,L   
30E3   B4                     OR   H   
30E4   CA 43 31               JP   Z,expectM_2980S99   
30E7   CD 6E 0E               CALL   printStr   
30EA   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
30F5   CD 6E 0E               CALL   printStr   
30F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3107   21 00 00               LD   hl,$0000   
310A   E5                     PUSH   hl   
310B   E5                     PUSH   hl   
310C   CD 88 0F               CALL   run   
310F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3117   CD DC 0D               CALL   flushBuffer   
311A   CD 6E 0E               CALL   printStr   
311D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
312A   E1                     POP   hl   
312B   E5                     PUSH   hl   
312C   E5                     PUSH   hl   
312D   CD 88 0F               CALL   run   
3130   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
313F   CD DC 0D               CALL   flushBuffer   
3142   76                     HALT      
3143                EXPECTM_2980S99:      
3143   E1                     POP   HL   
3144                          ;*Macro unroll:  test ":a 0#", $0100
3144   31 00 54               LD   SP,STACK   
3147   CD B6 0E               CALL   coldInit   
314A   CD 86 52               CALL   execStr   
314D   3A 61 20 30 23 00      DB   ":a 0#",0   
3153   CD DC 0D               CALL   flushBuffer   
3156   E1                     POP   HL   
3157   E5                     PUSH   HL   
3158   11 00 01               LD   DE,$0100   
315B   B7                     OR   A   
315C   ED 52                  SBC   HL,DE   
315E   7D                     LD   A,L   
315F   B4                     OR   H   
3160   CA C0 31               JP   Z,expectM_2981S100   
3163   CD 6E 0E               CALL   printStr   
3166   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
3172   CD 6E 0E               CALL   printStr   
3175   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3184   21 00 01               LD   hl,$0100   
3187   E5                     PUSH   hl   
3188   E5                     PUSH   hl   
3189   CD 88 0F               CALL   run   
318C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3194   CD DC 0D               CALL   flushBuffer   
3197   CD 6E 0E               CALL   printStr   
319A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31A7   E1                     POP   hl   
31A8   E5                     PUSH   hl   
31A9   E5                     PUSH   hl   
31AA   CD 88 0F               CALL   run   
31AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31BC   CD DC 0D               CALL   flushBuffer   
31BF   76                     HALT      
31C0                EXPECTM_2981S100:      
31C0   E1                     POP   HL   
31C1                          ;*Macro unroll:  test ":a: 0#", $0100
31C1   31 00 54               LD   SP,STACK   
31C4   CD B6 0E               CALL   coldInit   
31C7   CD 86 52               CALL   execStr   
31CA   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
31D1   CD DC 0D               CALL   flushBuffer   
31D4   E1                     POP   HL   
31D5   E5                     PUSH   HL   
31D6   11 00 01               LD   DE,$0100   
31D9   B7                     OR   A   
31DA   ED 52                  SBC   HL,DE   
31DC   7D                     LD   A,L   
31DD   B4                     OR   H   
31DE   CA 3F 32               JP   Z,expectM_2982S101   
31E1   CD 6E 0E               CALL   printStr   
31E4   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
31F1   CD 6E 0E               CALL   printStr   
31F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3203   21 00 01               LD   hl,$0100   
3206   E5                     PUSH   hl   
3207   E5                     PUSH   hl   
3208   CD 88 0F               CALL   run   
320B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3213   CD DC 0D               CALL   flushBuffer   
3216   CD 6E 0E               CALL   printStr   
3219   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3226   E1                     POP   hl   
3227   E5                     PUSH   hl   
3228   E5                     PUSH   hl   
3229   CD 88 0F               CALL   run   
322C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
323B   CD DC 0D               CALL   flushBuffer   
323E   76                     HALT      
323F                EXPECTM_2982S101:      
323F   E1                     POP   HL   
3240                          ;*Macro unroll:  test ":a:b 0#", $0201
3240   31 00 54               LD   SP,STACK   
3243   CD B6 0E               CALL   coldInit   
3246   CD 86 52               CALL   execStr   
3249   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
3251   CD DC 0D               CALL   flushBuffer   
3254   E1                     POP   HL   
3255   E5                     PUSH   HL   
3256   11 01 02               LD   DE,$0201   
3259   B7                     OR   A   
325A   ED 52                  SBC   HL,DE   
325C   7D                     LD   A,L   
325D   B4                     OR   H   
325E   CA C0 32               JP   Z,expectM_2983S102   
3261   CD 6E 0E               CALL   printStr   
3264   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
3272   CD 6E 0E               CALL   printStr   
3275   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3284   21 01 02               LD   hl,$0201   
3287   E5                     PUSH   hl   
3288   E5                     PUSH   hl   
3289   CD 88 0F               CALL   run   
328C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3294   CD DC 0D               CALL   flushBuffer   
3297   CD 6E 0E               CALL   printStr   
329A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A7   E1                     POP   hl   
32A8   E5                     PUSH   hl   
32A9   E5                     PUSH   hl   
32AA   CD 88 0F               CALL   run   
32AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32BC   CD DC 0D               CALL   flushBuffer   
32BF   76                     HALT      
32C0                EXPECTM_2983S102:      
32C0   E1                     POP   HL   
32C1                          ;*Macro unroll:  test "::b 0#", $0101
32C1   31 00 54               LD   SP,STACK   
32C4   CD B6 0E               CALL   coldInit   
32C7   CD 86 52               CALL   execStr   
32CA   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
32D1   CD DC 0D               CALL   flushBuffer   
32D4   E1                     POP   HL   
32D5   E5                     PUSH   HL   
32D6   11 01 01               LD   DE,$0101   
32D9   B7                     OR   A   
32DA   ED 52                  SBC   HL,DE   
32DC   7D                     LD   A,L   
32DD   B4                     OR   H   
32DE   CA 3F 33               JP   Z,expectM_2984S103   
32E1   CD 6E 0E               CALL   printStr   
32E4   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
32F1   CD 6E 0E               CALL   printStr   
32F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3303   21 01 01               LD   hl,$0101   
3306   E5                     PUSH   hl   
3307   E5                     PUSH   hl   
3308   CD 88 0F               CALL   run   
330B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3313   CD DC 0D               CALL   flushBuffer   
3316   CD 6E 0E               CALL   printStr   
3319   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3326   E1                     POP   hl   
3327   E5                     PUSH   hl   
3328   E5                     PUSH   hl   
3329   CD 88 0F               CALL   run   
332C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
333B   CD DC 0D               CALL   flushBuffer   
333E   76                     HALT      
333F                EXPECTM_2984S103:      
333F   E1                     POP   HL   
3340                          ;*Macro unroll:  test ":{2};^", 2
3340   31 00 54               LD   SP,STACK   
3343   CD B6 0E               CALL   coldInit   
3346   CD 86 52               CALL   execStr   
3349   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
3350   CD DC 0D               CALL   flushBuffer   
3353   E1                     POP   HL   
3354   E5                     PUSH   HL   
3355   11 02 00               LD   DE,2   
3358   B7                     OR   A   
3359   ED 52                  SBC   HL,DE   
335B   7D                     LD   A,L   
335C   B4                     OR   H   
335D   CA BE 33               JP   Z,expectM_2985S104   
3360   CD 6E 0E               CALL   printStr   
3363   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
3370   CD 6E 0E               CALL   printStr   
3373   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3382   21 02 00               LD   hl,2   
3385   E5                     PUSH   hl   
3386   E5                     PUSH   hl   
3387   CD 88 0F               CALL   run   
338A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3392   CD DC 0D               CALL   flushBuffer   
3395   CD 6E 0E               CALL   printStr   
3398   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33A5   E1                     POP   hl   
33A6   E5                     PUSH   hl   
33A7   E5                     PUSH   hl   
33A8   CD 88 0F               CALL   run   
33AB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33BA   CD DC 0D               CALL   flushBuffer   
33BD   76                     HALT      
33BE                EXPECTM_2985S104:      
33BE   E1                     POP   HL   
33BF                          ;*Macro unroll:  test ":a{2};^", 2
33BF   31 00 54               LD   SP,STACK   
33C2   CD B6 0E               CALL   coldInit   
33C5   CD 86 52               CALL   execStr   
33C8   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
33D0   CD DC 0D               CALL   flushBuffer   
33D3   E1                     POP   HL   
33D4   E5                     PUSH   HL   
33D5   11 02 00               LD   DE,2   
33D8   B7                     OR   A   
33D9   ED 52                  SBC   HL,DE   
33DB   7D                     LD   A,L   
33DC   B4                     OR   H   
33DD   CA 3F 34               JP   Z,expectM_2986S105   
33E0   CD 6E 0E               CALL   printStr   
33E3   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
33F1   CD 6E 0E               CALL   printStr   
33F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3403   21 02 00               LD   hl,2   
3406   E5                     PUSH   hl   
3407   E5                     PUSH   hl   
3408   CD 88 0F               CALL   run   
340B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3413   CD DC 0D               CALL   flushBuffer   
3416   CD 6E 0E               CALL   printStr   
3419   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3426   E1                     POP   hl   
3427   E5                     PUSH   hl   
3428   E5                     PUSH   hl   
3429   CD 88 0F               CALL   run   
342C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
343B   CD DC 0D               CALL   flushBuffer   
343E   76                     HALT      
343F                EXPECTM_2986S105:      
343F   E1                     POP   HL   
3440                          ;*Macro unroll:  test "5 :a{%a};^", 5
3440   31 00 54               LD   SP,STACK   
3443   CD B6 0E               CALL   coldInit   
3446   CD 86 52               CALL   execStr   
3449   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
3454   CD DC 0D               CALL   flushBuffer   
3457   E1                     POP   HL   
3458   E5                     PUSH   HL   
3459   11 05 00               LD   DE,5   
345C   B7                     OR   A   
345D   ED 52                  SBC   HL,DE   
345F   7D                     LD   A,L   
3460   B4                     OR   H   
3461   CA C6 34               JP   Z,expectM_2987S106   
3464   CD 6E 0E               CALL   printStr   
3467   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
3478   CD 6E 0E               CALL   printStr   
347B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
348A   21 05 00               LD   hl,5   
348D   E5                     PUSH   hl   
348E   E5                     PUSH   hl   
348F   CD 88 0F               CALL   run   
3492   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
349A   CD DC 0D               CALL   flushBuffer   
349D   CD 6E 0E               CALL   printStr   
34A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34AD   E1                     POP   hl   
34AE   E5                     PUSH   hl   
34AF   E5                     PUSH   hl   
34B0   CD 88 0F               CALL   run   
34B3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34C2   CD DC 0D               CALL   flushBuffer   
34C5   76                     HALT      
34C6                EXPECTM_2987S106:      
34C6   E1                     POP   HL   
34C7                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
34C7   31 00 54               LD   SP,STACK   
34CA   CD B6 0E               CALL   coldInit   
34CD   CD 86 52               CALL   execStr   
34D0   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
34DD   CD DC 0D               CALL   flushBuffer   
34E0   E1                     POP   HL   
34E1   E5                     PUSH   HL   
34E2   11 05 00               LD   DE,5   
34E5   B7                     OR   A   
34E6   ED 52                  SBC   HL,DE   
34E8   7D                     LD   A,L   
34E9   B4                     OR   H   
34EA   CA 51 35               JP   Z,expectM_2988S107   
34ED   CD 6E 0E               CALL   printStr   
34F0   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
3503   CD 6E 0E               CALL   printStr   
3506   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3515   21 05 00               LD   hl,5   
3518   E5                     PUSH   hl   
3519   E5                     PUSH   hl   
351A   CD 88 0F               CALL   run   
351D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3525   CD DC 0D               CALL   flushBuffer   
3528   CD 6E 0E               CALL   printStr   
352B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3538   E1                     POP   hl   
3539   E5                     PUSH   hl   
353A   E5                     PUSH   hl   
353B   CD 88 0F               CALL   run   
353E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
354D   CD DC 0D               CALL   flushBuffer   
3550   76                     HALT      
3551                EXPECTM_2988S107:      
3551   E1                     POP   HL   
3552                          ;*Macro unroll:  test ":a{{2}^};^", 2
3552   31 00 54               LD   SP,STACK   
3555   CD B6 0E               CALL   coldInit   
3558   CD 86 52               CALL   execStr   
355B   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
3566   CD DC 0D               CALL   flushBuffer   
3569   E1                     POP   HL   
356A   E5                     PUSH   HL   
356B   11 02 00               LD   DE,2   
356E   B7                     OR   A   
356F   ED 52                  SBC   HL,DE   
3571   7D                     LD   A,L   
3572   B4                     OR   H   
3573   CA D8 35               JP   Z,expectM_2989S108   
3576   CD 6E 0E               CALL   printStr   
3579   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
358A   CD 6E 0E               CALL   printStr   
358D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
359C   21 02 00               LD   hl,2   
359F   E5                     PUSH   hl   
35A0   E5                     PUSH   hl   
35A1   CD 88 0F               CALL   run   
35A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35AC   CD DC 0D               CALL   flushBuffer   
35AF   CD 6E 0E               CALL   printStr   
35B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35BF   E1                     POP   hl   
35C0   E5                     PUSH   hl   
35C1   E5                     PUSH   hl   
35C2   CD 88 0F               CALL   run   
35C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35D4   CD DC 0D               CALL   flushBuffer   
35D7   76                     HALT      
35D8                EXPECTM_2989S108:      
35D8   E1                     POP   HL   
35D9                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
35D9   31 00 54               LD   SP,STACK   
35DC   CD B6 0E               CALL   coldInit   
35DF   CD 86 52               CALL   execStr   
35E2   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
35F2   CD DC 0D               CALL   flushBuffer   
35F5   E1                     POP   HL   
35F6   E5                     PUSH   HL   
35F7   11 05 00               LD   DE,5   
35FA   B7                     OR   A   
35FB   ED 52                  SBC   HL,DE   
35FD   7D                     LD   A,L   
35FE   B4                     OR   H   
35FF   CA 69 36               JP   Z,expectM_2990S109   
3602   CD 6E 0E               CALL   printStr   
3605   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
361B   CD 6E 0E               CALL   printStr   
361E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
362D   21 05 00               LD   hl,5   
3630   E5                     PUSH   hl   
3631   E5                     PUSH   hl   
3632   CD 88 0F               CALL   run   
3635   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
363D   CD DC 0D               CALL   flushBuffer   
3640   CD 6E 0E               CALL   printStr   
3643   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3650   E1                     POP   hl   
3651   E5                     PUSH   hl   
3652   E5                     PUSH   hl   
3653   CD 88 0F               CALL   run   
3656   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3665   CD DC 0D               CALL   flushBuffer   
3668   76                     HALT      
3669                EXPECTM_2990S109:      
3669   E1                     POP   HL   
366A                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
366A   31 00 54               LD   SP,STACK   
366D   CD B6 0E               CALL   coldInit   
3670   CD 86 52               CALL   execStr   
3673   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
3684   CD DC 0D               CALL   flushBuffer   
3687   E1                     POP   HL   
3688   E5                     PUSH   HL   
3689   11 01 00               LD   DE,1   
368C   B7                     OR   A   
368D   ED 52                  SBC   HL,DE   
368F   7D                     LD   A,L   
3690   B4                     OR   H   
3691   CA FC 36               JP   Z,expectM_2991S110   
3694   CD 6E 0E               CALL   printStr   
3697   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
36AE   CD 6E 0E               CALL   printStr   
36B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36C0   21 01 00               LD   hl,1   
36C3   E5                     PUSH   hl   
36C4   E5                     PUSH   hl   
36C5   CD 88 0F               CALL   run   
36C8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36D0   CD DC 0D               CALL   flushBuffer   
36D3   CD 6E 0E               CALL   printStr   
36D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36E3   E1                     POP   hl   
36E4   E5                     PUSH   hl   
36E5   E5                     PUSH   hl   
36E6   CD 88 0F               CALL   run   
36E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36F8   CD DC 0D               CALL   flushBuffer   
36FB   76                     HALT      
36FC                EXPECTM_2991S110:      
36FC   E1                     POP   HL   
36FD                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
36FD   31 00 54               LD   SP,STACK   
3700   CD B6 0E               CALL   coldInit   
3703   CD 86 52               CALL   execStr   
3706   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
371A   CD DC 0D               CALL   flushBuffer   
371D   E1                     POP   HL   
371E   E5                     PUSH   HL   
371F   11 07 00               LD   DE,7   
3722   B7                     OR   A   
3723   ED 52                  SBC   HL,DE   
3725   7D                     LD   A,L   
3726   B4                     OR   H   
3727   CA 95 37               JP   Z,expectM_2992S111   
372A   CD 6E 0E               CALL   printStr   
372D   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3747   CD 6E 0E               CALL   printStr   
374A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3759   21 07 00               LD   hl,7   
375C   E5                     PUSH   hl   
375D   E5                     PUSH   hl   
375E   CD 88 0F               CALL   run   
3761   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3769   CD DC 0D               CALL   flushBuffer   
376C   CD 6E 0E               CALL   printStr   
376F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
377C   E1                     POP   hl   
377D   E5                     PUSH   hl   
377E   E5                     PUSH   hl   
377F   CD 88 0F               CALL   run   
3782   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3791   CD DC 0D               CALL   flushBuffer   
3794   76                     HALT      
3795                EXPECTM_2992S111:      
3795   E1                     POP   HL   
3796                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3796   31 00 54               LD   SP,STACK   
3799   CD B6 0E               CALL   coldInit   
379C   CD 86 52               CALL   execStr   
379F   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
37B5   CD DC 0D               CALL   flushBuffer   
37B8   E1                     POP   HL   
37B9   E5                     PUSH   HL   
37BA   11 06 00               LD   DE,6   
37BD   B7                     OR   A   
37BE   ED 52                  SBC   HL,DE   
37C0   7D                     LD   A,L   
37C1   B4                     OR   H   
37C2   CA 32 38               JP   Z,expectM_2993S112   
37C5   CD 6E 0E               CALL   printStr   
37C8   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
37E4   CD 6E 0E               CALL   printStr   
37E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37F6   21 06 00               LD   hl,6   
37F9   E5                     PUSH   hl   
37FA   E5                     PUSH   hl   
37FB   CD 88 0F               CALL   run   
37FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3806   CD DC 0D               CALL   flushBuffer   
3809   CD 6E 0E               CALL   printStr   
380C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3819   E1                     POP   hl   
381A   E5                     PUSH   hl   
381B   E5                     PUSH   hl   
381C   CD 88 0F               CALL   run   
381F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
382E   CD DC 0D               CALL   flushBuffer   
3831   76                     HALT      
3832                EXPECTM_2993S112:      
3832   E1                     POP   HL   
3833                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
3833   31 00 54               LD   SP,STACK   
3836   CD B6 0E               CALL   coldInit   
3839   CD 86 52               CALL   execStr   
383C   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
384B   CD DC 0D               CALL   flushBuffer   
384E   E1                     POP   HL   
384F   E5                     PUSH   HL   
3850   11 02 00               LD   DE,2   
3853   B7                     OR   A   
3854   ED 52                  SBC   HL,DE   
3856   7D                     LD   A,L   
3857   B4                     OR   H   
3858   CA C1 38               JP   Z,expectM_2994S113   
385B   CD 6E 0E               CALL   printStr   
385E   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
3873   CD 6E 0E               CALL   printStr   
3876   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3885   21 02 00               LD   hl,2   
3888   E5                     PUSH   hl   
3889   E5                     PUSH   hl   
388A   CD 88 0F               CALL   run   
388D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3895   CD DC 0D               CALL   flushBuffer   
3898   CD 6E 0E               CALL   printStr   
389B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38A8   E1                     POP   hl   
38A9   E5                     PUSH   hl   
38AA   E5                     PUSH   hl   
38AB   CD 88 0F               CALL   run   
38AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38BD   CD DC 0D               CALL   flushBuffer   
38C0   76                     HALT      
38C1                EXPECTM_2994S113:      
38C1   E1                     POP   HL   
38C2                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
38C2   31 00 54               LD   SP,STACK   
38C5   CD B6 0E               CALL   coldInit   
38C8   CD 86 52               CALL   execStr   
38CB   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
38DD   CD DC 0D               CALL   flushBuffer   
38E0   E1                     POP   HL   
38E1   E5                     PUSH   HL   
38E2   11 01 00               LD   DE,1   
38E5   B7                     OR   A   
38E6   ED 52                  SBC   HL,DE   
38E8   7D                     LD   A,L   
38E9   B4                     OR   H   
38EA   CA 56 39               JP   Z,expectM_2995S114   
38ED   CD 6E 0E               CALL   printStr   
38F0   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
3908   CD 6E 0E               CALL   printStr   
390B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
391A   21 01 00               LD   hl,1   
391D   E5                     PUSH   hl   
391E   E5                     PUSH   hl   
391F   CD 88 0F               CALL   run   
3922   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
392A   CD DC 0D               CALL   flushBuffer   
392D   CD 6E 0E               CALL   printStr   
3930   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
393D   E1                     POP   hl   
393E   E5                     PUSH   hl   
393F   E5                     PUSH   hl   
3940   CD 88 0F               CALL   run   
3943   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3952   CD DC 0D               CALL   flushBuffer   
3955   76                     HALT      
3956                EXPECTM_2995S114:      
3956   E1                     POP   HL   
3957                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3957   31 00 54               LD   SP,STACK   
395A   CD B6 0E               CALL   coldInit   
395D   CD 86 52               CALL   execStr   
3960   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3973   CD DC 0D               CALL   flushBuffer   
3976   E1                     POP   HL   
3977   E5                     PUSH   HL   
3978   11 02 00               LD   DE,2   
397B   B7                     OR   A   
397C   ED 52                  SBC   HL,DE   
397E   7D                     LD   A,L   
397F   B4                     OR   H   
3980   CA ED 39               JP   Z,expectM_2996S115   
3983   CD 6E 0E               CALL   printStr   
3986   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
399F   CD 6E 0E               CALL   printStr   
39A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39B1   21 02 00               LD   hl,2   
39B4   E5                     PUSH   hl   
39B5   E5                     PUSH   hl   
39B6   CD 88 0F               CALL   run   
39B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39C1   CD DC 0D               CALL   flushBuffer   
39C4   CD 6E 0E               CALL   printStr   
39C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39D4   E1                     POP   hl   
39D5   E5                     PUSH   hl   
39D6   E5                     PUSH   hl   
39D7   CD 88 0F               CALL   run   
39DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39E9   CD DC 0D               CALL   flushBuffer   
39EC   76                     HALT      
39ED                EXPECTM_2996S115:      
39ED   E1                     POP   HL   
39EE                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
39EE   31 00 54               LD   SP,STACK   
39F1   CD B6 0E               CALL   coldInit   
39F4   CD 86 52               CALL   execStr   
39F7   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
3A0B   CD DC 0D               CALL   flushBuffer   
3A0E   E1                     POP   HL   
3A0F   E5                     PUSH   HL   
3A10   11 02 00               LD   DE,2   
3A13   B7                     OR   A   
3A14   ED 52                  SBC   HL,DE   
3A16   7D                     LD   A,L   
3A17   B4                     OR   H   
3A18   CA 86 3A               JP   Z,expectM_2997S116   
3A1B   CD 6E 0E               CALL   printStr   
3A1E   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
3A38   CD 6E 0E               CALL   printStr   
3A3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A4A   21 02 00               LD   hl,2   
3A4D   E5                     PUSH   hl   
3A4E   E5                     PUSH   hl   
3A4F   CD 88 0F               CALL   run   
3A52   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A5A   CD DC 0D               CALL   flushBuffer   
3A5D   CD 6E 0E               CALL   printStr   
3A60   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A6D   E1                     POP   hl   
3A6E   E5                     PUSH   hl   
3A6F   E5                     PUSH   hl   
3A70   CD 88 0F               CALL   run   
3A73   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A82   CD DC 0D               CALL   flushBuffer   
3A85   76                     HALT      
3A86                EXPECTM_2997S116:      
3A86   E1                     POP   HL   
3A87                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3A87   31 00 54               LD   SP,STACK   
3A8A   CD B6 0E               CALL   coldInit   
3A8D   CD 86 52               CALL   execStr   
3A90   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3AA3   CD DC 0D               CALL   flushBuffer   
3AA6   E1                     POP   HL   
3AA7   E5                     PUSH   HL   
3AA8   11 02 00               LD   DE,2   
3AAB   B7                     OR   A   
3AAC   ED 52                  SBC   HL,DE   
3AAE   7D                     LD   A,L   
3AAF   B4                     OR   H   
3AB0   CA 1D 3B               JP   Z,expectM_2998S117   
3AB3   CD 6E 0E               CALL   printStr   
3AB6   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3ACF   CD 6E 0E               CALL   printStr   
3AD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AE1   21 02 00               LD   hl,2   
3AE4   E5                     PUSH   hl   
3AE5   E5                     PUSH   hl   
3AE6   CD 88 0F               CALL   run   
3AE9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AF1   CD DC 0D               CALL   flushBuffer   
3AF4   CD 6E 0E               CALL   printStr   
3AF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B04   E1                     POP   hl   
3B05   E5                     PUSH   hl   
3B06   E5                     PUSH   hl   
3B07   CD 88 0F               CALL   run   
3B0A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B19   CD DC 0D               CALL   flushBuffer   
3B1C   76                     HALT      
3B1D                EXPECTM_2998S117:      
3B1D   E1                     POP   HL   
3B1E                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
3B1E   31 00 54               LD   SP,STACK   
3B21   CD B6 0E               CALL   coldInit   
3B24   CD 86 52               CALL   execStr   
3B27   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
3B41   CD DC 0D               CALL   flushBuffer   
3B44   E1                     POP   HL   
3B45   E5                     PUSH   HL   
3B46   11 05 00               LD   DE,5   
3B49   B7                     OR   A   
3B4A   ED 52                  SBC   HL,DE   
3B4C   7D                     LD   A,L   
3B4D   B4                     OR   H   
3B4E   CA C2 3B               JP   Z,expectM_2999S118   
3B51   CD 6E 0E               CALL   printStr   
3B54   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
3B74   CD 6E 0E               CALL   printStr   
3B77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B86   21 05 00               LD   hl,5   
3B89   E5                     PUSH   hl   
3B8A   E5                     PUSH   hl   
3B8B   CD 88 0F               CALL   run   
3B8E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B96   CD DC 0D               CALL   flushBuffer   
3B99   CD 6E 0E               CALL   printStr   
3B9C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BA9   E1                     POP   hl   
3BAA   E5                     PUSH   hl   
3BAB   E5                     PUSH   hl   
3BAC   CD 88 0F               CALL   run   
3BAF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BBE   CD DC 0D               CALL   flushBuffer   
3BC1   76                     HALT      
3BC2                EXPECTM_2999S118:      
3BC2   E1                     POP   HL   
3BC3                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3BC3   31 00 54               LD   SP,STACK   
3BC6   CD B6 0E               CALL   coldInit   
3BC9   CD 86 52               CALL   execStr   
3BCC   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3BDD   CD DC 0D               CALL   flushBuffer   
3BE0   E1                     POP   HL   
3BE1   E5                     PUSH   HL   
3BE2   11 02 00               LD   DE,2   
3BE5   B7                     OR   A   
3BE6   ED 52                  SBC   HL,DE   
3BE8   7D                     LD   A,L   
3BE9   B4                     OR   H   
3BEA   CA 55 3C               JP   Z,expectM_3000S119   
3BED   CD 6E 0E               CALL   printStr   
3BF0   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3C07   CD 6E 0E               CALL   printStr   
3C0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C19   21 02 00               LD   hl,2   
3C1C   E5                     PUSH   hl   
3C1D   E5                     PUSH   hl   
3C1E   CD 88 0F               CALL   run   
3C21   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C29   CD DC 0D               CALL   flushBuffer   
3C2C   CD 6E 0E               CALL   printStr   
3C2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C3C   E1                     POP   hl   
3C3D   E5                     PUSH   hl   
3C3E   E5                     PUSH   hl   
3C3F   CD 88 0F               CALL   run   
3C42   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C51   CD DC 0D               CALL   flushBuffer   
3C54   76                     HALT      
3C55                EXPECTM_3000S119:      
3C55   E1                     POP   HL   
3C56                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3C56   31 00 54               LD   SP,STACK   
3C59   CD B6 0E               CALL   coldInit   
3C5C   CD 86 52               CALL   execStr   
3C5F   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3C77   CD DC 0D               CALL   flushBuffer   
3C7A   E1                     POP   HL   
3C7B   E5                     PUSH   HL   
3C7C   11 64 00               LD   DE,100   
3C7F   B7                     OR   A   
3C80   ED 52                  SBC   HL,DE   
3C82   7D                     LD   A,L   
3C83   B4                     OR   H   
3C84   CA F6 3C               JP   Z,expectM_3001S120   
3C87   CD 6E 0E               CALL   printStr   
3C8A   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3CA8   CD 6E 0E               CALL   printStr   
3CAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CBA   21 64 00               LD   hl,100   
3CBD   E5                     PUSH   hl   
3CBE   E5                     PUSH   hl   
3CBF   CD 88 0F               CALL   run   
3CC2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CCA   CD DC 0D               CALL   flushBuffer   
3CCD   CD 6E 0E               CALL   printStr   
3CD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CDD   E1                     POP   hl   
3CDE   E5                     PUSH   hl   
3CDF   E5                     PUSH   hl   
3CE0   CD 88 0F               CALL   run   
3CE3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CF2   CD DC 0D               CALL   flushBuffer   
3CF5   76                     HALT      
3CF6                EXPECTM_3001S120:      
3CF6   E1                     POP   HL   
3CF7                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
3CF7   31 00 54               LD   SP,STACK   
3CFA   CD B6 0E               CALL   coldInit   
3CFD   CD 86 52               CALL   execStr   
3D00   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3D19   CD DC 0D               CALL   flushBuffer   
3D1C   E1                     POP   HL   
3D1D   E5                     PUSH   HL   
3D1E   11 01 00               LD   DE,1   
3D21   B7                     OR   A   
3D22   ED 52                  SBC   HL,DE   
3D24   7D                     LD   A,L   
3D25   B4                     OR   H   
3D26   CA 99 3D               JP   Z,expectM_3002S121   
3D29   CD 6E 0E               CALL   printStr   
3D2C   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3D4B   CD 6E 0E               CALL   printStr   
3D4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D5D   21 01 00               LD   hl,1   
3D60   E5                     PUSH   hl   
3D61   E5                     PUSH   hl   
3D62   CD 88 0F               CALL   run   
3D65   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D6D   CD DC 0D               CALL   flushBuffer   
3D70   CD 6E 0E               CALL   printStr   
3D73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D80   E1                     POP   hl   
3D81   E5                     PUSH   hl   
3D82   E5                     PUSH   hl   
3D83   CD 88 0F               CALL   run   
3D86   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D95   CD DC 0D               CALL   flushBuffer   
3D98   76                     HALT      
3D99                EXPECTM_3002S121:      
3D99   E1                     POP   HL   
3D9A                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3D9A   31 00 54               LD   SP,STACK   
3D9D   CD B6 0E               CALL   coldInit   
3DA0   CD 86 52               CALL   execStr   
3DA3   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3DBD   CD DC 0D               CALL   flushBuffer   
3DC0   E1                     POP   HL   
3DC1   E5                     PUSH   HL   
3DC2   11 02 00               LD   DE,2   
3DC5   B7                     OR   A   
3DC6   ED 52                  SBC   HL,DE   
3DC8   7D                     LD   A,L   
3DC9   B4                     OR   H   
3DCA   CA 3E 3E               JP   Z,expectM_3003S122   
3DCD   CD 6E 0E               CALL   printStr   
3DD0   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3DF0   CD 6E 0E               CALL   printStr   
3DF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E02   21 02 00               LD   hl,2   
3E05   E5                     PUSH   hl   
3E06   E5                     PUSH   hl   
3E07   CD 88 0F               CALL   run   
3E0A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E12   CD DC 0D               CALL   flushBuffer   
3E15   CD 6E 0E               CALL   printStr   
3E18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E25   E1                     POP   hl   
3E26   E5                     PUSH   hl   
3E27   E5                     PUSH   hl   
3E28   CD 88 0F               CALL   run   
3E2B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E3A   CD DC 0D               CALL   flushBuffer   
3E3D   76                     HALT      
3E3E                EXPECTM_3003S122:      
3E3E   E1                     POP   HL   
3E3F                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
3E3F   31 00 54               LD   SP,STACK   
3E42   CD B6 0E               CALL   coldInit   
3E45   CD 86 52               CALL   execStr   
3E48   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3E67   CD DC 0D               CALL   flushBuffer   
3E6A   E1                     POP   HL   
3E6B   E5                     PUSH   HL   
3E6C   11 0B 00               LD   DE,11   
3E6F   B7                     OR   A   
3E70   ED 52                  SBC   HL,DE   
3E72   7D                     LD   A,L   
3E73   B4                     OR   H   
3E74   CA ED 3E               JP   Z,expectM_3004S123   
3E77   CD 6E 0E               CALL   printStr   
3E7A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3E9F   CD 6E 0E               CALL   printStr   
3EA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EB1   21 0B 00               LD   hl,11   
3EB4   E5                     PUSH   hl   
3EB5   E5                     PUSH   hl   
3EB6   CD 88 0F               CALL   run   
3EB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EC1   CD DC 0D               CALL   flushBuffer   
3EC4   CD 6E 0E               CALL   printStr   
3EC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ED4   E1                     POP   hl   
3ED5   E5                     PUSH   hl   
3ED6   E5                     PUSH   hl   
3ED7   CD 88 0F               CALL   run   
3EDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EE9   CD DC 0D               CALL   flushBuffer   
3EEC   76                     HALT      
3EED                EXPECTM_3004S123:      
3EED   E1                     POP   HL   
3EEE                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3EEE   31 00 54               LD   SP,STACK   
3EF1   CD B6 0E               CALL   coldInit   
3EF4   CD 86 52               CALL   execStr   
3EF7   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3F16   CD DC 0D               CALL   flushBuffer   
3F19   E1                     POP   HL   
3F1A   E5                     PUSH   HL   
3F1B   11 15 00               LD   DE,21   
3F1E   B7                     OR   A   
3F1F   ED 52                  SBC   HL,DE   
3F21   7D                     LD   A,L   
3F22   B4                     OR   H   
3F23   CA 9C 3F               JP   Z,expectM_3005S124   
3F26   CD 6E 0E               CALL   printStr   
3F29   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3F4E   CD 6E 0E               CALL   printStr   
3F51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F60   21 15 00               LD   hl,21   
3F63   E5                     PUSH   hl   
3F64   E5                     PUSH   hl   
3F65   CD 88 0F               CALL   run   
3F68   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F70   CD DC 0D               CALL   flushBuffer   
3F73   CD 6E 0E               CALL   printStr   
3F76   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F83   E1                     POP   hl   
3F84   E5                     PUSH   hl   
3F85   E5                     PUSH   hl   
3F86   CD 88 0F               CALL   run   
3F89   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F98   CD DC 0D               CALL   flushBuffer   
3F9B   76                     HALT      
3F9C                EXPECTM_3005S124:      
3F9C   E1                     POP   HL   
3F9D                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3F9D   31 00 54               LD   SP,STACK   
3FA0   CD B6 0E               CALL   coldInit   
3FA3   CD 86 52               CALL   execStr   
3FA6   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3FB4   CD DC 0D               CALL   flushBuffer   
3FB7   E1                     POP   HL   
3FB8   E5                     PUSH   HL   
3FB9   11 14 00               LD   DE,20   
3FBC   B7                     OR   A   
3FBD   ED 52                  SBC   HL,DE   
3FBF   7D                     LD   A,L   
3FC0   B4                     OR   H   
3FC1   CA 29 40               JP   Z,expectM_3006S125   
3FC4   CD 6E 0E               CALL   printStr   
3FC7   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3FDB   CD 6E 0E               CALL   printStr   
3FDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FED   21 14 00               LD   hl,20   
3FF0   E5                     PUSH   hl   
3FF1   E5                     PUSH   hl   
3FF2   CD 88 0F               CALL   run   
3FF5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FFD   CD DC 0D               CALL   flushBuffer   
4000   CD 6E 0E               CALL   printStr   
4003   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4010   E1                     POP   hl   
4011   E5                     PUSH   hl   
4012   E5                     PUSH   hl   
4013   CD 88 0F               CALL   run   
4016   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4025   CD DC 0D               CALL   flushBuffer   
4028   76                     HALT      
4029                EXPECTM_3006S125:      
4029   E1                     POP   HL   
402A                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
402A   31 00 54               LD   SP,STACK   
402D   CD B6 0E               CALL   coldInit   
4030   CD 86 52               CALL   execStr   
4033   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
4045   CD DC 0D               CALL   flushBuffer   
4048   E1                     POP   HL   
4049   E5                     PUSH   HL   
404A   11 04 00               LD   DE,4   
404D   B7                     OR   A   
404E   ED 52                  SBC   HL,DE   
4050   7D                     LD   A,L   
4051   B4                     OR   H   
4052   CA BE 40               JP   Z,expectM_3007S126   
4055   CD 6E 0E               CALL   printStr   
4058   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
4070   CD 6E 0E               CALL   printStr   
4073   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4082   21 04 00               LD   hl,4   
4085   E5                     PUSH   hl   
4086   E5                     PUSH   hl   
4087   CD 88 0F               CALL   run   
408A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4092   CD DC 0D               CALL   flushBuffer   
4095   CD 6E 0E               CALL   printStr   
4098   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40A5   E1                     POP   hl   
40A6   E5                     PUSH   hl   
40A7   E5                     PUSH   hl   
40A8   CD 88 0F               CALL   run   
40AB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40BA   CD DC 0D               CALL   flushBuffer   
40BD   76                     HALT      
40BE                EXPECTM_3007S126:      
40BE   E1                     POP   HL   
40BF                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
40BF   31 00 54               LD   SP,STACK   
40C2   CD B6 0E               CALL   coldInit   
40C5   CD 86 52               CALL   execStr   
40C8   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
40D6   CD DC 0D               CALL   flushBuffer   
40D9   E1                     POP   HL   
40DA   E5                     PUSH   HL   
40DB   11 02 00               LD   DE,2   
40DE   B7                     OR   A   
40DF   ED 52                  SBC   HL,DE   
40E1   7D                     LD   A,L   
40E2   B4                     OR   H   
40E3   CA 4B 41               JP   Z,expectM_3008S127   
40E6   CD 6E 0E               CALL   printStr   
40E9   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
40FD   CD 6E 0E               CALL   printStr   
4100   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
410F   21 02 00               LD   hl,2   
4112   E5                     PUSH   hl   
4113   E5                     PUSH   hl   
4114   CD 88 0F               CALL   run   
4117   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
411F   CD DC 0D               CALL   flushBuffer   
4122   CD 6E 0E               CALL   printStr   
4125   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4132   E1                     POP   hl   
4133   E5                     PUSH   hl   
4134   E5                     PUSH   hl   
4135   CD 88 0F               CALL   run   
4138   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4147   CD DC 0D               CALL   flushBuffer   
414A   76                     HALT      
414B                EXPECTM_3008S127:      
414B   E1                     POP   HL   
414C                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
414C   31 00 54               LD   SP,STACK   
414F   CD B6 0E               CALL   coldInit   
4152   CD 86 52               CALL   execStr   
4155   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
4169   CD DC 0D               CALL   flushBuffer   
416C   E1                     POP   HL   
416D   E5                     PUSH   HL   
416E   11 42 00               LD   DE,66   
4171   B7                     OR   A   
4172   ED 52                  SBC   HL,DE   
4174   7D                     LD   A,L   
4175   B4                     OR   H   
4176   CA E4 41               JP   Z,expectM_3009S128   
4179   CD 6E 0E               CALL   printStr   
417C   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
4196   CD 6E 0E               CALL   printStr   
4199   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41A8   21 42 00               LD   hl,66   
41AB   E5                     PUSH   hl   
41AC   E5                     PUSH   hl   
41AD   CD 88 0F               CALL   run   
41B0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41B8   CD DC 0D               CALL   flushBuffer   
41BB   CD 6E 0E               CALL   printStr   
41BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41CB   E1                     POP   hl   
41CC   E5                     PUSH   hl   
41CD   E5                     PUSH   hl   
41CE   CD 88 0F               CALL   run   
41D1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41E0   CD DC 0D               CALL   flushBuffer   
41E3   76                     HALT      
41E4                EXPECTM_3009S128:      
41E4   E1                     POP   HL   
41E5                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
41E5   31 00 54               LD   SP,STACK   
41E8   CD B6 0E               CALL   coldInit   
41EB   CD 86 52               CALL   execStr   
41EE   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
4202   CD DC 0D               CALL   flushBuffer   
4205   E1                     POP   HL   
4206   E5                     PUSH   HL   
4207   11 0A 00               LD   DE,10   
420A   B7                     OR   A   
420B   ED 52                  SBC   HL,DE   
420D   7D                     LD   A,L   
420E   B4                     OR   H   
420F   CA 7D 42               JP   Z,expectM_3010S129   
4212   CD 6E 0E               CALL   printStr   
4215   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
422F   CD 6E 0E               CALL   printStr   
4232   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4241   21 0A 00               LD   hl,10   
4244   E5                     PUSH   hl   
4245   E5                     PUSH   hl   
4246   CD 88 0F               CALL   run   
4249   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4251   CD DC 0D               CALL   flushBuffer   
4254   CD 6E 0E               CALL   printStr   
4257   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4264   E1                     POP   hl   
4265   E5                     PUSH   hl   
4266   E5                     PUSH   hl   
4267   CD 88 0F               CALL   run   
426A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4279   CD DC 0D               CALL   flushBuffer   
427C   76                     HALT      
427D                EXPECTM_3010S129:      
427D   E1                     POP   HL   
427E                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
427E   31 00 54               LD   SP,STACK   
4281   CD B6 0E               CALL   coldInit   
4284   CD 86 52               CALL   execStr   
4287   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
42A4   CD DC 0D               CALL   flushBuffer   
42A7   E1                     POP   HL   
42A8   E5                     PUSH   HL   
42A9   11 0A 00               LD   DE,10   
42AC   B7                     OR   A   
42AD   ED 52                  SBC   HL,DE   
42AF   7D                     LD   A,L   
42B0   B4                     OR   H   
42B1   CA 28 43               JP   Z,expectM_3011S130   
42B4   CD 6E 0E               CALL   printStr   
42B7   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
42DA   CD 6E 0E               CALL   printStr   
42DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42EC   21 0A 00               LD   hl,10   
42EF   E5                     PUSH   hl   
42F0   E5                     PUSH   hl   
42F1   CD 88 0F               CALL   run   
42F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42FC   CD DC 0D               CALL   flushBuffer   
42FF   CD 6E 0E               CALL   printStr   
4302   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
430F   E1                     POP   hl   
4310   E5                     PUSH   hl   
4311   E5                     PUSH   hl   
4312   CD 88 0F               CALL   run   
4315   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4324   CD DC 0D               CALL   flushBuffer   
4327   76                     HALT      
4328                EXPECTM_3011S130:      
4328   E1                     POP   HL   
4329                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
4329   31 00 54               LD   SP,STACK   
432C   CD B6 0E               CALL   coldInit   
432F   CD 86 52               CALL   execStr   
4332   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
4353   CD DC 0D               CALL   flushBuffer   
4356   E1                     POP   HL   
4357   E5                     PUSH   HL   
4358   11 0A 00               LD   DE,10   
435B   B7                     OR   A   
435C   ED 52                  SBC   HL,DE   
435E   7D                     LD   A,L   
435F   B4                     OR   H   
4360   CA DB 43               JP   Z,expectM_3012S131   
4363   CD 6E 0E               CALL   printStr   
4366   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
438D   CD 6E 0E               CALL   printStr   
4390   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
439F   21 0A 00               LD   hl,10   
43A2   E5                     PUSH   hl   
43A3   E5                     PUSH   hl   
43A4   CD 88 0F               CALL   run   
43A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43AF   CD DC 0D               CALL   flushBuffer   
43B2   CD 6E 0E               CALL   printStr   
43B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43C2   E1                     POP   hl   
43C3   E5                     PUSH   hl   
43C4   E5                     PUSH   hl   
43C5   CD 88 0F               CALL   run   
43C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43D7   CD DC 0D               CALL   flushBuffer   
43DA   76                     HALT      
43DB                EXPECTM_3012S131:      
43DB   E1                     POP   HL   
43DC                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
43DC   31 00 54               LD   SP,STACK   
43DF   CD B6 0E               CALL   coldInit   
43E2   CD 86 52               CALL   execStr   
43E5   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
4406   CD DC 0D               CALL   flushBuffer   
4409   E1                     POP   HL   
440A   E5                     PUSH   HL   
440B   11 14 00               LD   DE,20   
440E   B7                     OR   A   
440F   ED 52                  SBC   HL,DE   
4411   7D                     LD   A,L   
4412   B4                     OR   H   
4413   CA 8E 44               JP   Z,expectM_3013S132   
4416   CD 6E 0E               CALL   printStr   
4419   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
4440   CD 6E 0E               CALL   printStr   
4443   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4452   21 14 00               LD   hl,20   
4455   E5                     PUSH   hl   
4456   E5                     PUSH   hl   
4457   CD 88 0F               CALL   run   
445A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4462   CD DC 0D               CALL   flushBuffer   
4465   CD 6E 0E               CALL   printStr   
4468   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4475   E1                     POP   hl   
4476   E5                     PUSH   hl   
4477   E5                     PUSH   hl   
4478   CD 88 0F               CALL   run   
447B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
448A   CD DC 0D               CALL   flushBuffer   
448D   76                     HALT      
448E                EXPECTM_3013S132:      
448E   E1                     POP   HL   
448F                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
448F   31 00 54               LD   SP,STACK   
4492   CD B6 0E               CALL   coldInit   
4495   CD 86 52               CALL   execStr   
4498   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
44B0   CD DC 0D               CALL   flushBuffer   
44B3   E1                     POP   HL   
44B4   E5                     PUSH   HL   
44B5   11 06 00               LD   DE,6   
44B8   B7                     OR   A   
44B9   ED 52                  SBC   HL,DE   
44BB   7D                     LD   A,L   
44BC   B4                     OR   H   
44BD   CA 2F 45               JP   Z,expectM_3014S133   
44C0   CD 6E 0E               CALL   printStr   
44C3   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
44E1   CD 6E 0E               CALL   printStr   
44E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44F3   21 06 00               LD   hl,6   
44F6   E5                     PUSH   hl   
44F7   E5                     PUSH   hl   
44F8   CD 88 0F               CALL   run   
44FB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4503   CD DC 0D               CALL   flushBuffer   
4506   CD 6E 0E               CALL   printStr   
4509   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4516   E1                     POP   hl   
4517   E5                     PUSH   hl   
4518   E5                     PUSH   hl   
4519   CD 88 0F               CALL   run   
451C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
452B   CD DC 0D               CALL   flushBuffer   
452E   76                     HALT      
452F                EXPECTM_3014S133:      
452F   E1                     POP   HL   
4530                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4530   31 00 54               LD   SP,STACK   
4533   CD B6 0E               CALL   coldInit   
4536   CD 86 52               CALL   execStr   
4539   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4554   CD DC 0D               CALL   flushBuffer   
4557   E1                     POP   HL   
4558   E5                     PUSH   HL   
4559   11 02 00               LD   DE,2   
455C   B7                     OR   A   
455D   ED 52                  SBC   HL,DE   
455F   7D                     LD   A,L   
4560   B4                     OR   H   
4561   CA D6 45               JP   Z,expectM_3015S134   
4564   CD 6E 0E               CALL   printStr   
4567   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4588   CD 6E 0E               CALL   printStr   
458B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
459A   21 02 00               LD   hl,2   
459D   E5                     PUSH   hl   
459E   E5                     PUSH   hl   
459F   CD 88 0F               CALL   run   
45A2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45AA   CD DC 0D               CALL   flushBuffer   
45AD   CD 6E 0E               CALL   printStr   
45B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45BD   E1                     POP   hl   
45BE   E5                     PUSH   hl   
45BF   E5                     PUSH   hl   
45C0   CD 88 0F               CALL   run   
45C3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45D2   CD DC 0D               CALL   flushBuffer   
45D5   76                     HALT      
45D6                EXPECTM_3015S134:      
45D6   E1                     POP   HL   
45D7                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
45D7   31 00 54               LD   SP,STACK   
45DA   CD B6 0E               CALL   coldInit   
45DD   CD 86 52               CALL   execStr   
45E0   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4606   CD DC 0D               CALL   flushBuffer   
4609   E1                     POP   HL   
460A   E5                     PUSH   HL   
460B   11 0A 00               LD   DE,10   
460E   B7                     OR   A   
460F   ED 52                  SBC   HL,DE   
4611   7D                     LD   A,L   
4612   B4                     OR   H   
4613   CA 93 46               JP   Z,expectM_3016S135   
4616   CD 6E 0E               CALL   printStr   
4619   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4645   CD 6E 0E               CALL   printStr   
4648   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4657   21 0A 00               LD   hl,10   
465A   E5                     PUSH   hl   
465B   E5                     PUSH   hl   
465C   CD 88 0F               CALL   run   
465F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4667   CD DC 0D               CALL   flushBuffer   
466A   CD 6E 0E               CALL   printStr   
466D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
467A   E1                     POP   hl   
467B   E5                     PUSH   hl   
467C   E5                     PUSH   hl   
467D   CD 88 0F               CALL   run   
4680   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
468F   CD DC 0D               CALL   flushBuffer   
4692   76                     HALT      
4693                EXPECTM_3016S135:      
4693   E1                     POP   HL   
4694                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
4694   31 00 54               LD   SP,STACK   
4697   CD B6 0E               CALL   coldInit   
469A   CD 86 52               CALL   execStr   
469D   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
46CA   CD DC 0D               CALL   flushBuffer   
46CD   E1                     POP   HL   
46CE   E5                     PUSH   HL   
46CF   11 06 00               LD   DE,6   
46D2   B7                     OR   A   
46D3   ED 52                  SBC   HL,DE   
46D5   7D                     LD   A,L   
46D6   B4                     OR   H   
46D7   CA 5E 47               JP   Z,expectM_3017S136   
46DA   CD 6E 0E               CALL   printStr   
46DD   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
4710   CD 6E 0E               CALL   printStr   
4713   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4722   21 06 00               LD   hl,6   
4725   E5                     PUSH   hl   
4726   E5                     PUSH   hl   
4727   CD 88 0F               CALL   run   
472A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4732   CD DC 0D               CALL   flushBuffer   
4735   CD 6E 0E               CALL   printStr   
4738   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4745   E1                     POP   hl   
4746   E5                     PUSH   hl   
4747   E5                     PUSH   hl   
4748   CD 88 0F               CALL   run   
474B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
475A   CD DC 0D               CALL   flushBuffer   
475D   76                     HALT      
475E                EXPECTM_3017S136:      
475E   E1                     POP   HL   
475F                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
475F   31 00 54               LD   SP,STACK   
4762   CD B6 0E               CALL   coldInit   
4765   CD 86 52               CALL   execStr   
4768   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
477D   CD DC 0D               CALL   flushBuffer   
4780   E1                     POP   HL   
4781   E5                     PUSH   HL   
4782   11 03 00               LD   DE,3   
4785   B7                     OR   A   
4786   ED 52                  SBC   HL,DE   
4788   7D                     LD   A,L   
4789   B4                     OR   H   
478A   CA F9 47               JP   Z,expectM_3018S137   
478D   CD 6E 0E               CALL   printStr   
4790   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
47AB   CD 6E 0E               CALL   printStr   
47AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47BD   21 03 00               LD   hl,3   
47C0   E5                     PUSH   hl   
47C1   E5                     PUSH   hl   
47C2   CD 88 0F               CALL   run   
47C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47CD   CD DC 0D               CALL   flushBuffer   
47D0   CD 6E 0E               CALL   printStr   
47D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47E0   E1                     POP   hl   
47E1   E5                     PUSH   hl   
47E2   E5                     PUSH   hl   
47E3   CD 88 0F               CALL   run   
47E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47F5   CD DC 0D               CALL   flushBuffer   
47F8   76                     HALT      
47F9                EXPECTM_3018S137:      
47F9   E1                     POP   HL   
47FA                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
47FA   31 00 54               LD   SP,STACK   
47FD   CD B6 0E               CALL   coldInit   
4800   CD 86 52               CALL   execStr   
4803   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
4818   CD DC 0D               CALL   flushBuffer   
481B   E1                     POP   HL   
481C   E5                     PUSH   HL   
481D   11 01 00               LD   DE,1   
4820   B7                     OR   A   
4821   ED 52                  SBC   HL,DE   
4823   7D                     LD   A,L   
4824   B4                     OR   H   
4825   CA 94 48               JP   Z,expectM_3019S138   
4828   CD 6E 0E               CALL   printStr   
482B   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
4846   CD 6E 0E               CALL   printStr   
4849   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4858   21 01 00               LD   hl,1   
485B   E5                     PUSH   hl   
485C   E5                     PUSH   hl   
485D   CD 88 0F               CALL   run   
4860   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4868   CD DC 0D               CALL   flushBuffer   
486B   CD 6E 0E               CALL   printStr   
486E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
487B   E1                     POP   hl   
487C   E5                     PUSH   hl   
487D   E5                     PUSH   hl   
487E   CD 88 0F               CALL   run   
4881   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4890   CD DC 0D               CALL   flushBuffer   
4893   76                     HALT      
4894                EXPECTM_3019S138:      
4894   E1                     POP   HL   
4895                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4895   31 00 54               LD   SP,STACK   
4898   CD B6 0E               CALL   coldInit   
489B   CD 86 52               CALL   execStr   
489E   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
48AA   CD DC 0D               CALL   flushBuffer   
48AD   E1                     POP   HL   
48AE   E5                     PUSH   HL   
48AF   11 00 00               LD   DE,NUL   
48B2   B7                     OR   A   
48B3   ED 52                  SBC   HL,DE   
48B5   7D                     LD   A,L   
48B6   B4                     OR   H   
48B7   CA 1D 49               JP   Z,expectM_3020S139   
48BA   CD 6E 0E               CALL   printStr   
48BD   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
48CF   CD 6E 0E               CALL   printStr   
48D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48E1   21 00 00               LD   hl,NUL   
48E4   E5                     PUSH   hl   
48E5   E5                     PUSH   hl   
48E6   CD 88 0F               CALL   run   
48E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48F1   CD DC 0D               CALL   flushBuffer   
48F4   CD 6E 0E               CALL   printStr   
48F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4904   E1                     POP   hl   
4905   E5                     PUSH   hl   
4906   E5                     PUSH   hl   
4907   CD 88 0F               CALL   run   
490A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4919   CD DC 0D               CALL   flushBuffer   
491C   76                     HALT      
491D                EXPECTM_3020S139:      
491D   E1                     POP   HL   
491E                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
491E   31 00 54               LD   SP,STACK   
4921   CD B6 0E               CALL   coldInit   
4924   CD 86 52               CALL   execStr   
4927   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4933   CD DC 0D               CALL   flushBuffer   
4936   E1                     POP   HL   
4937   E5                     PUSH   HL   
4938   11 00 00               LD   DE,NUL   
493B   B7                     OR   A   
493C   ED 52                  SBC   HL,DE   
493E   7D                     LD   A,L   
493F   B4                     OR   H   
4940   CA A6 49               JP   Z,expectM_3021S140   
4943   CD 6E 0E               CALL   printStr   
4946   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4958   CD 6E 0E               CALL   printStr   
495B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
496A   21 00 00               LD   hl,NUL   
496D   E5                     PUSH   hl   
496E   E5                     PUSH   hl   
496F   CD 88 0F               CALL   run   
4972   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
497A   CD DC 0D               CALL   flushBuffer   
497D   CD 6E 0E               CALL   printStr   
4980   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
498D   E1                     POP   hl   
498E   E5                     PUSH   hl   
498F   E5                     PUSH   hl   
4990   CD 88 0F               CALL   run   
4993   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49A2   CD DC 0D               CALL   flushBuffer   
49A5   76                     HALT      
49A6                EXPECTM_3021S140:      
49A6   E1                     POP   HL   
49A7                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
49A7   31 00 54               LD   SP,STACK   
49AA   CD B6 0E               CALL   coldInit   
49AD   CD 86 52               CALL   execStr   
49B0   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
49BC   CD DC 0D               CALL   flushBuffer   
49BF   E1                     POP   HL   
49C0   E5                     PUSH   HL   
49C1   11 00 00               LD   DE,NUL   
49C4   B7                     OR   A   
49C5   ED 52                  SBC   HL,DE   
49C7   7D                     LD   A,L   
49C8   B4                     OR   H   
49C9   CA 2F 4A               JP   Z,expectM_3022S141   
49CC   CD 6E 0E               CALL   printStr   
49CF   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
49E1   CD 6E 0E               CALL   printStr   
49E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49F3   21 00 00               LD   hl,NUL   
49F6   E5                     PUSH   hl   
49F7   E5                     PUSH   hl   
49F8   CD 88 0F               CALL   run   
49FB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A03   CD DC 0D               CALL   flushBuffer   
4A06   CD 6E 0E               CALL   printStr   
4A09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A16   E1                     POP   hl   
4A17   E5                     PUSH   hl   
4A18   E5                     PUSH   hl   
4A19   CD 88 0F               CALL   run   
4A1C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A2B   CD DC 0D               CALL   flushBuffer   
4A2E   76                     HALT      
4A2F                EXPECTM_3022S141:      
4A2F   E1                     POP   HL   
4A30                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4A30   31 00 54               LD   SP,STACK   
4A33   CD B6 0E               CALL   coldInit   
4A36   CD 86 52               CALL   execStr   
4A39   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
4A45   CD DC 0D               CALL   flushBuffer   
4A48   E1                     POP   HL   
4A49   E5                     PUSH   HL   
4A4A   11 00 00               LD   DE,NUL   
4A4D   B7                     OR   A   
4A4E   ED 52                  SBC   HL,DE   
4A50   7D                     LD   A,L   
4A51   B4                     OR   H   
4A52   CA B8 4A               JP   Z,expectM_3023S142   
4A55   CD 6E 0E               CALL   printStr   
4A58   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4A6A   CD 6E 0E               CALL   printStr   
4A6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A7C   21 00 00               LD   hl,NUL   
4A7F   E5                     PUSH   hl   
4A80   E5                     PUSH   hl   
4A81   CD 88 0F               CALL   run   
4A84   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A8C   CD DC 0D               CALL   flushBuffer   
4A8F   CD 6E 0E               CALL   printStr   
4A92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A9F   E1                     POP   hl   
4AA0   E5                     PUSH   hl   
4AA1   E5                     PUSH   hl   
4AA2   CD 88 0F               CALL   run   
4AA5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AB4   CD DC 0D               CALL   flushBuffer   
4AB7   76                     HALT      
4AB8                EXPECTM_3023S142:      
4AB8   E1                     POP   HL   
4AB9                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4AB9   31 00 54               LD   SP,STACK   
4ABC   CD B6 0E               CALL   coldInit   
4ABF   CD 86 52               CALL   execStr   
4AC2   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
4ACA   CD DC 0D               CALL   flushBuffer   
4ACD   E1                     POP   HL   
4ACE   E5                     PUSH   HL   
4ACF   11 66 56               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4AD2   B7                     OR   A   
4AD3   ED 52                  SBC   HL,DE   
4AD5   7D                     LD   A,L   
4AD6   B4                     OR   H   
4AD7   CA 39 4B               JP   Z,expectM_3024S143   
4ADA   CD 6E 0E               CALL   printStr   
4ADD   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4AEB   CD 6E 0E               CALL   printStr   
4AEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AFD   21 66 56               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4B00   E5                     PUSH   hl   
4B01   E5                     PUSH   hl   
4B02   CD 88 0F               CALL   run   
4B05   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B0D   CD DC 0D               CALL   flushBuffer   
4B10   CD 6E 0E               CALL   printStr   
4B13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B20   E1                     POP   hl   
4B21   E5                     PUSH   hl   
4B22   E5                     PUSH   hl   
4B23   CD 88 0F               CALL   run   
4B26   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B35   CD DC 0D               CALL   flushBuffer   
4B38   76                     HALT      
4B39                EXPECTM_3024S143:      
4B39   E1                     POP   HL   
4B3A                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4B3A   31 00 54               LD   SP,STACK   
4B3D   CD B6 0E               CALL   coldInit   
4B40   CD 86 52               CALL   execStr   
4B43   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4B4B   CD DC 0D               CALL   flushBuffer   
4B4E   E1                     POP   HL   
4B4F   E5                     PUSH   HL   
4B50   11 34 56               LD   DE,VARS + ("Z"-"A"+1)*2   
4B53   B7                     OR   A   
4B54   ED 52                  SBC   HL,DE   
4B56   7D                     LD   A,L   
4B57   B4                     OR   H   
4B58   CA BA 4B               JP   Z,expectM_3025S144   
4B5B   CD 6E 0E               CALL   printStr   
4B5E   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4B6C   CD 6E 0E               CALL   printStr   
4B6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B7E   21 34 56               LD   hl,VARS + ("Z"-"A"+1)*2   
4B81   E5                     PUSH   hl   
4B82   E5                     PUSH   hl   
4B83   CD 88 0F               CALL   run   
4B86   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B8E   CD DC 0D               CALL   flushBuffer   
4B91   CD 6E 0E               CALL   printStr   
4B94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BA1   E1                     POP   hl   
4BA2   E5                     PUSH   hl   
4BA3   E5                     PUSH   hl   
4BA4   CD 88 0F               CALL   run   
4BA7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BB6   CD DC 0D               CALL   flushBuffer   
4BB9   76                     HALT      
4BBA                EXPECTM_3025S144:      
4BBA   E1                     POP   HL   
4BBB                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4BBB   31 00 54               LD   SP,STACK   
4BBE   CD B6 0E               CALL   coldInit   
4BC1   CD 86 52               CALL   execStr   
4BC4   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4BCC   CD DC 0D               CALL   flushBuffer   
4BCF   E1                     POP   HL   
4BD0   E5                     PUSH   HL   
4BD1   11 32 56               LD   DE,VARS + ("Z"-"A")*2   
4BD4   B7                     OR   A   
4BD5   ED 52                  SBC   HL,DE   
4BD7   7D                     LD   A,L   
4BD8   B4                     OR   H   
4BD9   CA 3B 4C               JP   Z,expectM_3026S145   
4BDC   CD 6E 0E               CALL   printStr   
4BDF   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4BED   CD 6E 0E               CALL   printStr   
4BF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BFF   21 32 56               LD   hl,VARS + ("Z"-"A")*2   
4C02   E5                     PUSH   hl   
4C03   E5                     PUSH   hl   
4C04   CD 88 0F               CALL   run   
4C07   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C0F   CD DC 0D               CALL   flushBuffer   
4C12   CD 6E 0E               CALL   printStr   
4C15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C22   E1                     POP   hl   
4C23   E5                     PUSH   hl   
4C24   E5                     PUSH   hl   
4C25   CD 88 0F               CALL   run   
4C28   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C37   CD DC 0D               CALL   flushBuffer   
4C3A   76                     HALT      
4C3B                EXPECTM_3026S145:      
4C3B   E1                     POP   HL   
4C3C                          ;*Macro unroll:  test "'A' /ad", VARS
4C3C   31 00 54               LD   SP,STACK   
4C3F   CD B6 0E               CALL   coldInit   
4C42   CD 86 52               CALL   execStr   
4C45   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4C4D   CD DC 0D               CALL   flushBuffer   
4C50   E1                     POP   HL   
4C51   E5                     PUSH   HL   
4C52   11 00 56               LD   DE,VARS   
4C55   B7                     OR   A   
4C56   ED 52                  SBC   HL,DE   
4C58   7D                     LD   A,L   
4C59   B4                     OR   H   
4C5A   CA BC 4C               JP   Z,expectM_3027S146   
4C5D   CD 6E 0E               CALL   printStr   
4C60   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4C6E   CD 6E 0E               CALL   printStr   
4C71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C80   21 00 56               LD   hl,VARS   
4C83   E5                     PUSH   hl   
4C84   E5                     PUSH   hl   
4C85   CD 88 0F               CALL   run   
4C88   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C90   CD DC 0D               CALL   flushBuffer   
4C93   CD 6E 0E               CALL   printStr   
4C96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CA3   E1                     POP   hl   
4CA4   E5                     PUSH   hl   
4CA5   E5                     PUSH   hl   
4CA6   CD 88 0F               CALL   run   
4CA9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CB8   CD DC 0D               CALL   flushBuffer   
4CBB   76                     HALT      
4CBC                EXPECTM_3027S146:      
4CBC   E1                     POP   HL   
4CBD                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
4CBD   31 00 54               LD   SP,STACK   
4CC0   CD B6 0E               CALL   coldInit   
4CC3   CD 86 52               CALL   execStr   
4CC6   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
4CD3   CD DC 0D               CALL   flushBuffer   
4CD6   E1                     POP   HL   
4CD7   E5                     PUSH   HL   
4CD8   11 2D 00               LD   DE,$2D   
4CDB   B7                     OR   A   
4CDC   ED 52                  SBC   HL,DE   
4CDE   7D                     LD   A,L   
4CDF   B4                     OR   H   
4CE0   CA 47 4D               JP   Z,expectM_3028S147   
4CE3   CD 6E 0E               CALL   printStr   
4CE6   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
4CF9   CD 6E 0E               CALL   printStr   
4CFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D0B   21 2D 00               LD   hl,$2D   
4D0E   E5                     PUSH   hl   
4D0F   E5                     PUSH   hl   
4D10   CD 88 0F               CALL   run   
4D13   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D1B   CD DC 0D               CALL   flushBuffer   
4D1E   CD 6E 0E               CALL   printStr   
4D21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D2E   E1                     POP   hl   
4D2F   E5                     PUSH   hl   
4D30   E5                     PUSH   hl   
4D31   CD 88 0F               CALL   run   
4D34   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D43   CD DC 0D               CALL   flushBuffer   
4D46   76                     HALT      
4D47                EXPECTM_3028S147:      
4D47   E1                     POP   HL   
4D48                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
4D48   31 00 54               LD   SP,STACK   
4D4B   CD B6 0E               CALL   coldInit   
4D4E   CD 86 52               CALL   execStr   
4D51   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
4D60   CD DC 0D               CALL   flushBuffer   
4D63   E1                     POP   HL   
4D64   E5                     PUSH   HL   
4D65   11 41 00               LD   DE,65   
4D68   B7                     OR   A   
4D69   ED 52                  SBC   HL,DE   
4D6B   7D                     LD   A,L   
4D6C   B4                     OR   H   
4D6D   CA D6 4D               JP   Z,expectM_3029S148   
4D70   CD 6E 0E               CALL   printStr   
4D73   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
4D88   CD 6E 0E               CALL   printStr   
4D8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D9A   21 41 00               LD   hl,65   
4D9D   E5                     PUSH   hl   
4D9E   E5                     PUSH   hl   
4D9F   CD 88 0F               CALL   run   
4DA2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4DAA   CD DC 0D               CALL   flushBuffer   
4DAD   CD 6E 0E               CALL   printStr   
4DB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DBD   E1                     POP   hl   
4DBE   E5                     PUSH   hl   
4DBF   E5                     PUSH   hl   
4DC0   CD 88 0F               CALL   run   
4DC3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4DD2   CD DC 0D               CALL   flushBuffer   
4DD5   76                     HALT      
4DD6                EXPECTM_3029S148:      
4DD6   E1                     POP   HL   
4DD7                          ;*Macro unroll:  test "123. /b/vB 1#", $32
4DD7   31 00 54               LD   SP,STACK   
4DDA   CD B6 0E               CALL   coldInit   
4DDD   CD 86 52               CALL   execStr   
4DE0   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
4DEE   CD DC 0D               CALL   flushBuffer   
4DF1   E1                     POP   HL   
4DF2   E5                     PUSH   HL   
4DF3   11 32 00               LD   DE,$32   
4DF6   B7                     OR   A   
4DF7   ED 52                  SBC   HL,DE   
4DF9   7D                     LD   A,L   
4DFA   B4                     OR   H   
4DFB   CA 63 4E               JP   Z,expectM_3030S149   
4DFE   CD 6E 0E               CALL   printStr   
4E01   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
4E15   CD 6E 0E               CALL   printStr   
4E18   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E27   21 32 00               LD   hl,$32   
4E2A   E5                     PUSH   hl   
4E2B   E5                     PUSH   hl   
4E2C   CD 88 0F               CALL   run   
4E2F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E37   CD DC 0D               CALL   flushBuffer   
4E3A   CD 6E 0E               CALL   printStr   
4E3D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E4A   E1                     POP   hl   
4E4B   E5                     PUSH   hl   
4E4C   E5                     PUSH   hl   
4E4D   CD 88 0F               CALL   run   
4E50   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E5F   CD DC 0D               CALL   flushBuffer   
4E62   76                     HALT      
4E63                EXPECTM_3030S149:      
4E63   E1                     POP   HL   
4E64                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4E64   31 00 54               LD   SP,STACK   
4E67   CD B6 0E               CALL   coldInit   
4E6A   CD 86 52               CALL   execStr   
4E6D   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
4E7B   CD DC 0D               CALL   flushBuffer   
4E7E   E1                     POP   HL   
4E7F   E5                     PUSH   HL   
4E80   11 01 00               LD   DE,1   
4E83   B7                     OR   A   
4E84   ED 52                  SBC   HL,DE   
4E86   7D                     LD   A,L   
4E87   B4                     OR   H   
4E88   CA F0 4E               JP   Z,expectM_3031S150   
4E8B   CD 6E 0E               CALL   printStr   
4E8E   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4EA2   CD 6E 0E               CALL   printStr   
4EA5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EB4   21 01 00               LD   hl,1   
4EB7   E5                     PUSH   hl   
4EB8   E5                     PUSH   hl   
4EB9   CD 88 0F               CALL   run   
4EBC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4EC4   CD DC 0D               CALL   flushBuffer   
4EC7   CD 6E 0E               CALL   printStr   
4ECA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ED7   E1                     POP   hl   
4ED8   E5                     PUSH   hl   
4ED9   E5                     PUSH   hl   
4EDA   CD 88 0F               CALL   run   
4EDD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4EEC   CD DC 0D               CALL   flushBuffer   
4EEF   76                     HALT      
4EF0                EXPECTM_3031S150:      
4EF0   E1                     POP   HL   
4EF1                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4EF1   31 00 54               LD   SP,STACK   
4EF4   CD B6 0E               CALL   coldInit   
4EF7   CD 86 52               CALL   execStr   
4EFA   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4F10   CD DC 0D               CALL   flushBuffer   
4F13   E1                     POP   HL   
4F14   E5                     PUSH   HL   
4F15   11 03 00               LD   DE,3   
4F18   B7                     OR   A   
4F19   ED 52                  SBC   HL,DE   
4F1B   7D                     LD   A,L   
4F1C   B4                     OR   H   
4F1D   CA 8D 4F               JP   Z,expectM_3032S151   
4F20   CD 6E 0E               CALL   printStr   
4F23   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4F3F   CD 6E 0E               CALL   printStr   
4F42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F51   21 03 00               LD   hl,3   
4F54   E5                     PUSH   hl   
4F55   E5                     PUSH   hl   
4F56   CD 88 0F               CALL   run   
4F59   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4F61   CD DC 0D               CALL   flushBuffer   
4F64   CD 6E 0E               CALL   printStr   
4F67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F74   E1                     POP   hl   
4F75   E5                     PUSH   hl   
4F76   E5                     PUSH   hl   
4F77   CD 88 0F               CALL   run   
4F7A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4F89   CD DC 0D               CALL   flushBuffer   
4F8C   76                     HALT      
4F8D                EXPECTM_3032S151:      
4F8D   E1                     POP   HL   
4F8E                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4F8E   31 00 54               LD   SP,STACK   
4F91   CD B6 0E               CALL   coldInit   
4F94   CD 86 52               CALL   execStr   
4F97   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4FB0   CD DC 0D               CALL   flushBuffer   
4FB3   E1                     POP   HL   
4FB4   E5                     PUSH   HL   
4FB5   11 02 00               LD   DE,2   
4FB8   B7                     OR   A   
4FB9   ED 52                  SBC   HL,DE   
4FBB   7D                     LD   A,L   
4FBC   B4                     OR   H   
4FBD   CA 30 50               JP   Z,expectM_3033S152   
4FC0   CD 6E 0E               CALL   printStr   
4FC3   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4FE2   CD 6E 0E               CALL   printStr   
4FE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FF4   21 02 00               LD   hl,2   
4FF7   E5                     PUSH   hl   
4FF8   E5                     PUSH   hl   
4FF9   CD 88 0F               CALL   run   
4FFC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
5004   CD DC 0D               CALL   flushBuffer   
5007   CD 6E 0E               CALL   printStr   
500A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5017   E1                     POP   hl   
5018   E5                     PUSH   hl   
5019   E5                     PUSH   hl   
501A   CD 88 0F               CALL   run   
501D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
502C   CD DC 0D               CALL   flushBuffer   
502F   76                     HALT      
5030                EXPECTM_3033S152:      
5030   E1                     POP   HL   
5031                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
5031   31 00 54               LD   SP,STACK   
5034   CD B6 0E               CALL   coldInit   
5037   CD 86 52               CALL   execStr   
503A   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
505F   CD DC 0D               CALL   flushBuffer   
5062   E1                     POP   HL   
5063   E5                     PUSH   HL   
5064   11 01 00               LD   DE,1   
5067   B7                     OR   A   
5068   ED 52                  SBC   HL,DE   
506A   7D                     LD   A,L   
506B   B4                     OR   H   
506C   CA EB 50               JP   Z,expectM_3034S153   
506F   CD 6E 0E               CALL   printStr   
5072   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
509D   CD 6E 0E               CALL   printStr   
50A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50AF   21 01 00               LD   hl,1   
50B2   E5                     PUSH   hl   
50B3   E5                     PUSH   hl   
50B4   CD 88 0F               CALL   run   
50B7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
50BF   CD DC 0D               CALL   flushBuffer   
50C2   CD 6E 0E               CALL   printStr   
50C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50D2   E1                     POP   hl   
50D3   E5                     PUSH   hl   
50D4   E5                     PUSH   hl   
50D5   CD 88 0F               CALL   run   
50D8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
50E7   CD DC 0D               CALL   flushBuffer   
50EA   76                     HALT      
50EB                EXPECTM_3034S153:      
50EB   E1                     POP   HL   
50EC                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
50EC   31 00 54               LD   SP,STACK   
50EF   CD B6 0E               CALL   coldInit   
50F2   CD 86 52               CALL   execStr   
50F5   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
511A   CD DC 0D               CALL   flushBuffer   
511D   E1                     POP   HL   
511E   E5                     PUSH   HL   
511F   11 01 00               LD   DE,1   
5122   B7                     OR   A   
5123   ED 52                  SBC   HL,DE   
5125   7D                     LD   A,L   
5126   B4                     OR   H   
5127   CA A6 51               JP   Z,expectM_3035S154   
512A   CD 6E 0E               CALL   printStr   
512D   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
5158   CD 6E 0E               CALL   printStr   
515B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
516A   21 01 00               LD   hl,1   
516D   E5                     PUSH   hl   
516E   E5                     PUSH   hl   
516F   CD 88 0F               CALL   run   
5172   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
517A   CD DC 0D               CALL   flushBuffer   
517D   CD 6E 0E               CALL   printStr   
5180   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
518D   E1                     POP   hl   
518E   E5                     PUSH   hl   
518F   E5                     PUSH   hl   
5190   CD 88 0F               CALL   run   
5193   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
51A2   CD DC 0D               CALL   flushBuffer   
51A5   76                     HALT      
51A6                EXPECTM_3035S154:      
51A6   E1                     POP   HL   
51A7                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
51A7   31 00 54               LD   SP,STACK   
51AA   CD B6 0E               CALL   coldInit   
51AD   CD 86 52               CALL   execStr   
51B0   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
51E2   CD DC 0D               CALL   flushBuffer   
51E5   E1                     POP   HL   
51E6   E5                     PUSH   HL   
51E7   11 02 00               LD   DE,2   
51EA   B7                     OR   A   
51EB   ED 52                  SBC   HL,DE   
51ED   7D                     LD   A,L   
51EE   B4                     OR   H   
51EF   CA 7B 52               JP   Z,expectM_3036S155   
51F2   CD 6E 0E               CALL   printStr   
51F5   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
522D   CD 6E 0E               CALL   printStr   
5230   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
523F   21 02 00               LD   hl,2   
5242   E5                     PUSH   hl   
5243   E5                     PUSH   hl   
5244   CD 88 0F               CALL   run   
5247   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
524F   CD DC 0D               CALL   flushBuffer   
5252   CD 6E 0E               CALL   printStr   
5255   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5262   E1                     POP   hl   
5263   E5                     PUSH   hl   
5264   E5                     PUSH   hl   
5265   CD 88 0F               CALL   run   
5268   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5277   CD DC 0D               CALL   flushBuffer   
527A   76                     HALT      
527B                EXPECTM_3036S155:      
527B   E1                     POP   HL   
527C                             ; 
527C   CD 6E 0E               CALL   printStr   
527F   44 6F 6E 65 21 00      .CSTR   "Done!"   
5285   76                     HALT      
5286                             ; executes a null teminated string (null executes exit_)
5286                             ; the string should be immedaitely following the call
5286                EXECSTR:      ; create a root stack frame
5286   C1                     POP   bc   ; bc = code*
5287   0B                     DEC   bc   ; dec to prepare for next routine
5288   11 00 00               LD   de,0   
528B   D5                     PUSH   de   ; push fake IP
528C   D5                     PUSH   de   ; push null arg_list*
528D   D5                     PUSH   de   ; push null first_arg*
528E   D5                     PUSH   de   ; push fake BP
528F   DD E9                  JP   (ix)   
5291                STKSIZE:   EQU   $100   ; Stack size
5291                TIBSIZE:   EQU   $100   ; 256 bytes
5291                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5291                          ALIGN   $100   
5300                          DS   STKSIZE   
5400                STACK:       
5400                          ALIGN   $100   
5400                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5500                          ALIGN   $100   
5500                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5600                          ALIGN   $100   
5600                VARS:        
5600                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
56D0                RESTARTS:      
56D0                RST08:    DS   2   
56D2                RST10:    DS   2   
56D4                RST18:    DS   2   
56D6                RST20:    DS   2   
56D8                RST28:    DS   2   
56DA                RST30:    DS   2   ; 
56DC                BAUD:     DS   2   ; 
56DE                INTVEC:   DS   2   ; 
56E0                NMIVEC:   DS   2   ; 
56E2                GETCVEC:   DS   2   ; 
56E4                PUTCVEC:   DS   2   ; 
56E6                SYSVARS:      
56E6                             ; initialised sys variables (preserved)
56E6                VDATAWIDTH:   DS   2   ; 
56E8                VNUMBASE:   DS   2   ; 
56EA                VTIBPTR:   DS   2   ; 
56EC                VBUFPTR:   DS   2   ; 
56EE                VNEXT:    DS   2   ; 
56F0                VHEAPPTR:   DS   2   ; 
56F2                VRECUR:   DS   2   ; 
56F4                             ; uninitialised sys variables (preserved)
56F4                VPOINTER:   DS   2   ; 
56F6                VREMAIN:   DS   2   ; 
56F8                VSAVEDIP:   DS   2   ; 
56FA                VSAVEDSP:   DS   2   ; 
56FC                VSAVEDNEXT:   DS   2   ; 
56FE                VSAVEDBP:   DS   2   ; 
5700                             ; uninitialised sys variables (unpreserved)
5700                VTEMP1:   DS   2   ; 
5702                VTEMP2:   DS   2   ; 
5704                VLASTDEF:   DS   2   ; 
5706                TBPTR:    DS   2   ; reserved for tests
5708                TITLEBUF:   DS   20   
571C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0DDA DEFINED AT LINE 2012 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C1 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
XOR:                03CA DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
XOR1:               03CB DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
INVERT:             03D5 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
PERCENT:            03DA DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03DA DEFINED AT LINE 363 IN MAIN.asm
ARG0:               03F6 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
ARG0A:              03FF DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ARG1:               0404 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
ARG1A:              040C DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
LBRACK:             040F DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         040F DEFINED AT LINE 405 IN MAIN.asm
RBRACK:             042B DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           042B DEFINED AT LINE 420 IN MAIN.asm
ARRAYEND1:          0447 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ARRAYEND2:          0457 DEFINED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
ARRAYEND3:          045C DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
HASH:               047B DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         047B DEFINED AT LINE 475 IN MAIN.asm
ARRAYINDEX0:        0483 DEFINED AT LINE 481 IN MAIN.asm
ARRAYINDEX1:        0484 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
ARRAYINDEX2:        0490 DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
ARRAYSIZE:          0493 DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
COLON:              049B DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 512 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 530 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 545 IN MAIN.asm
ASSIGN:             04D1 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04D3 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
ASSIGNX:            04D4 DEFINED AT LINE 563 IN MAIN.asm
ASSIGN1:            04E0 DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
ABSOLUTE:           04E2 DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
ADDROF:             04EF DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
ADDROF1:            0503 DEFINED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
ADDROF2:            050E DEFINED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
LBRACE:             0510 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         0510 DEFINED AT LINE 617 IN MAIN.asm
BLOCKSTART1:        0514 DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
BLOCKSTART2:        0540 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKSTART3:        0543 DEFINED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
BLOCKSTART4:        054B DEFINED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
BLOCKSTART5:        054E DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
BLOCKSTART6:        0576 DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
RBRACE:             0579 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0579 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
BLOCKEND1:          05AB DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
BLOCKEND2:          05B7 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BLOCKEND3:          05C9 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
BLOCKEND4:          05DD DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
BREAK:              05E6 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
BREAK1:             05ED DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
QUIT:               0600 DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
QUIT1:              0607 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
TICK:               060A DEFINED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               060A DEFINED AT LINE 771 IN MAIN.asm
CHAR1:              060D DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
CHAR2:              0619 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
CHAR3:              061C DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
COMMENT:            061F DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
SLASH:              0628 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            0628 DEFINED AT LINE 798 IN MAIN.asm
COMMANDS:           0700 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_NOP_:       0700 DEFINED AT LINE 836 IN MAIN.asm
COMMAND_A_:         0702 DEFINED AT LINE 839 IN MAIN.asm
COMMAND_B_:         0711 DEFINED AT LINE 850 IN MAIN.asm
COMMAND_F_:         071D DEFINED AT LINE 859 IN MAIN.asm
COMMAND_I_:         073B DEFINED AT LINE 880 IN MAIN.asm
COMMAND_L_:         0747 DEFINED AT LINE 889 IN MAIN.asm
COMMAND_M_:         0750 DEFINED AT LINE 896 IN MAIN.asm
COMMAND_P_:         0759 DEFINED AT LINE 903 IN MAIN.asm
COMMAND_Q_:         0762 DEFINED AT LINE 910 IN MAIN.asm
COMMAND_R_:         076B DEFINED AT LINE 917 IN MAIN.asm
COMMAND_V_:         077A DEFINED AT LINE 928 IN MAIN.asm
ABSOLUTE_:          078F DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
ADDROF_:            0792 DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
ARRAYSIZE_:         0795 DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
BREAK_:             0798 DEFINED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
COLDSTART_:         079B DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
DIV_:               079E DEFINED AT LINE 958 IN MAIN.asm
ERROR1_:            07A1 DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
FOREACH_:           07A4 DEFINED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
FLUSH_:             07A7 DEFINED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
FUNCSRC_:           07AA DEFINED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
F1_:                07AD DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 868 IN MAIN.asm
F2_:                07B0 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
F3_:                07B3 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
F4_:                07B6 DEFINED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
FZ_:                07B9 DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
FALSE_:             07BC DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
INPUT_:             07BF DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
INVERT_:            07C2 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
LITERAL_:           07C5 DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
MAP_:               07C8 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
PRINTCHARS_:        07CB DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
QUIT_:              07CE DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
RECUR_:             07D1 DEFINED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
REMAIN_:            07D4 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
RANGESRC_:          07D7 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
VARBUFPTR_:         07DA DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
VARHEAPPTR_:        07DD DEFINED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
VARTIBPTR_:         07E0 DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
CONSTBUFSTART_:     07E3 DEFINED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
CONSTTIBSTART_:     07E6 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
DECIMAL_:           07E9 DEFINED AT LINE 1033 IN MAIN.asm
HEXADECIMAL_:       07EC DEFINED AT LINE 1036 IN MAIN.asm
KEY_:               07EF DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
OUTPUT_:            07F2 DEFINED AT LINE 1042 IN MAIN.asm
TRUE_:              07F5 DEFINED AT LINE 1045 IN MAIN.asm
BYTES_:             07F8 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
WORDS_:             07FB DEFINED AT LINE 1050 IN MAIN.asm
XOR_:               07FE DEFINED AT LINE 1052 IN MAIN.asm
WORDS:              0801 DEFINED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
BYTES:              0806 DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
BYTES1:             0809 DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
SEMICOLON:          080E DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         080E DEFINED AT LINE 1071 IN MAIN.asm
CREATEFUNC0:        0829 DEFINED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
CREATEFUNC1:        0841 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
CREATEFUNC2:        0854 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
CREATEFUNC2A:       0873 DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
CREATEFUNC3:        0882 DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
CREATEFUNC4:        088D DEFINED AT LINE 1164 IN MAIN.asm
CREATEFUNC5:        088E DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
COMMA:              08AA DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            08AA DEFINED AT LINE 1190 IN MAIN.asm
DISCARD1:           08B7 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
DIV:                08B9 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
DECIMAL:            08CA DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
DECIMAL1:           08CD DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
HEXADECIMAL:        08D2 DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
DOT:                08D8 DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
DOTARRAY:           08EA DEFINED AT LINE 32
                    > USED AT LINE 1225 IN MAIN.asm
DOTARRAYM_1706S1235: 08F8 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTNUMBER:          0932 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
BUFFERDEC:          0939 DEFINED AT LINE 1249 IN MAIN.asm
BUFFERDEC0:         0953 DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
BUFFERDEC1:         0963 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
BUFFERDEC2:         0983 DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
BUFFERDEC3:         0985 DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
BUFFERDEC4:         0995 DEFINED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
BUFFERDEC5:         0996 DEFINED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
BUFFERHEX:          099F DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
BUFFERHEX1:         09C0 DEFINED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
BUFFERHEX2:         09C9 DEFINED AT LINE 1347 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
DOTSTRING:          09D7 DEFINED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
DOTSTRING0:         09DE DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
DOTSTRING1:         09E4 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
DOTCHAR:            09F1 DEFINED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
DOTXCHARS:          09F6 DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
DOTXCHARS0:         09F7 DEFINED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
DOTXCHARS1:         0A00 DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
DOTXCHARS2:         0A08 DEFINED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
DIVIDE:             0A12 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
DIVIDE1:            0A17 DEFINED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
DIVIDE2:            0A24 DEFINED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
DIVIDE3:            0A25 DEFINED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
EQUALS:             0A2B DEFINED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          0A33 DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         0A3C DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           0A41 DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0A46 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
TRUE1:              0A49 DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
NULL1:              0A4F DEFINED AT LINE 1464 IN MAIN.asm
FALSE1:             0A4F DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
ERROR1:             0A55 DEFINED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
FLUSH:              0A5C DEFINED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
FOREACH:            0A61 DEFINED AT LINE 32
                    > USED AT LINE 965 IN MAIN.asm
FOREACHM_1936S1483: 0A6F DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0AAE DEFINED AT LINE 32
                    > USED AT LINE 971 IN MAIN.asm
FUNCSRCM_1951S1499: 0ABA DEFINED AT LINE 39
                    > USED AT LINE 35
FZ:                 0AE9 DEFINED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
CARET:              0AF6 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 0AF6 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0AF7 DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
GO2:                0AFD DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
GOBLOCK:            0B08 DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
GOBLOCK2:           0B2D DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
GOBLOCK3:           0B37 DEFINED AT LINE 1560 IN MAIN.asm
GOFUNC:             0B3B DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
GOFUNC1:            0B54 DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
GOFUNC2:            0B5A DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
GOFUNC3:            0B65 DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
GOFUNC4:            0B7D DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
GOFUNC5:            0B80 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
GOFUNC6:            0B83 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
GOFUNC7:            0B86 DEFINED AT LINE 1623 IN MAIN.asm
GOFUNC8:            0B8A DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
DOLLAR:             0B95 DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0B95 DEFINED AT LINE 1638 IN MAIN.asm
HEXNUM1:            0B98 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
HEXNUM2:            0BA0 DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
UPCASE:             0BB2 DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0BB7 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0BBC DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
QUESTION:           0BC9 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0BC9 DEFINED AT LINE 1681 IN MAIN.asm
IFTE:               0BD5 DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1685 IN MAIN.asm
IFTE1:              0BD6 DEFINED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
INPUT:              0BE2 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
KEY:                0BED DEFINED AT LINE 1715 IN MAIN.asm
LITERAL:            0BF6 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
OUTPUT:             0BFF DEFINED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
MAP:                0C08 DEFINED AT LINE 32
                    > USED AT LINE 1001 IN MAIN.asm
MAPM_2190S1750:     0C15 DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0C4C DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0C4C DEFINED AT LINE 1764 IN MAIN.asm
MUL2:               0C4E DEFINED AT LINE 1767 IN MAIN.asm
MUL3:               0C56 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
NUM:                0C68 DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0C71 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
NUM1:               0C72 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
NUM2:               0C8A DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
NUM3:               0C95 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
RANGESRC:           0C98 DEFINED AT LINE 32
                    > USED AT LINE 1016 IN MAIN.asm
RANGESRCM_2262S1825: 0CA7 DEFINED AT LINE 39
                    > USED AT LINE 35
RPAREN:             0D1A DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0D22 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0D2A DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
SHIFTLEFT2:         0D2B DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
SHIFTRIGHT:         0D32 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0D3A DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
SHIFTRIGHT2:        0D3E DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
DQUOTE:             0D45 DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0D45 DEFINED AT LINE 1887 IN MAIN.asm
STRING1:            0D4E DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
STRING2:            0D51 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
STRING3:            0D5A DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
MINUS:              0D6D DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0D79 DEFINED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
SUB1:               0D83 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
PRINTCHARS:         0D8C DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
PRINTCHARS1:        0D93 DEFINED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
PRINTCHARS2:        0D99 DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
RECUR:              0D9E DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
REMAIN:             0DA4 DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
CONSTBUFSTART:      0DAA DEFINED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
CONSTHEAPSTART:     0DAF DEFINED AT LINE 1977 IN MAIN.asm
CONSTTIBSTART:      0DB4 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
VARBUFPTR:          0DB9 DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
VARHEAPPTR:         0DC2 DEFINED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
VARTIBPTR:          0DCB DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
VARIABLE:           0DD4 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
CONSTANT:           0DD7 DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
FILTER:             0DDA DEFINED AT LINE 2011 IN MAIN.asm
FLUSHBUFFER:        0DDC DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
COMMANDTABLE:       0DF3 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
COMMANDTABLE1:      0DFD DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
COMMANDTABLE2:      0E08 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
JUMPTABLE:          0E0D DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
JUMPTABLE0:         0E0F DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
JUMPTABLE1:         0E1C DEFINED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
JUMPTABLE2:         0E1D DEFINED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
PRTSTR0:            0E23 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
PRTSTR:             0E27 DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
NESTING:            0E2C DEFINED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
NESTING0:           0E36 DEFINED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
NESTING1A:          0E3D DEFINED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
NESTING1:           0E40 DEFINED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
NESTING2:           0E4F DEFINED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
NESTING3:           0E51 DEFINED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
NESTING4:           0E5C DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
PROMPT:             0E5E DEFINED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
CRLF:               0E67 DEFINED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
PRINTSTR:           0E6E DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 159
TITLESTR:           0E75 DEFINED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
INIT:               0E89 DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
INIT1:              0E91 DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
WARMINIT:           0E99 DEFINED AT LINE 2175 IN MAIN.asm
COLDBOOT0:          0EAC DEFINED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
COLDINIT:           0EB6 DEFINED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EC7 DEFINED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
COLDSTART:          0ED4 DEFINED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
START:              0EDD DEFINED AT LINE 2210 IN MAIN.asm
START1:             0EE3 DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
INTERPRET:          0EE9 DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
INTERPRET2:         0EF8 DEFINED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
INTERPRET3:         0F00 DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
INTERPRET4:         0F0B DEFINED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
INTERPRET5:         0F10 DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
INTERPRET5A:        0F2E DEFINED AT LINE 2287 IN MAIN.asm
INTERPRET6:         0F30 DEFINED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
INTERPRET7:         0F3E DEFINED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
INTERPRET8:         0F51 DEFINED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
NEXT:               0F6C DEFINED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
NEXT1:              0F7D DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
EXIT:               0F84 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
RUN:                0F88 DEFINED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0F8C DEFINED AT LINE 2356 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
BACKSPACE_:         0F9F DEFINED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
EDIT_:              0FAF DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
REEDIT_:            0FC7 DEFINED AT LINE 2376 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
PRINTSTACK_:        0FCA DEFINED AT LINE 2379 IN MAIN.asm
F1:                 0FD4 DEFINED AT LINE 32
                    > USED AT LINE 974 IN MAIN.asm
F1M_2901S12:        0FDF DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0FE0 DEFINED AT LINE 32
                    > USED AT LINE 977 IN MAIN.asm
F2M_2903S15:        0FEB DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0FEC DEFINED AT LINE 32
                    > USED AT LINE 980 IN MAIN.asm
F3M_2905S18:        0FF7 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0FF8 DEFINED AT LINE 32
                    > USED AT LINE 983 IN MAIN.asm
F4M_2907S21:        1003 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2913S29:    11DE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S37:    125F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S38:    12D6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S39:    134B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S40:    13C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S41:    1435 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S42:    14AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S43:    1521 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S44:    159A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S45:    1611 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S46:    1688 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S47:    1701 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S48:    177C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S49:    17F5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S50:    186E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S51:    18ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S52:    196C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S53:    19E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S54:    1A6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S55:    1AEF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S56:    1B72 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S57:    1BEF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S58:    1C74 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S59:    1CF5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S60:    1D72 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S61:    1DEF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S62:    1E74 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S63:    1EF1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S64:    1F6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S65:    1FED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S66:    207C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S67:    20F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S68:    217E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S69:    21FB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S70:    2286 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S71:    2311 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S72:    239C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S73:    2427 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S74:    24AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S75:    2529 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S76:    25A8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S77:    2627 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S78:    26A4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S79:    2721 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S80:    279E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S81:    281B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S82:    2898 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S83:    2915 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S84:    2992 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S85:    2A0F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S86:    2A8E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S87:    2B0D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S88:    2B8C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S89:    2C0D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S90:    2C8E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S91:    2D09 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S92:    2D84 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S93:    2E05 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S94:    2E8C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2976S95:    2F13 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2977S96:    2F9E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2978S97:    3033 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2979S98:    30C8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2980S99:    3143 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2981S100:   31C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2982S101:   323F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2983S102:   32C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2984S103:   333F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2985S104:   33BE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2986S105:   343F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2987S106:   34C6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2988S107:   3551 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2989S108:   35D8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2990S109:   3669 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2991S110:   36FC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2992S111:   3795 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2993S112:   3832 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2994S113:   38C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2995S114:   3956 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2996S115:   39ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2997S116:   3A86 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2998S117:   3B1D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2999S118:   3BC2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3000S119:   3C55 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3001S120:   3CF6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3002S121:   3D99 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3003S122:   3E3E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3004S123:   3EED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3005S124:   3F9C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3006S125:   4029 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3007S126:   40BE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3008S127:   414B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3009S128:   41E4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3010S129:   427D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3011S130:   4328 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3012S131:   43DB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3013S132:   448E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3014S133:   452F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3015S134:   45D6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3016S135:   4693 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3017S136:   475E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3018S137:   47F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3019S138:   4894 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3020S139:   491D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3021S140:   49A6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3022S141:   4A2F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3023S142:   4AB8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3024S143:   4B39 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3025S144:   4BBA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3026S145:   4C3B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3027S146:   4CBC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3028S147:   4D47 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3029S148:   4DD6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3030S149:   4E63 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3031S150:   4EF0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3032S151:   4F8D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3033S152:   5030 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3034S153:   50EB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3035S154:   51A6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3036S155:   527B DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            5286 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5400 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5400 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
BUF:                5500 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
VARS:               5600 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           56D0 DEFINED AT LINE 18 IN ram.asm
RST08:              56D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              56D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              56D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              56D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              56D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              56DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               56DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             56DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             56E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            56E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            56E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            56E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2190 IN MAIN.asm
VDATAWIDTH:         56E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
VNUMBASE:           56E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
VTIBPTR:            56EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
VBUFPTR:            56EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
VNEXT:              56EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2202 IN MAIN.asm
VHEAPPTR:           56F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
VRECUR:             56F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
VPOINTER:           56F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
VREMAIN:            56F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
VSAVEDIP:           56F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
VSAVEDSP:           56FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
VSAVEDNEXT:         56FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
VSAVEDBP:           56FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
VTEMP1:             5700 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
VTEMP2:             5702 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
VLASTDEF:           5704 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5706 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5708 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
HEAP:               571C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
