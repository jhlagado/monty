0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 5E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 5E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 5E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 5E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 5E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 5E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 5E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 5E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 5E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 5E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 5C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 5E               LD   (RST08),HL   
0094   22 D2 5E               LD   (RST10),HL   
0097   22 D4 5E               LD   (RST18),HL   
009A   22 D6 5E               LD   (RST20),HL   
009D   22 D8 5E               LD   (RST28),HL   
00A0   22 DA 5E               LD   (RST30),HL   
00A3   22 DE 5E               LD   (INTVEC),HL   
00A6   22 E0 5E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 5E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 5E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 12               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 5C                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 5D                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 5F                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 38 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 BB 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 E5 0B               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 FF 0B               JP   percent   
0215                QUESTION_:      
0215   C3 D8 0B               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 34 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 76 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 5E 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 6F 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA D6 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA BA 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 7D 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 82 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 5E               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 6F 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 34 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 60 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA 60 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA 96 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 60 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 60 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 5E                  LD   h,msb(VARS)   
0309   22 F8 5E               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 28 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 25 11               JP   error   
0343                LAMBDA2:      
0343   CD 5E 0E               CALL   parseBlock   
0346   CD CD 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 5F            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 5E               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 5E               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 5E            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 5E               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 5F            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA D1 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 04 0D               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA D1 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 5E            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 5E            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 0E 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 5E 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 64 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 B1 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 5E            LD   de,(vPointer)   
03ED   21 F8 5E               LD   hl,vPointer   
03F0   C3 6F 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 9C 0F               CALL   cmdTable   
0403   61 00                  DB   "a",0   ; .a print array
0405   EE 0A                  DW   printArray   
0407   63 00                  DB   "c",0   ; .c print char
0409   13 04                  DW   printChar   
040B   73 00                  DB   "s",0   ; .s print string
040D   22 04                  DW   printString   
040F   00 00                  DW   0   ; .  print number, fall through
0411   37 04                  DW   printNumber   
0413                             ; .c print char
0413                             ; char --
0413                PRINTCHAR:      
0413   E1                     POP   hl   ; a = char
0414   7D                     LD   a,l   
0415   ED 5B E8 5E            LD   de,(vBufPtr)   ; de = buffer*
0419   12                     LD   (de),a   
041A   13                     INC   de   
041B   ED 53 E8 5E            LD   (vBufPtr),de   ; save buffer*'
041F   C3 0E 0E               JP   dotNext   
0422                             ; .s print string
0422                             ; string* --
0422                PRINTSTRING:      
0422   E1                     POP   hl   ; hl = string*
0423   ED 5B E8 5E            LD   de,(vBufPtr)   ; de = buffer*
0427   18 03                  JR   printString1   
0429                PRINTSTRING0:      
0429   12                     LD   (de),a   ; a -> buffer*
042A   13                     INC   de   ; string*++,
042B   23                     INC   hl   
042C                PRINTSTRING1:      
042C   7E                     LD   a,(hl)   ; a <- string*
042D   B7                     OR   a   ; if NUL exit loop
042E   20 F9                  JR   nz,printString0   
0430   ED 53 E8 5E            LD   (vBufPtr),de   ; save buffer*' in pointer
0434   C3 0E 0E               JP   dotNext   
0437                             ; . print decimal
0437                             ; value --
0437                PRINTNUMBER:      
0437   3A EF 5E               LD   a,(vNumBase)   
043A   FE 10                  CP   16   
043C   CA A8 04               JP   z,printHex   ; else falls through
043F   C3 42 04               JP   printDec   
0442                             ; print decimal                 ; 70
0442                             ; value --
0442                PRINTDEC:      
0442   ED 5B E8 5E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0446   D9                     EXX      
0447   E1                     POP   hl   ; hl = value
0448   3A EE 5E               LD   a,(vDataWidth)   
044B   3D                     DEC   a   
044C   20 02                  JR   nz,printDec1   
044E   26 00                  LD   h,0   
0450                PRINTDEC1:      
0450   CD 5F 04               CALL   printDec2   
0453   D9                     EXX      ; de = buffer*' bc = IP
0454   3E 20                  LD   a," "   ; append space to buffer
0456   12                     LD   (de),a   
0457   13                     INC   de   ; string*++,
0458   ED 53 E8 5E            LD   (vBufPtr),de   ; update buffer* with buffer*'
045C   C3 0E 0E               JP   dotNext   
045F                             ; hl = value
045F                             ; de' = buffer*
045F                             ; a, bc, de, hl destroyed
045F                PRINTDEC2:      
045F   CB 7C                  BIT   7,h   
0461   28 0C                  JR   z,printDec3   
0463   D9                     EXX      
0464   3E 2D                  LD   a,"-"   
0466   12                     LD   (de),a   
0467   13                     INC   de   
0468   D9                     EXX      
0469   AF                     XOR   a   
046A   95                     SUB   l   
046B   6F                     LD   l,a   
046C   9F                     SBC   a,a   
046D   94                     SUB   h   
046E   67                     LD   h,a   
046F                PRINTDEC3:      
046F   0E 00                  LD   c,0   ; leading zeros flag = false
0471   11 F0 D8               LD   de,-10000   
0474   CD 8F 04               CALL   printDec4   
0477   11 18 FC               LD   de,-1000   
047A   CD 8F 04               CALL   printDec4   
047D   11 9C FF               LD   de,-100   
0480   CD 8F 04               CALL   printDec4   
0483   1E F6                  LD   e,-10   
0485   CD 8F 04               CALL   printDec4   
0488   0C                     INC   c   ; flag = true for at least digit
0489   1E FF                  LD   e,-1   
048B   CD 8F 04               CALL   printDec4   
048E   C9                     RET      
048F                PRINTDEC4:      
048F   06 2F                  LD   b,"0"-1   
0491                PRINTDEC5:      
0491   04                     INC   b   
0492   19                     ADD   hl,de   
0493   38 FC                  JR   c,printDec5   
0495   ED 52                  SBC   hl,de   
0497   3E 30                  LD   a,"0"   
0499   B8                     CP   b   
049A   20 05                  JR   nz,printDec6   
049C   AF                     XOR   a   
049D   B1                     OR   c   
049E   C8                     RET   z   
049F   18 01                  JR   printDec7   
04A1                PRINTDEC6:      
04A1   0C                     INC   c   
04A2                PRINTDEC7:      
04A2   78                     LD   a,b   
04A3   D9                     EXX      
04A4   12                     LD   (de),a   
04A5   13                     INC   de   
04A6   D9                     EXX      
04A7   C9                     RET      
04A8                             ; buffer hex                    37
04A8                             ; value --
04A8                PRINTHEX:      
04A8   ED 5B E8 5E            LD   de,(vBufPtr)   
04AC   3A F0 5E               LD   a,(vHexPrefix)   ; "$"
04AF   B7                     OR   a   ; skip if null
04B0   28 02                  JR   z,printHex1   
04B2   12                     LD   (de),a   
04B3   13                     INC   de   ; string*++,
04B4                PRINTHEX1:      
04B4   E1                     POP   hl   ; hl = value
04B5   3A EE 5E               LD   a,(vDataWidth)   
04B8   3D                     DEC   a   
04B9   28 04                  JR   z,printHex2   
04BB   7C                     LD   a,h   
04BC   CD CE 04               CALL   printHex3   
04BF                PRINTHEX2:      
04BF   7D                     LD   a,l   
04C0   CD CE 04               CALL   printHex3   
04C3   3E 20                  LD   a," "   ; append space to buffer
04C5   12                     LD   (de),a   
04C6   13                     INC   de   ; string*++,
04C7   ED 53 E8 5E            LD   (vBufPtr),de   
04CB   C3 0E 0E               JP   dotNext   
04CE                PRINTHEX3:      
04CE   F5                     PUSH   af   
04CF   1F                     RRA      
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   CD D7 04               CALL   printHex4   
04D6   F1                     POP   af   
04D7                PRINTHEX4:      
04D7   E6 0F                  AND   0x0F   
04D9   C6 90                  ADD   a,0x90   
04DB   27                     DAA      
04DC   CE 40                  ADC   a,0x40   
04DE   27                     DAA      
04DF   12                     LD   (de),a   
04E0   13                     INC   de   ; string*++,
04E1   C9                     RET      
04E2                             ;********************** PAGE 4 END *********************************************
04E2                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA AF 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 81 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   41                     DB   lsb(command_b_)   
050D   00                     DB   0   
050E   50                     DB   lsb(command_d_)   
050F   5B                     DB   lsb(command_e_)   
0510   6A                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   95                     DB   lsb(command_h_)   
0513   A0                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   AB                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   BE                     DB   lsb(comand_o_)   
051A   C9                     DB   lsb(command_p_)   
051B   00                     DB   0   
051C   D0                     DB   lsb(command_r_)   
051D   D2                     DB   lsb(command_s_)   
051E   D4                     DB   lsb(command_t_)   
051F   00                     DB   0   
0520   D6                     DB   lsb(command_v_)   
0521   D8                     DB   lsb(command_w_)   
0522   DA                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   DC                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD 9C 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   6F 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   7D 06                  DW   addrOf   
0531   69 74                  DB   "it"   ; /ait array iterator
0533   5B 08                  DW   arrayIter   
0535   6C 63                  DB   "lc"   ; /alc mem allocate
0537   DB 06                  DW   memAllocate   
0539   6C 6E                  DB   "ln"   ; /aln array length
053B   85 06                  DW   arrayLength   
053D   00 00                  DW   0   
053F   CA 06                  DW   error1   
0541                COMMAND_B_:      
0541   CD 9C 0F               CALL   cmdTable   
0544   79 65                  DB   "ye"   ; /bye cold reboot
0546   76 10                  DW   coldStart   
0548   79 74                  DB   "yt"   ; /byt byte mode
054A   A8 06                  DW   byteMode   
054C   00 00                  DW   0   
054E   CA 06                  DW   error1   
0550                COMMAND_D_:      
0550   CD 9C 0F               CALL   cmdTable   
0553   65 63                  DB   "ec"   ; /dec decimal
0555   B8 06                  DW   decBase   
0557   00 00                  DW   0   
0559   CA 06                  DW   error1   
055B                COMMAND_E_:      
055B   CD 9C 0F               CALL   cmdTable   
055E   63 68                  DB   "ch"   
0560   BF 06                  DW   echo   
0562   6E 64                  DB   "nd"   
0564   4E 07                  DW   stringEnd   
0566   00 00                  DW   0   
0568   CA 06                  DW   error1   
056A                COMMAND_F_:      
056A   CD 9C 0F               CALL   cmdTable   
056D   61 6C                  DB   "al"   ; /fal false
056F   90 0D                  DW   false1   
0571   6F 72                  DB   "or"   ; /for forEach
0573   67 0A                  DW   forEach   
0575   72 65                  DB   "re"   ; /fre free memory
0577   DD 06                  DW   memFree   
0579   72 61                  DB   "ra"   ; /fra free memory array
057B   E3 06                  DW   memFreeArray   
057D   74 72                  DB   "tr"   ; /ftr filter
057F   B5 09                  DW   filter   
0581   31 00                  DB   "1",0   
0583   67 11                  DW   f1   
0585   32 00                  DB   "2",0   
0587   73 11                  DW   f2   
0589   33 00                  DB   "3",0   
058B   7F 11                  DW   f3   
058D   34 00                  DB   "4",0   
058F   8B 11                  DW   f4   
0591   00 00                  DW   0   
0593   CA 06                  DW   error1   
0595                COMMAND_H_:      
0595   CD 9C 0F               CALL   cmdTable   
0598   65 78                  DB   "ex"   ; /hex hex
059A   C5 06                  DW   hexBase   
059C   00 00                  DW   0   
059E   CA 06                  DW   error1   
05A0                COMMAND_I_:      
05A0   CD 9C 0F               CALL   cmdTable   
05A3   6E 00                  DB   "n",0   ; /in input
05A5   D0 06                  DW   input   
05A7   00 00                  DW   0   
05A9   CA 06                  DW   error1   
05AB                COMMAND_M_:      
05AB   CD 9C 0F               CALL   cmdTable   
05AE   61 70                  DB   "ap"   ; /map map
05B0   73 09                  DW   map   
05B2   61 78                  DB   "ax"   ; /max maximum
05B4   E8 06                  DW   maximum   
05B6   69 6E                  DB   "in"   ; /min minimum
05B8   F4 06                  DW   minimum   
05BA   00 00                  DW   0   
05BC   CA 06                  DW   error1   
05BE                COMAND_O_:      
05BE   CD 9C 0F               CALL   cmdTable   
05C1   75 74                  DB   "ut"   ; /out out
05C3   00 07                  DW   output   
05C5   00 00                  DW   0   
05C7   CA 06                  DW   error1   
05C9                COMMAND_P_:      
05C9   CD 9C 0F               CALL   cmdTable   
05CC   00 00                  DW   0   
05CE   CA 06                  DW   error1   
05D0                COMMAND_R_:      
05D0   18 0D                  JR   command_r   
05D2                COMMAND_S_:      
05D2   18 22                  JR   command_s   
05D4                COMMAND_T_:      
05D4   18 43                  JR   command_t   
05D6                COMMAND_V_:      
05D6   18 4C                  JR   command_v   
05D8                COMMAND_W_:      
05D8   18 59                  JR   command_w   
05DA                COMMAND_X_:      
05DA   18 66                  JR   command_x   
05DC                             ; 3
05DC                COMMAND_DEFAULT_:      
05DC   C3 4D 06               JP   command_default   
05DF                             ;********************** PAGE 5 END *********************************************
05DF                             ; .align $100
05DF                COMMAND_R:      
05DF   CD 9C 0F               CALL   cmdTable   
05E2   63 00                  DB   "c",0   ; /rc tail call optimisation
05E4   13 07                  DW   recur   
05E6   65 6D                  DB   "em"   ; /rem remainder
05E8   19 07                  DW   remain   
05EA   65 74                  DB   "et"   ; /ret return
05EC   09 07                  DW   return   
05EE   6E 67                  DB   "ng"   ; /rng range src
05F0   C2 07                  DW   rangeSrc   
05F2   00 00                  DW   0   
05F4   CA 06                  DW   error1   
05F6                COMMAND_S:      
05F6   CD 9C 0F               CALL   cmdTable   
05F9   63 6E                  DB   "cn"   ; /scn scan stream
05FB   16 0A                  DW   scan1   
05FD   63 70                  DB   "cp"   ; /scp string compare
05FF   8C 07                  DW   stringCompare   
0601   65 6C                  DB   "el"   ; /sel select
0603   1F 07                  DW   select   
0605   69 74                  DB   "it"   ; /sit string iterator
0607   E3 08                  DW   stringIter   
0609   6C 6E                  DB   "ln"   ; /sln string length
060B   7D 07                  DW   stringLength   
060D   72 63                  DB   "rc"   ; /src source block* --
060F   B3 0A                  DW   source   
0611   74 72                  DB   "tr"   ; /str start building string
0613   46 07                  DW   stringBegin   
0615   00 00                  DW   0   
0617   CA 06                  DW   error1   
0619                COMMAND_T:      
0619   CD 9C 0F               CALL   cmdTable   
061C   72 75                  DB   "ru"   ; /tru true
061E   8A 0D                  DW   true1   
0620   00 00                  DW   0   
0622   CA 06                  DW   error1   
0624                COMMAND_V:      
0624   CD 9C 0F               CALL   cmdTable   
0627   61 72                  DB   "ar"   ; /var constant vars
0629   00 5E                  DW   vars   
062B   6F 69                  DB   "oi"   ; /voi void function return
062D   AA 07                  DW   void   
062F   00 00                  DW   0   
0631   CA 06                  DW   error1   
0633                COMMAND_W:      
0633   CD 9C 0F               CALL   cmdTable   
0636   68 69                  DB   "hi"   ; /whi while true else break from loop
0638   8E 06                  DW   while   
063A   72 64                  DB   "rd"   ; /wrd word mode
063C   B2 07                  DW   wordMode   
063E   00 00                  DW   0   
0640   CA 06                  DW   error1   
0642                COMMAND_X:      
0642   CD 9C 0F               CALL   cmdTable   
0645   6F 72                  DB   "or"   ; /xor exclsuive or
0647   B7 07                  DW   xor   
0649   00 00                  DW   0   
064B   CA 06                  DW   error1   
064D                COMMAND_DEFAULT:      
064D   CD 9C 0F               CALL   cmdTable   
0650   00 00                  DW   0   
0652   54 06                  DW   div   
0654                             ;                               32
0654                DIV:         
0654   E1                     POP   hl   ; hl = arg_b
0655   D1                     POP   de   ; de = arg_a
0656   03                     INC   bc   
0657   0A                     LD   a,(bc)   
0658   FE 3D                  CP   "="   
065A   28 02                  JR   z,div2   
065C   0B                     DEC   bc   ; /
065D   EB                     EX   de,hl   
065E                DIV2:        
065E   F5                     PUSH   af   ; preserve af, bc
065F   C5                     PUSH   bc   
0660   44 4D                  LD   bc,hl   
0662   CD F5 0D               CALL   divide   
0665   EB                     EX   de,hl   
0666   ED 53 FA 5E            LD   (vRemain),de   
066A   C1                     POP   bc   ; restore
066B   F1                     POP   af   
066C   C3 9D 02               JP   sub3   
066F                             ; /abs absolute
066F                             ; num -- num
066F                ABSOLUTE:      
066F   E1                     POP   hl   
0670   CB 7C                  BIT   7,h   
0672   28 06                  JR   z,absolute1   
0674   AF                     XOR   a   
0675   95                     SUB   l   
0676   6F                     LD   l,a   
0677   9F                     SBC   a,a   
0678   94                     SUB   h   
0679   67                     LD   h,a   
067A                ABSOLUTE1:      
067A   E5                     PUSH   hl   
067B   DD E9                  JP   (ix)   
067D                             ; /adr addrOf
067D                             ; char -- addr
067D                ADDROF:      
067D   E1                     POP   hl   ; a = char
067E   7D                     LD   a,l   
067F   CD BE 0F               CALL   getVarAddr   
0682   E5                     PUSH   hl   
0683                ADDROF2:      
0683   DD E9                  JP   (ix)   
0685                             ; /aln length of an array, num elements
0685                             ; array* -- num
0685                ARRAYLENGTH:      
0685   E1                     POP   hl   
0686   2B                     DEC   hl   ; msb size
0687   56                     LD   d,(hl)   
0688   2B                     DEC   hl   ; lsb size
0689   5E                     LD   e,(hl)   
068A   EB                     EX   de,hl   
068B                ARRAYLENGTH1:      
068B   E5                     PUSH   hl   
068C   DD E9                  JP   (ix)   
068E                             ; 13
068E                             ; /whi while true else break from loop
068E                             ; --
068E                WHILE:       
068E   E1                     POP   hl   ; hl = condition, break if false
068F   7D                     LD   a,l   
0690   B4                     OR   h   
0691   28 02                  JR   z,while1   
0693   DD E9                  JP   (ix)   
0695                WHILE1:      
0695   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0697   FD 54                  LD   d,iyh   
0699   21 08 00               LD   hl,8   
069C   19                     ADD   hl,de   
069D   23                     INC   hl   
069E   23                     INC   hl   
069F   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06A2   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06A5   C3 64 0C               JP   blockEnd   
06A8                             ; /byt
06A8                BYTEMODE:      
06A8   3E 01                  LD   a,1   
06AA                BYTEMODE1:      
06AA   32 EE 5E               LD   (vDataWidth),a   
06AD   DD E9                  JP   (ix)   
06AF                             ; //
06AF                COMMENT:      
06AF   03                     INC   bc   ; point to next char
06B0   0A                     LD   a,(bc)   
06B1   FE 20                  CP   " "   ; terminate on any char less than SP
06B3   30 FA                  JR   nc,comment   
06B5   0B                     DEC   bc   
06B6   DD E9                  JP   (ix)   
06B8                DECBASE:      
06B8   3E 0A                  LD   a,10   
06BA                DECBASE1:      
06BA   32 EF 5E               LD   (vNumBase),a   
06BD   DD E9                  JP   (ix)   
06BF                             ; /ech
06BF                             ; bool --
06BF                ECHO:        
06BF   E1                     POP   hl   
06C0   22 F1 5E               LD   (vEcho),hl   
06C3   DD E9                  JP   (ix)   
06C5                HEXBASE:      
06C5   3E 10                  LD   a,16   
06C7   C3 BA 06               JP   decBase1   
06CA                ERROR1:      
06CA   21 01 00               LD   hl,1   ; error 1: unknown command
06CD   C3 25 11               JP   error   
06D0                             ; Z80 port input
06D0                             ; port -- value
06D0                INPUT:       
06D0   E1                     POP   hl   
06D1   59                     LD   e,c   ; save IP
06D2   4D                     LD   c,l   
06D3   ED 68                  IN   l,(c)   
06D5   26 00                  LD   h,0   
06D7   4B                     LD   c,e   ; restore IP
06D8   E5                     PUSH   hl   
06D9   DD E9                  JP   (ix)   
06DB                             ; /alc
06DB                             ; size -- adr
06DB                MEMALLOCATE:      
06DB   DD E9                  JP   (ix)   
06DD                             ; /fre
06DD                             ; adr --
06DD                MEMFREE:      
06DD   E1                     POP   hl   
06DE                MEMFREE1:      
06DE   22 EA 5E               LD   (vHeapPtr),hl   
06E1   DD E9                  JP   (ix)   
06E3                             ; /fra
06E3                             ; adr --
06E3                MEMFREEARRAY:      
06E3   E1                     POP   hl   
06E4   2B                     DEC   hl   
06E5   2B                     DEC   hl   
06E6   18 F6                  JR   memFree1   
06E8                             ; /max maximum
06E8                             ; a b -- c
06E8                MAXIMUM:      
06E8   E1                     POP   hl   
06E9   D1                     POP   de   
06EA   E5                     PUSH   hl   
06EB   B3                     OR   e   
06EC   ED 52                  SBC   hl,de   
06EE   30 02                  JR   nc,maximum1   
06F0   E1                     POP   hl   
06F1   D5                     PUSH   de   
06F2                MAXIMUM1:      
06F2   DD E9                  JP   (ix)   
06F4                             ; /min minimum
06F4                             ; a b -- c
06F4                MINIMUM:      
06F4   E1                     POP   hl   
06F5   D1                     POP   de   
06F6   E5                     PUSH   hl   
06F7   B3                     OR   e   
06F8   ED 52                  SBC   hl,de   
06FA   38 02                  JR   c,minimum1   
06FC   E1                     POP   hl   
06FD   D5                     PUSH   de   
06FE                MINIMUM1:      
06FE   DD E9                  JP   (ix)   
0700                             ; /o Z80 port output
0700                             ; value port --
0700                OUTPUT:      
0700   E1                     POP   hl   
0701   59                     LD   e,c   ; save IP
0702   4D                     LD   c,l   
0703   E1                     POP   hl   
0704   ED 69                  OUT   (c),l   
0706   4B                     LD   c,e   ; restore IP
0707   DD E9                  JP   (ix)   
0709                             ; /ret
0709                             ; --
0709                RETURN:      
0709   E1                     POP   hl   ; hl = condition, exit if true
070A   7D                     LD   a,l   
070B   B4                     OR   h   
070C   20 02                  JR   nz,return1   
070E   DD E9                  JP   (ix)   
0710                RETURN1:      
0710   C3 64 0C               JP   blockEnd   
0713                RECUR:       
0713   E1                     POP   hl   
0714   22 EC 5E               LD   (vRecurPtr),hl   
0717   DD E9                  JP   (ix)   
0719                REMAIN:      
0719   2A FA 5E               LD   hl,(vRemain)   
071C   E5                     PUSH   hl   
071D   DD E9                  JP   (ix)   
071F                             ; select case from an associative array of cases
071F                             ; bool cases* --
071F                SELECT:      
071F   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
0720   D1                     POP   de   ; de = select key
0721   C5                     PUSH   bc   ; save IP
0722   2B                     DEC   hl   ; bc = array length
0723   46                     LD   b,(hl)   
0724   2B                     DEC   hl   
0725   4E                     LD   c,(hl)   
0726   23                     INC   hl   
0727   23                     INC   hl   
0728   18 15                  JR   select2   
072A                SELECT1:      
072A   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
072B   BB                     CP   e   
072C   23                     INC   hl   ; hl++, flags are unaltered
072D   20 0C                  JR   nz,select1a   
072F   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
0730   BA                     CP   d   
0731   23                     INC   hl   ; hl++, flags are unaltered
0732   20 08                  JR   nz,select1b   
0734   5E                     LD   e,(hl)   
0735   23                     INC   hl   
0736   56                     LD   d,(hl)   
0737   C1                     POP   bc   
0738   C3 A0 03               JP   go1   
073B                SELECT1A:      
073B   23                     INC   hl   
073C                SELECT1B:      
073C   23                     INC   hl   
073D   23                     INC   hl   
073E   0B                     DEC   bc   
073F                SELECT2:      
073F   79                     LD   a,c   
0740   B0                     OR   b   
0741   20 E7                  JR   nz,select1   
0743   C1                     POP   bc   
0744   DD E9                  JP   (ix)   
0746                             ; /str
0746                STRINGBEGIN:      
0746   21 FF FF               LD   hl,TRUE   ; string mode = true
0749   22 F2 5E               LD   (vStrMode),hl   
074C   18 27                  JR   stringEnd1   ; save hl in vBufPtr
074E                             ; /end
074E                STRINGEND:      
074E   21 00 00               LD   hl,FALSE   ; string mode = false
0751   22 F2 5E               LD   (vStrMode),hl   
0754   2A E8 5E               LD   hl,(vBufPtr)   ; append NUL to string
0757   AF                     XOR   a   
0758   77                     LD   (hl),a   
0759   23                     INC   hl   ; hl = string_end*
075A   ED 43 04 5F            LD   (vTemp1),bc   ; save IP
075E   11 00 5D               LD   de,BUFFER   ; de = string*
0761   B7                     OR   a   ; bc = size
0762   ED 52                  SBC   hl,de   
0764   44 4D                  LD   bc,hl   
0766   2A EA 5E               LD   hl,(vHeapPtr)   ; hl = hstring*
0769   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
076A   D5                     PUSH   de   ; return hstring*
076B   ED B0                  LDIR      ; copy size bytes from string* to hstring*
076D   ED 53 EA 5E            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0771   ED 4B 04 5F            LD   bc,(vTemp1)   ; restore IP
0775                STRINGEND1:      
0775   21 00 5D               LD   hl,BUFFER   ; reset vBufPtr
0778   22 E8 5E               LD   (vBufPtr),hl   
077B   DD E9                  JP   (ix)   
077D                STRINGLENGTH:      
077D   D1                     POP   de   
077E   21 00 00               LD   hl,0   
0781   18 02                  JR   stringLength2   
0783                STRINGLENGTH1:      
0783   13                     INC   de   
0784   23                     INC   hl   
0785                STRINGLENGTH2:      
0785   1A                     LD   a,(de)   
0786   B7                     OR   a   
0787   20 FA                  JR   nz,stringLength1   
0789                STRINGLENGTH3:      
0789   E5                     PUSH   hl   
078A   DD E9                  JP   (ix)   
078C                             ; /sc string compare
078C                             ; string1* string2* -- bool
078C                             ; Compares two null terminated strings.
078C                STRINGCOMPARE:      
078C   D1                     POP   de   
078D   E1                     POP   hl   
078E                STRINGCOMPARE1:      
078E   1A                     LD   a,(de)   
078F   BE                     CP   (hl)   
0790   20 07                  JR   nz,stringCompare2   
0792   B7                     OR   a   
0793   28 09                  JR   z,stringCompare3   
0795   13                     INC   de   
0796   23                     INC   hl   
0797   18 F5                  JR   stringCompare1   
0799                STRINGCOMPARE2:      
0799   21 00 00               LD   hl,FALSE   
079C   18 03                  JR   stringCompare4   
079E                STRINGCOMPARE3:      
079E   21 FF FF               LD   hl,TRUE   
07A1                STRINGCOMPARE4:      
07A1   E5                     PUSH   hl   
07A2   DD E9                  JP   (ix)   
07A4                             ; /var
07A4                             ; --
07A4                VARIABLES:      
07A4   21 00 5E               LD   hl,VARS   
07A7   C3 7E 0F               JP   constant   
07AA                             ; /voi clear out returned values
07AA                             ; ?? --
07AA                VOID:        
07AA   FD 5D                  LD   e,iyl   
07AC   FD 54                  LD   d,iyh   
07AE   EB                     EX   de,hl   
07AF   F9                     LD   sp,hl   
07B0   DD E9                  JP   (ix)   
07B2                             ; /wrd
07B2                WORDMODE:      
07B2   3E 02                  LD   a,2   
07B4   C3 AA 06               JP   byteMode1   
07B7                             ; /xor
07B7                XOR:         
07B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07B8                XOR1:        
07B8   E1                     POP   hl   
07B9   7B                     LD   a,e   
07BA   AD                     XOR   l   
07BB   6F                     LD   l,a   
07BC   7A                     LD   a,d   
07BD   AC                     XOR   h   
07BE   67                     LD   h,a   
07BF   C3 D8 02               JP   add3   
07C2                             ;*******************************************************************
07C2                             ; Monty implementations
07C2                             ;*******************************************************************
07C2                             ; /rng rangeSrc
07C2                             ; begin end step -- src
07C2                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07C2                RANGESRC:      ; range source: begin, end, step, local: L
07C2   CD 9F 03               CALL   go   
07C5   00 00                  DW   NUL   
07C7   D1 07                  DW   rangeSrcM_1812S1363   
07C9   CB 07                  DW   $+2   
07CB   01                     DB   1   
07CC   04 62 65 73 4C         .PSTR   "besL"   
07D1                RANGESRCM_1812S1363:      
07D1   7B                     DB   "{"   ; init mutable L [index active inrange_test]
07D2   5B 25 62 20 2F 74 72 75 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /tru %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
07F8   5C 6B 74 7B            DB   "\\kt{"   
07FC   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
0805   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
080B   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
0814   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
081C   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
0826   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
082F   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
0834   7B 25 61 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/fal %L1;= 0 2}"   ; ifte: /tru index, /fal active = false, quit
084A   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0851   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0858   7D                     DB   "}"   
0859   7D                     DB   "}"   
085A   00                     DB   0   
085B                             ; /ai arrayIter
085B                             ; array* -- src
085B                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
085B                ARRAYITER:      
085B   CD 9F 03               CALL   go   
085E   00 00                  DW   NUL   
0860   68 08                  DW   arrayIterM_1831S1383   
0862   64 08                  DW   $+2   
0864   01                     DB   1   
0865   02 61 4C               .PSTR   "aL"   
0868                ARRAYITERM_1831S1383:      
0868   7B                     DB   "{"   
0869   5B 30 20 2F 74 72 75 20 25 61 2F 61 6C 6E 5D 20 25 4C 3D DB   "[0 /tru %a/aln] %L="   ; init mutable L [index active size]
087C   5C 6B 74 7B            DB   "\\kt{"   
0880   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
0889   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
088F   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
0898   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08A0   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08A7   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
08B0   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
08B9   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/fal %L1;= 0 2}"   ; ifte: /tru value, /fal active = false, quit
08D2   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
08D9   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E0   7D                     DB   "}"   
08E1   7D                     DB   "}"   
08E2   00                     DB   0   
08E3                             ; /sit stringIter
08E3                             ; string* -- src
08E3                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08E3                STRINGITER:      
08E3   CD 9F 03               CALL   go   
08E6   00 00                  DW   NUL   
08E8   F0 08                  DW   stringIterM_1850S1403   
08EA   EC 08                  DW   $+2   
08EC   01                     DB   1   
08ED   02 73 4C               .PSTR   "sL"   
08F0                STRINGITERM_1850S1403:      
08F0   7B                     DB   "{"   
08F1   5B 30 20 2F 74 72 75 5D 20 25 4C 3D DB   "[0 /tru] %L="   ; init mutable L [index active]
08FD   5C 6B 74 7B            DB   "\\kt{"   
0901   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
090A   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0911   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
091A   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
0922   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0929   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 72 64 20 25 63 3D DB   "/byt %s%i; /wrd %c="   ; read byte at i, store in c as word
093C   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
0945   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
094C   7B 25 63 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/fal %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0962   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
0969   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0970   7D                     DB   "}"   
0971   7D                     DB   "}"   
0972   00                     DB   0   
0973                             ; /map map
0973                             ; src func -- src1
0973                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0973                MAP:         ; map: source, function
0973   CD 9F 03               CALL   go   
0976   00 00                  DW   NUL   
0978   80 09                  DW   mapM_1870S1425   
097A   7C 09                  DW   $+2   
097C   00                     DB   0   
097D   02 73 66               .PSTR   "sf"   
0980                MAPM_1870S1425:      
0980   7B                     DB   "{"   
0981   5C 6B 74 7B            DB   "\\kt{"   
0985   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
098E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0992   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0997   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
09A3   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09AB   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09B2   7D                     DB   "}"   
09B3   7D                     DB   "}"   
09B4   00                     DB   0   
09B5                             ; /ft filter
09B5                             ; src pred -- src1
09B5                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09B5                FILTER:      ; filter: source, predicate, local: T
09B5   CD 9F 03               CALL   go   
09B8   00 00                  DW   NUL   
09BA   C3 09                  DW   filterM_1884S1440   
09BC   BE 09                  DW   $+2   
09BE   01                     DB   1   
09BF   03 73 70 54            .PSTR   "spT"   
09C3                FILTERM_1884S1440:      
09C3   7B                     DB   "{"   
09C4   5B 30 5D 25 54 3D      DB   "[0]%T="   
09CA   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09CE   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09D2   5B                     DB   "["   
09D3   7B 25 64 20 25 54 30 3B 3D 20 2F 74 72 75 7D DB   "{%d %T0;= /tru}"   ; case 0: store talkback in T[0], return true
09E2   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09EA   7B 2F 74 72 75 7D      DB   "{/tru}"   ; case 2: return true
09F0   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
09F5   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
0A0B   3F                     DB   "?"   
0A0C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A13   7D                     DB   "}"   
0A14   7D                     DB   "}"   
0A15   00                     DB   0   
0A16                             ; /scn scan1
0A16                             ; src init reducer -- src1
0A16                             ; where reducer is a function like: \\da00bbLi4u
0A16                          ;*Macro unroll: FUNC scan1, 1, "sirA"                    ; src, init, reducer
0A16                SCAN1:       ; src, init, reducer
0A16   CD 9F 03               CALL   go   
0A19   00 00                  DW   NUL   
0A1B   25 0A                  DW   scan1M_1903S1460   
0A1D   1F 0A                  DW   $+2   
0A1F   01                     DB   1   
0A20   04 73 69 72 41         .PSTR   "sirA"   
0A25                SCAN1M_1903S1460:      
0A25   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A26   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A2D   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A31   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A35   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A3A   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A55   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0A5D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A64   7D                     DB   "}"   
0A65   7D                     DB   "}"   
0A66   00                     DB   0   
0A67                             ; /for forEach
0A67                             ; src proc --
0A67                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A67                FOREACH:      ; forEach: source, procedure, local: T
0A67   CD 9F 03               CALL   go   
0A6A   00 00                  DW   NUL   
0A6C   75 0A                  DW   forEachM_1917S1475   
0A6E   70 0A                  DW   $+2   
0A70   01                     DB   1   
0A71   03 73 70 54            .PSTR   "spT"   
0A75                FOREACHM_1917S1475:      
0A75   7B                     DB   "{"   
0A76   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A7C   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A80   32 25 74 3D 3D 2F 72 65 74 DB   "2%t==/ret"   ; if type == 2 skip
0A89   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A8E   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0AA0   3F                     DB   "?"   ; ifte:
0AA1   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0AAA   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AB1   7D                     DB   "}"   
0AB2   00                     DB   0   
0AB3                             ; /src source
0AB3                             ; block* -- src
0AB3                          ;*Macro unroll: FUNC source, 0, "f"                      ; :f block
0AB3                SOURCE:      ; :f block
0AB3   CD 9F 03               CALL   go   
0AB6   00 00                  DW   NUL   
0AB8   BF 0A                  DW   sourceM_1931S1490   
0ABA   BC 0A                  DW   $+2   
0ABC   00                     DB   0   
0ABD   01 66                  .PSTR   "f"   
0ABF                SOURCEM_1931S1490:      
0ABF   7B                     DB   "{"   
0AC0   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0AC4   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /ret
0ACD   5C 64 74 7B            DB   "\\dt{"   
0AD1   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /ret
0AE4   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AEB   7D                     DB   "}"   
0AEC   7D                     DB   "}"   
0AED   00                     DB   0   
0AEE                          ;*Macro unroll: FUNC printArray, 2, "abc"
0AEE                PRINTARRAY:      
0AEE   CD 9F 03               CALL   go   
0AF1   00 00                  DW   NUL   
0AF3   FC 0A                  DW   printArrayM_1941S1501   
0AF5   F7 0A                  DW   $+2   
0AF7   02                     DB   2   
0AF8   03 61 62 63            .PSTR   "abc"   
0AFC                PRINTARRAYM_1941S1501:      
0AFC   7B                     DB   "{"   
0AFD   27 5B 20 27 2E 73 20 25 61 2F 61 6C 6E 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/aln%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B36   7D                     DB   "}"   
0B37   00                     DB   0   
0B38                             ;*******************************************************************
0B38                             ; implementations continued
0B38                             ;*******************************************************************
0B38                COMMA:       
0B38   CD 9C 0F               CALL   cmdTable   
0B3B   63 00                  DB   "c",NUL   ; .c print char
0B3D   47 0B                  DW   readChar   
0B3F   73 00                  DB   "s",NUL   ; .s print string
0B41   50 0B                  DW   readString   
0B43   00 00                  DW   NUL   ; .  print number, fall through
0B45   72 0B                  DW   readNumber   
0B47                READCHAR:      
0B47   CD 81 00               CALL   getchar   
0B4A   26 00                  LD   h,0   
0B4C   6F                     LD   l,a   
0B4D   E5                     PUSH   hl   
0B4E   DD E9                  JP   (ix)   
0B50                READSTRING:      
0B50   ED 5B EA 5E            LD   de,(vHeapPtr)   
0B54   D5                     PUSH   de   ; return start of string
0B55                READSTRING1:      
0B55   CD 81 00               CALL   getchar   
0B58   FE 0D                  CP   "\r"   
0B5A   28 0D                  JR   z,readString2   
0B5C   12                     LD   (de),a   
0B5D   13                     INC   de   
0B5E   3A F1 5E               LD   a,(vEcho)   
0B61   3C                     INC   a   
0B62   20 F1                  JR   nz,readString1   
0B64   CD 85 00               CALL   putchar   
0B67   18 EC                  JR   readString1   
0B69                READSTRING2:      
0B69   AF                     XOR   a   
0B6A   12                     LD   (de),a   
0B6B   13                     INC   de   
0B6C   ED 53 EA 5E            LD   (vHeapPtr),de   
0B70   DD E9                  JP   (ix)   
0B72                READNUMBER:      
0B72   DD E5                  PUSH   ix   
0B74                          ;*Macro unroll:  PERFORM readString
0B74   DD 21 7B 0B            LD   ix,performM_1985S1550   
0B78   C3 50 0B               JP   readString   
0B7B                PERFORMM_1985S1550:      
0B7B   60 69                  LD   hl,bc   ; save bc, hl = string*
0B7D   E3                     EX   (sp),hl   
0B7E   22 EA 5E               LD   (vHeapPtr),hl   ; restore heap* to before string
0B81   44 4D                  LD   bc,hl   
0B83   0A                     LD   a,(bc)   
0B84   FE 2D                  CP   "-"   
0B86   28 11                  JR   z,readNumber1   
0B88   FE 24                  CP   "$"   
0B8A   28 17                  JR   z,readNumber2   
0B8C   FE 30                  CP   "0"   
0B8E   30 09                  JR   nc,readNumber1   
0B90   FE 3A                  CP   "9"+1   
0B92   38 05                  JR   c,readNumber1   
0B94   21 00 00               LD   hl,0   
0B97   18 12                  JR   readNumber3   
0B99                READNUMBER1:      
0B99                          ;*Macro unroll:  PERFORM num
0B99   DD 21 A0 0B            LD   ix,performM_2002S1567   
0B9D   C3 34 0C               JP   num   
0BA0                PERFORMM_2002S1567:      
0BA0   E1                     POP   hl   
0BA1   18 08                  JR   readNumber3   
0BA3                READNUMBER2:      
0BA3                          ;*Macro unroll:  PERFORM hexNum
0BA3   DD 21 AA 0B            LD   ix,performM_2006S1571   
0BA7   C3 BB 0B               JP   hexNum   
0BAA                PERFORMM_2006S1571:      
0BAA   E1                     POP   hl   
0BAB                READNUMBER3:      
0BAB   C1                     POP   bc   
0BAC   DD E1                  POP   ix   
0BAE   E5                     PUSH   hl   
0BAF   DD E9                  JP   (ix)   
0BB1                             ; ~ bitwise invert
0BB1                TILDE:       
0BB1                INVERT:      
0BB1   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BB2   7D                     LD   a,l   
0BB3   2F                     CPL      
0BB4   6F                     LD   l,a   
0BB5   7C                     LD   a,h   
0BB6   2F                     CPL      
0BB7   67                     LD   h,a   
0BB8   C3 D8 02               JP   add3   
0BBB                             ; $ hex                         ; 22
0BBB                DOLLAR:      
0BBB                HEXNUM:      
0BBB   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BBE                HEXNUM1:      
0BBE   03                     INC   bc   
0BBF   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BC0   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BC2   28 02                  JR   z,hexnum2   ; no a decimal
0BC4   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BC6                HEXNUM2:      
0BC6   D6 30                  SUB   $30   ; form decimal digit
0BC8   DA 56 0C               JP   c,num2   
0BCB   FE 10                  CP   $0F+1   
0BCD   D2 56 0C               JP   nc,num2   
0BD0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BD1   29                     ADD   hl,hl   ; 4X
0BD2   29                     ADD   hl,hl   ; 8X
0BD3   29                     ADD   hl,hl   ; 16X
0BD4   85                     ADD   a,l   ; add into bottom of hl
0BD5   6F                     LD   l,a   
0BD6   18 E6                  JR   hexnum1   
0BD8                             ; ? if                            23
0BD8                             ; condition then else -- value
0BD8                QUESTION:      
0BD8                IF:          
0BD8   D1                     POP   de   ; de = else
0BD9   E1                     POP   hl   ; hl = then
0BDA   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BDB   7C                     LD   a,h   
0BDC   B5                     OR   l   
0BDD   E1                     POP   hl   ; hl = then
0BDE   CA A0 03               JP   z,go1   ; if z de = else
0BE1   EB                     EX   de,hl   ; condition = false, de = then
0BE2   C3 A0 03               JP   go1   
0BE5                             ; string                        ;38
0BE5                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0BE5                QUOTE:       
0BE5                STRING:      
0BE5   2A EA 5E               LD   hl,(vHeapPtr)   ; hl = heap*
0BE8   E5                     PUSH   hl   ; save start of string
0BE9   0A                     LD   a,(bc)   
0BEA   5F                     LD   e,a   ; e = matching terminator
0BEB   03                     INC   bc   ; point to next char
0BEC   18 03                  JR   string2   
0BEE                STRING1:      
0BEE   77                     LD   (hl),a   
0BEF   23                     INC   hl   ; increase count
0BF0   03                     INC   bc   ; point to next char
0BF1                STRING2:      
0BF1   0A                     LD   a,(bc)   
0BF2   BB                     CP   e   ; is it the string terminator
0BF3   28 02                  JR   z,string3   
0BF5   18 F7                  JR   string1   
0BF7                STRING3:      
0BF7   AF                     XOR   a   ; write NUL to terminate string
0BF8   77                     LD   (hl),a   ; hl = end of string
0BF9   23                     INC   hl   
0BFA   22 EA 5E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BFD   DD E9                  JP   (ix)   
0BFF                             ; %a .. %z                      43
0BFF                             ; -- value
0BFF                             ; returns value of arg
0BFF                PERCENT:      
0BFF                ARG:         
0BFF   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C02   FD 56 05               LD   d,(iy+5)   
0C05   EB                     EX   de,hl   
0C06   7D                     LD   a,l   ; arg_list* == null, skip
0C07   B4                     OR   h   
0C08   28 1A                  JR   z,arg0a   
0C0A   23                     INC   hl   ; a = num_args, hl = arg_list*
0C0B   7E                     LD   a,(hl)   
0C0C   23                     INC   hl   
0C0D   B7                     OR   a   
0C0E   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C10   5F                     LD   e,a   ; e = a = num_args
0C11   03                     INC   bc   ; a = next char = dollar_name
0C12   0A                     LD   a,(bc)   
0C13   C5                     PUSH   bc   ; save IP
0C14   43                     LD   b,e   ; b = e = num_args
0C15   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C18   FD 56 03               LD   d,(iy+3)   
0C1B                ARG0:        
0C1B   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C1C   1B                     DEC   de   
0C1D   BE                     CP   (hl)   
0C1E   28 09                  JR   z,arg1   
0C20   23                     INC   hl   ; hl = next arg_list*
0C21   10 F8                  DJNZ   arg0   
0C23   C1                     POP   bc   ; no match, restore IP
0C24                ARG0A:       
0C24   11 00 00               LD   de,0   ; return 0
0C27   18 08                  JR   arg1a   
0C29                ARG1:        
0C29   C1                     POP   bc   ; restore IP
0C2A   EB                     EX   de,hl   ; hl = arg*
0C2B   22 F8 5E               LD   (vPointer),hl   ; store arg* in setter
0C2E   5E                     LD   e,(hl)   
0C2F   23                     INC   hl   
0C30   56                     LD   d,(hl)   ; de = arg
0C31                ARG1A:       
0C31   D5                     PUSH   de   ; push arg
0C32   DD E9                  JP   (ix)   
0C34                             ; 0..9 number                   37
0C34                NUM:         
0C34   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C37   0A                     LD   a,(bc)   ; Get numeral or -
0C38   FE 2D                  CP   "-"   
0C3A   20 01                  JR   nz,num0   
0C3C   03                     INC   bc   ; move to next char, no flags affected
0C3D                NUM0:        
0C3D   08                     EX   af,af'   ; save zero flag = 0 for later
0C3E                NUM1:        
0C3E   0A                     LD   a,(bc)   ; read digit
0C3F   D6 30                  SUB   "0"   ; less than 0?
0C41   38 13                  JR   c,num2   ; not a digit, exit loop
0C43   FE 0A                  CP   10   ; greater that 9?
0C45   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C47   03                     INC   bc   ; inc IP
0C48   54 5D                  LD   de,hl   ; multiply hl * 10
0C4A   29                     ADD   hl,hl   
0C4B   29                     ADD   hl,hl   
0C4C   19                     ADD   hl,de   
0C4D   29                     ADD   hl,hl   
0C4E   85                     ADD   a,l   ; add digit in a to hl
0C4F   6F                     LD   l,a   
0C50   3E 00                  LD   a,0   
0C52   8C                     ADC   a,h   
0C53   67                     LD   h,a   
0C54   18 E8                  JR   num1   
0C56                NUM2:        
0C56   0B                     DEC   bc   
0C57   08                     EX   af,af'   ; restore zero flag
0C58   20 07                  JR   nz,num3   
0C5A   EB                     EX   de,hl   ; negate the value of hl
0C5B   21 00 00               LD   hl,0   
0C5E   B7                     OR   a   ; jump to sub2
0C5F   ED 52                  SBC   hl,de   
0C61                NUM3:        
0C61   E5                     PUSH   hl   ; Put the number on the stack
0C62   DD E9                  JP   (ix)   ; and process the next character
0C64                             ; }                               58
0C64                RBRACE:      
0C64                BLOCKEND:      
0C64   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C67   FD 56 01               LD   d,(iy+1)   
0C6A   ED 53 04 5F            LD   (vTemp1),de   
0C6E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C71   FD 56 07               LD   d,(iy+7)   
0C74   ED 53 06 5F            LD   (vTemp2),de   
0C78   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C7B   FD 56 03               LD   d,(iy+3)   
0C7E   EB                     EX   de,hl   
0C7F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C82   FD 56 01               LD   d,(iy+1)   
0C85   13                     INC   de   ; for carry flag <=
0C86   B7                     OR   a   
0C87   ED 52                  SBC   hl,de   
0C89   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0C8B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0C8D   FD 5D                  LD   e,iyl   
0C8F   21 08 00               LD   hl,8   
0C92   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C93   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C94   18 0C                  JR   blockEnd2   
0C96                BLOCKEND1:      ; same scope
0C96   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C99   FD 56 03               LD   d,(iy+3)   
0C9C   EB                     EX   de,hl   
0C9D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0C9F   FD 5D                  LD   e,iyl   
0CA1   EB                     EX   de,hl   
0CA2                BLOCKEND2:      
0CA2   44 4D                  LD   bc,hl   ; bc = hl = BP
0CA4   B7                     OR   a   ; hl = BP - SP = count
0CA5   ED 72                  SBC   hl,sp   
0CA7   7D                     LD   a,l   
0CA8   B4                     OR   h   
0CA9   28 09                  JR   z,blockEnd3   
0CAB   C5                     PUSH   bc   ; bc = count, hl = BP
0CAC   44 4D                  LD   bc,hl   
0CAE   E1                     POP   hl   
0CAF   2B                     DEC   hl   ; hl = BP-1
0CB0   1B                     DEC   de   ; de = args*-1
0CB1   ED B8                  LDDR      
0CB3   13                     INC   de   
0CB4                BLOCKEND3:      
0CB4   EB                     EX   de,hl   ; sp = de = new tos*
0CB5   F9                     LD   sp,hl   
0CB6   ED 4B 06 5F            LD   bc,(vTemp2)   
0CBA   FD 2A 04 5F            LD   iy,(vTemp1)   
0CBE   ED 5B EC 5E            LD   de,(vRecurPtr)   ; de = recur vector
0CC2   7B                     LD   a,e   ; check for NUL
0CC3   B2                     OR   d   
0CC4   20 02                  JR   nz,blockEnd4   
0CC6   DD E9                  JP   (ix)   
0CC8                BLOCKEND4:      
0CC8   21 00 00               LD   hl,0   ; clear recur vector
0CCB   22 EC 5E               LD   (vRecurPtr),hl   
0CCE   C3 A0 03               JP   go1   ; execute de
0CD1                GOBLOCK:      
0CD1   ED 53 04 5F            LD   (vTemp1),de   ; save de
0CD5   21 00 5C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0CD8   FD 54                  LD   d,iyh   
0CDA   FD 5D                  LD   e,iyl   
0CDC   B7                     OR   a   ; if stack* == BP then this is the root_scope
0CDD   ED 52                  SBC   hl,de   
0CDF   ED 5B 04 5F            LD   de,(vTemp1)   ; restore de
0CE3   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0CE4   B4                     OR   h   
0CE5   3E 00                  LD   a,0   
0CE7   28 6A                  JR   z,goFunc8   
0CE9   C5                     PUSH   bc   ; push IP
0CEA   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0CED   FD 46 05               LD   b,(iy+5)   
0CF0   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0CF3   FD 66 03               LD   h,(iy+3)   
0CF6                GOBLOCK2:      
0CF6   C5                     PUSH   bc   ; arg_list*
0CF7   E5                     PUSH   hl   ; first_arg*
0CF8   FD E5                  PUSH   iy   ; push BP
0CFA   FD 21 00 00            LD   iy,0   ; BP = SP
0CFE   FD 39                  ADD   iy,sp   
0D00                GOBLOCK3:      
0D00   42 4B                  LD   bc,de   ; bc = de = block*-1
0D02   DD E9                  JP   (ix)   
0D04                GOFUNC:      ; execute func
0D04   EB                     EX   de,hl   ; hl = func*
0D05   5E                     LD   e,(hl)   ; de = partial_array*
0D06   23                     INC   hl   
0D07   56                     LD   d,(hl)   
0D08   23                     INC   hl   
0D09   7B                     LD   a,e   ; if partial_array* == null skip
0D0A   B2                     OR   d   
0D0B   28 21                  JR   z,goFunc3   
0D0D   ED 43 04 5F            LD   (vTemp1),bc   
0D11   22 06 5F               LD   (vTemp2),hl   ; save bc,hl
0D14   EB                     EX   de,hl   ; hl = partial_array*
0D15   2B                     DEC   hl   ; bc = count
0D16   46                     LD   b,(hl)   
0D17   2B                     DEC   hl   
0D18   4E                     LD   c,(hl)   
0D19   23                     INC   hl   ; hl = array data*
0D1A   23                     INC   hl   
0D1B   18 06                  JR   goFunc2   ; push each item on stack
0D1D                GOFUNC1:      
0D1D   5E                     LD   e,(hl)   ; de = partial item
0D1E   23                     INC   hl   
0D1F   56                     LD   d,(hl)   
0D20   23                     INC   hl   
0D21   D5                     PUSH   de   ; push on stack
0D22   0B                     DEC   bc   
0D23                GOFUNC2:      
0D23   79                     LD   a,c   ; if count != 0 then loop
0D24   B0                     OR   b   
0D25   20 F6                  JR   nz,goFunc1   
0D27   ED 4B 04 5F            LD   bc,(vTemp1)   ; restore bc
0D2B   2A 06 5F               LD   hl,(vTemp2)   ; restore hl
0D2E                GOFUNC3:      
0D2E   5E                     LD   e,(hl)   ; de = block*
0D2F   23                     INC   hl   
0D30   56                     LD   d,(hl)   
0D31   23                     INC   hl   
0D32   ED 53 04 5F            LD   (vTemp1),de   ; save block*
0D36   5E                     LD   e,(hl)   ; de = arg_list*
0D37   23                     INC   hl   
0D38   56                     LD   d,(hl)   
0D39   23                     INC   hl   
0D3A   EB                     EX   de,hl   ; hl = arg_list*
0D3B   ED 5B 04 5F            LD   de,(vTemp1)   ; restore de = block*
0D3F   7D                     LD   a,l   ; if arg_list* == null a = 0
0D40   B4                     OR   h   
0D41   20 03                  JR   nz,goFunc4   
0D43   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D44   18 0D                  JR   goFunc8   
0D46                GOFUNC4:      ; allocate locals
0D46   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D47   18 03                  JR   goFunc6   
0D49                GOFUNC5:      ; loop
0D49   3B                     DEC   sp   
0D4A   3B                     DEC   sp   
0D4B   3D                     DEC   a   
0D4C                GOFUNC6:      
0D4C   B7                     OR   a   
0D4D   20 FA                  JR   nz,goFunc5   ; end loop
0D4F                GOFUNC7:      
0D4F   23                     INC   hl   ; a = num_args* x 2
0D50   7E                     LD   a,(hl)   
0D51   2B                     DEC   hl   
0D52   87                     ADD   a,a   ; a *= 2
0D53                GOFUNC8:      
0D53   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D54   44 4D                  LD   bc,hl   
0D56   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D59   85                     ADD   a,l   
0D5A   6F                     LD   l,a   
0D5B   39                     ADD   hl,sp   
0D5C   18 98                  JR   goBlock2   
0D5E                             ; =                              21
0D5E                             ; value _oldValue --            ; uses address in vPointer 15
0D5E                ASSIGN:      
0D5E   E1                     POP   hl   ; discard last accessed value
0D5F   E1                     POP   hl   ; hl = new value
0D60                ASSIGN0:      
0D60   EB                     EX   de,hl   ; de = new value
0D61   2A F8 5E               LD   hl,(vPointer)   
0D64                ASSIGN1:      ; entry point from defineEnd
0D64   73                     LD   (hl),e   
0D65   3A EE 5E               LD   a,(vDataWidth)   
0D68   3D                     DEC   a   ; is it byte?
0D69   28 02                  JR   z,assign2   
0D6B   23                     INC   hl   
0D6C   72                     LD   (hl),d   
0D6D                ASSIGN2:      
0D6D   DD E9                  JP   (ix)   
0D6F                             ; hl = value1, de = value2
0D6F                             ; hl = result
0D6F                EQUALS:      
0D6F   B7                     OR   a   ; reset the carry flag
0D70   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D72   28 16                  JR   z,true1   
0D74   18 1A                  JR   false1   
0D76                NOTEQUALS:      
0D76   B7                     OR   a   ; reset the carry flag
0D77   ED 52                  SBC   hl,de   
0D79   20 0F                  JR   nz,true1   
0D7B   18 13                  JR   false1   
0D7D                             ; hl = value1 de = value2
0D7D                             ; hl = result
0D7D                LESSTHANEQ:      
0D7D   B7                     OR   a   
0D7E   ED 52                  SBC   hl,de   
0D80   18 05                  JR   lessthan1   
0D82                             ; hl = value1 de = value2
0D82                             ; hl = result
0D82                LESSTHAN:      
0D82   B7                     OR   a   
0D83   ED 52                  SBC   hl,de   
0D85   28 09                  JR   z,false1   
0D87                LESSTHAN1:      
0D87   FA 90 0D               JP   m,false1   
0D8A                TRUE1:       
0D8A   21 FF FF               LD   hl,TRUE   
0D8D   E5                     PUSH   hl   
0D8E   DD E9                  JP   (ix)   
0D90                NULL1:       
0D90                FALSE1:      
0D90   21 00 00               LD   hl,FALSE   
0D93   E5                     PUSH   hl   
0D94   DD E9                  JP   (ix)   
0D96                SPREAD:      
0D96   E1                     POP   hl   ; hl = array*
0D97   ED 43 04 5F            LD   (vTemp1),bc   ; save bc
0D9B   2B                     DEC   hl   ; bc = length
0D9C   46                     LD   b,(hl)   
0D9D   2B                     DEC   hl   
0D9E   4E                     LD   c,(hl)   
0D9F   23                     INC   hl   ; move back to array 0
0DA0   23                     INC   hl   
0DA1   18 0D                  JR   spread3   
0DA3                SPREAD1:      
0DA3   5E                     LD   e,(hl)   ; e = lsb data at hl
0DA4   23                     INC   hl   
0DA5   3A EE 5E               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0DA8   57                     LD   d,a   
0DA9   15                     DEC   d   
0DAA   28 02                  JR   z,spread2   
0DAC   56                     LD   d,(hl)   ; d = msb data at hl
0DAD   23                     INC   hl   
0DAE                SPREAD2:      
0DAE   D5                     PUSH   de   ; return de
0DAF   0B                     DEC   bc   ; count--
0DB0                SPREAD3:      
0DB0   79                     LD   a,c   ; exit loop if bc == 0
0DB1   B0                     OR   b   
0DB2   20 EF                  JR   nz,spread1   
0DB4   ED 4B 04 5F            LD   bc,(vTemp1)   ; restore bc
0DB8   DD E9                  JP   (ix)   
0DBA                             ; shiftLeft
0DBA                             ; value count <<
0DBA                             ; count variable <<=
0DBA                SHIFTLEFT:      
0DBA   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DBB   D1                     POP   de   
0DBC   03                     INC   bc   
0DBD   0A                     LD   a,(bc)   
0DBE   FE 3D                  CP   "="   
0DC0   28 02                  JR   z,shiftLeft2   
0DC2   0B                     DEC   bc   
0DC3   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0DC4                SHIFTLEFT2:      
0DC4   ED 43 04 5F            LD   (vTemp1),bc   ; save IP
0DC8   43                     LD   b,e   ; b = loop counter
0DC9   04                     INC   b   ; test for counter=0 case
0DCA   18 01                  JR   shiftLeft4   
0DCC                SHIFTLEFT3:      
0DCC   29                     ADD   hl,hl   ; left shift hl
0DCD                SHIFTLEFT4:      
0DCD   10 FD                  DJNZ   shiftLeft3   
0DCF   ED 4B 04 5F            LD   bc,(vTemp1)   ; restore IP
0DD3   C3 9D 02               JP   sub3   
0DD6                             ; shiftRight
0DD6                             ; value count >>
0DD6                             ; count variable >>=
0DD6                SHIFTRIGHT:      
0DD6   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DD7   D1                     POP   de   
0DD8   03                     INC   bc   
0DD9   0A                     LD   a,(bc)   
0DDA   FE 3D                  CP   "="   
0DDC   28 02                  JR   z,shiftRight2   
0DDE   0B                     DEC   bc   
0DDF   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0DE0                SHIFTRIGHT2:      
0DE0   ED 43 04 5F            LD   (vTemp1),bc   ; save IP
0DE4   43                     LD   b,e   ; b = loop counter
0DE5   04                     INC   b   ; test for counter=0 case
0DE6   18 04                  JR   shiftRight4   
0DE8                SHIFTRIGHT3:      
0DE8   CB 3C                  SRL   h   ; right shift hl
0DEA   CB 1D                  RR   l   
0DEC                SHIFTRIGHT4:      
0DEC   10 FA                  DJNZ   shiftRight3   
0DEE   ED 4B 04 5F            LD   bc,(vTemp1)   ; restore IP
0DF2   C3 9D 02               JP   sub3   
0DF5                             ; division subroutine.
0DF5                             ; bc: divisor, de: dividend, hl: remainder
0DF5                DIVIDE:      
0DF5   21 00 00               LD   hl,0   ; zero the remainder
0DF8   3E 10                  LD   a,16   ; loop counter
0DFA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0DFA   CB 21                  SLA   c   
0DFC   CB 10                  RL   b   
0DFE   ED 6A                  ADC   hl,hl   
0E00   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0E02   38 03                  JR   c,divide2   
0E04   0C                     INC   c   
0E05   18 01                  JR   divide3   
0E07                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0E07   19                     ADD   hl,de   
0E08                DIVIDE3:      
0E08   3D                     DEC   a   
0E09   20 EF                  JR   nz,divide1   
0E0B   50 59                  LD   de,bc   ; result from bc to de
0E0D   C9                     RET      
0E0E                DOTNEXT:      
0E0E   3A F2 5E               LD   a,(vStrMode)   ; if string mode then exit
0E11   3C                     INC   a   
0E12   20 02                  JR   nz,dotNext1   
0E14   DD E9                  JP   (ix)   
0E16                DOTNEXT1:      
0E16   11 00 5D               LD   de,BUFFER   
0E19   2A E8 5E               LD   hl,(vBufPtr)   
0E1C   36 00                  LD   (hl),0   ; store NUL at end of string
0E1E   ED 53 E8 5E            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E22   EB                     EX   de,hl   ; hl = BUFFER
0E23   CD D9 0F               CALL   putstr   
0E26   DD E9                  JP   (ix)   
0E28                             ; arg_list - parses arg_list e.g. ab:c
0E28                             ; -- arg_list*
0E28                PARSEARGS:      
0E28   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E2B   2A EA 5E               LD   hl,(vHeapPtr)   ; hl = heap*
0E2E   E5                     PUSH   hl   ; save start of arg_list
0E2F   23                     INC   hl   ; skip length fields to start of string
0E30   23                     INC   hl   
0E31   03                     INC   bc   ; point to next char
0E32                PARSEARGS1:      
0E32   0A                     LD   a,(bc)   
0E33   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E35   20 03                  JR   nz,parseArgs1a   
0E37   14                     INC   d   ; non zero value local count acts as flag
0E38   18 10                  JR   parseArgs3   
0E3A                PARSEARGS1A:      
0E3A   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E3C   38 0F                  JR   c,parseArgs4   
0E3E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E40   30 0B                  JR   nc,parseArgs4   
0E42                PARSEARGS2:      
0E42   77                     LD   (hl),a   
0E43   23                     INC   hl   
0E44   1C                     INC   e   ; increase arg count
0E45   AF                     XOR   a   
0E46   B2                     OR   d   
0E47   28 01                  JR   z,parseArgs3   
0E49   14                     INC   d   ; if d > 0 increase local count
0E4A                PARSEARGS3:      
0E4A   03                     INC   bc   ; point to next char
0E4B   18 E5                  JR   parseArgs1   
0E4D                PARSEARGS4:      
0E4D   0B                     DEC   bc   
0E4E   AF                     XOR   a   
0E4F   B2                     OR   d   
0E50   28 01                  JR   z,parseArgs5   
0E52   15                     DEC   d   ; remove initial inc
0E53                PARSEARGS5:      
0E53   23                     INC   hl   
0E54   22 EA 5E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E57   E1                     POP   hl   ; hl = start of arg_list
0E58   72                     LD   (hl),d   ; write number of locals at start - 1
0E59   23                     INC   hl   
0E5A   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E5B   2B                     DEC   hl   
0E5C   E3                     EX   (sp),hl   
0E5D   E9                     JP   (hl)   
0E5E                             ; create block: parses block e.g. 00bbIC4uLi4g
0E5E                             ; -- block*
0E5E                PARSEBLOCK:      
0E5E   C5                     PUSH   bc   ; return pointer to first { of block
0E5F   03                     INC   bc   
0E60   16 01                  LD   d,1   ; nesting: count first parenthesis
0E62                PARSEBLOCK1:      ; Skip to end of definition
0E62   0A                     LD   a,(bc)   ; Get the next character
0E63   03                     INC   bc   ; Point to next character
0E64   FE 21                  CP   " " + 1   ; ignore whitespace
0E66   38 FA                  JR   c,parseBlock1   
0E68   FE 27                  CP   "'"   ; quote char
0E6A   28 0F                  JR   z,parseBlock2   
0E6C   FE 22                  CP   DQ   ; double quote char
0E6E   28 0B                  JR   z,parseBlock2   
0E70   FE 60                  CP   "`"   ; grave char
0E72   28 07                  JR   z,parseBlock2   
0E74   CB 7A                  BIT   7,d   
0E76   20 EA                  JR   nz,parseBlock1   
0E78   C3 81 0E               JP   parseBlock3   
0E7B                PARSEBLOCK2:      
0E7B   3E 80                  LD   a,$80   
0E7D   AA                     XOR   d   
0E7E   57                     LD   d,a   
0E7F   18 E1                  JR   parseBlock1   
0E81                PARSEBLOCK3:      
0E81   FE 28                  CP   "("   
0E83   28 16                  JR   z,parseBlock4   
0E85   FE 7B                  CP   "{"   
0E87   28 12                  JR   z,parseBlock4   
0E89   FE 5B                  CP   "["   
0E8B   28 0E                  JR   z,parseBlock4   
0E8D   FE 29                  CP   ")"   
0E8F   28 0D                  JR   z,parseBlock5   
0E91   FE 7D                  CP   "}"   
0E93   28 09                  JR   z,parseBlock5   
0E95   FE 5D                  CP   "]"   
0E97   28 05                  JR   z,parseBlock5   
0E99   18 C7                  JR   parseBlock1   
0E9B                PARSEBLOCK4:      
0E9B   14                     INC   d   
0E9C   18 C4                  JR   parseBlock1   
0E9E                PARSEBLOCK5:      
0E9E   15                     DEC   d   
0E9F   20 C1                  JR   nz,parseBlock1   ; get the next element
0EA1   60 69                  LD   hl,bc   ; hl = IP
0EA3   11 22 5F               LD   de,HEAP   ; is IP pointing to object in heap
0EA6   B7                     OR   a   ; IP - HEAP
0EA7   ED 52                  SBC   hl,de   
0EA9   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0EAB   28 1C                  JR   z,parseBlock6   
0EAD   60 69                  LD   hl,bc   ; hl = IP
0EAF   D1                     POP   de   ; de = block*
0EB0   ED 43 04 5F            LD   (vTemp1),bc   ; save IP
0EB4   B7                     OR   a   ; bc = size
0EB5   ED 52                  SBC   hl,de   
0EB7   44 4D                  LD   bc,hl   
0EB9   EB                     EX   de,hl   ; hl = block* de = heap*
0EBA   ED 5B EA 5E            LD   de,(vHeapPtr)   
0EBE   D5                     PUSH   de   ; return hblock*
0EBF   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EC1   ED 53 EA 5E            LD   (vHeapPtr),de   ; heap* += size
0EC5   ED 4B 04 5F            LD   bc,(vTemp1)   ; restore IP
0EC9                PARSEBLOCK6:      
0EC9   0B                     DEC   bc   ; balanced, exit
0ECA   E1                     POP   hl   ; hl = block*
0ECB   E3                     EX   (sp),hl   ; return to caller
0ECC   E9                     JP   (hl)   
0ECD                             ; create function
0ECD                             ; arg_list* block* -- func*
0ECD                CREATEFUNC:      
0ECD   E1                     POP   hl   ; save retrn address
0ECE   22 08 5F               LD   (vTemp3),hl   
0ED1   ED 43 04 5F            LD   (vTemp1),bc   ; save IP
0ED5   E1                     POP   hl   ; hl = block*
0ED6   22 06 5F               LD   (vTemp2),hl   ; save block*
0ED9   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0EDC   FD 56 05               LD   d,(iy+5)   
0EDF   7B                     LD   a,e   ; if arg_list == null then make a func
0EE0   B2                     OR   d   
0EE1   20 09                  JR   nz,createFunc0   
0EE3   21 00 00               LD   hl,0   ; partial_array = null
0EE6   ED 5B EA 5E            LD   de,(vHeapPtr)   ; de = compile*
0EEA   18 65                  JR   createFunc5   
0EEC                CREATEFUNC0:      
0EEC   E1                     POP   hl   ; hl = inner_arg_list*
0EED   E5                     PUSH   hl   ; save inner_arg_list
0EEE   ED 5B EA 5E            LD   de,(vHeapPtr)   ; de = compile*
0EF2   7E                     LD   a,(hl)   ; compile inner_num_locals
0EF3   4F                     LD   c,a   ; b = inner_num_locals
0EF4   12                     LD   (de),a   
0EF5   23                     INC   hl   
0EF6   13                     INC   de   
0EF7   7E                     LD   a,(hl)   ; compile inner_length
0EF8   12                     LD   (de),a   
0EF9   91                     SUB   c   ; a = inner_num args
0EFA   23                     INC   hl   
0EFB   13                     INC   de   
0EFC   B7                     OR   a   ; compile args if inner_length > 0
0EFD   28 05                  JR   z,createFunc1   
0EFF   4F                     LD   c,a   ; bc = a
0F00   06 00                  LD   b,0   
0F02   ED B0                  LDIR      
0F04                CREATEFUNC1:      
0F04   EB                     EX   de,hl   ; hl = outer_arg_list
0F05   FD 5E 04               LD   e,(iy+4)   
0F08   FD 56 05               LD   d,(iy+5)   
0F0B   EB                     EX   de,hl   
0F0C   23                     INC   hl   ; a = outer_length
0F0D   7E                     LD   a,(hl)   
0F0E   23                     INC   hl   
0F0F   B7                     OR   a   
0F10   28 05                  JR   z,createFunc2   
0F12   4F                     LD   c,a   
0F13   06 00                  LD   b,0   
0F15   ED B0                  LDIR      ; append outer_args
0F17                CREATEFUNC2:      ; a = outer_length
0F17   47                     LD   b,a   ; b = a = outer_length
0F18   2A EA 5E               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F1B   23                     INC   hl   
0F1C   7E                     LD   a,(hl)   ; add outer_length to new length
0F1D   80                     ADD   a,b   
0F1E   77                     LD   (hl),a   
0F1F   2B                     DEC   hl   
0F20   78                     LD   a,b   ; save outer_length in a'
0F21   08                     EX   af,af'   
0F22   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F23   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F24   B7                     OR   a   
0F25   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F27   4F                     LD   c,a   ; c = inner_num_locals
0F28   06 00                  LD   b,0   ; bc = inner_num_locals
0F2A   23                     INC   hl   ; a = inner_length
0F2B   7E                     LD   a,(hl)   
0F2C   91                     SUB   c   ; a = inner_num_args
0F2D   23                     INC   hl   ; hl = inner_arg_chars
0F2E   85                     ADD   a,l   ; hl += a
0F2F   6F                     LD   l,a   
0F30   3E 00                  LD   a,0   
0F32   84                     ADD   a,h   
0F33   67                     LD   h,a   
0F34   ED B0                  LDIR      ; append inner_locals
0F36                CREATEFUNC2A:      
0F36   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F37   12                     LD   (de),a   ; compile partial_array length field
0F38   13                     INC   de   
0F39   AF                     XOR   a   
0F3A   12                     LD   (de),a   
0F3B   13                     INC   de   
0F3C   D5                     PUSH   de   ; push partial_array*
0F3D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F3E   FD 5E 02               LD   e,(iy+2)   
0F41   FD 56 03               LD   d,(iy+3)   
0F44   EB                     EX   de,hl   
0F45                CREATEFUNC3:      
0F45   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F46   4E                     LD   c,(hl)   
0F47   2B                     DEC   hl   
0F48   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F49   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F4A   13                     INC   de   
0F4B   79                     LD   a,c   
0F4C   12                     LD   (de),a   
0F4D   13                     INC   de   
0F4E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F50                CREATEFUNC4:      
0F50   E1                     POP   hl   ; hl = partial_array*
0F51                CREATEFUNC5:      
0F51   C1                     POP   bc   ; bc = new_arg_list*
0F52   D5                     PUSH   de   ; return new func*
0F53   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F54   73                     LD   (hl),e   ; compile partial_array* to func
0F55   23                     INC   hl   
0F56   72                     LD   (hl),d   
0F57   23                     INC   hl   
0F58   ED 5B 06 5F            LD   de,(vTemp2)   ; de = block*
0F5C   73                     LD   (hl),e   ; compile block* to func
0F5D   23                     INC   hl   
0F5E   72                     LD   (hl),d   
0F5F   23                     INC   hl   
0F60   71                     LD   (hl),c   ; compile new_arg_list* to func
0F61   23                     INC   hl   
0F62   70                     LD   (hl),b   
0F63   23                     INC   hl   
0F64   22 EA 5E               LD   (vHeapPtr),hl   ; bump heap ptr
0F67   ED 4B 04 5F            LD   bc,(vTemp1)   ; restore IP
0F6B   2A 08 5F               LD   hl,(vTemp3)   ; jump to return address
0F6E   E9                     JP   (hl)   
0F6F                             ;*******************************************************************
0F6F                             ; general routines
0F6F                             ;*******************************************************************
0F6F                             ; hl = address
0F6F                VARIABLE:      
0F6F   22 F8 5E               LD   (vPointer),hl   
0F72   5E                     LD   e,(hl)   
0F73   3A EE 5E               LD   a,(vDataWidth)   
0F76   3D                     DEC   a   
0F77   16 00                  LD   d,0   
0F79   28 03                  JR   z,constant   
0F7B   23                     INC   hl   
0F7C   56                     LD   d,(hl)   
0F7D   2B                     DEC   hl   
0F7E                CONSTANT:      
0F7E   D5                     PUSH   de   
0F7F   DD E9                  JP   (ix)   
0F81                             ; followed by a table
0F81                             ; indexed on the 0-25 lowercase letter
0F81                             ; db lsb(addr)
0F81                             ; the final item index 26 matches any other char
0F81                CHARTABLE:      
0F81   03                     INC   bc   
0F82   0A                     LD   a,(bc)   
0F83   FE 7B                  CP   "z"+1   
0F85   30 10                  JR   nc,charTable3   
0F87   D6 61                  SUB   "a"   
0F89   38 0C                  JR   c,charTable3   
0F8B                CHARTABLE1:      
0F8B   E1                     POP   hl   
0F8C   85                     ADD   a,l   
0F8D   6F                     LD   l,a   
0F8E   7E                     LD   a,(hl)   ; must have the same msb as the table
0F8F   B7                     OR   a   ; a = 0, nop
0F90   20 03                  JR   nz,charTable2   
0F92   C3 CA 06               JP   error1   
0F95                CHARTABLE2:      
0F95   6F                     LD   l,a   
0F96   E9                     JP   (hl)   
0F97                CHARTABLE3:      
0F97   3E 1A                  LD   a,26   
0F99   0B                     DEC   bc   
0F9A   18 EF                  JR   charTable1   
0F9C                             ; followed by a table
0F9C                             ; db char
0F9C                             ; db char - if null only match on first char
0F9C                             ; dw addr
0F9C                             ; the final item must have char == NUL
0F9C                CMDTABLE:      
0F9C   E1                     POP   hl   
0F9D                CMDTABLE1:      
0F9D                CMDTABLE2:      
0F9D   56                     LD   d,(hl)   
0F9E   23                     INC   hl   
0F9F   5E                     LD   e,(hl)   
0FA0   23                     INC   hl   
0FA1   AF                     XOR   a   ; if d == 0, matched
0FA2   BA                     CP   d   
0FA3   28 14                  JR   z,cmdTable5   
0FA5   03                     INC   bc   ; match?
0FA6   0A                     LD   a,(bc)   
0FA7   BA                     CP   d   
0FA8   20 0A                  JR   nz,cmdTable4   
0FAA                CMDTABLE3:      
0FAA   AF                     XOR   a   ; if e == 0, matched
0FAB   BB                     CP   e   
0FAC   28 0B                  JR   z,cmdTable5   
0FAE   03                     INC   bc   
0FAF   0A                     LD   a,(bc)   ; match?
0FB0   BB                     CP   e   
0FB1   28 06                  JR   z,cmdTable5   
0FB3   0B                     DEC   bc   
0FB4                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FB4   0B                     DEC   bc   
0FB5   23                     INC   hl   
0FB6   23                     INC   hl   
0FB7   18 E4                  JR   cmdTable2   
0FB9                CMDTABLE5:      ; matched, jump to addr
0FB9   5E                     LD   e,(hl)   
0FBA   23                     INC   hl   
0FBB   56                     LD   d,(hl)   
0FBC   EB                     EX   de,hl   
0FBD   E9                     JP   (hl)   
0FBE                GETVARADDR:      
0FBE   21 00 00               LD   hl,0   
0FC1   FE 7B                  CP   "z"+1   ; if a > z then exit
0FC3   D0                     RET   nc   
0FC4   D6 41                  SUB   "A"   ; a - 65
0FC6   D8                     RET   c   ; if < A then exit
0FC7   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0FC9   38 05                  JR   c,getVarAddr1   
0FCB   D6 06                  SUB   "a"-("Z"+1)   
0FCD   FE 1A                  CP   "Z"-"A"+1   
0FCF   D8                     RET   c   ; if < a then exit
0FD0                GETVARADDR1:      
0FD0   87                     ADD   a,a   ; double a
0FD1   6F                     LD   l,a   
0FD2   26 5E                  LD   h,msb(VARS)   
0FD4   C9                     RET      
0FD5                PUTSTR0:      
0FD5   CD 85 00               CALL   putchar   
0FD8   23                     INC   hl   
0FD9                PUTSTR:      
0FD9   7E                     LD   a,(hl)   
0FDA   B7                     OR   a   
0FDB   20 F8                  JR   nz,putstr0   
0FDD   C9                     RET      
0FDE                             ; **************************************************************************
0FDE                             ; calculate nesting value
0FDE                             ; a is char to be tested,
0FDE                             ; e is the nesting value (initially 0)
0FDE                             ; e is increased by ( and [
0FDE                             ; e is decreased by ) and ]
0FDE                             ; e has its bit 7 toggled by `
0FDE                             ; limited to 127 levels
0FDE                             ; **************************************************************************
0FDE                NESTING:      
0FDE   FE 27                  CP   "'"   ; quote char
0FE0   28 0A                  JR   z,nesting0   
0FE2   FE 22                  CP   DQ   ; double quote char
0FE4   28 06                  JR   z,nesting0   
0FE6   FE 60                  CP   "`"   ; grave char
0FE8   28 02                  JR   z,nesting0   
0FEA   18 0A                  JR   nesting1   
0FEC                NESTING0:      
0FEC   CB 7B                  BIT   7,e   
0FEE   28 03                  JR   z,nesting1a   
0FF0   CB BB                  RES   7,e   
0FF2   C9                     RET      
0FF3                NESTING1A:      
0FF3   CB FB                  SET   7,e   
0FF5   C9                     RET      
0FF6                NESTING1:      
0FF6   CB 7B                  BIT   7,e   
0FF8   C0                     RET   nz   
0FF9   FE 7B                  CP   "{"   
0FFB   28 08                  JR   z,nesting2   
0FFD   FE 5B                  CP   "["   
0FFF   28 04                  JR   z,nesting2   
1001   FE 28                  CP   "("   
1003   20 02                  JR   nz,nesting3   
1005                NESTING2:      
1005   1C                     INC   e   
1006   C9                     RET      
1007                NESTING3:      
1007   FE 7D                  CP   "}"   
1009   28 07                  JR   z,nesting4   
100B   FE 5D                  CP   "]"   
100D   28 03                  JR   z,nesting4   
100F   FE 29                  CP   ")"   
1011   C0                     RET   nz   
1012                NESTING4:      
1012   1D                     DEC   e   
1013   C9                     RET      
1014                PROMPT:      
1014   CD 24 10               CALL   printStr   
1017   0D 0A 3E 20 00         .CSTR   "\r\n> "   
101C   C9                     RET      
101D                CRLF:        
101D   CD 24 10               CALL   printStr   
1020   0D 0A 00               .CSTR   "\r\n"   
1023   C9                     RET      
1024                             ; prints a null teminated string
1024                             ; the string should be immediately following the call
1024                PRINTSTR:      
1024   E3                     EX   (sp),hl   ; swap			
1025   CD D9 0F               CALL   putstr   
1028   23                     INC   hl   ; inc past NUL
1029   E3                     EX   (sp),hl   ; put it back	
102A   C9                     RET      
102B                INIT:        
102B   21 F0 01               LD   hl,titleStr   
102E   11 0E 5F               LD   de,titleBuf   
1031   06 14                  LD   b,20   
1033                INIT1:       
1033   1A                     LD   a,(de)   
1034   BE                     CP   (hl)   
1035   20 17                  JR   nz,coldBoot0   
1037   13                     INC   de   
1038   23                     INC   hl   
1039   10 F8                  DJNZ   init1   
103B                WARMINIT:      
103B   ED 4B FC 5E            LD   bc,(vSavedIP)   ; restore IP
103F   ED 7B FE 5E            LD   sp,(vSavedSP)   ; restore SP
1043   DD 2A 00 5F            LD   ix,(vSavedNext)   ; restore Next
1047   FD 2A 02 5F            LD   iy,(vSavedBP)   ; restore BP
104B   C3 85 10               JP   start1   
104E                COLDBOOT0:      
104E   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1051   11 0E 5F               LD   de,titleBuf   
1054   06 14                  LD   b,20   
1056   ED B0                  LDIR      
1058                COLDINIT:      
1058   21 DE 01               LD   hl,isysVars   
105B   11 E6 5E               LD   de,sysVars   
105E   01 12 00               LD   bc,4 * 2 + 10   
1061   ED B0                  LDIR      
1063   21 00 5E               LD   hl,vars   ; 52 vars LO HI
1066   06 34                  LD   b,26*2   
1068   AF                     XOR   a   
1069                COLDBOOT1:      
1069   77                     LD   (hl),a   
106A   23                     INC   hl   
106B   10 FC                  DJNZ   coldBoot1   
106D   DD 21 01 11            LD   ix,NEXT   
1071   FD 21 00 5C            LD   iy,STACK   
1075   C9                     RET      
1076                COLDSTART:      
1076   31 00 5C               LD   sp,STACK   
1079   CD 4E 10               CALL   coldBoot0   
107C   C3 85 10               JP   start1   
107F                START:       
107F   31 00 5C               LD   sp,STACK   ; start Monty
1082   CD 2B 10               CALL   init   ; setups
1085                START1:      
1085   21 0E 5F               LD   hl,titleBuf   
1088   CD D9 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
108B                INTERPRET:      
108B   CD 14 10               CALL   prompt   
108E   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
1091   21 00 5C               LD   hl,TIB   
1094   22 E6 5E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
1097                INTERPRET2:      ; calculate nesting
1097   1E 00                  LD   e,0   ; initilize nesting value
1099   C5                     PUSH   bc   ; save offset into TIB,
109A                             ; bc is also the count of chars in TIB
109A   21 00 5C               LD   hl,TIB   ; hl is start of TIB
109D   18 06                  JR   interpret4   
109F                INTERPRET3:      
109F   7E                     LD   a,(hl)   ; a = char in TIB
10A0   23                     INC   hl   ; inc pointer into TIB
10A1   0B                     DEC   bc   ; dec count of chars in TIB
10A2   CD DE 0F               CALL   nesting   ; update nesting value
10A5                INTERPRET4:      
10A5   79                     LD   a,c   ; is count zero?
10A6   B0                     OR   b   
10A7   20 F6                  JR   nz,interpret3   ; if not loop
10A9   C1                     POP   bc   ; restore offset into TIB
10AA                INTERPRET5:      
10AA   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
10AD   FE 20                  CP   $20   ; compare to space
10AF   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
10B1   FE 00                  CP   NUL   ; is it end of string? NUL end of string
10B3   28 31                  JR   z,interpret8   
10B5   FE 0D                  CP   "\r"   ; carriage return? ascii 13
10B7   28 1A                  JR   z,interpret7   ; if anything else its macro/control
10B9   FE 08                  CP   CTRL_H   
10BB   CA 37 11               JP   z,backSpace_   
10BE   FE 0A                  CP   CTRL_J   
10C0   CA 47 11               JP   z,reEdit_   
10C3                INTERPRET5A:      
10C3   18 D2                  JR   interpret2   
10C5                INTERPRET6:      
10C5   21 00 5C               LD   hl,TIB   
10C8   09                     ADD   hl,bc   
10C9   77                     LD   (hl),a   ; store the character in textbuf
10CA   03                     INC   bc   
10CB   CD 85 00               CALL   putchar   ; echo character to screen
10CE   CD DE 0F               CALL   nesting   
10D1   18 D7                  JR   interpret5   ; wait for next character
10D3                INTERPRET7:      
10D3   21 00 5C               LD   hl,TIB   
10D6   09                     ADD   hl,bc   
10D7   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
10D9   23                     INC   hl   
10DA   36 0A                  LD   (hl),"\n"   
10DC   23                     INC   hl   
10DD   03                     INC   bc   
10DE   03                     INC   bc   
10DF   CD 1D 10               CALL   crlf   ; echo character to screen
10E2   7B                     LD   a,e   ; if zero nesting append and ETX after \r
10E3   B7                     OR   a   
10E4   20 C4                  JR   nz,interpret5   
10E6                INTERPRET8:      
10E6   21 00 5C               LD   hl,TIB   
10E9   09                     ADD   hl,bc   
10EA   22 E6 5E               LD   (vTIBPtr),hl   
10ED   01 00 5C               LD   bc,TIB   
10F0   ED 43 FC 5E            LD   (vSavedIP),bc   ; save IP
10F4   ED 73 FE 5E            LD   (vSavedSP),sp   ; save SP
10F8   DD 22 00 5F            LD   (vSavedNext),ix   ; save Next
10FC   FD 22 02 5F            LD   (vSavedBP),iy   ; save BP
1100   0B                     DEC   bc   
1101                NEXT:        
1101   03                     INC   bc   ; Increment the IP
1102   0A                     LD   a,(bc)   ; Get the next character and dispatch
1103   FE 20                  CP   " "   ; whitespace?
1105   28 FA                  JR   z,next   ; space? ignore
1107   38 0D                  JR   c,next1   
1109   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
110B   6F                     LD   l,a   ; index into table
110C   26 01                  LD   h,msb(opcodes)   ; start address of jump table
110E   6E                     LD   l,(hl)   ; get low jump address
110F   24                     INC   h   ; page 2
1110   FE BA                  CP   "Z" - "!" + 1 + $80   
1112   38 01                  JR   c,next0   
1114   24                     INC   h   ; page 3
1115                NEXT0:       
1115   E9                     JP   (hl)   ; Jump to routine
1116                NEXT1:       
1116   FE 00                  CP   NUL   ; end of input string?
1118   28 03                  JR   z,exit   
111A   C3 8B 10               JP   interpret   ; no, other whitespace, macros?
111D                EXIT:        
111D   03                     INC   bc   
111E   60 69                  LD   hl,bc   
1120   E9                     JP   (hl)   
1121                RUN:         
1121   C1                     POP   bc   
1122   0B                     DEC   bc   
1123   DD E9                  JP   (ix)   
1125                ERROR:       
1125   E5                     PUSH   hl   
1126   CD 21 11               CALL   run   
1129   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1134   C3 8B 10               JP   interpret   
1137                BACKSPACE_:      
1137   79                     LD   a,c   
1138   B0                     OR   b   
1139   CA 97 10               JP   z,interpret2   
113C   0B                     DEC   bc   
113D   CD 24 10               CALL   printStr   
1140   08 20 08 00            .CSTR   "\b \b"   
1144   C3 97 10               JP   interpret2   
1147                REEDIT_:      
1147   CD 24 10               CALL   printStr   
114A   0D 3E 20 00            .CSTR   "\r> "   
114E   21 00 5C               LD   hl,TIB   
1151   18 04                  JR   reEdit1   
1153                REEDIT0:      
1153   CD 85 00               CALL   putchar   
1156   23                     INC   hl   
1157                REEDIT1:      
1157   7E                     LD   a,(hl)   
1158   FE 0D                  CP   "\r"   
115A   20 F7                  JR   nz,reEdit0   
115C   11 00 5C               LD   de,TIB   
115F   B7                     OR   a   
1160   ED 52                  SBC   hl,de   
1162   44 4D                  LD   bc,hl   
1164   C3 97 10               JP   interpret2   
1167                          ;*Macro unroll: FUNC f1, 0, ""
1167                F1:          
1167   CD 9F 03               CALL   go   
116A   00 00                  DW   NUL   
116C   72 11                  DW   f1M_3059S12   
116E   70 11                  DW   $+2   
1170   00                     DB   0   
1171   00                     .PSTR   ""   
1172                F1M_3059S12:      
1172   00                     DB   0   
1173                          ;*Macro unroll: FUNC f2, 0, ""
1173                F2:          
1173   CD 9F 03               CALL   go   
1176   00 00                  DW   NUL   
1178   7E 11                  DW   f2M_3061S15   
117A   7C 11                  DW   $+2   
117C   00                     DB   0   
117D   00                     .PSTR   ""   
117E                F2M_3061S15:      
117E   00                     DB   0   
117F                          ;*Macro unroll: FUNC f3, 0, ""
117F                F3:          
117F   CD 9F 03               CALL   go   
1182   00 00                  DW   NUL   
1184   8A 11                  DW   f3M_3063S18   
1186   88 11                  DW   $+2   
1188   00                     DB   0   
1189   00                     .PSTR   ""   
118A                F3M_3063S18:      
118A   00                     DB   0   
118B                          ;*Macro unroll: FUNC f4, 0, ""
118B                F4:          
118B   CD 9F 03               CALL   go   
118E   00 00                  DW   NUL   
1190   96 11                  DW   f4M_3065S21   
1192   94 11                  DW   $+2   
1194   00                     DB   0   
1195   00                     .PSTR   ""   
1196                F4M_3065S21:      
1196   00                     DB   0   
1197                          ALIGN   $100   
1200                TESTSSTART:      
1200                             ; test "0 10 1 /rng \\a{%a.} /for", 0
1200                             ; test "0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", 0
1200                             ; test "0 10 1 /rng \\a{%a 3<}/ftr \\a{%a.} /for", 0
1200                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1200                             ; test "/hex /byt $1234.",0
1200                             ; test "/byt 257.",0
1200                             ; test "$1000 'hello there!' /si \\a{%a.c} /for", $1000
1200                             ; test "10 0 -1 /rng \\a{%a.} /for", 0
1200                             ; test "_B [_A {1} _B {2}] /sel", 2
1200                             ; test "[_A {1} _B {2}] x= _B x /sel", 2
1200                             ; test "[10 20 30] /ait \\a{%a.} /for", 0
1200                             ; test "[1 2 3].a", 0
1200                             ; test "0 10 1 /rng  0 \\da{%d%a+}/scn \\a{%a 24<}/ftr \\a{%a.} /for", 0
1200                             ; test "/str `hello:` 65.c 1. 2. 3. /end .s", FALSE
1200                             ; call printStr
1200                             ; .cstr "Done!"
1200                             ; HALT
1200                          ;*Macro unroll:  test "/fal", false
1200   31 00 5C               LD   SP,STACK   
1203   CD 58 10               CALL   coldInit   
1206   CD DA 5A               CALL   execStr   
1209   2F 66 61 6C 00         DB   "/fal",0   
120E   E1                     POP   HL   
120F   E5                     PUSH   HL   
1210   11 00 00               LD   DE,false   
1213   B7                     OR   A   
1214   ED 52                  SBC   HL,DE   
1216   7D                     LD   A,L   
1217   B4                     OR   H   
1218   CA 77 12               JP   Z,expectM_3086S46   
121B   CD 24 10               CALL   printStr   
121E   43 6F 64 65 3A 20 2F 66 61 6C 00 .CSTR   "Code: ","/fal"   
1229   CD 24 10               CALL   printStr   
122C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123B   21 00 00               LD   hl,false   
123E   E5                     PUSH   hl   
123F   E5                     PUSH   hl   
1240   CD 21 11               CALL   run   
1243   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
124F   CD 24 10               CALL   printStr   
1252   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
125F   E1                     POP   hl   
1260   E5                     PUSH   hl   
1261   E5                     PUSH   hl   
1262   CD 21 11               CALL   run   
1265   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1276   76                     HALT      
1277                EXPECTM_3086S46:      
1277   E1                     POP   HL   
1278                          ;*Macro unroll:  test "/tru", true
1278   31 00 5C               LD   SP,STACK   
127B   CD 58 10               CALL   coldInit   
127E   CD DA 5A               CALL   execStr   
1281   2F 74 72 75 00         DB   "/tru",0   
1286   E1                     POP   HL   
1287   E5                     PUSH   HL   
1288   11 FF FF               LD   DE,true   
128B   B7                     OR   A   
128C   ED 52                  SBC   HL,DE   
128E   7D                     LD   A,L   
128F   B4                     OR   H   
1290   CA EF 12               JP   Z,expectM_3087S47   
1293   CD 24 10               CALL   printStr   
1296   43 6F 64 65 3A 20 2F 74 72 75 00 .CSTR   "Code: ","/tru"   
12A1   CD 24 10               CALL   printStr   
12A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12B3   21 FF FF               LD   hl,true   
12B6   E5                     PUSH   hl   
12B7   E5                     PUSH   hl   
12B8   CD 21 11               CALL   run   
12BB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
12C7   CD 24 10               CALL   printStr   
12CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12D7   E1                     POP   hl   
12D8   E5                     PUSH   hl   
12D9   E5                     PUSH   hl   
12DA   CD 21 11               CALL   run   
12DD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
12EE   76                     HALT      
12EF                EXPECTM_3087S47:      
12EF   E1                     POP   HL   
12F0                          ;*Macro unroll:  test "1", 1
12F0   31 00 5C               LD   SP,STACK   
12F3   CD 58 10               CALL   coldInit   
12F6   CD DA 5A               CALL   execStr   
12F9   31 00                  DB   "1",0   
12FB   E1                     POP   HL   
12FC   E5                     PUSH   HL   
12FD   11 01 00               LD   DE,1   
1300   B7                     OR   A   
1301   ED 52                  SBC   HL,DE   
1303   7D                     LD   A,L   
1304   B4                     OR   H   
1305   CA 61 13               JP   Z,expectM_3088S48   
1308   CD 24 10               CALL   printStr   
130B   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1313   CD 24 10               CALL   printStr   
1316   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1325   21 01 00               LD   hl,1   
1328   E5                     PUSH   hl   
1329   E5                     PUSH   hl   
132A   CD 21 11               CALL   run   
132D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1339   CD 24 10               CALL   printStr   
133C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1349   E1                     POP   hl   
134A   E5                     PUSH   hl   
134B   E5                     PUSH   hl   
134C   CD 21 11               CALL   run   
134F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1360   76                     HALT      
1361                EXPECTM_3088S48:      
1361   E1                     POP   HL   
1362                          ;*Macro unroll:  test "2", 2
1362   31 00 5C               LD   SP,STACK   
1365   CD 58 10               CALL   coldInit   
1368   CD DA 5A               CALL   execStr   
136B   32 00                  DB   "2",0   
136D   E1                     POP   HL   
136E   E5                     PUSH   HL   
136F   11 02 00               LD   DE,2   
1372   B7                     OR   A   
1373   ED 52                  SBC   HL,DE   
1375   7D                     LD   A,L   
1376   B4                     OR   H   
1377   CA D3 13               JP   Z,expectM_3089S49   
137A   CD 24 10               CALL   printStr   
137D   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1385   CD 24 10               CALL   printStr   
1388   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1397   21 02 00               LD   hl,2   
139A   E5                     PUSH   hl   
139B   E5                     PUSH   hl   
139C   CD 21 11               CALL   run   
139F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
13AB   CD 24 10               CALL   printStr   
13AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13BB   E1                     POP   hl   
13BC   E5                     PUSH   hl   
13BD   E5                     PUSH   hl   
13BE   CD 21 11               CALL   run   
13C1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
13D2   76                     HALT      
13D3                EXPECTM_3089S49:      
13D3   E1                     POP   HL   
13D4                          ;*Macro unroll:  test "1", 1
13D4   31 00 5C               LD   SP,STACK   
13D7   CD 58 10               CALL   coldInit   
13DA   CD DA 5A               CALL   execStr   
13DD   31 00                  DB   "1",0   
13DF   E1                     POP   HL   
13E0   E5                     PUSH   HL   
13E1   11 01 00               LD   DE,1   
13E4   B7                     OR   A   
13E5   ED 52                  SBC   HL,DE   
13E7   7D                     LD   A,L   
13E8   B4                     OR   H   
13E9   CA 45 14               JP   Z,expectM_3090S50   
13EC   CD 24 10               CALL   printStr   
13EF   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
13F7   CD 24 10               CALL   printStr   
13FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1409   21 01 00               LD   hl,1   
140C   E5                     PUSH   hl   
140D   E5                     PUSH   hl   
140E   CD 21 11               CALL   run   
1411   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
141D   CD 24 10               CALL   printStr   
1420   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
142D   E1                     POP   hl   
142E   E5                     PUSH   hl   
142F   E5                     PUSH   hl   
1430   CD 21 11               CALL   run   
1433   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1444   76                     HALT      
1445                EXPECTM_3090S50:      
1445   E1                     POP   HL   
1446                          ;*Macro unroll:  test "0", 0
1446   31 00 5C               LD   SP,STACK   
1449   CD 58 10               CALL   coldInit   
144C   CD DA 5A               CALL   execStr   
144F   30 00                  DB   "0",0   
1451   E1                     POP   HL   
1452   E5                     PUSH   HL   
1453   11 00 00               LD   DE,0   
1456   B7                     OR   A   
1457   ED 52                  SBC   HL,DE   
1459   7D                     LD   A,L   
145A   B4                     OR   H   
145B   CA B7 14               JP   Z,expectM_3091S51   
145E   CD 24 10               CALL   printStr   
1461   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1469   CD 24 10               CALL   printStr   
146C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
147B   21 00 00               LD   hl,0   
147E   E5                     PUSH   hl   
147F   E5                     PUSH   hl   
1480   CD 21 11               CALL   run   
1483   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
148F   CD 24 10               CALL   printStr   
1492   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
149F   E1                     POP   hl   
14A0   E5                     PUSH   hl   
14A1   E5                     PUSH   hl   
14A2   CD 21 11               CALL   run   
14A5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
14B6   76                     HALT      
14B7                EXPECTM_3091S51:      
14B7   E1                     POP   HL   
14B8                          ;*Macro unroll:  test "10", 10
14B8   31 00 5C               LD   SP,STACK   
14BB   CD 58 10               CALL   coldInit   
14BE   CD DA 5A               CALL   execStr   
14C1   31 30 00               DB   "10",0   
14C4   E1                     POP   HL   
14C5   E5                     PUSH   HL   
14C6   11 0A 00               LD   DE,10   
14C9   B7                     OR   A   
14CA   ED 52                  SBC   HL,DE   
14CC   7D                     LD   A,L   
14CD   B4                     OR   H   
14CE   CA 2B 15               JP   Z,expectM_3092S52   
14D1   CD 24 10               CALL   printStr   
14D4   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
14DD   CD 24 10               CALL   printStr   
14E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14EF   21 0A 00               LD   hl,10   
14F2   E5                     PUSH   hl   
14F3   E5                     PUSH   hl   
14F4   CD 21 11               CALL   run   
14F7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1503   CD 24 10               CALL   printStr   
1506   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1513   E1                     POP   hl   
1514   E5                     PUSH   hl   
1515   E5                     PUSH   hl   
1516   CD 21 11               CALL   run   
1519   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
152A   76                     HALT      
152B                EXPECTM_3092S52:      
152B   E1                     POP   HL   
152C                          ;*Macro unroll:  test "123", 123
152C   31 00 5C               LD   SP,STACK   
152F   CD 58 10               CALL   coldInit   
1532   CD DA 5A               CALL   execStr   
1535   31 32 33 00            DB   "123",0   
1539   E1                     POP   HL   
153A   E5                     PUSH   HL   
153B   11 7B 00               LD   DE,123   
153E   B7                     OR   A   
153F   ED 52                  SBC   HL,DE   
1541   7D                     LD   A,L   
1542   B4                     OR   H   
1543   CA A1 15               JP   Z,expectM_3093S53   
1546   CD 24 10               CALL   printStr   
1549   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1553   CD 24 10               CALL   printStr   
1556   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1565   21 7B 00               LD   hl,123   
1568   E5                     PUSH   hl   
1569   E5                     PUSH   hl   
156A   CD 21 11               CALL   run   
156D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1579   CD 24 10               CALL   printStr   
157C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1589   E1                     POP   hl   
158A   E5                     PUSH   hl   
158B   E5                     PUSH   hl   
158C   CD 21 11               CALL   run   
158F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
15A0   76                     HALT      
15A1                EXPECTM_3093S53:      
15A1   E1                     POP   HL   
15A2                          ;*Macro unroll:  test "-1",-1
15A2   31 00 5C               LD   SP,STACK   
15A5   CD 58 10               CALL   coldInit   
15A8   CD DA 5A               CALL   execStr   
15AB   2D 31 00               DB   "-1",0   
15AE   E1                     POP   HL   
15AF   E5                     PUSH   HL   
15B0   11 FF FF               LD   DE,-1   
15B3   B7                     OR   A   
15B4   ED 52                  SBC   HL,DE   
15B6   7D                     LD   A,L   
15B7   B4                     OR   H   
15B8   CA 15 16               JP   Z,expectM_3094S54   
15BB   CD 24 10               CALL   printStr   
15BE   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
15C7   CD 24 10               CALL   printStr   
15CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15D9   21 FF FF               LD   hl,-1   
15DC   E5                     PUSH   hl   
15DD   E5                     PUSH   hl   
15DE   CD 21 11               CALL   run   
15E1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
15ED   CD 24 10               CALL   printStr   
15F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15FD   E1                     POP   hl   
15FE   E5                     PUSH   hl   
15FF   E5                     PUSH   hl   
1600   CD 21 11               CALL   run   
1603   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1614   76                     HALT      
1615                EXPECTM_3094S54:      
1615   E1                     POP   HL   
1616                          ;*Macro unroll:  test "-1/abs",1
1616   31 00 5C               LD   SP,STACK   
1619   CD 58 10               CALL   coldInit   
161C   CD DA 5A               CALL   execStr   
161F   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
1626   E1                     POP   HL   
1627   E5                     PUSH   HL   
1628   11 01 00               LD   DE,1   
162B   B7                     OR   A   
162C   ED 52                  SBC   HL,DE   
162E   7D                     LD   A,L   
162F   B4                     OR   H   
1630   CA 91 16               JP   Z,expectM_3095S55   
1633   CD 24 10               CALL   printStr   
1636   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
1643   CD 24 10               CALL   printStr   
1646   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1655   21 01 00               LD   hl,1   
1658   E5                     PUSH   hl   
1659   E5                     PUSH   hl   
165A   CD 21 11               CALL   run   
165D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1669   CD 24 10               CALL   printStr   
166C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1679   E1                     POP   hl   
167A   E5                     PUSH   hl   
167B   E5                     PUSH   hl   
167C   CD 21 11               CALL   run   
167F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1690   76                     HALT      
1691                EXPECTM_3095S55:      
1691   E1                     POP   HL   
1692                          ;*Macro unroll:  test "_a", $61
1692   31 00 5C               LD   SP,STACK   
1695   CD 58 10               CALL   coldInit   
1698   CD DA 5A               CALL   execStr   
169B   5F 61 00               DB   "_a",0   
169E   E1                     POP   HL   
169F   E5                     PUSH   HL   
16A0   11 61 00               LD   DE,$61   
16A3   B7                     OR   A   
16A4   ED 52                  SBC   HL,DE   
16A6   7D                     LD   A,L   
16A7   B4                     OR   H   
16A8   CA 05 17               JP   Z,expectM_3096S56   
16AB   CD 24 10               CALL   printStr   
16AE   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
16B7   CD 24 10               CALL   printStr   
16BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16C9   21 61 00               LD   hl,$61   
16CC   E5                     PUSH   hl   
16CD   E5                     PUSH   hl   
16CE   CD 21 11               CALL   run   
16D1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
16DD   CD 24 10               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD 21 11               CALL   run   
16F3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1704   76                     HALT      
1705                EXPECTM_3096S56:      
1705   E1                     POP   HL   
1706                          ;*Macro unroll:  test "__", $5F
1706   31 00 5C               LD   SP,STACK   
1709   CD 58 10               CALL   coldInit   
170C   CD DA 5A               CALL   execStr   
170F   5F 5F 00               DB   "__",0   
1712   E1                     POP   HL   
1713   E5                     PUSH   HL   
1714   11 5F 00               LD   DE,$5F   
1717   B7                     OR   A   
1718   ED 52                  SBC   HL,DE   
171A   7D                     LD   A,L   
171B   B4                     OR   H   
171C   CA 79 17               JP   Z,expectM_3097S57   
171F   CD 24 10               CALL   printStr   
1722   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
172B   CD 24 10               CALL   printStr   
172E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
173D   21 5F 00               LD   hl,$5F   
1740   E5                     PUSH   hl   
1741   E5                     PUSH   hl   
1742   CD 21 11               CALL   run   
1745   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1751   CD 24 10               CALL   printStr   
1754   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1761   E1                     POP   hl   
1762   E5                     PUSH   hl   
1763   E5                     PUSH   hl   
1764   CD 21 11               CALL   run   
1767   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1778   76                     HALT      
1779                EXPECTM_3097S57:      
1779   E1                     POP   HL   
177A                          ;*Macro unroll:  test "$10", $10
177A   31 00 5C               LD   SP,STACK   
177D   CD 58 10               CALL   coldInit   
1780   CD DA 5A               CALL   execStr   
1783   24 31 30 00            DB   "$10",0   
1787   E1                     POP   HL   
1788   E5                     PUSH   HL   
1789   11 10 00               LD   DE,$10   
178C   B7                     OR   A   
178D   ED 52                  SBC   HL,DE   
178F   7D                     LD   A,L   
1790   B4                     OR   H   
1791   CA EF 17               JP   Z,expectM_3098S58   
1794   CD 24 10               CALL   printStr   
1797   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
17A1   CD 24 10               CALL   printStr   
17A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17B3   21 10 00               LD   hl,$10   
17B6   E5                     PUSH   hl   
17B7   E5                     PUSH   hl   
17B8   CD 21 11               CALL   run   
17BB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
17C7   CD 24 10               CALL   printStr   
17CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17D7   E1                     POP   hl   
17D8   E5                     PUSH   hl   
17D9   E5                     PUSH   hl   
17DA   CD 21 11               CALL   run   
17DD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
17EE   76                     HALT      
17EF                EXPECTM_3098S58:      
17EF   E1                     POP   HL   
17F0                          ;*Macro unroll:  test "$FF", $FF
17F0   31 00 5C               LD   SP,STACK   
17F3   CD 58 10               CALL   coldInit   
17F6   CD DA 5A               CALL   execStr   
17F9   24 46 46 00            DB   "$FF",0   
17FD   E1                     POP   HL   
17FE   E5                     PUSH   HL   
17FF   11 FF 00               LD   DE,$FF   
1802   B7                     OR   A   
1803   ED 52                  SBC   HL,DE   
1805   7D                     LD   A,L   
1806   B4                     OR   H   
1807   CA 65 18               JP   Z,expectM_3099S59   
180A   CD 24 10               CALL   printStr   
180D   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1817   CD 24 10               CALL   printStr   
181A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1829   21 FF 00               LD   hl,$FF   
182C   E5                     PUSH   hl   
182D   E5                     PUSH   hl   
182E   CD 21 11               CALL   run   
1831   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
183D   CD 24 10               CALL   printStr   
1840   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
184D   E1                     POP   hl   
184E   E5                     PUSH   hl   
184F   E5                     PUSH   hl   
1850   CD 21 11               CALL   run   
1853   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1864   76                     HALT      
1865                EXPECTM_3099S59:      
1865   E1                     POP   HL   
1866                          ;*Macro unroll:  test "-1 2 +",1
1866   31 00 5C               LD   SP,STACK   
1869   CD 58 10               CALL   coldInit   
186C   CD DA 5A               CALL   execStr   
186F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1876   E1                     POP   HL   
1877   E5                     PUSH   HL   
1878   11 01 00               LD   DE,1   
187B   B7                     OR   A   
187C   ED 52                  SBC   HL,DE   
187E   7D                     LD   A,L   
187F   B4                     OR   H   
1880   CA E1 18               JP   Z,expectM_3100S60   
1883   CD 24 10               CALL   printStr   
1886   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1893   CD 24 10               CALL   printStr   
1896   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18A5   21 01 00               LD   hl,1   
18A8   E5                     PUSH   hl   
18A9   E5                     PUSH   hl   
18AA   CD 21 11               CALL   run   
18AD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
18B9   CD 24 10               CALL   printStr   
18BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18C9   E1                     POP   hl   
18CA   E5                     PUSH   hl   
18CB   E5                     PUSH   hl   
18CC   CD 21 11               CALL   run   
18CF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
18E0   76                     HALT      
18E1                EXPECTM_3100S60:      
18E1   E1                     POP   HL   
18E2                          ;*Macro unroll:  test "-1 1 +",0
18E2   31 00 5C               LD   SP,STACK   
18E5   CD 58 10               CALL   coldInit   
18E8   CD DA 5A               CALL   execStr   
18EB   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
18F2   E1                     POP   HL   
18F3   E5                     PUSH   HL   
18F4   11 00 00               LD   DE,0   
18F7   B7                     OR   A   
18F8   ED 52                  SBC   HL,DE   
18FA   7D                     LD   A,L   
18FB   B4                     OR   H   
18FC   CA 5D 19               JP   Z,expectM_3101S61   
18FF   CD 24 10               CALL   printStr   
1902   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
190F   CD 24 10               CALL   printStr   
1912   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1921   21 00 00               LD   hl,0   
1924   E5                     PUSH   hl   
1925   E5                     PUSH   hl   
1926   CD 21 11               CALL   run   
1929   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1935   CD 24 10               CALL   printStr   
1938   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1945   E1                     POP   hl   
1946   E5                     PUSH   hl   
1947   E5                     PUSH   hl   
1948   CD 21 11               CALL   run   
194B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
195C   76                     HALT      
195D                EXPECTM_3101S61:      
195D   E1                     POP   HL   
195E                          ;*Macro unroll:  test "1 2 +", 3
195E   31 00 5C               LD   SP,STACK   
1961   CD 58 10               CALL   coldInit   
1964   CD DA 5A               CALL   execStr   
1967   31 20 32 20 2B 00      DB   "1 2 +",0   
196D   E1                     POP   HL   
196E   E5                     PUSH   HL   
196F   11 03 00               LD   DE,3   
1972   B7                     OR   A   
1973   ED 52                  SBC   HL,DE   
1975   7D                     LD   A,L   
1976   B4                     OR   H   
1977   CA D7 19               JP   Z,expectM_3102S62   
197A   CD 24 10               CALL   printStr   
197D   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1989   CD 24 10               CALL   printStr   
198C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
199B   21 03 00               LD   hl,3   
199E   E5                     PUSH   hl   
199F   E5                     PUSH   hl   
19A0   CD 21 11               CALL   run   
19A3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
19AF   CD 24 10               CALL   printStr   
19B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19BF   E1                     POP   hl   
19C0   E5                     PUSH   hl   
19C1   E5                     PUSH   hl   
19C2   CD 21 11               CALL   run   
19C5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
19D6   76                     HALT      
19D7                EXPECTM_3102S62:      
19D7   E1                     POP   HL   
19D8                          ;*Macro unroll:  test "4 1 2 +", 3
19D8   31 00 5C               LD   SP,STACK   
19DB   CD 58 10               CALL   coldInit   
19DE   CD DA 5A               CALL   execStr   
19E1   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
19E9   E1                     POP   HL   
19EA   E5                     PUSH   HL   
19EB   11 03 00               LD   DE,3   
19EE   B7                     OR   A   
19EF   ED 52                  SBC   HL,DE   
19F1   7D                     LD   A,L   
19F2   B4                     OR   H   
19F3   CA 55 1A               JP   Z,expectM_3103S63   
19F6   CD 24 10               CALL   printStr   
19F9   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1A07   CD 24 10               CALL   printStr   
1A0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A19   21 03 00               LD   hl,3   
1A1C   E5                     PUSH   hl   
1A1D   E5                     PUSH   hl   
1A1E   CD 21 11               CALL   run   
1A21   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A2D   CD 24 10               CALL   printStr   
1A30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A3D   E1                     POP   hl   
1A3E   E5                     PUSH   hl   
1A3F   E5                     PUSH   hl   
1A40   CD 21 11               CALL   run   
1A43   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1A54   76                     HALT      
1A55                EXPECTM_3103S63:      
1A55   E1                     POP   HL   
1A56                          ;*Macro unroll:  test "123 456 +", 123+456
1A56   31 00 5C               LD   SP,STACK   
1A59   CD 58 10               CALL   coldInit   
1A5C   CD DA 5A               CALL   execStr   
1A5F   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1A69   E1                     POP   HL   
1A6A   E5                     PUSH   HL   
1A6B   11 43 02               LD   DE,123+456   
1A6E   B7                     OR   A   
1A6F   ED 52                  SBC   HL,DE   
1A71   7D                     LD   A,L   
1A72   B4                     OR   H   
1A73   CA D7 1A               JP   Z,expectM_3104S64   
1A76   CD 24 10               CALL   printStr   
1A79   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1A89   CD 24 10               CALL   printStr   
1A8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A9B   21 43 02               LD   hl,123+456   
1A9E   E5                     PUSH   hl   
1A9F   E5                     PUSH   hl   
1AA0   CD 21 11               CALL   run   
1AA3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1AAF   CD 24 10               CALL   printStr   
1AB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ABF   E1                     POP   hl   
1AC0   E5                     PUSH   hl   
1AC1   E5                     PUSH   hl   
1AC2   CD 21 11               CALL   run   
1AC5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1AD6   76                     HALT      
1AD7                EXPECTM_3104S64:      
1AD7   E1                     POP   HL   
1AD8                          ;*Macro unroll:  test "64 128 +", 64+128
1AD8   31 00 5C               LD   SP,STACK   
1ADB   CD 58 10               CALL   coldInit   
1ADE   CD DA 5A               CALL   execStr   
1AE1   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1AEA   E1                     POP   HL   
1AEB   E5                     PUSH   HL   
1AEC   11 C0 00               LD   DE,64+128   
1AEF   B7                     OR   A   
1AF0   ED 52                  SBC   HL,DE   
1AF2   7D                     LD   A,L   
1AF3   B4                     OR   H   
1AF4   CA 57 1B               JP   Z,expectM_3105S65   
1AF7   CD 24 10               CALL   printStr   
1AFA   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1B09   CD 24 10               CALL   printStr   
1B0C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B1B   21 C0 00               LD   hl,64+128   
1B1E   E5                     PUSH   hl   
1B1F   E5                     PUSH   hl   
1B20   CD 21 11               CALL   run   
1B23   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B2F   CD 24 10               CALL   printStr   
1B32   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B3F   E1                     POP   hl   
1B40   E5                     PUSH   hl   
1B41   E5                     PUSH   hl   
1B42   CD 21 11               CALL   run   
1B45   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1B56   76                     HALT      
1B57                EXPECTM_3105S65:      
1B57   E1                     POP   HL   
1B58                          ;*Macro unroll:  test "1 2 +", 3
1B58   31 00 5C               LD   SP,STACK   
1B5B   CD 58 10               CALL   coldInit   
1B5E   CD DA 5A               CALL   execStr   
1B61   31 20 32 20 2B 00      DB   "1 2 +",0   
1B67   E1                     POP   HL   
1B68   E5                     PUSH   HL   
1B69   11 03 00               LD   DE,3   
1B6C   B7                     OR   A   
1B6D   ED 52                  SBC   HL,DE   
1B6F   7D                     LD   A,L   
1B70   B4                     OR   H   
1B71   CA D1 1B               JP   Z,expectM_3106S66   
1B74   CD 24 10               CALL   printStr   
1B77   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1B83   CD 24 10               CALL   printStr   
1B86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B95   21 03 00               LD   hl,3   
1B98   E5                     PUSH   hl   
1B99   E5                     PUSH   hl   
1B9A   CD 21 11               CALL   run   
1B9D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1BA9   CD 24 10               CALL   printStr   
1BAC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB9   E1                     POP   hl   
1BBA   E5                     PUSH   hl   
1BBB   E5                     PUSH   hl   
1BBC   CD 21 11               CALL   run   
1BBF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1BD0   76                     HALT      
1BD1                EXPECTM_3106S66:      
1BD1   E1                     POP   HL   
1BD2                          ;*Macro unroll:  test "1a= a++ a",2
1BD2   31 00 5C               LD   SP,STACK   
1BD5   CD 58 10               CALL   coldInit   
1BD8   CD DA 5A               CALL   execStr   
1BDB   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1BE5   E1                     POP   HL   
1BE6   E5                     PUSH   HL   
1BE7   11 02 00               LD   DE,2   
1BEA   B7                     OR   A   
1BEB   ED 52                  SBC   HL,DE   
1BED   7D                     LD   A,L   
1BEE   B4                     OR   H   
1BEF   CA 53 1C               JP   Z,expectM_3107S67   
1BF2   CD 24 10               CALL   printStr   
1BF5   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1C05   CD 24 10               CALL   printStr   
1C08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C17   21 02 00               LD   hl,2   
1C1A   E5                     PUSH   hl   
1C1B   E5                     PUSH   hl   
1C1C   CD 21 11               CALL   run   
1C1F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C2B   CD 24 10               CALL   printStr   
1C2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C3B   E1                     POP   hl   
1C3C   E5                     PUSH   hl   
1C3D   E5                     PUSH   hl   
1C3E   CD 21 11               CALL   run   
1C41   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1C52   76                     HALT      
1C53                EXPECTM_3107S67:      
1C53   E1                     POP   HL   
1C54                          ;*Macro unroll:  test "-1 -1 -",0
1C54   31 00 5C               LD   SP,STACK   
1C57   CD 58 10               CALL   coldInit   
1C5A   CD DA 5A               CALL   execStr   
1C5D   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1C65   E1                     POP   HL   
1C66   E5                     PUSH   HL   
1C67   11 00 00               LD   DE,0   
1C6A   B7                     OR   A   
1C6B   ED 52                  SBC   HL,DE   
1C6D   7D                     LD   A,L   
1C6E   B4                     OR   H   
1C6F   CA D1 1C               JP   Z,expectM_3108S68   
1C72   CD 24 10               CALL   printStr   
1C75   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1C83   CD 24 10               CALL   printStr   
1C86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C95   21 00 00               LD   hl,0   
1C98   E5                     PUSH   hl   
1C99   E5                     PUSH   hl   
1C9A   CD 21 11               CALL   run   
1C9D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1CA9   CD 24 10               CALL   printStr   
1CAC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CB9   E1                     POP   hl   
1CBA   E5                     PUSH   hl   
1CBB   E5                     PUSH   hl   
1CBC   CD 21 11               CALL   run   
1CBF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1CD0   76                     HALT      
1CD1                EXPECTM_3108S68:      
1CD1   E1                     POP   HL   
1CD2                          ;*Macro unroll:  test "5 3 -", 2
1CD2   31 00 5C               LD   SP,STACK   
1CD5   CD 58 10               CALL   coldInit   
1CD8   CD DA 5A               CALL   execStr   
1CDB   35 20 33 20 2D 00      DB   "5 3 -",0   
1CE1   E1                     POP   HL   
1CE2   E5                     PUSH   HL   
1CE3   11 02 00               LD   DE,2   
1CE6   B7                     OR   A   
1CE7   ED 52                  SBC   HL,DE   
1CE9   7D                     LD   A,L   
1CEA   B4                     OR   H   
1CEB   CA 4B 1D               JP   Z,expectM_3109S69   
1CEE   CD 24 10               CALL   printStr   
1CF1   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1CFD   CD 24 10               CALL   printStr   
1D00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D0F   21 02 00               LD   hl,2   
1D12   E5                     PUSH   hl   
1D13   E5                     PUSH   hl   
1D14   CD 21 11               CALL   run   
1D17   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D23   CD 24 10               CALL   printStr   
1D26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D33   E1                     POP   hl   
1D34   E5                     PUSH   hl   
1D35   E5                     PUSH   hl   
1D36   CD 21 11               CALL   run   
1D39   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D4A   76                     HALT      
1D4B                EXPECTM_3109S69:      
1D4B   E1                     POP   HL   
1D4C                          ;*Macro unroll:  test "2 1 -",1
1D4C   31 00 5C               LD   SP,STACK   
1D4F   CD 58 10               CALL   coldInit   
1D52   CD DA 5A               CALL   execStr   
1D55   32 20 31 20 2D 00      DB   "2 1 -",0   
1D5B   E1                     POP   HL   
1D5C   E5                     PUSH   HL   
1D5D   11 01 00               LD   DE,1   
1D60   B7                     OR   A   
1D61   ED 52                  SBC   HL,DE   
1D63   7D                     LD   A,L   
1D64   B4                     OR   H   
1D65   CA C5 1D               JP   Z,expectM_3110S70   
1D68   CD 24 10               CALL   printStr   
1D6B   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1D77   CD 24 10               CALL   printStr   
1D7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D89   21 01 00               LD   hl,1   
1D8C   E5                     PUSH   hl   
1D8D   E5                     PUSH   hl   
1D8E   CD 21 11               CALL   run   
1D91   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D9D   CD 24 10               CALL   printStr   
1DA0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DAD   E1                     POP   hl   
1DAE   E5                     PUSH   hl   
1DAF   E5                     PUSH   hl   
1DB0   CD 21 11               CALL   run   
1DB3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1DC4   76                     HALT      
1DC5                EXPECTM_3110S70:      
1DC5   E1                     POP   HL   
1DC6                          ;*Macro unroll:  test "3a= a-- a",2
1DC6   31 00 5C               LD   SP,STACK   
1DC9   CD 58 10               CALL   coldInit   
1DCC   CD DA 5A               CALL   execStr   
1DCF   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1DD9   E1                     POP   HL   
1DDA   E5                     PUSH   HL   
1DDB   11 02 00               LD   DE,2   
1DDE   B7                     OR   A   
1DDF   ED 52                  SBC   HL,DE   
1DE1   7D                     LD   A,L   
1DE2   B4                     OR   H   
1DE3   CA 47 1E               JP   Z,expectM_3111S71   
1DE6   CD 24 10               CALL   printStr   
1DE9   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1DF9   CD 24 10               CALL   printStr   
1DFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E0B   21 02 00               LD   hl,2   
1E0E   E5                     PUSH   hl   
1E0F   E5                     PUSH   hl   
1E10   CD 21 11               CALL   run   
1E13   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E1F   CD 24 10               CALL   printStr   
1E22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E2F   E1                     POP   hl   
1E30   E5                     PUSH   hl   
1E31   E5                     PUSH   hl   
1E32   CD 21 11               CALL   run   
1E35   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E46   76                     HALT      
1E47                EXPECTM_3111S71:      
1E47   E1                     POP   HL   
1E48                          ;*Macro unroll:  test "3 5 &", 1
1E48   31 00 5C               LD   SP,STACK   
1E4B   CD 58 10               CALL   coldInit   
1E4E   CD DA 5A               CALL   execStr   
1E51   33 20 35 20 26 00      DB   "3 5 &",0   
1E57   E1                     POP   HL   
1E58   E5                     PUSH   HL   
1E59   11 01 00               LD   DE,1   
1E5C   B7                     OR   A   
1E5D   ED 52                  SBC   HL,DE   
1E5F   7D                     LD   A,L   
1E60   B4                     OR   H   
1E61   CA C1 1E               JP   Z,expectM_3112S72   
1E64   CD 24 10               CALL   printStr   
1E67   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1E73   CD 24 10               CALL   printStr   
1E76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E85   21 01 00               LD   hl,1   
1E88   E5                     PUSH   hl   
1E89   E5                     PUSH   hl   
1E8A   CD 21 11               CALL   run   
1E8D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E99   CD 24 10               CALL   printStr   
1E9C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA9   E1                     POP   hl   
1EAA   E5                     PUSH   hl   
1EAB   E5                     PUSH   hl   
1EAC   CD 21 11               CALL   run   
1EAF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1EC0   76                     HALT      
1EC1                EXPECTM_3112S72:      
1EC1   E1                     POP   HL   
1EC2                          ;*Macro unroll:  test "3 5 |", 7
1EC2   31 00 5C               LD   SP,STACK   
1EC5   CD 58 10               CALL   coldInit   
1EC8   CD DA 5A               CALL   execStr   
1ECB   33 20 35 20 7C 00      DB   "3 5 |",0   
1ED1   E1                     POP   HL   
1ED2   E5                     PUSH   HL   
1ED3   11 07 00               LD   DE,7   
1ED6   B7                     OR   A   
1ED7   ED 52                  SBC   HL,DE   
1ED9   7D                     LD   A,L   
1EDA   B4                     OR   H   
1EDB   CA 3B 1F               JP   Z,expectM_3113S73   
1EDE   CD 24 10               CALL   printStr   
1EE1   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1EED   CD 24 10               CALL   printStr   
1EF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EFF   21 07 00               LD   hl,7   
1F02   E5                     PUSH   hl   
1F03   E5                     PUSH   hl   
1F04   CD 21 11               CALL   run   
1F07   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F13   CD 24 10               CALL   printStr   
1F16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F23   E1                     POP   hl   
1F24   E5                     PUSH   hl   
1F25   E5                     PUSH   hl   
1F26   CD 21 11               CALL   run   
1F29   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F3A   76                     HALT      
1F3B                EXPECTM_3113S73:      
1F3B   E1                     POP   HL   
1F3C                          ;*Macro unroll:  test "3 5 /xor", 6
1F3C   31 00 5C               LD   SP,STACK   
1F3F   CD 58 10               CALL   coldInit   
1F42   CD DA 5A               CALL   execStr   
1F45   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
1F4E   E1                     POP   HL   
1F4F   E5                     PUSH   HL   
1F50   11 06 00               LD   DE,6   
1F53   B7                     OR   A   
1F54   ED 52                  SBC   HL,DE   
1F56   7D                     LD   A,L   
1F57   B4                     OR   H   
1F58   CA BB 1F               JP   Z,expectM_3114S74   
1F5B   CD 24 10               CALL   printStr   
1F5E   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
1F6D   CD 24 10               CALL   printStr   
1F70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F7F   21 06 00               LD   hl,6   
1F82   E5                     PUSH   hl   
1F83   E5                     PUSH   hl   
1F84   CD 21 11               CALL   run   
1F87   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F93   CD 24 10               CALL   printStr   
1F96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA3   E1                     POP   hl   
1FA4   E5                     PUSH   hl   
1FA5   E5                     PUSH   hl   
1FA6   CD 21 11               CALL   run   
1FA9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1FBA   76                     HALT      
1FBB                EXPECTM_3114S74:      
1FBB   E1                     POP   HL   
1FBC                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
1FBC   31 00 5C               LD   SP,STACK   
1FBF   CD 58 10               CALL   coldInit   
1FC2   CD DA 5A               CALL   execStr   
1FC5   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
1FD6   E1                     POP   HL   
1FD7   E5                     PUSH   HL   
1FD8   11 06 00               LD   DE,6   
1FDB   B7                     OR   A   
1FDC   ED 52                  SBC   HL,DE   
1FDE   7D                     LD   A,L   
1FDF   B4                     OR   H   
1FE0   CA 4B 20               JP   Z,expectM_3115S75   
1FE3   CD 24 10               CALL   printStr   
1FE6   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
1FFD   CD 24 10               CALL   printStr   
2000   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
200F   21 06 00               LD   hl,6   
2012   E5                     PUSH   hl   
2013   E5                     PUSH   hl   
2014   CD 21 11               CALL   run   
2017   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2023   CD 24 10               CALL   printStr   
2026   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2033   E1                     POP   hl   
2034   E5                     PUSH   hl   
2035   E5                     PUSH   hl   
2036   CD 21 11               CALL   run   
2039   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
204A   76                     HALT      
204B                EXPECTM_3115S75:      
204B   E1                     POP   HL   
204C                          ;*Macro unroll:  test "0 !", true
204C   31 00 5C               LD   SP,STACK   
204F   CD 58 10               CALL   coldInit   
2052   CD DA 5A               CALL   execStr   
2055   30 20 21 00            DB   "0 !",0   
2059   E1                     POP   HL   
205A   E5                     PUSH   HL   
205B   11 FF FF               LD   DE,true   
205E   B7                     OR   A   
205F   ED 52                  SBC   HL,DE   
2061   7D                     LD   A,L   
2062   B4                     OR   H   
2063   CA C1 20               JP   Z,expectM_3116S76   
2066   CD 24 10               CALL   printStr   
2069   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
2073   CD 24 10               CALL   printStr   
2076   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2085   21 FF FF               LD   hl,true   
2088   E5                     PUSH   hl   
2089   E5                     PUSH   hl   
208A   CD 21 11               CALL   run   
208D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2099   CD 24 10               CALL   printStr   
209C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A9   E1                     POP   hl   
20AA   E5                     PUSH   hl   
20AB   E5                     PUSH   hl   
20AC   CD 21 11               CALL   run   
20AF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
20C0   76                     HALT      
20C1                EXPECTM_3116S76:      
20C1   E1                     POP   HL   
20C2                          ;*Macro unroll:  test "2 !", false
20C2   31 00 5C               LD   SP,STACK   
20C5   CD 58 10               CALL   coldInit   
20C8   CD DA 5A               CALL   execStr   
20CB   32 20 21 00            DB   "2 !",0   
20CF   E1                     POP   HL   
20D0   E5                     PUSH   HL   
20D1   11 00 00               LD   DE,false   
20D4   B7                     OR   A   
20D5   ED 52                  SBC   HL,DE   
20D7   7D                     LD   A,L   
20D8   B4                     OR   H   
20D9   CA 37 21               JP   Z,expectM_3117S77   
20DC   CD 24 10               CALL   printStr   
20DF   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
20E9   CD 24 10               CALL   printStr   
20EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20FB   21 00 00               LD   hl,false   
20FE   E5                     PUSH   hl   
20FF   E5                     PUSH   hl   
2100   CD 21 11               CALL   run   
2103   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
210F   CD 24 10               CALL   printStr   
2112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
211F   E1                     POP   hl   
2120   E5                     PUSH   hl   
2121   E5                     PUSH   hl   
2122   CD 21 11               CALL   run   
2125   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2136   76                     HALT      
2137                EXPECTM_3117S77:      
2137   E1                     POP   HL   
2138                          ;*Macro unroll:  test "0 !!", false
2138   31 00 5C               LD   SP,STACK   
213B   CD 58 10               CALL   coldInit   
213E   CD DA 5A               CALL   execStr   
2141   30 20 21 21 00         DB   "0 !!",0   
2146   E1                     POP   HL   
2147   E5                     PUSH   HL   
2148   11 00 00               LD   DE,false   
214B   B7                     OR   A   
214C   ED 52                  SBC   HL,DE   
214E   7D                     LD   A,L   
214F   B4                     OR   H   
2150   CA AF 21               JP   Z,expectM_3118S78   
2153   CD 24 10               CALL   printStr   
2156   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
2161   CD 24 10               CALL   printStr   
2164   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2173   21 00 00               LD   hl,false   
2176   E5                     PUSH   hl   
2177   E5                     PUSH   hl   
2178   CD 21 11               CALL   run   
217B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2187   CD 24 10               CALL   printStr   
218A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2197   E1                     POP   hl   
2198   E5                     PUSH   hl   
2199   E5                     PUSH   hl   
219A   CD 21 11               CALL   run   
219D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
21AE   76                     HALT      
21AF                EXPECTM_3118S78:      
21AF   E1                     POP   HL   
21B0                          ;*Macro unroll:  test "2 !!", true
21B0   31 00 5C               LD   SP,STACK   
21B3   CD 58 10               CALL   coldInit   
21B6   CD DA 5A               CALL   execStr   
21B9   32 20 21 21 00         DB   "2 !!",0   
21BE   E1                     POP   HL   
21BF   E5                     PUSH   HL   
21C0   11 FF FF               LD   DE,true   
21C3   B7                     OR   A   
21C4   ED 52                  SBC   HL,DE   
21C6   7D                     LD   A,L   
21C7   B4                     OR   H   
21C8   CA 27 22               JP   Z,expectM_3119S79   
21CB   CD 24 10               CALL   printStr   
21CE   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
21D9   CD 24 10               CALL   printStr   
21DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21EB   21 FF FF               LD   hl,true   
21EE   E5                     PUSH   hl   
21EF   E5                     PUSH   hl   
21F0   CD 21 11               CALL   run   
21F3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
21FF   CD 24 10               CALL   printStr   
2202   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
220F   E1                     POP   hl   
2210   E5                     PUSH   hl   
2211   E5                     PUSH   hl   
2212   CD 21 11               CALL   run   
2215   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2226   76                     HALT      
2227                EXPECTM_3119S79:      
2227   E1                     POP   HL   
2228                          ;*Macro unroll:  test "2 3 *", 6
2228   31 00 5C               LD   SP,STACK   
222B   CD 58 10               CALL   coldInit   
222E   CD DA 5A               CALL   execStr   
2231   32 20 33 20 2A 00      DB   "2 3 *",0   
2237   E1                     POP   HL   
2238   E5                     PUSH   HL   
2239   11 06 00               LD   DE,6   
223C   B7                     OR   A   
223D   ED 52                  SBC   HL,DE   
223F   7D                     LD   A,L   
2240   B4                     OR   H   
2241   CA A1 22               JP   Z,expectM_3120S80   
2244   CD 24 10               CALL   printStr   
2247   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
2253   CD 24 10               CALL   printStr   
2256   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2265   21 06 00               LD   hl,6   
2268   E5                     PUSH   hl   
2269   E5                     PUSH   hl   
226A   CD 21 11               CALL   run   
226D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2279   CD 24 10               CALL   printStr   
227C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2289   E1                     POP   hl   
228A   E5                     PUSH   hl   
228B   E5                     PUSH   hl   
228C   CD 21 11               CALL   run   
228F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
22A0   76                     HALT      
22A1                EXPECTM_3120S80:      
22A1   E1                     POP   HL   
22A2                          ;*Macro unroll:  test "1 2 3 + *", 5
22A2   31 00 5C               LD   SP,STACK   
22A5   CD 58 10               CALL   coldInit   
22A8   CD DA 5A               CALL   execStr   
22AB   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
22B5   E1                     POP   HL   
22B6   E5                     PUSH   HL   
22B7   11 05 00               LD   DE,5   
22BA   B7                     OR   A   
22BB   ED 52                  SBC   HL,DE   
22BD   7D                     LD   A,L   
22BE   B4                     OR   H   
22BF   CA 23 23               JP   Z,expectM_3121S81   
22C2   CD 24 10               CALL   printStr   
22C5   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
22D5   CD 24 10               CALL   printStr   
22D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22E7   21 05 00               LD   hl,5   
22EA   E5                     PUSH   hl   
22EB   E5                     PUSH   hl   
22EC   CD 21 11               CALL   run   
22EF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
22FB   CD 24 10               CALL   printStr   
22FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
230B   E1                     POP   hl   
230C   E5                     PUSH   hl   
230D   E5                     PUSH   hl   
230E   CD 21 11               CALL   run   
2311   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2322   76                     HALT      
2323                EXPECTM_3121S81:      
2323   E1                     POP   HL   
2324                          ;*Macro unroll:  test "7 3 /", 2
2324   31 00 5C               LD   SP,STACK   
2327   CD 58 10               CALL   coldInit   
232A   CD DA 5A               CALL   execStr   
232D   37 20 33 20 2F 00      DB   "7 3 /",0   
2333   E1                     POP   HL   
2334   E5                     PUSH   HL   
2335   11 02 00               LD   DE,2   
2338   B7                     OR   A   
2339   ED 52                  SBC   HL,DE   
233B   7D                     LD   A,L   
233C   B4                     OR   H   
233D   CA 9D 23               JP   Z,expectM_3122S82   
2340   CD 24 10               CALL   printStr   
2343   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
234F   CD 24 10               CALL   printStr   
2352   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2361   21 02 00               LD   hl,2   
2364   E5                     PUSH   hl   
2365   E5                     PUSH   hl   
2366   CD 21 11               CALL   run   
2369   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2375   CD 24 10               CALL   printStr   
2378   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2385   E1                     POP   hl   
2386   E5                     PUSH   hl   
2387   E5                     PUSH   hl   
2388   CD 21 11               CALL   run   
238B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
239C   76                     HALT      
239D                EXPECTM_3122S82:      
239D   E1                     POP   HL   
239E                          ;*Macro unroll:  test "100a= 1a+= a", 101
239E   31 00 5C               LD   SP,STACK   
23A1   CD 58 10               CALL   coldInit   
23A4   CD DA 5A               CALL   execStr   
23A7   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
23B4   E1                     POP   HL   
23B5   E5                     PUSH   HL   
23B6   11 65 00               LD   DE,101   
23B9   B7                     OR   A   
23BA   ED 52                  SBC   HL,DE   
23BC   7D                     LD   A,L   
23BD   B4                     OR   H   
23BE   CA 25 24               JP   Z,expectM_3123S83   
23C1   CD 24 10               CALL   printStr   
23C4   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
23D7   CD 24 10               CALL   printStr   
23DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23E9   21 65 00               LD   hl,101   
23EC   E5                     PUSH   hl   
23ED   E5                     PUSH   hl   
23EE   CD 21 11               CALL   run   
23F1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
23FD   CD 24 10               CALL   printStr   
2400   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
240D   E1                     POP   hl   
240E   E5                     PUSH   hl   
240F   E5                     PUSH   hl   
2410   CD 21 11               CALL   run   
2413   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2424   76                     HALT      
2425                EXPECTM_3123S83:      
2425   E1                     POP   HL   
2426                          ;*Macro unroll:  test "100a= 1a-= a", 99
2426   31 00 5C               LD   SP,STACK   
2429   CD 58 10               CALL   coldInit   
242C   CD DA 5A               CALL   execStr   
242F   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
243C   E1                     POP   HL   
243D   E5                     PUSH   HL   
243E   11 63 00               LD   DE,99   
2441   B7                     OR   A   
2442   ED 52                  SBC   HL,DE   
2444   7D                     LD   A,L   
2445   B4                     OR   H   
2446   CA AD 24               JP   Z,expectM_3124S84   
2449   CD 24 10               CALL   printStr   
244C   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
245F   CD 24 10               CALL   printStr   
2462   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2471   21 63 00               LD   hl,99   
2474   E5                     PUSH   hl   
2475   E5                     PUSH   hl   
2476   CD 21 11               CALL   run   
2479   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2485   CD 24 10               CALL   printStr   
2488   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2495   E1                     POP   hl   
2496   E5                     PUSH   hl   
2497   E5                     PUSH   hl   
2498   CD 21 11               CALL   run   
249B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
24AC   76                     HALT      
24AD                EXPECTM_3124S84:      
24AD   E1                     POP   HL   
24AE                          ;*Macro unroll:  test "100a= 2a*= a", 200
24AE   31 00 5C               LD   SP,STACK   
24B1   CD 58 10               CALL   coldInit   
24B4   CD DA 5A               CALL   execStr   
24B7   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
24C4   E1                     POP   HL   
24C5   E5                     PUSH   HL   
24C6   11 C8 00               LD   DE,200   
24C9   B7                     OR   A   
24CA   ED 52                  SBC   HL,DE   
24CC   7D                     LD   A,L   
24CD   B4                     OR   H   
24CE   CA 35 25               JP   Z,expectM_3125S85   
24D1   CD 24 10               CALL   printStr   
24D4   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
24E7   CD 24 10               CALL   printStr   
24EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24F9   21 C8 00               LD   hl,200   
24FC   E5                     PUSH   hl   
24FD   E5                     PUSH   hl   
24FE   CD 21 11               CALL   run   
2501   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
250D   CD 24 10               CALL   printStr   
2510   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
251D   E1                     POP   hl   
251E   E5                     PUSH   hl   
251F   E5                     PUSH   hl   
2520   CD 21 11               CALL   run   
2523   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2534   76                     HALT      
2535                EXPECTM_3125S85:      
2535   E1                     POP   HL   
2536                          ;*Macro unroll:  test "100a= 2 a/= a", 50
2536   31 00 5C               LD   SP,STACK   
2539   CD 58 10               CALL   coldInit   
253C   CD DA 5A               CALL   execStr   
253F   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
254D   E1                     POP   HL   
254E   E5                     PUSH   HL   
254F   11 32 00               LD   DE,50   
2552   B7                     OR   A   
2553   ED 52                  SBC   HL,DE   
2555   7D                     LD   A,L   
2556   B4                     OR   H   
2557   CA BF 25               JP   Z,expectM_3126S86   
255A   CD 24 10               CALL   printStr   
255D   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2571   CD 24 10               CALL   printStr   
2574   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2583   21 32 00               LD   hl,50   
2586   E5                     PUSH   hl   
2587   E5                     PUSH   hl   
2588   CD 21 11               CALL   run   
258B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2597   CD 24 10               CALL   printStr   
259A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A7   E1                     POP   hl   
25A8   E5                     PUSH   hl   
25A9   E5                     PUSH   hl   
25AA   CD 21 11               CALL   run   
25AD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
25BE   76                     HALT      
25BF                EXPECTM_3126S86:      
25BF   E1                     POP   HL   
25C0                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
25C0   31 00 5C               LD   SP,STACK   
25C3   CD 58 10               CALL   coldInit   
25C6   CD DA 5A               CALL   execStr   
25C9   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
25D9   E1                     POP   HL   
25DA   E5                     PUSH   HL   
25DB   11 05 00               LD   DE,5   
25DE   B7                     OR   A   
25DF   ED 52                  SBC   HL,DE   
25E1   7D                     LD   A,L   
25E2   B4                     OR   H   
25E3   CA 4D 26               JP   Z,expectM_3127S87   
25E6   CD 24 10               CALL   printStr   
25E9   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
25FF   CD 24 10               CALL   printStr   
2602   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2611   21 05 00               LD   hl,5   
2614   E5                     PUSH   hl   
2615   E5                     PUSH   hl   
2616   CD 21 11               CALL   run   
2619   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2625   CD 24 10               CALL   printStr   
2628   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2635   E1                     POP   hl   
2636   E5                     PUSH   hl   
2637   E5                     PUSH   hl   
2638   CD 21 11               CALL   run   
263B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
264C   76                     HALT      
264D                EXPECTM_3127S87:      
264D   E1                     POP   HL   
264E                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
264E   31 00 5C               LD   SP,STACK   
2651   CD 58 10               CALL   coldInit   
2654   CD DA 5A               CALL   execStr   
2657   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2667   E1                     POP   HL   
2668   E5                     PUSH   HL   
2669   11 01 00               LD   DE,1   
266C   B7                     OR   A   
266D   ED 52                  SBC   HL,DE   
266F   7D                     LD   A,L   
2670   B4                     OR   H   
2671   CA DB 26               JP   Z,expectM_3128S88   
2674   CD 24 10               CALL   printStr   
2677   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
268D   CD 24 10               CALL   printStr   
2690   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
269F   21 01 00               LD   hl,1   
26A2   E5                     PUSH   hl   
26A3   E5                     PUSH   hl   
26A4   CD 21 11               CALL   run   
26A7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
26B3   CD 24 10               CALL   printStr   
26B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26C3   E1                     POP   hl   
26C4   E5                     PUSH   hl   
26C5   E5                     PUSH   hl   
26C6   CD 21 11               CALL   run   
26C9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
26DA   76                     HALT      
26DB                EXPECTM_3128S88:      
26DB   E1                     POP   HL   
26DC                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
26DC   31 00 5C               LD   SP,STACK   
26DF   CD 58 10               CALL   coldInit   
26E2   CD DA 5A               CALL   execStr   
26E5   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
26F5   E1                     POP   HL   
26F6   E5                     PUSH   HL   
26F7   11 06 00               LD   DE,6   
26FA   B7                     OR   A   
26FB   ED 52                  SBC   HL,DE   
26FD   7D                     LD   A,L   
26FE   B4                     OR   H   
26FF   CA 69 27               JP   Z,expectM_3129S89   
2702   CD 24 10               CALL   printStr   
2705   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
271B   CD 24 10               CALL   printStr   
271E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
272D   21 06 00               LD   hl,6   
2730   E5                     PUSH   hl   
2731   E5                     PUSH   hl   
2732   CD 21 11               CALL   run   
2735   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2741   CD 24 10               CALL   printStr   
2744   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2751   E1                     POP   hl   
2752   E5                     PUSH   hl   
2753   E5                     PUSH   hl   
2754   CD 21 11               CALL   run   
2757   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2768   76                     HALT      
2769                EXPECTM_3129S89:      
2769   E1                     POP   HL   
276A                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
276A   31 00 5C               LD   SP,STACK   
276D   CD 58 10               CALL   coldInit   
2770   CD DA 5A               CALL   execStr   
2773   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2783   E1                     POP   HL   
2784   E5                     PUSH   HL   
2785   11 03 00               LD   DE,3   
2788   B7                     OR   A   
2789   ED 52                  SBC   HL,DE   
278B   7D                     LD   A,L   
278C   B4                     OR   H   
278D   CA F7 27               JP   Z,expectM_3130S90   
2790   CD 24 10               CALL   printStr   
2793   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
27A9   CD 24 10               CALL   printStr   
27AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27BB   21 03 00               LD   hl,3   
27BE   E5                     PUSH   hl   
27BF   E5                     PUSH   hl   
27C0   CD 21 11               CALL   run   
27C3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
27CF   CD 24 10               CALL   printStr   
27D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27DF   E1                     POP   hl   
27E0   E5                     PUSH   hl   
27E1   E5                     PUSH   hl   
27E2   CD 21 11               CALL   run   
27E5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
27F6   76                     HALT      
27F7                EXPECTM_3130S90:      
27F7   E1                     POP   HL   
27F8                          ;*Macro unroll:  test "$55a= $AAa&= a",0
27F8   31 00 5C               LD   SP,STACK   
27FB   CD 58 10               CALL   coldInit   
27FE   CD DA 5A               CALL   execStr   
2801   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
2810   E1                     POP   HL   
2811   E5                     PUSH   HL   
2812   11 00 00               LD   DE,0   
2815   B7                     OR   A   
2816   ED 52                  SBC   HL,DE   
2818   7D                     LD   A,L   
2819   B4                     OR   H   
281A   CA 83 28               JP   Z,expectM_3131S91   
281D   CD 24 10               CALL   printStr   
2820   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
2835   CD 24 10               CALL   printStr   
2838   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2847   21 00 00               LD   hl,0   
284A   E5                     PUSH   hl   
284B   E5                     PUSH   hl   
284C   CD 21 11               CALL   run   
284F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
285B   CD 24 10               CALL   printStr   
285E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
286B   E1                     POP   hl   
286C   E5                     PUSH   hl   
286D   E5                     PUSH   hl   
286E   CD 21 11               CALL   run   
2871   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2882   76                     HALT      
2883                EXPECTM_3131S91:      
2883   E1                     POP   HL   
2884                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2884   31 00 5C               LD   SP,STACK   
2887   CD 58 10               CALL   coldInit   
288A   CD DA 5A               CALL   execStr   
288D   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
289C   E1                     POP   HL   
289D   E5                     PUSH   HL   
289E   11 FF 00               LD   DE,$FF   
28A1   B7                     OR   A   
28A2   ED 52                  SBC   HL,DE   
28A4   7D                     LD   A,L   
28A5   B4                     OR   H   
28A6   CA 0F 29               JP   Z,expectM_3132S92   
28A9   CD 24 10               CALL   printStr   
28AC   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
28C1   CD 24 10               CALL   printStr   
28C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D3   21 FF 00               LD   hl,$FF   
28D6   E5                     PUSH   hl   
28D7   E5                     PUSH   hl   
28D8   CD 21 11               CALL   run   
28DB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
28E7   CD 24 10               CALL   printStr   
28EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28F7   E1                     POP   hl   
28F8   E5                     PUSH   hl   
28F9   E5                     PUSH   hl   
28FA   CD 21 11               CALL   run   
28FD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
290E   76                     HALT      
290F                EXPECTM_3132S92:      
290F   E1                     POP   HL   
2910                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
2910   31 00 5C               LD   SP,STACK   
2913   CD 58 10               CALL   coldInit   
2916   CD DA 5A               CALL   execStr   
2919   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
292C   E1                     POP   HL   
292D   E5                     PUSH   HL   
292E   11 0F 00               LD   DE,$0F   
2931   B7                     OR   A   
2932   ED 52                  SBC   HL,DE   
2934   7D                     LD   A,L   
2935   B4                     OR   H   
2936   CA A3 29               JP   Z,expectM_3133S93   
2939   CD 24 10               CALL   printStr   
293C   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
2955   CD 24 10               CALL   printStr   
2958   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2967   21 0F 00               LD   hl,$0F   
296A   E5                     PUSH   hl   
296B   E5                     PUSH   hl   
296C   CD 21 11               CALL   run   
296F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
297B   CD 24 10               CALL   printStr   
297E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
298B   E1                     POP   hl   
298C   E5                     PUSH   hl   
298D   E5                     PUSH   hl   
298E   CD 21 11               CALL   run   
2991   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
29A2   76                     HALT      
29A3                EXPECTM_3133S93:      
29A3   E1                     POP   HL   
29A4                          ;*Macro unroll:  test "$00AA~",$FF55
29A4   31 00 5C               LD   SP,STACK   
29A7   CD 58 10               CALL   coldInit   
29AA   CD DA 5A               CALL   execStr   
29AD   24 30 30 41 41 7E 00   DB   "$00AA~",0   
29B4   E1                     POP   HL   
29B5   E5                     PUSH   HL   
29B6   11 55 FF               LD   DE,$FF55   
29B9   B7                     OR   A   
29BA   ED 52                  SBC   HL,DE   
29BC   7D                     LD   A,L   
29BD   B4                     OR   H   
29BE   CA 1F 2A               JP   Z,expectM_3134S94   
29C1   CD 24 10               CALL   printStr   
29C4   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
29D1   CD 24 10               CALL   printStr   
29D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E3   21 55 FF               LD   hl,$FF55   
29E6   E5                     PUSH   hl   
29E7   E5                     PUSH   hl   
29E8   CD 21 11               CALL   run   
29EB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
29F7   CD 24 10               CALL   printStr   
29FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A07   E1                     POP   hl   
2A08   E5                     PUSH   hl   
2A09   E5                     PUSH   hl   
2A0A   CD 21 11               CALL   run   
2A0D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2A1E   76                     HALT      
2A1F                EXPECTM_3134S94:      
2A1F   E1                     POP   HL   
2A20                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2A20   31 00 5C               LD   SP,STACK   
2A23   CD 58 10               CALL   coldInit   
2A26   CD DA 5A               CALL   execStr   
2A29   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2A37   E1                     POP   HL   
2A38   E5                     PUSH   HL   
2A39   11 55 55               LD   DE,$5555   
2A3C   B7                     OR   A   
2A3D   ED 52                  SBC   HL,DE   
2A3F   7D                     LD   A,L   
2A40   B4                     OR   H   
2A41   CA A9 2A               JP   Z,expectM_3135S95   
2A44   CD 24 10               CALL   printStr   
2A47   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
2A5B   CD 24 10               CALL   printStr   
2A5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6D   21 55 55               LD   hl,$5555   
2A70   E5                     PUSH   hl   
2A71   E5                     PUSH   hl   
2A72   CD 21 11               CALL   run   
2A75   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A81   CD 24 10               CALL   printStr   
2A84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A91   E1                     POP   hl   
2A92   E5                     PUSH   hl   
2A93   E5                     PUSH   hl   
2A94   CD 21 11               CALL   run   
2A97   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2AA8   76                     HALT      
2AA9                EXPECTM_3135S95:      
2AA9   E1                     POP   HL   
2AAA                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
2AAA   31 00 5C               LD   SP,STACK   
2AAD   CD 58 10               CALL   coldInit   
2AB0   CD DA 5A               CALL   execStr   
2AB3   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2AC1   E1                     POP   HL   
2AC2   E5                     PUSH   HL   
2AC3   11 06 00               LD   DE,6   
2AC6   B7                     OR   A   
2AC7   ED 52                  SBC   HL,DE   
2AC9   7D                     LD   A,L   
2ACA   B4                     OR   H   
2ACB   CA 33 2B               JP   Z,expectM_3136S96   
2ACE   CD 24 10               CALL   printStr   
2AD1   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2AE5   CD 24 10               CALL   printStr   
2AE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF7   21 06 00               LD   hl,6   
2AFA   E5                     PUSH   hl   
2AFB   E5                     PUSH   hl   
2AFC   CD 21 11               CALL   run   
2AFF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B0B   CD 24 10               CALL   printStr   
2B0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B1B   E1                     POP   hl   
2B1C   E5                     PUSH   hl   
2B1D   E5                     PUSH   hl   
2B1E   CD 21 11               CALL   run   
2B21   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2B32   76                     HALT      
2B33                EXPECTM_3136S96:      
2B33   E1                     POP   HL   
2B34                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2B34   31 00 5C               LD   SP,STACK   
2B37   CD 58 10               CALL   coldInit   
2B3A   CD DA 5A               CALL   execStr   
2B3D   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
2B4C   E1                     POP   HL   
2B4D   E5                     PUSH   HL   
2B4E   11 05 00               LD   DE,5   
2B51   B7                     OR   A   
2B52   ED 52                  SBC   HL,DE   
2B54   7D                     LD   A,L   
2B55   B4                     OR   H   
2B56   CA BF 2B               JP   Z,expectM_3137S97   
2B59   CD 24 10               CALL   printStr   
2B5C   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
2B71   CD 24 10               CALL   printStr   
2B74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B83   21 05 00               LD   hl,5   
2B86   E5                     PUSH   hl   
2B87   E5                     PUSH   hl   
2B88   CD 21 11               CALL   run   
2B8B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B97   CD 24 10               CALL   printStr   
2B9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BA7   E1                     POP   hl   
2BA8   E5                     PUSH   hl   
2BA9   E5                     PUSH   hl   
2BAA   CD 21 11               CALL   run   
2BAD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2BBE   76                     HALT      
2BBF                EXPECTM_3137S97:      
2BBF   E1                     POP   HL   
2BC0                          ;*Macro unroll:  test "7 3 / /rem", 1
2BC0   31 00 5C               LD   SP,STACK   
2BC3   CD 58 10               CALL   coldInit   
2BC6   CD DA 5A               CALL   execStr   
2BC9   37 20 33 20 2F 20 2F 72 65 6D 00 DB   "7 3 / /rem",0   
2BD4   E1                     POP   HL   
2BD5   E5                     PUSH   HL   
2BD6   11 01 00               LD   DE,1   
2BD9   B7                     OR   A   
2BDA   ED 52                  SBC   HL,DE   
2BDC   7D                     LD   A,L   
2BDD   B4                     OR   H   
2BDE   CA 43 2C               JP   Z,expectM_3138S98   
2BE1   CD 24 10               CALL   printStr   
2BE4   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 00 .CSTR   "Code: ","7 3 / /rem"   
2BF5   CD 24 10               CALL   printStr   
2BF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C07   21 01 00               LD   hl,1   
2C0A   E5                     PUSH   hl   
2C0B   E5                     PUSH   hl   
2C0C   CD 21 11               CALL   run   
2C0F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C1B   CD 24 10               CALL   printStr   
2C1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C2B   E1                     POP   hl   
2C2C   E5                     PUSH   hl   
2C2D   E5                     PUSH   hl   
2C2E   CD 21 11               CALL   run   
2C31   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2C42   76                     HALT      
2C43                EXPECTM_3138S98:      
2C43   E1                     POP   HL   
2C44                          ;*Macro unroll:  test "7 3 /", 2
2C44   31 00 5C               LD   SP,STACK   
2C47   CD 58 10               CALL   coldInit   
2C4A   CD DA 5A               CALL   execStr   
2C4D   37 20 33 20 2F 00      DB   "7 3 /",0   
2C53   E1                     POP   HL   
2C54   E5                     PUSH   HL   
2C55   11 02 00               LD   DE,2   
2C58   B7                     OR   A   
2C59   ED 52                  SBC   HL,DE   
2C5B   7D                     LD   A,L   
2C5C   B4                     OR   H   
2C5D   CA BD 2C               JP   Z,expectM_3139S99   
2C60   CD 24 10               CALL   printStr   
2C63   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2C6F   CD 24 10               CALL   printStr   
2C72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C81   21 02 00               LD   hl,2   
2C84   E5                     PUSH   hl   
2C85   E5                     PUSH   hl   
2C86   CD 21 11               CALL   run   
2C89   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C95   CD 24 10               CALL   printStr   
2C98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CA5   E1                     POP   hl   
2CA6   E5                     PUSH   hl   
2CA7   E5                     PUSH   hl   
2CA8   CD 21 11               CALL   run   
2CAB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2CBC   76                     HALT      
2CBD                EXPECTM_3139S99:      
2CBD   E1                     POP   HL   
2CBE                          ;*Macro unroll:  test "2 3 ==", FALSE
2CBE   31 00 5C               LD   SP,STACK   
2CC1   CD 58 10               CALL   coldInit   
2CC4   CD DA 5A               CALL   execStr   
2CC7   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2CCE   E1                     POP   HL   
2CCF   E5                     PUSH   HL   
2CD0   11 00 00               LD   DE,FALSE   
2CD3   B7                     OR   A   
2CD4   ED 52                  SBC   HL,DE   
2CD6   7D                     LD   A,L   
2CD7   B4                     OR   H   
2CD8   CA 39 2D               JP   Z,expectM_3140S100   
2CDB   CD 24 10               CALL   printStr   
2CDE   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2CEB   CD 24 10               CALL   printStr   
2CEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CFD   21 00 00               LD   hl,FALSE   
2D00   E5                     PUSH   hl   
2D01   E5                     PUSH   hl   
2D02   CD 21 11               CALL   run   
2D05   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D11   CD 24 10               CALL   printStr   
2D14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D21   E1                     POP   hl   
2D22   E5                     PUSH   hl   
2D23   E5                     PUSH   hl   
2D24   CD 21 11               CALL   run   
2D27   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D38   76                     HALT      
2D39                EXPECTM_3140S100:      
2D39   E1                     POP   HL   
2D3A                          ;*Macro unroll:  test "3 3 ==", TRUE
2D3A   31 00 5C               LD   SP,STACK   
2D3D   CD 58 10               CALL   coldInit   
2D40   CD DA 5A               CALL   execStr   
2D43   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2D4A   E1                     POP   HL   
2D4B   E5                     PUSH   HL   
2D4C   11 FF FF               LD   DE,TRUE   
2D4F   B7                     OR   A   
2D50   ED 52                  SBC   HL,DE   
2D52   7D                     LD   A,L   
2D53   B4                     OR   H   
2D54   CA B5 2D               JP   Z,expectM_3141S101   
2D57   CD 24 10               CALL   printStr   
2D5A   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2D67   CD 24 10               CALL   printStr   
2D6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D79   21 FF FF               LD   hl,TRUE   
2D7C   E5                     PUSH   hl   
2D7D   E5                     PUSH   hl   
2D7E   CD 21 11               CALL   run   
2D81   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D8D   CD 24 10               CALL   printStr   
2D90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9D   E1                     POP   hl   
2D9E   E5                     PUSH   hl   
2D9F   E5                     PUSH   hl   
2DA0   CD 21 11               CALL   run   
2DA3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2DB4   76                     HALT      
2DB5                EXPECTM_3141S101:      
2DB5   E1                     POP   HL   
2DB6                          ;*Macro unroll:  test "1 2 <", TRUE
2DB6   31 00 5C               LD   SP,STACK   
2DB9   CD 58 10               CALL   coldInit   
2DBC   CD DA 5A               CALL   execStr   
2DBF   31 20 32 20 3C 00      DB   "1 2 <",0   
2DC5   E1                     POP   HL   
2DC6   E5                     PUSH   HL   
2DC7   11 FF FF               LD   DE,TRUE   
2DCA   B7                     OR   A   
2DCB   ED 52                  SBC   HL,DE   
2DCD   7D                     LD   A,L   
2DCE   B4                     OR   H   
2DCF   CA 2F 2E               JP   Z,expectM_3142S102   
2DD2   CD 24 10               CALL   printStr   
2DD5   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2DE1   CD 24 10               CALL   printStr   
2DE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DF3   21 FF FF               LD   hl,TRUE   
2DF6   E5                     PUSH   hl   
2DF7   E5                     PUSH   hl   
2DF8   CD 21 11               CALL   run   
2DFB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2E07   CD 24 10               CALL   printStr   
2E0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E17   E1                     POP   hl   
2E18   E5                     PUSH   hl   
2E19   E5                     PUSH   hl   
2E1A   CD 21 11               CALL   run   
2E1D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E2E   76                     HALT      
2E2F                EXPECTM_3142S102:      
2E2F   E1                     POP   HL   
2E30                          ;*Macro unroll:  test "2 1 <", FALSE
2E30   31 00 5C               LD   SP,STACK   
2E33   CD 58 10               CALL   coldInit   
2E36   CD DA 5A               CALL   execStr   
2E39   32 20 31 20 3C 00      DB   "2 1 <",0   
2E3F   E1                     POP   HL   
2E40   E5                     PUSH   HL   
2E41   11 00 00               LD   DE,FALSE   
2E44   B7                     OR   A   
2E45   ED 52                  SBC   HL,DE   
2E47   7D                     LD   A,L   
2E48   B4                     OR   H   
2E49   CA A9 2E               JP   Z,expectM_3143S103   
2E4C   CD 24 10               CALL   printStr   
2E4F   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2E5B   CD 24 10               CALL   printStr   
2E5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E6D   21 00 00               LD   hl,FALSE   
2E70   E5                     PUSH   hl   
2E71   E5                     PUSH   hl   
2E72   CD 21 11               CALL   run   
2E75   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2E81   CD 24 10               CALL   printStr   
2E84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E91   E1                     POP   hl   
2E92   E5                     PUSH   hl   
2E93   E5                     PUSH   hl   
2E94   CD 21 11               CALL   run   
2E97   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2EA8   76                     HALT      
2EA9                EXPECTM_3143S103:      
2EA9   E1                     POP   HL   
2EAA                          ;*Macro unroll:  test "2 3 <", TRUE
2EAA   31 00 5C               LD   SP,STACK   
2EAD   CD 58 10               CALL   coldInit   
2EB0   CD DA 5A               CALL   execStr   
2EB3   32 20 33 20 3C 00      DB   "2 3 <",0   
2EB9   E1                     POP   HL   
2EBA   E5                     PUSH   HL   
2EBB   11 FF FF               LD   DE,TRUE   
2EBE   B7                     OR   A   
2EBF   ED 52                  SBC   HL,DE   
2EC1   7D                     LD   A,L   
2EC2   B4                     OR   H   
2EC3   CA 23 2F               JP   Z,expectM_3144S104   
2EC6   CD 24 10               CALL   printStr   
2EC9   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2ED5   CD 24 10               CALL   printStr   
2ED8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EE7   21 FF FF               LD   hl,TRUE   
2EEA   E5                     PUSH   hl   
2EEB   E5                     PUSH   hl   
2EEC   CD 21 11               CALL   run   
2EEF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2EFB   CD 24 10               CALL   printStr   
2EFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F0B   E1                     POP   hl   
2F0C   E5                     PUSH   hl   
2F0D   E5                     PUSH   hl   
2F0E   CD 21 11               CALL   run   
2F11   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F22   76                     HALT      
2F23                EXPECTM_3144S104:      
2F23   E1                     POP   HL   
2F24                          ;*Macro unroll:  test "3 3 <", FALSE
2F24   31 00 5C               LD   SP,STACK   
2F27   CD 58 10               CALL   coldInit   
2F2A   CD DA 5A               CALL   execStr   
2F2D   33 20 33 20 3C 00      DB   "3 3 <",0   
2F33   E1                     POP   HL   
2F34   E5                     PUSH   HL   
2F35   11 00 00               LD   DE,FALSE   
2F38   B7                     OR   A   
2F39   ED 52                  SBC   HL,DE   
2F3B   7D                     LD   A,L   
2F3C   B4                     OR   H   
2F3D   CA 9D 2F               JP   Z,expectM_3145S105   
2F40   CD 24 10               CALL   printStr   
2F43   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2F4F   CD 24 10               CALL   printStr   
2F52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F61   21 00 00               LD   hl,FALSE   
2F64   E5                     PUSH   hl   
2F65   E5                     PUSH   hl   
2F66   CD 21 11               CALL   run   
2F69   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2F75   CD 24 10               CALL   printStr   
2F78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F85   E1                     POP   hl   
2F86   E5                     PUSH   hl   
2F87   E5                     PUSH   hl   
2F88   CD 21 11               CALL   run   
2F8B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F9C   76                     HALT      
2F9D                EXPECTM_3145S105:      
2F9D   E1                     POP   HL   
2F9E                          ;*Macro unroll:  test "1 2 >", FALSE
2F9E   31 00 5C               LD   SP,STACK   
2FA1   CD 58 10               CALL   coldInit   
2FA4   CD DA 5A               CALL   execStr   
2FA7   31 20 32 20 3E 00      DB   "1 2 >",0   
2FAD   E1                     POP   HL   
2FAE   E5                     PUSH   HL   
2FAF   11 00 00               LD   DE,FALSE   
2FB2   B7                     OR   A   
2FB3   ED 52                  SBC   HL,DE   
2FB5   7D                     LD   A,L   
2FB6   B4                     OR   H   
2FB7   CA 17 30               JP   Z,expectM_3146S106   
2FBA   CD 24 10               CALL   printStr   
2FBD   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2FC9   CD 24 10               CALL   printStr   
2FCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FDB   21 00 00               LD   hl,FALSE   
2FDE   E5                     PUSH   hl   
2FDF   E5                     PUSH   hl   
2FE0   CD 21 11               CALL   run   
2FE3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2FEF   CD 24 10               CALL   printStr   
2FF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FFF   E1                     POP   hl   
3000   E5                     PUSH   hl   
3001   E5                     PUSH   hl   
3002   CD 21 11               CALL   run   
3005   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3016   76                     HALT      
3017                EXPECTM_3146S106:      
3017   E1                     POP   HL   
3018                          ;*Macro unroll:  test "2 1 >", TRUE
3018   31 00 5C               LD   SP,STACK   
301B   CD 58 10               CALL   coldInit   
301E   CD DA 5A               CALL   execStr   
3021   32 20 31 20 3E 00      DB   "2 1 >",0   
3027   E1                     POP   HL   
3028   E5                     PUSH   HL   
3029   11 FF FF               LD   DE,TRUE   
302C   B7                     OR   A   
302D   ED 52                  SBC   HL,DE   
302F   7D                     LD   A,L   
3030   B4                     OR   H   
3031   CA 91 30               JP   Z,expectM_3147S107   
3034   CD 24 10               CALL   printStr   
3037   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
3043   CD 24 10               CALL   printStr   
3046   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3055   21 FF FF               LD   hl,TRUE   
3058   E5                     PUSH   hl   
3059   E5                     PUSH   hl   
305A   CD 21 11               CALL   run   
305D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3069   CD 24 10               CALL   printStr   
306C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3079   E1                     POP   hl   
307A   E5                     PUSH   hl   
307B   E5                     PUSH   hl   
307C   CD 21 11               CALL   run   
307F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3090   76                     HALT      
3091                EXPECTM_3147S107:      
3091   E1                     POP   HL   
3092                          ;*Macro unroll:  test "3 3 >", FALSE
3092   31 00 5C               LD   SP,STACK   
3095   CD 58 10               CALL   coldInit   
3098   CD DA 5A               CALL   execStr   
309B   33 20 33 20 3E 00      DB   "3 3 >",0   
30A1   E1                     POP   HL   
30A2   E5                     PUSH   HL   
30A3   11 00 00               LD   DE,FALSE   
30A6   B7                     OR   A   
30A7   ED 52                  SBC   HL,DE   
30A9   7D                     LD   A,L   
30AA   B4                     OR   H   
30AB   CA 0B 31               JP   Z,expectM_3148S108   
30AE   CD 24 10               CALL   printStr   
30B1   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
30BD   CD 24 10               CALL   printStr   
30C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30CF   21 00 00               LD   hl,FALSE   
30D2   E5                     PUSH   hl   
30D3   E5                     PUSH   hl   
30D4   CD 21 11               CALL   run   
30D7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
30E3   CD 24 10               CALL   printStr   
30E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F3   E1                     POP   hl   
30F4   E5                     PUSH   hl   
30F5   E5                     PUSH   hl   
30F6   CD 21 11               CALL   run   
30F9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
310A   76                     HALT      
310B                EXPECTM_3148S108:      
310B   E1                     POP   HL   
310C                          ;*Macro unroll:  test "4 3 >", TRUE
310C   31 00 5C               LD   SP,STACK   
310F   CD 58 10               CALL   coldInit   
3112   CD DA 5A               CALL   execStr   
3115   34 20 33 20 3E 00      DB   "4 3 >",0   
311B   E1                     POP   HL   
311C   E5                     PUSH   HL   
311D   11 FF FF               LD   DE,TRUE   
3120   B7                     OR   A   
3121   ED 52                  SBC   HL,DE   
3123   7D                     LD   A,L   
3124   B4                     OR   H   
3125   CA 85 31               JP   Z,expectM_3149S109   
3128   CD 24 10               CALL   printStr   
312B   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
3137   CD 24 10               CALL   printStr   
313A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3149   21 FF FF               LD   hl,TRUE   
314C   E5                     PUSH   hl   
314D   E5                     PUSH   hl   
314E   CD 21 11               CALL   run   
3151   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
315D   CD 24 10               CALL   printStr   
3160   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
316D   E1                     POP   hl   
316E   E5                     PUSH   hl   
316F   E5                     PUSH   hl   
3170   CD 21 11               CALL   run   
3173   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3184   76                     HALT      
3185                EXPECTM_3149S109:      
3185   E1                     POP   HL   
3186                          ;*Macro unroll:  test "2 2 <=", TRUE
3186   31 00 5C               LD   SP,STACK   
3189   CD 58 10               CALL   coldInit   
318C   CD DA 5A               CALL   execStr   
318F   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
3196   E1                     POP   HL   
3197   E5                     PUSH   HL   
3198   11 FF FF               LD   DE,TRUE   
319B   B7                     OR   A   
319C   ED 52                  SBC   HL,DE   
319E   7D                     LD   A,L   
319F   B4                     OR   H   
31A0   CA 01 32               JP   Z,expectM_3150S110   
31A3   CD 24 10               CALL   printStr   
31A6   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
31B3   CD 24 10               CALL   printStr   
31B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31C5   21 FF FF               LD   hl,TRUE   
31C8   E5                     PUSH   hl   
31C9   E5                     PUSH   hl   
31CA   CD 21 11               CALL   run   
31CD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
31D9   CD 24 10               CALL   printStr   
31DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31E9   E1                     POP   hl   
31EA   E5                     PUSH   hl   
31EB   E5                     PUSH   hl   
31EC   CD 21 11               CALL   run   
31EF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3200   76                     HALT      
3201                EXPECTM_3150S110:      
3201   E1                     POP   HL   
3202                          ;*Macro unroll:  test "2 2 >=", TRUE
3202   31 00 5C               LD   SP,STACK   
3205   CD 58 10               CALL   coldInit   
3208   CD DA 5A               CALL   execStr   
320B   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
3212   E1                     POP   HL   
3213   E5                     PUSH   HL   
3214   11 FF FF               LD   DE,TRUE   
3217   B7                     OR   A   
3218   ED 52                  SBC   HL,DE   
321A   7D                     LD   A,L   
321B   B4                     OR   H   
321C   CA 7D 32               JP   Z,expectM_3151S111   
321F   CD 24 10               CALL   printStr   
3222   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
322F   CD 24 10               CALL   printStr   
3232   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3241   21 FF FF               LD   hl,TRUE   
3244   E5                     PUSH   hl   
3245   E5                     PUSH   hl   
3246   CD 21 11               CALL   run   
3249   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3255   CD 24 10               CALL   printStr   
3258   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3265   E1                     POP   hl   
3266   E5                     PUSH   hl   
3267   E5                     PUSH   hl   
3268   CD 21 11               CALL   run   
326B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
327C   76                     HALT      
327D                EXPECTM_3151S111:      
327D   E1                     POP   HL   
327E                          ;*Macro unroll:  test "3 1 <<", 6
327E   31 00 5C               LD   SP,STACK   
3281   CD 58 10               CALL   coldInit   
3284   CD DA 5A               CALL   execStr   
3287   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
328E   E1                     POP   HL   
328F   E5                     PUSH   HL   
3290   11 06 00               LD   DE,6   
3293   B7                     OR   A   
3294   ED 52                  SBC   HL,DE   
3296   7D                     LD   A,L   
3297   B4                     OR   H   
3298   CA F9 32               JP   Z,expectM_3152S112   
329B   CD 24 10               CALL   printStr   
329E   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
32AB   CD 24 10               CALL   printStr   
32AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32BD   21 06 00               LD   hl,6   
32C0   E5                     PUSH   hl   
32C1   E5                     PUSH   hl   
32C2   CD 21 11               CALL   run   
32C5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
32D1   CD 24 10               CALL   printStr   
32D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32E1   E1                     POP   hl   
32E2   E5                     PUSH   hl   
32E3   E5                     PUSH   hl   
32E4   CD 21 11               CALL   run   
32E7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
32F8   76                     HALT      
32F9                EXPECTM_3152S112:      
32F9   E1                     POP   HL   
32FA                          ;*Macro unroll:  test "10 1 >>", 5
32FA   31 00 5C               LD   SP,STACK   
32FD   CD 58 10               CALL   coldInit   
3300   CD DA 5A               CALL   execStr   
3303   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
330B   E1                     POP   HL   
330C   E5                     PUSH   HL   
330D   11 05 00               LD   DE,5   
3310   B7                     OR   A   
3311   ED 52                  SBC   HL,DE   
3313   7D                     LD   A,L   
3314   B4                     OR   H   
3315   CA 77 33               JP   Z,expectM_3153S113   
3318   CD 24 10               CALL   printStr   
331B   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
3329   CD 24 10               CALL   printStr   
332C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
333B   21 05 00               LD   hl,5   
333E   E5                     PUSH   hl   
333F   E5                     PUSH   hl   
3340   CD 21 11               CALL   run   
3343   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
334F   CD 24 10               CALL   printStr   
3352   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
335F   E1                     POP   hl   
3360   E5                     PUSH   hl   
3361   E5                     PUSH   hl   
3362   CD 21 11               CALL   run   
3365   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3376   76                     HALT      
3377                EXPECTM_3153S113:      
3377   E1                     POP   HL   
3378                          ;*Macro unroll:  test "1 x = x", 1
3378   31 00 5C               LD   SP,STACK   
337B   CD 58 10               CALL   coldInit   
337E   CD DA 5A               CALL   execStr   
3381   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
3389   E1                     POP   HL   
338A   E5                     PUSH   HL   
338B   11 01 00               LD   DE,1   
338E   B7                     OR   A   
338F   ED 52                  SBC   HL,DE   
3391   7D                     LD   A,L   
3392   B4                     OR   H   
3393   CA F5 33               JP   Z,expectM_3154S114   
3396   CD 24 10               CALL   printStr   
3399   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
33A7   CD 24 10               CALL   printStr   
33AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33B9   21 01 00               LD   hl,1   
33BC   E5                     PUSH   hl   
33BD   E5                     PUSH   hl   
33BE   CD 21 11               CALL   run   
33C1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
33CD   CD 24 10               CALL   printStr   
33D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33DD   E1                     POP   hl   
33DE   E5                     PUSH   hl   
33DF   E5                     PUSH   hl   
33E0   CD 21 11               CALL   run   
33E3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
33F4   76                     HALT      
33F5                EXPECTM_3154S114:      
33F5   E1                     POP   HL   
33F6                          ;*Macro unroll:  test "1{}^", 1
33F6   31 00 5C               LD   SP,STACK   
33F9   CD 58 10               CALL   coldInit   
33FC   CD DA 5A               CALL   execStr   
33FF   31 7B 7D 5E 00         DB   "1{}^",0   
3404   E1                     POP   HL   
3405   E5                     PUSH   HL   
3406   11 01 00               LD   DE,1   
3409   B7                     OR   A   
340A   ED 52                  SBC   HL,DE   
340C   7D                     LD   A,L   
340D   B4                     OR   H   
340E   CA 6D 34               JP   Z,expectM_3155S115   
3411   CD 24 10               CALL   printStr   
3414   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
341F   CD 24 10               CALL   printStr   
3422   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3431   21 01 00               LD   hl,1   
3434   E5                     PUSH   hl   
3435   E5                     PUSH   hl   
3436   CD 21 11               CALL   run   
3439   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3445   CD 24 10               CALL   printStr   
3448   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3455   E1                     POP   hl   
3456   E5                     PUSH   hl   
3457   E5                     PUSH   hl   
3458   CD 21 11               CALL   run   
345B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
346C   76                     HALT      
346D                EXPECTM_3155S115:      
346D   E1                     POP   HL   
346E                          ;*Macro unroll:  test "{1}^", 1
346E   31 00 5C               LD   SP,STACK   
3471   CD 58 10               CALL   coldInit   
3474   CD DA 5A               CALL   execStr   
3477   7B 31 7D 5E 00         DB   "{1}^",0   
347C   E1                     POP   HL   
347D   E5                     PUSH   HL   
347E   11 01 00               LD   DE,1   
3481   B7                     OR   A   
3482   ED 52                  SBC   HL,DE   
3484   7D                     LD   A,L   
3485   B4                     OR   H   
3486   CA E5 34               JP   Z,expectM_3156S116   
3489   CD 24 10               CALL   printStr   
348C   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
3497   CD 24 10               CALL   printStr   
349A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34A9   21 01 00               LD   hl,1   
34AC   E5                     PUSH   hl   
34AD   E5                     PUSH   hl   
34AE   CD 21 11               CALL   run   
34B1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
34BD   CD 24 10               CALL   printStr   
34C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34CD   E1                     POP   hl   
34CE   E5                     PUSH   hl   
34CF   E5                     PUSH   hl   
34D0   CD 21 11               CALL   run   
34D3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
34E4   76                     HALT      
34E5                EXPECTM_3156S116:      
34E5   E1                     POP   HL   
34E6                          ;*Macro unroll:  test "{{1}^}^", 1
34E6   31 00 5C               LD   SP,STACK   
34E9   CD 58 10               CALL   coldInit   
34EC   CD DA 5A               CALL   execStr   
34EF   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
34F7   E1                     POP   HL   
34F8   E5                     PUSH   HL   
34F9   11 01 00               LD   DE,1   
34FC   B7                     OR   A   
34FD   ED 52                  SBC   HL,DE   
34FF   7D                     LD   A,L   
3500   B4                     OR   H   
3501   CA 63 35               JP   Z,expectM_3157S117   
3504   CD 24 10               CALL   printStr   
3507   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
3515   CD 24 10               CALL   printStr   
3518   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3527   21 01 00               LD   hl,1   
352A   E5                     PUSH   hl   
352B   E5                     PUSH   hl   
352C   CD 21 11               CALL   run   
352F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
353B   CD 24 10               CALL   printStr   
353E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
354B   E1                     POP   hl   
354C   E5                     PUSH   hl   
354D   E5                     PUSH   hl   
354E   CD 21 11               CALL   run   
3551   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3562   76                     HALT      
3563                EXPECTM_3157S117:      
3563   E1                     POP   HL   
3564                          ;*Macro unroll:  test "{{{1}^}^}^", 1
3564   31 00 5C               LD   SP,STACK   
3567   CD 58 10               CALL   coldInit   
356A   CD DA 5A               CALL   execStr   
356D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
3578   E1                     POP   HL   
3579   E5                     PUSH   HL   
357A   11 01 00               LD   DE,1   
357D   B7                     OR   A   
357E   ED 52                  SBC   HL,DE   
3580   7D                     LD   A,L   
3581   B4                     OR   H   
3582   CA E7 35               JP   Z,expectM_3158S118   
3585   CD 24 10               CALL   printStr   
3588   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
3599   CD 24 10               CALL   printStr   
359C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35AB   21 01 00               LD   hl,1   
35AE   E5                     PUSH   hl   
35AF   E5                     PUSH   hl   
35B0   CD 21 11               CALL   run   
35B3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
35BF   CD 24 10               CALL   printStr   
35C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35CF   E1                     POP   hl   
35D0   E5                     PUSH   hl   
35D1   E5                     PUSH   hl   
35D2   CD 21 11               CALL   run   
35D5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
35E6   76                     HALT      
35E7                EXPECTM_3158S118:      
35E7   E1                     POP   HL   
35E8                          ;*Macro unroll:  test "1 /fal{10}{20} ? +", 21
35E8   31 00 5C               LD   SP,STACK   
35EB   CD 58 10               CALL   coldInit   
35EE   CD DA 5A               CALL   execStr   
35F1   31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /fal{10}{20} ? +",0   
3604   E1                     POP   HL   
3605   E5                     PUSH   HL   
3606   11 15 00               LD   DE,21   
3609   B7                     OR   A   
360A   ED 52                  SBC   HL,DE   
360C   7D                     LD   A,L   
360D   B4                     OR   H   
360E   CA 7B 36               JP   Z,expectM_3159S119   
3611   CD 24 10               CALL   printStr   
3614   43 6F 64 65 3A 20 31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /fal{10}{20} ? +"   
362D   CD 24 10               CALL   printStr   
3630   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
363F   21 15 00               LD   hl,21   
3642   E5                     PUSH   hl   
3643   E5                     PUSH   hl   
3644   CD 21 11               CALL   run   
3647   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3653   CD 24 10               CALL   printStr   
3656   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3663   E1                     POP   hl   
3664   E5                     PUSH   hl   
3665   E5                     PUSH   hl   
3666   CD 21 11               CALL   run   
3669   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
367A   76                     HALT      
367B                EXPECTM_3159S119:      
367B   E1                     POP   HL   
367C                          ;*Macro unroll:  test "1 /tru{10}{20} ? +", 11
367C   31 00 5C               LD   SP,STACK   
367F   CD 58 10               CALL   coldInit   
3682   CD DA 5A               CALL   execStr   
3685   31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /tru{10}{20} ? +",0   
3698   E1                     POP   HL   
3699   E5                     PUSH   HL   
369A   11 0B 00               LD   DE,11   
369D   B7                     OR   A   
369E   ED 52                  SBC   HL,DE   
36A0   7D                     LD   A,L   
36A1   B4                     OR   H   
36A2   CA 0F 37               JP   Z,expectM_3160S120   
36A5   CD 24 10               CALL   printStr   
36A8   43 6F 64 65 3A 20 31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /tru{10}{20} ? +"   
36C1   CD 24 10               CALL   printStr   
36C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36D3   21 0B 00               LD   hl,11   
36D6   E5                     PUSH   hl   
36D7   E5                     PUSH   hl   
36D8   CD 21 11               CALL   run   
36DB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
36E7   CD 24 10               CALL   printStr   
36EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36F7   E1                     POP   hl   
36F8   E5                     PUSH   hl   
36F9   E5                     PUSH   hl   
36FA   CD 21 11               CALL   run   
36FD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
370E   76                     HALT      
370F                EXPECTM_3160S120:      
370F   E1                     POP   HL   
3710                          ;*Macro unroll:  test "\\{2}^", 2
3710   31 00 5C               LD   SP,STACK   
3713   CD 58 10               CALL   coldInit   
3716   CD DA 5A               CALL   execStr   
3719   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
371F   E1                     POP   HL   
3720   E5                     PUSH   HL   
3721   11 02 00               LD   DE,2   
3724   B7                     OR   A   
3725   ED 52                  SBC   HL,DE   
3727   7D                     LD   A,L   
3728   B4                     OR   H   
3729   CA 89 37               JP   Z,expectM_3161S121   
372C   CD 24 10               CALL   printStr   
372F   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
373B   CD 24 10               CALL   printStr   
373E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
374D   21 02 00               LD   hl,2   
3750   E5                     PUSH   hl   
3751   E5                     PUSH   hl   
3752   CD 21 11               CALL   run   
3755   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3761   CD 24 10               CALL   printStr   
3764   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3771   E1                     POP   hl   
3772   E5                     PUSH   hl   
3773   E5                     PUSH   hl   
3774   CD 21 11               CALL   run   
3777   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3788   76                     HALT      
3789                EXPECTM_3161S121:      
3789   E1                     POP   HL   
378A                          ;*Macro unroll:  test "\\a{2}^", 2
378A   31 00 5C               LD   SP,STACK   
378D   CD 58 10               CALL   coldInit   
3790   CD DA 5A               CALL   execStr   
3793   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
379A   E1                     POP   HL   
379B   E5                     PUSH   HL   
379C   11 02 00               LD   DE,2   
379F   B7                     OR   A   
37A0   ED 52                  SBC   HL,DE   
37A2   7D                     LD   A,L   
37A3   B4                     OR   H   
37A4   CA 05 38               JP   Z,expectM_3162S122   
37A7   CD 24 10               CALL   printStr   
37AA   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
37B7   CD 24 10               CALL   printStr   
37BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37C9   21 02 00               LD   hl,2   
37CC   E5                     PUSH   hl   
37CD   E5                     PUSH   hl   
37CE   CD 21 11               CALL   run   
37D1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
37DD   CD 24 10               CALL   printStr   
37E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37ED   E1                     POP   hl   
37EE   E5                     PUSH   hl   
37EF   E5                     PUSH   hl   
37F0   CD 21 11               CALL   run   
37F3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3804   76                     HALT      
3805                EXPECTM_3162S122:      
3805   E1                     POP   HL   
3806                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3806   31 00 5C               LD   SP,STACK   
3809   CD 58 10               CALL   coldInit   
380C   CD DA 5A               CALL   execStr   
380F   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3819   E1                     POP   HL   
381A   E5                     PUSH   HL   
381B   11 05 00               LD   DE,5   
381E   B7                     OR   A   
381F   ED 52                  SBC   HL,DE   
3821   7D                     LD   A,L   
3822   B4                     OR   H   
3823   CA 87 38               JP   Z,expectM_3163S123   
3826   CD 24 10               CALL   printStr   
3829   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
3839   CD 24 10               CALL   printStr   
383C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
384B   21 05 00               LD   hl,5   
384E   E5                     PUSH   hl   
384F   E5                     PUSH   hl   
3850   CD 21 11               CALL   run   
3853   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
385F   CD 24 10               CALL   printStr   
3862   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
386F   E1                     POP   hl   
3870   E5                     PUSH   hl   
3871   E5                     PUSH   hl   
3872   CD 21 11               CALL   run   
3875   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3886   76                     HALT      
3887                EXPECTM_3163S123:      
3887   E1                     POP   HL   
3888                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3888   31 00 5C               LD   SP,STACK   
388B   CD 58 10               CALL   coldInit   
388E   CD DA 5A               CALL   execStr   
3891   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
389D   E1                     POP   HL   
389E   E5                     PUSH   HL   
389F   11 05 00               LD   DE,5   
38A2   B7                     OR   A   
38A3   ED 52                  SBC   HL,DE   
38A5   7D                     LD   A,L   
38A6   B4                     OR   H   
38A7   CA 0D 39               JP   Z,expectM_3164S124   
38AA   CD 24 10               CALL   printStr   
38AD   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
38BF   CD 24 10               CALL   printStr   
38C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D1   21 05 00               LD   hl,5   
38D4   E5                     PUSH   hl   
38D5   E5                     PUSH   hl   
38D6   CD 21 11               CALL   run   
38D9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
38E5   CD 24 10               CALL   printStr   
38E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F5   E1                     POP   hl   
38F6   E5                     PUSH   hl   
38F7   E5                     PUSH   hl   
38F8   CD 21 11               CALL   run   
38FB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
390C   76                     HALT      
390D                EXPECTM_3164S124:      
390D   E1                     POP   HL   
390E                          ;*Macro unroll:  test "\\a{{2}^}^", 2
390E   31 00 5C               LD   SP,STACK   
3911   CD 58 10               CALL   coldInit   
3914   CD DA 5A               CALL   execStr   
3917   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3921   E1                     POP   HL   
3922   E5                     PUSH   HL   
3923   11 02 00               LD   DE,2   
3926   B7                     OR   A   
3927   ED 52                  SBC   HL,DE   
3929   7D                     LD   A,L   
392A   B4                     OR   H   
392B   CA 8F 39               JP   Z,expectM_3165S125   
392E   CD 24 10               CALL   printStr   
3931   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3941   CD 24 10               CALL   printStr   
3944   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3953   21 02 00               LD   hl,2   
3956   E5                     PUSH   hl   
3957   E5                     PUSH   hl   
3958   CD 21 11               CALL   run   
395B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3967   CD 24 10               CALL   printStr   
396A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3977   E1                     POP   hl   
3978   E5                     PUSH   hl   
3979   E5                     PUSH   hl   
397A   CD 21 11               CALL   run   
397D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
398E   76                     HALT      
398F                EXPECTM_3165S125:      
398F   E1                     POP   HL   
3990                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3990   31 00 5C               LD   SP,STACK   
3993   CD 58 10               CALL   coldInit   
3996   CD DA 5A               CALL   execStr   
3999   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
39A8   E1                     POP   HL   
39A9   E5                     PUSH   HL   
39AA   11 05 00               LD   DE,5   
39AD   B7                     OR   A   
39AE   ED 52                  SBC   HL,DE   
39B0   7D                     LD   A,L   
39B1   B4                     OR   H   
39B2   CA 1B 3A               JP   Z,expectM_3166S126   
39B5   CD 24 10               CALL   printStr   
39B8   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
39CD   CD 24 10               CALL   printStr   
39D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39DF   21 05 00               LD   hl,5   
39E2   E5                     PUSH   hl   
39E3   E5                     PUSH   hl   
39E4   CD 21 11               CALL   run   
39E7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
39F3   CD 24 10               CALL   printStr   
39F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A03   E1                     POP   hl   
3A04   E5                     PUSH   hl   
3A05   E5                     PUSH   hl   
3A06   CD 21 11               CALL   run   
3A09   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3A1A   76                     HALT      
3A1B                EXPECTM_3166S126:      
3A1B   E1                     POP   HL   
3A1C                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3A1C   31 00 5C               LD   SP,STACK   
3A1F   CD 58 10               CALL   coldInit   
3A22   CD DA 5A               CALL   execStr   
3A25   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3A35   E1                     POP   HL   
3A36   E5                     PUSH   HL   
3A37   11 01 00               LD   DE,1   
3A3A   B7                     OR   A   
3A3B   ED 52                  SBC   HL,DE   
3A3D   7D                     LD   A,L   
3A3E   B4                     OR   H   
3A3F   CA A9 3A               JP   Z,expectM_3167S127   
3A42   CD 24 10               CALL   printStr   
3A45   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3A5B   CD 24 10               CALL   printStr   
3A5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A6D   21 01 00               LD   hl,1   
3A70   E5                     PUSH   hl   
3A71   E5                     PUSH   hl   
3A72   CD 21 11               CALL   run   
3A75   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3A81   CD 24 10               CALL   printStr   
3A84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A91   E1                     POP   hl   
3A92   E5                     PUSH   hl   
3A93   E5                     PUSH   hl   
3A94   CD 21 11               CALL   run   
3A97   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3AA8   76                     HALT      
3AA9                EXPECTM_3167S127:      
3AA9   E1                     POP   HL   
3AAA                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3AAA   31 00 5C               LD   SP,STACK   
3AAD   CD 58 10               CALL   coldInit   
3AB0   CD DA 5A               CALL   execStr   
3AB3   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3AC6   E1                     POP   HL   
3AC7   E5                     PUSH   HL   
3AC8   11 07 00               LD   DE,7   
3ACB   B7                     OR   A   
3ACC   ED 52                  SBC   HL,DE   
3ACE   7D                     LD   A,L   
3ACF   B4                     OR   H   
3AD0   CA 3D 3B               JP   Z,expectM_3168S128   
3AD3   CD 24 10               CALL   printStr   
3AD6   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3AEF   CD 24 10               CALL   printStr   
3AF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B01   21 07 00               LD   hl,7   
3B04   E5                     PUSH   hl   
3B05   E5                     PUSH   hl   
3B06   CD 21 11               CALL   run   
3B09   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3B15   CD 24 10               CALL   printStr   
3B18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B25   E1                     POP   hl   
3B26   E5                     PUSH   hl   
3B27   E5                     PUSH   hl   
3B28   CD 21 11               CALL   run   
3B2B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3B3C   76                     HALT      
3B3D                EXPECTM_3168S128:      
3B3D   E1                     POP   HL   
3B3E                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3B3E   31 00 5C               LD   SP,STACK   
3B41   CD 58 10               CALL   coldInit   
3B44   CD DA 5A               CALL   execStr   
3B47   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3B5C   E1                     POP   HL   
3B5D   E5                     PUSH   HL   
3B5E   11 06 00               LD   DE,6   
3B61   B7                     OR   A   
3B62   ED 52                  SBC   HL,DE   
3B64   7D                     LD   A,L   
3B65   B4                     OR   H   
3B66   CA D5 3B               JP   Z,expectM_3169S129   
3B69   CD 24 10               CALL   printStr   
3B6C   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3B87   CD 24 10               CALL   printStr   
3B8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B99   21 06 00               LD   hl,6   
3B9C   E5                     PUSH   hl   
3B9D   E5                     PUSH   hl   
3B9E   CD 21 11               CALL   run   
3BA1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3BAD   CD 24 10               CALL   printStr   
3BB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BBD   E1                     POP   hl   
3BBE   E5                     PUSH   hl   
3BBF   E5                     PUSH   hl   
3BC0   CD 21 11               CALL   run   
3BC3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3BD4   76                     HALT      
3BD5                EXPECTM_3169S129:      
3BD5   E1                     POP   HL   
3BD6                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3BD6   31 00 5C               LD   SP,STACK   
3BD9   CD 58 10               CALL   coldInit   
3BDC   CD DA 5A               CALL   execStr   
3BDF   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3BED   E1                     POP   HL   
3BEE   E5                     PUSH   HL   
3BEF   11 02 00               LD   DE,2   
3BF2   B7                     OR   A   
3BF3   ED 52                  SBC   HL,DE   
3BF5   7D                     LD   A,L   
3BF6   B4                     OR   H   
3BF7   CA 5F 3C               JP   Z,expectM_3170S130   
3BFA   CD 24 10               CALL   printStr   
3BFD   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3C11   CD 24 10               CALL   printStr   
3C14   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C23   21 02 00               LD   hl,2   
3C26   E5                     PUSH   hl   
3C27   E5                     PUSH   hl   
3C28   CD 21 11               CALL   run   
3C2B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3C37   CD 24 10               CALL   printStr   
3C3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C47   E1                     POP   hl   
3C48   E5                     PUSH   hl   
3C49   E5                     PUSH   hl   
3C4A   CD 21 11               CALL   run   
3C4D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3C5E   76                     HALT      
3C5F                EXPECTM_3170S130:      
3C5F   E1                     POP   HL   
3C60                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3C60   31 00 5C               LD   SP,STACK   
3C63   CD 58 10               CALL   coldInit   
3C66   CD DA 5A               CALL   execStr   
3C69   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3C7A   E1                     POP   HL   
3C7B   E5                     PUSH   HL   
3C7C   11 01 00               LD   DE,1   
3C7F   B7                     OR   A   
3C80   ED 52                  SBC   HL,DE   
3C82   7D                     LD   A,L   
3C83   B4                     OR   H   
3C84   CA EF 3C               JP   Z,expectM_3171S131   
3C87   CD 24 10               CALL   printStr   
3C8A   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3CA1   CD 24 10               CALL   printStr   
3CA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CB3   21 01 00               LD   hl,1   
3CB6   E5                     PUSH   hl   
3CB7   E5                     PUSH   hl   
3CB8   CD 21 11               CALL   run   
3CBB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3CC7   CD 24 10               CALL   printStr   
3CCA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CD7   E1                     POP   hl   
3CD8   E5                     PUSH   hl   
3CD9   E5                     PUSH   hl   
3CDA   CD 21 11               CALL   run   
3CDD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3CEE   76                     HALT      
3CEF                EXPECTM_3171S131:      
3CEF   E1                     POP   HL   
3CF0                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3CF0   31 00 5C               LD   SP,STACK   
3CF3   CD 58 10               CALL   coldInit   
3CF6   CD DA 5A               CALL   execStr   
3CF9   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3D0B   E1                     POP   HL   
3D0C   E5                     PUSH   HL   
3D0D   11 02 00               LD   DE,2   
3D10   B7                     OR   A   
3D11   ED 52                  SBC   HL,DE   
3D13   7D                     LD   A,L   
3D14   B4                     OR   H   
3D15   CA 81 3D               JP   Z,expectM_3172S132   
3D18   CD 24 10               CALL   printStr   
3D1B   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3D33   CD 24 10               CALL   printStr   
3D36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D45   21 02 00               LD   hl,2   
3D48   E5                     PUSH   hl   
3D49   E5                     PUSH   hl   
3D4A   CD 21 11               CALL   run   
3D4D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3D59   CD 24 10               CALL   printStr   
3D5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D69   E1                     POP   hl   
3D6A   E5                     PUSH   hl   
3D6B   E5                     PUSH   hl   
3D6C   CD 21 11               CALL   run   
3D6F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3D80   76                     HALT      
3D81                EXPECTM_3172S132:      
3D81   E1                     POP   HL   
3D82                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3D82   31 00 5C               LD   SP,STACK   
3D85   CD 58 10               CALL   coldInit   
3D88   CD DA 5A               CALL   execStr   
3D8B   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3D9E   E1                     POP   HL   
3D9F   E5                     PUSH   HL   
3DA0   11 02 00               LD   DE,2   
3DA3   B7                     OR   A   
3DA4   ED 52                  SBC   HL,DE   
3DA6   7D                     LD   A,L   
3DA7   B4                     OR   H   
3DA8   CA 15 3E               JP   Z,expectM_3173S133   
3DAB   CD 24 10               CALL   printStr   
3DAE   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3DC7   CD 24 10               CALL   printStr   
3DCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DD9   21 02 00               LD   hl,2   
3DDC   E5                     PUSH   hl   
3DDD   E5                     PUSH   hl   
3DDE   CD 21 11               CALL   run   
3DE1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3DED   CD 24 10               CALL   printStr   
3DF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DFD   E1                     POP   hl   
3DFE   E5                     PUSH   hl   
3DFF   E5                     PUSH   hl   
3E00   CD 21 11               CALL   run   
3E03   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3E14   76                     HALT      
3E15                EXPECTM_3173S133:      
3E15   E1                     POP   HL   
3E16                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3E16   31 00 5C               LD   SP,STACK   
3E19   CD 58 10               CALL   coldInit   
3E1C   CD DA 5A               CALL   execStr   
3E1F   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3E31   E1                     POP   HL   
3E32   E5                     PUSH   HL   
3E33   11 02 00               LD   DE,2   
3E36   B7                     OR   A   
3E37   ED 52                  SBC   HL,DE   
3E39   7D                     LD   A,L   
3E3A   B4                     OR   H   
3E3B   CA A7 3E               JP   Z,expectM_3174S134   
3E3E   CD 24 10               CALL   printStr   
3E41   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3E59   CD 24 10               CALL   printStr   
3E5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E6B   21 02 00               LD   hl,2   
3E6E   E5                     PUSH   hl   
3E6F   E5                     PUSH   hl   
3E70   CD 21 11               CALL   run   
3E73   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3E7F   CD 24 10               CALL   printStr   
3E82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E8F   E1                     POP   hl   
3E90   E5                     PUSH   hl   
3E91   E5                     PUSH   hl   
3E92   CD 21 11               CALL   run   
3E95   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3EA6   76                     HALT      
3EA7                EXPECTM_3174S134:      
3EA7   E1                     POP   HL   
3EA8                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3EA8   31 00 5C               LD   SP,STACK   
3EAB   CD 58 10               CALL   coldInit   
3EAE   CD DA 5A               CALL   execStr   
3EB1   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3ECA   E1                     POP   HL   
3ECB   E5                     PUSH   HL   
3ECC   11 05 00               LD   DE,5   
3ECF   B7                     OR   A   
3ED0   ED 52                  SBC   HL,DE   
3ED2   7D                     LD   A,L   
3ED3   B4                     OR   H   
3ED4   CA 47 3F               JP   Z,expectM_3175S135   
3ED7   CD 24 10               CALL   printStr   
3EDA   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3EF9   CD 24 10               CALL   printStr   
3EFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F0B   21 05 00               LD   hl,5   
3F0E   E5                     PUSH   hl   
3F0F   E5                     PUSH   hl   
3F10   CD 21 11               CALL   run   
3F13   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3F1F   CD 24 10               CALL   printStr   
3F22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F2F   E1                     POP   hl   
3F30   E5                     PUSH   hl   
3F31   E5                     PUSH   hl   
3F32   CD 21 11               CALL   run   
3F35   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3F46   76                     HALT      
3F47                EXPECTM_3175S135:      
3F47   E1                     POP   HL   
3F48                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3F48   31 00 5C               LD   SP,STACK   
3F4B   CD 58 10               CALL   coldInit   
3F4E   CD DA 5A               CALL   execStr   
3F51   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3F61   E1                     POP   HL   
3F62   E5                     PUSH   HL   
3F63   11 02 00               LD   DE,2   
3F66   B7                     OR   A   
3F67   ED 52                  SBC   HL,DE   
3F69   7D                     LD   A,L   
3F6A   B4                     OR   H   
3F6B   CA D5 3F               JP   Z,expectM_3176S136   
3F6E   CD 24 10               CALL   printStr   
3F71   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3F87   CD 24 10               CALL   printStr   
3F8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F99   21 02 00               LD   hl,2   
3F9C   E5                     PUSH   hl   
3F9D   E5                     PUSH   hl   
3F9E   CD 21 11               CALL   run   
3FA1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3FAD   CD 24 10               CALL   printStr   
3FB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FBD   E1                     POP   hl   
3FBE   E5                     PUSH   hl   
3FBF   E5                     PUSH   hl   
3FC0   CD 21 11               CALL   run   
3FC3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3FD4   76                     HALT      
3FD5                EXPECTM_3176S136:      
3FD5   E1                     POP   HL   
3FD6                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3FD6   31 00 5C               LD   SP,STACK   
3FD9   CD 58 10               CALL   coldInit   
3FDC   CD DA 5A               CALL   execStr   
3FDF   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3FF6   E1                     POP   HL   
3FF7   E5                     PUSH   HL   
3FF8   11 64 00               LD   DE,100   
3FFB   B7                     OR   A   
3FFC   ED 52                  SBC   HL,DE   
3FFE   7D                     LD   A,L   
3FFF   B4                     OR   H   
4000   CA 71 40               JP   Z,expectM_3177S137   
4003   CD 24 10               CALL   printStr   
4006   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
4023   CD 24 10               CALL   printStr   
4026   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4035   21 64 00               LD   hl,100   
4038   E5                     PUSH   hl   
4039   E5                     PUSH   hl   
403A   CD 21 11               CALL   run   
403D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4049   CD 24 10               CALL   printStr   
404C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4059   E1                     POP   hl   
405A   E5                     PUSH   hl   
405B   E5                     PUSH   hl   
405C   CD 21 11               CALL   run   
405F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4070   76                     HALT      
4071                EXPECTM_3177S137:      
4071   E1                     POP   HL   
4072                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
4072   31 00 5C               LD   SP,STACK   
4075   CD 58 10               CALL   coldInit   
4078   CD DA 5A               CALL   execStr   
407B   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
4093   E1                     POP   HL   
4094   E5                     PUSH   HL   
4095   11 01 00               LD   DE,1   
4098   B7                     OR   A   
4099   ED 52                  SBC   HL,DE   
409B   7D                     LD   A,L   
409C   B4                     OR   H   
409D   CA 0F 41               JP   Z,expectM_3178S138   
40A0   CD 24 10               CALL   printStr   
40A3   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
40C1   CD 24 10               CALL   printStr   
40C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D3   21 01 00               LD   hl,1   
40D6   E5                     PUSH   hl   
40D7   E5                     PUSH   hl   
40D8   CD 21 11               CALL   run   
40DB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
40E7   CD 24 10               CALL   printStr   
40EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40F7   E1                     POP   hl   
40F8   E5                     PUSH   hl   
40F9   E5                     PUSH   hl   
40FA   CD 21 11               CALL   run   
40FD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
410E   76                     HALT      
410F                EXPECTM_3178S138:      
410F   E1                     POP   HL   
4110                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
4110   31 00 5C               LD   SP,STACK   
4113   CD 58 10               CALL   coldInit   
4116   CD DA 5A               CALL   execStr   
4119   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
4132   E1                     POP   HL   
4133   E5                     PUSH   HL   
4134   11 02 00               LD   DE,2   
4137   B7                     OR   A   
4138   ED 52                  SBC   HL,DE   
413A   7D                     LD   A,L   
413B   B4                     OR   H   
413C   CA AF 41               JP   Z,expectM_3179S139   
413F   CD 24 10               CALL   printStr   
4142   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
4161   CD 24 10               CALL   printStr   
4164   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4173   21 02 00               LD   hl,2   
4176   E5                     PUSH   hl   
4177   E5                     PUSH   hl   
4178   CD 21 11               CALL   run   
417B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4187   CD 24 10               CALL   printStr   
418A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4197   E1                     POP   hl   
4198   E5                     PUSH   hl   
4199   E5                     PUSH   hl   
419A   CD 21 11               CALL   run   
419D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
41AE   76                     HALT      
41AF                EXPECTM_3179S139:      
41AF   E1                     POP   HL   
41B0                          ;*Macro unroll:  test "1 10 20 \\ab{/tru{%a}{%b} ?}^ +", 11
41B0   31 00 5C               LD   SP,STACK   
41B3   CD 58 10               CALL   coldInit   
41B6   CD DA 5A               CALL   execStr   
41B9   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/tru{%a}{%b} ?}^ +",0   
41D8   E1                     POP   HL   
41D9   E5                     PUSH   HL   
41DA   11 0B 00               LD   DE,11   
41DD   B7                     OR   A   
41DE   ED 52                  SBC   HL,DE   
41E0   7D                     LD   A,L   
41E1   B4                     OR   H   
41E2   CA 5B 42               JP   Z,expectM_3180S140   
41E5   CD 24 10               CALL   printStr   
41E8   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/tru{%a}{%b} ?}^ +"   
420D   CD 24 10               CALL   printStr   
4210   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
421F   21 0B 00               LD   hl,11   
4222   E5                     PUSH   hl   
4223   E5                     PUSH   hl   
4224   CD 21 11               CALL   run   
4227   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4233   CD 24 10               CALL   printStr   
4236   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4243   E1                     POP   hl   
4244   E5                     PUSH   hl   
4245   E5                     PUSH   hl   
4246   CD 21 11               CALL   run   
4249   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
425A   76                     HALT      
425B                EXPECTM_3180S140:      
425B   E1                     POP   HL   
425C                          ;*Macro unroll:  test "1 10 20 \\ab{/fal{%a}{%b} ?}^ +", 21
425C   31 00 5C               LD   SP,STACK   
425F   CD 58 10               CALL   coldInit   
4262   CD DA 5A               CALL   execStr   
4265   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/fal{%a}{%b} ?}^ +",0   
4284   E1                     POP   HL   
4285   E5                     PUSH   HL   
4286   11 15 00               LD   DE,21   
4289   B7                     OR   A   
428A   ED 52                  SBC   HL,DE   
428C   7D                     LD   A,L   
428D   B4                     OR   H   
428E   CA 07 43               JP   Z,expectM_3181S141   
4291   CD 24 10               CALL   printStr   
4294   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/fal{%a}{%b} ?}^ +"   
42B9   CD 24 10               CALL   printStr   
42BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42CB   21 15 00               LD   hl,21   
42CE   E5                     PUSH   hl   
42CF   E5                     PUSH   hl   
42D0   CD 21 11               CALL   run   
42D3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
42DF   CD 24 10               CALL   printStr   
42E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42EF   E1                     POP   hl   
42F0   E5                     PUSH   hl   
42F1   E5                     PUSH   hl   
42F2   CD 21 11               CALL   run   
42F5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4306   76                     HALT      
4307                EXPECTM_3181S141:      
4307   E1                     POP   HL   
4308                          ;*Macro unroll:  test "[10 20 30] 1;", 20
4308   31 00 5C               LD   SP,STACK   
430B   CD 58 10               CALL   coldInit   
430E   CD DA 5A               CALL   execStr   
4311   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
431F   E1                     POP   HL   
4320   E5                     PUSH   HL   
4321   11 14 00               LD   DE,20   
4324   B7                     OR   A   
4325   ED 52                  SBC   HL,DE   
4327   7D                     LD   A,L   
4328   B4                     OR   H   
4329   CA 91 43               JP   Z,expectM_3182S142   
432C   CD 24 10               CALL   printStr   
432F   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
4343   CD 24 10               CALL   printStr   
4346   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4355   21 14 00               LD   hl,20   
4358   E5                     PUSH   hl   
4359   E5                     PUSH   hl   
435A   CD 21 11               CALL   run   
435D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4369   CD 24 10               CALL   printStr   
436C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4379   E1                     POP   hl   
437A   E5                     PUSH   hl   
437B   E5                     PUSH   hl   
437C   CD 21 11               CALL   run   
437F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4390   76                     HALT      
4391                EXPECTM_3182S142:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "[10 20 30 40] /aln", 4
4392   31 00 5C               LD   SP,STACK   
4395   CD 58 10               CALL   coldInit   
4398   CD DA 5A               CALL   execStr   
439B   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 DB   "[10 20 30 40] /aln",0   
43AE   E1                     POP   HL   
43AF   E5                     PUSH   HL   
43B0   11 04 00               LD   DE,4   
43B3   B7                     OR   A   
43B4   ED 52                  SBC   HL,DE   
43B6   7D                     LD   A,L   
43B7   B4                     OR   H   
43B8   CA 25 44               JP   Z,expectM_3183S143   
43BB   CD 24 10               CALL   printStr   
43BE   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 .CSTR   "Code: ","[10 20 30 40] /aln"   
43D7   CD 24 10               CALL   printStr   
43DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43E9   21 04 00               LD   hl,4   
43EC   E5                     PUSH   hl   
43ED   E5                     PUSH   hl   
43EE   CD 21 11               CALL   run   
43F1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
43FD   CD 24 10               CALL   printStr   
4400   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
440D   E1                     POP   hl   
440E   E5                     PUSH   hl   
440F   E5                     PUSH   hl   
4410   CD 21 11               CALL   run   
4413   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4424   76                     HALT      
4425                EXPECTM_3183S143:      
4425   E1                     POP   HL   
4426                          ;*Macro unroll:  test "/byt [1 2 3] 1;", 2
4426   31 00 5C               LD   SP,STACK   
4429   CD 58 10               CALL   coldInit   
442C   CD DA 5A               CALL   execStr   
442F   2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/byt [1 2 3] 1;",0   
443F   E1                     POP   HL   
4440   E5                     PUSH   HL   
4441   11 02 00               LD   DE,2   
4444   B7                     OR   A   
4445   ED 52                  SBC   HL,DE   
4447   7D                     LD   A,L   
4448   B4                     OR   H   
4449   CA B3 44               JP   Z,expectM_3184S144   
444C   CD 24 10               CALL   printStr   
444F   43 6F 64 65 3A 20 2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/byt [1 2 3] 1;"   
4465   CD 24 10               CALL   printStr   
4468   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4477   21 02 00               LD   hl,2   
447A   E5                     PUSH   hl   
447B   E5                     PUSH   hl   
447C   CD 21 11               CALL   run   
447F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
448B   CD 24 10               CALL   printStr   
448E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
449B   E1                     POP   hl   
449C   E5                     PUSH   hl   
449D   E5                     PUSH   hl   
449E   CD 21 11               CALL   run   
44A1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
44B2   76                     HALT      
44B3                EXPECTM_3184S144:      
44B3   E1                     POP   HL   
44B4                          ;*Macro unroll:  test "/byt [_A _B _C] 1;", 66
44B4   31 00 5C               LD   SP,STACK   
44B7   CD 58 10               CALL   coldInit   
44BA   CD DA 5A               CALL   execStr   
44BD   2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/byt [_A _B _C] 1;",0   
44D0   E1                     POP   HL   
44D1   E5                     PUSH   HL   
44D2   11 42 00               LD   DE,66   
44D5   B7                     OR   A   
44D6   ED 52                  SBC   HL,DE   
44D8   7D                     LD   A,L   
44D9   B4                     OR   H   
44DA   CA 47 45               JP   Z,expectM_3185S145   
44DD   CD 24 10               CALL   printStr   
44E0   43 6F 64 65 3A 20 2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/byt [_A _B _C] 1;"   
44F9   CD 24 10               CALL   printStr   
44FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
450B   21 42 00               LD   hl,66   
450E   E5                     PUSH   hl   
450F   E5                     PUSH   hl   
4510   CD 21 11               CALL   run   
4513   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
451F   CD 24 10               CALL   printStr   
4522   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
452F   E1                     POP   hl   
4530   E5                     PUSH   hl   
4531   E5                     PUSH   hl   
4532   CD 21 11               CALL   run   
4535   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4546   76                     HALT      
4547                EXPECTM_3185S145:      
4547   E1                     POP   HL   
4548                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
4548   31 00 5C               LD   SP,STACK   
454B   CD 58 10               CALL   coldInit   
454E   CD DA 5A               CALL   execStr   
4551   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
4565   E1                     POP   HL   
4566   E5                     PUSH   HL   
4567   11 0A 00               LD   DE,10   
456A   B7                     OR   A   
456B   ED 52                  SBC   HL,DE   
456D   7D                     LD   A,L   
456E   B4                     OR   H   
456F   CA DD 45               JP   Z,expectM_3186S146   
4572   CD 24 10               CALL   printStr   
4575   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
458F   CD 24 10               CALL   printStr   
4592   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45A1   21 0A 00               LD   hl,10   
45A4   E5                     PUSH   hl   
45A5   E5                     PUSH   hl   
45A6   CD 21 11               CALL   run   
45A9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
45B5   CD 24 10               CALL   printStr   
45B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45C5   E1                     POP   hl   
45C6   E5                     PUSH   hl   
45C7   E5                     PUSH   hl   
45C8   CD 21 11               CALL   run   
45CB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
45DC   76                     HALT      
45DD                EXPECTM_3186S146:      
45DD   E1                     POP   HL   
45DE                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
45DE   31 00 5C               LD   SP,STACK   
45E1   CD 58 10               CALL   coldInit   
45E4   CD DA 5A               CALL   execStr   
45E7   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
4602   E1                     POP   HL   
4603   E5                     PUSH   HL   
4604   11 0A 00               LD   DE,10   
4607   B7                     OR   A   
4608   ED 52                  SBC   HL,DE   
460A   7D                     LD   A,L   
460B   B4                     OR   H   
460C   CA 81 46               JP   Z,expectM_3187S147   
460F   CD 24 10               CALL   printStr   
4612   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
4633   CD 24 10               CALL   printStr   
4636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4645   21 0A 00               LD   hl,10   
4648   E5                     PUSH   hl   
4649   E5                     PUSH   hl   
464A   CD 21 11               CALL   run   
464D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4659   CD 24 10               CALL   printStr   
465C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4669   E1                     POP   hl   
466A   E5                     PUSH   hl   
466B   E5                     PUSH   hl   
466C   CD 21 11               CALL   run   
466F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4680   76                     HALT      
4681                EXPECTM_3187S147:      
4681   E1                     POP   HL   
4682                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
4682   31 00 5C               LD   SP,STACK   
4685   CD 58 10               CALL   coldInit   
4688   CD DA 5A               CALL   execStr   
468B   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
46AA   E1                     POP   HL   
46AB   E5                     PUSH   HL   
46AC   11 0A 00               LD   DE,10   
46AF   B7                     OR   A   
46B0   ED 52                  SBC   HL,DE   
46B2   7D                     LD   A,L   
46B3   B4                     OR   H   
46B4   CA 2D 47               JP   Z,expectM_3188S148   
46B7   CD 24 10               CALL   printStr   
46BA   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
46DF   CD 24 10               CALL   printStr   
46E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46F1   21 0A 00               LD   hl,10   
46F4   E5                     PUSH   hl   
46F5   E5                     PUSH   hl   
46F6   CD 21 11               CALL   run   
46F9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4705   CD 24 10               CALL   printStr   
4708   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4715   E1                     POP   hl   
4716   E5                     PUSH   hl   
4717   E5                     PUSH   hl   
4718   CD 21 11               CALL   run   
471B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
472C   76                     HALT      
472D                EXPECTM_3188S148:      
472D   E1                     POP   HL   
472E                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
472E   31 00 5C               LD   SP,STACK   
4731   CD 58 10               CALL   coldInit   
4734   CD DA 5A               CALL   execStr   
4737   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
4756   E1                     POP   HL   
4757   E5                     PUSH   HL   
4758   11 14 00               LD   DE,20   
475B   B7                     OR   A   
475C   ED 52                  SBC   HL,DE   
475E   7D                     LD   A,L   
475F   B4                     OR   H   
4760   CA D9 47               JP   Z,expectM_3189S149   
4763   CD 24 10               CALL   printStr   
4766   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
478B   CD 24 10               CALL   printStr   
478E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
479D   21 14 00               LD   hl,20   
47A0   E5                     PUSH   hl   
47A1   E5                     PUSH   hl   
47A2   CD 21 11               CALL   run   
47A5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
47B1   CD 24 10               CALL   printStr   
47B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47C1   E1                     POP   hl   
47C2   E5                     PUSH   hl   
47C3   E5                     PUSH   hl   
47C4   CD 21 11               CALL   run   
47C7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
47D8   76                     HALT      
47D9                EXPECTM_3189S149:      
47D9   E1                     POP   HL   
47DA                          ;*Macro unroll:  test "3i= ( i i-- i/whi )^ + +", 6
47DA   31 00 5C               LD   SP,STACK   
47DD   CD 58 10               CALL   coldInit   
47E0   CD DA 5A               CALL   execStr   
47E3   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/whi )^ + +",0   
47FC   E1                     POP   HL   
47FD   E5                     PUSH   HL   
47FE   11 06 00               LD   DE,6   
4801   B7                     OR   A   
4802   ED 52                  SBC   HL,DE   
4804   7D                     LD   A,L   
4805   B4                     OR   H   
4806   CA 79 48               JP   Z,expectM_3190S150   
4809   CD 24 10               CALL   printStr   
480C   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/whi )^ + +"   
482B   CD 24 10               CALL   printStr   
482E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
483D   21 06 00               LD   hl,6   
4840   E5                     PUSH   hl   
4841   E5                     PUSH   hl   
4842   CD 21 11               CALL   run   
4845   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4851   CD 24 10               CALL   printStr   
4854   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4861   E1                     POP   hl   
4862   E5                     PUSH   hl   
4863   E5                     PUSH   hl   
4864   CD 21 11               CALL   run   
4867   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4878   76                     HALT      
4879                EXPECTM_3190S150:      
4879   E1                     POP   HL   
487A                          ;*Macro unroll:  test "3i= [ ( i i-- i/whi )^ ] 1;", 2
487A   31 00 5C               LD   SP,STACK   
487D   CD 58 10               CALL   coldInit   
4880   CD DA 5A               CALL   execStr   
4883   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/whi )^ ] 1;",0   
489F   E1                     POP   HL   
48A0   E5                     PUSH   HL   
48A1   11 02 00               LD   DE,2   
48A4   B7                     OR   A   
48A5   ED 52                  SBC   HL,DE   
48A7   7D                     LD   A,L   
48A8   B4                     OR   H   
48A9   CA 1F 49               JP   Z,expectM_3191S151   
48AC   CD 24 10               CALL   printStr   
48AF   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/whi )^ ] 1;"   
48D1   CD 24 10               CALL   printStr   
48D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48E3   21 02 00               LD   hl,2   
48E6   E5                     PUSH   hl   
48E7   E5                     PUSH   hl   
48E8   CD 21 11               CALL   run   
48EB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
48F7   CD 24 10               CALL   printStr   
48FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4907   E1                     POP   hl   
4908   E5                     PUSH   hl   
4909   E5                     PUSH   hl   
490A   CD 21 11               CALL   run   
490D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
491E   76                     HALT      
491F                EXPECTM_3191S151:      
491F   E1                     POP   HL   
4920                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
4920   31 00 5C               LD   SP,STACK   
4923   CD 58 10               CALL   coldInit   
4926   CD DA 5A               CALL   execStr   
4929   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ",0   
4950   E1                     POP   HL   
4951   E5                     PUSH   HL   
4952   11 0A 00               LD   DE,10   
4955   B7                     OR   A   
4956   ED 52                  SBC   HL,DE   
4958   7D                     LD   A,L   
4959   B4                     OR   H   
495A   CA DB 49               JP   Z,expectM_3192S152   
495D   CD 24 10               CALL   printStr   
4960   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/whi )^ j "   
498D   CD 24 10               CALL   printStr   
4990   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
499F   21 0A 00               LD   hl,10   
49A2   E5                     PUSH   hl   
49A3   E5                     PUSH   hl   
49A4   CD 21 11               CALL   run   
49A7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
49B3   CD 24 10               CALL   printStr   
49B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49C3   E1                     POP   hl   
49C4   E5                     PUSH   hl   
49C5   E5                     PUSH   hl   
49C6   CD 21 11               CALL   run   
49C9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
49DA   76                     HALT      
49DB                EXPECTM_3192S152:      
49DB   E1                     POP   HL   
49DC                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
49DC   31 00 5C               LD   SP,STACK   
49DF   CD 58 10               CALL   coldInit   
49E2   CD DA 5A               CALL   execStr   
49E5   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /whi )^ j ",0   
4A09   E1                     POP   HL   
4A0A   E5                     PUSH   HL   
4A0B   11 0A 00               LD   DE,10   
4A0E   B7                     OR   A   
4A0F   ED 52                  SBC   HL,DE   
4A11   7D                     LD   A,L   
4A12   B4                     OR   H   
4A13   CA 91 4A               JP   Z,expectM_3193S153   
4A16   CD 24 10               CALL   printStr   
4A19   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /whi )^ j "   
4A43   CD 24 10               CALL   printStr   
4A46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A55   21 0A 00               LD   hl,10   
4A58   E5                     PUSH   hl   
4A59   E5                     PUSH   hl   
4A5A   CD 21 11               CALL   run   
4A5D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4A69   CD 24 10               CALL   printStr   
4A6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A79   E1                     POP   hl   
4A7A   E5                     PUSH   hl   
4A7B   E5                     PUSH   hl   
4A7C   CD 21 11               CALL   run   
4A7F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4A90   76                     HALT      
4A91                EXPECTM_3193S153:      
4A91   E1                     POP   HL   
4A92                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
4A92   31 00 5C               LD   SP,STACK   
4A95   CD 58 10               CALL   coldInit   
4A98   CD DA 5A               CALL   execStr   
4A9B   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t",0   
4AC7   E1                     POP   HL   
4AC8   E5                     PUSH   HL   
4AC9   11 0C 00               LD   DE,12   
4ACC   B7                     OR   A   
4ACD   ED 52                  SBC   HL,DE   
4ACF   7D                     LD   A,L   
4AD0   B4                     OR   H   
4AD1   CA 57 4B               JP   Z,expectM_3194S154   
4AD4   CD 24 10               CALL   printStr   
4AD7   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t"   
4B09   CD 24 10               CALL   printStr   
4B0C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B1B   21 0C 00               LD   hl,12   
4B1E   E5                     PUSH   hl   
4B1F   E5                     PUSH   hl   
4B20   CD 21 11               CALL   run   
4B23   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4B2F   CD 24 10               CALL   printStr   
4B32   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B3F   E1                     POP   hl   
4B40   E5                     PUSH   hl   
4B41   E5                     PUSH   hl   
4B42   CD 21 11               CALL   run   
4B45   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4B56   76                     HALT      
4B57                EXPECTM_3194S154:      
4B57   E1                     POP   HL   
4B58                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
4B58   31 00 5C               LD   SP,STACK   
4B5B   CD 58 10               CALL   coldInit   
4B5E   CD DA 5A               CALL   execStr   
4B61   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^",0   
4B8D   E1                     POP   HL   
4B8E   E5                     PUSH   HL   
4B8F   11 06 00               LD   DE,6   
4B92   B7                     OR   A   
4B93   ED 52                  SBC   HL,DE   
4B95   7D                     LD   A,L   
4B96   B4                     OR   H   
4B97   CA 1D 4C               JP   Z,expectM_3195S155   
4B9A   CD 24 10               CALL   printStr   
4B9D   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^"   
4BCF   CD 24 10               CALL   printStr   
4BD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BE1   21 06 00               LD   hl,6   
4BE4   E5                     PUSH   hl   
4BE5   E5                     PUSH   hl   
4BE6   CD 21 11               CALL   run   
4BE9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4BF5   CD 24 10               CALL   printStr   
4BF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C05   E1                     POP   hl   
4C06   E5                     PUSH   hl   
4C07   E5                     PUSH   hl   
4C08   CD 21 11               CALL   run   
4C0B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4C1C   76                     HALT      
4C1D                EXPECTM_3195S155:      
4C1D   E1                     POP   HL   
4C1E                          ;*Macro unroll:  test "/tru \\f{1 %f/whi 2 +}^",3
4C1E   31 00 5C               LD   SP,STACK   
4C21   CD 58 10               CALL   coldInit   
4C24   CD DA 5A               CALL   execStr   
4C27   2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/tru \\f{1 %f/whi 2 +}^",0   
4C3E   E1                     POP   HL   
4C3F   E5                     PUSH   HL   
4C40   11 03 00               LD   DE,3   
4C43   B7                     OR   A   
4C44   ED 52                  SBC   HL,DE   
4C46   7D                     LD   A,L   
4C47   B4                     OR   H   
4C48   CA B9 4C               JP   Z,expectM_3196S156   
4C4B   CD 24 10               CALL   printStr   
4C4E   43 6F 64 65 3A 20 2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/tru \\f{1 %f/whi 2 +}^"   
4C6B   CD 24 10               CALL   printStr   
4C6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C7D   21 03 00               LD   hl,3   
4C80   E5                     PUSH   hl   
4C81   E5                     PUSH   hl   
4C82   CD 21 11               CALL   run   
4C85   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4C91   CD 24 10               CALL   printStr   
4C94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CA1   E1                     POP   hl   
4CA2   E5                     PUSH   hl   
4CA3   E5                     PUSH   hl   
4CA4   CD 21 11               CALL   run   
4CA7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4CB8   76                     HALT      
4CB9                EXPECTM_3196S156:      
4CB9   E1                     POP   HL   
4CBA                          ;*Macro unroll:  test "/fal \\f{1 %f/whi 2 +}^",1
4CBA   31 00 5C               LD   SP,STACK   
4CBD   CD 58 10               CALL   coldInit   
4CC0   CD DA 5A               CALL   execStr   
4CC3   2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/fal \\f{1 %f/whi 2 +}^",0   
4CDA   E1                     POP   HL   
4CDB   E5                     PUSH   HL   
4CDC   11 01 00               LD   DE,1   
4CDF   B7                     OR   A   
4CE0   ED 52                  SBC   HL,DE   
4CE2   7D                     LD   A,L   
4CE3   B4                     OR   H   
4CE4   CA 55 4D               JP   Z,expectM_3197S157   
4CE7   CD 24 10               CALL   printStr   
4CEA   43 6F 64 65 3A 20 2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/fal \\f{1 %f/whi 2 +}^"   
4D07   CD 24 10               CALL   printStr   
4D0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D19   21 01 00               LD   hl,1   
4D1C   E5                     PUSH   hl   
4D1D   E5                     PUSH   hl   
4D1E   CD 21 11               CALL   run   
4D21   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4D2D   CD 24 10               CALL   printStr   
4D30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D3D   E1                     POP   hl   
4D3E   E5                     PUSH   hl   
4D3F   E5                     PUSH   hl   
4D40   CD 21 11               CALL   run   
4D43   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4D54   76                     HALT      
4D55                EXPECTM_3197S157:      
4D55   E1                     POP   HL   
4D56                          ;*Macro unroll:  test "_A 1 - /adr", NUL
4D56   31 00 5C               LD   SP,STACK   
4D59   CD 58 10               CALL   coldInit   
4D5C   CD DA 5A               CALL   execStr   
4D5F   5F 41 20 31 20 2D 20 2F 61 64 72 00 DB   "_A 1 - /adr",0   
4D6B   E1                     POP   HL   
4D6C   E5                     PUSH   HL   
4D6D   11 00 00               LD   DE,NUL   
4D70   B7                     OR   A   
4D71   ED 52                  SBC   HL,DE   
4D73   7D                     LD   A,L   
4D74   B4                     OR   H   
4D75   CA DB 4D               JP   Z,expectM_3198S158   
4D78   CD 24 10               CALL   printStr   
4D7B   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_A 1 - /adr"   
4D8D   CD 24 10               CALL   printStr   
4D90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D9F   21 00 00               LD   hl,NUL   
4DA2   E5                     PUSH   hl   
4DA3   E5                     PUSH   hl   
4DA4   CD 21 11               CALL   run   
4DA7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4DB3   CD 24 10               CALL   printStr   
4DB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DC3   E1                     POP   hl   
4DC4   E5                     PUSH   hl   
4DC5   E5                     PUSH   hl   
4DC6   CD 21 11               CALL   run   
4DC9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4DDA   76                     HALT      
4DDB                EXPECTM_3198S158:      
4DDB   E1                     POP   HL   
4DDC                          ;*Macro unroll:  test "_Z 1 + /adr", NUL
4DDC   31 00 5C               LD   SP,STACK   
4DDF   CD 58 10               CALL   coldInit   
4DE2   CD DA 5A               CALL   execStr   
4DE5   5F 5A 20 31 20 2B 20 2F 61 64 72 00 DB   "_Z 1 + /adr",0   
4DF1   E1                     POP   HL   
4DF2   E5                     PUSH   HL   
4DF3   11 00 00               LD   DE,NUL   
4DF6   B7                     OR   A   
4DF7   ED 52                  SBC   HL,DE   
4DF9   7D                     LD   A,L   
4DFA   B4                     OR   H   
4DFB   CA 61 4E               JP   Z,expectM_3199S159   
4DFE   CD 24 10               CALL   printStr   
4E01   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_Z 1 + /adr"   
4E13   CD 24 10               CALL   printStr   
4E16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E25   21 00 00               LD   hl,NUL   
4E28   E5                     PUSH   hl   
4E29   E5                     PUSH   hl   
4E2A   CD 21 11               CALL   run   
4E2D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4E39   CD 24 10               CALL   printStr   
4E3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E49   E1                     POP   hl   
4E4A   E5                     PUSH   hl   
4E4B   E5                     PUSH   hl   
4E4C   CD 21 11               CALL   run   
4E4F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4E60   76                     HALT      
4E61                EXPECTM_3199S159:      
4E61   E1                     POP   HL   
4E62                          ;*Macro unroll:  test "_a 1 - /adr", NUL
4E62   31 00 5C               LD   SP,STACK   
4E65   CD 58 10               CALL   coldInit   
4E68   CD DA 5A               CALL   execStr   
4E6B   5F 61 20 31 20 2D 20 2F 61 64 72 00 DB   "_a 1 - /adr",0   
4E77   E1                     POP   HL   
4E78   E5                     PUSH   HL   
4E79   11 00 00               LD   DE,NUL   
4E7C   B7                     OR   A   
4E7D   ED 52                  SBC   HL,DE   
4E7F   7D                     LD   A,L   
4E80   B4                     OR   H   
4E81   CA E7 4E               JP   Z,expectM_3200S160   
4E84   CD 24 10               CALL   printStr   
4E87   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_a 1 - /adr"   
4E99   CD 24 10               CALL   printStr   
4E9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EAB   21 00 00               LD   hl,NUL   
4EAE   E5                     PUSH   hl   
4EAF   E5                     PUSH   hl   
4EB0   CD 21 11               CALL   run   
4EB3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4EBF   CD 24 10               CALL   printStr   
4EC2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ECF   E1                     POP   hl   
4ED0   E5                     PUSH   hl   
4ED1   E5                     PUSH   hl   
4ED2   CD 21 11               CALL   run   
4ED5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4EE6   76                     HALT      
4EE7                EXPECTM_3200S160:      
4EE7   E1                     POP   HL   
4EE8                          ;*Macro unroll:  test "_z 1 + /adr", NUL
4EE8   31 00 5C               LD   SP,STACK   
4EEB   CD 58 10               CALL   coldInit   
4EEE   CD DA 5A               CALL   execStr   
4EF1   5F 7A 20 31 20 2B 20 2F 61 64 72 00 DB   "_z 1 + /adr",0   
4EFD   E1                     POP   HL   
4EFE   E5                     PUSH   HL   
4EFF   11 00 00               LD   DE,NUL   
4F02   B7                     OR   A   
4F03   ED 52                  SBC   HL,DE   
4F05   7D                     LD   A,L   
4F06   B4                     OR   H   
4F07   CA 6D 4F               JP   Z,expectM_3201S161   
4F0A   CD 24 10               CALL   printStr   
4F0D   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_z 1 + /adr"   
4F1F   CD 24 10               CALL   printStr   
4F22   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F31   21 00 00               LD   hl,NUL   
4F34   E5                     PUSH   hl   
4F35   E5                     PUSH   hl   
4F36   CD 21 11               CALL   run   
4F39   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4F45   CD 24 10               CALL   printStr   
4F48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F55   E1                     POP   hl   
4F56   E5                     PUSH   hl   
4F57   E5                     PUSH   hl   
4F58   CD 21 11               CALL   run   
4F5B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4F6C   76                     HALT      
4F6D                EXPECTM_3201S161:      
4F6D   E1                     POP   HL   
4F6E                          ;*Macro unroll:  test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
4F6E   31 00 5C               LD   SP,STACK   
4F71   CD 58 10               CALL   coldInit   
4F74   CD DA 5A               CALL   execStr   
4F77   5F 7A 20 2F 61 64 72 00 DB   "_z /adr",0   
4F7F   E1                     POP   HL   
4F80   E5                     PUSH   HL   
4F81   11 66 5E               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4F84   B7                     OR   A   
4F85   ED 52                  SBC   HL,DE   
4F87   7D                     LD   A,L   
4F88   B4                     OR   H   
4F89   CA EB 4F               JP   Z,expectM_3202S162   
4F8C   CD 24 10               CALL   printStr   
4F8F   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 72 00 .CSTR   "Code: ","_z /adr"   
4F9D   CD 24 10               CALL   printStr   
4FA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FAF   21 66 5E               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4FB2   E5                     PUSH   hl   
4FB3   E5                     PUSH   hl   
4FB4   CD 21 11               CALL   run   
4FB7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4FC3   CD 24 10               CALL   printStr   
4FC6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FD3   E1                     POP   hl   
4FD4   E5                     PUSH   hl   
4FD5   E5                     PUSH   hl   
4FD6   CD 21 11               CALL   run   
4FD9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4FEA   76                     HALT      
4FEB                EXPECTM_3202S162:      
4FEB   E1                     POP   HL   
4FEC                          ;*Macro unroll:  test "_a /adr", VARS + ("Z"-"A"+1)*2
4FEC   31 00 5C               LD   SP,STACK   
4FEF   CD 58 10               CALL   coldInit   
4FF2   CD DA 5A               CALL   execStr   
4FF5   5F 61 20 2F 61 64 72 00 DB   "_a /adr",0   
4FFD   E1                     POP   HL   
4FFE   E5                     PUSH   HL   
4FFF   11 34 5E               LD   DE,VARS + ("Z"-"A"+1)*2   
5002   B7                     OR   A   
5003   ED 52                  SBC   HL,DE   
5005   7D                     LD   A,L   
5006   B4                     OR   H   
5007   CA 69 50               JP   Z,expectM_3203S163   
500A   CD 24 10               CALL   printStr   
500D   43 6F 64 65 3A 20 5F 61 20 2F 61 64 72 00 .CSTR   "Code: ","_a /adr"   
501B   CD 24 10               CALL   printStr   
501E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
502D   21 34 5E               LD   hl,VARS + ("Z"-"A"+1)*2   
5030   E5                     PUSH   hl   
5031   E5                     PUSH   hl   
5032   CD 21 11               CALL   run   
5035   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5041   CD 24 10               CALL   printStr   
5044   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5051   E1                     POP   hl   
5052   E5                     PUSH   hl   
5053   E5                     PUSH   hl   
5054   CD 21 11               CALL   run   
5057   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5068   76                     HALT      
5069                EXPECTM_3203S163:      
5069   E1                     POP   HL   
506A                          ;*Macro unroll:  test "_Z /adr", VARS + ("Z"-"A")*2
506A   31 00 5C               LD   SP,STACK   
506D   CD 58 10               CALL   coldInit   
5070   CD DA 5A               CALL   execStr   
5073   5F 5A 20 2F 61 64 72 00 DB   "_Z /adr",0   
507B   E1                     POP   HL   
507C   E5                     PUSH   HL   
507D   11 32 5E               LD   DE,VARS + ("Z"-"A")*2   
5080   B7                     OR   A   
5081   ED 52                  SBC   HL,DE   
5083   7D                     LD   A,L   
5084   B4                     OR   H   
5085   CA E7 50               JP   Z,expectM_3204S164   
5088   CD 24 10               CALL   printStr   
508B   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 72 00 .CSTR   "Code: ","_Z /adr"   
5099   CD 24 10               CALL   printStr   
509C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50AB   21 32 5E               LD   hl,VARS + ("Z"-"A")*2   
50AE   E5                     PUSH   hl   
50AF   E5                     PUSH   hl   
50B0   CD 21 11               CALL   run   
50B3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
50BF   CD 24 10               CALL   printStr   
50C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50CF   E1                     POP   hl   
50D0   E5                     PUSH   hl   
50D1   E5                     PUSH   hl   
50D2   CD 21 11               CALL   run   
50D5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
50E6   76                     HALT      
50E7                EXPECTM_3204S164:      
50E7   E1                     POP   HL   
50E8                          ;*Macro unroll:  test "_A /adr", VARS
50E8   31 00 5C               LD   SP,STACK   
50EB   CD 58 10               CALL   coldInit   
50EE   CD DA 5A               CALL   execStr   
50F1   5F 41 20 2F 61 64 72 00 DB   "_A /adr",0   
50F9   E1                     POP   HL   
50FA   E5                     PUSH   HL   
50FB   11 00 5E               LD   DE,VARS   
50FE   B7                     OR   A   
50FF   ED 52                  SBC   HL,DE   
5101   7D                     LD   A,L   
5102   B4                     OR   H   
5103   CA 65 51               JP   Z,expectM_3205S165   
5106   CD 24 10               CALL   printStr   
5109   43 6F 64 65 3A 20 5F 41 20 2F 61 64 72 00 .CSTR   "Code: ","_A /adr"   
5117   CD 24 10               CALL   printStr   
511A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5129   21 00 5E               LD   hl,VARS   
512C   E5                     PUSH   hl   
512D   E5                     PUSH   hl   
512E   CD 21 11               CALL   run   
5131   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
513D   CD 24 10               CALL   printStr   
5140   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
514D   E1                     POP   hl   
514E   E5                     PUSH   hl   
514F   E5                     PUSH   hl   
5150   CD 21 11               CALL   run   
5153   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5164   76                     HALT      
5165                EXPECTM_3205S165:      
5165   E1                     POP   HL   
5166                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
5166   31 00 5C               LD   SP,STACK   
5169   CD 58 10               CALL   coldInit   
516C   CD DA 5A               CALL   execStr   
516F   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
517C   E1                     POP   HL   
517D   E5                     PUSH   HL   
517E   11 01 00               LD   DE,1   
5181   B7                     OR   A   
5182   ED 52                  SBC   HL,DE   
5184   7D                     LD   A,L   
5185   B4                     OR   H   
5186   CA ED 51               JP   Z,expectM_3206S166   
5189   CD 24 10               CALL   printStr   
518C   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
519F   CD 24 10               CALL   printStr   
51A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51B1   21 01 00               LD   hl,1   
51B4   E5                     PUSH   hl   
51B5   E5                     PUSH   hl   
51B6   CD 21 11               CALL   run   
51B9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
51C5   CD 24 10               CALL   printStr   
51C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51D5   E1                     POP   hl   
51D6   E5                     PUSH   hl   
51D7   E5                     PUSH   hl   
51D8   CD 21 11               CALL   run   
51DB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
51EC   76                     HALT      
51ED                EXPECTM_3206S166:      
51ED   E1                     POP   HL   
51EE                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
51EE   31 00 5C               LD   SP,STACK   
51F1   CD 58 10               CALL   coldInit   
51F4   CD DA 5A               CALL   execStr   
51F7   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
520B   E1                     POP   HL   
520C   E5                     PUSH   HL   
520D   11 03 00               LD   DE,3   
5210   B7                     OR   A   
5211   ED 52                  SBC   HL,DE   
5213   7D                     LD   A,L   
5214   B4                     OR   H   
5215   CA 83 52               JP   Z,expectM_3207S167   
5218   CD 24 10               CALL   printStr   
521B   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
5235   CD 24 10               CALL   printStr   
5238   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5247   21 03 00               LD   hl,3   
524A   E5                     PUSH   hl   
524B   E5                     PUSH   hl   
524C   CD 21 11               CALL   run   
524F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
525B   CD 24 10               CALL   printStr   
525E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
526B   E1                     POP   hl   
526C   E5                     PUSH   hl   
526D   E5                     PUSH   hl   
526E   CD 21 11               CALL   run   
5271   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5282   76                     HALT      
5283                EXPECTM_3207S167:      
5283   E1                     POP   HL   
5284                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
5284   31 00 5C               LD   SP,STACK   
5287   CD 58 10               CALL   coldInit   
528A   CD DA 5A               CALL   execStr   
528D   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
52A4   E1                     POP   HL   
52A5   E5                     PUSH   HL   
52A6   11 02 00               LD   DE,2   
52A9   B7                     OR   A   
52AA   ED 52                  SBC   HL,DE   
52AC   7D                     LD   A,L   
52AD   B4                     OR   H   
52AE   CA 1F 53               JP   Z,expectM_3208S168   
52B1   CD 24 10               CALL   printStr   
52B4   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
52D1   CD 24 10               CALL   printStr   
52D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52E3   21 02 00               LD   hl,2   
52E6   E5                     PUSH   hl   
52E7   E5                     PUSH   hl   
52E8   CD 21 11               CALL   run   
52EB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
52F7   CD 24 10               CALL   printStr   
52FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5307   E1                     POP   hl   
5308   E5                     PUSH   hl   
5309   E5                     PUSH   hl   
530A   CD 21 11               CALL   run   
530D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
531E   76                     HALT      
531F                EXPECTM_3208S168:      
531F   E1                     POP   HL   
5320                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
5320   31 00 5C               LD   SP,STACK   
5323   CD 58 10               CALL   coldInit   
5326   CD DA 5A               CALL   execStr   
5329   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
534C   E1                     POP   HL   
534D   E5                     PUSH   HL   
534E   11 01 00               LD   DE,1   
5351   B7                     OR   A   
5352   ED 52                  SBC   HL,DE   
5354   7D                     LD   A,L   
5355   B4                     OR   H   
5356   CA D3 53               JP   Z,expectM_3209S169   
5359   CD 24 10               CALL   printStr   
535C   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
5385   CD 24 10               CALL   printStr   
5388   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5397   21 01 00               LD   hl,1   
539A   E5                     PUSH   hl   
539B   E5                     PUSH   hl   
539C   CD 21 11               CALL   run   
539F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
53AB   CD 24 10               CALL   printStr   
53AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53BB   E1                     POP   hl   
53BC   E5                     PUSH   hl   
53BD   E5                     PUSH   hl   
53BE   CD 21 11               CALL   run   
53C1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
53D2   76                     HALT      
53D3                EXPECTM_3209S169:      
53D3   E1                     POP   HL   
53D4                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
53D4   31 00 5C               LD   SP,STACK   
53D7   CD 58 10               CALL   coldInit   
53DA   CD DA 5A               CALL   execStr   
53DD   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
5400   E1                     POP   HL   
5401   E5                     PUSH   HL   
5402   11 01 00               LD   DE,1   
5405   B7                     OR   A   
5406   ED 52                  SBC   HL,DE   
5408   7D                     LD   A,L   
5409   B4                     OR   H   
540A   CA 87 54               JP   Z,expectM_3210S170   
540D   CD 24 10               CALL   printStr   
5410   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
5439   CD 24 10               CALL   printStr   
543C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
544B   21 01 00               LD   hl,1   
544E   E5                     PUSH   hl   
544F   E5                     PUSH   hl   
5450   CD 21 11               CALL   run   
5453   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
545F   CD 24 10               CALL   printStr   
5462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
546F   E1                     POP   hl   
5470   E5                     PUSH   hl   
5471   E5                     PUSH   hl   
5472   CD 21 11               CALL   run   
5475   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5486   76                     HALT      
5487                EXPECTM_3210S170:      
5487   E1                     POP   HL   
5488                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
5488   31 00 5C               LD   SP,STACK   
548B   CD 58 10               CALL   coldInit   
548E   CD DA 5A               CALL   execStr   
5491   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
54C1   E1                     POP   HL   
54C2   E5                     PUSH   HL   
54C3   11 02 00               LD   DE,2   
54C6   B7                     OR   A   
54C7   ED 52                  SBC   HL,DE   
54C9   7D                     LD   A,L   
54CA   B4                     OR   H   
54CB   CA 55 55               JP   Z,expectM_3211S171   
54CE   CD 24 10               CALL   printStr   
54D1   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
5507   CD 24 10               CALL   printStr   
550A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5519   21 02 00               LD   hl,2   
551C   E5                     PUSH   hl   
551D   E5                     PUSH   hl   
551E   CD 21 11               CALL   run   
5521   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
552D   CD 24 10               CALL   printStr   
5530   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
553D   E1                     POP   hl   
553E   E5                     PUSH   hl   
553F   E5                     PUSH   hl   
5540   CD 21 11               CALL   run   
5543   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5554   76                     HALT      
5555                EXPECTM_3211S171:      
5555   E1                     POP   HL   
5556                          ;*Macro unroll:  test "'hello'/sln",5
5556   31 00 5C               LD   SP,STACK   
5559   CD 58 10               CALL   coldInit   
555C   CD DA 5A               CALL   execStr   
555F   27 68 65 6C 6C 6F 27 2F 73 6C 6E 00 DB   "'hello'/sln",0   
556B   E1                     POP   HL   
556C   E5                     PUSH   HL   
556D   11 05 00               LD   DE,5   
5570   B7                     OR   A   
5571   ED 52                  SBC   HL,DE   
5573   7D                     LD   A,L   
5574   B4                     OR   H   
5575   CA DB 55               JP   Z,expectM_3212S172   
5578   CD 24 10               CALL   printStr   
557B   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 6E 00 .CSTR   "Code: ","'hello'/sln"   
558D   CD 24 10               CALL   printStr   
5590   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
559F   21 05 00               LD   hl,5   
55A2   E5                     PUSH   hl   
55A3   E5                     PUSH   hl   
55A4   CD 21 11               CALL   run   
55A7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
55B3   CD 24 10               CALL   printStr   
55B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55C3   E1                     POP   hl   
55C4   E5                     PUSH   hl   
55C5   E5                     PUSH   hl   
55C6   CD 21 11               CALL   run   
55C9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
55DA   76                     HALT      
55DB                EXPECTM_3212S172:      
55DB   E1                     POP   HL   
55DC                          ;*Macro unroll:  test "'hello' 'hell' /scp", false
55DC   31 00 5C               LD   SP,STACK   
55DF   CD 58 10               CALL   coldInit   
55E2   CD DA 5A               CALL   execStr   
55E5   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 70 00 DB   "'hello' 'hell' /scp",0   
55F9   E1                     POP   HL   
55FA   E5                     PUSH   HL   
55FB   11 00 00               LD   DE,false   
55FE   B7                     OR   A   
55FF   ED 52                  SBC   HL,DE   
5601   7D                     LD   A,L   
5602   B4                     OR   H   
5603   CA 71 56               JP   Z,expectM_3213S173   
5606   CD 24 10               CALL   printStr   
5609   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 70 00 .CSTR   "Code: ","'hello' 'hell' /scp"   
5623   CD 24 10               CALL   printStr   
5626   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5635   21 00 00               LD   hl,false   
5638   E5                     PUSH   hl   
5639   E5                     PUSH   hl   
563A   CD 21 11               CALL   run   
563D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5649   CD 24 10               CALL   printStr   
564C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5659   E1                     POP   hl   
565A   E5                     PUSH   hl   
565B   E5                     PUSH   hl   
565C   CD 21 11               CALL   run   
565F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5670   76                     HALT      
5671                EXPECTM_3213S173:      
5671   E1                     POP   HL   
5672                          ;*Macro unroll:  test "'hello' 'hello' /scp", true
5672   31 00 5C               LD   SP,STACK   
5675   CD 58 10               CALL   coldInit   
5678   CD DA 5A               CALL   execStr   
567B   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 70 00 DB   "'hello' 'hello' /scp",0   
5690   E1                     POP   HL   
5691   E5                     PUSH   HL   
5692   11 FF FF               LD   DE,true   
5695   B7                     OR   A   
5696   ED 52                  SBC   HL,DE   
5698   7D                     LD   A,L   
5699   B4                     OR   H   
569A   CA 09 57               JP   Z,expectM_3214S174   
569D   CD 24 10               CALL   printStr   
56A0   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 70 00 .CSTR   "Code: ","'hello' 'hello' /scp"   
56BB   CD 24 10               CALL   printStr   
56BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56CD   21 FF FF               LD   hl,true   
56D0   E5                     PUSH   hl   
56D1   E5                     PUSH   hl   
56D2   CD 21 11               CALL   run   
56D5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
56E1   CD 24 10               CALL   printStr   
56E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56F1   E1                     POP   hl   
56F2   E5                     PUSH   hl   
56F3   E5                     PUSH   hl   
56F4   CD 21 11               CALL   run   
56F7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5708   76                     HALT      
5709                EXPECTM_3214S174:      
5709   E1                     POP   HL   
570A                          ;*Macro unroll:  test "[1 2 3]** + +", 6
570A   31 00 5C               LD   SP,STACK   
570D   CD 58 10               CALL   coldInit   
5710   CD DA 5A               CALL   execStr   
5713   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
5721   E1                     POP   HL   
5722   E5                     PUSH   HL   
5723   11 06 00               LD   DE,6   
5726   B7                     OR   A   
5727   ED 52                  SBC   HL,DE   
5729   7D                     LD   A,L   
572A   B4                     OR   H   
572B   CA 93 57               JP   Z,expectM_3215S175   
572E   CD 24 10               CALL   printStr   
5731   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
5745   CD 24 10               CALL   printStr   
5748   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5757   21 06 00               LD   hl,6   
575A   E5                     PUSH   hl   
575B   E5                     PUSH   hl   
575C   CD 21 11               CALL   run   
575F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
576B   CD 24 10               CALL   printStr   
576E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
577B   E1                     POP   hl   
577C   E5                     PUSH   hl   
577D   E5                     PUSH   hl   
577E   CD 21 11               CALL   run   
5781   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5792   76                     HALT      
5793                EXPECTM_3215S175:      
5793   E1                     POP   HL   
5794                          ;*Macro unroll:  test "/byt[_a [_b _c]** _d]2;", $63
5794   31 00 5C               LD   SP,STACK   
5797   CD 58 10               CALL   coldInit   
579A   CD DA 5A               CALL   execStr   
579D   2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/byt[_a [_b _c]** _d]2;",0   
57B5   E1                     POP   HL   
57B6   E5                     PUSH   HL   
57B7   11 63 00               LD   DE,$63   
57BA   B7                     OR   A   
57BB   ED 52                  SBC   HL,DE   
57BD   7D                     LD   A,L   
57BE   B4                     OR   H   
57BF   CA 31 58               JP   Z,expectM_3216S176   
57C2   CD 24 10               CALL   printStr   
57C5   43 6F 64 65 3A 20 2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/byt[_a [_b _c]** _d]2;"   
57E3   CD 24 10               CALL   printStr   
57E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
57F5   21 63 00               LD   hl,$63   
57F8   E5                     PUSH   hl   
57F9   E5                     PUSH   hl   
57FA   CD 21 11               CALL   run   
57FD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5809   CD 24 10               CALL   printStr   
580C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5819   E1                     POP   hl   
581A   E5                     PUSH   hl   
581B   E5                     PUSH   hl   
581C   CD 21 11               CALL   run   
581F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5830   76                     HALT      
5831                EXPECTM_3216S176:      
5831   E1                     POP   HL   
5832                          ;*Macro unroll:  test "_B [_A {1} _B {2}] /sel", 2
5832   31 00 5C               LD   SP,STACK   
5835   CD 58 10               CALL   coldInit   
5838   CD DA 5A               CALL   execStr   
583B   5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 DB   "_B [_A {1} _B {2}] /sel",0   
5853   E1                     POP   HL   
5854   E5                     PUSH   HL   
5855   11 02 00               LD   DE,2   
5858   B7                     OR   A   
5859   ED 52                  SBC   HL,DE   
585B   7D                     LD   A,L   
585C   B4                     OR   H   
585D   CA CF 58               JP   Z,expectM_3217S177   
5860   CD 24 10               CALL   printStr   
5863   43 6F 64 65 3A 20 5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 .CSTR   "Code: ","_B [_A {1} _B {2}] /sel"   
5881   CD 24 10               CALL   printStr   
5884   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5893   21 02 00               LD   hl,2   
5896   E5                     PUSH   hl   
5897   E5                     PUSH   hl   
5898   CD 21 11               CALL   run   
589B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
58A7   CD 24 10               CALL   printStr   
58AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58B7   E1                     POP   hl   
58B8   E5                     PUSH   hl   
58B9   E5                     PUSH   hl   
58BA   CD 21 11               CALL   run   
58BD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
58CE   76                     HALT      
58CF                EXPECTM_3217S177:      
58CF   E1                     POP   HL   
58D0                          ;*Macro unroll:  test "1 2 /max", 2
58D0   31 00 5C               LD   SP,STACK   
58D3   CD 58 10               CALL   coldInit   
58D6   CD DA 5A               CALL   execStr   
58D9   31 20 32 20 2F 6D 61 78 00 DB   "1 2 /max",0   
58E2   E1                     POP   HL   
58E3   E5                     PUSH   HL   
58E4   11 02 00               LD   DE,2   
58E7   B7                     OR   A   
58E8   ED 52                  SBC   HL,DE   
58EA   7D                     LD   A,L   
58EB   B4                     OR   H   
58EC   CA 4F 59               JP   Z,expectM_3218S178   
58EF   CD 24 10               CALL   printStr   
58F2   43 6F 64 65 3A 20 31 20 32 20 2F 6D 61 78 00 .CSTR   "Code: ","1 2 /max"   
5901   CD 24 10               CALL   printStr   
5904   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5913   21 02 00               LD   hl,2   
5916   E5                     PUSH   hl   
5917   E5                     PUSH   hl   
5918   CD 21 11               CALL   run   
591B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5927   CD 24 10               CALL   printStr   
592A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5937   E1                     POP   hl   
5938   E5                     PUSH   hl   
5939   E5                     PUSH   hl   
593A   CD 21 11               CALL   run   
593D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
594E   76                     HALT      
594F                EXPECTM_3218S178:      
594F   E1                     POP   HL   
5950                          ;*Macro unroll:  test "2 1 /max", 2
5950   31 00 5C               LD   SP,STACK   
5953   CD 58 10               CALL   coldInit   
5956   CD DA 5A               CALL   execStr   
5959   32 20 31 20 2F 6D 61 78 00 DB   "2 1 /max",0   
5962   E1                     POP   HL   
5963   E5                     PUSH   HL   
5964   11 02 00               LD   DE,2   
5967   B7                     OR   A   
5968   ED 52                  SBC   HL,DE   
596A   7D                     LD   A,L   
596B   B4                     OR   H   
596C   CA CF 59               JP   Z,expectM_3219S179   
596F   CD 24 10               CALL   printStr   
5972   43 6F 64 65 3A 20 32 20 31 20 2F 6D 61 78 00 .CSTR   "Code: ","2 1 /max"   
5981   CD 24 10               CALL   printStr   
5984   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5993   21 02 00               LD   hl,2   
5996   E5                     PUSH   hl   
5997   E5                     PUSH   hl   
5998   CD 21 11               CALL   run   
599B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
59A7   CD 24 10               CALL   printStr   
59AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59B7   E1                     POP   hl   
59B8   E5                     PUSH   hl   
59B9   E5                     PUSH   hl   
59BA   CD 21 11               CALL   run   
59BD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
59CE   76                     HALT      
59CF                EXPECTM_3219S179:      
59CF   E1                     POP   HL   
59D0                          ;*Macro unroll:  test "1 2 /min", 1
59D0   31 00 5C               LD   SP,STACK   
59D3   CD 58 10               CALL   coldInit   
59D6   CD DA 5A               CALL   execStr   
59D9   31 20 32 20 2F 6D 69 6E 00 DB   "1 2 /min",0   
59E2   E1                     POP   HL   
59E3   E5                     PUSH   HL   
59E4   11 01 00               LD   DE,1   
59E7   B7                     OR   A   
59E8   ED 52                  SBC   HL,DE   
59EA   7D                     LD   A,L   
59EB   B4                     OR   H   
59EC   CA 4F 5A               JP   Z,expectM_3220S180   
59EF   CD 24 10               CALL   printStr   
59F2   43 6F 64 65 3A 20 31 20 32 20 2F 6D 69 6E 00 .CSTR   "Code: ","1 2 /min"   
5A01   CD 24 10               CALL   printStr   
5A04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A13   21 01 00               LD   hl,1   
5A16   E5                     PUSH   hl   
5A17   E5                     PUSH   hl   
5A18   CD 21 11               CALL   run   
5A1B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5A27   CD 24 10               CALL   printStr   
5A2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A37   E1                     POP   hl   
5A38   E5                     PUSH   hl   
5A39   E5                     PUSH   hl   
5A3A   CD 21 11               CALL   run   
5A3D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5A4E   76                     HALT      
5A4F                EXPECTM_3220S180:      
5A4F   E1                     POP   HL   
5A50                          ;*Macro unroll:  test "2 1 /min", 1
5A50   31 00 5C               LD   SP,STACK   
5A53   CD 58 10               CALL   coldInit   
5A56   CD DA 5A               CALL   execStr   
5A59   32 20 31 20 2F 6D 69 6E 00 DB   "2 1 /min",0   
5A62   E1                     POP   HL   
5A63   E5                     PUSH   HL   
5A64   11 01 00               LD   DE,1   
5A67   B7                     OR   A   
5A68   ED 52                  SBC   HL,DE   
5A6A   7D                     LD   A,L   
5A6B   B4                     OR   H   
5A6C   CA CF 5A               JP   Z,expectM_3221S181   
5A6F   CD 24 10               CALL   printStr   
5A72   43 6F 64 65 3A 20 32 20 31 20 2F 6D 69 6E 00 .CSTR   "Code: ","2 1 /min"   
5A81   CD 24 10               CALL   printStr   
5A84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A93   21 01 00               LD   hl,1   
5A96   E5                     PUSH   hl   
5A97   E5                     PUSH   hl   
5A98   CD 21 11               CALL   run   
5A9B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5AA7   CD 24 10               CALL   printStr   
5AAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5AB7   E1                     POP   hl   
5AB8   E5                     PUSH   hl   
5AB9   E5                     PUSH   hl   
5ABA   CD 21 11               CALL   run   
5ABD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5ACE   76                     HALT      
5ACF                EXPECTM_3221S181:      
5ACF   E1                     POP   HL   
5AD0                             ; ; test "$1000 0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", $1000
5AD0                             ; 
5AD0   CD 24 10               CALL   printStr   
5AD3   44 6F 6E 65 21 00      .CSTR   "Done!"   
5AD9   76                     HALT      
5ADA                             ; executes a null teminated string (null executes exit_)
5ADA                             ; the string should be immedaitely following the call
5ADA                EXECSTR:      ; create a root stack frame
5ADA   C1                     POP   bc   ; bc = code*
5ADB   0B                     DEC   bc   ; dec to prepare for next routine
5ADC   11 00 00               LD   de,0   
5ADF   D5                     PUSH   de   ; push fake IP
5AE0   D5                     PUSH   de   ; push null arg_list*
5AE1   D5                     PUSH   de   ; push null first_arg*
5AE2   D5                     PUSH   de   ; push fake BP
5AE3   DD E9                  JP   (ix)   
5AE5                STKSIZE:   EQU   $100   ; Stack size
5AE5                TIBSIZE:   EQU   $100   ; 256 bytes
5AE5                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5AE5                          ALIGN   $100   
5B00                          DS   STKSIZE   
5C00                STACK:       
5C00                          ALIGN   $100   
5C00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5D00                          ALIGN   $100   
5D00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5E00                          ALIGN   $100   
5E00                VARS:        
5E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
5ED0                RESTARTS:      
5ED0                RST08:    DS   2   
5ED2                RST10:    DS   2   
5ED4                RST18:    DS   2   
5ED6                RST20:    DS   2   
5ED8                RST28:    DS   2   
5EDA                RST30:    DS   2   ; 
5EDC                BAUD:     DS   2   ; 
5EDE                INTVEC:   DS   2   ; 
5EE0                NMIVEC:   DS   2   ; 
5EE2                GETCVEC:   DS   2   ; 
5EE4                PUTCVEC:   DS   2   ; 
5EE6                SYSVARS:      
5EE6                             ; initialised sys variables (preserved)
5EE6                VTIBPTR:   DS   2   
5EE8                VBUFPTR:   DS   2   
5EEA                VHEAPPTR:   DS   2   
5EEC                VRECURPTR:   DS   2   
5EEE                VDATAWIDTH:   DS   1   
5EEF                VNUMBASE:   DS   1   
5EF0                VHEXPREFIX:   DS   1   
5EF1                VECHO:    DS   1   
5EF2                VSTRMODE:   DS   1   
5EF3                          DS   1   
5EF4                          DS   1   
5EF5                          DS   1   
5EF6                          DS   1   
5EF7                          DS   1   
5EF8                             ; uninitialised sys variables (preserved)
5EF8                VPOINTER:   DS   2   ; 
5EFA                VREMAIN:   DS   2   ; 
5EFC                VSAVEDIP:   DS   2   ; 
5EFE                VSAVEDSP:   DS   2   ; 
5F00                VSAVEDNEXT:   DS   2   ; 
5F02                VSAVEDBP:   DS   2   ; 
5F04                             ; uninitialised sys variables (unpreserved)
5F04                VTEMP1:   DS   2   ; 
5F06                VTEMP2:   DS   2   ; 
5F08                VTEMP3:   DS   2   ; 
5F0A                          DS   2   ; 
5F0C                TBPTR:    DS   2   ; reserved for tests
5F0E                TITLEBUF:   DS   20   
5F22                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 2576 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2598 IN MAIN.asm
                    > USED AT LINE 2682 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 2579 IN MAIN.asm
                    > USED AT LINE 2647 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2584 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2586 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          0413 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0422 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0429 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042C DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0437 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0442 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          0450 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046F DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048F DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          0491 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          04A1 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          04A2 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX:           04A8 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B4 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PRINTHEX2:          04BF DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
PRINTHEX3:          04CE DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX4:          04D7 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_B_:         0541 DEFINED AT LINE 825 IN MAIN.asm
COMMAND_D_:         0550 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_E_:         055B DEFINED AT LINE 841 IN MAIN.asm
COMMAND_F_:         056A DEFINED AT LINE 850 IN MAIN.asm
COMMAND_H_:         0595 DEFINED AT LINE 874 IN MAIN.asm
COMMAND_I_:         05A0 DEFINED AT LINE 881 IN MAIN.asm
COMMAND_M_:         05AB DEFINED AT LINE 888 IN MAIN.asm
COMAND_O_:          05BE DEFINED AT LINE 899 IN MAIN.asm
COMMAND_P_:         05C9 DEFINED AT LINE 906 IN MAIN.asm
COMMAND_R_:         05D0 DEFINED AT LINE 911 IN MAIN.asm
COMMAND_S_:         05D2 DEFINED AT LINE 914 IN MAIN.asm
COMMAND_T_:         05D4 DEFINED AT LINE 917 IN MAIN.asm
COMMAND_V_:         05D6 DEFINED AT LINE 920 IN MAIN.asm
COMMAND_W_:         05D8 DEFINED AT LINE 923 IN MAIN.asm
COMMAND_X_:         05DA DEFINED AT LINE 926 IN MAIN.asm
COMMAND_DEFAULT_:   05DC DEFINED AT LINE 929 IN MAIN.asm
COMMAND_R:          05DF DEFINED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
COMMAND_S:          05F6 DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
COMMAND_T:          0619 DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
COMMAND_V:          0624 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
COMMAND_W:          0633 DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
COMMAND_X:          0642 DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
COMMAND_DEFAULT:    064D DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
DIV:                0654 DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
DIV2:               065E DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
ABSOLUTE:           066F DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ABSOLUTE1:          067A DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
ADDROF:             067D DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
ADDROF2:            0683 DEFINED AT LINE 1049 IN MAIN.asm
ARRAYLENGTH:        0685 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
ARRAYLENGTH1:       068B DEFINED AT LINE 1061 IN MAIN.asm
WHILE:              068E DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
WHILE1:             0695 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
BYTEMODE:           06A8 DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
BYTEMODE1:          06AA DEFINED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
COMMENT:            06AF DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
DECBASE:            06B8 DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
DECBASE1:           06BA DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
ECHO:               06BF DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
HEXBASE:            06C5 DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
ERROR1:             06CA DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
INPUT:              06D0 DEFINED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
MEMALLOCATE:        06DB DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
MEMFREE:            06DD DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
MEMFREE1:           06DE DEFINED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
MEMFREEARRAY:       06E3 DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
MAXIMUM:            06E8 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
MAXIMUM1:           06F2 DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
MINIMUM:            06F4 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
MINIMUM1:           06FE DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
OUTPUT:             0700 DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
RETURN:             0709 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
RETURN1:            0710 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
RECUR:              0713 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
REMAIN:             0719 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
SELECT:             071F DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
SELECT1:            072A DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
SELECT1A:           073B DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
SELECT1B:           073C DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
SELECT2:            073F DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
STRINGBEGIN:        0746 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
STRINGEND:          074E DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
STRINGEND1:         0775 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
STRINGLENGTH:       077D DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
STRINGLENGTH1:      0783 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
STRINGLENGTH2:      0785 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
STRINGLENGTH3:      0789 DEFINED AT LINE 1296 IN MAIN.asm
STRINGCOMPARE:      078C DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
STRINGCOMPARE1:     078E DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
STRINGCOMPARE2:     0799 DEFINED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
STRINGCOMPARE3:     079E DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
STRINGCOMPARE4:     07A1 DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
VARIABLES:          07A4 DEFINED AT LINE 1326 IN MAIN.asm
VOID:               07AA DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
WORDMODE:           07B2 DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
XOR:                07B7 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
XOR1:               07B8 DEFINED AT LINE 1347 IN MAIN.asm
RANGESRC:           07C2 DEFINED AT LINE 32
                    > USED AT LINE 945 IN MAIN.asm
RANGESRCM_1812S1363: 07D1 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          085B DEFINED AT LINE 32
                    > USED AT LINE 817 IN MAIN.asm
ARRAYITERM_1831S1383: 0868 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08E3 DEFINED AT LINE 32
                    > USED AT LINE 958 IN MAIN.asm
STRINGITERM_1850S1403: 08F0 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0973 DEFINED AT LINE 32
                    > USED AT LINE 891 IN MAIN.asm
MAPM_1870S1425:     0980 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09B5 DEFINED AT LINE 32
                    > USED AT LINE 862 IN MAIN.asm
FILTERM_1884S1440:  09C3 DEFINED AT LINE 39
                    > USED AT LINE 35
SCAN1:              0A16 DEFINED AT LINE 32
                    > USED AT LINE 952 IN MAIN.asm
SCAN1M_1903S1460:   0A25 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A67 DEFINED AT LINE 32
                    > USED AT LINE 855 IN MAIN.asm
FOREACHM_1917S1475: 0A75 DEFINED AT LINE 39
                    > USED AT LINE 35
SOURCE:             0AB3 DEFINED AT LINE 32
                    > USED AT LINE 962 IN MAIN.asm
SOURCEM_1931S1490:  0ABF DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0AEE DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1941S1501: 0AFC DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B38 DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B47 DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
READSTRING:         0B50 DEFINED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B55 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
READSTRING2:        0B69 DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
READNUMBER:         0B72 DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
PERFORMM_1985S1550: 0B7B DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0B99 DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
PERFORMM_2002S1567: 0BA0 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0BA3 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
PERFORMM_2006S1571: 0BAA DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0BAB DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
TILDE:              0BB1 DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BB1 DEFINED AT LINE 1581 IN MAIN.asm
DOLLAR:             0BBB DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0BBB DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0BBE DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
HEXNUM2:            0BC6 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
QUESTION:           0BD8 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0BD8 DEFINED AT LINE 1617 IN MAIN.asm
QUOTE:              0BE5 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0BE5 DEFINED AT LINE 1631 IN MAIN.asm
STRING1:            0BEE DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
STRING2:            0BF1 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
STRING3:            0BF7 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
PERCENT:            0BFF DEFINED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0BFF DEFINED AT LINE 1658 IN MAIN.asm
ARG0:               0C1B DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
ARG0A:              0C24 DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
ARG1:               0C29 DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
ARG1A:              0C31 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
NUM:                0C34 DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C3D DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
NUM1:               0C3E DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
NUM2:               0C56 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
NUM3:               0C61 DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
RBRACE:             0C64 DEFINED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0C64 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
BLOCKEND1:          0C96 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
BLOCKEND2:          0CA2 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
BLOCKEND3:          0CB4 DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
BLOCKEND4:          0CC8 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
GOBLOCK:            0CD1 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0CF6 DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
GOBLOCK3:           0D00 DEFINED AT LINE 1821 IN MAIN.asm
GOFUNC:             0D04 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D1D DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
GOFUNC2:            0D23 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
GOFUNC3:            0D2E DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
GOFUNC4:            0D46 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
GOFUNC5:            0D49 DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
GOFUNC6:            0D4C DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
GOFUNC7:            0D4F DEFINED AT LINE 1884 IN MAIN.asm
GOFUNC8:            0D53 DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
ASSIGN:             0D5E DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0D60 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0D64 DEFINED AT LINE 1906 IN MAIN.asm
ASSIGN2:            0D6D DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
EQUALS:             0D6F DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0D76 DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0D7D DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0D82 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0D87 DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
TRUE1:              0D8A DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
NULL1:              0D90 DEFINED AT LINE 1951 IN MAIN.asm
FALSE1:             0D90 DEFINED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
SPREAD:             0D96 DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0DA3 DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
SPREAD2:            0DAE DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
SPREAD3:            0DB0 DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
SHIFTLEFT:          0DBA DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0DC4 DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
SHIFTLEFT3:         0DCC DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
SHIFTLEFT4:         0DCD DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
SHIFTRIGHT:         0DD6 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0DE0 DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
SHIFTRIGHT3:        0DE8 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
SHIFTRIGHT4:        0DEC DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
DIVIDE:             0DF5 DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
DIVIDE1:            0DFA DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
DIVIDE2:            0E07 DEFINED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
DIVIDE3:            0E08 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
DOTNEXT:            0E0E DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTNEXT1:           0E16 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
PARSEARGS:          0E28 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E32 DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
PARSEARGS1A:        0E3A DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
PARSEARGS2:         0E42 DEFINED AT LINE 2092 IN MAIN.asm
PARSEARGS3:         0E4A DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
PARSEARGS4:         0E4D DEFINED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
PARSEARGS5:         0E53 DEFINED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
PARSEBLOCK:         0E5E DEFINED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0E62 DEFINED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
PARSEBLOCK2:        0E7B DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
PARSEBLOCK3:        0E81 DEFINED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
PARSEBLOCK4:        0E9B DEFINED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
PARSEBLOCK5:        0E9E DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
PARSEBLOCK6:        0EC9 DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
CREATEFUNC:         0ECD DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0EEC DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
CREATEFUNC1:        0F04 DEFINED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
CREATEFUNC2:        0F17 DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
CREATEFUNC2A:       0F36 DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
CREATEFUNC3:        0F45 DEFINED AT LINE 2275 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
CREATEFUNC4:        0F50 DEFINED AT LINE 2286 IN MAIN.asm
CREATEFUNC5:        0F51 DEFINED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
VARIABLE:           0F6F DEFINED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
CONSTANT:           0F7E DEFINED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
CHARTABLE:          0F81 DEFINED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
CHARTABLE1:         0F8B DEFINED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
CHARTABLE2:         0F95 DEFINED AT LINE 2348 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
CHARTABLE3:         0F97 DEFINED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
CMDTABLE:           0F9C DEFINED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
CMDTABLE1:          0F9D DEFINED AT LINE 2363 IN MAIN.asm
CMDTABLE2:          0F9D DEFINED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
CMDTABLE3:          0FAA DEFINED AT LINE 2376 IN MAIN.asm
CMDTABLE4:          0FB4 DEFINED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
CMDTABLE5:          0FB9 DEFINED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
GETVARADDR:         0FBE DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
GETVARADDR1:        0FD0 DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
PUTSTR0:            0FD5 DEFINED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
PUTSTR:             0FD9 DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 2543 IN MAIN.asm
NESTING:            0FDE DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
                    > USED AT LINE 2599 IN MAIN.asm
NESTING0:           0FEC DEFINED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
NESTING1A:          0FF3 DEFINED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
NESTING1:           0FF6 DEFINED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
NESTING2:           1005 DEFINED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
NESTING3:           1007 DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
NESTING4:           1012 DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
PROMPT:             1014 DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
CRLF:               101D DEFINED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
PRINTSTR:           1024 DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2672 IN MAIN.asm
                    > USED AT LINE 2677 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 187
INIT:               102B DEFINED AT LINE 2491 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
INIT1:              1033 DEFINED AT LINE 2495 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
WARMINIT:           103B DEFINED AT LINE 2503 IN MAIN.asm
COLDBOOT0:          104E DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
COLDINIT:           1058 DEFINED AT LINE 2516 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          1069 DEFINED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
COLDSTART:          1076 DEFINED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
START:              107F DEFINED AT LINE 2538 IN MAIN.asm
START1:             1085 DEFINED AT LINE 2541 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
INTERPRET:          108B DEFINED AT LINE 2545 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
                    > USED AT LINE 2665 IN MAIN.asm
INTERPRET2:         1097 DEFINED AT LINE 2553 IN MAIN.asm
                    > USED AT LINE 2590 IN MAIN.asm
                    > USED AT LINE 2670 IN MAIN.asm
                    > USED AT LINE 2674 IN MAIN.asm
                    > USED AT LINE 2692 IN MAIN.asm
INTERPRET3:         109F DEFINED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
INTERPRET4:         10A5 DEFINED AT LINE 2567 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
INTERPRET5:         10AA DEFINED AT LINE 2574 IN MAIN.asm
                    > USED AT LINE 2600 IN MAIN.asm
                    > USED AT LINE 2615 IN MAIN.asm
INTERPRET5A:        10C3 DEFINED AT LINE 2589 IN MAIN.asm
INTERPRET6:         10C5 DEFINED AT LINE 2592 IN MAIN.asm
                    > USED AT LINE 2578 IN MAIN.asm
INTERPRET7:         10D3 DEFINED AT LINE 2602 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
INTERPRET8:         10E6 DEFINED AT LINE 2617 IN MAIN.asm
                    > USED AT LINE 2580 IN MAIN.asm
NEXT:               1101 DEFINED AT LINE 2630 IN MAIN.asm
                    > USED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
NEXT0:              1115 DEFINED AT LINE 2644 IN MAIN.asm
                    > USED AT LINE 2642 IN MAIN.asm
NEXT1:              1116 DEFINED AT LINE 2646 IN MAIN.asm
                    > USED AT LINE 2635 IN MAIN.asm
EXIT:               111D DEFINED AT LINE 2651 IN MAIN.asm
                    > USED AT LINE 2648 IN MAIN.asm
RUN:                1121 DEFINED AT LINE 2656 IN MAIN.asm
                    > USED AT LINE 2663 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              1125 DEFINED AT LINE 2661 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
BACKSPACE_:         1137 DEFINED AT LINE 2667 IN MAIN.asm
                    > USED AT LINE 2585 IN MAIN.asm
REEDIT_:            1147 DEFINED AT LINE 2676 IN MAIN.asm
                    > USED AT LINE 2587 IN MAIN.asm
REEDIT0:            1153 DEFINED AT LINE 2681 IN MAIN.asm
                    > USED AT LINE 2687 IN MAIN.asm
REEDIT1:            1157 DEFINED AT LINE 2684 IN MAIN.asm
                    > USED AT LINE 2680 IN MAIN.asm
F1:                 1167 DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
F1M_3059S12:        1172 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1173 DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
F2M_3061S15:        117E DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 117F DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
F3M_3063S18:        118A DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 118B DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
F4M_3065S21:        1196 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1200 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3086S46:    1277 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S47:    12EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S48:    1361 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S49:    13D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S50:    1445 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S51:    14B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S52:    152B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S53:    15A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S54:    1615 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S55:    1691 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S56:    1705 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S57:    1779 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S58:    17EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S59:    1865 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S60:    18E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S61:    195D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S62:    19D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S63:    1A55 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S64:    1AD7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S65:    1B57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S66:    1BD1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S67:    1C53 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S68:    1CD1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S69:    1D4B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S70:    1DC5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S71:    1E47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S72:    1EC1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S73:    1F3B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S74:    1FBB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S75:    204B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S76:    20C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S77:    2137 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S78:    21AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S79:    2227 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S80:    22A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S81:    2323 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S82:    239D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S83:    2425 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S84:    24AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S85:    2535 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S86:    25BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S87:    264D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S88:    26DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S89:    2769 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S90:    27F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S91:    2883 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S92:    290F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S93:    29A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S94:    2A1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S95:    2AA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S96:    2B33 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S97:    2BBF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S98:    2C43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S99:    2CBD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S100:   2D39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S101:   2DB5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S102:   2E2F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S103:   2EA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S104:   2F23 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S105:   2F9D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S106:   3017 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S107:   3091 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S108:   310B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S109:   3185 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S110:   3201 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S111:   327D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S112:   32F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S113:   3377 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S114:   33F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S115:   346D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S116:   34E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S117:   3563 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S118:   35E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S119:   367B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S120:   370F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S121:   3789 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S122:   3805 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S123:   3887 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S124:   390D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S125:   398F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S126:   3A1B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S127:   3AA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S128:   3B3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S129:   3BD5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S130:   3C5F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S131:   3CEF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S132:   3D81 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S133:   3E15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S134:   3EA7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S135:   3F47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S136:   3FD5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S137:   4071 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S138:   410F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S139:   41AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S140:   425B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S141:   4307 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S142:   4391 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S143:   4425 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S144:   44B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S145:   4547 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S146:   45DD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S147:   4681 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S148:   472D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S149:   47D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S150:   4879 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S151:   491F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S152:   49DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S153:   4A91 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S154:   4B57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S155:   4C1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S156:   4CB9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S157:   4D55 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S158:   4DDB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3199S159:   4E61 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3200S160:   4EE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3201S161:   4F6D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3202S162:   4FEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3203S163:   5069 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3204S164:   50E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3205S165:   5165 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3206S166:   51ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3207S167:   5283 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3208S168:   531F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3209S169:   53D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3210S170:   5487 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3211S171:   5555 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3212S172:   55DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3213S173:   5671 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3214S174:   5709 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3215S175:   5793 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3216S176:   5831 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3217S177:   58CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3218S178:   594F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3219S179:   59CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3220S180:   5A4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3221S181:   5ACF DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5ADA DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5C00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5C00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
                    > USED AT LINE 2558 IN MAIN.asm
                    > USED AT LINE 2594 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
                    > USED AT LINE 2619 IN MAIN.asm
                    > USED AT LINE 2622 IN MAIN.asm
                    > USED AT LINE 2679 IN MAIN.asm
                    > USED AT LINE 2688 IN MAIN.asm
BUFFER:             5D00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
VARS:               5E00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 2522 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           5ED0 DEFINED AT LINE 18 IN ram.asm
RST08:              5ED0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              5ED2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              5ED4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              5ED6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              5ED8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              5EDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               5EDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             5EDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             5EE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            5EE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            5EE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            5EE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2518 IN MAIN.asm
VTIBPTR:            5EE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 2621 IN MAIN.asm
VBUFPTR:            5EE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
VHEAPPTR:           5EEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
VRECURPTR:          5EEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
VDATAWIDTH:         5EEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
VNUMBASE:           5EEF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
VHEXPREFIX:         5EF0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 729 IN MAIN.asm
VECHO:              5EF1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
VSTRMODE:           5EF2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
VPOINTER:           5EF8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
VREMAIN:            5EFA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
VSAVEDIP:           5EFC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 2624 IN MAIN.asm
VSAVEDSP:           5EFE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2625 IN MAIN.asm
VSAVEDNEXT:         5F00 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
VSAVEDBP:           5F02 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2507 IN MAIN.asm
                    > USED AT LINE 2627 IN MAIN.asm
VTEMP1:             5F04 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
VTEMP2:             5F06 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
VTEMP3:             5F08 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
TBPTR:              5F0C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           5F0E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2493 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
HEAP:               5F22 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
